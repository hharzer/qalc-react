{"version":3,"sources":["webpack:///webpack/bootstrap 50f617538fbeb9222c14","webpack:///./node_modules/react/index.js","webpack:///./node_modules/react-dom/index.js","webpack:///./node_modules/fbjs/lib/emptyFunction.js","webpack:///./node_modules/object-assign/index.js","webpack:///./node_modules/mobx/lib/mobx.module.js","webpack:///./node_modules/fbjs/lib/emptyObject.js","webpack:///./node_modules/prop-types/index.js","webpack:///./node_modules/core-js/library/modules/_global.js","webpack:///./node_modules/babel-runtime/helpers/classCallCheck.js","webpack:///./node_modules/babel-runtime/helpers/possibleConstructorReturn.js","webpack:///./node_modules/babel-runtime/helpers/inherits.js","webpack:///./src/output.ts","webpack:///./node_modules/core-js/library/modules/_core.js","webpack:///./node_modules/core-js/library/modules/_object-dp.js","webpack:///./node_modules/core-js/library/modules/_descriptors.js","webpack:///./node_modules/core-js/library/modules/_has.js","webpack:///./src/libqalc/Tree.ts","webpack:///./node_modules/babel-runtime/helpers/extends.js","webpack:///./node_modules/core-js/library/modules/_export.js","webpack:///./node_modules/core-js/library/modules/_hide.js","webpack:///./node_modules/core-js/library/modules/_is-object.js","webpack:///./node_modules/core-js/library/modules/_to-iobject.js","webpack:///./node_modules/core-js/library/modules/_wks.js","webpack:///./node_modules/dom-align/es/utils.js","webpack:///./node_modules/css-loader/lib/css-base.js","webpack:///./node_modules/style-loader/lib/addStyles.js","webpack:///./node_modules/mobx-react/index.module.js","webpack:///./node_modules/react/cjs/react.production.min.js","webpack:///./src/libqalc/parser.ts","webpack:///./src/libqalc/globalScope.ts","webpack:///./src/libqalc/evaluator.ts","webpack:///./node_modules/react-dom/cjs/react-dom.production.min.js","webpack:///./node_modules/fbjs/lib/ExecutionEnvironment.js","webpack:///./node_modules/fbjs/lib/EventListener.js","webpack:///./node_modules/fbjs/lib/getActiveElement.js","webpack:///./node_modules/fbjs/lib/shallowEqual.js","webpack:///./node_modules/fbjs/lib/containsNode.js","webpack:///./node_modules/fbjs/lib/isTextNode.js","webpack:///./node_modules/fbjs/lib/isNode.js","webpack:///./node_modules/fbjs/lib/focusNode.js","webpack:///./node_modules/core-js/library/modules/_an-object.js","webpack:///./node_modules/core-js/library/modules/_fails.js","webpack:///(webpack)/buildin/global.js","webpack:///./style.scss?0f39","webpack:///./style.scss","webpack:///./node_modules/style-loader/lib/urls.js","webpack:///./node_modules/core-js/library/modules/_property-desc.js","webpack:///./node_modules/core-js/library/modules/_object-keys.js","webpack:///./node_modules/core-js/library/modules/_uid.js","webpack:///./node_modules/core-js/library/modules/_object-pie.js","webpack:///./node_modules/babel-runtime/helpers/typeof.js","webpack:///./src/unitNumber/UnitNumber.ts","webpack:///./node_modules/core-js/library/modules/_to-primitive.js","webpack:///./node_modules/core-js/library/modules/_defined.js","webpack:///./node_modules/core-js/library/modules/_to-integer.js","webpack:///./node_modules/core-js/library/modules/_shared-key.js","webpack:///./node_modules/core-js/library/modules/_shared.js","webpack:///./node_modules/core-js/library/modules/_enum-bug-keys.js","webpack:///./node_modules/core-js/library/modules/_object-gops.js","webpack:///./node_modules/core-js/library/modules/_library.js","webpack:///./node_modules/core-js/library/modules/_iterators.js","webpack:///./node_modules/core-js/library/modules/_object-create.js","webpack:///./node_modules/core-js/library/modules/_set-to-string-tag.js","webpack:///./node_modules/core-js/library/modules/_wks-ext.js","webpack:///./node_modules/core-js/library/modules/_wks-define.js","webpack:///./node_modules/babel-runtime/helpers/createClass.js","webpack:///./src/unitNumber/DimensionMap.ts","webpack:///./src/unitNumber/Dimension.ts","webpack:///./src/libqalc/init.ts","webpack:///./node_modules/core-js/library/modules/_ctx.js","webpack:///./node_modules/core-js/library/modules/_ie8-dom-define.js","webpack:///./node_modules/core-js/library/modules/_dom-create.js","webpack:///./node_modules/core-js/library/modules/_object-keys-internal.js","webpack:///./node_modules/core-js/library/modules/_iobject.js","webpack:///./node_modules/core-js/library/modules/_cof.js","webpack:///./node_modules/core-js/library/modules/_to-object.js","webpack:///./node_modules/babel-runtime/helpers/objectWithoutProperties.js","webpack:///./node_modules/core-js/library/modules/_iter-define.js","webpack:///./node_modules/core-js/library/modules/_redefine.js","webpack:///./node_modules/core-js/library/modules/_object-gopn.js","webpack:///./node_modules/core-js/library/modules/_object-gopd.js","webpack:///./node_modules/fbjs/lib/invariant.js","webpack:///./node_modules/rc-util/es/Dom/addEventListener.js","webpack:///./node_modules/dom-align/es/getOffsetParent.js","webpack:///./node_modules/babel-runtime/core-js/object/define-property.js","webpack:///./node_modules/component-indexof/index.js","webpack:///./node_modules/rc-animate/es/util.js","webpack:///./node_modules/rc-trigger/es/LazyRenderBox.js","webpack:///./node_modules/rc-trigger/es/utils.js","webpack:///./src/gui.tsx","webpack:///./node_modules/lz-string/libs/lz-string.js","webpack:///./src/libqalc/index.ts","webpack:///./node_modules/decimal.js/decimal.mjs","webpack:///./src/unitNumber/SpecialUnitNumber.ts","webpack:///./src/libqalc/scope.ts","webpack:///./src/libqalc/operators.ts","webpack:///./src/libqalc/load.ts","webpack:///./src/libqalc/functions.ts","webpack:///./data/gnu-units.json","webpack:///./data/custom_data.txt","webpack:///./src/libqalc/util.ts","webpack:///./node_modules/query-string/index.js","webpack:///./node_modules/strict-uri-encode/index.js","webpack:///./node_modules/decode-uri-component/index.js","webpack:///./node_modules/rc-tooltip/es/index.js","webpack:///./node_modules/rc-tooltip/es/Tooltip.js","webpack:///./node_modules/babel-runtime/core-js/object/assign.js","webpack:///./node_modules/core-js/library/fn/object/assign.js","webpack:///./node_modules/core-js/library/modules/es6.object.assign.js","webpack:///./node_modules/core-js/library/modules/_a-function.js","webpack:///./node_modules/core-js/library/modules/_object-assign.js","webpack:///./node_modules/core-js/library/modules/_array-includes.js","webpack:///./node_modules/core-js/library/modules/_to-length.js","webpack:///./node_modules/core-js/library/modules/_to-absolute-index.js","webpack:///./node_modules/babel-runtime/core-js/symbol/iterator.js","webpack:///./node_modules/core-js/library/fn/symbol/iterator.js","webpack:///./node_modules/core-js/library/modules/es6.string.iterator.js","webpack:///./node_modules/core-js/library/modules/_string-at.js","webpack:///./node_modules/core-js/library/modules/_iter-create.js","webpack:///./node_modules/core-js/library/modules/_object-dps.js","webpack:///./node_modules/core-js/library/modules/_html.js","webpack:///./node_modules/core-js/library/modules/_object-gpo.js","webpack:///./node_modules/core-js/library/modules/web.dom.iterable.js","webpack:///./node_modules/core-js/library/modules/es6.array.iterator.js","webpack:///./node_modules/core-js/library/modules/_add-to-unscopables.js","webpack:///./node_modules/core-js/library/modules/_iter-step.js","webpack:///./node_modules/babel-runtime/core-js/symbol.js","webpack:///./node_modules/core-js/library/fn/symbol/index.js","webpack:///./node_modules/core-js/library/modules/es6.symbol.js","webpack:///./node_modules/core-js/library/modules/_meta.js","webpack:///./node_modules/core-js/library/modules/_enum-keys.js","webpack:///./node_modules/core-js/library/modules/_is-array.js","webpack:///./node_modules/core-js/library/modules/_object-gopn-ext.js","webpack:///./node_modules/core-js/library/modules/es7.symbol.async-iterator.js","webpack:///./node_modules/core-js/library/modules/es7.symbol.observable.js","webpack:///./node_modules/babel-runtime/core-js/object/set-prototype-of.js","webpack:///./node_modules/core-js/library/fn/object/set-prototype-of.js","webpack:///./node_modules/core-js/library/modules/es6.object.set-prototype-of.js","webpack:///./node_modules/core-js/library/modules/_set-proto.js","webpack:///./node_modules/babel-runtime/core-js/object/create.js","webpack:///./node_modules/core-js/library/fn/object/create.js","webpack:///./node_modules/core-js/library/modules/es6.object.create.js","webpack:///./node_modules/prop-types/factoryWithThrowingShims.js","webpack:///./node_modules/prop-types/lib/ReactPropTypesSecret.js","webpack:///./node_modules/rc-trigger/es/index.js","webpack:///./node_modules/create-react-class/index.js","webpack:///./node_modules/create-react-class/factory.js","webpack:///./node_modules/rc-util/es/Dom/contains.js","webpack:///./node_modules/add-dom-event-listener/lib/index.js","webpack:///./node_modules/add-dom-event-listener/lib/EventObject.js","webpack:///./node_modules/add-dom-event-listener/lib/EventBaseObject.js","webpack:///./node_modules/rc-trigger/es/Popup.js","webpack:///./node_modules/rc-align/es/index.js","webpack:///./node_modules/rc-align/es/Align.js","webpack:///./node_modules/dom-align/es/index.js","webpack:///./node_modules/dom-align/es/propertyUtils.js","webpack:///./node_modules/dom-align/es/getVisibleRectForElement.js","webpack:///./node_modules/dom-align/es/isAncestorFixed.js","webpack:///./node_modules/dom-align/es/adjustForViewport.js","webpack:///./node_modules/dom-align/es/getRegion.js","webpack:///./node_modules/dom-align/es/getElFuturePos.js","webpack:///./node_modules/dom-align/es/getAlignOffset.js","webpack:///./node_modules/rc-align/es/isWindow.js","webpack:///./node_modules/rc-animate/es/Animate.js","webpack:///./node_modules/babel-runtime/helpers/defineProperty.js","webpack:///./node_modules/core-js/library/fn/object/define-property.js","webpack:///./node_modules/core-js/library/modules/es6.object.define-property.js","webpack:///./node_modules/rc-animate/es/ChildrenUtils.js","webpack:///./node_modules/rc-animate/es/AnimateChild.js","webpack:///./node_modules/css-animation/es/index.js","webpack:///./node_modules/css-animation/es/Event.js","webpack:///./node_modules/component-classes/index.js","webpack:///./node_modules/rc-trigger/es/PopupInner.js","webpack:///./node_modules/rc-util/es/getContainerRenderMixin.js","webpack:///./node_modules/rc-util/es/Portal.js","webpack:///./node_modules/rc-tooltip/es/placements.js","webpack:///./node_modules/rc-tooltip/assets/bootstrap_white.css?7a7e","webpack:///./node_modules/rc-tooltip/assets/bootstrap_white.css"],"names":["__webpack_require__","moduleId","installedModules","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","checkDCE","__REACT_DEVTOOLS_GLOBAL_HOOK__","err","console","error","makeEmptyFunction","arg","emptyFunction","thatReturns","thatReturnsFalse","thatReturnsTrue","thatReturnsNull","thatReturnsThis","this","thatReturnsArgument","getOwnPropertySymbols","propIsEnumerable","propertyIsEnumerable","assign","test1","String","getOwnPropertyNames","test2","fromCharCode","map","join","test3","split","forEach","letter","keys","shouldUseNative","target","source","from","symbols","to","val","undefined","TypeError","toObject","arguments","length","key","__extends","b","__","constructor","extendStatics","create","hasInterceptors","interceptable","interceptors","registerInterceptor","handler","push","once","idx","indexOf","splice","interceptChange","change","prevU","untrackedStart","invariant","type","untrackedEnd","hasListeners","listenable","changeListeners","registerListener","listeners","notifyListeners","slice","isSpyEnabled","globalState","spyListeners","spyReport","event","spyReportStart","objectAssign","spyReportEnd","END_EVENT","spy","listener","arrayAsIterator","array","IS_ITERATING_MARKER","addHiddenFinalProp","done","value","declareIterator","prototType","iteratorFactory","Symbol","iterator","createArrayEntryDescriptor","index","set","createArrayBufferItem","ObservableArray","reserveArrayBuffer","max","OBSERVABLE_ARRAY_BUFFER_SIZE","isObservableArray","thing","isObject","isObservableArrayAdministration","$mobx","getMessage","id","messages","createAction","actionName","fn","res","executeAction","originalFn","isMobxAction","scope","args","runInfo","notifySpy","startTime","Date","now","flattendArgs","Array","prevDerivation","startBatch","prevAllowStateChanges","allowStateChangesStart","startAction","apply","allowStateChangesEnd","endBatch","time","endAction","useStrict","strict","trackingDerivation","strictMode","allowStateChanges","isStrictModeEnabled","prev","createClassPropertyDecorator","onInitialize","allowCustomArguments","classPropertyDecorator","descriptor","customArgs","argLen","quacksLikeADecorator","addHiddenProp","__mobxLazyInitializers","value_1","initializer_1","initializer","instance","__mobxDidRunLazyInitializers","runLazyInitializers","v","newDescriptor","__mobxInitializedProps","typescriptInitializeProperty","outerArgs","baseDescriptor","namedActionDecorator","prop","Error","actionFieldDecorator","runInAction","arg1","arg2","arg3","isAction","defineBoundAction","propertyName","identityComparer","a","autorun","reactionRunner","view","reaction","getNextId","bind","Reaction","track","schedule","getDisposer","when","arg4","predicate","effect","r","dispose","prevUntracked","autorunAsync","func","delay","isScheduled","setTimeout","isDisposed","expression","changed","nextValue","firstTime","equals","opts","fireImmediately","fail","isModifierDescriptor","compareStructural","struct","action","context","comparer","structural","default","asObservableObject","isObservableObject","isExtensible","isPlainObject","adm","ObservableObjectAdministration","defineObservablePropertyFromDescriptor","propName","defaultEnhancer","values","isComputedValue","modifierDescriptor","defineObservableProperty","initialValue","enhancer","autoBind","computedValue","generateComputedPropConfig","defineComputedPropertyFromComputedValue","defineComputedProperty","newValue","assertPropertyConfigurable","ObservableValue","observablePropertyConfigs","setPropertyValue","generateObservablePropConfig","notify","notifyPropertyAddition","setter","asInstanceProperty","ComputedValue","computedPropertyConfigs","observable","prepareNewValue","UNCHANGED","oldValue","setNewValue","isObservableObjectAdministration","isObservable","isObservableMap","isAtom","isReaction","createDecoratorForEnhancer","baseValue","_","extendObservable","properties","_i","extendObservableHelper","deepEnhancer","extendShallowObservable","referenceEnhancer","propSet","definedProps","isPropertyConfigurable","getOwnPropertyDescriptor","incorrectlyUsedAsDecorator","methodName","isMobxModifierDescriptor","createModifierDescriptor","isArray","isES6Map","shallowEnhancer","shallowArray","shallowObject","shallowMap","deepStructEnhancer","deepEqual","ObservableMap","refStructEnhancer","transaction","thisArg","initialValues","deprecated","getGlobal","window","global","mobxGuid","message","check","msg","deprecatedMessages","invoked","unique","list","item","joinStrings","things","limit","separator","proto","getPrototypeOf","prototypeHasOwnProperty","writable","getEnumerableKeys","obj","areBothNaN","aIsArray","isArrayLike","aIsMap","isMapLike","size","equals_1","entries","createInstanceofPredicate","clazz","x","isNaN","Map","primitiveSymbol","toPrimitive","getObservers","observers","addObserver","node","observersIndexes","__mapid","lowestObserverState","dependenciesState","removeObserver","queueForUnobservation","filler","pop","isPendingUnobservation","pendingUnobservations","inBatch","runReactions","onBecomeUnobserved","reportObserved","derivation","runId","lastAccessedBy","newObserving","unboundDepsCount","isCaughtException","e","CaughtException","shouldCompute","IDerivationState","UP_TO_DATE","NOT_TRACKING","STALE","POSSIBLY_STALE","obs","observing","changeDependenciesStateTo0","isComputingDerivation","checkIfStateModificationsAreAllowed","atom","hasObservers$$1","computationDepth","trackDerivedFunction","f","prevTracking","result","prevObserving","lowestNewObservingDerivationState","i0","dep","diffValue","onBecomeStale","bindDependencies","clearObserving","untracked","registerErrorHandler","errorHandler","isRunningReactions","reactionScheduler","runReactionsHelper","allReactions","pendingReactions","iterations","MAX_REACTION_ITERATIONS","remainingReactions","runReaction","asReference","ref","asStructure","asFlat","shallow","asMap","data","createComputedDecorator","originalDescriptor","getAtom","anyThing","_keys","_data","_hasMap","getDebugName","getAdministration","isComputed","observe","propOrCb","cbOrFire","observeObservableProperty","observeObservable","intercept","propOrHandler","interceptProperty","interceptInterceptable","expr","warn","computed","toJS","detectCycles","__alreadySeen","cache","toAdd","res_1","isObservableValue","createTransformer","transformer","onCleanup","objectCache","resetId","Transformer","_super","sourceIdentifier","sourceObject","_this","lastValue","identifier","tid","$transformId","getMemoizationId","reactiveTransformer","log","whyRun","nodeToDependencyTree","dependencies","nodeToObserverTree","hasObservers","__webpack_exports__","setPrototypeOf","__proto__","BaseAtom","reportChanged","propagateChanged","toString","Atom","onBecomeObservedHandler","onBecomeUnobservedHandler","noop","isBeingTracked","safariPrototypeSetterInheritanceBug","StubArray","ctor","inherit","isFrozen","ObservableArrayAdministration","owned","lastKnownLength","newV","oldV","dehanceValue","dehancer","dehanceValues","added","addedCount","removed","removedCount","getArrayLength","setArrayLength","newLength","currentLength","newItems","spliceWithArray","updateArrayLength","oldLength","delta","deleteCount","Math","min","EMPTY_ARRAY","lengthDelta","spliceItemsIntoValues","notifyArraySplice","_a","concat","notifyArrayChildUpdate","ENTRY_0","clear","arrays","peek","replace","toJSON","find","fromIndex","findIndex","items","shift","unshift","reverse","clone","sort","compareFn","remove","move","toIndex","checkIndex","oldItems","impl","funcName","baseFunc","propNames","makeNonEnumerable","hasUnreportedChange","valueOf","m001","m002","m003","m004","m005","m006","m007","m008","m009","m010","m011","m012","m013","m014","m015","m016","m017","m018","m019","m020","m021","m022","m024","m025","m026","m028","m029","m030a","m030b","m031","m032","m033","m034","m035","m036","m037","m038","boundActionDecorator","bound","action_1","identity","isComputing","isRunningSetter","propagateMaybeChanged","computeValue","trackAndCompute","propagateChangeConfirmed","cause","wasSuspended","prevValue","isTracking","Boolean","callback","deepDecorator","shallowDecorator","refDecorator","deepStructDecorator","refStructDecorator","observableFactories","box","shallowBox","props","deep","ObservableMapMarker","initialData","merge","_has","has","isValidKey","_updateHasMapEntry","assertValidKey","hasKey","_updateValue","_addValue","delete","entry","observable$$1","other","newKeys","map$$1","getMapLikeKeys","filter","k","freeze","persistentKeys","MobXGlobals","version","globalReactionErrorHandlers","shareGlobalStateCalled","runInIsolationCalled","warnedAboutMultipleInstances","global_1","__mobxInstanceCount","onInvalidate","_isScheduled","_isTrackPending","_isRunning","reportExceptionInDerivation","messageToUser","onError","computedDecorator","computedStructDecorator","extras","getDependencyTree","getGlobalState","getObserverTree","interceptReads","onReactionError","resetGlobalState","defaultGlobals","isolateGlobalState","shareGlobalState","ownState","__mobservableTrackingStack","__mobservableViewStack","__mobxGlobal","setReactionScheduler","baseScheduler","everything","isBoxedObservable","warnedAboutDefaultExport","_loop_1","__MOBX_DEVTOOLS_GLOBAL_HOOK__","injectMobx","emptyObject","self","Function","__g","Constructor","_typeof3","_interopRequireDefault","ReferenceError","_setPrototypeOf2","_create2","subClass","superClass","TaggedString","[object Object]","vals","t","flatten","literals","placeholders","last","str","joinEle","out","core","__e","anObject","IE8_DOM_DEFINE","dP","O","P","Attributes","it","isEvaluated","tokens","stack","token","__WEBPACK_IMPORTED_MODULE_2__parser__","InfixOperator","op","trim","arity","InfixFunctionCallNode","UnaryOperator","UnaryFunctionCallNode","Identifier","IdentifierNode","Number","NumberNode","toDebugString","number","_parentPrecedence","Infinity","__WEBPACK_IMPORTED_MODULE_0__output__","__WEBPACK_IMPORTED_MODULE_1__unitNumber__","FunctionCallNode","fnname","operands","parentPrecedence","toTaggedString","disp","displayString","leftAdd","associativity","right","rightAdd","left","precedence","append","_assign2","ctx","hide","PROTOTYPE","$export","own","IS_FORCED","F","IS_GLOBAL","G","IS_STATIC","S","IS_PROTO","IS_BIND","B","IS_WRAP","W","expProto","C","virtual","R","U","createDesc","IObject","defined","store","uid","USE_SYMBOL","forceRelayout","elem","originalStyle","style","display","offsetHeight","css","el","_typeof","getComputedStyleX","getScroll","w","top","ret","method","document","documentElement","body","getScrollLeft","getScrollTop","getOffset","pos","y","doc","ownerDocument","docElem","getBoundingClientRect","clientLeft","clientTop","getClientPosition","defaultView","parentWindow","isWindow","getDocument","nodeType","_getComputedStyle","cs","computedStyle","getComputedStyle","getPropertyValue","_getComputedStyleIE","CURRENT_STYLE","_RE_NUM_NO_PX","test","RE_POS","LEFT","rsLeft","RUNTIME_STYLE","pixelLeft","PX","getOffsetDirection","dir","option","useCssRight","useCssBottom","oppositeOffsetDirection","setLeftTop","offset","position","presetH","presetV","horizontalProperty","verticalProperty","oppositeHorizontalProperty","oppositeVerticalProperty","originalTransition","originalOffset","__WEBPACK_IMPORTED_MODULE_0__propertyUtils__","old","preset","off","_key","_dir","_off","setOffset","useCssTransform","originalXY","resultXY","setTransform","each","arr","isBorderBoxFn","getPBMWidth","which","j","cssProp","parseFloat","getWH","ex","extra","domUtils","viewportWidth","viewportHeight","docWidth","docHeight","borderBoxValue","width","height","isBorderBox","cssBoxValue","BORDER_INDEX","CONTENT_INDEX","borderBoxValueOrIsBorderBox","PADDING_INDEX","BOX_MODELS","getWHIgnoreDisplay","_len","_key2","offsetWidth","options","swap","cssShow","mix","RE_NUM","RegExp","refWin","win","documentElementProp","compatMode","visibility","first","charAt","toUpperCase","includeMargin","utils","getWindow","overflow","getWindowScrollLeft","getWindowScrollTop","_len2","_key3","cssWithMappingToString","useSourceMap","content","cssMapping","btoa","sourceMapping","sourceMap","unescape","encodeURIComponent","JSON","stringify","toComment","sourceURLs","sources","sourceRoot","mediaQuery","alreadyImportedModules","addStylesToDom","styles","domStyle","stylesInDom","refs","parts","addStyle","listToStyles","newStyles","base","part","media","insertStyleElement","getElement","insertInto","lastStyleElementInsertedAtTop","stylesInsertedAtTop","insertAt","nextSibling","insertBefore","appendChild","firstChild","before","removeStyleElement","parentNode","removeChild","createStyleElement","createElement","attrs","addAttrs","setAttribute","update","transform","singleton","styleIndex","singletonCounter","applyToSingletonTag","URL","createObjectURL","revokeObjectURL","Blob","link","rel","createLinkElement","autoFixUrls","convertToAbsoluteUrls","fixUrls","blob","oldSrc","href","styleSheet","cssText","createTextNode","newObj","replaceText","cssNode","childNodes","isOldIE","memo","memoize","all","atob","selector","styleTarget","querySelector","HTMLIFrameElement","contentDocument","head","DEBUG","newList","mayRemove","textStore","replacement","createChainableTypeChecker","validate","checkType","isRequired","componentName","location","propFullName","rest","__WEBPACK_IMPORTED_MODULE_0_mobx__","actual","chainedCheckType","getPropType","propValue","propType","isSymbol","createObservableTypeCheckerCreator","allowNativeType","mobxType","toLowerCase","mobxChecker","preciseType","getPreciseType","nativeTypeExpectationMessage","createObservableArrayOfTypeChecker","typeChecker","createStoreInjector","grabStoresFn","component","injectNames","_class","_temp2","displayName","Injector","_Component","_ref","_temp","_ret","classCallCheck","possibleConstructorReturn","storeRef","wrappedInstance","inherits","createClass","newProps","additionalProps","mobxStores","render","isStateless","__WEBPACK_IMPORTED_MODULE_1_react__","hoistNonReactStatics","wrappedComponent","defineProperties","proxiedInjectorProps","inject","componentClass","injected","isMobxInjector","observer","storeNames","baseStores","nextProps","storeName","grabStoresByName","findDOMNode$2","__WEBPACK_IMPORTED_MODULE_2_react_dom__","reportRendering","componentByNodeRegistery","renderReporter","emit","renderTime","__$mobRenderEnd","__$mobRenderStart","totalTime","trackComponents","WeakMap","isDevtoolsEnabled","useStaticRendering","isUsingStaticRendering","patch","runMixinFirst","mixinFunc","reactiveMixin","isObjectShallowModified","next","warnedAboutObserverInjectDeprecation","isReactClass","isPrototypeOf","contextTypes","propTypes","defaultProps","shouldComponentUpdate","mixinLifecycleEvents","isMobXReactObserver","AwaitValue","AsyncGenerator","gen","resume","Promise","resolve","then","settle","front","reject","back","_invoke","request","return","asyncIterator","throw","protoProps","staticProps","EventEmitter","cb","REACT_STATICS","childContextTypes","getDefaultProps","mixins","KNOWN_STATICS","caller","callee","defineProperty$1","objectPrototype","targetComponent","sourceComponent","blacklist","inheritedComponent","observableArray","observableArrayOf","observableMap","observableObject","arrayOrObservableArray","arrayOrObservableArrayOf","objectOrObservableObject","injectorContextTypes","seal","errorsReporter","componentWillMount","makePropertyObservableReference","valueHolder","isForcingUpdate","skipRender","initialName","rootNodeID","_reactInternalInstance","_rootNodeID","baseRender","isRenderingPending","reactiveRender","exception","rendering","componentWillReact","__$mobxIsUnmounted","hasError","forceUpdate","reactComponent","componentWillUnmount","componentDidMount","componentDidUpdate","nextState","state","Observer","children","specialReactKeys","Provider","only","stores","suppressChangedStoreWarning","on","mobx$1","mobxReact","injectMobxReact","framesToPop","A","updater","z","E","J","g","H","I","h","$$typeof","_owner","current","K","N","M","keyPrefix","count","u","Q","=",":","escape","T","L","q","isMounted","enqueueForceUpdate","enqueueReplaceState","enqueueSetState","isReactComponent","setState","D","isPureReactComponent","unstable_isAsyncReactComponent","__self","__source","Children","toArray","Component","PureComponent","unstable_AsyncComponent","Fragment","cloneElement","createFactory","isValidElement","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","V","tokenToDebugString","tokenize","regex","TokenTypeRegex","match","exec","substr","start","preprocess","lastToken","TokenType","Whitespace","LParen","RParen","Operator","operator","RPNTokenType","infixOperators","unaryOperators","toRPN","yieldOperator","infix_mode","convToken","o1","token2","o2","Associativity","both","__WEBPACK_IMPORTED_MODULE_0__Tree__","Unknown","!","^","|","","·","/","+","-","<","<=",">",">=","==","!=","&&","||","=>","≈","globalScope","stripCommentsTrim","inx","code","comment","resolveFunction","_scope","__WEBPACK_IMPORTED_MODULE_3__Tree__","__WEBPACK_IMPORTED_MODULE_4__operators__","evaluate","__WEBPACK_IMPORTED_MODULE_6__init__","evNode","__WEBPACK_IMPORTED_MODULE_0__unitNumber__","getUnit","__WEBPACK_IMPORTED_MODULE_1__parser__","__WEBPACK_IMPORTED_MODULE_5__globalScope__","hasSideEffects","unit","__WEBPACK_IMPORTED_MODULE_2__output__","canonical","getCanonical","canonicalText","aliases","getAliases","aliasesText","info","docMap","infoText","headings","inverse","alternative","fnTree","inverseText","pa","va","oa","wa","hasBooleanValue","hasStringBooleanValue","hasOverloadedBooleanValue","ua","Ia","Ja","_hasCaughtError","_caughtError","Na","La","Ma","Oa","extractEvents","eventTypes","Pa","phasedRegistrationNames","Qa","registrationName","Ra","Sa","Ta","Ua","Za","currentTarget","Ya","invokeGuardedCallbackAndCatchFirstError","$a","ab","_dispatchListeners","_dispatchInstances","isPropagationStopped","isPersistent","release","db","gb","ib","stateNode","Wa","disabled","jb","kb","bb","lb","rethrowCaughtError","pb","tag","qb","rb","ob","tb","ub","vb","dispatchConfig","wb","_targetInst","xb","yb","zb","Ab","Bb","alternate","Eb","Db","canUseDOM","Fb","_fallbackText","_startText","Gb","_root","nativeEvent","Interface","isDefaultPrevented","defaultPrevented","returnValue","Kb","eventPool","Lb","destructor","Jb","getPooled","Mb","Nb","dc","Pb","keyCode","ec","detail","mc","Xa","jc","restoreControlledState","oc","kc","lc","pc","rc","tc","sc","vc","nodeName","uc","wc","srcElement","correspondingUseElement","yc","xc","implementation","hasFeature","zc","Bc","_valueTracker","getValue","setValue","stopTracking","Ac","Cc","checked","Ec","Dc","Hc","Ic","Jc","Lc","Fc","detachEvent","Mc","Gc","Nc","attachEvent","Oc","Pc","$c","bd","dd","getModifierState","cd","ed","fd","jd","kd","effectTag","ld","_reactInternalFiber","md","nd","child","sibling","rd","targetInst","ancestors","containerInfo","sd","topLevelType","ud","td","ba","listen","vd","wd","capture","qd","yd","Cd","Ad","zd","Bd","Hd","Gd","Fd","Ed","Id","Jd","textContent","Kd","contentEditable","Rd","Qd","Nd","da","selectionStart","end","selectionEnd","getSelection","anchorNode","anchorOffset","focusNode","focusOffset","Pd","ea","Md","select","Od","Td","Ud","Vd","Wd","charCode","Zd","$d","ae","be","ce","he","ge","ke","le","je","ie","me","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","ne","X","oe","cursor","pe","getChildContext","qe","__reactInternalMemoizedMergedChildContext","re","Y","memoizedState","updateQueue","memoizedProps","pendingProps","internalContextTag","lastEffect","firstEffect","nextEffect","expirationTime","se","te","ue","ve","we","xe","ye","pendingChildren","Be","De","ze","Ee","Ae","Fe","baseState","callbackList","hasForceUpdate","isInitialized","Ge","He","Ie","partialState","Je","isReplace","isForced","Ke","Xe","We","Ze","_stringRef","$e","af","Re","Ve","Se","Te","Ue","Ye","df","cf","bf","pendingContext","shouldSetTextContent","useSyncScheduling","shouldDeprioritizeSubtree","pushHostContext","pushHostContainer","enterHydrationState","resetHydrationState","tryToClaimNextHydratableInstance","nextCallback","adoptClassInstance","constructClassInstance","mountClassInstance","updateClassInstance","componentWillReceiveProps","componentWillUpdate","Le","Ob","beginWork","element","hydrate","beginFailedWork","kf","Qb","ja","isReadyForCommit","yg","zg","Ag","Ne","Oe","Sc","Bg","Tc","Cg","Dg","Eg","componentDidCatch","componentStack","ca","Qc","ha","qa","Fg","rg","Gg","Uc","ra","Rc","eb","qg","Set","add","_debugOwner","_debugSource","fileName","lineNumber","errorBoundary","errorBoundaryFound","errorBoundaryName","willRetry","suppressReactErrorLogging","Vc","ka","Hg","Rb","Ig","nextScheduledRoot","remainingExpirationTime","sa","Fa","la","Sb","ma","na","Wc","Pe","Tb","Jg","Xc","Kg","timeout","fb","Yc","Ub","Zc","finishedWork","timeRemaining","Lg","gf","getChildHostContext","getRootHostContext","getHostContext","getRootHostContainer","popHostContainer","popHostContext","resetHostContainer","hf","hydration","prepareToHydrateHostInstance","prepareToHydrateHostTextInstance","popHydrationState","canHydrateInstance","canHydrateTextInstance","getNextHydratableSibling","getFirstHydratableChild","hydrateInstance","hydrateTextInstance","jf","Me","createInstance","createTextInstance","appendInitialChild","finalizeInitialChildren","prepareUpdate","persistence","mutation","completeWork","ef","getPublicInstance","commitMount","commitUpdate","resetTextContent","commitTextUpdate","appendChildToContainer","insertInContainerBefore","removeChildFromContainer","commitResetTextContent","commitPlacement","commitDeletion","commitWork","commitLifeCycles","commitAttachRef","commitDetachRef","ff","scheduleDeferredCallback","cancelDeferredCallback","prepareForCommit","resetAfterCommit","computeAsyncExpiration","computeExpirationForFiber","scheduleWork","batchedUpdates","unbatchedUpdates","flushSync","deferredUpdates","lf","od","createContainer","updateContainer","getPublicRootInstance","findHostInstance","findHostInstanceWithNoPortals","pd","injectIntoDevTools","findFiberByHostInstance","isDisabled","supportsFiber","onCommitFiberRoot","onCommitFiberUnmount","Ce","findHostInstanceByFiber","If","mutationMethod","hasNumericValue","hasPositiveNumericValue","Jf","mustUseProperty","attributeName","attributeNamespace","setAttributeNS","Kf","Gf","Ff","Ef","Hf","removeAttribute","Lf","step","defaultChecked","defaultValue","_wrapperState","initialChecked","Mf","controlled","Nf","Of","Pf","Rf","aa","Qf","Sf","selected","defaultSelected","Tf","wasMultiple","multiple","Uf","dangerouslySetInnerHTML","Vf","Wf","Xf","Zf","$f","cg","lastChild","nodeValue","fg","dg","setProperty","hg","gg","ig","is","lg","topBlur","topFocus","topCancel","topClose","Dd","ng","jg","innerHTML","createElementNS","og","pg","mg","kg","__html","bg","onClick","onclick","sg","tg","ug","vg","Ng","Pg","_reactRootContainer","Z","hasAttribute","Og","Qg","pf","Rg","fa","ia","suppressContentEditableWarning","suppressHydrationWarning","ta","MUST_USE_PROPERTY","HAS_BOOLEAN_VALUE","HAS_NUMERIC_VALUE","HAS_POSITIVE_NUMERIC_VALUE","HAS_OVERLOADED_BOOLEAN_VALUE","HAS_STRING_BOOLEAN_VALUE","injectDOMPropertyConfig","Properties","DOMAttributeNamespaces","DOMAttributeNames","DOMMutationMethods","xa","ya","za","Aa","Ba","Ca","Da","allowFullScreen","async","autoFocus","autoPlay","cols","controls","defer","download","draggable","formNoValidate","hidden","loop","muted","noValidate","open","playsInline","readOnly","required","reversed","rows","rowSpan","scoped","seamless","span","spellCheck","tabIndex","itemScope","acceptCharset","className","htmlFor","httpEquiv","validity","badInput","activeElement","Ea","Ga","autoReverse","externalResourcesRequired","preserveAlpha","xlinkActuate","xlinkArcrole","xlinkHref","xlinkRole","xlinkShow","xlinkTitle","xlinkType","xmlBase","xmlLang","xmlSpace","Ha","_rethrowError","_hasRethrowError","injection","injectErrorUtils","invokeGuardedCallback","hasCaughtError","clearCaughtError","Va","plugins","eventNameDispatchConfigs","registrationNameModules","registrationNameDependencies","possibleRegistrationNames","injectEventPluginOrder","injectEventPluginsByName","hb","mb","getListener","enqueueEvents","processEventQueue","nb","random","sb","precacheFiberNode","getClosestInstanceFromNode","getInstanceFromNode","getNodeFromInstance","getFiberCurrentPropsFromNode","updateFiberProps","Cb","accumulateTwoPhaseDispatches","accumulateTwoPhaseDispatchesSkipTarget","accumulateEnterLeaveDispatches","accumulateDirectDispatches","Hb","Ib","eventPhase","bubbles","cancelable","timeStamp","isTrusted","preventDefault","stopPropagation","cancelBubble","persist","augmentClass","Vb","Wb","documentMode","Xb","Yb","opera","parseInt","Zb","$b","ac","bc","beforeInput","bubbled","captured","compositionEnd","compositionStart","compositionUpdate","cc","fc","ic","gc","ctrlKey","altKey","metaKey","char","hc","nc","injectFiberControlledHostComponent","qc","enqueueStateRestore","restoreStateIfNeeded","color","date","datetime","datetime-local","email","month","password","range","search","tel","text","url","week","Kc","ad","_isInputEventSupported","getAttribute","Alt","Control","Meta","Shift","screenX","screenY","clientX","clientY","pageX","pageY","shiftKey","button","buttons","relatedTarget","fromElement","toElement","gd","mouseEnter","mouseLeave","hd","xd","_enabled","_handleTopLevel","setHandleTopLevel","setEnabled","isEnabled","trapBubbledEvent","trapCapturedEvent","dispatchEvent","animationend","animationiteration","animationstart","transitionend","animation","transition","topAbort","topAnimationEnd","topAnimationIteration","topAnimationStart","topCanPlay","topCanPlayThrough","topChange","topClick","topCompositionEnd","topCompositionStart","topCompositionUpdate","topContextMenu","topCopy","topCut","topDoubleClick","topDrag","topDragEnd","topDragEnter","topDragExit","topDragLeave","topDragOver","topDragStart","topDrop","topDurationChange","topEmptied","topEncrypted","topEnded","topError","topInput","topKeyDown","topKeyPress","topKeyUp","topLoadedData","topLoad","topLoadedMetadata","topLoadStart","topMouseDown","topMouseMove","topMouseOut","topMouseOver","topMouseUp","topPaste","topPause","topPlay","topPlaying","topProgress","topRateChange","topScroll","topSeeked","topSeeking","topSelectionChange","topStalled","topSuspend","topTextInput","topTimeUpdate","topToggle","topTouchCancel","topTouchEnd","topTouchMove","topTouchStart","topTransitionEnd","topVolumeChange","topWaiting","topWheel","Ld","Sd","onSelect","animationName","elapsedTime","pseudoElement","clipboardData","Xd","Esc","Spacebar","Left","Up","Right","Down","Del","Win","Menu","Apps","Scroll","MozPrintableKey","Yd","8","9","12","13","16","17","18","19","20","27","32","33","34","35","36","37","38","39","40","45","46","112","113","114","115","116","117","118","119","120","121","122","123","144","145","224","repeat","locale","dataTransfer","touches","targetTouches","changedTouches","deltaX","wheelDeltaX","deltaY","wheelDeltaY","wheelDelta","deltaZ","deltaMode","de","ee","fe","SimpleEventPlugin","EnterLeaveEventPlugin","ChangeEventPlugin","SelectEventPlugin","BeforeInputEventPlugin","Qe","mf","nf","of","qf","performance","rf","sf","tf","requestIdleCallback","cancelIdleCallback","Bf","uf","vf","wf","xf","yf","zf","Af","didTimeout","Cf","addEventListener","requestAnimationFrame","Df","postMessage","clearTimeout","Yf","ag","MSApp","execUnsafeLocalFunction","namespaceURI","animationIterationCount","borderImageOutset","borderImageSlice","borderImageWidth","boxFlex","boxFlexGroup","boxOrdinalGroup","columnCount","columns","flex","flexGrow","flexPositive","flexShrink","flexNegative","flexOrder","gridRow","gridRowEnd","gridRowSpan","gridRowStart","gridColumn","gridColumnEnd","gridColumnSpan","gridColumnStart","fontWeight","lineClamp","lineHeight","opacity","order","orphans","tabSize","widows","zIndex","zoom","fillOpacity","floodOpacity","stopOpacity","strokeDasharray","strokeDashoffset","strokeMiterlimit","strokeOpacity","strokeWidth","eg","substring","menuitem","area","br","col","embed","hr","img","input","keygen","meta","param","wbr","wg","setInitialProperties","diffProperties","updateProperties","diffHydratedProperties","diffHydratedText","warnForUnmatchedText","warnForDeletedHydratableElement","warnForDeletedHydratableText","warnForInsertedHydratedElement","warnForInsertedHydratedText","querySelectorAll","form","xg","Mg","tagName","rangeCount","focusedElem","selectionRange","extend","createRange","setStart","removeAllRanges","addRange","setEnd","scrollLeft","scrollTop","focus","didNotMatchHydratedContainerTextInstance","didNotMatchHydratedTextInstance","didNotHydrateContainerInstance","didNotHydrateInstance","didNotFindHydratableContainerInstance","didNotFindHydratableContainerTextInstance","didNotFindHydratableInstance","didNotFindHydratableTextInstance","unmount","Sg","createPortal","findDOMNode","unstable_renderSubtreeIntoContainer","unmountComponentAtNode","unstable_createPortal","unstable_batchedUpdates","unstable_deferredUpdates","EventPluginHub","EventPluginRegistry","EventPropagators","ReactControlledComponent","ReactDOMComponentTree","ReactDOMEventListener","bundleType","rendererPackageName","Tg","Ug","ExecutionEnvironment","canUseWorkers","Worker","canUseEventListeners","canUseViewport","screen","isInWorker","EventListener","eventType","removeEventListener","registerDefault","objA","objB","keysA","keysB","containsNode","outerNode","innerNode","isTextNode","contains","compareDocumentPosition","isNode","Node","eval","hmr","locals","baseUrl","protocol","host","currentDir","pathname","fullMatch","origUrl","unquotedOrigUrl","$1","newUrl","bitmap","$keys","enumBugKeys","px","_iterator2","_symbol2","UnitNumber","dimensions","__WEBPACK_IMPORTED_MODULE_1__DimensionMap__","__WEBPACK_IMPORTED_MODULE_0_decimal_js__","isSpecial","mul","times","factor","div","plus","dimensionDifference","diff","toMismatchString","dimensionMismatch","member","memberFunctionHasSideeffects","_unit","__WEBPACK_IMPORTED_MODULE_3__output__","toPrecision","pow","toNumber","dimensionName","__WEBPACK_IMPORTED_MODULE_2__Dimension__","baseUnit","zero","one","minusOne","ceil","floor","shared","SHARED","dPs","IE_PROTO","Empty","createDict","iframeDocument","iframe","src","contentWindow","write","lt","close","def","TAG","stat","LIBRARY","wksExt","$Symbol","_defineProperty2","DimensionMap","unicodePow","__WEBPACK_IMPORTED_MODULE_1__output__","exp","__WEBPACK_IMPORTED_MODULE_0__Dimension__","toUnicodePow","neg","splitPosNeg","listToUnicodePow","_id","dimension","exponent","newFactor","tooMuch","notEnough","Dimension","__WEBPACK_IMPORTED_MODULE_0__UnitNumber__","inited","fs","gnuUnitsData","parse","readFileSync","__dirname","customData","__WEBPACK_IMPORTED_MODULE_1__globalScope__","addFunctions","__WEBPACK_IMPORTED_MODULE_2__functions__","__WEBPACK_IMPORTED_MODULE_0__load__","aFunction","that","toIObject","arrayIndexOf","names","cof","redefine","Iterators","$iterCreate","setToStringTag","ITERATOR","BUGGY","returnThis","Base","NAME","DEFAULT","IS_SET","FORCED","methods","IteratorPrototype","getMethod","kind","DEF_VALUES","VALUES_BUG","$native","$default","$entries","$anyNative","hiddenKeys","pIE","gOPD","validateFormat","format","condition","argIndex","__WEBPACK_IMPORTED_MODULE_1_react_dom___default","__WEBPACK_IMPORTED_MODULE_0_add_dom_event_listener___default","__WEBPACK_IMPORTED_MODULE_0__utils__","parent","positionStyle","isAppearSupported","transitionName","transitionAppear","appear","isEnterSupported","transitionEnter","enter","isLeaveSupported","transitionLeave","leave","allowAppearCallback","allowEnterCallback","allowLeaveCallback","LazyRenderBox","__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck___default","__WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_possibleConstructorReturn___default","__WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_inherits___default","hiddenClassName","visible","_props","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_objectWithoutProperties___default","__WEBPACK_IMPORTED_MODULE_4_react___default","__WEBPACK_IMPORTED_MODULE_4_react__","__WEBPACK_IMPORTED_MODULE_5_prop_types___default","any","string","bool","isPointsEq","a1","a2","builtinPlacements","placementStr","align","baseAlign","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default","prefixCls","points","placement","DefinitionOvelay","__WEBPACK_IMPORTED_MODULE_0_react__","super","definition","load","__WEBPACK_IMPORTED_MODULE_2__libqalc__","output","__WEBPACK_IMPORTED_MODULE_4__output__","TaggedStringDisplay","ignore","onClickUnit","__decorate","__WEBPACK_IMPORTED_MODULE_9_mobx__","__WEBPACK_IMPORTED_MODULE_12_mobx_react__","__WEBPACK_IMPORTED_MODULE_3__unitNumber__","some","__WEBPACK_IMPORTED_MODULE_8_rc_tooltip__","overlay","taggedStringToHtml","GuiLineElement","idCounter","GUILine","displayDepth","line","isDefinition","onClickRemove","onClickInput","guiInst","presetLines","UnitCompleteInput","cursorIndexChars","focused","inp","setInput","replaceCurrent","cursorIndex","__WEBPACK_IMPORTED_MODULE_13__libqalc_parser__","onChange","cursorToken","poss","__WEBPACK_IMPORTED_MODULE_6__libqalc_globalScope__","getAllUnits","units","unitName","onBlur","onFocus","autoCorrect","autoComplete","autoCapitalize","placeholder","GUI","onSubmit","evt","currentInput","addLine","catch","reason","currentOutput","lines","presets","__WEBPACK_IMPORTED_MODULE_5_query_string__","hash","__WEBPACK_IMPORTED_MODULE_1_lz_string___default","decompressFromEncodedURIComponent","loadPresetLines","showUnit","removeLine","exportToUrl","_prevProps","prevState","history","replaceState","serialize","compressToEncodedURIComponent","gui","__WEBPACK_IMPORTED_MODULE_7_react_dom__","getElementById","qalculationHasSideeffect","qalculate","__WEBPACK_AMD_DEFINE_RESULT__","LZString","getBaseValue","alphabet","character","baseReverseDic","keyStrBase64","keyStrUriSafe","compressToBase64","_compress","decompressFromBase64","_decompress","compressToUTF16","decompressFromUTF16","compressed","charCodeAt","compressToUint8Array","uncompressed","compress","buf","Uint8Array","TotalLen","current_value","decompressFromUint8Array","decompress","bitsPerChar","getCharFromInt","ii","context_dictionary","context_dictionaryToCreate","context_c","context_wc","context_w","context_enlargeIn","context_dictSize","context_numBits","context_data","context_data_val","context_data_position","resetValue","getNextValue","bits","resb","maxpower","power","dictionary","enlargeIn","dictSize","numBits","unitConvertedTaggedString","__WEBPACK_IMPORTED_MODULE_1__Tree__","__WEBPACK_IMPORTED_MODULE_4__evaluator__","tree","__WEBPACK_IMPORTED_MODULE_3__globalScope__","_input","debug","pre","preproc","rpn","parsed","evaled","qalculateDebug","inputTree","digitsToString","ws","indexOfLastWord","LOG_BASE","getZeroString","checkInt32","invalidArgument","checkRoundingDigits","rm","repeating","di","mathpow","convertBase","baseIn","baseOut","arrL","strL","NUMERALS","finalise","isTruncated","digits","roundUp","xdi","Ctor","BASE","external","maxE","NaN","minE","finiteToString","isExp","isFinite","nonFiniteToString","len","getBase10Exponent","getLn10","pr","LN10_PRECISION","precision","precisionLimitExceeded","LN10","getPi","PI_PRECISION","PI","getPrecision","zs","intPow","truncate","mathfloor","isOdd","maxOrMin","ltgt","naturalExponential","denominator","guard","sum","wpr","rep","rounding","divide","naturalLogarithm","c0","numerator","x1","x2","abs","minus","parseDecimal","taylorSeries","isHyperbolic","toLessThanHalfPi","isNeg","pi","halfPi","lte","quadrant","divToInt","isZero","toStringBinary","MAX_DIGITS","inexact","acos","acosh","asin","asinh","atan","atanh","atan2","cbrt","config","decimalError","useDefaults","defaults","ps","EXP_LIMIT","DEFAULTS","crypto","getRandomValues","randomBytes","cryptoUnavailable","cos","cosh","Decimal","isDecimal","divisor","isFloat","isHex","isBinary","isOctal","parseOther","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","isDecimalInstance","hypot","ln","log10","log2","mod","round","sign","sin","sinh","sqrt","sub","tan","tanh","trunc","Uint32Array","copy","modulo","toExpNeg","toExpPos","absoluteValue","comparedTo","cmp","xdL","ydL","xs","ys","cosine","cos2x","cubeRoot","t3","t3plusx","toExponential","eq","decimalPlaces","dp","dividedBy","dividedToIntegerBy","greaterThan","gt","greaterThanOrEqualTo","gte","hyperbolicCosine","cosh2_x","d8","hyperbolicSine","sinh2_x","d5","d16","d20","hyperbolicTangent","inverseCosine","inverseHyperbolicCosine","inverseHyperbolicSine","inverseHyperbolicTangent","xsd","inverseSine","inverseTangent","isInteger","isInt","isNegative","isPositive","isPos","lessThan","lessThanOrEqualTo","logarithm","isBase10","inf","num","xLTy","negated","carry","sine","sin2_x","squareRoot","tangent","rL","toBinary","toDecimalPlaces","toDP","toFixed","toFraction","maxD","d0","d1","d2","n0","n1","toHexadecimal","toHex","toNearest","toOctal","toPower","yn","toSignificantDigits","toSD","truncated","multiplyInteger","temp","compare","aL","bL","subtract","logBase","more","prod","prodL","rem","remL","rem0","xi","xL","yd0","yL","yz","SpecialUnitNumber","inverseFnTree","inverseFn","_factor","_reversed","assertEmpty","_other","scopes","prefixMap","canonicalMap","aliasMap","fns","mode","builtin","modeB","__WEBPACK_IMPORTED_MODULE_2__evaluator__","prefixName","assignmentNode","endsWith","setPrefix","setUnit","withIdentifier","setUnitOrPrefixRaw","unifyAliases","withPrefix","withPluralSuffix","throwOnError","getPrefix","foundScope","prefix","startsWith","suffix","unitValue","withoutPlural","__WEBPACK_IMPORTED_MODULE_3__util__","unit1","unit2","can1","can2","u2","newScope","makeFn","memberAlias","op1","op2","makeRawFn","yes","no","assignment","setUnitOrPrefix","leftVal","oth","createBaseUnit","argNameNode","argName","argval","withNew","assertEqual","aEv","loadUnit","postEvaluate","__WEBPACK_IMPORTED_MODULE_0__evaluator__","__WEBPACK_IMPORTED_MODULE_2__Tree__","nameNode","evaluateNode","reevaluateUnit","applyPostEvaluate","loadUnitsJson","filename","immediately","internalFunctions","deleteUnit","wop","suff","esSuffixes","encode","strictUriEncode","keysSorter","decodeComponent","extract","queryStart","formatter","arrayFormat","accumulator","parserForArrayFormat","reduce","encoderForArrayFormat","val2","decodeComponents","components","decodeURIComponent","decode","singleMatcher","multiMatcher","encodedURI","replaceMap","%FE%FF","%FF%FE","customDecodeURIComponent","__WEBPACK_IMPORTED_MODULE_0__Tooltip__","Tooltip","__WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_classCallCheck___default","__WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_possibleConstructorReturn___default","getPopupElement","_this$props","arrowContent","__WEBPACK_IMPORTED_MODULE_5_react___default","saveTrigger","trigger","__WEBPACK_IMPORTED_MODULE_4_babel_runtime_helpers_inherits___default","getPopupDomNode","overlayClassName","mouseEnterDelay","mouseLeaveDelay","overlayStyle","onVisibleChange","afterVisibleChange","destroyTooltipOnHide","defaultVisible","getTooltipContainer","restProps","__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_objectWithoutProperties___default","extraProps","popupVisible","__WEBPACK_IMPORTED_MODULE_7_rc_trigger__","popupClassName","popup","__WEBPACK_IMPORTED_MODULE_8__placements__","popupPlacement","popupAlign","getPopupContainer","onPopupVisibleChange","afterPopupVisibleChange","popupTransitionName","popupAnimation","defaultPopupVisible","destroyPopupOnHide","popupStyle","__WEBPACK_IMPORTED_MODULE_5_react__","__WEBPACK_IMPORTED_MODULE_6_prop_types___default","oneOfType","getKeys","gOPS","$assign","aLen","getSymbols","isEnum","toLength","toAbsoluteIndex","IS_INCLUDES","$this","toInteger","$at","iterated","_t","point","TO_STRING","ObjectProto","TO_STRING_TAG","DOMIterables","Collection","addToUnscopables","_k","Arguments","DESCRIPTORS","META","KEY","$fails","wks","wksDefine","enumKeys","_create","gOPNExt","$GOPD","$DP","gOPN","$JSON","_stringify","HIDDEN","TO_PRIMITIVE","SymbolRegistry","AllSymbols","OPSymbols","USE_NATIVE","QObject","findChild","setSymbolDesc","protoDesc","wrap","sym","$defineProperty","$defineProperties","$propertyIsEnumerable","$getOwnPropertyDescriptor","$getOwnPropertyNames","$getOwnPropertySymbols","IS_OP","$set","es6Symbols","wellKnownSymbols","for","keyFor","useSetter","useSimple","replacer","$replacer","setDesc","FREEZE","preventExtensions","setMeta","NEED","fastKey","getWeak","onFreeze","windowNames","getWindowNames","buggy","$Object","ReactPropTypesSecret","shim","secret","getShim","ReactPropTypes","symbol","arrayOf","instanceOf","objectOf","oneOf","shape","exact","checkPropTypes","PropTypes","returnEmptyString","returnDocument","ALL_HANDLERS","IS_REACT_16","__WEBPACK_IMPORTED_MODULE_3_react_dom__","__WEBPACK_IMPORTED_MODULE_9_rc_util_es_getContainerRenderMixin__","autoMount","isVisible","isForceRender","forceRender","getContainer","Trigger","__WEBPACK_IMPORTED_MODULE_4_create_react_class___default","__WEBPACK_IMPORTED_MODULE_2_prop_types___default","showAction","hideAction","getPopupClassNameFromAlign","focusDelay","blurDelay","mask","maskClosable","onPopupAlign","maskTransitionName","maskAnimation","getInitialState","prevPopupVisible","fireEvents","triggerAfterPopupVisibleChange","renderComponent","currentDocument","clickOutsideHandler","isClickToHide","isContextMenuToShow","__WEBPACK_IMPORTED_MODULE_6_rc_util_es_Dom_addEventListener__","onDocumentClick","touchOutsideHandler","contextMenuOutsideHandler1","onContextMenuClose","contextMenuOutsideHandler2","clearOutsideHandler","clearDelayTimer","onMouseEnter","delaySetPopupVisible","onMouseLeave","onPopupMouseEnter","onPopupMouseLeave","_component","__WEBPACK_IMPORTED_MODULE_5_rc_util_es_Dom_contains__","isFocusToShow","focusTime","onMouseDown","preClickTime","onTouchStart","preTouchTime","isBlurToHide","onContextMenu","setPopupVisible","preTime","nextVisible","isClickToShow","root","popupNode","handlePortalUpdate","getRootDomNode","__WEBPACK_IMPORTED_MODULE_8__utils__","getPopupAlign","getComponent","mouseProps","isMouseEnterToShow","isMouseLeaveToHide","__WEBPACK_IMPORTED_MODULE_1_react___default","__WEBPACK_IMPORTED_MODULE_7__Popup__","onAlign","getClassNameFromAlign","savePopup","popupContainer","delayS","_this2","delayTimer","createTwoChains","childPros","_props2","_props3","_props4","_props5","_props6","_props7","forcePopupAlign","alignInstance","forceAlign","childCallback","newChildProps","portal","__WEBPACK_IMPORTED_MODULE_10_rc_util_es_Portal__","didUpdate","React","factory","ReactNoopUpdateQueue","_assign","_invariant","MIXINS_KEY","ReactComponent","validateMethodOverride","isAlreadyDefined","specPolicy","ReactClassInterface","ReactClassMixin","mixSpecIntoComponent","spec","autoBindPairs","__reactAutoBindPairs","RESERVED_SPEC_KEYS","isReactClassMethod","autobind","createMergedResultFunction","two","createChainedFunction","mergeIntoWithNoDuplicateKeys","bindAutoBindMethod","boundMethod","injectedMixins","statics","updateComponent","mixStaticSpecIntoComponent","IsMountedPreMixin","__isMounted","IsMountedPostMixin","newState","ReactClassComponent","pairs","autoBindKey","bindAutoBindMethods","initialState","wrapCallback","_EventObject2","isNullOrUndefined","retTrue","TRUE","retFalse","FALSE","DomEventObject","isNative","_EventBaseObject2","getPreventDefault","fixFns","commonProps","eventNormalizers","normalizer","reg","fix","fixFn","_objectAssign2","axis","HORIZONTAL_AXIS","VERTICAL_AXIS","eventDoc","EventBaseObjectProto","returnFalse","returnTrue","EventBaseObject","isEventObject","isImmediatePropagationStopped","stopImmediatePropagation","halt","immediate","Popup","_initialiseProps","savePopupRef","__WEBPACK_IMPORTED_MODULE_11__utils__","saveAlignRef","rootNode","__WEBPACK_IMPORTED_MODULE_6_react_dom___default","popupInstance","getMaskTransitionName","getTransitionName","getClassName","currentAlignClassName","newStyle","getZIndexStyle","popupInnerProps","__WEBPACK_IMPORTED_MODULE_8_rc_animate__","exclusive","__WEBPACK_IMPORTED_MODULE_7_rc_align__","getTarget","monitorWindowResize","__WEBPACK_IMPORTED_MODULE_9__PopupInner__","showProp","xVisible","childrenProps","getMaskElement","maskElement","maskTransition","__WEBPACK_IMPORTED_MODULE_10__LazyRenderBox__","popupDomNode","__WEBPACK_IMPORTED_MODULE_0__Align__","Align","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default","__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_possibleConstructorReturn___default","__WEBPACK_IMPORTED_MODULE_5_react_dom___default","__WEBPACK_IMPORTED_MODULE_6_dom_align__","__WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_inherits___default","startMonitorWindowResize","prevProps","reAlign","lastTarget","__WEBPACK_IMPORTED_MODULE_8__isWindow__","stopMonitorWindowResize","resizeHandler","bufferMonitor","ms","timer","bufferFn","buffer","monitorBufferTime","__WEBPACK_IMPORTED_MODULE_7_rc_util_es_Dom_addEventListener__","__WEBPACK_IMPORTED_MODULE_3_react___default","__WEBPACK_IMPORTED_MODULE_3_react__","__WEBPACK_IMPORTED_MODULE_4_prop_types___default","isFailX","elFuturePos","elRegion","visibleRect","isFailY","bottom","flip","flipOffset","convertOffset","offsetLen","normalizeOffset","domAlign","refNode","targetOffset","newOverflowCfg","__WEBPACK_IMPORTED_MODULE_2__getVisibleRectForElement__","__WEBPACK_IMPORTED_MODULE_4__getRegion__","refNodeRegion","__WEBPACK_IMPORTED_MODULE_5__getElFuturePos__","newElRegion","isTargetNotOutOfVisible","targetRegion","isOutOfVisibleRect","adjustX","adjustY","newPoints","newOffset","newTargetOffset","isCompleteFailX","_newPoints","_newOffset","_newTargetOffset","isCompleteFailY","__WEBPACK_IMPORTED_MODULE_3__adjustForViewport__","__getOffsetParent","__WEBPACK_IMPORTED_MODULE_1__getOffsetParent__","__getVisibleRectForElement","getVendorPrefix","vendorPrefix","jsCssMap","getTransformName","transitionProperty","matrix","xy","match2d","matrix2d","matrix3d","Webkit","Moz","navigator","userAgent","clientWidth","clientHeight","originalPosition","scrollX","scrollY","documentWidth","scrollWidth","documentHeight","scrollHeight","__WEBPACK_IMPORTED_MODULE_2__isAncestorFixed__","maxVisibleWidth","maxVisibleHeight","resizeWidth","resizeHeight","outerWidth","outerHeight","p1","__WEBPACK_IMPORTED_MODULE_0__getAlignOffset__","p2","region","getChildrenFromProps","__WEBPACK_IMPORTED_MODULE_6_react___default","defaultKey","Animate","_React$Component","__WEBPACK_IMPORTED_MODULE_4_babel_runtime_helpers_possibleConstructorReturn___default","currentlyAnimatingKeys","keysToEnter","keysToLeave","__WEBPACK_IMPORTED_MODULE_8__ChildrenUtils__","childrenRefs","__WEBPACK_IMPORTED_MODULE_5_babel_runtime_helpers_inherits___default","__WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_createClass___default","performAppear","_this3","nextChildren","stop","currentChildren","newChildren","currentChild","nextChild","newChild","__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_defineProperty___default","hasPrev","showInNext","hasNext","showInNow","performEnter","performLeave","_this4","stateChildren","__WEBPACK_IMPORTED_MODULE_9__AnimateChild__","passedProps","componentProps","isAnimate","__WEBPACK_IMPORTED_MODULE_7_prop_types___default","onEnd","onEnter","onLeave","onAppear","_this5","componentWillEnter","handleDoneAdding","componentWillAppear","isValidChildByKey","__WEBPACK_IMPORTED_MODULE_10__util__","componentWillLeave","handleDoneLeaving","desc","findChildInChildrenByKey","__WEBPACK_IMPORTED_MODULE_0_react___default","c1","c2","same","child2","nextChildrenPending","transitionMap","AnimateChild","__WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass___default","__WEBPACK_IMPORTED_MODULE_9__util__","animationType","finishCallback","nameIsObj","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_typeof___default","stopper","__WEBPACK_IMPORTED_MODULE_8_css_animation__","activeName","active","getStyleProperty","prefixes","fixBrowserByTimeout","isCssAnimationSupported","transitionDelay","transitionDuration","animationDelay","animationDuration","rcEndAnimTimeout","rcEndListener","clearBrowserBugTimeout","__WEBPACK_IMPORTED_MODULE_1__Event__","endEvents","capitalPrefixes","cssAnimation","endCallback","activeClassName","nodeClasses","__WEBPACK_IMPORTED_MODULE_2_component_classes___default","rcAnimTimeout","removeEndEventListener","addEndEventListener","setTransition","EVENT_NAME_MAP","WebkitTransition","MozTransition","OTransition","msTransition","WebkitAnimation","MozAnimation","OAnimation","msAnimation","baseEventName","baseEvents","styleName","detectEvents","TransitionEvents","eventListener","endEvent","eventName","ClassList","classList","removeMatching","toggle","force","PopupInner","__WEBPACK_IMPORTED_MODULE_5__LazyRenderBox__","defaultGetContainer","container","_renderComponent","componentArg","ready","_container","_removeContainer","_config$autoMount","_config$autoDestroy","autoDestroy","_config$getContainer","mixin","removeContainer","Portal","__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass___default","placements","autoAdjustOverflow","topLeft","leftTop","topRight","rightTop","bottomRight","rightBottom","bottomLeft","leftBottom"],"mappings":"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","file":"gui.50f617538fbeb9222c14.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 93);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 50f617538fbeb9222c14","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/react/index.js\n// module id = 0\n// module chunks = 0 1 2","'use strict';\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // This branch is unreachable because this function is only called\n    // in production, but the condition is true only in development.\n    // Therefore if the branch is still here, dead code elimination wasn't\n    // properly applied.\n    // Don't change the message. React DevTools relies on it. Also make sure\n    // this message doesn't occur elsewhere in this function, or it will cause\n    // a false positive.\n    throw new Error('^_^');\n  }\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (process.env.NODE_ENV === 'production') {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = require('./cjs/react-dom.production.min.js');\n} else {\n  module.exports = require('./cjs/react-dom.development.js');\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/react-dom/index.js\n// module id = 1\n// module chunks = 0 1 2","\"use strict\";\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction makeEmptyFunction(arg) {\n  return function () {\n    return arg;\n  };\n}\n\n/**\n * This function accepts and discards inputs; it has no side effects. This is\n * primarily useful idiomatically for overridable function endpoints which\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n */\nvar emptyFunction = function emptyFunction() {};\n\nemptyFunction.thatReturns = makeEmptyFunction;\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);\nemptyFunction.thatReturnsThis = function () {\n  return this;\n};\nemptyFunction.thatReturnsArgument = function (arg) {\n  return arg;\n};\n\nmodule.exports = emptyFunction;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/fbjs/lib/emptyFunction.js\n// module id = 2\n// module chunks = 0 1 2","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/object-assign/index.js\n// module id = 3\n// module chunks = 0 1 2","/** MobX - (c) Michel Weststrate 2015, 2016 - MIT Licensed */\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\n/**\n * Anything that can be used to _store_ state is an Atom in mobx. Atoms have two important jobs\n *\n * 1) detect when they are being _used_ and report this (using reportObserved). This allows mobx to make the connection between running functions and the data they used\n * 2) they should notify mobx whenever they have _changed_. This way mobx can re-run any functions (derivations) that are using this atom.\n */\nvar BaseAtom = (function () {\n    /**\n     * Create a new atom. For debugging purposes it is recommended to give it a name.\n     * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.\n     */\n    function BaseAtom(name) {\n        if (name === void 0) { name = \"Atom@\" + getNextId(); }\n        this.name = name;\n        this.isPendingUnobservation = true; // for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it's not needed\n        this.observers = [];\n        this.observersIndexes = {};\n        this.diffValue = 0;\n        this.lastAccessedBy = 0;\n        this.lowestObserverState = IDerivationState.NOT_TRACKING;\n    }\n    BaseAtom.prototype.onBecomeUnobserved = function () {\n        // noop\n    };\n    /**\n     * Invoke this method to notify mobx that your atom has been used somehow.\n     */\n    BaseAtom.prototype.reportObserved = function () {\n        reportObserved(this);\n    };\n    /**\n     * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.\n     */\n    BaseAtom.prototype.reportChanged = function () {\n        startBatch();\n        propagateChanged(this);\n        endBatch();\n    };\n    BaseAtom.prototype.toString = function () {\n        return this.name;\n    };\n    return BaseAtom;\n}());\nvar Atom = (function (_super) {\n    __extends(Atom, _super);\n    /**\n     * Create a new atom. For debugging purposes it is recommended to give it a name.\n     * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.\n     */\n    function Atom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {\n        if (name === void 0) { name = \"Atom@\" + getNextId(); }\n        if (onBecomeObservedHandler === void 0) { onBecomeObservedHandler = noop; }\n        if (onBecomeUnobservedHandler === void 0) { onBecomeUnobservedHandler = noop; }\n        var _this = _super.call(this, name) || this;\n        _this.name = name;\n        _this.onBecomeObservedHandler = onBecomeObservedHandler;\n        _this.onBecomeUnobservedHandler = onBecomeUnobservedHandler;\n        _this.isPendingUnobservation = false; // for effective unobserving.\n        _this.isBeingTracked = false;\n        return _this;\n    }\n    Atom.prototype.reportObserved = function () {\n        startBatch();\n        _super.prototype.reportObserved.call(this);\n        if (!this.isBeingTracked) {\n            this.isBeingTracked = true;\n            this.onBecomeObservedHandler();\n        }\n        endBatch();\n        return !!globalState.trackingDerivation;\n        // return doesn't really give useful info, because it can be as well calling computed which calls atom (no reactions)\n        // also it could not trigger when calculating reaction dependent on Atom because Atom's value was cached by computed called by given reaction.\n    };\n    Atom.prototype.onBecomeUnobserved = function () {\n        this.isBeingTracked = false;\n        this.onBecomeUnobservedHandler();\n    };\n    return Atom;\n}(BaseAtom));\nvar isAtom = createInstanceofPredicate(\"Atom\", BaseAtom);\n\nfunction hasInterceptors(interceptable) {\n    return interceptable.interceptors && interceptable.interceptors.length > 0;\n}\nfunction registerInterceptor(interceptable, handler) {\n    var interceptors = interceptable.interceptors || (interceptable.interceptors = []);\n    interceptors.push(handler);\n    return once(function () {\n        var idx = interceptors.indexOf(handler);\n        if (idx !== -1)\n            interceptors.splice(idx, 1);\n    });\n}\nfunction interceptChange(interceptable, change) {\n    var prevU = untrackedStart();\n    try {\n        var interceptors = interceptable.interceptors;\n        if (interceptors)\n            for (var i = 0, l = interceptors.length; i < l; i++) {\n                change = interceptors[i](change);\n                invariant(!change || change.type, \"Intercept handlers should return nothing or a change object\");\n                if (!change)\n                    break;\n            }\n        return change;\n    }\n    finally {\n        untrackedEnd(prevU);\n    }\n}\n\nfunction hasListeners(listenable) {\n    return listenable.changeListeners && listenable.changeListeners.length > 0;\n}\nfunction registerListener(listenable, handler) {\n    var listeners = listenable.changeListeners || (listenable.changeListeners = []);\n    listeners.push(handler);\n    return once(function () {\n        var idx = listeners.indexOf(handler);\n        if (idx !== -1)\n            listeners.splice(idx, 1);\n    });\n}\nfunction notifyListeners(listenable, change) {\n    var prevU = untrackedStart();\n    var listeners = listenable.changeListeners;\n    if (!listeners)\n        return;\n    listeners = listeners.slice();\n    for (var i = 0, l = listeners.length; i < l; i++) {\n        listeners[i](change);\n    }\n    untrackedEnd(prevU);\n}\n\nfunction isSpyEnabled() {\n    return !!globalState.spyListeners.length;\n}\nfunction spyReport(event) {\n    if (!globalState.spyListeners.length)\n        return;\n    var listeners = globalState.spyListeners;\n    for (var i = 0, l = listeners.length; i < l; i++)\n        listeners[i](event);\n}\nfunction spyReportStart(event) {\n    var change = objectAssign({}, event, { spyReportStart: true });\n    spyReport(change);\n}\nvar END_EVENT = { spyReportEnd: true };\nfunction spyReportEnd(change) {\n    if (change)\n        spyReport(objectAssign({}, change, END_EVENT));\n    else\n        spyReport(END_EVENT);\n}\nfunction spy(listener) {\n    globalState.spyListeners.push(listener);\n    return once(function () {\n        var idx = globalState.spyListeners.indexOf(listener);\n        if (idx !== -1)\n            globalState.spyListeners.splice(idx, 1);\n    });\n}\n\nfunction iteratorSymbol() {\n    return (typeof Symbol === \"function\" && Symbol.iterator) || \"@@iterator\";\n}\nvar IS_ITERATING_MARKER = \"__$$iterating\";\nfunction arrayAsIterator(array) {\n    // returning an array for entries(), values() etc for maps was a mis-interpretation of the specs..,\n    // yet it is quite convenient to be able to use the response both as array directly and as iterator\n    // it is suboptimal, but alas...\n    invariant(array[IS_ITERATING_MARKER] !== true, \"Illegal state: cannot recycle array as iterator\");\n    addHiddenFinalProp(array, IS_ITERATING_MARKER, true);\n    var idx = -1;\n    addHiddenFinalProp(array, \"next\", function next() {\n        idx++;\n        return {\n            done: idx >= this.length,\n            value: idx < this.length ? this[idx] : undefined\n        };\n    });\n    return array;\n}\nfunction declareIterator(prototType, iteratorFactory) {\n    addHiddenFinalProp(prototType, iteratorSymbol(), iteratorFactory);\n}\n\nvar MAX_SPLICE_SIZE = 10000; // See e.g. https://github.com/mobxjs/mobx/issues/859\n// Detects bug in safari 9.1.1 (or iOS 9 safari mobile). See #364\nvar safariPrototypeSetterInheritanceBug = (function () {\n    var v = false;\n    var p = {};\n    Object.defineProperty(p, \"0\", {\n        set: function () {\n            v = true;\n        }\n    });\n    Object.create(p)[\"0\"] = 1;\n    return v === false;\n})();\n/**\n * This array buffer contains two lists of properties, so that all arrays\n * can recycle their property definitions, which significantly improves performance of creating\n * properties on the fly.\n */\nvar OBSERVABLE_ARRAY_BUFFER_SIZE = 0;\n// Typescript workaround to make sure ObservableArray extends Array\nvar StubArray = (function () {\n    function StubArray() {\n    }\n    return StubArray;\n}());\nfunction inherit(ctor, proto) {\n    if (typeof Object[\"setPrototypeOf\"] !== \"undefined\") {\n        Object[\"setPrototypeOf\"](ctor.prototype, proto);\n    }\n    else if (typeof ctor.prototype.__proto__ !== \"undefined\") {\n        ctor.prototype.__proto__ = proto;\n    }\n    else {\n        ctor[\"prototype\"] = proto;\n    }\n}\ninherit(StubArray, Array.prototype);\n// Weex freeze Array.prototype\n// Make them writeable and configurable in prototype chain\n// https://github.com/alibaba/weex/pull/1529\nif (Object.isFrozen(Array)) {\n    \n    [\n        \"constructor\",\n        \"push\",\n        \"shift\",\n        \"concat\",\n        \"pop\",\n        \"unshift\",\n        \"replace\",\n        \"find\",\n        \"findIndex\",\n        \"splice\",\n        \"reverse\",\n        \"sort\"\n    ].forEach(function (key) {\n        Object.defineProperty(StubArray.prototype, key, {\n            configurable: true,\n            writable: true,\n            value: Array.prototype[key]\n        });\n    });\n}\nvar ObservableArrayAdministration = (function () {\n    function ObservableArrayAdministration(name, enhancer, array, owned) {\n        this.array = array;\n        this.owned = owned;\n        this.values = [];\n        this.lastKnownLength = 0;\n        this.interceptors = null;\n        this.changeListeners = null;\n        this.atom = new BaseAtom(name || \"ObservableArray@\" + getNextId());\n        this.enhancer = function (newV, oldV) { return enhancer(newV, oldV, name + \"[..]\"); };\n    }\n    ObservableArrayAdministration.prototype.dehanceValue = function (value) {\n        if (this.dehancer !== undefined)\n            return this.dehancer(value);\n        return value;\n    };\n    ObservableArrayAdministration.prototype.dehanceValues = function (values) {\n        if (this.dehancer !== undefined)\n            return values.map(this.dehancer);\n        return values;\n    };\n    ObservableArrayAdministration.prototype.intercept = function (handler) {\n        return registerInterceptor(this, handler);\n    };\n    ObservableArrayAdministration.prototype.observe = function (listener, fireImmediately) {\n        if (fireImmediately === void 0) { fireImmediately = false; }\n        if (fireImmediately) {\n            listener({\n                object: this.array,\n                type: \"splice\",\n                index: 0,\n                added: this.values.slice(),\n                addedCount: this.values.length,\n                removed: [],\n                removedCount: 0\n            });\n        }\n        return registerListener(this, listener);\n    };\n    ObservableArrayAdministration.prototype.getArrayLength = function () {\n        this.atom.reportObserved();\n        return this.values.length;\n    };\n    ObservableArrayAdministration.prototype.setArrayLength = function (newLength) {\n        if (typeof newLength !== \"number\" || newLength < 0)\n            throw new Error(\"[mobx.array] Out of range: \" + newLength);\n        var currentLength = this.values.length;\n        if (newLength === currentLength)\n            return;\n        else if (newLength > currentLength) {\n            var newItems = new Array(newLength - currentLength);\n            for (var i = 0; i < newLength - currentLength; i++)\n                newItems[i] = undefined; // No Array.fill everywhere...\n            this.spliceWithArray(currentLength, 0, newItems);\n        }\n        else\n            this.spliceWithArray(newLength, currentLength - newLength);\n    };\n    // adds / removes the necessary numeric properties to this object\n    ObservableArrayAdministration.prototype.updateArrayLength = function (oldLength, delta) {\n        if (oldLength !== this.lastKnownLength)\n            throw new Error(\"[mobx] Modification exception: the internal structure of an observable array was changed. Did you use peek() to change it?\");\n        this.lastKnownLength += delta;\n        if (delta > 0 && oldLength + delta + 1 > OBSERVABLE_ARRAY_BUFFER_SIZE)\n            reserveArrayBuffer(oldLength + delta + 1);\n    };\n    ObservableArrayAdministration.prototype.spliceWithArray = function (index, deleteCount, newItems) {\n        var _this = this;\n        checkIfStateModificationsAreAllowed(this.atom);\n        var length = this.values.length;\n        if (index === undefined)\n            index = 0;\n        else if (index > length)\n            index = length;\n        else if (index < 0)\n            index = Math.max(0, length + index);\n        if (arguments.length === 1)\n            deleteCount = length - index;\n        else if (deleteCount === undefined || deleteCount === null)\n            deleteCount = 0;\n        else\n            deleteCount = Math.max(0, Math.min(deleteCount, length - index));\n        if (newItems === undefined)\n            newItems = [];\n        if (hasInterceptors(this)) {\n            var change = interceptChange(this, {\n                object: this.array,\n                type: \"splice\",\n                index: index,\n                removedCount: deleteCount,\n                added: newItems\n            });\n            if (!change)\n                return EMPTY_ARRAY;\n            deleteCount = change.removedCount;\n            newItems = change.added;\n        }\n        newItems = newItems.map(function (v) { return _this.enhancer(v, undefined); });\n        var lengthDelta = newItems.length - deleteCount;\n        this.updateArrayLength(length, lengthDelta); // create or remove new entries\n        var res = this.spliceItemsIntoValues(index, deleteCount, newItems);\n        if (deleteCount !== 0 || newItems.length !== 0)\n            this.notifyArraySplice(index, newItems, res);\n        return this.dehanceValues(res);\n    };\n    ObservableArrayAdministration.prototype.spliceItemsIntoValues = function (index, deleteCount, newItems) {\n        if (newItems.length < MAX_SPLICE_SIZE) {\n            return (_a = this.values).splice.apply(_a, [index, deleteCount].concat(newItems));\n        }\n        else {\n            var res = this.values.slice(index, index + deleteCount);\n            this.values = this.values\n                .slice(0, index)\n                .concat(newItems, this.values.slice(index + deleteCount));\n            return res;\n        }\n        var _a;\n    };\n    ObservableArrayAdministration.prototype.notifyArrayChildUpdate = function (index, newValue, oldValue) {\n        var notifySpy = !this.owned && isSpyEnabled();\n        var notify = hasListeners(this);\n        var change = notify || notifySpy\n            ? {\n                object: this.array,\n                type: \"update\",\n                index: index,\n                newValue: newValue,\n                oldValue: oldValue\n            }\n            : null;\n        if (notifySpy)\n            spyReportStart(change);\n        this.atom.reportChanged();\n        if (notify)\n            notifyListeners(this, change);\n        if (notifySpy)\n            spyReportEnd();\n    };\n    ObservableArrayAdministration.prototype.notifyArraySplice = function (index, added, removed) {\n        var notifySpy = !this.owned && isSpyEnabled();\n        var notify = hasListeners(this);\n        var change = notify || notifySpy\n            ? {\n                object: this.array,\n                type: \"splice\",\n                index: index,\n                removed: removed,\n                added: added,\n                removedCount: removed.length,\n                addedCount: added.length\n            }\n            : null;\n        if (notifySpy)\n            spyReportStart(change);\n        this.atom.reportChanged();\n        // conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe\n        if (notify)\n            notifyListeners(this, change);\n        if (notifySpy)\n            spyReportEnd();\n    };\n    return ObservableArrayAdministration;\n}());\nvar ObservableArray = (function (_super) {\n    __extends(ObservableArray, _super);\n    function ObservableArray(initialValues, enhancer, name, owned) {\n        if (name === void 0) { name = \"ObservableArray@\" + getNextId(); }\n        if (owned === void 0) { owned = false; }\n        var _this = _super.call(this) || this;\n        var adm = new ObservableArrayAdministration(name, enhancer, _this, owned);\n        addHiddenFinalProp(_this, \"$mobx\", adm);\n        if (initialValues && initialValues.length) {\n            _this.spliceWithArray(0, 0, initialValues);\n        }\n        if (safariPrototypeSetterInheritanceBug) {\n            // Seems that Safari won't use numeric prototype setter untill any * numeric property is\n            // defined on the instance. After that it works fine, even if this property is deleted.\n            Object.defineProperty(adm.array, \"0\", ENTRY_0);\n        }\n        return _this;\n    }\n    ObservableArray.prototype.intercept = function (handler) {\n        return this.$mobx.intercept(handler);\n    };\n    ObservableArray.prototype.observe = function (listener, fireImmediately) {\n        if (fireImmediately === void 0) { fireImmediately = false; }\n        return this.$mobx.observe(listener, fireImmediately);\n    };\n    ObservableArray.prototype.clear = function () {\n        return this.splice(0);\n    };\n    ObservableArray.prototype.concat = function () {\n        var arrays = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            arrays[_i] = arguments[_i];\n        }\n        this.$mobx.atom.reportObserved();\n        return Array.prototype.concat.apply(this.peek(), arrays.map(function (a) { return (isObservableArray(a) ? a.peek() : a); }));\n    };\n    ObservableArray.prototype.replace = function (newItems) {\n        return this.$mobx.spliceWithArray(0, this.$mobx.values.length, newItems);\n    };\n    /**\n     * Converts this array back to a (shallow) javascript structure.\n     * For a deep clone use mobx.toJS\n     */\n    ObservableArray.prototype.toJS = function () {\n        return this.slice();\n    };\n    ObservableArray.prototype.toJSON = function () {\n        // Used by JSON.stringify\n        return this.toJS();\n    };\n    ObservableArray.prototype.peek = function () {\n        this.$mobx.atom.reportObserved();\n        return this.$mobx.dehanceValues(this.$mobx.values);\n    };\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\n    ObservableArray.prototype.find = function (predicate, thisArg, fromIndex) {\n        if (fromIndex === void 0) { fromIndex = 0; }\n        var idx = this.findIndex.apply(this, arguments);\n        return idx === -1 ? undefined : this.get(idx);\n    };\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\n    ObservableArray.prototype.findIndex = function (predicate, thisArg, fromIndex) {\n        if (fromIndex === void 0) { fromIndex = 0; }\n        var items = this.peek(), l = items.length;\n        for (var i = fromIndex; i < l; i++)\n            if (predicate.call(thisArg, items[i], i, this))\n                return i;\n        return -1;\n    };\n    /*\n     * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)\n     * since these functions alter the inner structure of the array, the have side effects.\n     * Because the have side effects, they should not be used in computed function,\n     * and for that reason the do not call dependencyState.notifyObserved\n     */\n    ObservableArray.prototype.splice = function (index, deleteCount) {\n        var newItems = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            newItems[_i - 2] = arguments[_i];\n        }\n        switch (arguments.length) {\n            case 0:\n                return [];\n            case 1:\n                return this.$mobx.spliceWithArray(index);\n            case 2:\n                return this.$mobx.spliceWithArray(index, deleteCount);\n        }\n        return this.$mobx.spliceWithArray(index, deleteCount, newItems);\n    };\n    ObservableArray.prototype.spliceWithArray = function (index, deleteCount, newItems) {\n        return this.$mobx.spliceWithArray(index, deleteCount, newItems);\n    };\n    ObservableArray.prototype.push = function () {\n        var items = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            items[_i] = arguments[_i];\n        }\n        var adm = this.$mobx;\n        adm.spliceWithArray(adm.values.length, 0, items);\n        return adm.values.length;\n    };\n    ObservableArray.prototype.pop = function () {\n        return this.splice(Math.max(this.$mobx.values.length - 1, 0), 1)[0];\n    };\n    ObservableArray.prototype.shift = function () {\n        return this.splice(0, 1)[0];\n    };\n    ObservableArray.prototype.unshift = function () {\n        var items = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            items[_i] = arguments[_i];\n        }\n        var adm = this.$mobx;\n        adm.spliceWithArray(0, 0, items);\n        return adm.values.length;\n    };\n    ObservableArray.prototype.reverse = function () {\n        // reverse by default mutates in place before returning the result\n        // which makes it both a 'derivation' and a 'mutation'.\n        // so we deviate from the default and just make it an dervitation\n        var clone = this.slice();\n        return clone.reverse.apply(clone, arguments);\n    };\n    ObservableArray.prototype.sort = function (compareFn) {\n        // sort by default mutates in place before returning the result\n        // which goes against all good practices. Let's not change the array in place!\n        var clone = this.slice();\n        return clone.sort.apply(clone, arguments);\n    };\n    ObservableArray.prototype.remove = function (value) {\n        var idx = this.$mobx.dehanceValues(this.$mobx.values).indexOf(value);\n        if (idx > -1) {\n            this.splice(idx, 1);\n            return true;\n        }\n        return false;\n    };\n    ObservableArray.prototype.move = function (fromIndex, toIndex) {\n        function checkIndex(index) {\n            if (index < 0) {\n                throw new Error(\"[mobx.array] Index out of bounds: \" + index + \" is negative\");\n            }\n            var length = this.$mobx.values.length;\n            if (index >= length) {\n                throw new Error(\"[mobx.array] Index out of bounds: \" + index + \" is not smaller than \" + length);\n            }\n        }\n        checkIndex.call(this, fromIndex);\n        checkIndex.call(this, toIndex);\n        if (fromIndex === toIndex) {\n            return;\n        }\n        var oldItems = this.$mobx.values;\n        var newItems;\n        if (fromIndex < toIndex) {\n            newItems = oldItems.slice(0, fromIndex).concat(oldItems.slice(fromIndex + 1, toIndex + 1), [\n                oldItems[fromIndex]\n            ], oldItems.slice(toIndex + 1));\n        }\n        else {\n            // toIndex < fromIndex\n            newItems = oldItems.slice(0, toIndex).concat([\n                oldItems[fromIndex]\n            ], oldItems.slice(toIndex, fromIndex), oldItems.slice(fromIndex + 1));\n        }\n        this.replace(newItems);\n    };\n    // See #734, in case property accessors are unreliable...\n    ObservableArray.prototype.get = function (index) {\n        var impl = this.$mobx;\n        if (impl) {\n            if (index < impl.values.length) {\n                impl.atom.reportObserved();\n                return impl.dehanceValue(impl.values[index]);\n            }\n            console.warn(\"[mobx.array] Attempt to read an array index (\" + index + \") that is out of bounds (\" + impl\n                .values\n                .length + \"). Please check length first. Out of bound indices will not be tracked by MobX\");\n        }\n        return undefined;\n    };\n    // See #734, in case property accessors are unreliable...\n    ObservableArray.prototype.set = function (index, newValue) {\n        var adm = this.$mobx;\n        var values = adm.values;\n        if (index < values.length) {\n            // update at index in range\n            checkIfStateModificationsAreAllowed(adm.atom);\n            var oldValue = values[index];\n            if (hasInterceptors(adm)) {\n                var change = interceptChange(adm, {\n                    type: \"update\",\n                    object: this,\n                    index: index,\n                    newValue: newValue\n                });\n                if (!change)\n                    return;\n                newValue = change.newValue;\n            }\n            newValue = adm.enhancer(newValue, oldValue);\n            var changed = newValue !== oldValue;\n            if (changed) {\n                values[index] = newValue;\n                adm.notifyArrayChildUpdate(index, newValue, oldValue);\n            }\n        }\n        else if (index === values.length) {\n            // add a new item\n            adm.spliceWithArray(index, 0, [newValue]);\n        }\n        else {\n            // out of bounds\n            throw new Error(\"[mobx.array] Index out of bounds, \" + index + \" is larger than \" + values.length);\n        }\n    };\n    return ObservableArray;\n}(StubArray));\ndeclareIterator(ObservableArray.prototype, function () {\n    return arrayAsIterator(this.slice());\n});\nObject.defineProperty(ObservableArray.prototype, \"length\", {\n    enumerable: false,\n    configurable: true,\n    get: function () {\n        return this.$mobx.getArrayLength();\n    },\n    set: function (newLength) {\n        this.$mobx.setArrayLength(newLength);\n    }\n});\n[\n    \"every\",\n    \"filter\",\n    \"forEach\",\n    \"indexOf\",\n    \"join\",\n    \"lastIndexOf\",\n    \"map\",\n    \"reduce\",\n    \"reduceRight\",\n    \"slice\",\n    \"some\",\n    \"toString\",\n    \"toLocaleString\"\n].forEach(function (funcName) {\n    var baseFunc = Array.prototype[funcName];\n    invariant(typeof baseFunc === \"function\", \"Base function not defined on Array prototype: '\" + funcName + \"'\");\n    addHiddenProp(ObservableArray.prototype, funcName, function () {\n        return baseFunc.apply(this.peek(), arguments);\n    });\n});\n/**\n * We don't want those to show up in `for (const key in ar)` ...\n */\nmakeNonEnumerable(ObservableArray.prototype, [\n    \"constructor\",\n    \"intercept\",\n    \"observe\",\n    \"clear\",\n    \"concat\",\n    \"get\",\n    \"replace\",\n    \"toJS\",\n    \"toJSON\",\n    \"peek\",\n    \"find\",\n    \"findIndex\",\n    \"splice\",\n    \"spliceWithArray\",\n    \"push\",\n    \"pop\",\n    \"set\",\n    \"shift\",\n    \"unshift\",\n    \"reverse\",\n    \"sort\",\n    \"remove\",\n    \"move\",\n    \"toString\",\n    \"toLocaleString\"\n]);\n// See #364\nvar ENTRY_0 = createArrayEntryDescriptor(0);\nfunction createArrayEntryDescriptor(index) {\n    return {\n        enumerable: false,\n        configurable: false,\n        get: function () {\n            // TODO: Check `this`?, see #752?\n            return this.get(index);\n        },\n        set: function (value) {\n            this.set(index, value);\n        }\n    };\n}\nfunction createArrayBufferItem(index) {\n    Object.defineProperty(ObservableArray.prototype, \"\" + index, createArrayEntryDescriptor(index));\n}\nfunction reserveArrayBuffer(max) {\n    for (var index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max; index++)\n        createArrayBufferItem(index);\n    OBSERVABLE_ARRAY_BUFFER_SIZE = max;\n}\nreserveArrayBuffer(1000);\nvar isObservableArrayAdministration = createInstanceofPredicate(\"ObservableArrayAdministration\", ObservableArrayAdministration);\nfunction isObservableArray(thing) {\n    return isObject(thing) && isObservableArrayAdministration(thing.$mobx);\n}\n\nvar UNCHANGED = {};\nvar ObservableValue = (function (_super) {\n    __extends(ObservableValue, _super);\n    function ObservableValue(value, enhancer, name, notifySpy) {\n        if (name === void 0) { name = \"ObservableValue@\" + getNextId(); }\n        if (notifySpy === void 0) { notifySpy = true; }\n        var _this = _super.call(this, name) || this;\n        _this.enhancer = enhancer;\n        _this.hasUnreportedChange = false;\n        _this.dehancer = undefined;\n        _this.value = enhancer(value, undefined, name);\n        if (notifySpy && isSpyEnabled()) {\n            // only notify spy if this is a stand-alone observable\n            spyReport({ type: \"create\", object: _this, newValue: _this.value });\n        }\n        return _this;\n    }\n    ObservableValue.prototype.dehanceValue = function (value) {\n        if (this.dehancer !== undefined)\n            return this.dehancer(value);\n        return value;\n    };\n    ObservableValue.prototype.set = function (newValue) {\n        var oldValue = this.value;\n        newValue = this.prepareNewValue(newValue);\n        if (newValue !== UNCHANGED) {\n            var notifySpy = isSpyEnabled();\n            if (notifySpy) {\n                spyReportStart({\n                    type: \"update\",\n                    object: this,\n                    newValue: newValue,\n                    oldValue: oldValue\n                });\n            }\n            this.setNewValue(newValue);\n            if (notifySpy)\n                spyReportEnd();\n        }\n    };\n    ObservableValue.prototype.prepareNewValue = function (newValue) {\n        checkIfStateModificationsAreAllowed(this);\n        if (hasInterceptors(this)) {\n            var change = interceptChange(this, {\n                object: this,\n                type: \"update\",\n                newValue: newValue\n            });\n            if (!change)\n                return UNCHANGED;\n            newValue = change.newValue;\n        }\n        // apply modifier\n        newValue = this.enhancer(newValue, this.value, this.name);\n        return this.value !== newValue ? newValue : UNCHANGED;\n    };\n    ObservableValue.prototype.setNewValue = function (newValue) {\n        var oldValue = this.value;\n        this.value = newValue;\n        this.reportChanged();\n        if (hasListeners(this)) {\n            notifyListeners(this, {\n                type: \"update\",\n                object: this,\n                newValue: newValue,\n                oldValue: oldValue\n            });\n        }\n    };\n    ObservableValue.prototype.get = function () {\n        this.reportObserved();\n        return this.dehanceValue(this.value);\n    };\n    ObservableValue.prototype.intercept = function (handler) {\n        return registerInterceptor(this, handler);\n    };\n    ObservableValue.prototype.observe = function (listener, fireImmediately) {\n        if (fireImmediately)\n            listener({\n                object: this,\n                type: \"update\",\n                newValue: this.value,\n                oldValue: undefined\n            });\n        return registerListener(this, listener);\n    };\n    ObservableValue.prototype.toJSON = function () {\n        return this.get();\n    };\n    ObservableValue.prototype.toString = function () {\n        return this.name + \"[\" + this.value + \"]\";\n    };\n    ObservableValue.prototype.valueOf = function () {\n        return toPrimitive(this.get());\n    };\n    return ObservableValue;\n}(BaseAtom));\nObservableValue.prototype[primitiveSymbol()] = ObservableValue.prototype.valueOf;\nvar isObservableValue = createInstanceofPredicate(\"ObservableValue\", ObservableValue);\n\nvar messages = {\n    m001: \"It is not allowed to assign new values to @action fields\",\n    m002: \"`runInAction` expects a function\",\n    m003: \"`runInAction` expects a function without arguments\",\n    m004: \"autorun expects a function\",\n    m005: \"Warning: attempted to pass an action to autorun. Actions are untracked and will not trigger on state changes. Use `reaction` or wrap only your state modification code in an action.\",\n    m006: \"Warning: attempted to pass an action to autorunAsync. Actions are untracked and will not trigger on state changes. Use `reaction` or wrap only your state modification code in an action.\",\n    m007: \"reaction only accepts 2 or 3 arguments. If migrating from MobX 2, please provide an options object\",\n    m008: \"wrapping reaction expression in `asReference` is no longer supported, use options object instead\",\n    m009: \"@computed can only be used on getter functions, like: '@computed get myProps() { return ...; }'. It looks like it was used on a property.\",\n    m010: \"@computed can only be used on getter functions, like: '@computed get myProps() { return ...; }'\",\n    m011: \"First argument to `computed` should be an expression. If using computed as decorator, don't pass it arguments\",\n    m012: \"computed takes one or two arguments if used as function\",\n    m013: \"[mobx.expr] 'expr' should only be used inside other reactive functions.\",\n    m014: \"extendObservable expected 2 or more arguments\",\n    m015: \"extendObservable expects an object as first argument\",\n    m016: \"extendObservable should not be used on maps, use map.merge instead\",\n    m017: \"all arguments of extendObservable should be objects\",\n    m018: \"extending an object with another observable (object) is not supported. Please construct an explicit propertymap, using `toJS` if need. See issue #540\",\n    m019: \"[mobx.isObservable] isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.\",\n    m020: \"modifiers can only be used for individual object properties\",\n    m021: \"observable expects zero or one arguments\",\n    m022: \"@observable can not be used on getters, use @computed instead\",\n    m024: \"whyRun() can only be used if a derivation is active, or by passing an computed value / reaction explicitly. If you invoked whyRun from inside a computation; the computation is currently suspended but re-evaluating because somebody requested its value.\",\n    m025: \"whyRun can only be used on reactions and computed values\",\n    m026: \"`action` can only be invoked on functions\",\n    m028: \"It is not allowed to set `useStrict` when a derivation is running\",\n    m029: \"INTERNAL ERROR only onBecomeUnobserved shouldn't be called twice in a row\",\n    m030a: \"Since strict-mode is enabled, changing observed observable values outside actions is not allowed. Please wrap the code in an `action` if this change is intended. Tried to modify: \",\n    m030b: \"Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, the render function of a React component? Tried to modify: \",\n    m031: \"Computed values are not allowed to cause side effects by changing observables that are already being observed. Tried to modify: \",\n    m032: \"* This computation is suspended (not in use by any reaction) and won't run automatically.\\n\tDidn't expect this computation to be suspended at this point?\\n\t  1. Make sure this computation is used by a reaction (reaction, autorun, observer).\\n\t  2. Check whether you are using this computation synchronously (in the same stack as they reaction that needs it).\",\n    m033: \"`observe` doesn't support the fire immediately property for observable maps.\",\n    m034: \"`mobx.map` is deprecated, use `new ObservableMap` or `mobx.observable.map` instead\",\n    m035: \"Cannot make the designated object observable; it is not extensible\",\n    m036: \"It is not possible to get index atoms from arrays\",\n    m037: \"Hi there! I'm sorry you have just run into an exception.\\nIf your debugger ends up here, know that some reaction (like the render() of an observer component, autorun or reaction)\\nthrew an exception and that mobx caught it, to avoid that it brings the rest of your application down.\\nThe original cause of the exception (the code that caused this reaction to run (again)), is still in the stack.\\n\\nHowever, more interesting is the actual stack trace of the error itself.\\nHopefully the error is an instanceof Error, because in that case you can inspect the original stack of the error from where it was thrown.\\nSee `error.stack` property, or press the very subtle \\\"(...)\\\" link you see near the console.error message that probably brought you here.\\nThat stack is more interesting than the stack of this console.error itself.\\n\\nIf the exception you see is an exception you created yourself, make sure to use `throw new Error(\\\"Oops\\\")` instead of `throw \\\"Oops\\\"`,\\nbecause the javascript environment will only preserve the original stack trace in the first form.\\n\\nYou can also make sure the debugger pauses the next time this very same exception is thrown by enabling \\\"Pause on caught exception\\\".\\n(Note that it might pause on many other, unrelated exception as well).\\n\\nIf that all doesn't help you out, feel free to open an issue https://github.com/mobxjs/mobx/issues!\\n\",\n    m038: \"Missing items in this list?\\n    1. Check whether all used values are properly marked as observable (use isObservable to verify)\\n    2. Make sure you didn't dereference values too early. MobX observes props, not primitives. E.g: use 'person.name' instead of 'name' in your computation.\\n\"\n};\nfunction getMessage(id) {\n    return messages[id];\n}\n\nfunction createAction(actionName, fn) {\n    invariant(typeof fn === \"function\", getMessage(\"m026\"));\n    invariant(typeof actionName === \"string\" && actionName.length > 0, \"actions should have valid names, got: '\" + actionName + \"'\");\n    var res = function () {\n        return executeAction(actionName, fn, this, arguments);\n    };\n    res.originalFn = fn;\n    res.isMobxAction = true;\n    return res;\n}\nfunction executeAction(actionName, fn, scope, args) {\n    var runInfo = startAction(actionName, fn, scope, args);\n    try {\n        return fn.apply(scope, args);\n    }\n    finally {\n        endAction(runInfo);\n    }\n}\nfunction startAction(actionName, fn, scope, args) {\n    var notifySpy = isSpyEnabled() && !!actionName;\n    var startTime = 0;\n    if (notifySpy) {\n        startTime = Date.now();\n        var l = (args && args.length) || 0;\n        var flattendArgs = new Array(l);\n        if (l > 0)\n            for (var i = 0; i < l; i++)\n                flattendArgs[i] = args[i];\n        spyReportStart({\n            type: \"action\",\n            name: actionName,\n            fn: fn,\n            object: scope,\n            arguments: flattendArgs\n        });\n    }\n    var prevDerivation = untrackedStart();\n    startBatch();\n    var prevAllowStateChanges = allowStateChangesStart(true);\n    return {\n        prevDerivation: prevDerivation,\n        prevAllowStateChanges: prevAllowStateChanges,\n        notifySpy: notifySpy,\n        startTime: startTime\n    };\n}\nfunction endAction(runInfo) {\n    allowStateChangesEnd(runInfo.prevAllowStateChanges);\n    endBatch();\n    untrackedEnd(runInfo.prevDerivation);\n    if (runInfo.notifySpy)\n        spyReportEnd({ time: Date.now() - runInfo.startTime });\n}\nfunction useStrict(strict) {\n    invariant(globalState.trackingDerivation === null, getMessage(\"m028\"));\n    globalState.strictMode = strict;\n    globalState.allowStateChanges = !strict;\n}\nfunction isStrictModeEnabled() {\n    return globalState.strictMode;\n}\nfunction allowStateChanges(allowStateChanges, func) {\n    // TODO: deprecate / refactor this function in next major\n    // Currently only used by `@observer`\n    // Proposed change: remove first param, rename to `forbidStateChanges`,\n    // require error callback instead of the hardcoded error message now used\n    // Use `inAction` instead of allowStateChanges in derivation.ts to check strictMode\n    var prev = allowStateChangesStart(allowStateChanges);\n    var res;\n    try {\n        res = func();\n    }\n    finally {\n        allowStateChangesEnd(prev);\n    }\n    return res;\n}\nfunction allowStateChangesStart(allowStateChanges) {\n    var prev = globalState.allowStateChanges;\n    globalState.allowStateChanges = allowStateChanges;\n    return prev;\n}\nfunction allowStateChangesEnd(prev) {\n    globalState.allowStateChanges = prev;\n}\n\n/**\n * Constructs a decorator, that normalizes the differences between\n * TypeScript and Babel. Mainly caused by the fact that legacy-decorator cannot assign\n * values during instance creation to properties that have a getter setter.\n *\n * - Sigh -\n *\n * Also takes care of the difference between @decorator field and @decorator(args) field, and different forms of values.\n * For performance (cpu and mem) reasons the properties are always defined on the prototype (at least initially).\n * This means that these properties despite being enumerable might not show up in Object.keys() (but they will show up in for...in loops).\n */\nfunction createClassPropertyDecorator(\n    /**\n     * This function is invoked once, when the property is added to a new instance.\n     * When this happens is not strictly determined due to differences in TS and Babel:\n     * Typescript: Usually when constructing the new instance\n     * Babel, sometimes Typescript: during the first get / set\n     * Both: when calling `runLazyInitializers(instance)`\n     */\n    onInitialize, get, set, enumerable, \n    /**\n     * Can this decorator invoked with arguments? e.g. @decorator(args)\n     */\n    allowCustomArguments) {\n    function classPropertyDecorator(target, key, descriptor, customArgs, argLen) {\n        if (argLen === void 0) { argLen = 0; }\n        invariant(allowCustomArguments || quacksLikeADecorator(arguments), \"This function is a decorator, but it wasn't invoked like a decorator\");\n        if (!descriptor) {\n            // typescript (except for getter / setters)\n            var newDescriptor = {\n                enumerable: enumerable,\n                configurable: true,\n                get: function () {\n                    if (!this.__mobxInitializedProps || this.__mobxInitializedProps[key] !== true)\n                        typescriptInitializeProperty(this, key, undefined, onInitialize, customArgs, descriptor);\n                    return get.call(this, key);\n                },\n                set: function (v) {\n                    if (!this.__mobxInitializedProps || this.__mobxInitializedProps[key] !== true) {\n                        typescriptInitializeProperty(this, key, v, onInitialize, customArgs, descriptor);\n                    }\n                    else {\n                        set.call(this, key, v);\n                    }\n                }\n            };\n            if (arguments.length < 3 || (arguments.length === 5 && argLen < 3)) {\n                // Typescript target is ES3, so it won't define property for us\n                // or using Reflect.decorate polyfill, which will return no descriptor\n                // (see https://github.com/mobxjs/mobx/issues/333)\n                Object.defineProperty(target, key, newDescriptor);\n            }\n            return newDescriptor;\n        }\n        else {\n            // babel and typescript getter / setter props\n            if (!hasOwnProperty(target, \"__mobxLazyInitializers\")) {\n                addHiddenProp(target, \"__mobxLazyInitializers\", (target.__mobxLazyInitializers && target.__mobxLazyInitializers.slice()) || [] // support inheritance\n                );\n            }\n            var value_1 = descriptor.value, initializer_1 = descriptor.initializer;\n            target.__mobxLazyInitializers.push(function (instance) {\n                onInitialize(instance, key, initializer_1 ? initializer_1.call(instance) : value_1, customArgs, descriptor);\n            });\n            return {\n                enumerable: enumerable,\n                configurable: true,\n                get: function () {\n                    if (this.__mobxDidRunLazyInitializers !== true)\n                        runLazyInitializers(this);\n                    return get.call(this, key);\n                },\n                set: function (v) {\n                    if (this.__mobxDidRunLazyInitializers !== true)\n                        runLazyInitializers(this);\n                    set.call(this, key, v);\n                }\n            };\n        }\n    }\n    if (allowCustomArguments) {\n        /** If custom arguments are allowed, we should return a function that returns a decorator */\n        return function () {\n            /** Direct invocation: @decorator bla */\n            if (quacksLikeADecorator(arguments))\n                return classPropertyDecorator.apply(null, arguments);\n            /** Indirect invocation: @decorator(args) bla */\n            var outerArgs = arguments;\n            var argLen = arguments.length;\n            return function (target, key, descriptor) {\n                return classPropertyDecorator(target, key, descriptor, outerArgs, argLen);\n            };\n        };\n    }\n    return classPropertyDecorator;\n}\nfunction typescriptInitializeProperty(instance, key, v, onInitialize, customArgs, baseDescriptor) {\n    if (!hasOwnProperty(instance, \"__mobxInitializedProps\"))\n        addHiddenProp(instance, \"__mobxInitializedProps\", {});\n    instance.__mobxInitializedProps[key] = true;\n    onInitialize(instance, key, v, customArgs, baseDescriptor);\n}\nfunction runLazyInitializers(instance) {\n    if (instance.__mobxDidRunLazyInitializers === true)\n        return;\n    if (instance.__mobxLazyInitializers) {\n        addHiddenProp(instance, \"__mobxDidRunLazyInitializers\", true);\n        instance.__mobxDidRunLazyInitializers &&\n            instance.__mobxLazyInitializers.forEach(function (initializer) { return initializer(instance); });\n    }\n}\nfunction quacksLikeADecorator(args) {\n    return (args.length === 2 || args.length === 3) && typeof args[1] === \"string\";\n}\n\nvar actionFieldDecorator = createClassPropertyDecorator(function (target, key, value, args, originalDescriptor) {\n    var actionName = args && args.length === 1 ? args[0] : value.name || key || \"<unnamed action>\";\n    var wrappedAction = action(actionName, value);\n    addHiddenProp(target, key, wrappedAction);\n}, function (key) {\n    return this[key];\n}, function () {\n    invariant(false, getMessage(\"m001\"));\n}, false, true);\nvar boundActionDecorator = createClassPropertyDecorator(function (target, key, value) {\n    defineBoundAction(target, key, value);\n}, function (key) {\n    return this[key];\n}, function () {\n    invariant(false, getMessage(\"m001\"));\n}, false, false);\nvar action = function action(arg1, arg2, arg3, arg4) {\n    if (arguments.length === 1 && typeof arg1 === \"function\")\n        return createAction(arg1.name || \"<unnamed action>\", arg1);\n    if (arguments.length === 2 && typeof arg2 === \"function\")\n        return createAction(arg1, arg2);\n    if (arguments.length === 1 && typeof arg1 === \"string\")\n        return namedActionDecorator(arg1);\n    return namedActionDecorator(arg2).apply(null, arguments);\n};\naction.bound = function boundAction(arg1, arg2, arg3) {\n    if (typeof arg1 === \"function\") {\n        var action_1 = createAction(\"<not yet bound action>\", arg1);\n        action_1.autoBind = true;\n        return action_1;\n    }\n    return boundActionDecorator.apply(null, arguments);\n};\nfunction namedActionDecorator(name) {\n    return function (target, prop, descriptor) {\n        if (descriptor && typeof descriptor.value === \"function\") {\n            // TypeScript @action method() { }. Defined on proto before being decorated\n            // Don't use the field decorator if we are just decorating a method\n            descriptor.value = createAction(name, descriptor.value);\n            descriptor.enumerable = false;\n            descriptor.configurable = true;\n            return descriptor;\n        }\n        if (descriptor !== undefined && descriptor.get !== undefined) {\n            throw new Error(\"[mobx] action is not expected to be used with getters\");\n        }\n        // bound instance methods\n        return actionFieldDecorator(name).apply(this, arguments);\n    };\n}\nfunction runInAction(arg1, arg2, arg3) {\n    var actionName = typeof arg1 === \"string\" ? arg1 : arg1.name || \"<unnamed action>\";\n    var fn = typeof arg1 === \"function\" ? arg1 : arg2;\n    var scope = typeof arg1 === \"function\" ? arg2 : arg3;\n    invariant(typeof fn === \"function\", getMessage(\"m002\"));\n    invariant(fn.length === 0, getMessage(\"m003\"));\n    invariant(typeof actionName === \"string\" && actionName.length > 0, \"actions should have valid names, got: '\" + actionName + \"'\");\n    return executeAction(actionName, fn, scope, undefined);\n}\nfunction isAction(thing) {\n    return typeof thing === \"function\" && thing.isMobxAction === true;\n}\nfunction defineBoundAction(target, propertyName, fn) {\n    var res = function () {\n        return executeAction(propertyName, fn, target, arguments);\n    };\n    res.isMobxAction = true;\n    addHiddenProp(target, propertyName, res);\n}\n\nfunction identityComparer(a, b) {\n    return a === b;\n}\nfunction structuralComparer(a, b) {\n    return deepEqual(a, b);\n}\nfunction defaultComparer(a, b) {\n    return areBothNaN(a, b) || identityComparer(a, b);\n}\nvar comparer = {\n    identity: identityComparer,\n    structural: structuralComparer,\n    default: defaultComparer\n};\n\nfunction autorun(arg1, arg2, arg3) {\n    var name, view, scope;\n    if (typeof arg1 === \"string\") {\n        name = arg1;\n        view = arg2;\n        scope = arg3;\n    }\n    else {\n        name = arg1.name || \"Autorun@\" + getNextId();\n        view = arg1;\n        scope = arg2;\n    }\n    invariant(typeof view === \"function\", getMessage(\"m004\"));\n    invariant(isAction(view) === false, getMessage(\"m005\"));\n    if (scope)\n        view = view.bind(scope);\n    var reaction = new Reaction(name, function () {\n        this.track(reactionRunner);\n    });\n    function reactionRunner() {\n        view(reaction);\n    }\n    reaction.schedule();\n    return reaction.getDisposer();\n}\nfunction when(arg1, arg2, arg3, arg4) {\n    var name, predicate, effect, scope;\n    if (typeof arg1 === \"string\") {\n        name = arg1;\n        predicate = arg2;\n        effect = arg3;\n        scope = arg4;\n    }\n    else {\n        name = \"When@\" + getNextId();\n        predicate = arg1;\n        effect = arg2;\n        scope = arg3;\n    }\n    var disposer = autorun(name, function (r) {\n        if (predicate.call(scope)) {\n            r.dispose();\n            var prevUntracked = untrackedStart();\n            effect.call(scope);\n            untrackedEnd(prevUntracked);\n        }\n    });\n    return disposer;\n}\nfunction autorunAsync(arg1, arg2, arg3, arg4) {\n    var name, func, delay, scope;\n    if (typeof arg1 === \"string\") {\n        name = arg1;\n        func = arg2;\n        delay = arg3;\n        scope = arg4;\n    }\n    else {\n        name = arg1.name || \"AutorunAsync@\" + getNextId();\n        func = arg1;\n        delay = arg2;\n        scope = arg3;\n    }\n    invariant(isAction(func) === false, getMessage(\"m006\"));\n    if (delay === void 0)\n        delay = 1;\n    if (scope)\n        func = func.bind(scope);\n    var isScheduled = false;\n    var r = new Reaction(name, function () {\n        if (!isScheduled) {\n            isScheduled = true;\n            setTimeout(function () {\n                isScheduled = false;\n                if (!r.isDisposed)\n                    r.track(reactionRunner);\n            }, delay);\n        }\n    });\n    function reactionRunner() {\n        func(r);\n    }\n    r.schedule();\n    return r.getDisposer();\n}\nfunction reaction(expression, effect, arg3) {\n    if (arguments.length > 3) {\n        fail(getMessage(\"m007\"));\n    }\n    if (isModifierDescriptor(expression)) {\n        fail(getMessage(\"m008\"));\n    }\n    var opts;\n    if (typeof arg3 === \"object\") {\n        opts = arg3;\n    }\n    else {\n        opts = {};\n    }\n    opts.name =\n        opts.name || expression.name || effect.name || \"Reaction@\" + getNextId();\n    opts.fireImmediately = arg3 === true || opts.fireImmediately === true;\n    opts.delay = opts.delay || 0;\n    opts.compareStructural = opts.compareStructural || opts.struct || false;\n    // TODO: creates ugly spy events, use `effect = (r) => runInAction(opts.name, () => effect(r))` instead\n    effect = action(opts.name, opts.context ? effect.bind(opts.context) : effect);\n    if (opts.context) {\n        expression = expression.bind(opts.context);\n    }\n    var firstTime = true;\n    var isScheduled = false;\n    var value;\n    var equals = opts.equals\n        ? opts.equals\n        : opts.compareStructural || opts.struct ? comparer.structural : comparer.default;\n    var r = new Reaction(opts.name, function () {\n        if (firstTime || opts.delay < 1) {\n            reactionRunner();\n        }\n        else if (!isScheduled) {\n            isScheduled = true;\n            setTimeout(function () {\n                isScheduled = false;\n                reactionRunner();\n            }, opts.delay);\n        }\n    });\n    function reactionRunner() {\n        if (r.isDisposed)\n            return;\n        var changed = false;\n        r.track(function () {\n            var nextValue = expression(r);\n            changed = firstTime || !equals(value, nextValue);\n            value = nextValue;\n        });\n        if (firstTime && opts.fireImmediately)\n            effect(value, r);\n        if (!firstTime && changed === true)\n            effect(value, r);\n        if (firstTime)\n            firstTime = false;\n    }\n    r.schedule();\n    return r.getDisposer();\n}\n\n/**\n * A node in the state dependency root that observes other nodes, and can be observed itself.\n *\n * ComputedValue will remember the result of the computation for the duration of the batch, or\n * while being observed.\n *\n * During this time it will recompute only when one of its direct dependencies changed,\n * but only when it is being accessed with `ComputedValue.get()`.\n *\n * Implementation description:\n * 1. First time it's being accessed it will compute and remember result\n *    give back remembered result until 2. happens\n * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.\n * 3. When it's being accessed, recompute if any shallow dependency changed.\n *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.\n *    go to step 2. either way\n *\n * If at any point it's outside batch and it isn't observed: reset everything and go to 1.\n */\nvar ComputedValue = (function () {\n    /**\n     * Create a new computed value based on a function expression.\n     *\n     * The `name` property is for debug purposes only.\n     *\n     * The `equals` property specifies the comparer function to use to determine if a newly produced\n     * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`\n     * compares based on identity comparison (===), and `structualComparer` deeply compares the structure.\n     * Structural comparison can be convenient if you always produce an new aggregated object and\n     * don't want to notify observers if it is structurally the same.\n     * This is useful for working with vectors, mouse coordinates etc.\n     */\n    function ComputedValue(derivation, scope, equals, name, setter) {\n        this.derivation = derivation;\n        this.scope = scope;\n        this.equals = equals;\n        this.dependenciesState = IDerivationState.NOT_TRACKING;\n        this.observing = []; // nodes we are looking at. Our value depends on these nodes\n        this.newObserving = null; // during tracking it's an array with new observed observers\n        this.isPendingUnobservation = false;\n        this.observers = [];\n        this.observersIndexes = {};\n        this.diffValue = 0;\n        this.runId = 0;\n        this.lastAccessedBy = 0;\n        this.lowestObserverState = IDerivationState.UP_TO_DATE;\n        this.unboundDepsCount = 0;\n        this.__mapid = \"#\" + getNextId();\n        this.value = new CaughtException(null);\n        this.isComputing = false; // to check for cycles\n        this.isRunningSetter = false;\n        this.name = name || \"ComputedValue@\" + getNextId();\n        if (setter)\n            this.setter = createAction(name + \"-setter\", setter);\n    }\n    ComputedValue.prototype.onBecomeStale = function () {\n        propagateMaybeChanged(this);\n    };\n    ComputedValue.prototype.onBecomeUnobserved = function () {\n        clearObserving(this);\n        this.value = undefined;\n    };\n    /**\n     * Returns the current value of this computed value.\n     * Will evaluate its computation first if needed.\n     */\n    ComputedValue.prototype.get = function () {\n        invariant(!this.isComputing, \"Cycle detected in computation \" + this.name, this.derivation);\n        if (globalState.inBatch === 0) {\n            // This is an minor optimization which could be omitted to simplify the code\n            // The computedValue is accessed outside of any mobx stuff. Batch observing should be enough and don't need\n            // tracking as it will never be called again inside this batch.\n            startBatch();\n            if (shouldCompute(this))\n                this.value = this.computeValue(false);\n            endBatch();\n        }\n        else {\n            reportObserved(this);\n            if (shouldCompute(this))\n                if (this.trackAndCompute())\n                    propagateChangeConfirmed(this);\n        }\n        var result = this.value;\n        if (isCaughtException(result))\n            throw result.cause;\n        return result;\n    };\n    ComputedValue.prototype.peek = function () {\n        var res = this.computeValue(false);\n        if (isCaughtException(res))\n            throw res.cause;\n        return res;\n    };\n    ComputedValue.prototype.set = function (value) {\n        if (this.setter) {\n            invariant(!this.isRunningSetter, \"The setter of computed value '\" + this\n                .name + \"' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?\");\n            this.isRunningSetter = true;\n            try {\n                this.setter.call(this.scope, value);\n            }\n            finally {\n                this.isRunningSetter = false;\n            }\n        }\n        else\n            invariant(false, \"[ComputedValue '\" + this\n                .name + \"'] It is not possible to assign a new value to a computed value.\");\n    };\n    ComputedValue.prototype.trackAndCompute = function () {\n        if (isSpyEnabled()) {\n            spyReport({\n                object: this.scope,\n                type: \"compute\",\n                fn: this.derivation\n            });\n        }\n        var oldValue = this.value;\n        var wasSuspended = this.dependenciesState === IDerivationState.NOT_TRACKING;\n        var newValue = (this.value = this.computeValue(true));\n        return (wasSuspended ||\n            isCaughtException(oldValue) ||\n            isCaughtException(newValue) ||\n            !this.equals(oldValue, newValue));\n    };\n    ComputedValue.prototype.computeValue = function (track) {\n        this.isComputing = true;\n        globalState.computationDepth++;\n        var res;\n        if (track) {\n            res = trackDerivedFunction(this, this.derivation, this.scope);\n        }\n        else {\n            try {\n                res = this.derivation.call(this.scope);\n            }\n            catch (e) {\n                res = new CaughtException(e);\n            }\n        }\n        globalState.computationDepth--;\n        this.isComputing = false;\n        return res;\n    };\n    ComputedValue.prototype.observe = function (listener, fireImmediately) {\n        var _this = this;\n        var firstTime = true;\n        var prevValue = undefined;\n        return autorun(function () {\n            var newValue = _this.get();\n            if (!firstTime || fireImmediately) {\n                var prevU = untrackedStart();\n                listener({\n                    type: \"update\",\n                    object: _this,\n                    newValue: newValue,\n                    oldValue: prevValue\n                });\n                untrackedEnd(prevU);\n            }\n            firstTime = false;\n            prevValue = newValue;\n        });\n    };\n    ComputedValue.prototype.toJSON = function () {\n        return this.get();\n    };\n    ComputedValue.prototype.toString = function () {\n        return this.name + \"[\" + this.derivation.toString() + \"]\";\n    };\n    ComputedValue.prototype.valueOf = function () {\n        return toPrimitive(this.get());\n    };\n    ComputedValue.prototype.whyRun = function () {\n        var isTracking = Boolean(globalState.trackingDerivation);\n        var observing = unique(this.isComputing ? this.newObserving : this.observing).map(function (dep) { return dep.name; });\n        var observers = unique(getObservers(this).map(function (dep) { return dep.name; }));\n        return (\"\\nWhyRun? computation '\" + this.name + \"':\\n * Running because: \" + (isTracking\n            ? \"[active] the value of this computation is needed by a reaction\"\n            : this.isComputing\n                ? \"[get] The value of this computed was requested outside a reaction\"\n                : \"[idle] not running at the moment\") + \"\\n\" +\n            (this.dependenciesState === IDerivationState.NOT_TRACKING\n                ? getMessage(\"m032\")\n                : \" * This computation will re-run if any of the following observables changes:\\n    \" + joinStrings(observing) + \"\\n    \" + (this.isComputing && isTracking\n                    ? \" (... or any observable accessed during the remainder of the current run)\"\n                    : \"\") + \"\\n    \" + getMessage(\"m038\") + \"\\n\\n  * If the outcome of this computation changes, the following observers will be re-run:\\n    \" + joinStrings(observers) + \"\\n\"));\n    };\n    return ComputedValue;\n}());\nComputedValue.prototype[primitiveSymbol()] = ComputedValue.prototype.valueOf;\nvar isComputedValue = createInstanceofPredicate(\"ComputedValue\", ComputedValue);\n\nvar ObservableObjectAdministration = (function () {\n    function ObservableObjectAdministration(target, name) {\n        this.target = target;\n        this.name = name;\n        this.values = {};\n        this.changeListeners = null;\n        this.interceptors = null;\n    }\n    /**\n     * Observes this object. Triggers for the events 'add', 'update' and 'delete'.\n     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe\n     * for callback details\n     */\n    ObservableObjectAdministration.prototype.observe = function (callback, fireImmediately) {\n        invariant(fireImmediately !== true, \"`observe` doesn't support the fire immediately property for observable objects.\");\n        return registerListener(this, callback);\n    };\n    ObservableObjectAdministration.prototype.intercept = function (handler) {\n        return registerInterceptor(this, handler);\n    };\n    return ObservableObjectAdministration;\n}());\nfunction asObservableObject(target, name) {\n    if (isObservableObject(target) && target.hasOwnProperty(\"$mobx\"))\n        return target.$mobx;\n    invariant(Object.isExtensible(target), getMessage(\"m035\"));\n    if (!isPlainObject(target))\n        name = (target.constructor.name || \"ObservableObject\") + \"@\" + getNextId();\n    if (!name)\n        name = \"ObservableObject@\" + getNextId();\n    var adm = new ObservableObjectAdministration(target, name);\n    addHiddenFinalProp(target, \"$mobx\", adm);\n    return adm;\n}\nfunction defineObservablePropertyFromDescriptor(adm, propName, descriptor, defaultEnhancer) {\n    if (adm.values[propName] && !isComputedValue(adm.values[propName])) {\n        // already observable property\n        invariant(\"value\" in descriptor, \"The property \" + propName + \" in \" + adm.name + \" is already observable, cannot redefine it as computed property\");\n        adm.target[propName] = descriptor.value; // the property setter will make 'value' reactive if needed.\n        return;\n    }\n    // not yet observable property\n    if (\"value\" in descriptor) {\n        // not a computed value\n        if (isModifierDescriptor(descriptor.value)) {\n            // x : ref(someValue)\n            var modifierDescriptor = descriptor.value;\n            defineObservableProperty(adm, propName, modifierDescriptor.initialValue, modifierDescriptor.enhancer);\n        }\n        else if (isAction(descriptor.value) && descriptor.value.autoBind === true) {\n            defineBoundAction(adm.target, propName, descriptor.value.originalFn);\n        }\n        else if (isComputedValue(descriptor.value)) {\n            // x: computed(someExpr)\n            defineComputedPropertyFromComputedValue(adm, propName, descriptor.value);\n        }\n        else {\n            // x: someValue\n            defineObservableProperty(adm, propName, descriptor.value, defaultEnhancer);\n        }\n    }\n    else {\n        // get x() { return 3 } set x(v) { }\n        defineComputedProperty(adm, propName, descriptor.get, descriptor.set, comparer.default, true);\n    }\n}\nfunction defineObservableProperty(adm, propName, newValue, enhancer) {\n    assertPropertyConfigurable(adm.target, propName);\n    if (hasInterceptors(adm)) {\n        var change = interceptChange(adm, {\n            object: adm.target,\n            name: propName,\n            type: \"add\",\n            newValue: newValue\n        });\n        if (!change)\n            return;\n        newValue = change.newValue;\n    }\n    var observable = (adm.values[propName] = new ObservableValue(newValue, enhancer, adm.name + \".\" + propName, false));\n    newValue = observable.value; // observableValue might have changed it\n    Object.defineProperty(adm.target, propName, generateObservablePropConfig(propName));\n    notifyPropertyAddition(adm, adm.target, propName, newValue);\n}\nfunction defineComputedProperty(adm, propName, getter, setter, equals, asInstanceProperty) {\n    if (asInstanceProperty)\n        assertPropertyConfigurable(adm.target, propName);\n    adm.values[propName] = new ComputedValue(getter, adm.target, equals, adm.name + \".\" + propName, setter);\n    if (asInstanceProperty) {\n        Object.defineProperty(adm.target, propName, generateComputedPropConfig(propName));\n    }\n}\nfunction defineComputedPropertyFromComputedValue(adm, propName, computedValue) {\n    var name = adm.name + \".\" + propName;\n    computedValue.name = name;\n    if (!computedValue.scope)\n        computedValue.scope = adm.target;\n    adm.values[propName] = computedValue;\n    Object.defineProperty(adm.target, propName, generateComputedPropConfig(propName));\n}\nvar observablePropertyConfigs = {};\nvar computedPropertyConfigs = {};\nfunction generateObservablePropConfig(propName) {\n    return (observablePropertyConfigs[propName] ||\n        (observablePropertyConfigs[propName] = {\n            configurable: true,\n            enumerable: true,\n            get: function () {\n                return this.$mobx.values[propName].get();\n            },\n            set: function (v) {\n                setPropertyValue(this, propName, v);\n            }\n        }));\n}\nfunction generateComputedPropConfig(propName) {\n    return (computedPropertyConfigs[propName] ||\n        (computedPropertyConfigs[propName] = {\n            configurable: true,\n            enumerable: false,\n            get: function () {\n                return this.$mobx.values[propName].get();\n            },\n            set: function (v) {\n                return this.$mobx.values[propName].set(v);\n            }\n        }));\n}\nfunction setPropertyValue(instance, name, newValue) {\n    var adm = instance.$mobx;\n    var observable = adm.values[name];\n    // intercept\n    if (hasInterceptors(adm)) {\n        var change = interceptChange(adm, {\n            type: \"update\",\n            object: instance,\n            name: name,\n            newValue: newValue\n        });\n        if (!change)\n            return;\n        newValue = change.newValue;\n    }\n    newValue = observable.prepareNewValue(newValue);\n    // notify spy & observers\n    if (newValue !== UNCHANGED) {\n        var notify = hasListeners(adm);\n        var notifySpy = isSpyEnabled();\n        var change = notify || notifySpy\n            ? {\n                type: \"update\",\n                object: instance,\n                oldValue: observable.value,\n                name: name,\n                newValue: newValue\n            }\n            : null;\n        if (notifySpy)\n            spyReportStart(change);\n        observable.setNewValue(newValue);\n        if (notify)\n            notifyListeners(adm, change);\n        if (notifySpy)\n            spyReportEnd();\n    }\n}\nfunction notifyPropertyAddition(adm, object, name, newValue) {\n    var notify = hasListeners(adm);\n    var notifySpy = isSpyEnabled();\n    var change = notify || notifySpy\n        ? {\n            type: \"add\",\n            object: object,\n            name: name,\n            newValue: newValue\n        }\n        : null;\n    if (notifySpy)\n        spyReportStart(change);\n    if (notify)\n        notifyListeners(adm, change);\n    if (notifySpy)\n        spyReportEnd();\n}\nvar isObservableObjectAdministration = createInstanceofPredicate(\"ObservableObjectAdministration\", ObservableObjectAdministration);\nfunction isObservableObject(thing) {\n    if (isObject(thing)) {\n        // Initializers run lazily when transpiling to babel, so make sure they are run...\n        runLazyInitializers(thing);\n        return isObservableObjectAdministration(thing.$mobx);\n    }\n    return false;\n}\n\n/**\n * Returns true if the provided value is reactive.\n * @param value object, function or array\n * @param property if property is specified, checks whether value.property is reactive.\n */\nfunction isObservable(value, property) {\n    if (value === null || value === undefined)\n        return false;\n    if (property !== undefined) {\n        if (isObservableArray(value) || isObservableMap(value))\n            throw new Error(getMessage(\"m019\"));\n        else if (isObservableObject(value)) {\n            var o = value.$mobx;\n            return o.values && !!o.values[property];\n        }\n        return false;\n    }\n    // For first check, see #701\n    return (isObservableObject(value) ||\n        !!value.$mobx ||\n        isAtom(value) ||\n        isReaction(value) ||\n        isComputedValue(value));\n}\n\nfunction createDecoratorForEnhancer(enhancer) {\n    invariant(!!enhancer, \":(\");\n    return createClassPropertyDecorator(function (target, name, baseValue, _, baseDescriptor) {\n        assertPropertyConfigurable(target, name);\n        invariant(!baseDescriptor || !baseDescriptor.get, getMessage(\"m022\"));\n        var adm = asObservableObject(target, undefined);\n        defineObservableProperty(adm, name, baseValue, enhancer);\n    }, function (name) {\n        var observable = this.$mobx.values[name];\n        if (observable === undefined // See #505\n        )\n            return undefined;\n        return observable.get();\n    }, function (name, value) {\n        setPropertyValue(this, name, value);\n    }, true, false);\n}\n\nfunction extendObservable(target) {\n    var properties = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        properties[_i - 1] = arguments[_i];\n    }\n    return extendObservableHelper(target, deepEnhancer, properties);\n}\nfunction extendShallowObservable(target) {\n    var properties = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        properties[_i - 1] = arguments[_i];\n    }\n    return extendObservableHelper(target, referenceEnhancer, properties);\n}\nfunction extendObservableHelper(target, defaultEnhancer, properties) {\n    invariant(arguments.length >= 2, getMessage(\"m014\"));\n    invariant(typeof target === \"object\", getMessage(\"m015\"));\n    invariant(!isObservableMap(target), getMessage(\"m016\"));\n    properties.forEach(function (propSet) {\n        invariant(typeof propSet === \"object\", getMessage(\"m017\"));\n        invariant(!isObservable(propSet), getMessage(\"m018\"));\n    });\n    var adm = asObservableObject(target);\n    var definedProps = {};\n    // Note could be optimised if properties.length === 1\n    for (var i = properties.length - 1; i >= 0; i--) {\n        var propSet = properties[i];\n        for (var key in propSet)\n            if (definedProps[key] !== true && hasOwnProperty(propSet, key)) {\n                definedProps[key] = true;\n                if (target === propSet && !isPropertyConfigurable(target, key))\n                    continue; // see #111, skip non-configurable or non-writable props for `observable(object)`.\n                var descriptor = Object.getOwnPropertyDescriptor(propSet, key);\n                defineObservablePropertyFromDescriptor(adm, key, descriptor, defaultEnhancer);\n            }\n    }\n    return target;\n}\n\nvar deepDecorator = createDecoratorForEnhancer(deepEnhancer);\nvar shallowDecorator = createDecoratorForEnhancer(shallowEnhancer);\nvar refDecorator = createDecoratorForEnhancer(referenceEnhancer);\nvar deepStructDecorator = createDecoratorForEnhancer(deepStructEnhancer);\nvar refStructDecorator = createDecoratorForEnhancer(refStructEnhancer);\n/**\n * Turns an object, array or function into a reactive structure.\n * @param v the value which should become observable.\n */\nfunction createObservable(v) {\n    if (v === void 0) { v = undefined; }\n    // @observable someProp;\n    if (typeof arguments[1] === \"string\")\n        return deepDecorator.apply(null, arguments);\n    invariant(arguments.length <= 1, getMessage(\"m021\"));\n    invariant(!isModifierDescriptor(v), getMessage(\"m020\"));\n    // it is an observable already, done\n    if (isObservable(v))\n        return v;\n    // something that can be converted and mutated?\n    var res = deepEnhancer(v, undefined, undefined);\n    // this value could be converted to a new observable data structure, return it\n    if (res !== v)\n        return res;\n    // otherwise, just box it\n    return observable.box(v);\n}\nvar observableFactories = {\n    box: function (value, name) {\n        if (arguments.length > 2)\n            incorrectlyUsedAsDecorator(\"box\");\n        return new ObservableValue(value, deepEnhancer, name);\n    },\n    shallowBox: function (value, name) {\n        if (arguments.length > 2)\n            incorrectlyUsedAsDecorator(\"shallowBox\");\n        return new ObservableValue(value, referenceEnhancer, name);\n    },\n    array: function (initialValues, name) {\n        if (arguments.length > 2)\n            incorrectlyUsedAsDecorator(\"array\");\n        return new ObservableArray(initialValues, deepEnhancer, name);\n    },\n    shallowArray: function (initialValues, name) {\n        if (arguments.length > 2)\n            incorrectlyUsedAsDecorator(\"shallowArray\");\n        return new ObservableArray(initialValues, referenceEnhancer, name);\n    },\n    map: function (initialValues, name) {\n        if (arguments.length > 2)\n            incorrectlyUsedAsDecorator(\"map\");\n        return new ObservableMap(initialValues, deepEnhancer, name);\n    },\n    shallowMap: function (initialValues, name) {\n        if (arguments.length > 2)\n            incorrectlyUsedAsDecorator(\"shallowMap\");\n        return new ObservableMap(initialValues, referenceEnhancer, name);\n    },\n    object: function (props, name) {\n        if (arguments.length > 2)\n            incorrectlyUsedAsDecorator(\"object\");\n        var res = {};\n        // convert to observable object\n        asObservableObject(res, name);\n        // add properties\n        extendObservable(res, props);\n        return res;\n    },\n    shallowObject: function (props, name) {\n        if (arguments.length > 2)\n            incorrectlyUsedAsDecorator(\"shallowObject\");\n        var res = {};\n        asObservableObject(res, name);\n        extendShallowObservable(res, props);\n        return res;\n    },\n    ref: function () {\n        if (arguments.length < 2) {\n            // although ref creates actually a modifier descriptor, the type of the resultig properties\n            // of the object is `T` in the end, when the descriptors are interpreted\n            return createModifierDescriptor(referenceEnhancer, arguments[0]);\n        }\n        else {\n            return refDecorator.apply(null, arguments);\n        }\n    },\n    shallow: function () {\n        if (arguments.length < 2) {\n            // although ref creates actually a modifier descriptor, the type of the resultig properties\n            // of the object is `T` in the end, when the descriptors are interpreted\n            return createModifierDescriptor(shallowEnhancer, arguments[0]);\n        }\n        else {\n            return shallowDecorator.apply(null, arguments);\n        }\n    },\n    deep: function () {\n        if (arguments.length < 2) {\n            // although ref creates actually a modifier descriptor, the type of the resultig properties\n            // of the object is `T` in the end, when the descriptors are interpreted\n            return createModifierDescriptor(deepEnhancer, arguments[0]);\n        }\n        else {\n            return deepDecorator.apply(null, arguments);\n        }\n    },\n    struct: function () {\n        if (arguments.length < 2) {\n            // although ref creates actually a modifier descriptor, the type of the resultig properties\n            // of the object is `T` in the end, when the descriptors are interpreted\n            return createModifierDescriptor(deepStructEnhancer, arguments[0]);\n        }\n        else {\n            return deepStructDecorator.apply(null, arguments);\n        }\n    }\n};\nvar observable = createObservable;\n// weird trick to keep our typings nicely with our funcs, and still extend the observable function\nObject.keys(observableFactories).forEach(function (name) { return (observable[name] = observableFactories[name]); });\nobservable.deep.struct = observable.struct;\nobservable.ref.struct = function () {\n    if (arguments.length < 2) {\n        return createModifierDescriptor(refStructEnhancer, arguments[0]);\n    }\n    else {\n        return refStructDecorator.apply(null, arguments);\n    }\n};\nfunction incorrectlyUsedAsDecorator(methodName) {\n    fail(\"Expected one or two arguments to observable.\" + methodName + \". Did you accidentally try to use observable.\" + methodName + \" as decorator?\");\n}\n\nfunction isModifierDescriptor(thing) {\n    return typeof thing === \"object\" && thing !== null && thing.isMobxModifierDescriptor === true;\n}\nfunction createModifierDescriptor(enhancer, initialValue) {\n    invariant(!isModifierDescriptor(initialValue), \"Modifiers cannot be nested\");\n    return {\n        isMobxModifierDescriptor: true,\n        initialValue: initialValue,\n        enhancer: enhancer\n    };\n}\nfunction deepEnhancer(v, _, name) {\n    if (isModifierDescriptor(v))\n        fail(\"You tried to assign a modifier wrapped value to a collection, please define modifiers when creating the collection, not when modifying it\");\n    // it is an observable already, done\n    if (isObservable(v))\n        return v;\n    // something that can be converted and mutated?\n    if (Array.isArray(v))\n        return observable.array(v, name);\n    if (isPlainObject(v))\n        return observable.object(v, name);\n    if (isES6Map(v))\n        return observable.map(v, name);\n    return v;\n}\nfunction shallowEnhancer(v, _, name) {\n    if (isModifierDescriptor(v))\n        fail(\"You tried to assign a modifier wrapped value to a collection, please define modifiers when creating the collection, not when modifying it\");\n    if (v === undefined || v === null)\n        return v;\n    if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v))\n        return v;\n    if (Array.isArray(v))\n        return observable.shallowArray(v, name);\n    if (isPlainObject(v))\n        return observable.shallowObject(v, name);\n    if (isES6Map(v))\n        return observable.shallowMap(v, name);\n    return fail(\"The shallow modifier / decorator can only used in combination with arrays, objects and maps\");\n}\nfunction referenceEnhancer(newValue) {\n    // never turn into an observable\n    return newValue;\n}\nfunction deepStructEnhancer(v, oldValue, name) {\n    // don't confuse structurally compare enhancer with ref enhancer! The latter is probably\n    // more suited for immutable objects\n    if (deepEqual(v, oldValue))\n        return oldValue;\n    // it is an observable already, done\n    if (isObservable(v))\n        return v;\n    // something that can be converted and mutated?\n    if (Array.isArray(v))\n        return new ObservableArray(v, deepStructEnhancer, name);\n    if (isES6Map(v))\n        return new ObservableMap(v, deepStructEnhancer, name);\n    if (isPlainObject(v)) {\n        var res = {};\n        asObservableObject(res, name);\n        extendObservableHelper(res, deepStructEnhancer, [v]);\n        return res;\n    }\n    return v;\n}\nfunction refStructEnhancer(v, oldValue, name) {\n    if (deepEqual(v, oldValue))\n        return oldValue;\n    return v;\n}\n\n/**\n * During a transaction no views are updated until the end of the transaction.\n * The transaction will be run synchronously nonetheless.\n *\n * @param action a function that updates some reactive state\n * @returns any value that was returned by the 'action' parameter.\n */\nfunction transaction(action, thisArg) {\n    if (thisArg === void 0) { thisArg = undefined; }\n    startBatch();\n    try {\n        return action.apply(thisArg);\n    }\n    finally {\n        endBatch();\n    }\n}\n\nvar ObservableMapMarker = {};\nvar ObservableMap = (function () {\n    function ObservableMap(initialData, enhancer, name) {\n        if (enhancer === void 0) { enhancer = deepEnhancer; }\n        if (name === void 0) { name = \"ObservableMap@\" + getNextId(); }\n        this.enhancer = enhancer;\n        this.name = name;\n        this.$mobx = ObservableMapMarker;\n        this._data = Object.create(null);\n        this._hasMap = Object.create(null); // hasMap, not hashMap >-).\n        this._keys = new ObservableArray(undefined, referenceEnhancer, this.name + \".keys()\", true);\n        this.interceptors = null;\n        this.changeListeners = null;\n        this.dehancer = undefined;\n        this.merge(initialData);\n    }\n    ObservableMap.prototype._has = function (key) {\n        return typeof this._data[key] !== \"undefined\";\n    };\n    ObservableMap.prototype.has = function (key) {\n        if (!this.isValidKey(key))\n            return false;\n        key = \"\" + key;\n        if (this._hasMap[key])\n            return this._hasMap[key].get();\n        return this._updateHasMapEntry(key, false).get();\n    };\n    ObservableMap.prototype.set = function (key, value) {\n        this.assertValidKey(key);\n        key = \"\" + key;\n        var hasKey = this._has(key);\n        if (hasInterceptors(this)) {\n            var change = interceptChange(this, {\n                type: hasKey ? \"update\" : \"add\",\n                object: this,\n                newValue: value,\n                name: key\n            });\n            if (!change)\n                return this;\n            value = change.newValue;\n        }\n        if (hasKey) {\n            this._updateValue(key, value);\n        }\n        else {\n            this._addValue(key, value);\n        }\n        return this;\n    };\n    ObservableMap.prototype.delete = function (key) {\n        var _this = this;\n        this.assertValidKey(key);\n        key = \"\" + key;\n        if (hasInterceptors(this)) {\n            var change = interceptChange(this, {\n                type: \"delete\",\n                object: this,\n                name: key\n            });\n            if (!change)\n                return false;\n        }\n        if (this._has(key)) {\n            var notifySpy = isSpyEnabled();\n            var notify = hasListeners(this);\n            var change = notify || notifySpy\n                ? {\n                    type: \"delete\",\n                    object: this,\n                    oldValue: this._data[key].value,\n                    name: key\n                }\n                : null;\n            if (notifySpy)\n                spyReportStart(change);\n            transaction(function () {\n                _this._keys.remove(key);\n                _this._updateHasMapEntry(key, false);\n                var observable$$1 = _this._data[key];\n                observable$$1.setNewValue(undefined);\n                _this._data[key] = undefined;\n            });\n            if (notify)\n                notifyListeners(this, change);\n            if (notifySpy)\n                spyReportEnd();\n            return true;\n        }\n        return false;\n    };\n    ObservableMap.prototype._updateHasMapEntry = function (key, value) {\n        // optimization; don't fill the hasMap if we are not observing, or remove entry if there are no observers anymore\n        var entry = this._hasMap[key];\n        if (entry) {\n            entry.setNewValue(value);\n        }\n        else {\n            entry = this._hasMap[key] = new ObservableValue(value, referenceEnhancer, this.name + \".\" + key + \"?\", false);\n        }\n        return entry;\n    };\n    ObservableMap.prototype._updateValue = function (name, newValue) {\n        var observable$$1 = this._data[name];\n        newValue = observable$$1.prepareNewValue(newValue);\n        if (newValue !== UNCHANGED) {\n            var notifySpy = isSpyEnabled();\n            var notify = hasListeners(this);\n            var change = notify || notifySpy\n                ? {\n                    type: \"update\",\n                    object: this,\n                    oldValue: observable$$1.value,\n                    name: name,\n                    newValue: newValue\n                }\n                : null;\n            if (notifySpy)\n                spyReportStart(change);\n            observable$$1.setNewValue(newValue);\n            if (notify)\n                notifyListeners(this, change);\n            if (notifySpy)\n                spyReportEnd();\n        }\n    };\n    ObservableMap.prototype._addValue = function (name, newValue) {\n        var _this = this;\n        transaction(function () {\n            var observable$$1 = (_this._data[name] = new ObservableValue(newValue, _this.enhancer, _this.name + \".\" + name, false));\n            newValue = observable$$1.value; // value might have been changed\n            _this._updateHasMapEntry(name, true);\n            _this._keys.push(name);\n        });\n        var notifySpy = isSpyEnabled();\n        var notify = hasListeners(this);\n        var change = notify || notifySpy\n            ? {\n                type: \"add\",\n                object: this,\n                name: name,\n                newValue: newValue\n            }\n            : null;\n        if (notifySpy)\n            spyReportStart(change);\n        if (notify)\n            notifyListeners(this, change);\n        if (notifySpy)\n            spyReportEnd();\n    };\n    ObservableMap.prototype.get = function (key) {\n        key = \"\" + key;\n        if (this.has(key))\n            return this.dehanceValue(this._data[key].get());\n        return this.dehanceValue(undefined);\n    };\n    ObservableMap.prototype.dehanceValue = function (value) {\n        if (this.dehancer !== undefined) {\n            return this.dehancer(value);\n        }\n        return value;\n    };\n    ObservableMap.prototype.keys = function () {\n        return arrayAsIterator(this._keys.slice());\n    };\n    ObservableMap.prototype.values = function () {\n        return arrayAsIterator(this._keys.map(this.get, this));\n    };\n    ObservableMap.prototype.entries = function () {\n        var _this = this;\n        return arrayAsIterator(this._keys.map(function (key) { return [key, _this.get(key)]; }));\n    };\n    ObservableMap.prototype.forEach = function (callback, thisArg) {\n        var _this = this;\n        this.keys().forEach(function (key) { return callback.call(thisArg, _this.get(key), key, _this); });\n    };\n    /** Merge another object into this object, returns this. */\n    ObservableMap.prototype.merge = function (other) {\n        var _this = this;\n        if (isObservableMap(other)) {\n            other = other.toJS();\n        }\n        transaction(function () {\n            if (isPlainObject(other))\n                Object.keys(other).forEach(function (key) { return _this.set(key, other[key]); });\n            else if (Array.isArray(other))\n                other.forEach(function (_a) {\n                    var key = _a[0], value = _a[1];\n                    return _this.set(key, value);\n                });\n            else if (isES6Map(other))\n                other.forEach(function (value, key) { return _this.set(key, value); });\n            else if (other !== null && other !== undefined)\n                fail(\"Cannot initialize map from \" + other);\n        });\n        return this;\n    };\n    ObservableMap.prototype.clear = function () {\n        var _this = this;\n        transaction(function () {\n            untracked(function () {\n                _this.keys().forEach(_this.delete, _this);\n            });\n        });\n    };\n    ObservableMap.prototype.replace = function (values) {\n        var _this = this;\n        transaction(function () {\n            // grab all the keys that are present in the new map but not present in the current map\n            // and delete them from the map, then merge the new map\n            // this will cause reactions only on changed values\n            var newKeys = getMapLikeKeys(values);\n            var oldKeys = _this.keys();\n            var missingKeys = oldKeys.filter(function (k) { return newKeys.indexOf(k) === -1; });\n            missingKeys.forEach(function (k) { return _this.delete(k); });\n            _this.merge(values);\n        });\n        return this;\n    };\n    Object.defineProperty(ObservableMap.prototype, \"size\", {\n        get: function () {\n            return this._keys.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns a shallow non observable object clone of this map.\n     * Note that the values might still be observable. For a deep clone use mobx.toJS.\n     */\n    ObservableMap.prototype.toJS = function () {\n        var _this = this;\n        var res = {};\n        this.keys().forEach(function (key) { return (res[key] = _this.get(key)); });\n        return res;\n    };\n    ObservableMap.prototype.toJSON = function () {\n        // Used by JSON.stringify\n        return this.toJS();\n    };\n    ObservableMap.prototype.isValidKey = function (key) {\n        if (key === null || key === undefined)\n            return false;\n        if (typeof key === \"string\" || typeof key === \"number\" || typeof key === \"boolean\")\n            return true;\n        return false;\n    };\n    ObservableMap.prototype.assertValidKey = function (key) {\n        if (!this.isValidKey(key))\n            throw new Error(\"[mobx.map] Invalid key: '\" + key + \"', only strings, numbers and booleans are accepted as key in observable maps.\");\n    };\n    ObservableMap.prototype.toString = function () {\n        var _this = this;\n        return (this.name +\n            \"[{ \" +\n            this.keys().map(function (key) { return key + \": \" + (\"\" + _this.get(key)); }).join(\", \") +\n            \" }]\");\n    };\n    /**\n     * Observes this object. Triggers for the events 'add', 'update' and 'delete'.\n     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe\n     * for callback details\n     */\n    ObservableMap.prototype.observe = function (listener, fireImmediately) {\n        invariant(fireImmediately !== true, getMessage(\"m033\"));\n        return registerListener(this, listener);\n    };\n    ObservableMap.prototype.intercept = function (handler) {\n        return registerInterceptor(this, handler);\n    };\n    return ObservableMap;\n}());\ndeclareIterator(ObservableMap.prototype, function () {\n    return this.entries();\n});\nfunction map(initialValues) {\n    deprecated(\"`mobx.map` is deprecated, use `new ObservableMap` or `mobx.observable.map` instead\");\n    return observable.map(initialValues);\n}\n/* 'var' fixes small-build issue */\nvar isObservableMap = createInstanceofPredicate(\"ObservableMap\", ObservableMap);\n\nvar EMPTY_ARRAY = [];\nObject.freeze(EMPTY_ARRAY);\nfunction getGlobal() {\n    return typeof window !== \"undefined\" ? window : global;\n}\nfunction getNextId() {\n    return ++globalState.mobxGuid;\n}\nfunction fail(message, thing) {\n    invariant(false, message, thing);\n    throw \"X\"; // unreachable\n}\nfunction invariant(check, message, thing) {\n    if (!check)\n        throw new Error(\"[mobx] Invariant failed: \" + message + (thing ? \" in '\" + thing + \"'\" : \"\"));\n}\n/**\n * Prints a deprecation message, but only one time.\n * Returns false if the deprecated message was already printed before\n */\nvar deprecatedMessages = [];\nfunction deprecated(msg) {\n    if (deprecatedMessages.indexOf(msg) !== -1)\n        return false;\n    deprecatedMessages.push(msg);\n    console.error(\"[mobx] Deprecated: \" + msg);\n    return true;\n}\n/**\n * Makes sure that the provided function is invoked at most once.\n */\nfunction once(func) {\n    var invoked = false;\n    return function () {\n        if (invoked)\n            return;\n        invoked = true;\n        return func.apply(this, arguments);\n    };\n}\nvar noop = function () { };\nfunction unique(list) {\n    var res = [];\n    list.forEach(function (item) {\n        if (res.indexOf(item) === -1)\n            res.push(item);\n    });\n    return res;\n}\nfunction joinStrings(things, limit, separator) {\n    if (limit === void 0) { limit = 100; }\n    if (separator === void 0) { separator = \" - \"; }\n    if (!things)\n        return \"\";\n    var sliced = things.slice(0, limit);\n    return \"\" + sliced.join(separator) + (things.length > limit\n        ? \" (... and \" + (things.length - limit) + \"more)\"\n        : \"\");\n}\nfunction isObject(value) {\n    return value !== null && typeof value === \"object\";\n}\nfunction isPlainObject(value) {\n    if (value === null || typeof value !== \"object\")\n        return false;\n    var proto = Object.getPrototypeOf(value);\n    return proto === Object.prototype || proto === null;\n}\nfunction objectAssign() {\n    var res = arguments[0];\n    for (var i = 1, l = arguments.length; i < l; i++) {\n        var source = arguments[i];\n        for (var key in source)\n            if (hasOwnProperty(source, key)) {\n                res[key] = source[key];\n            }\n    }\n    return res;\n}\nvar prototypeHasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwnProperty(object, propName) {\n    return prototypeHasOwnProperty.call(object, propName);\n}\nfunction makeNonEnumerable(object, propNames) {\n    for (var i = 0; i < propNames.length; i++) {\n        addHiddenProp(object, propNames[i], object[propNames[i]]);\n    }\n}\nfunction addHiddenProp(object, propName, value) {\n    Object.defineProperty(object, propName, {\n        enumerable: false,\n        writable: true,\n        configurable: true,\n        value: value\n    });\n}\nfunction addHiddenFinalProp(object, propName, value) {\n    Object.defineProperty(object, propName, {\n        enumerable: false,\n        writable: false,\n        configurable: true,\n        value: value\n    });\n}\nfunction isPropertyConfigurable(object, prop) {\n    var descriptor = Object.getOwnPropertyDescriptor(object, prop);\n    return !descriptor || (descriptor.configurable !== false && descriptor.writable !== false);\n}\nfunction assertPropertyConfigurable(object, prop) {\n    invariant(isPropertyConfigurable(object, prop), \"Cannot make property '\" + prop + \"' observable, it is not configurable and writable in the target object\");\n}\nfunction getEnumerableKeys(obj) {\n    var res = [];\n    for (var key in obj)\n        res.push(key);\n    return res;\n}\n/**\n * Naive deepEqual. Doesn't check for prototype, non-enumerable or out-of-range properties on arrays.\n * If you have such a case, you probably should use this function but something fancier :).\n */\nfunction deepEqual(a, b) {\n    if (a === null && b === null)\n        return true;\n    if (a === undefined && b === undefined)\n        return true;\n    if (areBothNaN(a, b))\n        return true;\n    if (typeof a !== \"object\")\n        return a === b;\n    var aIsArray = isArrayLike(a);\n    var aIsMap = isMapLike(a);\n    if (aIsArray !== isArrayLike(b)) {\n        return false;\n    }\n    else if (aIsMap !== isMapLike(b)) {\n        return false;\n    }\n    else if (aIsArray) {\n        if (a.length !== b.length)\n            return false;\n        for (var i = a.length - 1; i >= 0; i--)\n            if (!deepEqual(a[i], b[i]))\n                return false;\n        return true;\n    }\n    else if (aIsMap) {\n        if (a.size !== b.size)\n            return false;\n        var equals_1 = true;\n        a.forEach(function (value, key) {\n            equals_1 = equals_1 && deepEqual(b.get(key), value);\n        });\n        return equals_1;\n    }\n    else if (typeof a === \"object\" && typeof b === \"object\") {\n        if (a === null || b === null)\n            return false;\n        if (isMapLike(a) && isMapLike(b)) {\n            if (a.size !== b.size)\n                return false;\n            // Freaking inefficient.... Create PR if you run into this :) Much appreciated!\n            return deepEqual(observable.shallowMap(a).entries(), observable.shallowMap(b).entries());\n        }\n        if (getEnumerableKeys(a).length !== getEnumerableKeys(b).length)\n            return false;\n        for (var prop in a) {\n            if (!(prop in b))\n                return false;\n            if (!deepEqual(a[prop], b[prop]))\n                return false;\n        }\n        return true;\n    }\n    return false;\n}\nfunction createInstanceofPredicate(name, clazz) {\n    var propName = \"isMobX\" + name;\n    clazz.prototype[propName] = true;\n    return function (x) {\n        return isObject(x) && x[propName] === true;\n    };\n}\nfunction areBothNaN(a, b) {\n    return (typeof a === \"number\" && typeof b === \"number\" && isNaN(a) && isNaN(b));\n}\n/**\n * Returns whether the argument is an array, disregarding observability.\n */\nfunction isArrayLike(x) {\n    return Array.isArray(x) || isObservableArray(x);\n}\nfunction isMapLike(x) {\n    return isES6Map(x) || isObservableMap(x);\n}\nfunction isES6Map(thing) {\n    if (getGlobal().Map !== undefined && thing instanceof getGlobal().Map)\n        return true;\n    return false;\n}\nfunction getMapLikeKeys(map$$1) {\n    var keys;\n    if (isPlainObject(map$$1))\n        keys = Object.keys(map$$1);\n    else if (Array.isArray(map$$1))\n        keys = map$$1.map(function (_a) {\n            var key = _a[0];\n            return key;\n        });\n    else if (isMapLike(map$$1))\n        keys = Array.from(map$$1.keys());\n    else\n        fail(\"Cannot get keys from \" + map$$1);\n    return keys;\n}\nfunction primitiveSymbol() {\n    return (typeof Symbol === \"function\" && Symbol.toPrimitive) || \"@@toPrimitive\";\n}\nfunction toPrimitive(value) {\n    return value === null ? null : typeof value === \"object\" ? \"\" + value : value;\n}\n\n/**\n * These values will persist if global state is reset\n */\nvar persistentKeys = [\"mobxGuid\", \"resetId\", \"spyListeners\", \"strictMode\", \"runId\"];\nvar MobXGlobals = (function () {\n    function MobXGlobals() {\n        /**\n         * MobXGlobals version.\n         * MobX compatiblity with other versions loaded in memory as long as this version matches.\n         * It indicates that the global state still stores similar information\n         */\n        this.version = 5;\n        /**\n         * Currently running derivation\n         */\n        this.trackingDerivation = null;\n        /**\n         * Are we running a computation currently? (not a reaction)\n         */\n        this.computationDepth = 0;\n        /**\n         * Each time a derivation is tracked, it is assigned a unique run-id\n         */\n        this.runId = 0;\n        /**\n         * 'guid' for general purpose. Will be persisted amongst resets.\n         */\n        this.mobxGuid = 0;\n        /**\n         * Are we in a batch block? (and how many of them)\n         */\n        this.inBatch = 0;\n        /**\n         * Observables that don't have observers anymore, and are about to be\n         * suspended, unless somebody else accesses it in the same batch\n         *\n         * @type {IObservable[]}\n         */\n        this.pendingUnobservations = [];\n        /**\n         * List of scheduled, not yet executed, reactions.\n         */\n        this.pendingReactions = [];\n        /**\n         * Are we currently processing reactions?\n         */\n        this.isRunningReactions = false;\n        /**\n         * Is it allowed to change observables at this point?\n         * In general, MobX doesn't allow that when running computations and React.render.\n         * To ensure that those functions stay pure.\n         */\n        this.allowStateChanges = true;\n        /**\n         * If strict mode is enabled, state changes are by default not allowed\n         */\n        this.strictMode = false;\n        /**\n         * Used by createTransformer to detect that the global state has been reset.\n         */\n        this.resetId = 0;\n        /**\n         * Spy callbacks\n         */\n        this.spyListeners = [];\n        /**\n         * Globally attached error handlers that react specifically to errors in reactions\n         */\n        this.globalReactionErrorHandlers = [];\n    }\n    return MobXGlobals;\n}());\nvar globalState = new MobXGlobals();\nvar shareGlobalStateCalled = false;\nvar runInIsolationCalled = false;\nvar warnedAboutMultipleInstances = false;\n{\n    var global_1 = getGlobal();\n    if (!global_1.__mobxInstanceCount) {\n        global_1.__mobxInstanceCount = 1;\n    }\n    else {\n        global_1.__mobxInstanceCount++;\n        setTimeout(function () {\n            if (!shareGlobalStateCalled && !runInIsolationCalled && !warnedAboutMultipleInstances) {\n                warnedAboutMultipleInstances = true;\n                console.warn(\"[mobx] Warning: there are multiple mobx instances active. This might lead to unexpected results. See https://github.com/mobxjs/mobx/issues/1082 for details.\");\n            }\n        });\n    }\n}\nfunction isolateGlobalState() {\n    runInIsolationCalled = true;\n    getGlobal().__mobxInstanceCount--;\n}\nfunction shareGlobalState() {\n    // TODO: remove in 4.0; just use peer dependencies instead.\n    deprecated(\"Using `shareGlobalState` is not recommended, use peer dependencies instead. See https://github.com/mobxjs/mobx/issues/1082 for details.\");\n    shareGlobalStateCalled = true;\n    var global = getGlobal();\n    var ownState = globalState;\n    /**\n     * Backward compatibility check\n     */\n    if (global.__mobservableTrackingStack || global.__mobservableViewStack)\n        throw new Error(\"[mobx] An incompatible version of mobservable is already loaded.\");\n    if (global.__mobxGlobal && global.__mobxGlobal.version !== ownState.version)\n        throw new Error(\"[mobx] An incompatible version of mobx is already loaded.\");\n    if (global.__mobxGlobal)\n        globalState = global.__mobxGlobal;\n    else\n        global.__mobxGlobal = ownState;\n}\nfunction getGlobalState() {\n    return globalState;\n}\n\n/**\n * For testing purposes only; this will break the internal state of existing observables,\n * but can be used to get back at a stable state after throwing errors\n */\nfunction resetGlobalState() {\n    globalState.resetId++;\n    var defaultGlobals = new MobXGlobals();\n    for (var key in defaultGlobals)\n        if (persistentKeys.indexOf(key) === -1)\n            globalState[key] = defaultGlobals[key];\n    globalState.allowStateChanges = !globalState.strictMode;\n}\n\nfunction hasObservers(observable) {\n    return observable.observers && observable.observers.length > 0;\n}\nfunction getObservers(observable) {\n    return observable.observers;\n}\nfunction addObserver(observable, node) {\n    // invariant(node.dependenciesState !== -1, \"INTERNAL ERROR, can add only dependenciesState !== -1\");\n    // invariant(observable._observers.indexOf(node) === -1, \"INTERNAL ERROR add already added node\");\n    // invariantObservers(observable);\n    var l = observable.observers.length;\n    if (l) {\n        // because object assignment is relatively expensive, let's not store data about index 0.\n        observable.observersIndexes[node.__mapid] = l;\n    }\n    observable.observers[l] = node;\n    if (observable.lowestObserverState > node.dependenciesState)\n        observable.lowestObserverState = node.dependenciesState;\n    // invariantObservers(observable);\n    // invariant(observable._observers.indexOf(node) !== -1, \"INTERNAL ERROR didn't add node\");\n}\nfunction removeObserver(observable, node) {\n    // invariant(globalState.inBatch > 0, \"INTERNAL ERROR, remove should be called only inside batch\");\n    // invariant(observable._observers.indexOf(node) !== -1, \"INTERNAL ERROR remove already removed node\");\n    // invariantObservers(observable);\n    if (observable.observers.length === 1) {\n        // deleting last observer\n        observable.observers.length = 0;\n        queueForUnobservation(observable);\n    }\n    else {\n        // deleting from _observersIndexes is straight forward, to delete from _observers, let's swap `node` with last element\n        var list = observable.observers;\n        var map = observable.observersIndexes;\n        var filler = list.pop(); // get last element, which should fill the place of `node`, so the array doesn't have holes\n        if (filler !== node) {\n            // otherwise node was the last element, which already got removed from array\n            var index = map[node.__mapid] || 0; // getting index of `node`. this is the only place we actually use map.\n            if (index) {\n                // map store all indexes but 0, see comment in `addObserver`\n                map[filler.__mapid] = index;\n            }\n            else {\n                delete map[filler.__mapid];\n            }\n            list[index] = filler;\n        }\n        delete map[node.__mapid];\n    }\n    // invariantObservers(observable);\n    // invariant(observable._observers.indexOf(node) === -1, \"INTERNAL ERROR remove already removed node2\");\n}\nfunction queueForUnobservation(observable) {\n    if (!observable.isPendingUnobservation) {\n        // invariant(globalState.inBatch > 0, \"INTERNAL ERROR, remove should be called only inside batch\");\n        // invariant(observable._observers.length === 0, \"INTERNAL ERROR, should only queue for unobservation unobserved observables\");\n        observable.isPendingUnobservation = true;\n        globalState.pendingUnobservations.push(observable);\n    }\n}\n/**\n * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.\n * During a batch `onBecomeUnobserved` will be called at most once per observable.\n * Avoids unnecessary recalculations.\n */\nfunction startBatch() {\n    globalState.inBatch++;\n}\nfunction endBatch() {\n    if (--globalState.inBatch === 0) {\n        runReactions();\n        // the batch is actually about to finish, all unobserving should happen here.\n        var list = globalState.pendingUnobservations;\n        for (var i = 0; i < list.length; i++) {\n            var observable = list[i];\n            observable.isPendingUnobservation = false;\n            if (observable.observers.length === 0) {\n                observable.onBecomeUnobserved();\n                // NOTE: onBecomeUnobserved might push to `pendingUnobservations`\n            }\n        }\n        globalState.pendingUnobservations = [];\n    }\n}\nfunction reportObserved(observable) {\n    var derivation = globalState.trackingDerivation;\n    if (derivation !== null) {\n        /**\n         * Simple optimization, give each derivation run an unique id (runId)\n         * Check if last time this observable was accessed the same runId is used\n         * if this is the case, the relation is already known\n         */\n        if (derivation.runId !== observable.lastAccessedBy) {\n            observable.lastAccessedBy = derivation.runId;\n            derivation.newObserving[derivation.unboundDepsCount++] = observable;\n        }\n    }\n    else if (observable.observers.length === 0) {\n        queueForUnobservation(observable);\n    }\n}\n/**\n * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly\n * It will propagate changes to observers from previous run\n * It's hard or maybe impossible (with reasonable perf) to get it right with current approach\n * Hopefully self reruning autoruns aren't a feature people should depend on\n * Also most basic use cases should be ok\n */\n// Called by Atom when its value changes\nfunction propagateChanged(observable) {\n    // invariantLOS(observable, \"changed start\");\n    if (observable.lowestObserverState === IDerivationState.STALE)\n        return;\n    observable.lowestObserverState = IDerivationState.STALE;\n    var observers = observable.observers;\n    var i = observers.length;\n    while (i--) {\n        var d = observers[i];\n        if (d.dependenciesState === IDerivationState.UP_TO_DATE)\n            d.onBecomeStale();\n        d.dependenciesState = IDerivationState.STALE;\n    }\n    // invariantLOS(observable, \"changed end\");\n}\n// Called by ComputedValue when it recalculate and its value changed\nfunction propagateChangeConfirmed(observable) {\n    // invariantLOS(observable, \"confirmed start\");\n    if (observable.lowestObserverState === IDerivationState.STALE)\n        return;\n    observable.lowestObserverState = IDerivationState.STALE;\n    var observers = observable.observers;\n    var i = observers.length;\n    while (i--) {\n        var d = observers[i];\n        if (d.dependenciesState === IDerivationState.POSSIBLY_STALE)\n            d.dependenciesState = IDerivationState.STALE;\n        else if (d.dependenciesState === IDerivationState.UP_TO_DATE // this happens during computing of `d`, just keep lowestObserverState up to date.\n        )\n            observable.lowestObserverState = IDerivationState.UP_TO_DATE;\n    }\n    // invariantLOS(observable, \"confirmed end\");\n}\n// Used by computed when its dependency changed, but we don't wan't to immediately recompute.\nfunction propagateMaybeChanged(observable) {\n    // invariantLOS(observable, \"maybe start\");\n    if (observable.lowestObserverState !== IDerivationState.UP_TO_DATE)\n        return;\n    observable.lowestObserverState = IDerivationState.POSSIBLY_STALE;\n    var observers = observable.observers;\n    var i = observers.length;\n    while (i--) {\n        var d = observers[i];\n        if (d.dependenciesState === IDerivationState.UP_TO_DATE) {\n            d.dependenciesState = IDerivationState.POSSIBLY_STALE;\n            d.onBecomeStale();\n        }\n    }\n    // invariantLOS(observable, \"maybe end\");\n}\n\nvar IDerivationState;\n(function (IDerivationState) {\n    // before being run or (outside batch and not being observed)\n    // at this point derivation is not holding any data about dependency tree\n    IDerivationState[IDerivationState[\"NOT_TRACKING\"] = -1] = \"NOT_TRACKING\";\n    // no shallow dependency changed since last computation\n    // won't recalculate derivation\n    // this is what makes mobx fast\n    IDerivationState[IDerivationState[\"UP_TO_DATE\"] = 0] = \"UP_TO_DATE\";\n    // some deep dependency changed, but don't know if shallow dependency changed\n    // will require to check first if UP_TO_DATE or POSSIBLY_STALE\n    // currently only ComputedValue will propagate POSSIBLY_STALE\n    //\n    // having this state is second big optimization:\n    // don't have to recompute on every dependency change, but only when it's needed\n    IDerivationState[IDerivationState[\"POSSIBLY_STALE\"] = 1] = \"POSSIBLY_STALE\";\n    // A shallow dependency has changed since last computation and the derivation\n    // will need to recompute when it's needed next.\n    IDerivationState[IDerivationState[\"STALE\"] = 2] = \"STALE\";\n})(IDerivationState || (IDerivationState = {}));\nvar CaughtException = (function () {\n    function CaughtException(cause) {\n        this.cause = cause;\n        // Empty\n    }\n    return CaughtException;\n}());\nfunction isCaughtException(e) {\n    return e instanceof CaughtException;\n}\n/**\n * Finds out whether any dependency of the derivation has actually changed.\n * If dependenciesState is 1 then it will recalculate dependencies,\n * if any dependency changed it will propagate it by changing dependenciesState to 2.\n *\n * By iterating over the dependencies in the same order that they were reported and\n * stopping on the first change, all the recalculations are only called for ComputedValues\n * that will be tracked by derivation. That is because we assume that if the first x\n * dependencies of the derivation doesn't change then the derivation should run the same way\n * up until accessing x-th dependency.\n */\nfunction shouldCompute(derivation) {\n    switch (derivation.dependenciesState) {\n        case IDerivationState.UP_TO_DATE:\n            return false;\n        case IDerivationState.NOT_TRACKING:\n        case IDerivationState.STALE:\n            return true;\n        case IDerivationState.POSSIBLY_STALE: {\n            var prevUntracked = untrackedStart(); // no need for those computeds to be reported, they will be picked up in trackDerivedFunction.\n            var obs = derivation.observing, l = obs.length;\n            for (var i = 0; i < l; i++) {\n                var obj = obs[i];\n                if (isComputedValue(obj)) {\n                    try {\n                        obj.get();\n                    }\n                    catch (e) {\n                        // we are not interested in the value *or* exception at this moment, but if there is one, notify all\n                        untrackedEnd(prevUntracked);\n                        return true;\n                    }\n                    // if ComputedValue `obj` actually changed it will be computed and propagated to its observers.\n                    // and `derivation` is an observer of `obj`\n                    if (derivation.dependenciesState === IDerivationState.STALE) {\n                        untrackedEnd(prevUntracked);\n                        return true;\n                    }\n                }\n            }\n            changeDependenciesStateTo0(derivation);\n            untrackedEnd(prevUntracked);\n            return false;\n        }\n    }\n}\nfunction isComputingDerivation() {\n    return globalState.trackingDerivation !== null; // filter out actions inside computations\n}\nfunction checkIfStateModificationsAreAllowed(atom) {\n    var hasObservers$$1 = atom.observers.length > 0;\n    // Should never be possible to change an observed observable from inside computed, see #798\n    if (globalState.computationDepth > 0 && hasObservers$$1)\n        fail(getMessage(\"m031\") + atom.name);\n    // Should not be possible to change observed state outside strict mode, except during initialization, see #563\n    if (!globalState.allowStateChanges && hasObservers$$1)\n        fail(getMessage(globalState.strictMode ? \"m030a\" : \"m030b\") + atom.name);\n}\n/**\n * Executes the provided function `f` and tracks which observables are being accessed.\n * The tracking information is stored on the `derivation` object and the derivation is registered\n * as observer of any of the accessed observables.\n */\nfunction trackDerivedFunction(derivation, f, context) {\n    // pre allocate array allocation + room for variation in deps\n    // array will be trimmed by bindDependencies\n    changeDependenciesStateTo0(derivation);\n    derivation.newObserving = new Array(derivation.observing.length + 100);\n    derivation.unboundDepsCount = 0;\n    derivation.runId = ++globalState.runId;\n    var prevTracking = globalState.trackingDerivation;\n    globalState.trackingDerivation = derivation;\n    var result;\n    try {\n        result = f.call(context);\n    }\n    catch (e) {\n        result = new CaughtException(e);\n    }\n    globalState.trackingDerivation = prevTracking;\n    bindDependencies(derivation);\n    return result;\n}\n/**\n * diffs newObserving with observing.\n * update observing to be newObserving with unique observables\n * notify observers that become observed/unobserved\n */\nfunction bindDependencies(derivation) {\n    // invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, \"INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1\");\n    var prevObserving = derivation.observing;\n    var observing = (derivation.observing = derivation.newObserving);\n    var lowestNewObservingDerivationState = IDerivationState.UP_TO_DATE;\n    // Go through all new observables and check diffValue: (this list can contain duplicates):\n    //   0: first occurrence, change to 1 and keep it\n    //   1: extra occurrence, drop it\n    var i0 = 0, l = derivation.unboundDepsCount;\n    for (var i = 0; i < l; i++) {\n        var dep = observing[i];\n        if (dep.diffValue === 0) {\n            dep.diffValue = 1;\n            if (i0 !== i)\n                observing[i0] = dep;\n            i0++;\n        }\n        // Upcast is 'safe' here, because if dep is IObservable, `dependenciesState` will be undefined,\n        // not hitting the condition\n        if (dep.dependenciesState > lowestNewObservingDerivationState) {\n            lowestNewObservingDerivationState = dep.dependenciesState;\n        }\n    }\n    observing.length = i0;\n    derivation.newObserving = null; // newObserving shouldn't be needed outside tracking (statement moved down to work around FF bug, see #614)\n    // Go through all old observables and check diffValue: (it is unique after last bindDependencies)\n    //   0: it's not in new observables, unobserve it\n    //   1: it keeps being observed, don't want to notify it. change to 0\n    l = prevObserving.length;\n    while (l--) {\n        var dep = prevObserving[l];\n        if (dep.diffValue === 0) {\n            removeObserver(dep, derivation);\n        }\n        dep.diffValue = 0;\n    }\n    // Go through all new observables and check diffValue: (now it should be unique)\n    //   0: it was set to 0 in last loop. don't need to do anything.\n    //   1: it wasn't observed, let's observe it. set back to 0\n    while (i0--) {\n        var dep = observing[i0];\n        if (dep.diffValue === 1) {\n            dep.diffValue = 0;\n            addObserver(dep, derivation);\n        }\n    }\n    // Some new observed derivations may become stale during this derivation computation\n    // so they have had no chance to propagate staleness (#916)\n    if (lowestNewObservingDerivationState !== IDerivationState.UP_TO_DATE) {\n        derivation.dependenciesState = lowestNewObservingDerivationState;\n        derivation.onBecomeStale();\n    }\n}\nfunction clearObserving(derivation) {\n    // invariant(globalState.inBatch > 0, \"INTERNAL ERROR clearObserving should be called only inside batch\");\n    var obs = derivation.observing;\n    derivation.observing = [];\n    var i = obs.length;\n    while (i--)\n        removeObserver(obs[i], derivation);\n    derivation.dependenciesState = IDerivationState.NOT_TRACKING;\n}\nfunction untracked(action) {\n    var prev = untrackedStart();\n    var res = action();\n    untrackedEnd(prev);\n    return res;\n}\nfunction untrackedStart() {\n    var prev = globalState.trackingDerivation;\n    globalState.trackingDerivation = null;\n    return prev;\n}\nfunction untrackedEnd(prev) {\n    globalState.trackingDerivation = prev;\n}\n/**\n * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0\n *\n */\nfunction changeDependenciesStateTo0(derivation) {\n    if (derivation.dependenciesState === IDerivationState.UP_TO_DATE)\n        return;\n    derivation.dependenciesState = IDerivationState.UP_TO_DATE;\n    var obs = derivation.observing;\n    var i = obs.length;\n    while (i--)\n        obs[i].lowestObserverState = IDerivationState.UP_TO_DATE;\n}\n\nvar Reaction = (function () {\n    function Reaction(name, onInvalidate) {\n        if (name === void 0) { name = \"Reaction@\" + getNextId(); }\n        this.name = name;\n        this.onInvalidate = onInvalidate;\n        this.observing = []; // nodes we are looking at. Our value depends on these nodes\n        this.newObserving = [];\n        this.dependenciesState = IDerivationState.NOT_TRACKING;\n        this.diffValue = 0;\n        this.runId = 0;\n        this.unboundDepsCount = 0;\n        this.__mapid = \"#\" + getNextId();\n        this.isDisposed = false;\n        this._isScheduled = false;\n        this._isTrackPending = false;\n        this._isRunning = false;\n    }\n    Reaction.prototype.onBecomeStale = function () {\n        this.schedule();\n    };\n    Reaction.prototype.schedule = function () {\n        if (!this._isScheduled) {\n            this._isScheduled = true;\n            globalState.pendingReactions.push(this);\n            runReactions();\n        }\n    };\n    Reaction.prototype.isScheduled = function () {\n        return this._isScheduled;\n    };\n    /**\n     * internal, use schedule() if you intend to kick off a reaction\n     */\n    Reaction.prototype.runReaction = function () {\n        if (!this.isDisposed) {\n            startBatch();\n            this._isScheduled = false;\n            if (shouldCompute(this)) {\n                this._isTrackPending = true;\n                this.onInvalidate();\n                if (this._isTrackPending && isSpyEnabled()) {\n                    // onInvalidate didn't trigger track right away..\n                    spyReport({\n                        object: this,\n                        type: \"scheduled-reaction\"\n                    });\n                }\n            }\n            endBatch();\n        }\n    };\n    Reaction.prototype.track = function (fn) {\n        startBatch();\n        var notify = isSpyEnabled();\n        var startTime;\n        if (notify) {\n            startTime = Date.now();\n            spyReportStart({\n                object: this,\n                type: \"reaction\",\n                fn: fn\n            });\n        }\n        this._isRunning = true;\n        var result = trackDerivedFunction(this, fn, undefined);\n        this._isRunning = false;\n        this._isTrackPending = false;\n        if (this.isDisposed) {\n            // disposed during last run. Clean up everything that was bound after the dispose call.\n            clearObserving(this);\n        }\n        if (isCaughtException(result))\n            this.reportExceptionInDerivation(result.cause);\n        if (notify) {\n            spyReportEnd({\n                time: Date.now() - startTime\n            });\n        }\n        endBatch();\n    };\n    Reaction.prototype.reportExceptionInDerivation = function (error) {\n        var _this = this;\n        if (this.errorHandler) {\n            this.errorHandler(error, this);\n            return;\n        }\n        var message = \"[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '\" + this;\n        var messageToUser = getMessage(\"m037\");\n        console.error(message || messageToUser /* latter will not be true, make sure uglify doesn't remove */, error);\n        /** If debugging brought you here, please, read the above message :-). Tnx! */\n        if (isSpyEnabled()) {\n            spyReport({\n                type: \"error\",\n                message: message,\n                error: error,\n                object: this\n            });\n        }\n        globalState.globalReactionErrorHandlers.forEach(function (f) { return f(error, _this); });\n    };\n    Reaction.prototype.dispose = function () {\n        if (!this.isDisposed) {\n            this.isDisposed = true;\n            if (!this._isRunning) {\n                // if disposed while running, clean up later. Maybe not optimal, but rare case\n                startBatch();\n                clearObserving(this);\n                endBatch();\n            }\n        }\n    };\n    Reaction.prototype.getDisposer = function () {\n        var r = this.dispose.bind(this);\n        r.$mobx = this;\n        r.onError = registerErrorHandler;\n        return r;\n    };\n    Reaction.prototype.toString = function () {\n        return \"Reaction[\" + this.name + \"]\";\n    };\n    Reaction.prototype.whyRun = function () {\n        var observing = unique(this._isRunning ? this.newObserving : this.observing).map(function (dep) { return dep.name; });\n        return \"\\nWhyRun? reaction '\" + this.name + \"':\\n * Status: [\" + (this.isDisposed\n            ? \"stopped\"\n            : this._isRunning ? \"running\" : this.isScheduled() ? \"scheduled\" : \"idle\") + \"]\\n * This reaction will re-run if any of the following observables changes:\\n    \" + joinStrings(observing) + \"\\n    \" + (this._isRunning\n            ? \" (... or any observable accessed during the remainder of the current run)\"\n            : \"\") + \"\\n\\t\" + getMessage(\"m038\") + \"\\n\";\n    };\n    return Reaction;\n}());\nfunction registerErrorHandler(handler) {\n    invariant(this && this.$mobx && isReaction(this.$mobx), \"Invalid `this`\");\n    invariant(!this.$mobx.errorHandler, \"Only one onErrorHandler can be registered\");\n    this.$mobx.errorHandler = handler;\n}\nfunction onReactionError(handler) {\n    globalState.globalReactionErrorHandlers.push(handler);\n    return function () {\n        var idx = globalState.globalReactionErrorHandlers.indexOf(handler);\n        if (idx >= 0)\n            globalState.globalReactionErrorHandlers.splice(idx, 1);\n    };\n}\n/**\n * Magic number alert!\n * Defines within how many times a reaction is allowed to re-trigger itself\n * until it is assumed that this is gonna be a never ending loop...\n */\nvar MAX_REACTION_ITERATIONS = 100;\nvar reactionScheduler = function (f) { return f(); };\nfunction runReactions() {\n    // Trampolining, if runReactions are already running, new reactions will be picked up\n    if (globalState.inBatch > 0 || globalState.isRunningReactions)\n        return;\n    reactionScheduler(runReactionsHelper);\n}\nfunction runReactionsHelper() {\n    globalState.isRunningReactions = true;\n    var allReactions = globalState.pendingReactions;\n    var iterations = 0;\n    // While running reactions, new reactions might be triggered.\n    // Hence we work with two variables and check whether\n    // we converge to no remaining reactions after a while.\n    while (allReactions.length > 0) {\n        if (++iterations === MAX_REACTION_ITERATIONS) {\n            console.error(\"Reaction doesn't converge to a stable state after \" + MAX_REACTION_ITERATIONS + \" iterations.\" +\n                (\" Probably there is a cycle in the reactive function: \" + allReactions[0]));\n            allReactions.splice(0); // clear reactions\n        }\n        var remainingReactions = allReactions.splice(0);\n        for (var i = 0, l = remainingReactions.length; i < l; i++)\n            remainingReactions[i].runReaction();\n    }\n    globalState.isRunningReactions = false;\n}\nvar isReaction = createInstanceofPredicate(\"Reaction\", Reaction);\nfunction setReactionScheduler(fn) {\n    var baseScheduler = reactionScheduler;\n    reactionScheduler = function (f) { return fn(function () { return baseScheduler(f); }); };\n}\n\nfunction asReference(value) {\n    deprecated(\"asReference is deprecated, use observable.ref instead\");\n    return observable.ref(value);\n}\nfunction asStructure(value) {\n    deprecated(\"asStructure is deprecated. Use observable.struct, computed.struct or reaction options instead.\");\n    return observable.struct(value);\n}\nfunction asFlat(value) {\n    deprecated(\"asFlat is deprecated, use observable.shallow instead\");\n    return observable.shallow(value);\n}\nfunction asMap(data) {\n    deprecated(\"asMap is deprecated, use observable.map or observable.shallowMap instead\");\n    return observable.map(data || {});\n}\n\nfunction createComputedDecorator(equals) {\n    return createClassPropertyDecorator(function (target, name, _, __, originalDescriptor) {\n        invariant(typeof originalDescriptor !== \"undefined\", getMessage(\"m009\"));\n        invariant(typeof originalDescriptor.get === \"function\", getMessage(\"m010\"));\n        var adm = asObservableObject(target, \"\");\n        defineComputedProperty(adm, name, originalDescriptor.get, originalDescriptor.set, equals, false);\n    }, function (name) {\n        var observable = this.$mobx.values[name];\n        if (observable === undefined // See #505\n        )\n            return undefined;\n        return observable.get();\n    }, function (name, value) {\n        this.$mobx.values[name].set(value);\n    }, false, false);\n}\nvar computedDecorator = createComputedDecorator(comparer.default);\nvar computedStructDecorator = createComputedDecorator(comparer.structural);\n/**\n * Decorator for class properties: @computed get value() { return expr; }.\n * For legacy purposes also invokable as ES5 observable created: `computed(() => expr)`;\n */\nvar computed = function computed(arg1, arg2, arg3) {\n    if (typeof arg2 === \"string\") {\n        return computedDecorator.apply(null, arguments);\n    }\n    invariant(typeof arg1 === \"function\", getMessage(\"m011\"));\n    invariant(arguments.length < 3, getMessage(\"m012\"));\n    var opts = typeof arg2 === \"object\" ? arg2 : {};\n    opts.setter = typeof arg2 === \"function\" ? arg2 : opts.setter;\n    var equals = opts.equals\n        ? opts.equals\n        : opts.compareStructural || opts.struct ? comparer.structural : comparer.default;\n    return new ComputedValue(arg1, opts.context, equals, opts.name || arg1.name || \"\", opts.setter);\n};\ncomputed.struct = computedStructDecorator;\ncomputed.equals = createComputedDecorator;\n\nfunction getAtom(thing, property) {\n    if (typeof thing === \"object\" && thing !== null) {\n        if (isObservableArray(thing)) {\n            invariant(property === undefined, getMessage(\"m036\"));\n            return thing.$mobx.atom;\n        }\n        if (isObservableMap(thing)) {\n            var anyThing = thing;\n            if (property === undefined)\n                return getAtom(anyThing._keys);\n            var observable = anyThing._data[property] || anyThing._hasMap[property];\n            invariant(!!observable, \"the entry '\" + property + \"' does not exist in the observable map '\" + getDebugName(thing) + \"'\");\n            return observable;\n        }\n        // Initializers run lazily when transpiling to babel, so make sure they are run...\n        runLazyInitializers(thing);\n        if (property && !thing.$mobx)\n            thing[property]; // See #1072 // TODO: remove in 4.0\n        if (isObservableObject(thing)) {\n            if (!property)\n                return fail(\"please specify a property\");\n            var observable = thing.$mobx.values[property];\n            invariant(!!observable, \"no observable property '\" + property + \"' found on the observable object '\" + getDebugName(thing) + \"'\");\n            return observable;\n        }\n        if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {\n            return thing;\n        }\n    }\n    else if (typeof thing === \"function\") {\n        if (isReaction(thing.$mobx)) {\n            // disposer function\n            return thing.$mobx;\n        }\n    }\n    return fail(\"Cannot obtain atom from \" + thing);\n}\nfunction getAdministration(thing, property) {\n    invariant(thing, \"Expecting some object\");\n    if (property !== undefined)\n        return getAdministration(getAtom(thing, property));\n    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing))\n        return thing;\n    if (isObservableMap(thing))\n        return thing;\n    // Initializers run lazily when transpiling to babel, so make sure they are run...\n    runLazyInitializers(thing);\n    if (thing.$mobx)\n        return thing.$mobx;\n    invariant(false, \"Cannot obtain administration from \" + thing);\n}\nfunction getDebugName(thing, property) {\n    var named;\n    if (property !== undefined)\n        named = getAtom(thing, property);\n    else if (isObservableObject(thing) || isObservableMap(thing))\n        named = getAdministration(thing);\n    else\n        named = getAtom(thing); // valid for arrays as well\n    return named.name;\n}\n\nfunction isComputed(value, property) {\n    if (value === null || value === undefined)\n        return false;\n    if (property !== undefined) {\n        if (isObservableObject(value) === false)\n            return false;\n        if (!value.$mobx.values[property])\n            return false;\n        var atom = getAtom(value, property);\n        return isComputedValue(atom);\n    }\n    return isComputedValue(value);\n}\n\nfunction observe(thing, propOrCb, cbOrFire, fireImmediately) {\n    if (typeof cbOrFire === \"function\")\n        return observeObservableProperty(thing, propOrCb, cbOrFire, fireImmediately);\n    else\n        return observeObservable(thing, propOrCb, cbOrFire);\n}\nfunction observeObservable(thing, listener, fireImmediately) {\n    return getAdministration(thing).observe(listener, fireImmediately);\n}\nfunction observeObservableProperty(thing, property, listener, fireImmediately) {\n    return getAdministration(thing, property).observe(listener, fireImmediately);\n}\n\nfunction intercept(thing, propOrHandler, handler) {\n    if (typeof handler === \"function\")\n        return interceptProperty(thing, propOrHandler, handler);\n    else\n        return interceptInterceptable(thing, propOrHandler);\n}\nfunction interceptInterceptable(thing, handler) {\n    return getAdministration(thing).intercept(handler);\n}\nfunction interceptProperty(thing, property, handler) {\n    return getAdministration(thing, property).intercept(handler);\n}\n\n/**\n * expr can be used to create temporarily views inside views.\n * This can be improved to improve performance if a value changes often, but usually doesn't affect the outcome of an expression.\n *\n * In the following example the expression prevents that a component is rerender _each time_ the selection changes;\n * instead it will only rerenders when the current todo is (de)selected.\n *\n * reactiveComponent((props) => {\n *     const todo = props.todo;\n *     const isSelected = mobx.expr(() => props.viewState.selection === todo);\n *     return <div className={isSelected ? \"todo todo-selected\" : \"todo\"}>{todo.title}</div>\n * });\n *\n */\nfunction expr(expr, scope) {\n    if (!isComputingDerivation())\n        console.warn(getMessage(\"m013\"));\n    // optimization: would be more efficient if the expr itself wouldn't be evaluated first on the next change, but just a 'changed' signal would be fired\n    return computed(expr, { context: scope }).get();\n}\n\nfunction toJS(source, detectCycles, __alreadySeen) {\n    if (detectCycles === void 0) { detectCycles = true; }\n    if (__alreadySeen === void 0) { __alreadySeen = []; }\n    // optimization: using ES6 map would be more efficient!\n    // optimization: lift this function outside toJS, this makes recursion expensive\n    function cache(value) {\n        if (detectCycles)\n            __alreadySeen.push([source, value]);\n        return value;\n    }\n    if (isObservable(source)) {\n        if (detectCycles && __alreadySeen === null)\n            __alreadySeen = [];\n        if (detectCycles && source !== null && typeof source === \"object\") {\n            for (var i = 0, l = __alreadySeen.length; i < l; i++)\n                if (__alreadySeen[i][0] === source)\n                    return __alreadySeen[i][1];\n        }\n        if (isObservableArray(source)) {\n            var res = cache([]);\n            var toAdd = source.map(function (value) { return toJS(value, detectCycles, __alreadySeen); });\n            res.length = toAdd.length;\n            for (var i = 0, l = toAdd.length; i < l; i++)\n                res[i] = toAdd[i];\n            return res;\n        }\n        if (isObservableObject(source)) {\n            var res = cache({});\n            for (var key in source)\n                res[key] = toJS(source[key], detectCycles, __alreadySeen);\n            return res;\n        }\n        if (isObservableMap(source)) {\n            var res_1 = cache({});\n            source.forEach(function (value, key) { return (res_1[key] = toJS(value, detectCycles, __alreadySeen)); });\n            return res_1;\n        }\n        if (isObservableValue(source))\n            return toJS(source.get(), detectCycles, __alreadySeen);\n    }\n    return source;\n}\n\nfunction createTransformer(transformer, onCleanup) {\n    invariant(typeof transformer === \"function\" && transformer.length < 2, \"createTransformer expects a function that accepts one argument\");\n    // Memoizes: object id -> reactive view that applies transformer to the object\n    var objectCache = {};\n    // If the resetId changes, we will clear the object cache, see #163\n    // This construction is used to avoid leaking refs to the objectCache directly\n    var resetId = globalState.resetId;\n    // Local transformer class specifically for this transformer\n    var Transformer = (function (_super) {\n        __extends(Transformer, _super);\n        function Transformer(sourceIdentifier, sourceObject) {\n            var _this = _super.call(this, function () { return transformer(sourceObject); }, undefined, comparer.default, \"Transformer-\" + transformer.name + \"-\" + sourceIdentifier, undefined) || this;\n            _this.sourceIdentifier = sourceIdentifier;\n            _this.sourceObject = sourceObject;\n            return _this;\n        }\n        Transformer.prototype.onBecomeUnobserved = function () {\n            var lastValue = this.value;\n            _super.prototype.onBecomeUnobserved.call(this);\n            delete objectCache[this.sourceIdentifier];\n            if (onCleanup)\n                onCleanup(lastValue, this.sourceObject);\n        };\n        return Transformer;\n    }(ComputedValue));\n    return function (object) {\n        if (resetId !== globalState.resetId) {\n            objectCache = {};\n            resetId = globalState.resetId;\n        }\n        var identifier = getMemoizationId(object);\n        var reactiveTransformer = objectCache[identifier];\n        if (reactiveTransformer)\n            return reactiveTransformer.get();\n        // Not in cache; create a reactive view\n        reactiveTransformer = objectCache[identifier] = new Transformer(identifier, object);\n        return reactiveTransformer.get();\n    };\n}\nfunction getMemoizationId(object) {\n    if (typeof object === \"string\" || typeof object === \"number\")\n        return object;\n    if (object === null || typeof object !== \"object\")\n        throw new Error(\"[mobx] transform expected some kind of object or primitive value, got: \" + object);\n    var tid = object.$transformId;\n    if (tid === undefined) {\n        tid = getNextId();\n        addHiddenProp(object, \"$transformId\", tid);\n    }\n    return tid;\n}\n\nfunction log(msg) {\n    console.log(msg);\n    return msg;\n}\nfunction whyRun(thing, prop) {\n    switch (arguments.length) {\n        case 0:\n            thing = globalState.trackingDerivation;\n            if (!thing)\n                return log(getMessage(\"m024\"));\n            break;\n        case 2:\n            thing = getAtom(thing, prop);\n            break;\n    }\n    thing = getAtom(thing);\n    if (isComputedValue(thing))\n        return log(thing.whyRun());\n    else if (isReaction(thing))\n        return log(thing.whyRun());\n    return fail(getMessage(\"m025\"));\n}\n\nfunction getDependencyTree(thing, property) {\n    return nodeToDependencyTree(getAtom(thing, property));\n}\nfunction nodeToDependencyTree(node) {\n    var result = {\n        name: node.name\n    };\n    if (node.observing && node.observing.length > 0)\n        result.dependencies = unique(node.observing).map(nodeToDependencyTree);\n    return result;\n}\nfunction getObserverTree(thing, property) {\n    return nodeToObserverTree(getAtom(thing, property));\n}\nfunction nodeToObserverTree(node) {\n    var result = {\n        name: node.name\n    };\n    if (hasObservers(node))\n        result.observers = getObservers(node).map(nodeToObserverTree);\n    return result;\n}\n\nfunction interceptReads(thing, propOrHandler, handler) {\n    var target;\n    if (isObservableMap(thing) || isObservableArray(thing) || isObservableValue(thing)) {\n        target = getAdministration(thing);\n    }\n    else if (isObservableObject(thing)) {\n        if (typeof propOrHandler !== \"string\")\n            return fail(\"InterceptReads can only be used with a specific property, not with an object in general\");\n        target = getAdministration(thing, propOrHandler);\n    }\n    else {\n        return fail(\"Expected observable map, object or array as first array\");\n    }\n    if (target.dehancer !== undefined)\n        return fail(\"An intercept reader was already established\");\n    target.dehancer = typeof propOrHandler === \"function\" ? propOrHandler : handler;\n    return function () {\n        target.dehancer = undefined;\n    };\n}\n\n/**\n * (c) Michel Weststrate 2015 - 2016\n * MIT Licensed\n *\n * Welcome to the mobx sources! To get an global overview of how MobX internally works,\n * this is a good place to start:\n * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74\n *\n * Source folders:\n * ===============\n *\n * - api/     Most of the public static methods exposed by the module can be found here.\n * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.\n * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.\n * - utils/   Utility stuff.\n *\n */\nvar extras = {\n    allowStateChanges: allowStateChanges,\n    deepEqual: deepEqual,\n    getAtom: getAtom,\n    getDebugName: getDebugName,\n    getDependencyTree: getDependencyTree,\n    getAdministration: getAdministration,\n    getGlobalState: getGlobalState,\n    getObserverTree: getObserverTree,\n    interceptReads: interceptReads,\n    isComputingDerivation: isComputingDerivation,\n    isSpyEnabled: isSpyEnabled,\n    onReactionError: onReactionError,\n    reserveArrayBuffer: reserveArrayBuffer,\n    resetGlobalState: resetGlobalState,\n    isolateGlobalState: isolateGlobalState,\n    shareGlobalState: shareGlobalState,\n    spyReport: spyReport,\n    spyReportEnd: spyReportEnd,\n    spyReportStart: spyReportStart,\n    setReactionScheduler: setReactionScheduler\n};\nvar everything = {\n    Reaction: Reaction,\n    untracked: untracked,\n    Atom: Atom,\n    BaseAtom: BaseAtom,\n    useStrict: useStrict,\n    isStrictModeEnabled: isStrictModeEnabled,\n    spy: spy,\n    comparer: comparer,\n    asReference: asReference,\n    asFlat: asFlat,\n    asStructure: asStructure,\n    asMap: asMap,\n    isModifierDescriptor: isModifierDescriptor,\n    isObservableObject: isObservableObject,\n    isBoxedObservable: isObservableValue,\n    isObservableArray: isObservableArray,\n    ObservableMap: ObservableMap,\n    isObservableMap: isObservableMap,\n    map: map,\n    transaction: transaction,\n    observable: observable,\n    computed: computed,\n    isObservable: isObservable,\n    isComputed: isComputed,\n    extendObservable: extendObservable,\n    extendShallowObservable: extendShallowObservable,\n    observe: observe,\n    intercept: intercept,\n    autorun: autorun,\n    autorunAsync: autorunAsync,\n    when: when,\n    reaction: reaction,\n    action: action,\n    isAction: isAction,\n    runInAction: runInAction,\n    expr: expr,\n    toJS: toJS,\n    createTransformer: createTransformer,\n    whyRun: whyRun,\n    isArrayLike: isArrayLike,\n    extras: extras\n};\nvar warnedAboutDefaultExport = false;\nvar _loop_1 = function (p) {\n    var val = everything[p];\n    Object.defineProperty(everything, p, {\n        get: function () {\n            if (!warnedAboutDefaultExport) {\n                warnedAboutDefaultExport = true;\n                console.warn(\"Using default export (`import mobx from 'mobx'`) is deprecated \" +\n                    \"and won’t work in mobx@4.0.0\\n\" +\n                    \"Use `import * as mobx from 'mobx'` instead\");\n            }\n            return val;\n        }\n    });\n};\nfor (var p in everything) {\n    _loop_1(p);\n}\nif (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === \"object\") {\n    __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({ spy: spy, extras: extras });\n}\n\nexport { extras, Reaction, untracked, IDerivationState, Atom, BaseAtom, useStrict, isStrictModeEnabled, spy, comparer, asReference, asFlat, asStructure, asMap, isModifierDescriptor, isObservableObject, isObservableValue as isBoxedObservable, isObservableArray, ObservableMap, isObservableMap, map, transaction, observable, computed, isObservable, isComputed, extendObservable, extendShallowObservable, observe, intercept, autorun, autorunAsync, when, reaction, action, isAction, runInAction, expr, toJS, createTransformer, whyRun, isArrayLike };export default everything;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/mobx/lib/mobx.module.js\n// module id = 4\n// module chunks = 0 1 2","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar emptyObject = {};\n\nif (process.env.NODE_ENV !== 'production') {\n  Object.freeze(emptyObject);\n}\n\nmodule.exports = emptyObject;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/fbjs/lib/emptyObject.js\n// module id = 5\n// module chunks = 0 1 2","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&\n    Symbol.for &&\n    Symbol.for('react.element')) ||\n    0xeac7;\n\n  var isValidElement = function(object) {\n    return typeof object === 'object' &&\n      object !== null &&\n      object.$$typeof === REACT_ELEMENT_TYPE;\n  };\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/prop-types/index.js\n// module id = 6\n// module chunks = 0","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_global.js\n// module id = 7\n// module chunks = 0","\"use strict\";\n\nexports.__esModule = true;\n\nexports.default = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/helpers/classCallCheck.js\n// module id = 8\n// module chunks = 0","\"use strict\";\n\nexports.__esModule = true;\n\nvar _typeof2 = require(\"../helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && ((typeof call === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(call)) === \"object\" || typeof call === \"function\") ? call : self;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/helpers/possibleConstructorReturn.js\n// module id = 9\n// module chunks = 0","\"use strict\";\n\nexports.__esModule = true;\n\nvar _setPrototypeOf = require(\"../core-js/object/set-prototype-of\");\n\nvar _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);\n\nvar _create = require(\"../core-js/object/create\");\n\nvar _create2 = _interopRequireDefault(_create);\n\nvar _typeof2 = require(\"../helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(superClass)));\n  }\n\n  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/helpers/inherits.js\n// module id = 10\n// module chunks = 0","import { UnitNumber } from \"./unitNumber\";\n\nexport class TaggedString {\n\tvals: TaggedStringEle[];\n\tconstructor(...vals: TaggedStringEle[]) {\n\t\tthis.vals = vals;\n\t}\n\tappend(t: TaggedStringEle) {\n\t\tif (t instanceof TaggedString) this.vals.push(...t.vals);\n\t\telse this.vals.push(t);\n\t\treturn this;\n\t}\n\ttoString() {\n\t\treturn this.vals.join(\"\");\n\t}\n\tflatten() {\n\t\tfor (let i = 0; i < this.vals.length; i++) {\n\t\t\tconst v = this.vals[i];\n\t\t\tif (v instanceof TaggedString) {\n\t\t\t\tv.flatten();\n\t\t\t\tthis.vals.splice(i, 1, ...(this.vals[i] as TaggedString).vals);\n\t\t\t}\n\t\t}\n\t}\n\t// template function creating an array containing strings and UnitNumbers for linking to definitions in the gui\n\tstatic t(\n\t\tliterals: TemplateStringsArray,\n\t\t...placeholders: TaggedStringEle[]\n\t): TaggedString {\n\t\tlet result: TaggedStringEle[] = [];\n\t\tfor (let i = 0; i < placeholders.length; i++) {\n\t\t\tif (literals[i].length > 0) result.push(literals[i]);\n\t\t\tresult.push(placeholders[i]);\n\t\t}\n\t\tconst last = literals[literals.length - 1];\n\t\tif (last.length > 0) result.push(last);\n\t\treturn new TaggedString(...result);\n\t}\n\tstatic join(str: TaggedStringEle[], joinEle: TaggedStringEle) {\n\t\tif (str.length === 0) return new TaggedString();\n\t\tconst out: TaggedStringEle[] = [str[0]];\n\t\tfor (let i = 1; i < str.length; i++) {\n\t\t\tout.push(joinEle, str[i]);\n\t\t}\n\t\treturn new TaggedString(...out);\n\t}\n}\n\ntype TaggedStringEle = UnitNumber | string | TaggedString;\n\n\n\n// WEBPACK FOOTER //\n// ./src/output.ts","var core = module.exports = { version: '2.5.3' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_core.js\n// module id = 12\n// module chunks = 0","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_object-dp.js\n// module id = 13\n// module chunks = 0","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_descriptors.js\n// module id = 14\n// module chunks = 0","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_has.js\n// module id = 15\n// module chunks = 0","import { TaggedString } from \"../output\";\nimport * as Tree from \"./Tree\";\nimport { UnitNumber } from \"../unitNumber\";\nimport {\n\tTokenType,\n\tRPNToken,\n\tRPNTokenType,\n\tinfixOperators,\n\tAssociativity,\n\tunaryOperators,\n} from \"./parser\";\n\nexport type Node = NumberNode | IdentifierNode | FunctionCallNode;\n\nexport function isEvaluated(node: Tree.Node): node is EvaluatedNode {\n\treturn !!(node as any).value;\n}\n\nexport type EvaluatedNode = Tree.Node & { value: UnitNumber };\n\nexport class NumberNode {\n\tconstructor(public number: string) {}\n\ttoTaggedString(_parentPrecedence = Infinity) {\n\t\treturn new TaggedString(this.number);\n\t}\n\ttoJSON() {\n\t\treturn { type: \"NumberNode\", number: this.number };\n\t}\n\ttoDebugString() {\n\t\treturn this.number;\n\t}\n\tclone() {\n\t\treturn new NumberNode(this.number);\n\t}\n}\nexport class IdentifierNode {\n\tconstructor(public identifier: string) {}\n\ttoTaggedString(_parentPrecedence = Infinity) {\n\t\tif (isEvaluated(this)) return new TaggedString(this.value);\n\t\t// hack: unit may not exist\n\t\treturn new TaggedString(new UnitNumber(0, undefined, this.identifier));\n\t}\n\ttoJSON() {\n\t\treturn { type: \"IdenifierNode\", identifier: this.identifier };\n\t}\n\ttoDebugString() {\n\t\treturn this.identifier;\n\t}\n\tclone() {\n\t\treturn new IdentifierNode(this.identifier);\n\t}\n}\nexport abstract class FunctionCallNode {\n\tconstructor(public fnname: string, public operands: Node[]) {}\n\ttoTaggedString(parentPrecedence = Infinity): TaggedString {\n\t\treturn TaggedString.t`${this.fnname}(${TaggedString.join(\n\t\t\tthis.operands.map(x => x.toTaggedString(parentPrecedence)),\n\t\t\t\", \",\n\t\t)})`;\n\t}\n\ttoJSON(): any {\n\t\treturn {\n\t\t\ttype: this.constructor.name,\n\t\t\tfnname: this.fnname,\n\t\t\toperands: this.operands.map(x => x.toJSON()),\n\t\t};\n\t}\n\tabstract toDebugString(): string;\n\tclone(): FunctionCallNode {\n\t\treturn new (this.constructor as any)(\n\t\t\tthis.fnname,\n\t\t\tthis.operands.map(o => o.clone()),\n\t\t);\n\t}\n}\nexport class UnaryFunctionCallNode extends FunctionCallNode {\n\ttoDebugString(): string {\n\t\treturn `(${this.fnname} ${this.operands[0].toDebugString()})`;\n\t}\n}\nexport class InfixFunctionCallNode extends FunctionCallNode {\n\ttoTaggedString(parentPrecedence = Infinity): TaggedString {\n\t\tconst op = infixOperators[this.fnname];\n\t\tconst disp = op.displayString || this.fnname;\n\t\tconst leftAdd = op.associativity === Associativity.right ? -0.01 : 0;\n\t\tconst rightAdd = op.associativity === Associativity.left ? -0.01 : 0;\n\t\tlet result: TaggedString;\n\t\tif (this.operands.length === 1)\n\t\t\tresult = TaggedString.t`${\n\t\t\t\tleftAdd ? disp : \"\"\n\t\t\t}${this.operands[0].toTaggedString(\n\t\t\t\top.precedence + leftAdd + rightAdd,\n\t\t\t)}${rightAdd ? disp : \"\"}`;\n\t\telse if (this.operands.length === 2)\n\t\t\tresult = TaggedString.t`${this.operands[0].toTaggedString(\n\t\t\t\top.precedence + leftAdd,\n\t\t\t)} `\n\t\t\t\t.append(disp === \"\" ? \"\" : disp + \" \")\n\t\t\t\t.append(\n\t\t\t\t\tthis.operands[1].toTaggedString(op.precedence + rightAdd),\n\t\t\t\t);\n\t\telse throw Error(\"invalid operand count\");\n\n\t\tif (parentPrecedence < op.precedence)\n\t\t\treturn TaggedString.t`(${result})`;\n\t\telse return result;\n\t}\n\ttoDebugString(): string {\n\t\t//if (this.operands.length !== 2)\n\t\t//\tthrow Error(`${this} has ${this.operands.length} ≠ 2 operands`);\n\t\treturn `(${this.operands[0].toDebugString()} ${this.fnname} ${\n\t\t\tthis.operands[1] ? this.operands[1].toDebugString() : \"\"\n\t\t})`;\n\t}\n}\nexport function rpnToTree(tokens: Iterable<RPNToken>): Node {\n\tconst stack: Node[] = [];\n\tfor (const token of tokens) {\n\t\tif (token.type === RPNTokenType.InfixOperator) {\n\t\t\tconst op = infixOperators[token.str.trim()];\n\t\t\tif (!op) throw Error(\"Operator not found: \" + token.str);\n\t\t\tif (stack.length < op.arity)\n\t\t\t\tthrow Error(\n\t\t\t\t\t`Operator '${token.str.trim()}' needs ${\n\t\t\t\t\t\top.arity\n\t\t\t\t\t} arguments, only got ${stack.length}`,\n\t\t\t\t);\n\t\t\tstack.push(\n\t\t\t\tnew InfixFunctionCallNode(\n\t\t\t\t\ttoken.str.trim(),\n\t\t\t\t\tstack.splice(stack.length - op.arity),\n\t\t\t\t),\n\t\t\t);\n\t\t} else if (token.type === RPNTokenType.UnaryOperator) {\n\t\t\tconst op = unaryOperators[token.str.trim()];\n\t\t\tif (stack.length < op.arity)\n\t\t\t\tthrow Error(\n\t\t\t\t\t`Operator '${token.str.trim()}' needs ${\n\t\t\t\t\t\top.arity\n\t\t\t\t\t} arguments, only got ${stack.length}`,\n\t\t\t\t);\n\t\t\tstack.push(\n\t\t\t\tnew UnaryFunctionCallNode(\n\t\t\t\t\ttoken.str.trim(),\n\t\t\t\t\tstack.splice(stack.length - op.arity),\n\t\t\t\t),\n\t\t\t);\n\t\t} else if (token.type === TokenType.Identifier) {\n\t\t\tstack.push(new IdentifierNode(token.str));\n\t\t} else if (token.type === TokenType.Number) {\n\t\t\tstack.push(new NumberNode(token.str));\n\t\t} else throw Error(\"to tree: don't know token type \" + token.type);\n\t}\n\tif (stack.length > 1)\n\t\tthrow Error(\n\t\t\t\"stack has more than one element left: \" +\n\t\t\t\tstack.map(x => x.toDebugString()),\n\t\t);\n\telse if (stack.length === 0) throw Error(`Empty`);\n\treturn stack[0];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/libqalc/Tree.ts","\"use strict\";\n\nexports.__esModule = true;\n\nvar _assign = require(\"../core-js/object/assign\");\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _assign2.default || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/helpers/extends.js\n// module id = 18\n// module chunks = 0","var global = require('./_global');\nvar core = require('./_core');\nvar ctx = require('./_ctx');\nvar hide = require('./_hide');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var IS_WRAP = type & $export.W;\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE];\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];\n  var key, own, out;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if (own && key in exports) continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function (C) {\n      var F = function (a, b, c) {\n        if (this instanceof C) {\n          switch (arguments.length) {\n            case 0: return new C();\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if (IS_PROTO) {\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_export.js\n// module id = 19\n// module chunks = 0","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_hide.js\n// module id = 20\n// module chunks = 0","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_is-object.js\n// module id = 21\n// module chunks = 0","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_to-iobject.js\n// module id = 22\n// module chunks = 0","var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_wks.js\n// module id = 23\n// module chunks = 0","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nimport { setTransitionProperty, getTransitionProperty, getTransformXY, setTransformXY, getTransformName } from './propertyUtils';\n\nvar RE_NUM = /[\\-+]?(?:\\d*\\.|)\\d+(?:[eE][\\-+]?\\d+|)/.source;\n\nvar getComputedStyleX = void 0;\n\n// https://stackoverflow.com/a/3485654/3040605\nfunction forceRelayout(elem) {\n  var originalStyle = elem.style.display;\n  elem.style.display = 'none';\n  elem.offsetHeight; // eslint-disable-line\n  elem.style.display = originalStyle;\n}\n\nfunction css(el, name, v) {\n  var value = v;\n  if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {\n    for (var i in name) {\n      if (name.hasOwnProperty(i)) {\n        css(el, i, name[i]);\n      }\n    }\n    return undefined;\n  }\n  if (typeof value !== 'undefined') {\n    if (typeof value === 'number') {\n      value = value + 'px';\n    }\n    el.style[name] = value;\n    return undefined;\n  }\n  return getComputedStyleX(el, name);\n}\n\nfunction getClientPosition(elem) {\n  var box = void 0;\n  var x = void 0;\n  var y = void 0;\n  var doc = elem.ownerDocument;\n  var body = doc.body;\n  var docElem = doc && doc.documentElement;\n  // 根据 GBS 最新数据，A-Grade Browsers 都已支持 getBoundingClientRect 方法，不用再考虑传统的实现方式\n  box = elem.getBoundingClientRect();\n\n  // 注：jQuery 还考虑减去 docElem.clientLeft/clientTop\n  // 但测试发现，这样反而会导致当 html 和 body 有边距/边框样式时，获取的值不正确\n  // 此外，ie6 会忽略 html 的 margin 值，幸运地是没有谁会去设置 html 的 margin\n\n  x = box.left;\n  y = box.top;\n\n  // In IE, most of the time, 2 extra pixels are added to the top and left\n  // due to the implicit 2-pixel inset border.  In IE6/7 quirks mode and\n  // IE6 standards mode, this border can be overridden by setting the\n  // document element's border to zero -- thus, we cannot rely on the\n  // offset always being 2 pixels.\n\n  // In quirks mode, the offset can be determined by querying the body's\n  // clientLeft/clientTop, but in standards mode, it is found by querying\n  // the document element's clientLeft/clientTop.  Since we already called\n  // getClientBoundingRect we have already forced a reflow, so it is not\n  // too expensive just to query them all.\n\n  // ie 下应该减去窗口的边框吧，毕竟默认 absolute 都是相对窗口定位的\n  // 窗口边框标准是设 documentElement ,quirks 时设置 body\n  // 最好禁止在 body 和 html 上边框 ，但 ie < 9 html 默认有 2px ，减去\n  // 但是非 ie 不可能设置窗口边框，body html 也不是窗口 ,ie 可以通过 html,body 设置\n  // 标准 ie 下 docElem.clientTop 就是 border-top\n  // ie7 html 即窗口边框改变不了。永远为 2\n  // 但标准 firefox/chrome/ie9 下 docElem.clientTop 是窗口边框，即使设了 border-top 也为 0\n\n  x -= docElem.clientLeft || body.clientLeft || 0;\n  y -= docElem.clientTop || body.clientTop || 0;\n\n  return {\n    left: x,\n    top: y\n  };\n}\n\nfunction getScroll(w, top) {\n  var ret = w['page' + (top ? 'Y' : 'X') + 'Offset'];\n  var method = 'scroll' + (top ? 'Top' : 'Left');\n  if (typeof ret !== 'number') {\n    var d = w.document;\n    // ie6,7,8 standard mode\n    ret = d.documentElement[method];\n    if (typeof ret !== 'number') {\n      // quirks mode\n      ret = d.body[method];\n    }\n  }\n  return ret;\n}\n\nfunction getScrollLeft(w) {\n  return getScroll(w);\n}\n\nfunction getScrollTop(w) {\n  return getScroll(w, true);\n}\n\nfunction getOffset(el) {\n  var pos = getClientPosition(el);\n  var doc = el.ownerDocument;\n  var w = doc.defaultView || doc.parentWindow;\n  pos.left += getScrollLeft(w);\n  pos.top += getScrollTop(w);\n  return pos;\n}\n\n/**\n * A crude way of determining if an object is a window\n * @member util\n */\nfunction isWindow(obj) {\n  // must use == for ie8\n  /* eslint eqeqeq:0 */\n  return obj !== null && obj !== undefined && obj == obj.window;\n}\n\nfunction getDocument(node) {\n  if (isWindow(node)) {\n    return node.document;\n  }\n  if (node.nodeType === 9) {\n    return node;\n  }\n  return node.ownerDocument;\n}\n\nfunction _getComputedStyle(elem, name, cs) {\n  var computedStyle = cs;\n  var val = '';\n  var d = getDocument(elem);\n  computedStyle = computedStyle || d.defaultView.getComputedStyle(elem, null);\n\n  // https://github.com/kissyteam/kissy/issues/61\n  if (computedStyle) {\n    val = computedStyle.getPropertyValue(name) || computedStyle[name];\n  }\n\n  return val;\n}\n\nvar _RE_NUM_NO_PX = new RegExp('^(' + RE_NUM + ')(?!px)[a-z%]+$', 'i');\nvar RE_POS = /^(top|right|bottom|left)$/;\nvar CURRENT_STYLE = 'currentStyle';\nvar RUNTIME_STYLE = 'runtimeStyle';\nvar LEFT = 'left';\nvar PX = 'px';\n\nfunction _getComputedStyleIE(elem, name) {\n  // currentStyle maybe null\n  // http://msdn.microsoft.com/en-us/library/ms535231.aspx\n  var ret = elem[CURRENT_STYLE] && elem[CURRENT_STYLE][name];\n\n  // 当 width/height 设置为百分比时，通过 pixelLeft 方式转换的 width/height 值\n  // 一开始就处理了! CUSTOM_STYLE.height,CUSTOM_STYLE.width ,cssHook 解决@2011-08-19\n  // 在 ie 下不对，需要直接用 offset 方式\n  // borderWidth 等值也有问题，但考虑到 borderWidth 设为百分比的概率很小，这里就不考虑了\n\n  // From the awesome hack by Dean Edwards\n  // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291\n  // If we're not dealing with a regular pixel number\n  // but a number that has a weird ending, we need to convert it to pixels\n  // exclude left right for relativity\n  if (_RE_NUM_NO_PX.test(ret) && !RE_POS.test(name)) {\n    // Remember the original values\n    var style = elem.style;\n    var left = style[LEFT];\n    var rsLeft = elem[RUNTIME_STYLE][LEFT];\n\n    // prevent flashing of content\n    elem[RUNTIME_STYLE][LEFT] = elem[CURRENT_STYLE][LEFT];\n\n    // Put in the new values to get a computed value out\n    style[LEFT] = name === 'fontSize' ? '1em' : ret || 0;\n    ret = style.pixelLeft + PX;\n\n    // Revert the changed values\n    style[LEFT] = left;\n\n    elem[RUNTIME_STYLE][LEFT] = rsLeft;\n  }\n  return ret === '' ? 'auto' : ret;\n}\n\nif (typeof window !== 'undefined') {\n  getComputedStyleX = window.getComputedStyle ? _getComputedStyle : _getComputedStyleIE;\n}\n\nfunction getOffsetDirection(dir, option) {\n  if (dir === 'left') {\n    return option.useCssRight ? 'right' : dir;\n  }\n  return option.useCssBottom ? 'bottom' : dir;\n}\n\nfunction oppositeOffsetDirection(dir) {\n  if (dir === 'left') {\n    return 'right';\n  } else if (dir === 'right') {\n    return 'left';\n  } else if (dir === 'top') {\n    return 'bottom';\n  } else if (dir === 'bottom') {\n    return 'top';\n  }\n}\n\n// 设置 elem 相对 elem.ownerDocument 的坐标\nfunction setLeftTop(elem, offset, option) {\n  // set position first, in-case top/left are set even on static elem\n  if (css(elem, 'position') === 'static') {\n    elem.style.position = 'relative';\n  }\n  var presetH = -999;\n  var presetV = -999;\n  var horizontalProperty = getOffsetDirection('left', option);\n  var verticalProperty = getOffsetDirection('top', option);\n  var oppositeHorizontalProperty = oppositeOffsetDirection(horizontalProperty);\n  var oppositeVerticalProperty = oppositeOffsetDirection(verticalProperty);\n\n  if (horizontalProperty !== 'left') {\n    presetH = 999;\n  }\n\n  if (verticalProperty !== 'top') {\n    presetV = 999;\n  }\n  var originalTransition = '';\n  var originalOffset = getOffset(elem);\n  if ('left' in offset || 'top' in offset) {\n    originalTransition = getTransitionProperty(elem) || '';\n    setTransitionProperty(elem, 'none');\n  }\n  if ('left' in offset) {\n    elem.style[oppositeHorizontalProperty] = '';\n    elem.style[horizontalProperty] = presetH + 'px';\n  }\n  if ('top' in offset) {\n    elem.style[oppositeVerticalProperty] = '';\n    elem.style[verticalProperty] = presetV + 'px';\n  }\n  // force relayout\n  forceRelayout(elem);\n  var old = getOffset(elem);\n  var originalStyle = {};\n  for (var key in offset) {\n    if (offset.hasOwnProperty(key)) {\n      var dir = getOffsetDirection(key, option);\n      var preset = key === 'left' ? presetH : presetV;\n      var off = originalOffset[key] - old[key];\n      if (dir === key) {\n        originalStyle[dir] = preset + off;\n      } else {\n        originalStyle[dir] = preset - off;\n      }\n    }\n  }\n  css(elem, originalStyle);\n  // force relayout\n  forceRelayout(elem);\n  if ('left' in offset || 'top' in offset) {\n    setTransitionProperty(elem, originalTransition);\n  }\n  var ret = {};\n  for (var _key in offset) {\n    if (offset.hasOwnProperty(_key)) {\n      var _dir = getOffsetDirection(_key, option);\n      var _off = offset[_key] - originalOffset[_key];\n      if (_key === _dir) {\n        ret[_dir] = originalStyle[_dir] + _off;\n      } else {\n        ret[_dir] = originalStyle[_dir] - _off;\n      }\n    }\n  }\n  css(elem, ret);\n}\n\nfunction setTransform(elem, offset) {\n  var originalOffset = getOffset(elem);\n  var originalXY = getTransformXY(elem);\n  var resultXY = { x: originalXY.x, y: originalXY.y };\n  if ('left' in offset) {\n    resultXY.x = originalXY.x + offset.left - originalOffset.left;\n  }\n  if ('top' in offset) {\n    resultXY.y = originalXY.y + offset.top - originalOffset.top;\n  }\n  setTransformXY(elem, resultXY);\n}\n\nfunction setOffset(elem, offset, option) {\n  if (option.useCssRight || option.useCssBottom) {\n    setLeftTop(elem, offset, option);\n  } else if (option.useCssTransform && getTransformName() in document.body.style) {\n    setTransform(elem, offset, option);\n  } else {\n    setLeftTop(elem, offset, option);\n  }\n}\n\nfunction each(arr, fn) {\n  for (var i = 0; i < arr.length; i++) {\n    fn(arr[i]);\n  }\n}\n\nfunction isBorderBoxFn(elem) {\n  return getComputedStyleX(elem, 'boxSizing') === 'border-box';\n}\n\nvar BOX_MODELS = ['margin', 'border', 'padding'];\nvar CONTENT_INDEX = -1;\nvar PADDING_INDEX = 2;\nvar BORDER_INDEX = 1;\nvar MARGIN_INDEX = 0;\n\nfunction swap(elem, options, callback) {\n  var old = {};\n  var style = elem.style;\n  var name = void 0;\n\n  // Remember the old values, and insert the new ones\n  for (name in options) {\n    if (options.hasOwnProperty(name)) {\n      old[name] = style[name];\n      style[name] = options[name];\n    }\n  }\n\n  callback.call(elem);\n\n  // Revert the old values\n  for (name in options) {\n    if (options.hasOwnProperty(name)) {\n      style[name] = old[name];\n    }\n  }\n}\n\nfunction getPBMWidth(elem, props, which) {\n  var value = 0;\n  var prop = void 0;\n  var j = void 0;\n  var i = void 0;\n  for (j = 0; j < props.length; j++) {\n    prop = props[j];\n    if (prop) {\n      for (i = 0; i < which.length; i++) {\n        var cssProp = void 0;\n        if (prop === 'border') {\n          cssProp = '' + prop + which[i] + 'Width';\n        } else {\n          cssProp = prop + which[i];\n        }\n        value += parseFloat(getComputedStyleX(elem, cssProp)) || 0;\n      }\n    }\n  }\n  return value;\n}\n\nvar domUtils = {};\n\neach(['Width', 'Height'], function (name) {\n  domUtils['doc' + name] = function (refWin) {\n    var d = refWin.document;\n    return Math.max(\n    // firefox chrome documentElement.scrollHeight< body.scrollHeight\n    // ie standard mode : documentElement.scrollHeight> body.scrollHeight\n    d.documentElement['scroll' + name],\n    // quirks : documentElement.scrollHeight 最大等于可视窗口多一点？\n    d.body['scroll' + name], domUtils['viewport' + name](d));\n  };\n\n  domUtils['viewport' + name] = function (win) {\n    // pc browser includes scrollbar in window.innerWidth\n    var prop = 'client' + name;\n    var doc = win.document;\n    var body = doc.body;\n    var documentElement = doc.documentElement;\n    var documentElementProp = documentElement[prop];\n    // 标准模式取 documentElement\n    // backcompat 取 body\n    return doc.compatMode === 'CSS1Compat' && documentElementProp || body && body[prop] || documentElementProp;\n  };\n});\n\n/*\n 得到元素的大小信息\n @param elem\n @param name\n @param {String} [extra]  'padding' : (css width) + padding\n 'border' : (css width) + padding + border\n 'margin' : (css width) + padding + border + margin\n */\nfunction getWH(elem, name, ex) {\n  var extra = ex;\n  if (isWindow(elem)) {\n    return name === 'width' ? domUtils.viewportWidth(elem) : domUtils.viewportHeight(elem);\n  } else if (elem.nodeType === 9) {\n    return name === 'width' ? domUtils.docWidth(elem) : domUtils.docHeight(elem);\n  }\n  var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];\n  var borderBoxValue = name === 'width' ? elem.getBoundingClientRect().width : elem.getBoundingClientRect().height;\n  var computedStyle = getComputedStyleX(elem);\n  var isBorderBox = isBorderBoxFn(elem, computedStyle);\n  var cssBoxValue = 0;\n  if (borderBoxValue === null || borderBoxValue === undefined || borderBoxValue <= 0) {\n    borderBoxValue = undefined;\n    // Fall back to computed then un computed css if necessary\n    cssBoxValue = getComputedStyleX(elem, name);\n    if (cssBoxValue === null || cssBoxValue === undefined || Number(cssBoxValue) < 0) {\n      cssBoxValue = elem.style[name] || 0;\n    }\n    // Normalize '', auto, and prepare for extra\n    cssBoxValue = parseFloat(cssBoxValue) || 0;\n  }\n  if (extra === undefined) {\n    extra = isBorderBox ? BORDER_INDEX : CONTENT_INDEX;\n  }\n  var borderBoxValueOrIsBorderBox = borderBoxValue !== undefined || isBorderBox;\n  var val = borderBoxValue || cssBoxValue;\n  if (extra === CONTENT_INDEX) {\n    if (borderBoxValueOrIsBorderBox) {\n      return val - getPBMWidth(elem, ['border', 'padding'], which, computedStyle);\n    }\n    return cssBoxValue;\n  } else if (borderBoxValueOrIsBorderBox) {\n    if (extra === BORDER_INDEX) {\n      return val;\n    }\n    return val + (extra === PADDING_INDEX ? -getPBMWidth(elem, ['border'], which, computedStyle) : getPBMWidth(elem, ['margin'], which, computedStyle));\n  }\n  return cssBoxValue + getPBMWidth(elem, BOX_MODELS.slice(extra), which, computedStyle);\n}\n\nvar cssShow = {\n  position: 'absolute',\n  visibility: 'hidden',\n  display: 'block'\n};\n\n// fix #119 : https://github.com/kissyteam/kissy/issues/119\nfunction getWHIgnoreDisplay() {\n  for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  var val = void 0;\n  var elem = args[0];\n  // in case elem is window\n  // elem.offsetWidth === undefined\n  if (elem.offsetWidth !== 0) {\n    val = getWH.apply(undefined, args);\n  } else {\n    swap(elem, cssShow, function () {\n      val = getWH.apply(undefined, args);\n    });\n  }\n  return val;\n}\n\neach(['width', 'height'], function (name) {\n  var first = name.charAt(0).toUpperCase() + name.slice(1);\n  domUtils['outer' + first] = function (el, includeMargin) {\n    return el && getWHIgnoreDisplay(el, name, includeMargin ? MARGIN_INDEX : BORDER_INDEX);\n  };\n  var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];\n\n  domUtils[name] = function (elem, v) {\n    var val = v;\n    if (val !== undefined) {\n      if (elem) {\n        var computedStyle = getComputedStyleX(elem);\n        var isBorderBox = isBorderBoxFn(elem);\n        if (isBorderBox) {\n          val += getPBMWidth(elem, ['padding', 'border'], which, computedStyle);\n        }\n        return css(elem, name, val);\n      }\n      return undefined;\n    }\n    return elem && getWHIgnoreDisplay(elem, name, CONTENT_INDEX);\n  };\n});\n\nfunction mix(to, from) {\n  for (var i in from) {\n    if (from.hasOwnProperty(i)) {\n      to[i] = from[i];\n    }\n  }\n  return to;\n}\n\nvar utils = {\n  getWindow: function getWindow(node) {\n    if (node && node.document && node.setTimeout) {\n      return node;\n    }\n    var doc = node.ownerDocument || node;\n    return doc.defaultView || doc.parentWindow;\n  },\n\n  getDocument: getDocument,\n  offset: function offset(el, value, option) {\n    if (typeof value !== 'undefined') {\n      setOffset(el, value, option || {});\n    } else {\n      return getOffset(el);\n    }\n  },\n\n  isWindow: isWindow,\n  each: each,\n  css: css,\n  clone: function clone(obj) {\n    var i = void 0;\n    var ret = {};\n    for (i in obj) {\n      if (obj.hasOwnProperty(i)) {\n        ret[i] = obj[i];\n      }\n    }\n    var overflow = obj.overflow;\n    if (overflow) {\n      for (i in obj) {\n        if (obj.hasOwnProperty(i)) {\n          ret.overflow[i] = obj.overflow[i];\n        }\n      }\n    }\n    return ret;\n  },\n\n  mix: mix,\n  getWindowScrollLeft: function getWindowScrollLeft(w) {\n    return getScrollLeft(w);\n  },\n  getWindowScrollTop: function getWindowScrollTop(w) {\n    return getScrollTop(w);\n  },\n  merge: function merge() {\n    var ret = {};\n\n    for (var _len2 = arguments.length, args = Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    for (var i = 0; i < args.length; i++) {\n      utils.mix(ret, args[i]);\n    }\n    return ret;\n  },\n\n  viewportWidth: 0,\n  viewportHeight: 0\n};\n\nmix(utils, domUtils);\n\nexport default utils;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dom-align/es/utils.js\n// module id = 24\n// module chunks = 0","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader/lib/css-base.js\n// module id = 25\n// module chunks = 0 1 2","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\nvar stylesInDom = {};\n\nvar\tmemoize = function (fn) {\n\tvar memo;\n\n\treturn function () {\n\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\treturn memo;\n\t};\n};\n\nvar isOldIE = memoize(function () {\n\t// Test for IE <= 9 as proposed by Browserhacks\n\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t// Tests for existence of standard globals is to allow style-loader\n\t// to operate correctly into non-standard environments\n\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\treturn window && document && document.all && !window.atob;\n});\n\nvar getElement = (function (fn) {\n\tvar memo = {};\n\n\treturn function(selector) {\n\t\tif (typeof memo[selector] === \"undefined\") {\n\t\t\tvar styleTarget = fn.call(this, selector);\n\t\t\t// Special case to return head of iframe instead of iframe itself\n\t\t\tif (styleTarget instanceof window.HTMLIFrameElement) {\n\t\t\t\ttry {\n\t\t\t\t\t// This will throw an exception if access to iframe is blocked\n\t\t\t\t\t// due to cross-origin restrictions\n\t\t\t\t\tstyleTarget = styleTarget.contentDocument.head;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tstyleTarget = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmemo[selector] = styleTarget;\n\t\t}\n\t\treturn memo[selector]\n\t};\n})(function (target) {\n\treturn document.querySelector(target)\n});\n\nvar singleton = null;\nvar\tsingletonCounter = 0;\nvar\tstylesInsertedAtTop = [];\n\nvar\tfixUrls = require(\"./urls\");\n\nmodule.exports = function(list, options) {\n\tif (typeof DEBUG !== \"undefined\" && DEBUG) {\n\t\tif (typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t}\n\n\toptions = options || {};\n\n\toptions.attrs = typeof options.attrs === \"object\" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (!options.singleton && typeof options.singleton !== \"boolean\") options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the <head> element\n\tif (!options.insertInto) options.insertInto = \"head\";\n\n\t// By default, add <style> tags to the bottom of the target\n\tif (!options.insertAt) options.insertAt = \"bottom\";\n\n\tvar styles = listToStyles(list, options);\n\n\taddStylesToDom(styles, options);\n\n\treturn function update (newList) {\n\t\tvar mayRemove = [];\n\n\t\tfor (var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList, options);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\n\t\tfor (var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\n\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom (styles, options) {\n\tfor (var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles (list, options) {\n\tvar styles = [];\n\tvar newStyles = {};\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = options.base ? item[0] + options.base : item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\n\t\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse newStyles[id].parts.push(part);\n\t}\n\n\treturn styles;\n}\n\nfunction insertStyleElement (options, style) {\n\tvar target = getElement(options.insertInto)\n\n\tif (!target) {\n\t\tthrow new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");\n\t}\n\n\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n\n\tif (options.insertAt === \"top\") {\n\t\tif (!lastStyleElementInsertedAtTop) {\n\t\t\ttarget.insertBefore(style, target.firstChild);\n\t\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\ttarget.appendChild(style);\n\t\t}\n\t\tstylesInsertedAtTop.push(style);\n\t} else if (options.insertAt === \"bottom\") {\n\t\ttarget.appendChild(style);\n\t} else if (typeof options.insertAt === \"object\" && options.insertAt.before) {\n\t\tvar nextSibling = getElement(options.insertInto + \" \" + options.insertAt.before);\n\t\ttarget.insertBefore(style, nextSibling);\n\t} else {\n\t\tthrow new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");\n\t}\n}\n\nfunction removeStyleElement (style) {\n\tif (style.parentNode === null) return false;\n\tstyle.parentNode.removeChild(style);\n\n\tvar idx = stylesInsertedAtTop.indexOf(style);\n\tif(idx >= 0) {\n\t\tstylesInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement (options) {\n\tvar style = document.createElement(\"style\");\n\n\toptions.attrs.type = \"text/css\";\n\n\taddAttrs(style, options.attrs);\n\tinsertStyleElement(options, style);\n\n\treturn style;\n}\n\nfunction createLinkElement (options) {\n\tvar link = document.createElement(\"link\");\n\n\toptions.attrs.type = \"text/css\";\n\toptions.attrs.rel = \"stylesheet\";\n\n\taddAttrs(link, options.attrs);\n\tinsertStyleElement(options, link);\n\n\treturn link;\n}\n\nfunction addAttrs (el, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\tel.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction addStyle (obj, options) {\n\tvar style, update, remove, result;\n\n\t// If a transform function was defined, run it on the css\n\tif (options.transform && obj.css) {\n\t    result = options.transform(obj.css);\n\n\t    if (result) {\n\t    \t// If transform returns a value, use that instead of the original css.\n\t    \t// This allows running runtime transformations on the css.\n\t    \tobj.css = result;\n\t    } else {\n\t    \t// If the transform function returns a falsy value, don't add this css.\n\t    \t// This allows conditional loading of css\n\t    \treturn function() {\n\t    \t\t// noop\n\t    \t};\n\t    }\n\t}\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\n\t\tstyle = singleton || (singleton = createStyleElement(options));\n\n\t\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\n\n\t} else if (\n\t\tobj.sourceMap &&\n\t\ttypeof URL === \"function\" &&\n\t\ttypeof URL.createObjectURL === \"function\" &&\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\n\t\ttypeof Blob === \"function\" &&\n\t\ttypeof btoa === \"function\"\n\t) {\n\t\tstyle = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, style, options);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\n\t\t\tif(style.href) URL.revokeObjectURL(style.href);\n\t\t};\n\t} else {\n\t\tstyle = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, style);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle (newObj) {\n\t\tif (newObj) {\n\t\t\tif (\n\t\t\t\tnewObj.css === obj.css &&\n\t\t\t\tnewObj.media === obj.media &&\n\t\t\t\tnewObj.sourceMap === obj.sourceMap\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\n\t\treturn textStore.filter(Boolean).join('\\n');\n\t};\n})();\n\nfunction applyToSingletonTag (style, index, remove, obj) {\n\tvar css = remove ? \"\" : obj.css;\n\n\tif (style.styleSheet) {\n\t\tstyle.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = style.childNodes;\n\n\t\tif (childNodes[index]) style.removeChild(childNodes[index]);\n\n\t\tif (childNodes.length) {\n\t\t\tstyle.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyle.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag (style, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyle.setAttribute(\"media\", media)\n\t}\n\n\tif(style.styleSheet) {\n\t\tstyle.styleSheet.cssText = css;\n\t} else {\n\t\twhile(style.firstChild) {\n\t\t\tstyle.removeChild(style.firstChild);\n\t\t}\n\n\t\tstyle.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink (link, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/*\n\t\tIf convertToAbsoluteUrls isn't defined, but sourcemaps are enabled\n\t\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\t\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\t\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls) {\n\t\tcss = fixUrls(css);\n\t}\n\n\tif (sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t}\n\n\tvar blob = new Blob([css], { type: \"text/css\" });\n\n\tvar oldSrc = link.href;\n\n\tlink.href = URL.createObjectURL(blob);\n\n\tif(oldSrc) URL.revokeObjectURL(oldSrc);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/style-loader/lib/addStyles.js\n// module id = 26\n// module chunks = 0 1 2","import { Atom, Reaction, extras, isObservableArray, isObservableMap, isObservableObject, spy, untracked } from 'mobx';\nimport { Children, Component, createElement } from 'react';\nimport { findDOMNode, unstable_batchedUpdates } from 'react-dom';\n\n// These functions can be stubbed out in specific environments\nvar unstable_batchedUpdates$1 = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n\n\n\n\nvar asyncGenerator = function () {\n  function AwaitValue(value) {\n    this.value = value;\n  }\n\n  function AsyncGenerator(gen) {\n    var front, back;\n\n    function send(key, arg) {\n      return new Promise(function (resolve, reject) {\n        var request = {\n          key: key,\n          arg: arg,\n          resolve: resolve,\n          reject: reject,\n          next: null\n        };\n\n        if (back) {\n          back = back.next = request;\n        } else {\n          front = back = request;\n          resume(key, arg);\n        }\n      });\n    }\n\n    function resume(key, arg) {\n      try {\n        var result = gen[key](arg);\n        var value = result.value;\n\n        if (value instanceof AwaitValue) {\n          Promise.resolve(value.value).then(function (arg) {\n            resume(\"next\", arg);\n          }, function (arg) {\n            resume(\"throw\", arg);\n          });\n        } else {\n          settle(result.done ? \"return\" : \"normal\", result.value);\n        }\n      } catch (err) {\n        settle(\"throw\", err);\n      }\n    }\n\n    function settle(type, value) {\n      switch (type) {\n        case \"return\":\n          front.resolve({\n            value: value,\n            done: true\n          });\n          break;\n\n        case \"throw\":\n          front.reject(value);\n          break;\n\n        default:\n          front.resolve({\n            value: value,\n            done: false\n          });\n          break;\n      }\n\n      front = front.next;\n\n      if (front) {\n        resume(front.key, front.arg);\n      } else {\n        back = null;\n      }\n    }\n\n    this._invoke = send;\n\n    if (typeof gen.return !== \"function\") {\n      this.return = undefined;\n    }\n  }\n\n  if (typeof Symbol === \"function\" && Symbol.asyncIterator) {\n    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {\n      return this;\n    };\n  }\n\n  AsyncGenerator.prototype.next = function (arg) {\n    return this._invoke(\"next\", arg);\n  };\n\n  AsyncGenerator.prototype.throw = function (arg) {\n    return this._invoke(\"throw\", arg);\n  };\n\n  AsyncGenerator.prototype.return = function (arg) {\n    return this._invoke(\"return\", arg);\n  };\n\n  return {\n    wrap: function (fn) {\n      return function () {\n        return new AsyncGenerator(fn.apply(this, arguments));\n      };\n    },\n    await: function (value) {\n      return new AwaitValue(value);\n    }\n  };\n}();\n\n\n\n\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\n\n\n\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar EventEmitter = function () {\n    function EventEmitter() {\n        classCallCheck(this, EventEmitter);\n        this.listeners = [];\n    }\n\n    createClass(EventEmitter, [{\n        key: \"on\",\n        value: function on(cb) {\n            var _this = this;\n\n            this.listeners.push(cb);\n            return function () {\n                var index = _this.listeners.indexOf(cb);\n                if (index !== -1) _this.listeners.splice(index, 1);\n            };\n        }\n    }, {\n        key: \"emit\",\n        value: function emit(data) {\n            this.listeners.forEach(function (fn) {\n                return fn(data);\n            });\n        }\n    }]);\n    return EventEmitter;\n}();\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\nvar REACT_STATICS = {\n    childContextTypes: true,\n    contextTypes: true,\n    defaultProps: true,\n    displayName: true,\n    getDefaultProps: true,\n    mixins: true,\n    propTypes: true,\n    type: true\n};\n\nvar KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true\n};\n\nvar defineProperty$1 = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = getPrototypeOf && getPrototypeOf(Object);\n\nvar hoistNonReactStatics = function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n    if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components\n\n        if (objectPrototype) {\n            var inheritedComponent = getPrototypeOf(sourceComponent);\n            if (inheritedComponent && inheritedComponent !== objectPrototype) {\n                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n            }\n        }\n\n        var keys = getOwnPropertyNames(sourceComponent);\n\n        if (getOwnPropertySymbols) {\n            keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n        }\n\n        for (var i = 0; i < keys.length; ++i) {\n            var key = keys[i];\n            if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {\n                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n                try { // Avoid failures from read-only properties\n                    defineProperty$1(targetComponent, key, descriptor);\n                } catch (e) {}\n            }\n        }\n\n        return targetComponent;\n    }\n\n    return targetComponent;\n};\n\n// Copied from React.PropTypes\nfunction createChainableTypeChecker(validate) {\n    function checkType(isRequired, props, propName, componentName, location, propFullName) {\n        for (var _len = arguments.length, rest = Array(_len > 6 ? _len - 6 : 0), _key = 6; _key < _len; _key++) {\n            rest[_key - 6] = arguments[_key];\n        }\n\n        return untracked(function () {\n            componentName = componentName || \"<<anonymous>>\";\n            propFullName = propFullName || propName;\n            if (props[propName] == null) {\n                if (isRequired) {\n                    var actual = props[propName] === null ? \"null\" : \"undefined\";\n                    return new Error(\"The \" + location + \" `\" + propFullName + \"` is marked as required \" + \"in `\" + componentName + \"`, but its value is `\" + actual + \"`.\");\n                }\n                return null;\n            } else {\n                return validate.apply(undefined, [props, propName, componentName, location, propFullName].concat(rest));\n            }\n        });\n    }\n\n    var chainedCheckType = checkType.bind(null, false);\n    chainedCheckType.isRequired = checkType.bind(null, true);\n    return chainedCheckType;\n}\n\n// Copied from React.PropTypes\nfunction isSymbol(propType, propValue) {\n    // Native Symbol.\n    if (propType === \"symbol\") {\n        return true;\n    }\n\n    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n    if (propValue[\"@@toStringTag\"] === \"Symbol\") {\n        return true;\n    }\n\n    // Fallback for non-spec compliant Symbols which are polyfilled.\n    if (typeof Symbol === \"function\" && propValue instanceof Symbol) {\n        return true;\n    }\n\n    return false;\n}\n\n// Copied from React.PropTypes\nfunction getPropType(propValue) {\n    var propType = typeof propValue === \"undefined\" ? \"undefined\" : _typeof(propValue);\n    if (Array.isArray(propValue)) {\n        return \"array\";\n    }\n    if (propValue instanceof RegExp) {\n        // Old webkits (at least until Android 4.0) return 'function' rather than\n        // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n        // passes PropTypes.object.\n        return \"object\";\n    }\n    if (isSymbol(propType, propValue)) {\n        return \"symbol\";\n    }\n    return propType;\n}\n\n// This handles more types than `getPropType`. Only used for error messages.\n// Copied from React.PropTypes\nfunction getPreciseType(propValue) {\n    var propType = getPropType(propValue);\n    if (propType === \"object\") {\n        if (propValue instanceof Date) {\n            return \"date\";\n        } else if (propValue instanceof RegExp) {\n            return \"regexp\";\n        }\n    }\n    return propType;\n}\n\nfunction createObservableTypeCheckerCreator(allowNativeType, mobxType) {\n    return createChainableTypeChecker(function (props, propName, componentName, location, propFullName) {\n        return untracked(function () {\n            if (allowNativeType) {\n                if (getPropType(props[propName]) === mobxType.toLowerCase()) return null;\n            }\n            var mobxChecker = void 0;\n            switch (mobxType) {\n                case \"Array\":\n                    mobxChecker = isObservableArray;\n                    break;\n                case \"Object\":\n                    mobxChecker = isObservableObject;\n                    break;\n                case \"Map\":\n                    mobxChecker = isObservableMap;\n                    break;\n                default:\n                    throw new Error(\"Unexpected mobxType: \" + mobxType);\n            }\n            var propValue = props[propName];\n            if (!mobxChecker(propValue)) {\n                var preciseType = getPreciseType(propValue);\n                var nativeTypeExpectationMessage = allowNativeType ? \" or javascript `\" + mobxType.toLowerCase() + \"`\" : \"\";\n                return new Error(\"Invalid prop `\" + propFullName + \"` of type `\" + preciseType + \"` supplied to\" + \" `\" + componentName + \"`, expected `mobx.Observable\" + mobxType + \"`\" + nativeTypeExpectationMessage + \".\");\n            }\n            return null;\n        });\n    });\n}\n\nfunction createObservableArrayOfTypeChecker(allowNativeType, typeChecker) {\n    return createChainableTypeChecker(function (props, propName, componentName, location, propFullName) {\n        for (var _len2 = arguments.length, rest = Array(_len2 > 5 ? _len2 - 5 : 0), _key2 = 5; _key2 < _len2; _key2++) {\n            rest[_key2 - 5] = arguments[_key2];\n        }\n\n        return untracked(function () {\n            if (typeof typeChecker !== \"function\") {\n                return new Error(\"Property `\" + propFullName + \"` of component `\" + componentName + \"` has \" + \"invalid PropType notation.\");\n            }\n            var error = createObservableTypeCheckerCreator(allowNativeType, \"Array\")(props, propName, componentName);\n            if (error instanceof Error) return error;\n            var propValue = props[propName];\n            for (var i = 0; i < propValue.length; i++) {\n                error = typeChecker.apply(undefined, [propValue, i, componentName, location, propFullName + \"[\" + i + \"]\"].concat(rest));\n                if (error instanceof Error) return error;\n            }\n            return null;\n        });\n    });\n}\n\nvar observableArray = createObservableTypeCheckerCreator(false, \"Array\");\nvar observableArrayOf = createObservableArrayOfTypeChecker.bind(null, false);\nvar observableMap = createObservableTypeCheckerCreator(false, \"Map\");\nvar observableObject = createObservableTypeCheckerCreator(false, \"Object\");\nvar arrayOrObservableArray = createObservableTypeCheckerCreator(true, \"Array\");\nvar arrayOrObservableArrayOf = createObservableArrayOfTypeChecker.bind(null, true);\nvar objectOrObservableObject = createObservableTypeCheckerCreator(true, \"Object\");\n\n\n\nvar propTypes = Object.freeze({\n\tobservableArray: observableArray,\n\tobservableArrayOf: observableArrayOf,\n\tobservableMap: observableMap,\n\tobservableObject: observableObject,\n\tarrayOrObservableArray: arrayOrObservableArray,\n\tarrayOrObservableArrayOf: arrayOrObservableArrayOf,\n\tobjectOrObservableObject: objectOrObservableObject\n});\n\nfunction isStateless(component) {\n    // `function() {}` has prototype, but `() => {}` doesn't\n    // `() => {}` via Babel has prototype too.\n    return !(component.prototype && component.prototype.render);\n}\n\nvar injectorContextTypes = {\n    mobxStores: objectOrObservableObject\n};\nObject.seal(injectorContextTypes);\n\nvar proxiedInjectorProps = {\n    contextTypes: {\n        get: function get$$1() {\n            return injectorContextTypes;\n        },\n        set: function set$$1(_) {\n            console.warn(\"Mobx Injector: you are trying to attach `contextTypes` on an component decorated with `inject` (or `observer`) HOC. Please specify the contextTypes on the wrapped component instead. It is accessible through the `wrappedComponent`\");\n        },\n        configurable: true,\n        enumerable: false\n    },\n    isMobxInjector: {\n        value: true,\n        writable: true,\n        configurable: true,\n        enumerable: true\n    }\n\n    /**\n     * Store Injection\n     */\n};function createStoreInjector(grabStoresFn, component, injectNames) {\n    var _class, _temp2;\n\n    var displayName = \"inject-\" + (component.displayName || component.name || component.constructor && component.constructor.name || \"Unknown\");\n    if (injectNames) displayName += \"-with-\" + injectNames;\n\n    var Injector = (_temp2 = _class = function (_Component) {\n        inherits(Injector, _Component);\n\n        function Injector() {\n            var _ref;\n\n            var _temp, _this, _ret;\n\n            classCallCheck(this, Injector);\n\n            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n            }\n\n            return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Injector.__proto__ || Object.getPrototypeOf(Injector)).call.apply(_ref, [this].concat(args))), _this), _this.storeRef = function (instance) {\n                _this.wrappedInstance = instance;\n            }, _temp), possibleConstructorReturn(_this, _ret);\n        }\n\n        createClass(Injector, [{\n            key: \"render\",\n            value: function render() {\n                // Optimization: it might be more efficient to apply the mapper function *outside* the render method\n                // (if the mapper is a function), that could avoid expensive(?) re-rendering of the injector component\n                // See this test: 'using a custom injector is not too reactive' in inject.js\n                var newProps = {};\n                for (var key in this.props) {\n                    if (this.props.hasOwnProperty(key)) {\n                        newProps[key] = this.props[key];\n                    }\n                }var additionalProps = grabStoresFn(this.context.mobxStores || {}, newProps, this.context) || {};\n                for (var _key2 in additionalProps) {\n                    newProps[_key2] = additionalProps[_key2];\n                }\n\n                if (!isStateless(component)) {\n                    newProps.ref = this.storeRef;\n                }\n\n                return createElement(component, newProps);\n            }\n        }]);\n        return Injector;\n    }(Component), _class.displayName = displayName, _temp2);\n\n    // Static fields from component should be visible on the generated Injector\n\n    hoistNonReactStatics(Injector, component);\n\n    Injector.wrappedComponent = component;\n    Object.defineProperties(Injector, proxiedInjectorProps);\n\n    return Injector;\n}\n\nfunction grabStoresByName(storeNames) {\n    return function (baseStores, nextProps) {\n        storeNames.forEach(function (storeName) {\n            if (storeName in nextProps // prefer props over stores\n            ) return;\n            if (!(storeName in baseStores)) throw new Error(\"MobX injector: Store '\" + storeName + \"' is not available! Make sure it is provided by some Provider\");\n            nextProps[storeName] = baseStores[storeName];\n        });\n        return nextProps;\n    };\n}\n\n/**\n * higher order component that injects stores to a child.\n * takes either a varargs list of strings, which are stores read from the context,\n * or a function that manually maps the available stores from the context to props:\n * storesToProps(mobxStores, props, context) => newProps\n */\nfunction inject() /* fn(stores, nextProps) or ...storeNames */{\n    var grabStoresFn = void 0;\n    if (typeof arguments[0] === \"function\") {\n        grabStoresFn = arguments[0];\n        return function (componentClass) {\n            var injected = createStoreInjector(grabStoresFn, componentClass);\n            injected.isMobxInjector = false; // supress warning\n            // mark the Injector as observer, to make it react to expressions in `grabStoresFn`,\n            // see #111\n            injected = observer(injected);\n            injected.isMobxInjector = true; // restore warning\n            return injected;\n        };\n    } else {\n        var storeNames = [];\n        for (var i = 0; i < arguments.length; i++) {\n            storeNames[i] = arguments[i];\n        }grabStoresFn = grabStoresByName(storeNames);\n        return function (componentClass) {\n            return createStoreInjector(grabStoresFn, componentClass, storeNames.join(\"-\"));\n        };\n    }\n}\n\n/**\n * dev tool support\n */\nvar isDevtoolsEnabled = false;\n\nvar isUsingStaticRendering = false;\n\nvar warnedAboutObserverInjectDeprecation = false;\n\n// WeakMap<Node, Object>;\nvar componentByNodeRegistery = typeof WeakMap !== \"undefined\" ? new WeakMap() : undefined;\nvar renderReporter = new EventEmitter();\n\nfunction findDOMNode$2(component) {\n    if (findDOMNode) {\n        try {\n            return findDOMNode(component);\n        } catch (e) {\n            // findDOMNode will throw in react-test-renderer, see:\n            // See https://github.com/mobxjs/mobx-react/issues/216\n            // Is there a better heuristic?\n            return null;\n        }\n    }\n    return null;\n}\n\nfunction reportRendering(component) {\n    var node = findDOMNode$2(component);\n    if (node && componentByNodeRegistery) componentByNodeRegistery.set(node, component);\n\n    renderReporter.emit({\n        event: \"render\",\n        renderTime: component.__$mobRenderEnd - component.__$mobRenderStart,\n        totalTime: Date.now() - component.__$mobRenderStart,\n        component: component,\n        node: node\n    });\n}\n\nfunction trackComponents() {\n    if (typeof WeakMap === \"undefined\") throw new Error(\"[mobx-react] tracking components is not supported in this browser.\");\n    if (!isDevtoolsEnabled) isDevtoolsEnabled = true;\n}\n\nfunction useStaticRendering(useStaticRendering) {\n    isUsingStaticRendering = useStaticRendering;\n}\n\n/**\n * Errors reporter\n */\n\nvar errorsReporter = new EventEmitter();\n\n/**\n * Utilities\n */\n\nfunction patch(target, funcName) {\n    var runMixinFirst = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    var base = target[funcName];\n    var mixinFunc = reactiveMixin[funcName];\n    var f = !base ? mixinFunc : runMixinFirst === true ? function () {\n        mixinFunc.apply(this, arguments);\n        base.apply(this, arguments);\n    } : function () {\n        base.apply(this, arguments);\n        mixinFunc.apply(this, arguments);\n    };\n\n    // MWE: ideally we freeze here to protect against accidental overwrites in component instances, see #195\n    // ...but that breaks react-hot-loader, see #231...\n    target[funcName] = f;\n}\n\nfunction isObjectShallowModified(prev, next) {\n    if (null == prev || null == next || (typeof prev === \"undefined\" ? \"undefined\" : _typeof(prev)) !== \"object\" || (typeof next === \"undefined\" ? \"undefined\" : _typeof(next)) !== \"object\") {\n        return prev !== next;\n    }\n    var keys = Object.keys(prev);\n    if (keys.length !== Object.keys(next).length) {\n        return true;\n    }\n    var key = void 0;\n    for (var i = keys.length - 1; i >= 0, key = keys[i]; i--) {\n        if (next[key] !== prev[key]) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * ReactiveMixin\n */\nvar reactiveMixin = {\n    componentWillMount: function componentWillMount() {\n        var _this = this;\n\n        if (isUsingStaticRendering === true) return;\n        // Generate friendly name for debugging\n        var initialName = this.displayName || this.name || this.constructor && (this.constructor.displayName || this.constructor.name) || \"<component>\";\n        var rootNodeID = this._reactInternalInstance && this._reactInternalInstance._rootNodeID;\n\n        /**\n         * If props are shallowly modified, react will render anyway,\n         * so atom.reportChanged() should not result in yet another re-render\n         */\n        var skipRender = false;\n        /**\n         * forceUpdate will re-assign this.props. We don't want that to cause a loop,\n         * so detect these changes\n         */\n        var isForcingUpdate = false;\n\n        function makePropertyObservableReference(propName) {\n            var valueHolder = this[propName];\n            var atom = new Atom(\"reactive \" + propName);\n            Object.defineProperty(this, propName, {\n                configurable: true,\n                enumerable: true,\n                get: function get$$1() {\n                    atom.reportObserved();\n                    return valueHolder;\n                },\n                set: function set$$1(v) {\n                    if (!isForcingUpdate && isObjectShallowModified(valueHolder, v)) {\n                        valueHolder = v;\n                        skipRender = true;\n                        atom.reportChanged();\n                        skipRender = false;\n                    } else {\n                        valueHolder = v;\n                    }\n                }\n            });\n        }\n\n        // make this.props an observable reference, see #124\n        makePropertyObservableReference.call(this, \"props\");\n        // make state an observable reference\n        makePropertyObservableReference.call(this, \"state\");\n\n        // wire up reactive render\n        var baseRender = this.render.bind(this);\n        var reaction = null;\n        var isRenderingPending = false;\n\n        var initialRender = function initialRender() {\n            reaction = new Reaction(initialName + \"#\" + rootNodeID + \".render()\", function () {\n                if (!isRenderingPending) {\n                    // N.B. Getting here *before mounting* means that a component constructor has side effects (see the relevant test in misc.js)\n                    // This unidiomatic React usage but React will correctly warn about this so we continue as usual\n                    // See #85 / Pull #44\n                    isRenderingPending = true;\n                    if (typeof _this.componentWillReact === \"function\") _this.componentWillReact(); // TODO: wrap in action?\n                    if (_this.__$mobxIsUnmounted !== true) {\n                        // If we are unmounted at this point, componentWillReact() had a side effect causing the component to unmounted\n                        // TODO: remove this check? Then react will properly warn about the fact that this should not happen? See #73\n                        // However, people also claim this migth happen during unit tests..\n                        var hasError = true;\n                        try {\n                            isForcingUpdate = true;\n                            if (!skipRender) Component.prototype.forceUpdate.call(_this);\n                            hasError = false;\n                        } finally {\n                            isForcingUpdate = false;\n                            if (hasError) reaction.dispose();\n                        }\n                    }\n                }\n            });\n            reaction.reactComponent = _this;\n            reactiveRender.$mobx = reaction;\n            _this.render = reactiveRender;\n            return reactiveRender();\n        };\n\n        var reactiveRender = function reactiveRender() {\n            isRenderingPending = false;\n            var exception = undefined;\n            var rendering = undefined;\n            reaction.track(function () {\n                if (isDevtoolsEnabled) {\n                    _this.__$mobRenderStart = Date.now();\n                }\n                try {\n                    rendering = extras.allowStateChanges(false, baseRender);\n                } catch (e) {\n                    exception = e;\n                }\n                if (isDevtoolsEnabled) {\n                    _this.__$mobRenderEnd = Date.now();\n                }\n            });\n            if (exception) {\n                errorsReporter.emit(exception);\n                throw exception;\n            }\n            return rendering;\n        };\n\n        this.render = initialRender;\n    },\n\n    componentWillUnmount: function componentWillUnmount() {\n        if (isUsingStaticRendering === true) return;\n        this.render.$mobx && this.render.$mobx.dispose();\n        this.__$mobxIsUnmounted = true;\n        if (isDevtoolsEnabled) {\n            var node = findDOMNode$2(this);\n            if (node && componentByNodeRegistery) {\n                componentByNodeRegistery.delete(node);\n            }\n            renderReporter.emit({\n                event: \"destroy\",\n                component: this,\n                node: node\n            });\n        }\n    },\n\n    componentDidMount: function componentDidMount() {\n        if (isDevtoolsEnabled) {\n            reportRendering(this);\n        }\n    },\n\n    componentDidUpdate: function componentDidUpdate() {\n        if (isDevtoolsEnabled) {\n            reportRendering(this);\n        }\n    },\n\n    shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {\n        if (isUsingStaticRendering) {\n            console.warn(\"[mobx-react] It seems that a re-rendering of a React component is triggered while in static (server-side) mode. Please make sure components are rendered only once server-side.\");\n        }\n        // update on any state changes (as is the default)\n        if (this.state !== nextState) {\n            return true;\n        }\n        // update if props are shallowly not equal, inspired by PureRenderMixin\n        // we could return just 'false' here, and avoid the `skipRender` checks etc\n        // however, it is nicer if lifecycle events are triggered like usually,\n        // so we return true here if props are shallowly modified.\n        return isObjectShallowModified(this.props, nextProps);\n    }\n\n    /**\n     * Observer function / decorator\n     */\n};function observer(arg1, arg2) {\n    if (typeof arg1 === \"string\") {\n        throw new Error(\"Store names should be provided as array\");\n    }\n    if (Array.isArray(arg1)) {\n        // component needs stores\n        if (!warnedAboutObserverInjectDeprecation) {\n            warnedAboutObserverInjectDeprecation = true;\n            console.warn('Mobx observer: Using observer to inject stores is deprecated since 4.0. Use `@inject(\"store1\", \"store2\") @observer ComponentClass` or `inject(\"store1\", \"store2\")(observer(componentClass))` instead of `@observer([\"store1\", \"store2\"]) ComponentClass`');\n        }\n        if (!arg2) {\n            // invoked as decorator\n            return function (componentClass) {\n                return observer(arg1, componentClass);\n            };\n        } else {\n            return inject.apply(null, arg1)(observer(arg2));\n        }\n    }\n    var componentClass = arg1;\n\n    if (componentClass.isMobxInjector === true) {\n        console.warn(\"Mobx observer: You are trying to use 'observer' on a component that already has 'inject'. Please apply 'observer' before applying 'inject'\");\n    }\n\n    // Stateless function component:\n    // If it is function but doesn't seem to be a react class constructor,\n    // wrap it to a react class automatically\n    if (typeof componentClass === \"function\" && (!componentClass.prototype || !componentClass.prototype.render) && !componentClass.isReactClass && !Component.isPrototypeOf(componentClass)) {\n        var _class, _temp;\n\n        return observer((_temp = _class = function (_Component) {\n            inherits(_class, _Component);\n\n            function _class() {\n                classCallCheck(this, _class);\n                return possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));\n            }\n\n            createClass(_class, [{\n                key: \"render\",\n                value: function render() {\n                    return componentClass.call(this, this.props, this.context);\n                }\n            }]);\n            return _class;\n        }(Component), _class.displayName = componentClass.displayName || componentClass.name, _class.contextTypes = componentClass.contextTypes, _class.propTypes = componentClass.propTypes, _class.defaultProps = componentClass.defaultProps, _temp));\n    }\n\n    if (!componentClass) {\n        throw new Error(\"Please pass a valid component to 'observer'\");\n    }\n\n    var target = componentClass.prototype || componentClass;\n    mixinLifecycleEvents(target);\n    componentClass.isMobXReactObserver = true;\n    return componentClass;\n}\n\nfunction mixinLifecycleEvents(target) {\n    patch(target, \"componentWillMount\", true);[\"componentDidMount\", \"componentWillUnmount\", \"componentDidUpdate\"].forEach(function (funcName) {\n        patch(target, funcName);\n    });\n    if (!target.shouldComponentUpdate) {\n        target.shouldComponentUpdate = reactiveMixin.shouldComponentUpdate;\n    }\n}\n\n// TODO: support injection somehow as well?\nvar Observer = observer(function (_ref) {\n    var children = _ref.children;\n    return children();\n});\n\nObserver.displayName = \"Observer\";\n\nObserver.propTypes = {\n    children: function children(propValue, key, componentName, location, propFullName) {\n        if (typeof propValue[key] !== \"function\") return new Error(\"Invalid prop `\" + propFullName + \"` of type `\" + _typeof(propValue[key]) + \"` supplied to\" + \" `\" + componentName + \"`, expected `function`.\");\n    }\n};\n\nvar _class;\nvar _temp;\n\nvar specialReactKeys = { children: true, key: true, ref: true };\n\nvar Provider = (_temp = _class = function (_Component) {\n    inherits(Provider, _Component);\n\n    function Provider() {\n        classCallCheck(this, Provider);\n        return possibleConstructorReturn(this, (Provider.__proto__ || Object.getPrototypeOf(Provider)).apply(this, arguments));\n    }\n\n    createClass(Provider, [{\n        key: \"render\",\n        value: function render() {\n            return Children.only(this.props.children);\n        }\n    }, {\n        key: \"getChildContext\",\n        value: function getChildContext() {\n            var stores = {};\n            // inherit stores\n            var baseStores = this.context.mobxStores;\n            if (baseStores) for (var key in baseStores) {\n                stores[key] = baseStores[key];\n            }\n            // add own stores\n            for (var _key in this.props) {\n                if (!specialReactKeys[_key] && _key !== \"suppressChangedStoreWarning\") stores[_key] = this.props[_key];\n            }return {\n                mobxStores: stores\n            };\n        }\n    }, {\n        key: \"componentWillReceiveProps\",\n        value: function componentWillReceiveProps(nextProps) {\n            // Maybe this warning is too aggressive?\n            if (Object.keys(nextProps).length !== Object.keys(this.props).length) console.warn(\"MobX Provider: The set of provided stores has changed. Please avoid changing stores as the change might not propagate to all children\");\n            if (!nextProps.suppressChangedStoreWarning) for (var key in nextProps) {\n                if (!specialReactKeys[key] && this.props[key] !== nextProps[key]) console.warn(\"MobX Provider: Provided store '\" + key + \"' has changed. Please avoid replacing stores as the change might not propagate to all children\");\n            }\n        }\n    }]);\n    return Provider;\n}(Component), _class.contextTypes = {\n    mobxStores: objectOrObservableObject\n}, _class.childContextTypes = {\n    mobxStores: objectOrObservableObject.isRequired\n}, _temp);\n\nif (!Component) throw new Error(\"mobx-react requires React to be available\");\nif (!extras) throw new Error(\"mobx-react requires mobx to be available\");\n\nif (typeof unstable_batchedUpdates === \"function\") extras.setReactionScheduler(unstable_batchedUpdates);else if (typeof unstable_batchedUpdates$1 === \"function\") extras.setReactionScheduler(unstable_batchedUpdates$1);\n\nvar onError = function onError(fn) {\n    return errorsReporter.on(fn);\n};\n\n/* DevTool support */\n// See: https://github.com/andykog/mobx-devtools/blob/d8976c24b8cb727ed59f9a0bc905a009df79e221/src/backend/installGlobalHook.js\n\nif ((typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === \"undefined\" ? \"undefined\" : _typeof(__MOBX_DEVTOOLS_GLOBAL_HOOK__)) === \"object\") {\n    var mobx$1 = { spy: spy, extras: extras };\n    var mobxReact = { renderReporter: renderReporter, componentByNodeRegistery: componentByNodeRegistery, trackComponents: trackComponents };\n    __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobxReact(mobxReact, mobx$1);\n}\n\nexport { propTypes, propTypes as PropTypes, onError, observer, Observer, renderReporter, componentByNodeRegistery, trackComponents, useStaticRendering, Provider, inject };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/mobx-react/index.module.js\n// module id = 27\n// module chunks = 0 1 2","/** @license React v16.2.0\n * react.production.min.js\n *\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var m=require(\"object-assign\"),n=require(\"fbjs/lib/emptyObject\"),p=require(\"fbjs/lib/emptyFunction\"),q=\"function\"===typeof Symbol&&Symbol[\"for\"],r=q?Symbol[\"for\"](\"react.element\"):60103,t=q?Symbol[\"for\"](\"react.call\"):60104,u=q?Symbol[\"for\"](\"react.return\"):60105,v=q?Symbol[\"for\"](\"react.portal\"):60106,w=q?Symbol[\"for\"](\"react.fragment\"):60107,x=\"function\"===typeof Symbol&&Symbol.iterator;\nfunction y(a){for(var b=arguments.length-1,e=\"Minified React error #\"+a+\"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant\\x3d\"+a,c=0;c<b;c++)e+=\"\\x26args[]\\x3d\"+encodeURIComponent(arguments[c+1]);b=Error(e+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\");b.name=\"Invariant Violation\";b.framesToPop=1;throw b;}\nvar z={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function A(a,b,e){this.props=a;this.context=b;this.refs=n;this.updater=e||z}A.prototype.isReactComponent={};A.prototype.setState=function(a,b){\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a?y(\"85\"):void 0;this.updater.enqueueSetState(this,a,b,\"setState\")};A.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};\nfunction B(a,b,e){this.props=a;this.context=b;this.refs=n;this.updater=e||z}function C(){}C.prototype=A.prototype;var D=B.prototype=new C;D.constructor=B;m(D,A.prototype);D.isPureReactComponent=!0;function E(a,b,e){this.props=a;this.context=b;this.refs=n;this.updater=e||z}var F=E.prototype=new C;F.constructor=E;m(F,A.prototype);F.unstable_isAsyncReactComponent=!0;F.render=function(){return this.props.children};var G={current:null},H=Object.prototype.hasOwnProperty,I={key:!0,ref:!0,__self:!0,__source:!0};\nfunction J(a,b,e){var c,d={},g=null,k=null;if(null!=b)for(c in void 0!==b.ref&&(k=b.ref),void 0!==b.key&&(g=\"\"+b.key),b)H.call(b,c)&&!I.hasOwnProperty(c)&&(d[c]=b[c]);var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){for(var h=Array(f),l=0;l<f;l++)h[l]=arguments[l+2];d.children=h}if(a&&a.defaultProps)for(c in f=a.defaultProps,f)void 0===d[c]&&(d[c]=f[c]);return{$$typeof:r,type:a,key:g,ref:k,props:d,_owner:G.current}}function K(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===r}\nfunction escape(a){var b={\"\\x3d\":\"\\x3d0\",\":\":\"\\x3d2\"};return\"$\"+(\"\"+a).replace(/[=:]/g,function(a){return b[a]})}var L=/\\/+/g,M=[];function N(a,b,e,c){if(M.length){var d=M.pop();d.result=a;d.keyPrefix=b;d.func=e;d.context=c;d.count=0;return d}return{result:a,keyPrefix:b,func:e,context:c,count:0}}function O(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>M.length&&M.push(a)}\nfunction P(a,b,e,c){var d=typeof a;if(\"undefined\"===d||\"boolean\"===d)a=null;var g=!1;if(null===a)g=!0;else switch(d){case \"string\":case \"number\":g=!0;break;case \"object\":switch(a.$$typeof){case r:case t:case u:case v:g=!0}}if(g)return e(c,a,\"\"===b?\".\"+Q(a,0):b),1;g=0;b=\"\"===b?\".\":b+\":\";if(Array.isArray(a))for(var k=0;k<a.length;k++){d=a[k];var f=b+Q(d,k);g+=P(d,f,e,c)}else if(null===a||\"undefined\"===typeof a?f=null:(f=x&&a[x]||a[\"@@iterator\"],f=\"function\"===typeof f?f:null),\"function\"===typeof f)for(a=\nf.call(a),k=0;!(d=a.next()).done;)d=d.value,f=b+Q(d,k++),g+=P(d,f,e,c);else\"object\"===d&&(e=\"\"+a,y(\"31\",\"[object Object]\"===e?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":e,\"\"));return g}function Q(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function R(a,b){a.func.call(a.context,b,a.count++)}\nfunction S(a,b,e){var c=a.result,d=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?T(a,c,e,p.thatReturnsArgument):null!=a&&(K(a)&&(b=d+(!a.key||b&&b.key===a.key?\"\":(\"\"+a.key).replace(L,\"$\\x26/\")+\"/\")+e,a={$$typeof:r,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}),c.push(a))}function T(a,b,e,c,d){var g=\"\";null!=e&&(g=(\"\"+e).replace(L,\"$\\x26/\")+\"/\");b=N(b,g,c,d);null==a||P(a,\"\",S,b);O(b)}\nvar U={Children:{map:function(a,b,e){if(null==a)return a;var c=[];T(a,c,null,b,e);return c},forEach:function(a,b,e){if(null==a)return a;b=N(null,null,b,e);null==a||P(a,\"\",R,b);O(b)},count:function(a){return null==a?0:P(a,\"\",p.thatReturnsNull,null)},toArray:function(a){var b=[];T(a,b,null,p.thatReturnsArgument);return b},only:function(a){K(a)?void 0:y(\"143\");return a}},Component:A,PureComponent:B,unstable_AsyncComponent:E,Fragment:w,createElement:J,cloneElement:function(a,b,e){var c=m({},a.props),\nd=a.key,g=a.ref,k=a._owner;if(null!=b){void 0!==b.ref&&(g=b.ref,k=G.current);void 0!==b.key&&(d=\"\"+b.key);if(a.type&&a.type.defaultProps)var f=a.type.defaultProps;for(h in b)H.call(b,h)&&!I.hasOwnProperty(h)&&(c[h]=void 0===b[h]&&void 0!==f?f[h]:b[h])}var h=arguments.length-2;if(1===h)c.children=e;else if(1<h){f=Array(h);for(var l=0;l<h;l++)f[l]=arguments[l+2];c.children=f}return{$$typeof:r,type:a.type,key:d,ref:g,props:c,_owner:k}},createFactory:function(a){var b=J.bind(null,a);b.type=a;return b},\nisValidElement:K,version:\"16.2.0\",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:G,assign:m}},V=Object.freeze({default:U}),W=V&&U||V;module.exports=W[\"default\"]?W[\"default\"]:W;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/react/cjs/react.production.min.js\n// module id = 28\n// module chunks = 0 1 2","import { rpnToTree } from \"./Tree\";\nexport namespace TokenType {\n\texport const Identifier = \"Identifier\";\n\texport type Identifier = typeof Identifier;\n\texport const Number = \"Number\";\n\texport type Number = typeof Number;\n\texport const LParen = \"LParen\";\n\texport type LParen = typeof LParen;\n\texport const RParen = \"RParen\";\n\texport type RParen = typeof RParen;\n\texport const Operator = \"Operator\";\n\texport type Operator = typeof Operator;\n\texport const Whitespace = \"Whitespace\";\n\texport type Whitespace = typeof Whitespace;\n\texport const Unknown = \"Unknown\";\n\texport type Unknown = typeof Unknown;\n}\nexport type TokenType =\n\t| TokenType.Identifier\n\t| TokenType.Number\n\t| TokenType.LParen\n\t| TokenType.RParen\n\t| TokenType.Operator\n\t| TokenType.Whitespace\n\t| TokenType.Unknown;\nexport namespace RPNTokenType {\n\texport const Identifier = \"Identifier\";\n\texport type Identifier = typeof Identifier;\n\texport const Number = \"Number\";\n\texport type Number = typeof Number;\n\texport const LParen = \"LParen\";\n\texport type LParen = typeof LParen;\n\texport const RParen = \"RParen\";\n\texport type RParen = typeof RParen;\n\texport const UnaryOperator = \"UnaryOperator\";\n\texport type UnaryOperator = typeof UnaryOperator;\n\texport const InfixOperator = \"InfixOperator\";\n\texport type InfixOperator = typeof InfixOperator;\n\texport const Whitespace = \"Whitespace\";\n\texport type Whitespace = typeof Whitespace;\n\texport const Unknown = \"Unknown\";\n\texport type Unknown = typeof Unknown;\n}\nexport type RPNTokenType =\n\t| RPNTokenType.Identifier\n\t| RPNTokenType.Number\n\t| RPNTokenType.LParen\n\t| RPNTokenType.RParen\n\t| RPNTokenType.UnaryOperator\n\t| RPNTokenType.InfixOperator\n\t| RPNTokenType.Whitespace\n\t| RPNTokenType.Unknown;\n\nconst TokenTypeRegex: [RegExp, TokenType][] = [\n\t[/^\\s+/, TokenType.Whitespace],\n\t[/^\\(/, TokenType.LParen],\n\t[/^\\)/, TokenType.RParen],\n\t[/^(=>|<=|>=|\\|\\||&&|==|!=|[ =≈+*/^|·!<>-]|to )/, TokenType.Operator],\n\t[\n\t\t/^[-+]?(([0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)|NaN|Infinity)/,\n\t\tTokenType.Number,\n\t],\n\t[/^[^() =<>≈+*/^&|·!>-]+/i, TokenType.Identifier],\n\t[/^./, TokenType.Unknown],\n];\ninterface Token<Type extends RPNTokenType | TokenType> {\n\ttype: Type;\n\tstr: string;\n\tstart: number;\n}\nexport type RPNToken = Token<RPNTokenType>;\n\nexport type AToken = Token<TokenType>;\n\nexport function tokenToDebugString(t: AToken | RPNToken): string {\n\treturn `(${t.type} '${t.str}')`;\n}\n\nexport function* tokenize(str: string): IterableIterator<AToken> {\n\tlet i = 0;\n\tlet it = 0;\n\twhile (i < str.length) {\n\t\tit++;\n\t\tfor (const [regex, type] of TokenTypeRegex) {\n\t\t\tconst match = regex.exec(str.substr(i));\n\t\t\tif (match) {\n\t\t\t\tlet str = match[0];\n\t\t\t\tyield { type, str, start: i };\n\t\t\t\ti += str.length;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (it > 1000) throw Error(\"wtf\");\n\t}\n}\n\n/**\n * fix some things:\n * - remove whitespace\n * - replace unary minus with operator '#', \"/m\" with \"1/m\"\n * - replace unicode · with *\n * - identifier before '(' is function call e.g. \"sin(x)\"\n * - implicit multiplication between {), num, identifier} and {(, num, identifier)}\n */\nexport function* preprocess(\n\ttokens: Iterable<AToken>,\n): IterableIterator<AToken> {\n\tlet lastToken: AToken | null = null;\n\tfor (const token of tokens) {\n\t\tif (token.type === TokenType.Whitespace) continue;\n\t\tif (lastToken) yield lastToken;\n\t\tif (\n\t\t\tlastToken &&\n\t\t\t[TokenType.Identifier, TokenType.Number, TokenType.LParen].indexOf(\n\t\t\t\ttoken.type,\n\t\t\t) >= 0 &&\n\t\t\t[TokenType.Identifier, TokenType.Number, TokenType.RParen].indexOf(\n\t\t\t\tlastToken.type,\n\t\t\t) >= 0\n\t\t)\n\t\t\tyield { type: TokenType.Operator, str: \"\", start: token.start };\n\n\t\tif (token.type === TokenType.Operator) {\n\t\t\tif (token.str === \"*\") token.str = \"·\";\n\t\t\tif (token.str === \"in\") token.str = \"to\";\n\t\t\tif (\n\t\t\t\t!lastToken ||\n\t\t\t\t[TokenType.LParen, TokenType.Operator].indexOf(\n\t\t\t\t\tlastToken.type,\n\t\t\t\t) >= 0\n\t\t\t) {\n\t\t\t\t/*// is an unary operator\n\t\t\t\tif (token.str === \"-\") token.str = token.str.replace(\"-\", \"#\");\n\t\t\t\telse if (token.str === \"/\")\n\t\t\t\t\tyield {\n\t\t\t\t\t\ttype: TokenType.Number,\n\t\t\t\t\t\tstr: \"1\",\n\t\t\t\t\t\tstart: token.start,\n\t\t\t\t\t};\n\t\t\t\telse throw Error(\"Unary \" + token.str + \" not allowed\");*/\n\t\t\t}\n\t\t}\n\t\tlastToken = token;\n\t}\n\tif (lastToken) yield lastToken;\n}\n\nexport enum Associativity {\n\t/** a / b / c = (a / b) / c */\n\tleft,\n\t/** a ^ b ^ c = a ^ (b ^ c) */\n\tright,\n\t/** a + b + c = (a + b) + c = a + (b + c) */\n\tboth,\n}\ninterface OperatorInfo<Arity extends number = 2> {\n\tprecedence: number;\n\tassociativity: Associativity;\n\tarity: Arity;\n\tdisplayString?: string;\n}\nexport const infixOperators: { [n: string]: OperatorInfo } = {\n\t// hack: this only allowed at end of line\n\t\"!\": { precedence: 0.5, associativity: Associativity.left, arity: 1 as 2 },\n\n\t\"^\": { precedence: 1, associativity: Associativity.right, arity: 2 },\n\t\"|\": { precedence: 1.5, associativity: Associativity.left, arity: 2 },\n\t\"\": { precedence: 1.8, associativity: Associativity.left, arity: 2 },\n\t\"·\": { precedence: 2, associativity: Associativity.both, arity: 2 },\n\t\"/\": { precedence: 2, associativity: Associativity.left, arity: 2 },\n\t\"+\": { precedence: 4, associativity: Associativity.both, arity: 2 },\n\t\"-\": { precedence: 4, associativity: Associativity.left, arity: 2 },\n\t\"<\": { precedence: 5, associativity: Associativity.left, arity: 2 },\n\t\"<=\": { precedence: 5, associativity: Associativity.left, arity: 2 },\n\t\">\": { precedence: 5, associativity: Associativity.left, arity: 2 },\n\t\">=\": { precedence: 5, associativity: Associativity.left, arity: 2 },\n\t\"==\": { precedence: 6, associativity: Associativity.left, arity: 2 },\n\t\"!=\": { precedence: 6, associativity: Associativity.left, arity: 2 },\n\t//'&': { precedence: 7, associativity: Associativity.left, arity: 2 },\n\t//'^': { precedence: 7.1, associativity: Associativity.left, arity: 2 },\n\t//'|': { precedence: 7.2, associativity: Associativity.left, arity: 2 },\n\t\"&&\": { precedence: 7.3, associativity: Associativity.left, arity: 2 },\n\t\"||\": { precedence: 7.4, associativity: Associativity.left, arity: 2 },\n\t\"=>\": { precedence: 8, associativity: Associativity.right, arity: 2 },\n\t\"=\": { precedence: 10, associativity: Associativity.right, arity: 2 },\n\t\"≈\": { precedence: 10, associativity: Associativity.right, arity: 2 },\n\tto: { precedence: 12, associativity: Associativity.left, arity: 2 },\n};\nexport const unaryOperators: { [n: string]: OperatorInfo<1> } = {\n\t\"-\": {\n\t\tprecedence: 0.5,\n\t\tassociativity: Associativity.right,\n\t\tarity: 1,\n\t}, // unary minus\n\t\"/\": {\n\t\tprecedence: 0.8,\n\t\tassociativity: Associativity.right,\n\t\tarity: 1,\n\t}, // unary minus\n};\nfunction operator(token: RPNToken) {\n\tconst op = token.str.trim();\n\tif (token.type === RPNTokenType.InfixOperator)\n\t\tvar c: OperatorInfo<1 | 2> = infixOperators[op];\n\telse if (token.type === RPNTokenType.UnaryOperator) c = unaryOperators[op];\n\telse return null;\n\tif (!c) throw Error(`unknown ${token.type}: '${op}'`);\n\treturn c;\n}\nexport function* toRPN(tokens: Iterable<AToken>): IterableIterator<RPNToken> {\n\tconst stack: Token<\n\t\t| TokenType.LParen\n\t\t| RPNTokenType.InfixOperator\n\t\t| RPNTokenType.UnaryOperator\n\t>[] = [];\n\tfunction top<T>(stack: T[]) {\n\t\treturn stack[stack.length - 1];\n\t}\n\tlet infix_mode: \"infix\" | \"unary\" = \"unary\";\n\tfunction yieldOperator(\n\t\ttoken: AToken,\n\t): Token<RPNTokenType.InfixOperator | RPNTokenType.UnaryOperator> {\n\t\tif (token.type !== TokenType.Operator)\n\t\t\tthrow Error(\"not an operator \" + token.type);\n\t\tif (infix_mode === \"infix\")\n\t\t\treturn {\n\t\t\t\t...token,\n\t\t\t\ttype: RPNTokenType.InfixOperator,\n\t\t\t};\n\t\telse\n\t\t\treturn {\n\t\t\t\t...token!,\n\t\t\t\ttype: RPNTokenType.UnaryOperator,\n\t\t\t};\n\t}\n\tfor (const token of tokens) {\n\t\tswitch (token.type) {\n\t\t\tcase TokenType.Number:\n\t\t\tcase TokenType.Identifier:\n\t\t\t\tyield { ...token, type: token.type };\n\t\t\t\tinfix_mode = \"infix\";\n\t\t\t\tbreak;\n\t\t\tcase TokenType.Operator:\n\t\t\t\tconst convToken = yieldOperator(token);\n\t\t\t\tconst o1 = operator(convToken)!;\n\t\t\t\tlet token2: RPNToken, o2: OperatorInfo<1 | 2> | null;\n\t\t\t\twhile (\n\t\t\t\t\t(token2 = top(stack)) &&\n\t\t\t\t\t(o2 = operator(token2)) &&\n\t\t\t\t\t(((o1.associativity === Associativity.left ||\n\t\t\t\t\t\to1.associativity === Associativity.both) &&\n\t\t\t\t\t\to1.precedence >= o2.precedence) ||\n\t\t\t\t\t\t(o1.associativity === Associativity.right &&\n\t\t\t\t\t\t\to1.precedence > o2.precedence))\n\t\t\t\t) {\n\t\t\t\t\tyield stack.pop()!;\n\t\t\t\t}\n\t\t\t\tstack.push(convToken);\n\t\t\t\tinfix_mode = \"unary\";\n\t\t\t\tbreak;\n\t\t\tcase TokenType.LParen:\n\t\t\t\tstack.push({ ...token, type: token.type });\n\t\t\t\tinfix_mode = \"unary\";\n\t\t\t\tbreak;\n\t\t\tcase TokenType.RParen:\n\t\t\t\twhile (top(stack) && top(stack).type !== TokenType.LParen)\n\t\t\t\t\tyield stack.pop()!;\n\t\t\t\tif (stack.length === 0)\n\t\t\t\t\tthrow Error(token.start + \": missing opening paren\");\n\t\t\t\tstack.pop();\n\t\t\t\tinfix_mode = \"infix\";\n\t\t\t\tbreak;\n\t\t\tdefault: {\n\t\t\t\tconsole.error(\"unknown token \", token);\n\t\t\t\tthrow Error(\"what is \" + tokenToDebugString(token));\n\t\t\t}\n\t\t}\n\t}\n\twhile (stack.length > 0) {\n\t\tif (top(stack).type === RPNTokenType.UnaryOperator) yield stack.pop()!;\n\t\telse if (top(stack).type === RPNTokenType.InfixOperator) {\n\t\t\tyield stack.pop()!;\n\t\t\t//throw Error(\"Missing second operand for \" + top(stack).str);\n\t\t} else throw Error(top(stack).start + \":missing closing parens\");\n\t}\n}\n\nexport function parse(str: string) {\n\treturn rpnToTree(toRPN(preprocess(tokenize(str))));\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/libqalc/parser.ts","import Scope from \"./scope\";\n\nconst globalScope = new Scope();\nexport default globalScope;\n\n\n\n// WEBPACK FOOTER //\n// ./src/libqalc/globalScope.ts","import { UnitNumber, SpecialUnitNumber } from \"../unitNumber\";\nimport { parse } from \"./parser\";\nimport Scope from \"./scope\";\nimport { TaggedString } from \"../output\";\nimport * as Tree from \"./Tree\";\nimport * as operators from \"./operators\";\nimport globalScope from \"./globalScope\";\nimport init from \"./init\";\n\ntype EvaluatedNode = Tree.EvaluatedNode;\n\nimport { QalcFunction } from \"./functions\";\n\nexport function stripCommentsTrim(str: string) {\n\tconst inx = str.indexOf(\"#\");\n\tif (inx < 0) return { code: str.trim() };\n\treturn {\n\t\tcode: str.substr(0, inx).trim(),\n\t\tcomment: str.substr(inx + 1).trim(),\n\t};\n}\n\nexport function parseEvaluate(str: string) {\n\treturn evaluate(parse(stripCommentsTrim(str).code), globalScope);\n}\n\nexport function evaluationHasSideeffect(node: Tree.Node, scope: Scope) {\n\tif (node instanceof Tree.FunctionCallNode) {\n\t\tconst fn = resolveFunction(node, scope);\n\t\treturn fn.hasSideEffects(node, scope);\n\t} else if (node instanceof Tree.IdentifierNode) {\n\t\treturn false;\n\t} else if (node instanceof Tree.NumberNode) {\n\t\treturn false;\n\t} else {\n\t\tconsole.error(\"unknown node\", node);\n\t\tthrow Error(\"unknown node\");\n\t}\n}\n\nfunction resolveFunction(\n\tnode: Tree.FunctionCallNode,\n\t_scope: Scope,\n): QalcFunction {\n\tif (node instanceof Tree.InfixFunctionCallNode) {\n\t\tconst op = node.fnname;\n\t\tconst fn = operators.infixOperators[op];\n\t\tif (!fn) throw Error(\"function not found: \" + op);\n\t\treturn fn;\n\t} else if (node instanceof Tree.UnaryFunctionCallNode) {\n\t\tconst op = node.fnname;\n\t\tconst fn = operators.unaryOperators[op];\n\t\tif (!fn) throw Error(\"function not found: \" + op);\n\t\treturn fn;\n\t} else throw Error(\"wat\");\n}\n\nexport function evaluate(node: Tree.Node, scope: Scope): EvaluatedNode {\n\tinit();\n\tif (Tree.isEvaluated(node)) return node;\n\tlet evNode = node as EvaluatedNode;\n\tif (node instanceof Tree.NumberNode) {\n\t\tevNode.value = new UnitNumber(node.number);\n\t} else if (node instanceof Tree.IdentifierNode) {\n\t\tevNode.value = scope.getUnit(node.identifier)!.value;\n\t\tif (!evNode.value) throw Error(\"can't resolve \" + node.identifier);\n\t} else if (node instanceof Tree.InfixFunctionCallNode) {\n\t\tconst fn = resolveFunction(node, scope);\n\t\tevNode.value = fn.apply(node, scope);\n\t} else if (node instanceof Tree.UnaryFunctionCallNode) {\n\t\tconst fn = resolveFunction(node, scope);\n\t\tevNode.value = fn.apply(node, scope);\n\t} else throw Error(\"what is \" + node.toDebugString());\n\treturn evNode;\n}\n\nexport function define(unit: EvaluatedNode, scope: Scope): TaggedString {\n\tif (unit instanceof Tree.IdentifierNode)\n\t\tunit = scope.getUnit(unit.value.id!)!;\n\tconst t = TaggedString.t;\n\tconst canonical = scope.getCanonical(unit.value);\n\tconst canonicalText = canonical\n\t\t? canonical == unit.value\n\t\t\t? \"(Canonical form)\"\n\t\t\t: t`Canonical Form: ${canonical.toTaggedString()}`\n\t\t: \"\";\n\tconst aliases = scope.getAliases(unit.value);\n\tconst aliasesText =\n\t\taliases && aliases.length > 0\n\t\t\t? TaggedString.t`Aliases: ${TaggedString.join(\n\t\t\t\t\taliases.map(a => a.value),\n\t\t\t\t\t\", \",\n\t\t\t\t)}`\n\t\t\t: \"\";\n\tconst info = scope.docMap.get(unit.value.id!);\n\tlet infoText: TaggedString = t``;\n\tif (info) {\n\t\tinfoText = t`\n${info.comment ? info.comment : \"\"}\n${\n\t\t\tinfo.headings.length\n\t\t\t\t? \"\\nCategory: \" + info.headings.map(x => `${x}`).join(\"\\n -> \")\n\t\t\t\t: \"\"\n\t\t}\n`;\n\t}\n\tunit = [...aliases, unit].find(\n\t\talternative => alternative.value.id === unit.value.id,\n\t)!;\n\tconst inverse =\n\t\tunit.value instanceof SpecialUnitNumber && unit.value.inverse.fnTree;\n\tlet inverseText = inverse ? t`Inverse:    ${inverse.toTaggedString()}` : \"\";\n\tconst res = t`Definition: ${unit.toTaggedString()}.\n\t\t${inverseText}\n\t\t${canonicalText}\n\n\t\t${aliasesText}\n\n\t\t${infoText}`;\n\tres.flatten();\n\tres.vals = res.vals.map(\n\t\tx => (typeof x === \"string\" ? x.replace(/\\n\\s*/g, \"\\n\") : x),\n\t);\n\treturn res;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/libqalc/evaluator.ts","/** @license React v16.2.0\n * react-dom.production.min.js\n *\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/*\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\n'use strict';var aa=require(\"react\"),l=require(\"fbjs/lib/ExecutionEnvironment\"),B=require(\"object-assign\"),C=require(\"fbjs/lib/emptyFunction\"),ba=require(\"fbjs/lib/EventListener\"),da=require(\"fbjs/lib/getActiveElement\"),ea=require(\"fbjs/lib/shallowEqual\"),fa=require(\"fbjs/lib/containsNode\"),ia=require(\"fbjs/lib/focusNode\"),D=require(\"fbjs/lib/emptyObject\");\nfunction E(a){for(var b=arguments.length-1,c=\"Minified React error #\"+a+\"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant\\x3d\"+a,d=0;d<b;d++)c+=\"\\x26args[]\\x3d\"+encodeURIComponent(arguments[d+1]);b=Error(c+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\");b.name=\"Invariant Violation\";b.framesToPop=1;throw b;}aa?void 0:E(\"227\");\nvar oa={children:!0,dangerouslySetInnerHTML:!0,defaultValue:!0,defaultChecked:!0,innerHTML:!0,suppressContentEditableWarning:!0,suppressHydrationWarning:!0,style:!0};function pa(a,b){return(a&b)===b}\nvar ta={MUST_USE_PROPERTY:1,HAS_BOOLEAN_VALUE:4,HAS_NUMERIC_VALUE:8,HAS_POSITIVE_NUMERIC_VALUE:24,HAS_OVERLOADED_BOOLEAN_VALUE:32,HAS_STRING_BOOLEAN_VALUE:64,injectDOMPropertyConfig:function(a){var b=ta,c=a.Properties||{},d=a.DOMAttributeNamespaces||{},e=a.DOMAttributeNames||{};a=a.DOMMutationMethods||{};for(var f in c){ua.hasOwnProperty(f)?E(\"48\",f):void 0;var g=f.toLowerCase(),h=c[f];g={attributeName:g,attributeNamespace:null,propertyName:f,mutationMethod:null,mustUseProperty:pa(h,b.MUST_USE_PROPERTY),\nhasBooleanValue:pa(h,b.HAS_BOOLEAN_VALUE),hasNumericValue:pa(h,b.HAS_NUMERIC_VALUE),hasPositiveNumericValue:pa(h,b.HAS_POSITIVE_NUMERIC_VALUE),hasOverloadedBooleanValue:pa(h,b.HAS_OVERLOADED_BOOLEAN_VALUE),hasStringBooleanValue:pa(h,b.HAS_STRING_BOOLEAN_VALUE)};1>=g.hasBooleanValue+g.hasNumericValue+g.hasOverloadedBooleanValue?void 0:E(\"50\",f);e.hasOwnProperty(f)&&(g.attributeName=e[f]);d.hasOwnProperty(f)&&(g.attributeNamespace=d[f]);a.hasOwnProperty(f)&&(g.mutationMethod=a[f]);ua[f]=g}}},ua={};\nfunction va(a,b){if(oa.hasOwnProperty(a)||2<a.length&&(\"o\"===a[0]||\"O\"===a[0])&&(\"n\"===a[1]||\"N\"===a[1]))return!1;if(null===b)return!0;switch(typeof b){case \"boolean\":return oa.hasOwnProperty(a)?a=!0:(b=wa(a))?a=b.hasBooleanValue||b.hasStringBooleanValue||b.hasOverloadedBooleanValue:(a=a.toLowerCase().slice(0,5),a=\"data-\"===a||\"aria-\"===a),a;case \"undefined\":case \"number\":case \"string\":case \"object\":return!0;default:return!1}}function wa(a){return ua.hasOwnProperty(a)?ua[a]:null}\nvar xa=ta,ya=xa.MUST_USE_PROPERTY,K=xa.HAS_BOOLEAN_VALUE,za=xa.HAS_NUMERIC_VALUE,Aa=xa.HAS_POSITIVE_NUMERIC_VALUE,Ba=xa.HAS_OVERLOADED_BOOLEAN_VALUE,Ca=xa.HAS_STRING_BOOLEAN_VALUE,Da={Properties:{allowFullScreen:K,async:K,autoFocus:K,autoPlay:K,capture:Ba,checked:ya|K,cols:Aa,contentEditable:Ca,controls:K,\"default\":K,defer:K,disabled:K,download:Ba,draggable:Ca,formNoValidate:K,hidden:K,loop:K,multiple:ya|K,muted:ya|K,noValidate:K,open:K,playsInline:K,readOnly:K,required:K,reversed:K,rows:Aa,rowSpan:za,\nscoped:K,seamless:K,selected:ya|K,size:Aa,start:za,span:Aa,spellCheck:Ca,style:0,tabIndex:0,itemScope:K,acceptCharset:0,className:0,htmlFor:0,httpEquiv:0,value:Ca},DOMAttributeNames:{acceptCharset:\"accept-charset\",className:\"class\",htmlFor:\"for\",httpEquiv:\"http-equiv\"},DOMMutationMethods:{value:function(a,b){if(null==b)return a.removeAttribute(\"value\");\"number\"!==a.type||!1===a.hasAttribute(\"value\")?a.setAttribute(\"value\",\"\"+b):a.validity&&!a.validity.badInput&&a.ownerDocument.activeElement!==a&&\na.setAttribute(\"value\",\"\"+b)}}},Ea=xa.HAS_STRING_BOOLEAN_VALUE,M={xlink:\"http://www.w3.org/1999/xlink\",xml:\"http://www.w3.org/XML/1998/namespace\"},Ga={Properties:{autoReverse:Ea,externalResourcesRequired:Ea,preserveAlpha:Ea},DOMAttributeNames:{autoReverse:\"autoReverse\",externalResourcesRequired:\"externalResourcesRequired\",preserveAlpha:\"preserveAlpha\"},DOMAttributeNamespaces:{xlinkActuate:M.xlink,xlinkArcrole:M.xlink,xlinkHref:M.xlink,xlinkRole:M.xlink,xlinkShow:M.xlink,xlinkTitle:M.xlink,xlinkType:M.xlink,\nxmlBase:M.xml,xmlLang:M.xml,xmlSpace:M.xml}},Ha=/[\\-\\:]([a-z])/g;function Ia(a){return a[1].toUpperCase()}\n\"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode x-height xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type xml:base xmlns:xlink xml:lang xml:space\".split(\" \").forEach(function(a){var b=a.replace(Ha,\nIa);Ga.Properties[b]=0;Ga.DOMAttributeNames[b]=a});xa.injectDOMPropertyConfig(Da);xa.injectDOMPropertyConfig(Ga);\nvar P={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,injection:{injectErrorUtils:function(a){\"function\"!==typeof a.invokeGuardedCallback?E(\"197\"):void 0;Ja=a.invokeGuardedCallback}},invokeGuardedCallback:function(a,b,c,d,e,f,g,h,k){Ja.apply(P,arguments)},invokeGuardedCallbackAndCatchFirstError:function(a,b,c,d,e,f,g,h,k){P.invokeGuardedCallback.apply(this,arguments);if(P.hasCaughtError()){var q=P.clearCaughtError();P._hasRethrowError||(P._hasRethrowError=!0,P._rethrowError=\nq)}},rethrowCaughtError:function(){return Ka.apply(P,arguments)},hasCaughtError:function(){return P._hasCaughtError},clearCaughtError:function(){if(P._hasCaughtError){var a=P._caughtError;P._caughtError=null;P._hasCaughtError=!1;return a}E(\"198\")}};function Ja(a,b,c,d,e,f,g,h,k){P._hasCaughtError=!1;P._caughtError=null;var q=Array.prototype.slice.call(arguments,3);try{b.apply(c,q)}catch(v){P._caughtError=v,P._hasCaughtError=!0}}\nfunction Ka(){if(P._hasRethrowError){var a=P._rethrowError;P._rethrowError=null;P._hasRethrowError=!1;throw a;}}var La=null,Ma={};\nfunction Na(){if(La)for(var a in Ma){var b=Ma[a],c=La.indexOf(a);-1<c?void 0:E(\"96\",a);if(!Oa[c]){b.extractEvents?void 0:E(\"97\",a);Oa[c]=b;c=b.eventTypes;for(var d in c){var e=void 0;var f=c[d],g=b,h=d;Pa.hasOwnProperty(h)?E(\"99\",h):void 0;Pa[h]=f;var k=f.phasedRegistrationNames;if(k){for(e in k)k.hasOwnProperty(e)&&Qa(k[e],g,h);e=!0}else f.registrationName?(Qa(f.registrationName,g,h),e=!0):e=!1;e?void 0:E(\"98\",d,a)}}}}\nfunction Qa(a,b,c){Ra[a]?E(\"100\",a):void 0;Ra[a]=b;Sa[a]=b.eventTypes[c].dependencies}var Oa=[],Pa={},Ra={},Sa={};function Ta(a){La?E(\"101\"):void 0;La=Array.prototype.slice.call(a);Na()}function Ua(a){var b=!1,c;for(c in a)if(a.hasOwnProperty(c)){var d=a[c];Ma.hasOwnProperty(c)&&Ma[c]===d||(Ma[c]?E(\"102\",c):void 0,Ma[c]=d,b=!0)}b&&Na()}\nvar Va=Object.freeze({plugins:Oa,eventNameDispatchConfigs:Pa,registrationNameModules:Ra,registrationNameDependencies:Sa,possibleRegistrationNames:null,injectEventPluginOrder:Ta,injectEventPluginsByName:Ua}),Wa=null,Xa=null,Ya=null;function Za(a,b,c,d){b=a.type||\"unknown-event\";a.currentTarget=Ya(d);P.invokeGuardedCallbackAndCatchFirstError(b,c,void 0,a);a.currentTarget=null}\nfunction $a(a,b){null==b?E(\"30\"):void 0;if(null==a)return b;if(Array.isArray(a)){if(Array.isArray(b))return a.push.apply(a,b),a;a.push(b);return a}return Array.isArray(b)?[a].concat(b):[a,b]}function ab(a,b,c){Array.isArray(a)?a.forEach(b,c):a&&b.call(c,a)}var bb=null;\nfunction cb(a,b){if(a){var c=a._dispatchListeners,d=a._dispatchInstances;if(Array.isArray(c))for(var e=0;e<c.length&&!a.isPropagationStopped();e++)Za(a,b,c[e],d[e]);else c&&Za(a,b,c,d);a._dispatchListeners=null;a._dispatchInstances=null;a.isPersistent()||a.constructor.release(a)}}function db(a){return cb(a,!0)}function gb(a){return cb(a,!1)}var hb={injectEventPluginOrder:Ta,injectEventPluginsByName:Ua};\nfunction ib(a,b){var c=a.stateNode;if(!c)return null;var d=Wa(c);if(!d)return null;c=d[b];a:switch(b){case \"onClick\":case \"onClickCapture\":case \"onDoubleClick\":case \"onDoubleClickCapture\":case \"onMouseDown\":case \"onMouseDownCapture\":case \"onMouseMove\":case \"onMouseMoveCapture\":case \"onMouseUp\":case \"onMouseUpCapture\":(d=!d.disabled)||(a=a.type,d=!(\"button\"===a||\"input\"===a||\"select\"===a||\"textarea\"===a));a=!d;break a;default:a=!1}if(a)return null;c&&\"function\"!==typeof c?E(\"231\",b,typeof c):void 0;\nreturn c}function jb(a,b,c,d){for(var e,f=0;f<Oa.length;f++){var g=Oa[f];g&&(g=g.extractEvents(a,b,c,d))&&(e=$a(e,g))}return e}function kb(a){a&&(bb=$a(bb,a))}function lb(a){var b=bb;bb=null;b&&(a?ab(b,db):ab(b,gb),bb?E(\"95\"):void 0,P.rethrowCaughtError())}var mb=Object.freeze({injection:hb,getListener:ib,extractEvents:jb,enqueueEvents:kb,processEventQueue:lb}),nb=Math.random().toString(36).slice(2),Q=\"__reactInternalInstance$\"+nb,ob=\"__reactEventHandlers$\"+nb;\nfunction pb(a){if(a[Q])return a[Q];for(var b=[];!a[Q];)if(b.push(a),a.parentNode)a=a.parentNode;else return null;var c=void 0,d=a[Q];if(5===d.tag||6===d.tag)return d;for(;a&&(d=a[Q]);a=b.pop())c=d;return c}function qb(a){if(5===a.tag||6===a.tag)return a.stateNode;E(\"33\")}function rb(a){return a[ob]||null}\nvar sb=Object.freeze({precacheFiberNode:function(a,b){b[Q]=a},getClosestInstanceFromNode:pb,getInstanceFromNode:function(a){a=a[Q];return!a||5!==a.tag&&6!==a.tag?null:a},getNodeFromInstance:qb,getFiberCurrentPropsFromNode:rb,updateFiberProps:function(a,b){a[ob]=b}});function tb(a){do a=a[\"return\"];while(a&&5!==a.tag);return a?a:null}function ub(a,b,c){for(var d=[];a;)d.push(a),a=tb(a);for(a=d.length;0<a--;)b(d[a],\"captured\",c);for(a=0;a<d.length;a++)b(d[a],\"bubbled\",c)}\nfunction vb(a,b,c){if(b=ib(a,c.dispatchConfig.phasedRegistrationNames[b]))c._dispatchListeners=$a(c._dispatchListeners,b),c._dispatchInstances=$a(c._dispatchInstances,a)}function wb(a){a&&a.dispatchConfig.phasedRegistrationNames&&ub(a._targetInst,vb,a)}function xb(a){if(a&&a.dispatchConfig.phasedRegistrationNames){var b=a._targetInst;b=b?tb(b):null;ub(b,vb,a)}}\nfunction yb(a,b,c){a&&c&&c.dispatchConfig.registrationName&&(b=ib(a,c.dispatchConfig.registrationName))&&(c._dispatchListeners=$a(c._dispatchListeners,b),c._dispatchInstances=$a(c._dispatchInstances,a))}function zb(a){a&&a.dispatchConfig.registrationName&&yb(a._targetInst,null,a)}function Ab(a){ab(a,wb)}\nfunction Bb(a,b,c,d){if(c&&d)a:{var e=c;for(var f=d,g=0,h=e;h;h=tb(h))g++;h=0;for(var k=f;k;k=tb(k))h++;for(;0<g-h;)e=tb(e),g--;for(;0<h-g;)f=tb(f),h--;for(;g--;){if(e===f||e===f.alternate)break a;e=tb(e);f=tb(f)}e=null}else e=null;f=e;for(e=[];c&&c!==f;){g=c.alternate;if(null!==g&&g===f)break;e.push(c);c=tb(c)}for(c=[];d&&d!==f;){g=d.alternate;if(null!==g&&g===f)break;c.push(d);d=tb(d)}for(d=0;d<e.length;d++)yb(e[d],\"bubbled\",a);for(a=c.length;0<a--;)yb(c[a],\"captured\",b)}\nvar Cb=Object.freeze({accumulateTwoPhaseDispatches:Ab,accumulateTwoPhaseDispatchesSkipTarget:function(a){ab(a,xb)},accumulateEnterLeaveDispatches:Bb,accumulateDirectDispatches:function(a){ab(a,zb)}}),Db=null;function Eb(){!Db&&l.canUseDOM&&(Db=\"textContent\"in document.documentElement?\"textContent\":\"innerText\");return Db}var S={_root:null,_startText:null,_fallbackText:null};\nfunction Fb(){if(S._fallbackText)return S._fallbackText;var a,b=S._startText,c=b.length,d,e=Gb(),f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);S._fallbackText=e.slice(a,1<d?1-d:void 0);return S._fallbackText}function Gb(){return\"value\"in S._root?S._root.value:S._root[Eb()]}\nvar Hb=\"dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances\".split(\" \"),Ib={type:null,target:null,currentTarget:C.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};\nfunction T(a,b,c,d){this.dispatchConfig=a;this._targetInst=b;this.nativeEvent=c;a=this.constructor.Interface;for(var e in a)a.hasOwnProperty(e)&&((b=a[e])?this[e]=b(c):\"target\"===e?this.target=d:this[e]=c[e]);this.isDefaultPrevented=(null!=c.defaultPrevented?c.defaultPrevented:!1===c.returnValue)?C.thatReturnsTrue:C.thatReturnsFalse;this.isPropagationStopped=C.thatReturnsFalse;return this}\nB(T.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():\"unknown\"!==typeof a.returnValue&&(a.returnValue=!1),this.isDefaultPrevented=C.thatReturnsTrue)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():\"unknown\"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=C.thatReturnsTrue)},persist:function(){this.isPersistent=C.thatReturnsTrue},isPersistent:C.thatReturnsFalse,\ndestructor:function(){var a=this.constructor.Interface,b;for(b in a)this[b]=null;for(a=0;a<Hb.length;a++)this[Hb[a]]=null}});T.Interface=Ib;T.augmentClass=function(a,b){function c(){}c.prototype=this.prototype;var d=new c;B(d,a.prototype);a.prototype=d;a.prototype.constructor=a;a.Interface=B({},this.Interface,b);a.augmentClass=this.augmentClass;Jb(a)};Jb(T);function Kb(a,b,c,d){if(this.eventPool.length){var e=this.eventPool.pop();this.call(e,a,b,c,d);return e}return new this(a,b,c,d)}\nfunction Lb(a){a instanceof this?void 0:E(\"223\");a.destructor();10>this.eventPool.length&&this.eventPool.push(a)}function Jb(a){a.eventPool=[];a.getPooled=Kb;a.release=Lb}function Mb(a,b,c,d){return T.call(this,a,b,c,d)}T.augmentClass(Mb,{data:null});function Nb(a,b,c,d){return T.call(this,a,b,c,d)}T.augmentClass(Nb,{data:null});var Pb=[9,13,27,32],Vb=l.canUseDOM&&\"CompositionEvent\"in window,Wb=null;l.canUseDOM&&\"documentMode\"in document&&(Wb=document.documentMode);var Xb;\nif(Xb=l.canUseDOM&&\"TextEvent\"in window&&!Wb){var Yb=window.opera;Xb=!(\"object\"===typeof Yb&&\"function\"===typeof Yb.version&&12>=parseInt(Yb.version(),10))}\nvar Zb=Xb,$b=l.canUseDOM&&(!Vb||Wb&&8<Wb&&11>=Wb),ac=String.fromCharCode(32),bc={beforeInput:{phasedRegistrationNames:{bubbled:\"onBeforeInput\",captured:\"onBeforeInputCapture\"},dependencies:[\"topCompositionEnd\",\"topKeyPress\",\"topTextInput\",\"topPaste\"]},compositionEnd:{phasedRegistrationNames:{bubbled:\"onCompositionEnd\",captured:\"onCompositionEndCapture\"},dependencies:\"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown\".split(\" \")},compositionStart:{phasedRegistrationNames:{bubbled:\"onCompositionStart\",\ncaptured:\"onCompositionStartCapture\"},dependencies:\"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown\".split(\" \")},compositionUpdate:{phasedRegistrationNames:{bubbled:\"onCompositionUpdate\",captured:\"onCompositionUpdateCapture\"},dependencies:\"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown\".split(\" \")}},cc=!1;\nfunction dc(a,b){switch(a){case \"topKeyUp\":return-1!==Pb.indexOf(b.keyCode);case \"topKeyDown\":return 229!==b.keyCode;case \"topKeyPress\":case \"topMouseDown\":case \"topBlur\":return!0;default:return!1}}function ec(a){a=a.detail;return\"object\"===typeof a&&\"data\"in a?a.data:null}var fc=!1;function gc(a,b){switch(a){case \"topCompositionEnd\":return ec(b);case \"topKeyPress\":if(32!==b.which)return null;cc=!0;return ac;case \"topTextInput\":return a=b.data,a===ac&&cc?null:a;default:return null}}\nfunction hc(a,b){if(fc)return\"topCompositionEnd\"===a||!Vb&&dc(a,b)?(a=Fb(),S._root=null,S._startText=null,S._fallbackText=null,fc=!1,a):null;switch(a){case \"topPaste\":return null;case \"topKeyPress\":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case \"topCompositionEnd\":return $b?null:b.data;default:return null}}\nvar ic={eventTypes:bc,extractEvents:function(a,b,c,d){var e;if(Vb)b:{switch(a){case \"topCompositionStart\":var f=bc.compositionStart;break b;case \"topCompositionEnd\":f=bc.compositionEnd;break b;case \"topCompositionUpdate\":f=bc.compositionUpdate;break b}f=void 0}else fc?dc(a,c)&&(f=bc.compositionEnd):\"topKeyDown\"===a&&229===c.keyCode&&(f=bc.compositionStart);f?($b&&(fc||f!==bc.compositionStart?f===bc.compositionEnd&&fc&&(e=Fb()):(S._root=d,S._startText=Gb(),fc=!0)),f=Mb.getPooled(f,b,c,d),e?f.data=\ne:(e=ec(c),null!==e&&(f.data=e)),Ab(f),e=f):e=null;(a=Zb?gc(a,c):hc(a,c))?(b=Nb.getPooled(bc.beforeInput,b,c,d),b.data=a,Ab(b)):b=null;return[e,b]}},jc=null,kc=null,lc=null;function mc(a){if(a=Xa(a)){jc&&\"function\"===typeof jc.restoreControlledState?void 0:E(\"194\");var b=Wa(a.stateNode);jc.restoreControlledState(a.stateNode,a.type,b)}}var nc={injectFiberControlledHostComponent:function(a){jc=a}};function oc(a){kc?lc?lc.push(a):lc=[a]:kc=a}\nfunction pc(){if(kc){var a=kc,b=lc;lc=kc=null;mc(a);if(b)for(a=0;a<b.length;a++)mc(b[a])}}var qc=Object.freeze({injection:nc,enqueueStateRestore:oc,restoreStateIfNeeded:pc});function rc(a,b){return a(b)}var sc=!1;function tc(a,b){if(sc)return rc(a,b);sc=!0;try{return rc(a,b)}finally{sc=!1,pc()}}var uc={color:!0,date:!0,datetime:!0,\"datetime-local\":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};\nfunction vc(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return\"input\"===b?!!uc[a.type]:\"textarea\"===b?!0:!1}function wc(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}var xc;l.canUseDOM&&(xc=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature(\"\",\"\"));\nfunction yc(a,b){if(!l.canUseDOM||b&&!(\"addEventListener\"in document))return!1;b=\"on\"+a;var c=b in document;c||(c=document.createElement(\"div\"),c.setAttribute(b,\"return;\"),c=\"function\"===typeof c[b]);!c&&xc&&\"wheel\"===a&&(c=document.implementation.hasFeature(\"Events.wheel\",\"3.0\"));return c}function zc(a){var b=a.type;return(a=a.nodeName)&&\"input\"===a.toLowerCase()&&(\"checkbox\"===b||\"radio\"===b)}\nfunction Ac(a){var b=zc(a)?\"checked\":\"value\",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=\"\"+a[b];if(!a.hasOwnProperty(b)&&\"function\"===typeof c.get&&\"function\"===typeof c.set)return Object.defineProperty(a,b,{enumerable:c.enumerable,configurable:!0,get:function(){return c.get.call(this)},set:function(a){d=\"\"+a;c.set.call(this,a)}}),{getValue:function(){return d},setValue:function(a){d=\"\"+a},stopTracking:function(){a._valueTracker=null;delete a[b]}}}\nfunction Bc(a){a._valueTracker||(a._valueTracker=Ac(a))}function Cc(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d=\"\";a&&(d=zc(a)?a.checked?\"true\":\"false\":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}var Dc={change:{phasedRegistrationNames:{bubbled:\"onChange\",captured:\"onChangeCapture\"},dependencies:\"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange\".split(\" \")}};\nfunction Ec(a,b,c){a=T.getPooled(Dc.change,a,b,c);a.type=\"change\";oc(c);Ab(a);return a}var Fc=null,Gc=null;function Hc(a){kb(a);lb(!1)}function Ic(a){var b=qb(a);if(Cc(b))return a}function Jc(a,b){if(\"topChange\"===a)return b}var Kc=!1;l.canUseDOM&&(Kc=yc(\"input\")&&(!document.documentMode||9<document.documentMode));function Lc(){Fc&&(Fc.detachEvent(\"onpropertychange\",Mc),Gc=Fc=null)}function Mc(a){\"value\"===a.propertyName&&Ic(Gc)&&(a=Ec(Gc,a,wc(a)),tc(Hc,a))}\nfunction Nc(a,b,c){\"topFocus\"===a?(Lc(),Fc=b,Gc=c,Fc.attachEvent(\"onpropertychange\",Mc)):\"topBlur\"===a&&Lc()}function Oc(a){if(\"topSelectionChange\"===a||\"topKeyUp\"===a||\"topKeyDown\"===a)return Ic(Gc)}function Pc(a,b){if(\"topClick\"===a)return Ic(b)}function $c(a,b){if(\"topInput\"===a||\"topChange\"===a)return Ic(b)}\nvar ad={eventTypes:Dc,_isInputEventSupported:Kc,extractEvents:function(a,b,c,d){var e=b?qb(b):window,f=e.nodeName&&e.nodeName.toLowerCase();if(\"select\"===f||\"input\"===f&&\"file\"===e.type)var g=Jc;else if(vc(e))if(Kc)g=$c;else{g=Oc;var h=Nc}else f=e.nodeName,!f||\"input\"!==f.toLowerCase()||\"checkbox\"!==e.type&&\"radio\"!==e.type||(g=Pc);if(g&&(g=g(a,b)))return Ec(g,c,d);h&&h(a,e,b);\"topBlur\"===a&&null!=b&&(a=b._wrapperState||e._wrapperState)&&a.controlled&&\"number\"===e.type&&(a=\"\"+e.value,e.getAttribute(\"value\")!==\na&&e.setAttribute(\"value\",a))}};function bd(a,b,c,d){return T.call(this,a,b,c,d)}T.augmentClass(bd,{view:null,detail:null});var cd={Alt:\"altKey\",Control:\"ctrlKey\",Meta:\"metaKey\",Shift:\"shiftKey\"};function dd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=cd[a])?!!b[a]:!1}function ed(){return dd}function fd(a,b,c,d){return T.call(this,a,b,c,d)}\nbd.augmentClass(fd,{screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:ed,button:null,buttons:null,relatedTarget:function(a){return a.relatedTarget||(a.fromElement===a.srcElement?a.toElement:a.fromElement)}});\nvar gd={mouseEnter:{registrationName:\"onMouseEnter\",dependencies:[\"topMouseOut\",\"topMouseOver\"]},mouseLeave:{registrationName:\"onMouseLeave\",dependencies:[\"topMouseOut\",\"topMouseOver\"]}},hd={eventTypes:gd,extractEvents:function(a,b,c,d){if(\"topMouseOver\"===a&&(c.relatedTarget||c.fromElement)||\"topMouseOut\"!==a&&\"topMouseOver\"!==a)return null;var e=d.window===d?d:(e=d.ownerDocument)?e.defaultView||e.parentWindow:window;\"topMouseOut\"===a?(a=b,b=(b=c.relatedTarget||c.toElement)?pb(b):null):a=null;if(a===\nb)return null;var f=null==a?e:qb(a);e=null==b?e:qb(b);var g=fd.getPooled(gd.mouseLeave,a,c,d);g.type=\"mouseleave\";g.target=f;g.relatedTarget=e;c=fd.getPooled(gd.mouseEnter,b,c,d);c.type=\"mouseenter\";c.target=e;c.relatedTarget=f;Bb(g,c,a,b);return[g,c]}},id=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner;function jd(a){a=a.type;return\"string\"===typeof a?a:\"function\"===typeof a?a.displayName||a.name:null}\nfunction kd(a){var b=a;if(a.alternate)for(;b[\"return\"];)b=b[\"return\"];else{if(0!==(b.effectTag&2))return 1;for(;b[\"return\"];)if(b=b[\"return\"],0!==(b.effectTag&2))return 1}return 3===b.tag?2:3}function ld(a){return(a=a._reactInternalFiber)?2===kd(a):!1}function md(a){2!==kd(a)?E(\"188\"):void 0}\nfunction nd(a){var b=a.alternate;if(!b)return b=kd(a),3===b?E(\"188\"):void 0,1===b?null:a;for(var c=a,d=b;;){var e=c[\"return\"],f=e?e.alternate:null;if(!e||!f)break;if(e.child===f.child){for(var g=e.child;g;){if(g===c)return md(e),a;if(g===d)return md(e),b;g=g.sibling}E(\"188\")}if(c[\"return\"]!==d[\"return\"])c=e,d=f;else{g=!1;for(var h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}g?\nvoid 0:E(\"189\")}}c.alternate!==d?E(\"190\"):void 0}3!==c.tag?E(\"188\"):void 0;return c.stateNode.current===c?a:b}function od(a){a=nd(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child[\"return\"]=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b[\"return\"]||b[\"return\"]===a)return null;b=b[\"return\"]}b.sibling[\"return\"]=b[\"return\"];b=b.sibling}}return null}\nfunction pd(a){a=nd(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child&&4!==b.tag)b.child[\"return\"]=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b[\"return\"]||b[\"return\"]===a)return null;b=b[\"return\"]}b.sibling[\"return\"]=b[\"return\"];b=b.sibling}}return null}var qd=[];\nfunction rd(a){var b=a.targetInst;do{if(!b){a.ancestors.push(b);break}var c;for(c=b;c[\"return\"];)c=c[\"return\"];c=3!==c.tag?null:c.stateNode.containerInfo;if(!c)break;a.ancestors.push(b);b=pb(c)}while(b);for(c=0;c<a.ancestors.length;c++)b=a.ancestors[c],sd(a.topLevelType,b,a.nativeEvent,wc(a.nativeEvent))}var td=!0,sd=void 0;function ud(a){td=!!a}function U(a,b,c){return c?ba.listen(c,b,vd.bind(null,a)):null}function wd(a,b,c){return c?ba.capture(c,b,vd.bind(null,a)):null}\nfunction vd(a,b){if(td){var c=wc(b);c=pb(c);null===c||\"number\"!==typeof c.tag||2===kd(c)||(c=null);if(qd.length){var d=qd.pop();d.topLevelType=a;d.nativeEvent=b;d.targetInst=c;a=d}else a={topLevelType:a,nativeEvent:b,targetInst:c,ancestors:[]};try{tc(rd,a)}finally{a.topLevelType=null,a.nativeEvent=null,a.targetInst=null,a.ancestors.length=0,10>qd.length&&qd.push(a)}}}\nvar xd=Object.freeze({get _enabled(){return td},get _handleTopLevel(){return sd},setHandleTopLevel:function(a){sd=a},setEnabled:ud,isEnabled:function(){return td},trapBubbledEvent:U,trapCapturedEvent:wd,dispatchEvent:vd});function yd(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c[\"Webkit\"+a]=\"webkit\"+b;c[\"Moz\"+a]=\"moz\"+b;c[\"ms\"+a]=\"MS\"+b;c[\"O\"+a]=\"o\"+b.toLowerCase();return c}\nvar zd={animationend:yd(\"Animation\",\"AnimationEnd\"),animationiteration:yd(\"Animation\",\"AnimationIteration\"),animationstart:yd(\"Animation\",\"AnimationStart\"),transitionend:yd(\"Transition\",\"TransitionEnd\")},Ad={},Bd={};l.canUseDOM&&(Bd=document.createElement(\"div\").style,\"AnimationEvent\"in window||(delete zd.animationend.animation,delete zd.animationiteration.animation,delete zd.animationstart.animation),\"TransitionEvent\"in window||delete zd.transitionend.transition);\nfunction Cd(a){if(Ad[a])return Ad[a];if(!zd[a])return a;var b=zd[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Bd)return Ad[a]=b[c];return\"\"}\nvar Dd={topAbort:\"abort\",topAnimationEnd:Cd(\"animationend\")||\"animationend\",topAnimationIteration:Cd(\"animationiteration\")||\"animationiteration\",topAnimationStart:Cd(\"animationstart\")||\"animationstart\",topBlur:\"blur\",topCancel:\"cancel\",topCanPlay:\"canplay\",topCanPlayThrough:\"canplaythrough\",topChange:\"change\",topClick:\"click\",topClose:\"close\",topCompositionEnd:\"compositionend\",topCompositionStart:\"compositionstart\",topCompositionUpdate:\"compositionupdate\",topContextMenu:\"contextmenu\",topCopy:\"copy\",\ntopCut:\"cut\",topDoubleClick:\"dblclick\",topDrag:\"drag\",topDragEnd:\"dragend\",topDragEnter:\"dragenter\",topDragExit:\"dragexit\",topDragLeave:\"dragleave\",topDragOver:\"dragover\",topDragStart:\"dragstart\",topDrop:\"drop\",topDurationChange:\"durationchange\",topEmptied:\"emptied\",topEncrypted:\"encrypted\",topEnded:\"ended\",topError:\"error\",topFocus:\"focus\",topInput:\"input\",topKeyDown:\"keydown\",topKeyPress:\"keypress\",topKeyUp:\"keyup\",topLoadedData:\"loadeddata\",topLoad:\"load\",topLoadedMetadata:\"loadedmetadata\",topLoadStart:\"loadstart\",\ntopMouseDown:\"mousedown\",topMouseMove:\"mousemove\",topMouseOut:\"mouseout\",topMouseOver:\"mouseover\",topMouseUp:\"mouseup\",topPaste:\"paste\",topPause:\"pause\",topPlay:\"play\",topPlaying:\"playing\",topProgress:\"progress\",topRateChange:\"ratechange\",topScroll:\"scroll\",topSeeked:\"seeked\",topSeeking:\"seeking\",topSelectionChange:\"selectionchange\",topStalled:\"stalled\",topSuspend:\"suspend\",topTextInput:\"textInput\",topTimeUpdate:\"timeupdate\",topToggle:\"toggle\",topTouchCancel:\"touchcancel\",topTouchEnd:\"touchend\",topTouchMove:\"touchmove\",\ntopTouchStart:\"touchstart\",topTransitionEnd:Cd(\"transitionend\")||\"transitionend\",topVolumeChange:\"volumechange\",topWaiting:\"waiting\",topWheel:\"wheel\"},Ed={},Fd=0,Gd=\"_reactListenersID\"+(\"\"+Math.random()).slice(2);function Hd(a){Object.prototype.hasOwnProperty.call(a,Gd)||(a[Gd]=Fd++,Ed[a[Gd]]={});return Ed[a[Gd]]}function Id(a){for(;a&&a.firstChild;)a=a.firstChild;return a}\nfunction Jd(a,b){var c=Id(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=Id(c)}}function Kd(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&(\"input\"===b&&\"text\"===a.type||\"textarea\"===b||\"true\"===a.contentEditable)}\nvar Ld=l.canUseDOM&&\"documentMode\"in document&&11>=document.documentMode,Md={select:{phasedRegistrationNames:{bubbled:\"onSelect\",captured:\"onSelectCapture\"},dependencies:\"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange\".split(\" \")}},Nd=null,Od=null,Pd=null,Qd=!1;\nfunction Rd(a,b){if(Qd||null==Nd||Nd!==da())return null;var c=Nd;\"selectionStart\"in c&&Kd(c)?c={start:c.selectionStart,end:c.selectionEnd}:window.getSelection?(c=window.getSelection(),c={anchorNode:c.anchorNode,anchorOffset:c.anchorOffset,focusNode:c.focusNode,focusOffset:c.focusOffset}):c=void 0;return Pd&&ea(Pd,c)?null:(Pd=c,a=T.getPooled(Md.select,Od,a,b),a.type=\"select\",a.target=Nd,Ab(a),a)}\nvar Sd={eventTypes:Md,extractEvents:function(a,b,c,d){var e=d.window===d?d.document:9===d.nodeType?d:d.ownerDocument,f;if(!(f=!e)){a:{e=Hd(e);f=Sa.onSelect;for(var g=0;g<f.length;g++){var h=f[g];if(!e.hasOwnProperty(h)||!e[h]){e=!1;break a}}e=!0}f=!e}if(f)return null;e=b?qb(b):window;switch(a){case \"topFocus\":if(vc(e)||\"true\"===e.contentEditable)Nd=e,Od=b,Pd=null;break;case \"topBlur\":Pd=Od=Nd=null;break;case \"topMouseDown\":Qd=!0;break;case \"topContextMenu\":case \"topMouseUp\":return Qd=!1,Rd(c,d);case \"topSelectionChange\":if(Ld)break;\ncase \"topKeyDown\":case \"topKeyUp\":return Rd(c,d)}return null}};function Td(a,b,c,d){return T.call(this,a,b,c,d)}T.augmentClass(Td,{animationName:null,elapsedTime:null,pseudoElement:null});function Ud(a,b,c,d){return T.call(this,a,b,c,d)}T.augmentClass(Ud,{clipboardData:function(a){return\"clipboardData\"in a?a.clipboardData:window.clipboardData}});function Vd(a,b,c,d){return T.call(this,a,b,c,d)}bd.augmentClass(Vd,{relatedTarget:null});\nfunction Wd(a){var b=a.keyCode;\"charCode\"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;return 32<=a||13===a?a:0}\nvar Xd={Esc:\"Escape\",Spacebar:\" \",Left:\"ArrowLeft\",Up:\"ArrowUp\",Right:\"ArrowRight\",Down:\"ArrowDown\",Del:\"Delete\",Win:\"OS\",Menu:\"ContextMenu\",Apps:\"ContextMenu\",Scroll:\"ScrollLock\",MozPrintableKey:\"Unidentified\"},Yd={8:\"Backspace\",9:\"Tab\",12:\"Clear\",13:\"Enter\",16:\"Shift\",17:\"Control\",18:\"Alt\",19:\"Pause\",20:\"CapsLock\",27:\"Escape\",32:\" \",33:\"PageUp\",34:\"PageDown\",35:\"End\",36:\"Home\",37:\"ArrowLeft\",38:\"ArrowUp\",39:\"ArrowRight\",40:\"ArrowDown\",45:\"Insert\",46:\"Delete\",112:\"F1\",113:\"F2\",114:\"F3\",115:\"F4\",\n116:\"F5\",117:\"F6\",118:\"F7\",119:\"F8\",120:\"F9\",121:\"F10\",122:\"F11\",123:\"F12\",144:\"NumLock\",145:\"ScrollLock\",224:\"Meta\"};function Zd(a,b,c,d){return T.call(this,a,b,c,d)}\nbd.augmentClass(Zd,{key:function(a){if(a.key){var b=Xd[a.key]||a.key;if(\"Unidentified\"!==b)return b}return\"keypress\"===a.type?(a=Wd(a),13===a?\"Enter\":String.fromCharCode(a)):\"keydown\"===a.type||\"keyup\"===a.type?Yd[a.keyCode]||\"Unidentified\":\"\"},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:ed,charCode:function(a){return\"keypress\"===a.type?Wd(a):0},keyCode:function(a){return\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0},which:function(a){return\"keypress\"===\na.type?Wd(a):\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0}});function $d(a,b,c,d){return T.call(this,a,b,c,d)}fd.augmentClass($d,{dataTransfer:null});function ae(a,b,c,d){return T.call(this,a,b,c,d)}bd.augmentClass(ae,{touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:ed});function be(a,b,c,d){return T.call(this,a,b,c,d)}T.augmentClass(be,{propertyName:null,elapsedTime:null,pseudoElement:null});\nfunction ce(a,b,c,d){return T.call(this,a,b,c,d)}fd.augmentClass(ce,{deltaX:function(a){return\"deltaX\"in a?a.deltaX:\"wheelDeltaX\"in a?-a.wheelDeltaX:0},deltaY:function(a){return\"deltaY\"in a?a.deltaY:\"wheelDeltaY\"in a?-a.wheelDeltaY:\"wheelDelta\"in a?-a.wheelDelta:0},deltaZ:null,deltaMode:null});var de={},ee={};\n\"abort animationEnd animationIteration animationStart blur cancel canPlay canPlayThrough click close contextMenu copy cut doubleClick drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error focus input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing progress rateChange reset scroll seeked seeking stalled submit suspend timeUpdate toggle touchCancel touchEnd touchMove touchStart transitionEnd volumeChange waiting wheel\".split(\" \").forEach(function(a){var b=a[0].toUpperCase()+\na.slice(1),c=\"on\"+b;b=\"top\"+b;c={phasedRegistrationNames:{bubbled:c,captured:c+\"Capture\"},dependencies:[b]};de[a]=c;ee[b]=c});\nvar fe={eventTypes:de,extractEvents:function(a,b,c,d){var e=ee[a];if(!e)return null;switch(a){case \"topKeyPress\":if(0===Wd(c))return null;case \"topKeyDown\":case \"topKeyUp\":a=Zd;break;case \"topBlur\":case \"topFocus\":a=Vd;break;case \"topClick\":if(2===c.button)return null;case \"topDoubleClick\":case \"topMouseDown\":case \"topMouseMove\":case \"topMouseUp\":case \"topMouseOut\":case \"topMouseOver\":case \"topContextMenu\":a=fd;break;case \"topDrag\":case \"topDragEnd\":case \"topDragEnter\":case \"topDragExit\":case \"topDragLeave\":case \"topDragOver\":case \"topDragStart\":case \"topDrop\":a=\n$d;break;case \"topTouchCancel\":case \"topTouchEnd\":case \"topTouchMove\":case \"topTouchStart\":a=ae;break;case \"topAnimationEnd\":case \"topAnimationIteration\":case \"topAnimationStart\":a=Td;break;case \"topTransitionEnd\":a=be;break;case \"topScroll\":a=bd;break;case \"topWheel\":a=ce;break;case \"topCopy\":case \"topCut\":case \"topPaste\":a=Ud;break;default:a=T}b=a.getPooled(e,b,c,d);Ab(b);return b}};sd=function(a,b,c,d){a=jb(a,b,c,d);kb(a);lb(!1)};hb.injectEventPluginOrder(\"ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin\".split(\" \"));\nWa=sb.getFiberCurrentPropsFromNode;Xa=sb.getInstanceFromNode;Ya=sb.getNodeFromInstance;hb.injectEventPluginsByName({SimpleEventPlugin:fe,EnterLeaveEventPlugin:hd,ChangeEventPlugin:ad,SelectEventPlugin:Sd,BeforeInputEventPlugin:ic});var ge=[],he=-1;function V(a){0>he||(a.current=ge[he],ge[he]=null,he--)}function W(a,b){he++;ge[he]=a.current;a.current=b}new Set;var ie={current:D},X={current:!1},je=D;function ke(a){return le(a)?je:ie.current}\nfunction me(a,b){var c=a.type.contextTypes;if(!c)return D;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function le(a){return 2===a.tag&&null!=a.type.childContextTypes}function ne(a){le(a)&&(V(X,a),V(ie,a))}\nfunction oe(a,b,c){null!=ie.cursor?E(\"168\"):void 0;W(ie,b,a);W(X,c,a)}function pe(a,b){var c=a.stateNode,d=a.type.childContextTypes;if(\"function\"!==typeof c.getChildContext)return b;c=c.getChildContext();for(var e in c)e in d?void 0:E(\"108\",jd(a)||\"Unknown\",e);return B({},b,c)}function qe(a){if(!le(a))return!1;var b=a.stateNode;b=b&&b.__reactInternalMemoizedMergedChildContext||D;je=ie.current;W(ie,b,a);W(X,X.current,a);return!0}\nfunction re(a,b){var c=a.stateNode;c?void 0:E(\"169\");if(b){var d=pe(a,je);c.__reactInternalMemoizedMergedChildContext=d;V(X,a);V(ie,a);W(ie,d,a)}else V(X,a);W(X,b,a)}\nfunction Y(a,b,c){this.tag=a;this.key=b;this.stateNode=this.type=null;this.sibling=this.child=this[\"return\"]=null;this.index=0;this.memoizedState=this.updateQueue=this.memoizedProps=this.pendingProps=this.ref=null;this.internalContextTag=c;this.effectTag=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.expirationTime=0;this.alternate=null}\nfunction se(a,b,c){var d=a.alternate;null===d?(d=new Y(a.tag,a.key,a.internalContextTag),d.type=a.type,d.stateNode=a.stateNode,d.alternate=a,a.alternate=d):(d.effectTag=0,d.nextEffect=null,d.firstEffect=null,d.lastEffect=null);d.expirationTime=c;d.pendingProps=b;d.child=a.child;d.memoizedProps=a.memoizedProps;d.memoizedState=a.memoizedState;d.updateQueue=a.updateQueue;d.sibling=a.sibling;d.index=a.index;d.ref=a.ref;return d}\nfunction te(a,b,c){var d=void 0,e=a.type,f=a.key;\"function\"===typeof e?(d=e.prototype&&e.prototype.isReactComponent?new Y(2,f,b):new Y(0,f,b),d.type=e,d.pendingProps=a.props):\"string\"===typeof e?(d=new Y(5,f,b),d.type=e,d.pendingProps=a.props):\"object\"===typeof e&&null!==e&&\"number\"===typeof e.tag?(d=e,d.pendingProps=a.props):E(\"130\",null==e?e:typeof e,\"\");d.expirationTime=c;return d}function ue(a,b,c,d){b=new Y(10,d,b);b.pendingProps=a;b.expirationTime=c;return b}\nfunction ve(a,b,c){b=new Y(6,null,b);b.pendingProps=a;b.expirationTime=c;return b}function we(a,b,c){b=new Y(7,a.key,b);b.type=a.handler;b.pendingProps=a;b.expirationTime=c;return b}function xe(a,b,c){a=new Y(9,null,b);a.expirationTime=c;return a}function ye(a,b,c){b=new Y(4,a.key,b);b.pendingProps=a.children||[];b.expirationTime=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}var ze=null,Ae=null;\nfunction Be(a){return function(b){try{return a(b)}catch(c){}}}function Ce(a){if(\"undefined\"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var b=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(b.isDisabled||!b.supportsFiber)return!0;try{var c=b.inject(a);ze=Be(function(a){return b.onCommitFiberRoot(c,a)});Ae=Be(function(a){return b.onCommitFiberUnmount(c,a)})}catch(d){}return!0}function De(a){\"function\"===typeof ze&&ze(a)}function Ee(a){\"function\"===typeof Ae&&Ae(a)}\nfunction Fe(a){return{baseState:a,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1}}function Ge(a,b){null===a.last?a.first=a.last=b:(a.last.next=b,a.last=b);if(0===a.expirationTime||a.expirationTime>b.expirationTime)a.expirationTime=b.expirationTime}\nfunction He(a,b){var c=a.alternate,d=a.updateQueue;null===d&&(d=a.updateQueue=Fe(null));null!==c?(a=c.updateQueue,null===a&&(a=c.updateQueue=Fe(null))):a=null;a=a!==d?a:null;null===a?Ge(d,b):null===d.last||null===a.last?(Ge(d,b),Ge(a,b)):(Ge(d,b),a.last=b)}function Ie(a,b,c,d){a=a.partialState;return\"function\"===typeof a?a.call(b,c,d):a}\nfunction Je(a,b,c,d,e,f){null!==a&&a.updateQueue===c&&(c=b.updateQueue={baseState:c.baseState,expirationTime:c.expirationTime,first:c.first,last:c.last,isInitialized:c.isInitialized,callbackList:null,hasForceUpdate:!1});c.expirationTime=0;c.isInitialized?a=c.baseState:(a=c.baseState=b.memoizedState,c.isInitialized=!0);for(var g=!0,h=c.first,k=!1;null!==h;){var q=h.expirationTime;if(q>f){var v=c.expirationTime;if(0===v||v>q)c.expirationTime=q;k||(k=!0,c.baseState=a)}else{k||(c.first=h.next,null===\nc.first&&(c.last=null));if(h.isReplace)a=Ie(h,d,a,e),g=!0;else if(q=Ie(h,d,a,e))a=g?B({},a,q):B(a,q),g=!1;h.isForced&&(c.hasForceUpdate=!0);null!==h.callback&&(q=c.callbackList,null===q&&(q=c.callbackList=[]),q.push(h))}h=h.next}null!==c.callbackList?b.effectTag|=32:null!==c.first||c.hasForceUpdate||(b.updateQueue=null);k||(c.baseState=a);return a}\nfunction Ke(a,b){var c=a.callbackList;if(null!==c)for(a.callbackList=null,a=0;a<c.length;a++){var d=c[a],e=d.callback;d.callback=null;\"function\"!==typeof e?E(\"191\",e):void 0;e.call(b)}}\nfunction Le(a,b,c,d){function e(a,b){b.updater=f;a.stateNode=b;b._reactInternalFiber=a}var f={isMounted:ld,enqueueSetState:function(c,d,e){c=c._reactInternalFiber;e=void 0===e?null:e;var g=b(c);He(c,{expirationTime:g,partialState:d,callback:e,isReplace:!1,isForced:!1,nextCallback:null,next:null});a(c,g)},enqueueReplaceState:function(c,d,e){c=c._reactInternalFiber;e=void 0===e?null:e;var g=b(c);He(c,{expirationTime:g,partialState:d,callback:e,isReplace:!0,isForced:!1,nextCallback:null,next:null});\na(c,g)},enqueueForceUpdate:function(c,d){c=c._reactInternalFiber;d=void 0===d?null:d;var e=b(c);He(c,{expirationTime:e,partialState:null,callback:d,isReplace:!1,isForced:!0,nextCallback:null,next:null});a(c,e)}};return{adoptClassInstance:e,constructClassInstance:function(a,b){var c=a.type,d=ke(a),f=2===a.tag&&null!=a.type.contextTypes,g=f?me(a,d):D;b=new c(b,g);e(a,b);f&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=d,a.__reactInternalMemoizedMaskedChildContext=g);return b},mountClassInstance:function(a,\nb){var c=a.alternate,d=a.stateNode,e=d.state||null,g=a.pendingProps;g?void 0:E(\"158\");var h=ke(a);d.props=g;d.state=a.memoizedState=e;d.refs=D;d.context=me(a,h);null!=a.type&&null!=a.type.prototype&&!0===a.type.prototype.unstable_isAsyncReactComponent&&(a.internalContextTag|=1);\"function\"===typeof d.componentWillMount&&(e=d.state,d.componentWillMount(),e!==d.state&&f.enqueueReplaceState(d,d.state,null),e=a.updateQueue,null!==e&&(d.state=Je(c,a,e,d,g,b)));\"function\"===typeof d.componentDidMount&&(a.effectTag|=\n4)},updateClassInstance:function(a,b,e){var g=b.stateNode;g.props=b.memoizedProps;g.state=b.memoizedState;var h=b.memoizedProps,k=b.pendingProps;k||(k=h,null==k?E(\"159\"):void 0);var u=g.context,z=ke(b);z=me(b,z);\"function\"!==typeof g.componentWillReceiveProps||h===k&&u===z||(u=g.state,g.componentWillReceiveProps(k,z),g.state!==u&&f.enqueueReplaceState(g,g.state,null));u=b.memoizedState;e=null!==b.updateQueue?Je(a,b,b.updateQueue,g,k,e):u;if(!(h!==k||u!==e||X.current||null!==b.updateQueue&&b.updateQueue.hasForceUpdate))return\"function\"!==\ntypeof g.componentDidUpdate||h===a.memoizedProps&&u===a.memoizedState||(b.effectTag|=4),!1;var G=k;if(null===h||null!==b.updateQueue&&b.updateQueue.hasForceUpdate)G=!0;else{var I=b.stateNode,L=b.type;G=\"function\"===typeof I.shouldComponentUpdate?I.shouldComponentUpdate(G,e,z):L.prototype&&L.prototype.isPureReactComponent?!ea(h,G)||!ea(u,e):!0}G?(\"function\"===typeof g.componentWillUpdate&&g.componentWillUpdate(k,e,z),\"function\"===typeof g.componentDidUpdate&&(b.effectTag|=4)):(\"function\"!==typeof g.componentDidUpdate||\nh===a.memoizedProps&&u===a.memoizedState||(b.effectTag|=4),c(b,k),d(b,e));g.props=k;g.state=e;g.context=z;return G}}}var Qe=\"function\"===typeof Symbol&&Symbol[\"for\"],Re=Qe?Symbol[\"for\"](\"react.element\"):60103,Se=Qe?Symbol[\"for\"](\"react.call\"):60104,Te=Qe?Symbol[\"for\"](\"react.return\"):60105,Ue=Qe?Symbol[\"for\"](\"react.portal\"):60106,Ve=Qe?Symbol[\"for\"](\"react.fragment\"):60107,We=\"function\"===typeof Symbol&&Symbol.iterator;\nfunction Xe(a){if(null===a||\"undefined\"===typeof a)return null;a=We&&a[We]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}var Ye=Array.isArray;\nfunction Ze(a,b){var c=b.ref;if(null!==c&&\"function\"!==typeof c){if(b._owner){b=b._owner;var d=void 0;b&&(2!==b.tag?E(\"110\"):void 0,d=b.stateNode);d?void 0:E(\"147\",c);var e=\"\"+c;if(null!==a&&null!==a.ref&&a.ref._stringRef===e)return a.ref;a=function(a){var b=d.refs===D?d.refs={}:d.refs;null===a?delete b[e]:b[e]=a};a._stringRef=e;return a}\"string\"!==typeof c?E(\"148\"):void 0;b._owner?void 0:E(\"149\",c)}return c}\nfunction $e(a,b){\"textarea\"!==a.type&&E(\"31\",\"[object Object]\"===Object.prototype.toString.call(b)?\"object with keys {\"+Object.keys(b).join(\", \")+\"}\":b,\"\")}\nfunction af(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.effectTag=8}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b,c){a=se(a,b,c);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.effectTag=\n2,c):d;b.effectTag=2;return c}function g(b){a&&null===b.alternate&&(b.effectTag=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=ve(c,a.internalContextTag,d),b[\"return\"]=a,b;b=e(b,c,d);b[\"return\"]=a;return b}function k(a,b,c,d){if(null!==b&&b.type===c.type)return d=e(b,c.props,d),d.ref=Ze(b,c),d[\"return\"]=a,d;d=te(c,a.internalContextTag,d);d.ref=Ze(b,c);d[\"return\"]=a;return d}function q(a,b,c,d){if(null===b||7!==b.tag)return b=we(c,a.internalContextTag,d),b[\"return\"]=a,b;b=e(b,c,d);\nb[\"return\"]=a;return b}function v(a,b,c,d){if(null===b||9!==b.tag)return b=xe(c,a.internalContextTag,d),b.type=c.value,b[\"return\"]=a,b;b=e(b,null,d);b.type=c.value;b[\"return\"]=a;return b}function y(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=ye(c,a.internalContextTag,d),b[\"return\"]=a,b;b=e(b,c.children||[],d);b[\"return\"]=a;return b}function u(a,b,c,d,f){if(null===b||10!==b.tag)return b=ue(c,a.internalContextTag,\nd,f),b[\"return\"]=a,b;b=e(b,c,d);b[\"return\"]=a;return b}function z(a,b,c){if(\"string\"===typeof b||\"number\"===typeof b)return b=ve(\"\"+b,a.internalContextTag,c),b[\"return\"]=a,b;if(\"object\"===typeof b&&null!==b){switch(b.$$typeof){case Re:if(b.type===Ve)return b=ue(b.props.children,a.internalContextTag,c,b.key),b[\"return\"]=a,b;c=te(b,a.internalContextTag,c);c.ref=Ze(null,b);c[\"return\"]=a;return c;case Se:return b=we(b,a.internalContextTag,c),b[\"return\"]=a,b;case Te:return c=xe(b,a.internalContextTag,\nc),c.type=b.value,c[\"return\"]=a,c;case Ue:return b=ye(b,a.internalContextTag,c),b[\"return\"]=a,b}if(Ye(b)||Xe(b))return b=ue(b,a.internalContextTag,c,null),b[\"return\"]=a,b;$e(a,b)}return null}function G(a,b,c,d){var e=null!==b?b.key:null;if(\"string\"===typeof c||\"number\"===typeof c)return null!==e?null:h(a,b,\"\"+c,d);if(\"object\"===typeof c&&null!==c){switch(c.$$typeof){case Re:return c.key===e?c.type===Ve?u(a,b,c.props.children,d,e):k(a,b,c,d):null;case Se:return c.key===e?q(a,b,c,d):null;case Te:return null===\ne?v(a,b,c,d):null;case Ue:return c.key===e?y(a,b,c,d):null}if(Ye(c)||Xe(c))return null!==e?null:u(a,b,c,d,null);$e(a,c)}return null}function I(a,b,c,d,e){if(\"string\"===typeof d||\"number\"===typeof d)return a=a.get(c)||null,h(b,a,\"\"+d,e);if(\"object\"===typeof d&&null!==d){switch(d.$$typeof){case Re:return a=a.get(null===d.key?c:d.key)||null,d.type===Ve?u(b,a,d.props.children,e,d.key):k(b,a,d,e);case Se:return a=a.get(null===d.key?c:d.key)||null,q(b,a,d,e);case Te:return a=a.get(c)||null,v(b,a,d,e);case Ue:return a=\na.get(null===d.key?c:d.key)||null,y(b,a,d,e)}if(Ye(d)||Xe(d))return a=a.get(c)||null,u(b,a,d,e,null);$e(b,d)}return null}function L(e,g,m,A){for(var h=null,r=null,n=g,w=g=0,k=null;null!==n&&w<m.length;w++){n.index>w?(k=n,n=null):k=n.sibling;var x=G(e,n,m[w],A);if(null===x){null===n&&(n=k);break}a&&n&&null===x.alternate&&b(e,n);g=f(x,g,w);null===r?h=x:r.sibling=x;r=x;n=k}if(w===m.length)return c(e,n),h;if(null===n){for(;w<m.length;w++)if(n=z(e,m[w],A))g=f(n,g,w),null===r?h=n:r.sibling=n,r=n;return h}for(n=\nd(e,n);w<m.length;w++)if(k=I(n,e,w,m[w],A)){if(a&&null!==k.alternate)n[\"delete\"](null===k.key?w:k.key);g=f(k,g,w);null===r?h=k:r.sibling=k;r=k}a&&n.forEach(function(a){return b(e,a)});return h}function N(e,g,m,A){var h=Xe(m);\"function\"!==typeof h?E(\"150\"):void 0;m=h.call(m);null==m?E(\"151\"):void 0;for(var r=h=null,n=g,w=g=0,k=null,x=m.next();null!==n&&!x.done;w++,x=m.next()){n.index>w?(k=n,n=null):k=n.sibling;var J=G(e,n,x.value,A);if(null===J){n||(n=k);break}a&&n&&null===J.alternate&&b(e,n);g=f(J,\ng,w);null===r?h=J:r.sibling=J;r=J;n=k}if(x.done)return c(e,n),h;if(null===n){for(;!x.done;w++,x=m.next())x=z(e,x.value,A),null!==x&&(g=f(x,g,w),null===r?h=x:r.sibling=x,r=x);return h}for(n=d(e,n);!x.done;w++,x=m.next())if(x=I(n,e,w,x.value,A),null!==x){if(a&&null!==x.alternate)n[\"delete\"](null===x.key?w:x.key);g=f(x,g,w);null===r?h=x:r.sibling=x;r=x}a&&n.forEach(function(a){return b(e,a)});return h}return function(a,d,f,h){\"object\"===typeof f&&null!==f&&f.type===Ve&&null===f.key&&(f=f.props.children);\nvar m=\"object\"===typeof f&&null!==f;if(m)switch(f.$$typeof){case Re:a:{var r=f.key;for(m=d;null!==m;){if(m.key===r)if(10===m.tag?f.type===Ve:m.type===f.type){c(a,m.sibling);d=e(m,f.type===Ve?f.props.children:f.props,h);d.ref=Ze(m,f);d[\"return\"]=a;a=d;break a}else{c(a,m);break}else b(a,m);m=m.sibling}f.type===Ve?(d=ue(f.props.children,a.internalContextTag,h,f.key),d[\"return\"]=a,a=d):(h=te(f,a.internalContextTag,h),h.ref=Ze(d,f),h[\"return\"]=a,a=h)}return g(a);case Se:a:{for(m=f.key;null!==d;){if(d.key===\nm)if(7===d.tag){c(a,d.sibling);d=e(d,f,h);d[\"return\"]=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=we(f,a.internalContextTag,h);d[\"return\"]=a;a=d}return g(a);case Te:a:{if(null!==d)if(9===d.tag){c(a,d.sibling);d=e(d,null,h);d.type=f.value;d[\"return\"]=a;a=d;break a}else c(a,d);d=xe(f,a.internalContextTag,h);d.type=f.value;d[\"return\"]=a;a=d}return g(a);case Ue:a:{for(m=f.key;null!==d;){if(d.key===m)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===\nf.implementation){c(a,d.sibling);d=e(d,f.children||[],h);d[\"return\"]=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=ye(f,a.internalContextTag,h);d[\"return\"]=a;a=d}return g(a)}if(\"string\"===typeof f||\"number\"===typeof f)return f=\"\"+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f,h)):(c(a,d),d=ve(f,a.internalContextTag,h)),d[\"return\"]=a,a=d,g(a);if(Ye(f))return L(a,d,f,h);if(Xe(f))return N(a,d,f,h);m&&$e(a,f);if(\"undefined\"===typeof f)switch(a.tag){case 2:case 1:h=a.type,E(\"152\",h.displayName||\nh.name||\"Component\")}return c(a,d)}}var bf=af(!0),cf=af(!1);\nfunction df(a,b,c,d,e){function f(a,b,c){var d=b.expirationTime;b.child=null===a?cf(b,null,c,d):bf(b,a.child,c,d)}function g(a,b){var c=b.ref;null===c||a&&a.ref===c||(b.effectTag|=128)}function h(a,b,c,d){g(a,b);if(!c)return d&&re(b,!1),q(a,b);c=b.stateNode;id.current=b;var e=c.render();b.effectTag|=1;f(a,b,e);b.memoizedState=c.state;b.memoizedProps=c.props;d&&re(b,!0);return b.child}function k(a){var b=a.stateNode;b.pendingContext?oe(a,b.pendingContext,b.pendingContext!==b.context):b.context&&oe(a,\nb.context,!1);I(a,b.containerInfo)}function q(a,b){null!==a&&b.child!==a.child?E(\"153\"):void 0;if(null!==b.child){a=b.child;var c=se(a,a.pendingProps,a.expirationTime);b.child=c;for(c[\"return\"]=b;null!==a.sibling;)a=a.sibling,c=c.sibling=se(a,a.pendingProps,a.expirationTime),c[\"return\"]=b;c.sibling=null}return b.child}function v(a,b){switch(b.tag){case 3:k(b);break;case 2:qe(b);break;case 4:I(b,b.stateNode.containerInfo)}return null}var y=a.shouldSetTextContent,u=a.useSyncScheduling,z=a.shouldDeprioritizeSubtree,\nG=b.pushHostContext,I=b.pushHostContainer,L=c.enterHydrationState,N=c.resetHydrationState,J=c.tryToClaimNextHydratableInstance;a=Le(d,e,function(a,b){a.memoizedProps=b},function(a,b){a.memoizedState=b});var w=a.adoptClassInstance,m=a.constructClassInstance,A=a.mountClassInstance,Ob=a.updateClassInstance;return{beginWork:function(a,b,c){if(0===b.expirationTime||b.expirationTime>c)return v(a,b);switch(b.tag){case 0:null!==a?E(\"155\"):void 0;var d=b.type,e=b.pendingProps,r=ke(b);r=me(b,r);d=d(e,r);b.effectTag|=\n1;\"object\"===typeof d&&null!==d&&\"function\"===typeof d.render?(b.tag=2,e=qe(b),w(b,d),A(b,c),b=h(a,b,!0,e)):(b.tag=1,f(a,b,d),b.memoizedProps=e,b=b.child);return b;case 1:a:{e=b.type;c=b.pendingProps;d=b.memoizedProps;if(X.current)null===c&&(c=d);else if(null===c||d===c){b=q(a,b);break a}d=ke(b);d=me(b,d);e=e(c,d);b.effectTag|=1;f(a,b,e);b.memoizedProps=c;b=b.child}return b;case 2:return e=qe(b),d=void 0,null===a?b.stateNode?E(\"153\"):(m(b,b.pendingProps),A(b,c),d=!0):d=Ob(a,b,c),h(a,b,d,e);case 3:return k(b),\ne=b.updateQueue,null!==e?(d=b.memoizedState,e=Je(a,b,e,null,null,c),d===e?(N(),b=q(a,b)):(d=e.element,r=b.stateNode,(null===a||null===a.child)&&r.hydrate&&L(b)?(b.effectTag|=2,b.child=cf(b,null,d,c)):(N(),f(a,b,d)),b.memoizedState=e,b=b.child)):(N(),b=q(a,b)),b;case 5:G(b);null===a&&J(b);e=b.type;var n=b.memoizedProps;d=b.pendingProps;null===d&&(d=n,null===d?E(\"154\"):void 0);r=null!==a?a.memoizedProps:null;X.current||null!==d&&n!==d?(n=d.children,y(e,d)?n=null:r&&y(e,r)&&(b.effectTag|=16),g(a,b),\n2147483647!==c&&!u&&z(e,d)?(b.expirationTime=2147483647,b=null):(f(a,b,n),b.memoizedProps=d,b=b.child)):b=q(a,b);return b;case 6:return null===a&&J(b),a=b.pendingProps,null===a&&(a=b.memoizedProps),b.memoizedProps=a,null;case 8:b.tag=7;case 7:e=b.pendingProps;if(X.current)null===e&&(e=a&&a.memoizedProps,null===e?E(\"154\"):void 0);else if(null===e||b.memoizedProps===e)e=b.memoizedProps;d=e.children;b.stateNode=null===a?cf(b,b.stateNode,d,c):bf(b,b.stateNode,d,c);b.memoizedProps=e;return b.stateNode;\ncase 9:return null;case 4:a:{I(b,b.stateNode.containerInfo);e=b.pendingProps;if(X.current)null===e&&(e=a&&a.memoizedProps,null==e?E(\"154\"):void 0);else if(null===e||b.memoizedProps===e){b=q(a,b);break a}null===a?b.child=bf(b,null,e,c):f(a,b,e);b.memoizedProps=e;b=b.child}return b;case 10:a:{c=b.pendingProps;if(X.current)null===c&&(c=b.memoizedProps);else if(null===c||b.memoizedProps===c){b=q(a,b);break a}f(a,b,c);b.memoizedProps=c;b=b.child}return b;default:E(\"156\")}},beginFailedWork:function(a,b,\nc){switch(b.tag){case 2:qe(b);break;case 3:k(b);break;default:E(\"157\")}b.effectTag|=64;null===a?b.child=null:b.child!==a.child&&(b.child=a.child);if(0===b.expirationTime||b.expirationTime>c)return v(a,b);b.firstEffect=null;b.lastEffect=null;b.child=null===a?cf(b,null,null,c):bf(b,a.child,null,c);2===b.tag&&(a=b.stateNode,b.memoizedProps=a.props,b.memoizedState=a.state);return b.child}}}\nfunction ef(a,b,c){function d(a){a.effectTag|=4}var e=a.createInstance,f=a.createTextInstance,g=a.appendInitialChild,h=a.finalizeInitialChildren,k=a.prepareUpdate,q=a.persistence,v=b.getRootHostContainer,y=b.popHostContext,u=b.getHostContext,z=b.popHostContainer,G=c.prepareToHydrateHostInstance,I=c.prepareToHydrateHostTextInstance,L=c.popHydrationState,N=void 0,J=void 0,w=void 0;a.mutation?(N=function(){},J=function(a,b,c){(b.updateQueue=c)&&d(b)},w=function(a,b,c,e){c!==e&&d(b)}):q?E(\"235\"):E(\"236\");\nreturn{completeWork:function(a,b,c){var m=b.pendingProps;if(null===m)m=b.memoizedProps;else if(2147483647!==b.expirationTime||2147483647===c)b.pendingProps=null;switch(b.tag){case 1:return null;case 2:return ne(b),null;case 3:z(b);V(X,b);V(ie,b);m=b.stateNode;m.pendingContext&&(m.context=m.pendingContext,m.pendingContext=null);if(null===a||null===a.child)L(b),b.effectTag&=-3;N(b);return null;case 5:y(b);c=v();var A=b.type;if(null!==a&&null!=b.stateNode){var p=a.memoizedProps,q=b.stateNode,x=u();q=\nk(q,A,p,m,c,x);J(a,b,q,A,p,m,c);a.ref!==b.ref&&(b.effectTag|=128)}else{if(!m)return null===b.stateNode?E(\"166\"):void 0,null;a=u();if(L(b))G(b,c,a)&&d(b);else{a=e(A,m,c,a,b);a:for(p=b.child;null!==p;){if(5===p.tag||6===p.tag)g(a,p.stateNode);else if(4!==p.tag&&null!==p.child){p.child[\"return\"]=p;p=p.child;continue}if(p===b)break;for(;null===p.sibling;){if(null===p[\"return\"]||p[\"return\"]===b)break a;p=p[\"return\"]}p.sibling[\"return\"]=p[\"return\"];p=p.sibling}h(a,A,m,c)&&d(b);b.stateNode=a}null!==b.ref&&\n(b.effectTag|=128)}return null;case 6:if(a&&null!=b.stateNode)w(a,b,a.memoizedProps,m);else{if(\"string\"!==typeof m)return null===b.stateNode?E(\"166\"):void 0,null;a=v();c=u();L(b)?I(b)&&d(b):b.stateNode=f(m,a,c,b)}return null;case 7:(m=b.memoizedProps)?void 0:E(\"165\");b.tag=8;A=[];a:for((p=b.stateNode)&&(p[\"return\"]=b);null!==p;){if(5===p.tag||6===p.tag||4===p.tag)E(\"247\");else if(9===p.tag)A.push(p.type);else if(null!==p.child){p.child[\"return\"]=p;p=p.child;continue}for(;null===p.sibling;){if(null===\np[\"return\"]||p[\"return\"]===b)break a;p=p[\"return\"]}p.sibling[\"return\"]=p[\"return\"];p=p.sibling}p=m.handler;m=p(m.props,A);b.child=bf(b,null!==a?a.child:null,m,c);return b.child;case 8:return b.tag=7,null;case 9:return null;case 10:return null;case 4:return z(b),N(b),null;case 0:E(\"167\");default:E(\"156\")}}}}\nfunction ff(a,b){function c(a){var c=a.ref;if(null!==c)try{c(null)}catch(A){b(a,A)}}function d(a){\"function\"===typeof Ee&&Ee(a);switch(a.tag){case 2:c(a);var d=a.stateNode;if(\"function\"===typeof d.componentWillUnmount)try{d.props=a.memoizedProps,d.state=a.memoizedState,d.componentWillUnmount()}catch(A){b(a,A)}break;case 5:c(a);break;case 7:e(a.stateNode);break;case 4:k&&g(a)}}function e(a){for(var b=a;;)if(d(b),null===b.child||k&&4===b.tag){if(b===a)break;for(;null===b.sibling;){if(null===b[\"return\"]||\nb[\"return\"]===a)return;b=b[\"return\"]}b.sibling[\"return\"]=b[\"return\"];b=b.sibling}else b.child[\"return\"]=b,b=b.child}function f(a){return 5===a.tag||3===a.tag||4===a.tag}function g(a){for(var b=a,c=!1,f=void 0,g=void 0;;){if(!c){c=b[\"return\"];a:for(;;){null===c?E(\"160\"):void 0;switch(c.tag){case 5:f=c.stateNode;g=!1;break a;case 3:f=c.stateNode.containerInfo;g=!0;break a;case 4:f=c.stateNode.containerInfo;g=!0;break a}c=c[\"return\"]}c=!0}if(5===b.tag||6===b.tag)e(b),g?J(f,b.stateNode):N(f,b.stateNode);\nelse if(4===b.tag?f=b.stateNode.containerInfo:d(b),null!==b.child){b.child[\"return\"]=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b[\"return\"]||b[\"return\"]===a)return;b=b[\"return\"];4===b.tag&&(c=!1)}b.sibling[\"return\"]=b[\"return\"];b=b.sibling}}var h=a.getPublicInstance,k=a.mutation;a=a.persistence;k||(a?E(\"235\"):E(\"236\"));var q=k.commitMount,v=k.commitUpdate,y=k.resetTextContent,u=k.commitTextUpdate,z=k.appendChild,G=k.appendChildToContainer,I=k.insertBefore,L=k.insertInContainerBefore,\nN=k.removeChild,J=k.removeChildFromContainer;return{commitResetTextContent:function(a){y(a.stateNode)},commitPlacement:function(a){a:{for(var b=a[\"return\"];null!==b;){if(f(b)){var c=b;break a}b=b[\"return\"]}E(\"160\");c=void 0}var d=b=void 0;switch(c.tag){case 5:b=c.stateNode;d=!1;break;case 3:b=c.stateNode.containerInfo;d=!0;break;case 4:b=c.stateNode.containerInfo;d=!0;break;default:E(\"161\")}c.effectTag&16&&(y(b),c.effectTag&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c[\"return\"]||f(c[\"return\"])){c=\nnull;break a}c=c[\"return\"]}c.sibling[\"return\"]=c[\"return\"];for(c=c.sibling;5!==c.tag&&6!==c.tag;){if(c.effectTag&2)continue b;if(null===c.child||4===c.tag)continue b;else c.child[\"return\"]=c,c=c.child}if(!(c.effectTag&2)){c=c.stateNode;break a}}for(var e=a;;){if(5===e.tag||6===e.tag)c?d?L(b,e.stateNode,c):I(b,e.stateNode,c):d?G(b,e.stateNode):z(b,e.stateNode);else if(4!==e.tag&&null!==e.child){e.child[\"return\"]=e;e=e.child;continue}if(e===a)break;for(;null===e.sibling;){if(null===e[\"return\"]||e[\"return\"]===\na)return;e=e[\"return\"]}e.sibling[\"return\"]=e[\"return\"];e=e.sibling}},commitDeletion:function(a){g(a);a[\"return\"]=null;a.child=null;a.alternate&&(a.alternate.child=null,a.alternate[\"return\"]=null)},commitWork:function(a,b){switch(b.tag){case 2:break;case 5:var c=b.stateNode;if(null!=c){var d=b.memoizedProps;a=null!==a?a.memoizedProps:d;var e=b.type,f=b.updateQueue;b.updateQueue=null;null!==f&&v(c,f,e,a,d,b)}break;case 6:null===b.stateNode?E(\"162\"):void 0;c=b.memoizedProps;u(b.stateNode,null!==a?a.memoizedProps:\nc,c);break;case 3:break;default:E(\"163\")}},commitLifeCycles:function(a,b){switch(b.tag){case 2:var c=b.stateNode;if(b.effectTag&4)if(null===a)c.props=b.memoizedProps,c.state=b.memoizedState,c.componentDidMount();else{var d=a.memoizedProps;a=a.memoizedState;c.props=b.memoizedProps;c.state=b.memoizedState;c.componentDidUpdate(d,a)}b=b.updateQueue;null!==b&&Ke(b,c);break;case 3:c=b.updateQueue;null!==c&&Ke(c,null!==b.child?b.child.stateNode:null);break;case 5:c=b.stateNode;null===a&&b.effectTag&4&&q(c,\nb.type,b.memoizedProps,b);break;case 6:break;case 4:break;default:E(\"163\")}},commitAttachRef:function(a){var b=a.ref;if(null!==b){var c=a.stateNode;switch(a.tag){case 5:b(h(c));break;default:b(c)}}},commitDetachRef:function(a){a=a.ref;null!==a&&a(null)}}}var gf={};\nfunction hf(a){function b(a){a===gf?E(\"174\"):void 0;return a}var c=a.getChildHostContext,d=a.getRootHostContext,e={current:gf},f={current:gf},g={current:gf};return{getHostContext:function(){return b(e.current)},getRootHostContainer:function(){return b(g.current)},popHostContainer:function(a){V(e,a);V(f,a);V(g,a)},popHostContext:function(a){f.current===a&&(V(e,a),V(f,a))},pushHostContainer:function(a,b){W(g,b,a);b=d(b);W(f,a,a);W(e,b,a)},pushHostContext:function(a){var d=b(g.current),h=b(e.current);\nd=c(h,a.type,d);h!==d&&(W(f,a,a),W(e,d,a))},resetHostContainer:function(){e.current=gf;g.current=gf}}}\nfunction jf(a){function b(a,b){var c=new Y(5,null,0);c.type=\"DELETED\";c.stateNode=b;c[\"return\"]=a;c.effectTag=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c}function c(a,b){switch(a.tag){case 5:return b=f(b,a.type,a.pendingProps),null!==b?(a.stateNode=b,!0):!1;case 6:return b=g(b,a.pendingProps),null!==b?(a.stateNode=b,!0):!1;default:return!1}}function d(a){for(a=a[\"return\"];null!==a&&5!==a.tag&&3!==a.tag;)a=a[\"return\"];y=a}var e=a.shouldSetTextContent;\na=a.hydration;if(!a)return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){E(\"175\")},prepareToHydrateHostTextInstance:function(){E(\"176\")},popHydrationState:function(){return!1}};var f=a.canHydrateInstance,g=a.canHydrateTextInstance,h=a.getNextHydratableSibling,k=a.getFirstHydratableChild,q=a.hydrateInstance,v=a.hydrateTextInstance,y=null,u=null,z=!1;return{enterHydrationState:function(a){u=\nk(a.stateNode.containerInfo);y=a;return z=!0},resetHydrationState:function(){u=y=null;z=!1},tryToClaimNextHydratableInstance:function(a){if(z){var d=u;if(d){if(!c(a,d)){d=h(d);if(!d||!c(a,d)){a.effectTag|=2;z=!1;y=a;return}b(y,u)}y=a;u=k(d)}else a.effectTag|=2,z=!1,y=a}},prepareToHydrateHostInstance:function(a,b,c){b=q(a.stateNode,a.type,a.memoizedProps,b,c,a);a.updateQueue=b;return null!==b?!0:!1},prepareToHydrateHostTextInstance:function(a){return v(a.stateNode,a.memoizedProps,a)},popHydrationState:function(a){if(a!==\ny)return!1;if(!z)return d(a),z=!0,!1;var c=a.type;if(5!==a.tag||\"head\"!==c&&\"body\"!==c&&!e(c,a.memoizedProps))for(c=u;c;)b(a,c),c=h(c);d(a);u=y?h(a.stateNode):null;return!0}}}\nfunction kf(a){function b(a){Qb=ja=!0;var b=a.stateNode;b.current===a?E(\"177\"):void 0;b.isReadyForCommit=!1;id.current=null;if(1<a.effectTag)if(null!==a.lastEffect){a.lastEffect.nextEffect=a;var c=a.firstEffect}else c=a;else c=a.firstEffect;yg();for(t=c;null!==t;){var d=!1,e=void 0;try{for(;null!==t;){var f=t.effectTag;f&16&&zg(t);if(f&128){var g=t.alternate;null!==g&&Ag(g)}switch(f&-242){case 2:Ne(t);t.effectTag&=-3;break;case 6:Ne(t);t.effectTag&=-3;Oe(t.alternate,t);break;case 4:Oe(t.alternate,\nt);break;case 8:Sc=!0,Bg(t),Sc=!1}t=t.nextEffect}}catch(Tc){d=!0,e=Tc}d&&(null===t?E(\"178\"):void 0,h(t,e),null!==t&&(t=t.nextEffect))}Cg();b.current=a;for(t=c;null!==t;){c=!1;d=void 0;try{for(;null!==t;){var k=t.effectTag;k&36&&Dg(t.alternate,t);k&128&&Eg(t);if(k&64)switch(e=t,f=void 0,null!==R&&(f=R.get(e),R[\"delete\"](e),null==f&&null!==e.alternate&&(e=e.alternate,f=R.get(e),R[\"delete\"](e))),null==f?E(\"184\"):void 0,e.tag){case 2:e.stateNode.componentDidCatch(f.error,{componentStack:f.componentStack});\nbreak;case 3:null===ca&&(ca=f.error);break;default:E(\"157\")}var Qc=t.nextEffect;t.nextEffect=null;t=Qc}}catch(Tc){c=!0,d=Tc}c&&(null===t?E(\"178\"):void 0,h(t,d),null!==t&&(t=t.nextEffect))}ja=Qb=!1;\"function\"===typeof De&&De(a.stateNode);ha&&(ha.forEach(G),ha=null);null!==ca&&(a=ca,ca=null,Ob(a));b=b.current.expirationTime;0===b&&(qa=R=null);return b}function c(a){for(;;){var b=Fg(a.alternate,a,H),c=a[\"return\"],d=a.sibling;var e=a;if(2147483647===H||2147483647!==e.expirationTime){if(2!==e.tag&&3!==\ne.tag)var f=0;else f=e.updateQueue,f=null===f?0:f.expirationTime;for(var g=e.child;null!==g;)0!==g.expirationTime&&(0===f||f>g.expirationTime)&&(f=g.expirationTime),g=g.sibling;e.expirationTime=f}if(null!==b)return b;null!==c&&(null===c.firstEffect&&(c.firstEffect=a.firstEffect),null!==a.lastEffect&&(null!==c.lastEffect&&(c.lastEffect.nextEffect=a.firstEffect),c.lastEffect=a.lastEffect),1<a.effectTag&&(null!==c.lastEffect?c.lastEffect.nextEffect=a:c.firstEffect=a,c.lastEffect=a));if(null!==d)return d;\nif(null!==c)a=c;else{a.stateNode.isReadyForCommit=!0;break}}return null}function d(a){var b=rg(a.alternate,a,H);null===b&&(b=c(a));id.current=null;return b}function e(a){var b=Gg(a.alternate,a,H);null===b&&(b=c(a));id.current=null;return b}function f(a){if(null!==R){if(!(0===H||H>a))if(H<=Uc)for(;null!==F;)F=k(F)?e(F):d(F);else for(;null!==F&&!A();)F=k(F)?e(F):d(F)}else if(!(0===H||H>a))if(H<=Uc)for(;null!==F;)F=d(F);else for(;null!==F&&!A();)F=d(F)}function g(a,b){ja?E(\"243\"):void 0;ja=!0;a.isReadyForCommit=\n!1;if(a!==ra||b!==H||null===F){for(;-1<he;)ge[he]=null,he--;je=D;ie.current=D;X.current=!1;x();ra=a;H=b;F=se(ra.current,null,b)}var c=!1,d=null;try{f(b)}catch(Rc){c=!0,d=Rc}for(;c;){if(eb){ca=d;break}var g=F;if(null===g)eb=!0;else{var k=h(g,d);null===k?E(\"183\"):void 0;if(!eb){try{c=k;d=b;for(k=c;null!==g;){switch(g.tag){case 2:ne(g);break;case 5:qg(g);break;case 3:p(g);break;case 4:p(g)}if(g===k||g.alternate===k)break;g=g[\"return\"]}F=e(c);f(d)}catch(Rc){c=!0;d=Rc;continue}break}}}b=ca;eb=ja=!1;ca=\nnull;null!==b&&Ob(b);return a.isReadyForCommit?a.current.alternate:null}function h(a,b){var c=id.current=null,d=!1,e=!1,f=null;if(3===a.tag)c=a,q(a)&&(eb=!0);else for(var g=a[\"return\"];null!==g&&null===c;){2===g.tag?\"function\"===typeof g.stateNode.componentDidCatch&&(d=!0,f=jd(g),c=g,e=!0):3===g.tag&&(c=g);if(q(g)){if(Sc||null!==ha&&(ha.has(g)||null!==g.alternate&&ha.has(g.alternate)))return null;c=null;e=!1}g=g[\"return\"]}if(null!==c){null===qa&&(qa=new Set);qa.add(c);var h=\"\";g=a;do{a:switch(g.tag){case 0:case 1:case 2:case 5:var k=\ng._debugOwner,Qc=g._debugSource;var m=jd(g);var n=null;k&&(n=jd(k));k=Qc;m=\"\\n    in \"+(m||\"Unknown\")+(k?\" (at \"+k.fileName.replace(/^.*[\\\\\\/]/,\"\")+\":\"+k.lineNumber+\")\":n?\" (created by \"+n+\")\":\"\");break a;default:m=\"\"}h+=m;g=g[\"return\"]}while(g);g=h;a=jd(a);null===R&&(R=new Map);b={componentName:a,componentStack:g,error:b,errorBoundary:d?c.stateNode:null,errorBoundaryFound:d,errorBoundaryName:f,willRetry:e};R.set(c,b);try{var p=b.error;p&&p.suppressReactErrorLogging||console.error(p)}catch(Vc){Vc&&\nVc.suppressReactErrorLogging||console.error(Vc)}Qb?(null===ha&&(ha=new Set),ha.add(c)):G(c);return c}null===ca&&(ca=b);return null}function k(a){return null!==R&&(R.has(a)||null!==a.alternate&&R.has(a.alternate))}function q(a){return null!==qa&&(qa.has(a)||null!==a.alternate&&qa.has(a.alternate))}function v(){return 20*(((I()+100)/20|0)+1)}function y(a){return 0!==ka?ka:ja?Qb?1:H:!Hg||a.internalContextTag&1?v():1}function u(a,b){return z(a,b,!1)}function z(a,b){for(;null!==a;){if(0===a.expirationTime||\na.expirationTime>b)a.expirationTime=b;null!==a.alternate&&(0===a.alternate.expirationTime||a.alternate.expirationTime>b)&&(a.alternate.expirationTime=b);if(null===a[\"return\"])if(3===a.tag){var c=a.stateNode;!ja&&c===ra&&b<H&&(F=ra=null,H=0);var d=c,e=b;Rb>Ig&&E(\"185\");if(null===d.nextScheduledRoot)d.remainingExpirationTime=e,null===O?(sa=O=d,d.nextScheduledRoot=d):(O=O.nextScheduledRoot=d,O.nextScheduledRoot=sa);else{var f=d.remainingExpirationTime;if(0===f||e<f)d.remainingExpirationTime=e}Fa||(la?\nSb&&(ma=d,na=1,m(ma,na)):1===e?w(1,null):L(e));!ja&&c===ra&&b<H&&(F=ra=null,H=0)}else break;a=a[\"return\"]}}function G(a){z(a,1,!0)}function I(){return Uc=((Wc()-Pe)/10|0)+2}function L(a){if(0!==Tb){if(a>Tb)return;Jg(Xc)}var b=Wc()-Pe;Tb=a;Xc=Kg(J,{timeout:10*(a-2)-b})}function N(){var a=0,b=null;if(null!==O)for(var c=O,d=sa;null!==d;){var e=d.remainingExpirationTime;if(0===e){null===c||null===O?E(\"244\"):void 0;if(d===d.nextScheduledRoot){sa=O=d.nextScheduledRoot=null;break}else if(d===sa)sa=e=d.nextScheduledRoot,\nO.nextScheduledRoot=e,d.nextScheduledRoot=null;else if(d===O){O=c;O.nextScheduledRoot=sa;d.nextScheduledRoot=null;break}else c.nextScheduledRoot=d.nextScheduledRoot,d.nextScheduledRoot=null;d=c.nextScheduledRoot}else{if(0===a||e<a)a=e,b=d;if(d===O)break;c=d;d=d.nextScheduledRoot}}c=ma;null!==c&&c===b?Rb++:Rb=0;ma=b;na=a}function J(a){w(0,a)}function w(a,b){fb=b;for(N();null!==ma&&0!==na&&(0===a||na<=a)&&!Yc;)m(ma,na),N();null!==fb&&(Tb=0,Xc=-1);0!==na&&L(na);fb=null;Yc=!1;Rb=0;if(Ub)throw a=Zc,Zc=\nnull,Ub=!1,a;}function m(a,c){Fa?E(\"245\"):void 0;Fa=!0;if(c<=I()){var d=a.finishedWork;null!==d?(a.finishedWork=null,a.remainingExpirationTime=b(d)):(a.finishedWork=null,d=g(a,c),null!==d&&(a.remainingExpirationTime=b(d)))}else d=a.finishedWork,null!==d?(a.finishedWork=null,a.remainingExpirationTime=b(d)):(a.finishedWork=null,d=g(a,c),null!==d&&(A()?a.finishedWork=d:a.remainingExpirationTime=b(d)));Fa=!1}function A(){return null===fb||fb.timeRemaining()>Lg?!1:Yc=!0}function Ob(a){null===ma?E(\"246\"):\nvoid 0;ma.remainingExpirationTime=0;Ub||(Ub=!0,Zc=a)}var r=hf(a),n=jf(a),p=r.popHostContainer,qg=r.popHostContext,x=r.resetHostContainer,Me=df(a,r,n,u,y),rg=Me.beginWork,Gg=Me.beginFailedWork,Fg=ef(a,r,n).completeWork;r=ff(a,h);var zg=r.commitResetTextContent,Ne=r.commitPlacement,Bg=r.commitDeletion,Oe=r.commitWork,Dg=r.commitLifeCycles,Eg=r.commitAttachRef,Ag=r.commitDetachRef,Wc=a.now,Kg=a.scheduleDeferredCallback,Jg=a.cancelDeferredCallback,Hg=a.useSyncScheduling,yg=a.prepareForCommit,Cg=a.resetAfterCommit,\nPe=Wc(),Uc=2,ka=0,ja=!1,F=null,ra=null,H=0,t=null,R=null,qa=null,ha=null,ca=null,eb=!1,Qb=!1,Sc=!1,sa=null,O=null,Tb=0,Xc=-1,Fa=!1,ma=null,na=0,Yc=!1,Ub=!1,Zc=null,fb=null,la=!1,Sb=!1,Ig=1E3,Rb=0,Lg=1;return{computeAsyncExpiration:v,computeExpirationForFiber:y,scheduleWork:u,batchedUpdates:function(a,b){var c=la;la=!0;try{return a(b)}finally{(la=c)||Fa||w(1,null)}},unbatchedUpdates:function(a){if(la&&!Sb){Sb=!0;try{return a()}finally{Sb=!1}}return a()},flushSync:function(a){var b=la;la=!0;try{a:{var c=\nka;ka=1;try{var d=a();break a}finally{ka=c}d=void 0}return d}finally{la=b,Fa?E(\"187\"):void 0,w(1,null)}},deferredUpdates:function(a){var b=ka;ka=v();try{return a()}finally{ka=b}}}}\nfunction lf(a){function b(a){a=od(a);return null===a?null:a.stateNode}var c=a.getPublicInstance;a=kf(a);var d=a.computeAsyncExpiration,e=a.computeExpirationForFiber,f=a.scheduleWork;return{createContainer:function(a,b){var c=new Y(3,null,0);a={current:c,containerInfo:a,pendingChildren:null,remainingExpirationTime:0,isReadyForCommit:!1,finishedWork:null,context:null,pendingContext:null,hydrate:b,nextScheduledRoot:null};return c.stateNode=a},updateContainer:function(a,b,c,q){var g=b.current;if(c){c=\nc._reactInternalFiber;var h;b:{2===kd(c)&&2===c.tag?void 0:E(\"170\");for(h=c;3!==h.tag;){if(le(h)){h=h.stateNode.__reactInternalMemoizedMergedChildContext;break b}(h=h[\"return\"])?void 0:E(\"171\")}h=h.stateNode.context}c=le(c)?pe(c,h):h}else c=D;null===b.context?b.context=c:b.pendingContext=c;b=q;b=void 0===b?null:b;q=null!=a&&null!=a.type&&null!=a.type.prototype&&!0===a.type.prototype.unstable_isAsyncReactComponent?d():e(g);He(g,{expirationTime:q,partialState:{element:a},callback:b,isReplace:!1,isForced:!1,\nnextCallback:null,next:null});f(g,q)},batchedUpdates:a.batchedUpdates,unbatchedUpdates:a.unbatchedUpdates,deferredUpdates:a.deferredUpdates,flushSync:a.flushSync,getPublicRootInstance:function(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return c(a.child.stateNode);default:return a.child.stateNode}},findHostInstance:b,findHostInstanceWithNoPortals:function(a){a=pd(a);return null===a?null:a.stateNode},injectIntoDevTools:function(a){var c=a.findFiberByHostInstance;return Ce(B({},\na,{findHostInstanceByFiber:function(a){return b(a)},findFiberByHostInstance:function(a){return c?c(a):null}}))}}}var mf=Object.freeze({default:lf}),nf=mf&&lf||mf,of=nf[\"default\"]?nf[\"default\"]:nf;function pf(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Ue,key:null==d?null:\"\"+d,children:a,containerInfo:b,implementation:c}}var qf=\"object\"===typeof performance&&\"function\"===typeof performance.now,rf=void 0;rf=qf?function(){return performance.now()}:function(){return Date.now()};\nvar sf=void 0,tf=void 0;\nif(l.canUseDOM)if(\"function\"!==typeof requestIdleCallback||\"function\"!==typeof cancelIdleCallback){var uf=null,vf=!1,wf=-1,xf=!1,yf=0,zf=33,Af=33,Bf;Bf=qf?{didTimeout:!1,timeRemaining:function(){var a=yf-performance.now();return 0<a?a:0}}:{didTimeout:!1,timeRemaining:function(){var a=yf-Date.now();return 0<a?a:0}};var Cf=\"__reactIdleCallback$\"+Math.random().toString(36).slice(2);window.addEventListener(\"message\",function(a){if(a.source===window&&a.data===Cf){vf=!1;a=rf();if(0>=yf-a)if(-1!==wf&&wf<=\na)Bf.didTimeout=!0;else{xf||(xf=!0,requestAnimationFrame(Df));return}else Bf.didTimeout=!1;wf=-1;a=uf;uf=null;null!==a&&a(Bf)}},!1);var Df=function(a){xf=!1;var b=a-yf+Af;b<Af&&zf<Af?(8>b&&(b=8),Af=b<zf?zf:b):zf=b;yf=a+Af;vf||(vf=!0,window.postMessage(Cf,\"*\"))};sf=function(a,b){uf=a;null!=b&&\"number\"===typeof b.timeout&&(wf=rf()+b.timeout);xf||(xf=!0,requestAnimationFrame(Df));return 0};tf=function(){uf=null;vf=!1;wf=-1}}else sf=window.requestIdleCallback,tf=window.cancelIdleCallback;else sf=function(a){return setTimeout(function(){a({timeRemaining:function(){return Infinity}})})},\ntf=function(a){clearTimeout(a)};var Ef=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,Ff={},Gf={};\nfunction Hf(a){if(Gf.hasOwnProperty(a))return!0;if(Ff.hasOwnProperty(a))return!1;if(Ef.test(a))return Gf[a]=!0;Ff[a]=!0;return!1}\nfunction If(a,b,c){var d=wa(b);if(d&&va(b,c)){var e=d.mutationMethod;e?e(a,c):null==c||d.hasBooleanValue&&!c||d.hasNumericValue&&isNaN(c)||d.hasPositiveNumericValue&&1>c||d.hasOverloadedBooleanValue&&!1===c?Jf(a,b):d.mustUseProperty?a[d.propertyName]=c:(b=d.attributeName,(e=d.attributeNamespace)?a.setAttributeNS(e,b,\"\"+c):d.hasBooleanValue||d.hasOverloadedBooleanValue&&!0===c?a.setAttribute(b,\"\"):a.setAttribute(b,\"\"+c))}else Kf(a,b,va(b,c)?c:null)}\nfunction Kf(a,b,c){Hf(b)&&(null==c?a.removeAttribute(b):a.setAttribute(b,\"\"+c))}function Jf(a,b){var c=wa(b);c?(b=c.mutationMethod)?b(a,void 0):c.mustUseProperty?a[c.propertyName]=c.hasBooleanValue?!1:\"\":a.removeAttribute(c.attributeName):a.removeAttribute(b)}\nfunction Lf(a,b){var c=b.value,d=b.checked;return B({type:void 0,step:void 0,min:void 0,max:void 0},b,{defaultChecked:void 0,defaultValue:void 0,value:null!=c?c:a._wrapperState.initialValue,checked:null!=d?d:a._wrapperState.initialChecked})}function Mf(a,b){var c=b.defaultValue;a._wrapperState={initialChecked:null!=b.checked?b.checked:b.defaultChecked,initialValue:null!=b.value?b.value:c,controlled:\"checkbox\"===b.type||\"radio\"===b.type?null!=b.checked:null!=b.value}}\nfunction Nf(a,b){b=b.checked;null!=b&&If(a,\"checked\",b)}function Of(a,b){Nf(a,b);var c=b.value;if(null!=c)if(0===c&&\"\"===a.value)a.value=\"0\";else if(\"number\"===b.type){if(b=parseFloat(a.value)||0,c!=b||c==b&&a.value!=c)a.value=\"\"+c}else a.value!==\"\"+c&&(a.value=\"\"+c);else null==b.value&&null!=b.defaultValue&&a.defaultValue!==\"\"+b.defaultValue&&(a.defaultValue=\"\"+b.defaultValue),null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}\nfunction Pf(a,b){switch(b.type){case \"submit\":case \"reset\":break;case \"color\":case \"date\":case \"datetime\":case \"datetime-local\":case \"month\":case \"time\":case \"week\":a.value=\"\";a.value=a.defaultValue;break;default:a.value=a.value}b=a.name;\"\"!==b&&(a.name=\"\");a.defaultChecked=!a.defaultChecked;a.defaultChecked=!a.defaultChecked;\"\"!==b&&(a.name=b)}function Qf(a){var b=\"\";aa.Children.forEach(a,function(a){null==a||\"string\"!==typeof a&&\"number\"!==typeof a||(b+=a)});return b}\nfunction Rf(a,b){a=B({children:void 0},b);if(b=Qf(b.children))a.children=b;return a}function Sf(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b[\"$\"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty(\"$\"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=\"\"+c;b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}\nfunction Tf(a,b){var c=b.value;a._wrapperState={initialValue:null!=c?c:b.defaultValue,wasMultiple:!!b.multiple}}function Uf(a,b){null!=b.dangerouslySetInnerHTML?E(\"91\"):void 0;return B({},b,{value:void 0,defaultValue:void 0,children:\"\"+a._wrapperState.initialValue})}function Vf(a,b){var c=b.value;null==c&&(c=b.defaultValue,b=b.children,null!=b&&(null!=c?E(\"92\"):void 0,Array.isArray(b)&&(1>=b.length?void 0:E(\"93\"),b=b[0]),c=\"\"+b),null==c&&(c=\"\"));a._wrapperState={initialValue:\"\"+c}}\nfunction Wf(a,b){var c=b.value;null!=c&&(c=\"\"+c,c!==a.value&&(a.value=c),null==b.defaultValue&&(a.defaultValue=c));null!=b.defaultValue&&(a.defaultValue=b.defaultValue)}function Xf(a){var b=a.textContent;b===a._wrapperState.initialValue&&(a.value=b)}var Yf={html:\"http://www.w3.org/1999/xhtml\",mathml:\"http://www.w3.org/1998/Math/MathML\",svg:\"http://www.w3.org/2000/svg\"};\nfunction Zf(a){switch(a){case \"svg\":return\"http://www.w3.org/2000/svg\";case \"math\":return\"http://www.w3.org/1998/Math/MathML\";default:return\"http://www.w3.org/1999/xhtml\"}}function $f(a,b){return null==a||\"http://www.w3.org/1999/xhtml\"===a?Zf(b):\"http://www.w3.org/2000/svg\"===a&&\"foreignObject\"===b?\"http://www.w3.org/1999/xhtml\":a}\nvar ag=void 0,bg=function(a){return\"undefined\"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(a.namespaceURI!==Yf.svg||\"innerHTML\"in a)a.innerHTML=b;else{ag=ag||document.createElement(\"div\");ag.innerHTML=\"\\x3csvg\\x3e\"+b+\"\\x3c/svg\\x3e\";for(b=ag.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});\nfunction cg(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}\nvar dg={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,\nstopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},eg=[\"Webkit\",\"ms\",\"Moz\",\"O\"];Object.keys(dg).forEach(function(a){eg.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);dg[b]=dg[a]})});\nfunction fg(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf(\"--\");var e=c;var f=b[c];e=null==f||\"boolean\"===typeof f||\"\"===f?\"\":d||\"number\"!==typeof f||0===f||dg.hasOwnProperty(e)&&dg[e]?(\"\"+f).trim():f+\"px\";\"float\"===c&&(c=\"cssFloat\");d?a.setProperty(c,e):a[c]=e}}var gg=B({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});\nfunction hg(a,b,c){b&&(gg[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML?E(\"137\",a,c()):void 0),null!=b.dangerouslySetInnerHTML&&(null!=b.children?E(\"60\"):void 0,\"object\"===typeof b.dangerouslySetInnerHTML&&\"__html\"in b.dangerouslySetInnerHTML?void 0:E(\"61\")),null!=b.style&&\"object\"!==typeof b.style?E(\"62\",c()):void 0)}\nfunction ig(a,b){if(-1===a.indexOf(\"-\"))return\"string\"===typeof b.is;switch(a){case \"annotation-xml\":case \"color-profile\":case \"font-face\":case \"font-face-src\":case \"font-face-uri\":case \"font-face-format\":case \"font-face-name\":case \"missing-glyph\":return!1;default:return!0}}var jg=Yf.html,kg=C.thatReturns(\"\");\nfunction lg(a,b){a=9===a.nodeType||11===a.nodeType?a:a.ownerDocument;var c=Hd(a);b=Sa[b];for(var d=0;d<b.length;d++){var e=b[d];c.hasOwnProperty(e)&&c[e]||(\"topScroll\"===e?wd(\"topScroll\",\"scroll\",a):\"topFocus\"===e||\"topBlur\"===e?(wd(\"topFocus\",\"focus\",a),wd(\"topBlur\",\"blur\",a),c.topBlur=!0,c.topFocus=!0):\"topCancel\"===e?(yc(\"cancel\",!0)&&wd(\"topCancel\",\"cancel\",a),c.topCancel=!0):\"topClose\"===e?(yc(\"close\",!0)&&wd(\"topClose\",\"close\",a),c.topClose=!0):Dd.hasOwnProperty(e)&&U(e,Dd[e],a),c[e]=!0)}}\nvar mg={topAbort:\"abort\",topCanPlay:\"canplay\",topCanPlayThrough:\"canplaythrough\",topDurationChange:\"durationchange\",topEmptied:\"emptied\",topEncrypted:\"encrypted\",topEnded:\"ended\",topError:\"error\",topLoadedData:\"loadeddata\",topLoadedMetadata:\"loadedmetadata\",topLoadStart:\"loadstart\",topPause:\"pause\",topPlay:\"play\",topPlaying:\"playing\",topProgress:\"progress\",topRateChange:\"ratechange\",topSeeked:\"seeked\",topSeeking:\"seeking\",topStalled:\"stalled\",topSuspend:\"suspend\",topTimeUpdate:\"timeupdate\",topVolumeChange:\"volumechange\",\ntopWaiting:\"waiting\"};function ng(a,b,c,d){c=9===c.nodeType?c:c.ownerDocument;d===jg&&(d=Zf(a));d===jg?\"script\"===a?(a=c.createElement(\"div\"),a.innerHTML=\"\\x3cscript\\x3e\\x3c/script\\x3e\",a=a.removeChild(a.firstChild)):a=\"string\"===typeof b.is?c.createElement(a,{is:b.is}):c.createElement(a):a=c.createElementNS(d,a);return a}function og(a,b){return(9===b.nodeType?b:b.ownerDocument).createTextNode(a)}\nfunction pg(a,b,c,d){var e=ig(b,c);switch(b){case \"iframe\":case \"object\":U(\"topLoad\",\"load\",a);var f=c;break;case \"video\":case \"audio\":for(f in mg)mg.hasOwnProperty(f)&&U(f,mg[f],a);f=c;break;case \"source\":U(\"topError\",\"error\",a);f=c;break;case \"img\":case \"image\":U(\"topError\",\"error\",a);U(\"topLoad\",\"load\",a);f=c;break;case \"form\":U(\"topReset\",\"reset\",a);U(\"topSubmit\",\"submit\",a);f=c;break;case \"details\":U(\"topToggle\",\"toggle\",a);f=c;break;case \"input\":Mf(a,c);f=Lf(a,c);U(\"topInvalid\",\"invalid\",a);\nlg(d,\"onChange\");break;case \"option\":f=Rf(a,c);break;case \"select\":Tf(a,c);f=B({},c,{value:void 0});U(\"topInvalid\",\"invalid\",a);lg(d,\"onChange\");break;case \"textarea\":Vf(a,c);f=Uf(a,c);U(\"topInvalid\",\"invalid\",a);lg(d,\"onChange\");break;default:f=c}hg(b,f,kg);var g=f,h;for(h in g)if(g.hasOwnProperty(h)){var k=g[h];\"style\"===h?fg(a,k,kg):\"dangerouslySetInnerHTML\"===h?(k=k?k.__html:void 0,null!=k&&bg(a,k)):\"children\"===h?\"string\"===typeof k?(\"textarea\"!==b||\"\"!==k)&&cg(a,k):\"number\"===typeof k&&cg(a,\n\"\"+k):\"suppressContentEditableWarning\"!==h&&\"suppressHydrationWarning\"!==h&&\"autoFocus\"!==h&&(Ra.hasOwnProperty(h)?null!=k&&lg(d,h):e?Kf(a,h,k):null!=k&&If(a,h,k))}switch(b){case \"input\":Bc(a);Pf(a,c);break;case \"textarea\":Bc(a);Xf(a,c);break;case \"option\":null!=c.value&&a.setAttribute(\"value\",c.value);break;case \"select\":a.multiple=!!c.multiple;b=c.value;null!=b?Sf(a,!!c.multiple,b,!1):null!=c.defaultValue&&Sf(a,!!c.multiple,c.defaultValue,!0);break;default:\"function\"===typeof f.onClick&&(a.onclick=\nC)}}\nfunction sg(a,b,c,d,e){var f=null;switch(b){case \"input\":c=Lf(a,c);d=Lf(a,d);f=[];break;case \"option\":c=Rf(a,c);d=Rf(a,d);f=[];break;case \"select\":c=B({},c,{value:void 0});d=B({},d,{value:void 0});f=[];break;case \"textarea\":c=Uf(a,c);d=Uf(a,d);f=[];break;default:\"function\"!==typeof c.onClick&&\"function\"===typeof d.onClick&&(a.onclick=C)}hg(b,d,kg);var g,h;a=null;for(g in c)if(!d.hasOwnProperty(g)&&c.hasOwnProperty(g)&&null!=c[g])if(\"style\"===g)for(h in b=c[g],b)b.hasOwnProperty(h)&&(a||(a={}),a[h]=\n\"\");else\"dangerouslySetInnerHTML\"!==g&&\"children\"!==g&&\"suppressContentEditableWarning\"!==g&&\"suppressHydrationWarning\"!==g&&\"autoFocus\"!==g&&(Ra.hasOwnProperty(g)?f||(f=[]):(f=f||[]).push(g,null));for(g in d){var k=d[g];b=null!=c?c[g]:void 0;if(d.hasOwnProperty(g)&&k!==b&&(null!=k||null!=b))if(\"style\"===g)if(b){for(h in b)!b.hasOwnProperty(h)||k&&k.hasOwnProperty(h)||(a||(a={}),a[h]=\"\");for(h in k)k.hasOwnProperty(h)&&b[h]!==k[h]&&(a||(a={}),a[h]=k[h])}else a||(f||(f=[]),f.push(g,a)),a=k;else\"dangerouslySetInnerHTML\"===\ng?(k=k?k.__html:void 0,b=b?b.__html:void 0,null!=k&&b!==k&&(f=f||[]).push(g,\"\"+k)):\"children\"===g?b===k||\"string\"!==typeof k&&\"number\"!==typeof k||(f=f||[]).push(g,\"\"+k):\"suppressContentEditableWarning\"!==g&&\"suppressHydrationWarning\"!==g&&(Ra.hasOwnProperty(g)?(null!=k&&lg(e,g),f||b===k||(f=[])):(f=f||[]).push(g,k))}a&&(f=f||[]).push(\"style\",a);return f}\nfunction tg(a,b,c,d,e){\"input\"===c&&\"radio\"===e.type&&null!=e.name&&Nf(a,e);ig(c,d);d=ig(c,e);for(var f=0;f<b.length;f+=2){var g=b[f],h=b[f+1];\"style\"===g?fg(a,h,kg):\"dangerouslySetInnerHTML\"===g?bg(a,h):\"children\"===g?cg(a,h):d?null!=h?Kf(a,g,h):a.removeAttribute(g):null!=h?If(a,g,h):Jf(a,g)}switch(c){case \"input\":Of(a,e);break;case \"textarea\":Wf(a,e);break;case \"select\":a._wrapperState.initialValue=void 0,b=a._wrapperState.wasMultiple,a._wrapperState.wasMultiple=!!e.multiple,c=e.value,null!=c?Sf(a,\n!!e.multiple,c,!1):b!==!!e.multiple&&(null!=e.defaultValue?Sf(a,!!e.multiple,e.defaultValue,!0):Sf(a,!!e.multiple,e.multiple?[]:\"\",!1))}}\nfunction ug(a,b,c,d,e){switch(b){case \"iframe\":case \"object\":U(\"topLoad\",\"load\",a);break;case \"video\":case \"audio\":for(var f in mg)mg.hasOwnProperty(f)&&U(f,mg[f],a);break;case \"source\":U(\"topError\",\"error\",a);break;case \"img\":case \"image\":U(\"topError\",\"error\",a);U(\"topLoad\",\"load\",a);break;case \"form\":U(\"topReset\",\"reset\",a);U(\"topSubmit\",\"submit\",a);break;case \"details\":U(\"topToggle\",\"toggle\",a);break;case \"input\":Mf(a,c);U(\"topInvalid\",\"invalid\",a);lg(e,\"onChange\");break;case \"select\":Tf(a,c);\nU(\"topInvalid\",\"invalid\",a);lg(e,\"onChange\");break;case \"textarea\":Vf(a,c),U(\"topInvalid\",\"invalid\",a),lg(e,\"onChange\")}hg(b,c,kg);d=null;for(var g in c)c.hasOwnProperty(g)&&(f=c[g],\"children\"===g?\"string\"===typeof f?a.textContent!==f&&(d=[\"children\",f]):\"number\"===typeof f&&a.textContent!==\"\"+f&&(d=[\"children\",\"\"+f]):Ra.hasOwnProperty(g)&&null!=f&&lg(e,g));switch(b){case \"input\":Bc(a);Pf(a,c);break;case \"textarea\":Bc(a);Xf(a,c);break;case \"select\":case \"option\":break;default:\"function\"===typeof c.onClick&&\n(a.onclick=C)}return d}function vg(a,b){return a.nodeValue!==b}\nvar wg=Object.freeze({createElement:ng,createTextNode:og,setInitialProperties:pg,diffProperties:sg,updateProperties:tg,diffHydratedProperties:ug,diffHydratedText:vg,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(a,b,c){switch(b){case \"input\":Of(a,c);b=c.name;if(\"radio\"===c.type&&null!=b){for(c=a;c.parentNode;)c=\nc.parentNode;c=c.querySelectorAll(\"input[name\\x3d\"+JSON.stringify(\"\"+b)+'][type\\x3d\"radio\"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=rb(d);e?void 0:E(\"90\");Cc(d);Of(d,e)}}}break;case \"textarea\":Wf(a,c);break;case \"select\":b=c.value,null!=b&&Sf(a,!!c.multiple,b,!1)}}});nc.injectFiberControlledHostComponent(wg);var xg=null,Mg=null;function Ng(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||\" react-mount-point-unstable \"!==a.nodeValue))}\nfunction Og(a){a=a?9===a.nodeType?a.documentElement:a.firstChild:null;return!(!a||1!==a.nodeType||!a.hasAttribute(\"data-reactroot\"))}\nvar Z=of({getRootHostContext:function(a){var b=a.nodeType;switch(b){case 9:case 11:a=(a=a.documentElement)?a.namespaceURI:$f(null,\"\");break;default:b=8===b?a.parentNode:a,a=b.namespaceURI||null,b=b.tagName,a=$f(a,b)}return a},getChildHostContext:function(a,b){return $f(a,b)},getPublicInstance:function(a){return a},prepareForCommit:function(){xg=td;var a=da();if(Kd(a)){if(\"selectionStart\"in a)var b={start:a.selectionStart,end:a.selectionEnd};else a:{var c=window.getSelection&&window.getSelection();\nif(c&&0!==c.rangeCount){b=c.anchorNode;var d=c.anchorOffset,e=c.focusNode;c=c.focusOffset;try{b.nodeType,e.nodeType}catch(z){b=null;break a}var f=0,g=-1,h=-1,k=0,q=0,v=a,y=null;b:for(;;){for(var u;;){v!==b||0!==d&&3!==v.nodeType||(g=f+d);v!==e||0!==c&&3!==v.nodeType||(h=f+c);3===v.nodeType&&(f+=v.nodeValue.length);if(null===(u=v.firstChild))break;y=v;v=u}for(;;){if(v===a)break b;y===b&&++k===d&&(g=f);y===e&&++q===c&&(h=f);if(null!==(u=v.nextSibling))break;v=y;y=v.parentNode}v=u}b=-1===g||-1===h?null:\n{start:g,end:h}}else b=null}b=b||{start:0,end:0}}else b=null;Mg={focusedElem:a,selectionRange:b};ud(!1)},resetAfterCommit:function(){var a=Mg,b=da(),c=a.focusedElem,d=a.selectionRange;if(b!==c&&fa(document.documentElement,c)){if(Kd(c))if(b=d.start,a=d.end,void 0===a&&(a=b),\"selectionStart\"in c)c.selectionStart=b,c.selectionEnd=Math.min(a,c.value.length);else if(window.getSelection){b=window.getSelection();var e=c[Eb()].length;a=Math.min(d.start,e);d=void 0===d.end?a:Math.min(d.end,e);!b.extend&&a>\nd&&(e=d,d=a,a=e);e=Jd(c,a);var f=Jd(c,d);if(e&&f&&(1!==b.rangeCount||b.anchorNode!==e.node||b.anchorOffset!==e.offset||b.focusNode!==f.node||b.focusOffset!==f.offset)){var g=document.createRange();g.setStart(e.node,e.offset);b.removeAllRanges();a>d?(b.addRange(g),b.extend(f.node,f.offset)):(g.setEnd(f.node,f.offset),b.addRange(g))}}b=[];for(a=c;a=a.parentNode;)1===a.nodeType&&b.push({element:a,left:a.scrollLeft,top:a.scrollTop});ia(c);for(c=0;c<b.length;c++)a=b[c],a.element.scrollLeft=a.left,a.element.scrollTop=\na.top}Mg=null;ud(xg);xg=null},createInstance:function(a,b,c,d,e){a=ng(a,b,c,d);a[Q]=e;a[ob]=b;return a},appendInitialChild:function(a,b){a.appendChild(b)},finalizeInitialChildren:function(a,b,c,d){pg(a,b,c,d);a:{switch(b){case \"button\":case \"input\":case \"select\":case \"textarea\":a=!!c.autoFocus;break a}a=!1}return a},prepareUpdate:function(a,b,c,d,e){return sg(a,b,c,d,e)},shouldSetTextContent:function(a,b){return\"textarea\"===a||\"string\"===typeof b.children||\"number\"===typeof b.children||\"object\"===\ntypeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&\"string\"===typeof b.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(a,b){return!!b.hidden},createTextInstance:function(a,b,c,d){a=og(a,b);a[Q]=d;return a},now:rf,mutation:{commitMount:function(a){a.focus()},commitUpdate:function(a,b,c,d,e){a[ob]=e;tg(a,b,c,d,e)},resetTextContent:function(a){a.textContent=\"\"},commitTextUpdate:function(a,b,c){a.nodeValue=c},appendChild:function(a,b){a.appendChild(b)},appendChildToContainer:function(a,\nb){8===a.nodeType?a.parentNode.insertBefore(b,a):a.appendChild(b)},insertBefore:function(a,b,c){a.insertBefore(b,c)},insertInContainerBefore:function(a,b,c){8===a.nodeType?a.parentNode.insertBefore(b,c):a.insertBefore(b,c)},removeChild:function(a,b){a.removeChild(b)},removeChildFromContainer:function(a,b){8===a.nodeType?a.parentNode.removeChild(b):a.removeChild(b)}},hydration:{canHydrateInstance:function(a,b){return 1!==a.nodeType||b.toLowerCase()!==a.nodeName.toLowerCase()?null:a},canHydrateTextInstance:function(a,\nb){return\"\"===b||3!==a.nodeType?null:a},getNextHydratableSibling:function(a){for(a=a.nextSibling;a&&1!==a.nodeType&&3!==a.nodeType;)a=a.nextSibling;return a},getFirstHydratableChild:function(a){for(a=a.firstChild;a&&1!==a.nodeType&&3!==a.nodeType;)a=a.nextSibling;return a},hydrateInstance:function(a,b,c,d,e,f){a[Q]=f;a[ob]=c;return ug(a,b,c,e,d)},hydrateTextInstance:function(a,b,c){a[Q]=c;return vg(a,b)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},\ndidNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:sf,cancelDeferredCallback:tf,useSyncScheduling:!0});rc=Z.batchedUpdates;\nfunction Pg(a,b,c,d,e){Ng(c)?void 0:E(\"200\");var f=c._reactRootContainer;if(f)Z.updateContainer(b,f,a,e);else{d=d||Og(c);if(!d)for(f=void 0;f=c.lastChild;)c.removeChild(f);var g=Z.createContainer(c,d);f=c._reactRootContainer=g;Z.unbatchedUpdates(function(){Z.updateContainer(b,g,a,e)})}return Z.getPublicRootInstance(f)}function Qg(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;Ng(b)?void 0:E(\"200\");return pf(a,b,null,c)}\nfunction Rg(a,b){this._reactRootContainer=Z.createContainer(a,b)}Rg.prototype.render=function(a,b){Z.updateContainer(a,this._reactRootContainer,null,b)};Rg.prototype.unmount=function(a){Z.updateContainer(null,this._reactRootContainer,null,a)};\nvar Sg={createPortal:Qg,findDOMNode:function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternalFiber;if(b)return Z.findHostInstance(b);\"function\"===typeof a.render?E(\"188\"):E(\"213\",Object.keys(a))},hydrate:function(a,b,c){return Pg(null,a,b,!0,c)},render:function(a,b,c){return Pg(null,a,b,!1,c)},unstable_renderSubtreeIntoContainer:function(a,b,c,d){null==a||void 0===a._reactInternalFiber?E(\"38\"):void 0;return Pg(a,b,c,!1,d)},unmountComponentAtNode:function(a){Ng(a)?void 0:\nE(\"40\");return a._reactRootContainer?(Z.unbatchedUpdates(function(){Pg(null,null,a,!1,function(){a._reactRootContainer=null})}),!0):!1},unstable_createPortal:Qg,unstable_batchedUpdates:tc,unstable_deferredUpdates:Z.deferredUpdates,flushSync:Z.flushSync,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:mb,EventPluginRegistry:Va,EventPropagators:Cb,ReactControlledComponent:qc,ReactDOMComponentTree:sb,ReactDOMEventListener:xd}};\nZ.injectIntoDevTools({findFiberByHostInstance:pb,bundleType:0,version:\"16.2.0\",rendererPackageName:\"react-dom\"});var Tg=Object.freeze({default:Sg}),Ug=Tg&&Sg||Tg;module.exports=Ug[\"default\"]?Ug[\"default\"]:Ug;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/react-dom/cjs/react-dom.production.min.js\n// module id = 32\n// module chunks = 0 1 2","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n\n/**\n * Simple, lightweight module assisting with the detection and context of\n * Worker. Helps avoid circular dependencies and allows code to reason about\n * whether or not they are in a Worker, even if they never include the main\n * `ReactWorker` dependency.\n */\nvar ExecutionEnvironment = {\n\n  canUseDOM: canUseDOM,\n\n  canUseWorkers: typeof Worker !== 'undefined',\n\n  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),\n\n  canUseViewport: canUseDOM && !!window.screen,\n\n  isInWorker: !canUseDOM // For now, this is true - might change in the future.\n\n};\n\nmodule.exports = ExecutionEnvironment;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/fbjs/lib/ExecutionEnvironment.js\n// module id = 33\n// module chunks = 0 1 2","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\nvar emptyFunction = require('./emptyFunction');\n\n/**\n * Upstream version of event listener. Does not take into account specific\n * nature of platform.\n */\nvar EventListener = {\n  /**\n   * Listen to DOM events during the bubble phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  listen: function listen(target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, false);\n      return {\n        remove: function remove() {\n          target.removeEventListener(eventType, callback, false);\n        }\n      };\n    } else if (target.attachEvent) {\n      target.attachEvent('on' + eventType, callback);\n      return {\n        remove: function remove() {\n          target.detachEvent('on' + eventType, callback);\n        }\n      };\n    }\n  },\n\n  /**\n   * Listen to DOM events during the capture phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  capture: function capture(target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, true);\n      return {\n        remove: function remove() {\n          target.removeEventListener(eventType, callback, true);\n        }\n      };\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');\n      }\n      return {\n        remove: emptyFunction\n      };\n    }\n  },\n\n  registerDefault: function registerDefault() {}\n};\n\nmodule.exports = EventListener;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/fbjs/lib/EventListener.js\n// module id = 34\n// module chunks = 0 1 2","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\n/* eslint-disable fb-www/typeof-undefined */\n\n/**\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\n * not safe to call document.activeElement if there is nothing focused.\n *\n * The activeElement will be null only if the document or document body is not\n * yet defined.\n *\n * @param {?DOMDocument} doc Defaults to current document.\n * @return {?DOMElement}\n */\nfunction getActiveElement(doc) /*?DOMElement*/{\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\n  if (typeof doc === 'undefined') {\n    return null;\n  }\n  try {\n    return doc.activeElement || doc.body;\n  } catch (e) {\n    return doc.body;\n  }\n}\n\nmodule.exports = getActiveElement;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/fbjs/lib/getActiveElement.js\n// module id = 35\n// module chunks = 0 1 2","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n * \n */\n\n/*eslint-disable no-self-compare */\n\n'use strict';\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x, y) {\n  // SameValue algorithm\n  if (x === y) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    // Added the nonzero y check to make Flow happy, but it is redundant\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;\n  } else {\n    // Step 6.a: NaN == NaN\n    return x !== x && y !== y;\n  }\n}\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA, objB) {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  for (var i = 0; i < keysA.length; i++) {\n    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nmodule.exports = shallowEqual;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/fbjs/lib/shallowEqual.js\n// module id = 36\n// module chunks = 0 1 2","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar isTextNode = require('./isTextNode');\n\n/*eslint-disable no-bitwise */\n\n/**\n * Checks if a given DOM node contains or is another DOM node.\n */\nfunction containsNode(outerNode, innerNode) {\n  if (!outerNode || !innerNode) {\n    return false;\n  } else if (outerNode === innerNode) {\n    return true;\n  } else if (isTextNode(outerNode)) {\n    return false;\n  } else if (isTextNode(innerNode)) {\n    return containsNode(outerNode, innerNode.parentNode);\n  } else if ('contains' in outerNode) {\n    return outerNode.contains(innerNode);\n  } else if (outerNode.compareDocumentPosition) {\n    return !!(outerNode.compareDocumentPosition(innerNode) & 16);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = containsNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/fbjs/lib/containsNode.js\n// module id = 37\n// module chunks = 0 1 2","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\nvar isNode = require('./isNode');\n\n/**\n * @param {*} object The object to check.\n * @return {boolean} Whether or not the object is a DOM text node.\n */\nfunction isTextNode(object) {\n  return isNode(object) && object.nodeType == 3;\n}\n\nmodule.exports = isTextNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/fbjs/lib/isTextNode.js\n// module id = 38\n// module chunks = 0 1 2","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\n/**\n * @param {*} object The object to check.\n * @return {boolean} Whether or not the object is a DOM node.\n */\nfunction isNode(object) {\n  var doc = object ? object.ownerDocument || object : document;\n  var defaultView = doc.defaultView || window;\n  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));\n}\n\nmodule.exports = isNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/fbjs/lib/isNode.js\n// module id = 39\n// module chunks = 0 1 2","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\n/**\n * @param {DOMElement} node input/textarea to focus\n */\n\nfunction focusNode(node) {\n  // IE8 can throw \"Can't move focus to the control because it is invisible,\n  // not enabled, or of a type that does not accept the focus.\" for all kinds of\n  // reasons that are too expensive and fragile to test.\n  try {\n    node.focus();\n  } catch (e) {}\n}\n\nmodule.exports = focusNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/fbjs/lib/focusNode.js\n// module id = 40\n// module chunks = 0 1 2","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_an-object.js\n// module id = 41\n// module chunks = 0","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_fails.js\n// module id = 42\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 43\n// module chunks = 0 1 2","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./style.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {\"hmr\":true}\noptions.transform = transform\n// add the styles to the DOM\nvar update = require(\"!./node_modules/style-loader/lib/addStyles.js\")(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./style.scss\", function() {\n\t\t\tvar newContent = require(\"!!./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./style.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./style.scss\n// module id = 44\n// module chunks = 0 1 2","exports = module.exports = require(\"./node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \"#app {\\n  max-width: 900px;\\n  margin: 0 auto; }\\n\\n.pull-right {\\n  float: right; }\\n\\n.calc-ui {\\n  box-sizing: border-box; }\\n  .calc-ui .gui-line {\\n    font-family: monospace; }\\n    .calc-ui .gui-line.unit-complete input {\\n      font-family: monospace;\\n      font-size: inherit;\\n      border: 1px solid gray;\\n      padding: 4px; }\\n    .calc-ui .gui-line.unit-complete .prompt,\\n    .calc-ui .gui-line.unit-complete .inline-response {\\n      padding-top: 4px;\\n      padding-bottom: 4px; }\\n    .calc-ui .gui-line.unit-complete .inline-query,\\n    .calc-ui .gui-line.unit-complete .inline-response {\\n      display: inline-block;\\n      vertical-align: text-top; }\\n    .calc-ui .gui-line.unit-complete .dropdown-menu {\\n      margin: 0;\\n      list-style: none;\\n      padding-left: 0;\\n      padding: 1ex;\\n      position: absolute;\\n      max-height: 300px;\\n      background-color: white;\\n      border: 1px solid black;\\n      box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.3);\\n      overflow-y: auto;\\n      border-radius: 5px; }\\n\\n.tagged-string-display {\\n  font-family: monospace;\\n  white-space: pre-wrap; }\\n\\na.unit-href, a.unit-href:visited, a.unit-href:hover, a.unit-href:active {\\n  color: #0000ee; }\\n\\n.gnu-units-categorize ::selection {\\n  background-color: #cff; }\\n\\n.gnu-rewrite-test {\\n  white-space: pre; }\\n  .gnu-rewrite-test .clickable {\\n    cursor: pointer; }\\n  .gnu-rewrite-test ul.table-of-contents {\\n    list-style: none; }\\n    .gnu-rewrite-test ul.table-of-contents .toc-line {\\n      text-indent: -2em;\\n      padding-left: 2em; }\\n  .gnu-rewrite-test .deleted-box {\\n    font-style: italic;\\n    color: gray; }\\n  .gnu-rewrite-test .normal-box {\\n    display: inline-block; }\\n    .gnu-rewrite-test .normal-box.well {\\n      margin-bottom: 0; }\\n    .gnu-rewrite-test .normal-box td {\\n      padding: 8px; }\\n    .gnu-rewrite-test .normal-box .content,\\n    .gnu-rewrite-test .normal-box .comment {\\n      float: left; }\\n    .gnu-rewrite-test .normal-box .comment {\\n      margin-left: 1em;\\n      margin-bottom: 0; }\\n\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!./style.scss\n// module id = 45\n// module chunks = 0 1 2","\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports = function (css) {\n  // get current location\n  var location = typeof window !== \"undefined\" && window.location;\n\n  if (!location) {\n    throw new Error(\"fixUrls requires window.location\");\n  }\n\n\t// blank or null?\n\tif (!css || typeof css !== \"string\") {\n\t  return css;\n  }\n\n  var baseUrl = location.protocol + \"//\" + location.host;\n  var currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, \"/\");\n\n\t// convert each url(...)\n\t/*\n\tThis regular expression is just a way to recursively match brackets within\n\ta string.\n\n\t /url\\s*\\(  = Match on the word \"url\" with any whitespace after it and then a parens\n\t   (  = Start a capturing group\n\t     (?:  = Start a non-capturing group\n\t         [^)(]  = Match anything that isn't a parentheses\n\t         |  = OR\n\t         \\(  = Match a start parentheses\n\t             (?:  = Start another non-capturing groups\n\t                 [^)(]+  = Match anything that isn't a parentheses\n\t                 |  = OR\n\t                 \\(  = Match a start parentheses\n\t                     [^)(]*  = Match anything that isn't a parentheses\n\t                 \\)  = Match a end parentheses\n\t             )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n\t \\)  = Match a close parens\n\n\t /gi  = Get all matches, not the first.  Be case insensitive.\n\t */\n\tvar fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function(fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl = origUrl\n\t\t\t.trim()\n\t\t\t.replace(/^\"(.*)\"$/, function(o, $1){ return $1; })\n\t\t\t.replace(/^'(.*)'$/, function(o, $1){ return $1; });\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/)/i.test(unquotedOrigUrl)) {\n\t\t  return fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf(\"//\") === 0) {\n\t\t  \t//TODO: should we add protocol?\n\t\t\tnewUrl = unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf(\"/\") === 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with '/'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, \"\"); // Strip leading './'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn \"url(\" + JSON.stringify(newUrl) + \")\";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/style-loader/lib/urls.js\n// module id = 46\n// module chunks = 0 1 2","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_property-desc.js\n// module id = 47\n// module chunks = 0","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_object-keys.js\n// module id = 48\n// module chunks = 0","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_uid.js\n// module id = 49\n// module chunks = 0","exports.f = {}.propertyIsEnumerable;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_object-pie.js\n// module id = 50\n// module chunks = 0","\"use strict\";\n\nexports.__esModule = true;\n\nvar _iterator = require(\"../core-js/symbol/iterator\");\n\nvar _iterator2 = _interopRequireDefault(_iterator);\n\nvar _symbol = require(\"../core-js/symbol\");\n\nvar _symbol2 = _interopRequireDefault(_symbol);\n\nvar _typeof = typeof _symbol2.default === \"function\" && typeof _iterator2.default === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = typeof _symbol2.default === \"function\" && _typeof(_iterator2.default) === \"symbol\" ? function (obj) {\n  return typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n} : function (obj) {\n  return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/helpers/typeof.js\n// module id = 51\n// module chunks = 0","import Decimal from \"decimal.js\";\nimport DimensionMap from \"./DimensionMap\";\nimport Dimension from \"./Dimension\";\nimport SpecialUnitNumber from \"./SpecialUnitNumber\";\nimport { TaggedString } from \"../output\";\n\nfunction dimensionMismatch(\n\ta: DimensionMap,\n\tb: DimensionMap,\n\tdiff: DimensionMap,\n) {\n\tthrow Error(\n\t\t`Dimensions don't match (${a.toString()} vs ${b.toString() || 1}): ` +\n\t\t\tdiff.toMismatchString(),\n\t);\n}\n\nexport default class UnitNumber {\n\tstatic zero = new UnitNumber(0);\n\tstatic one = new UnitNumber(1);\n\tstatic minusOne = new UnitNumber(-1);\n\t// @ts-ignore\n\treadonly value: Decimal;\n\t// @ts-ignore\n\treadonly dimensions: DimensionMap;\n\treadonly id: string | null;\n\tconstructor(\n\t\tvalue: Decimal | number | string,\n\t\tdimensions: DimensionMap = new DimensionMap(),\n\t\tid?: string | null,\n\t) {\n\t\t// null in specialunitnumber\n\t\tif (value !== null) this.value = new Decimal(value);\n\t\tif (dimensions !== null) this.dimensions = dimensions;\n\t\tthis.id = id === undefined ? null : id;\n\t}\n\tmul(other: UnitNumber): UnitNumber {\n\t\tif (other.isSpecial()) return other.mul(this, true);\n\t\treturn new UnitNumber(\n\t\t\tthis.value.times(other.value),\n\t\t\tDimensionMap.join(\n\t\t\t\t{ dimensions: this.dimensions, factor: 1 },\n\t\t\t\t{ dimensions: other.dimensions, factor: 1 },\n\t\t\t),\n\t\t\tnull,\n\t\t);\n\t}\n\tdiv(other: UnitNumber): UnitNumber {\n\t\tif (other.isSpecial()) return other.div(this, true);\n\t\tlet name: string | null = null;\n\t\t//if (this.dimensions.size == 0 && other.dimensions.size == 0)\n\t\t//\tname = this.value.toString() + \"|\" + other.value.toString();\n\t\treturn new UnitNumber(\n\t\t\tthis.value.div(other.value),\n\t\t\tDimensionMap.join(\n\t\t\t\t{ dimensions: this.dimensions, factor: 1 },\n\t\t\t\t{ dimensions: other.dimensions, factor: -1 },\n\t\t\t),\n\t\t\tname,\n\t\t);\n\t}\n\tplus(other: UnitNumber, factor = 1): UnitNumber {\n\t\tif (other.isSpecial()) return other.plus(this, factor, true);\n\t\tconst dimensionDifference = this.div(other).dimensions;\n\t\tif (dimensionDifference.size > 0)\n\t\t\tthrow dimensionMismatch(\n\t\t\t\tthis.dimensions,\n\t\t\t\tother.dimensions,\n\t\t\t\tdimensionDifference,\n\t\t\t);\n\t\treturn new UnitNumber(\n\t\t\tthis.value.plus(other.value.times(factor)),\n\t\t\tthis.dimensions,\n\t\t);\n\t}\n\tminus(other: UnitNumber) {\n\t\treturn this.plus(other, -1);\n\t}\n\tmemberFunctionHasSideeffects<K extends keyof this>(\n\t\tmember: K,\n\t\tother: UnitNumber,\n\t): boolean {\n\t\tif (other.isSpecial())\n\t\t\treturn other.memberFunctionHasSideeffects(member as any, this);\n\t\treturn false;\n\t}\n\twithIdentifier(id: string) {\n\t\treturn new UnitNumber(this.value, this.dimensions, id);\n\t}\n\tisSpecial(): this is SpecialUnitNumber {\n\t\treturn false;\n\t}\n\tassign(_unit: UnitNumber) {\n\t\tthrow Error(\"Can't assign value to \" + this);\n\t}\n\ttoString(): string {\n\t\tif (this.id) return this.id;\n\t\telse return this.toTaggedString().toString();\n\t}\n\ttoTaggedString() {\n\t\tif (this.id) return new TaggedString(this);\n\t\telse {\n\t\t\tif (this.value.equals(1) && this.dimensions.size == 0)\n\t\t\t\treturn new TaggedString(\"1\");\n\t\t\tconst v = this.value.equals(1) ? \"\" : this.value.toPrecision(10);\n\t\t\treturn TaggedString.t`${v}${\n\t\t\t\tv && this.dimensions.size > 0 ? \" \" : \"\"\n\t\t\t}${this.dimensions.toTaggedString()}`;\n\t\t}\n\t}\n\tpow(factor: number | Decimal | UnitNumber): UnitNumber {\n\t\tif (typeof factor === \"number\" || factor instanceof Decimal)\n\t\t\treturn new UnitNumber(\n\t\t\t\tthis.value.pow(factor),\n\t\t\t\tDimensionMap.join({\n\t\t\t\t\tdimensions: this.dimensions,\n\t\t\t\t\tfactor:\n\t\t\t\t\t\ttypeof factor === \"number\" ? factor : factor.toNumber(),\n\t\t\t\t}),\n\t\t\t);\n\t\telse if (factor.isSpecial()) return factor.pow(this, true);\n\t\telse if (factor.dimensions.size > 0)\n\t\t\tthrow Error(\"power must be dimensionless\");\n\t\telse return this.pow(factor.value);\n\t}\n\tconvertTo(unit: UnitNumber): UnitNumber {\n\t\tconst d = this.div(unit);\n\t\tif (d.dimensions.size > 0)\n\t\t\tthrow Error(\n\t\t\t\t\"Dimensions don't match: \" + d.dimensions.toMismatchString(),\n\t\t\t);\n\t\treturn d.mul(unit);\n\t}\n\tstatic createBaseUnit(dimensionName: string) {\n\t\treturn new Dimension(dimensionName).baseUnit;\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/unitNumber/UnitNumber.ts","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_to-primitive.js\n// module id = 53\n// module chunks = 0","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_defined.js\n// module id = 54\n// module chunks = 0","// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_to-integer.js\n// module id = 55\n// module chunks = 0","var shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_shared-key.js\n// module id = 56\n// module chunks = 0","var global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\nmodule.exports = function (key) {\n  return store[key] || (store[key] = {});\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_shared.js\n// module id = 57\n// module chunks = 0","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_enum-bug-keys.js\n// module id = 58\n// module chunks = 0","exports.f = Object.getOwnPropertySymbols;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_object-gops.js\n// module id = 59\n// module chunks = 0","module.exports = true;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_library.js\n// module id = 60\n// module chunks = 0","module.exports = {};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_iterators.js\n// module id = 61\n// module chunks = 0","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_object-create.js\n// module id = 62\n// module chunks = 0","var def = require('./_object-dp').f;\nvar has = require('./_has');\nvar TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_set-to-string-tag.js\n// module id = 63\n// module chunks = 0","exports.f = require('./_wks');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_wks-ext.js\n// module id = 64\n// module chunks = 0","var global = require('./_global');\nvar core = require('./_core');\nvar LIBRARY = require('./_library');\nvar wksExt = require('./_wks-ext');\nvar defineProperty = require('./_object-dp').f;\nmodule.exports = function (name) {\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_wks-define.js\n// module id = 65\n// module chunks = 0","\"use strict\";\n\nexports.__esModule = true;\n\nvar _defineProperty = require(\"../core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      (0, _defineProperty2.default)(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/helpers/createClass.js\n// module id = 66\n// module chunks = 0","import Dimension, { DimensionId } from \"./Dimension\";\nimport { TaggedString } from \"../output\";\n\n/**\n * maps from dimension id to exponent\n * e.g.  m/s^2 has dimension map {m => 1, s => -2}\n */\nexport default class DimensionMap extends Map<DimensionId, number> {\n\tprivate static unicodePow = \"⁰¹²³⁴⁵⁶⁷⁸⁹\";\n\tstatic toUnicodePow(x: number) {\n\t\tif (x === 1) return \"\";\n\t\treturn x\n\t\t\t.toString()\n\t\t\t.split(\"\")\n\t\t\t.map(x => (x === \".\" ? \"⋅\" : DimensionMap.unicodePow[+x]))\n\t\t\t.join(\"\");\n\t}\n\tstatic listToUnicodePow(entries: [DimensionId, number][]): TaggedString {\n\t\treturn TaggedString.join(\n\t\t\tentries.map(\n\t\t\t\t([id, exp]) =>\n\t\t\t\t\tTaggedString.t`${\n\t\t\t\t\t\tDimension.get(id)!.baseUnit\n\t\t\t\t\t}${DimensionMap.toUnicodePow(exp)}`,\n\t\t\t),\n\t\t\t\" \",\n\t\t);\n\t}\n\ttoString(): string {\n\t\treturn this.toTaggedString() + \"\";\n\t}\n\ttoTaggedString(): TaggedString {\n\t\tconst { pos, neg } = this.splitPosNeg();\n\t\tlet str = DimensionMap.listToUnicodePow(pos);\n\t\tif (neg.length > 0) {\n\t\t\tstr.vals.push(\" / \");\n\t\t\tstr.append(DimensionMap.listToUnicodePow(neg));\n\t\t}\n\t\treturn str;\n\t}\n\tsplitPosNeg() {\n\t\tconst pos = [...this].filter(([_id, exp]) => exp > 0);\n\t\tconst neg = [...this].filter(([_id, exp]) => exp < 0);\n\t\tneg.forEach(x => (x[1] *= -1));\n\t\treturn { pos, neg };\n\t}\n\tstatic join(...list: { dimensions: DimensionMap; factor: number }[]) {\n\t\tconst map: DimensionMap = new DimensionMap();\n\t\tfor (const { dimensions, factor } of list) {\n\t\t\tfor (const [dimension, exponent] of dimensions) {\n\t\t\t\tconst newFactor = (map.get(dimension) || 0) + exponent * factor;\n\t\t\t\tif (newFactor === 0) map.delete(dimension);\n\t\t\t\telse map.set(dimension, newFactor);\n\t\t\t}\n\t\t}\n\t\treturn map;\n\t}\n\tassertEmpty(str = \"\") {\n\t\tif (this.size > 0) throw Error(str + \" must be dimensionless\");\n\t}\n\tequals(d: DimensionMap) {\n\t\tconst diff = DimensionMap.join(\n\t\t\t{ dimensions: this, factor: 1 },\n\t\t\t{ dimensions: d, factor: -1 },\n\t\t);\n\t\treturn diff.size === 0;\n\t}\n\tassertEqual(d: DimensionMap) {\n\t\tif (!this.equals(d)) throw Error(\"dimensions must be the same\");\n\t}\n\ttoMismatchString() {\n\t\tconst { pos: tooMuch, neg: notEnough } = this.splitPosNeg();\n\t\tif (tooMuch.length === 0)\n\t\t\treturn \"missing \" + new DimensionMap(notEnough);\n\t\tif (notEnough.length === 0)\n\t\t\treturn \"don't want \" + new DimensionMap(tooMuch);\n\t\treturn `have ${new DimensionMap(tooMuch)}, want ${new DimensionMap(\n\t\t\tnotEnough,\n\t\t)}`;\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/unitNumber/DimensionMap.ts","import UnitNumber from \"./UnitNumber\";\nimport DimensionMap from \"./DimensionMap\";\n\nexport default class Dimension {\n\tprivate static dimensions = new Map<DimensionId, Dimension>();\n\tstatic get(id: DimensionId) {\n\t\treturn Dimension.dimensions.get(id);\n\t}\n\treadonly id: DimensionId;\n\treadonly name: string;\n\treadonly baseUnit: UnitNumber;\n\tconstructor(name: string) {\n\t\tthis.id = Dimension.dimensions.size as DimensionId;\n\t\tthis.name = name;\n\t\tDimension.dimensions.set(this.id, this);\n\t\tthis.baseUnit = new UnitNumber(\n\t\t\t1,\n\t\t\tnew DimensionMap([[this.id, 1]]),\n\t\t\tthis.name,\n\t\t);\n\t}\n}\n\n// <hack href=\"https://github.com/Microsoft/TypeScript/issues/202\">\nnamespace AsDimensionId {\n\texport const enum Brand {}\n}\ninterface AsDimensionId {\n\t\"\": AsDimensionId.Brand;\n}\nexport type DimensionId = number & AsDimensionId;\n// </hack>\n\n\n\n// WEBPACK FOOTER //\n// ./src/unitNumber/Dimension.ts","import * as load from \"./load\";\nimport scope from \"./globalScope\";\n\nimport { internalFunctions } from \"./functions\";\n\nlet inited = false;\nexport default function init() {\n\tif (inited) return;\n\tinited = true;\n\n\tif (typeof window === \"undefined\") {\n\t\t// running in node\n\n\t\tconst fs = require(\"fs\");\n\t\tvar gnuUnitsData = JSON.parse(\n\t\t\tfs.readFileSync(__dirname + \"/../../data/gnu-units.json\", \"utf8\"),\n\t\t);\n\t\tvar customData = fs.readFileSync(\n\t\t\t__dirname + \"/../../data/custom_data.txt\",\n\t\t\t\"utf8\",\n\t\t);\n\t} else {\n\t\t// running in webpack\n\t\tvar gnuUnitsData = require(\"../../data/gnu-units.json\");\n\t\tvar customData = require(\"../../data/custom_data.txt\");\n\t}\n\n\tscope.addFunctions(...internalFunctions);\n\tload.loadUnitsJson(scope, \"units.json\", gnuUnitsData);\n\tload.loadUnitsTxt(scope, \"custom_data.txt\", customData, true);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/libqalc/init.ts","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_ctx.js\n// module id = 73\n// module chunks = 0","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_ie8-dom-define.js\n// module id = 74\n// module chunks = 0","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_dom-create.js\n// module id = 75\n// module chunks = 0","var has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_object-keys-internal.js\n// module id = 76\n// module chunks = 0","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_iobject.js\n// module id = 77\n// module chunks = 0","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_cof.js\n// module id = 78\n// module chunks = 0","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_to-object.js\n// module id = 79\n// module chunks = 0","\"use strict\";\n\nexports.__esModule = true;\n\nexports.default = function (obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/helpers/objectWithoutProperties.js\n// module id = 80\n// module chunks = 0","'use strict';\nvar LIBRARY = require('./_library');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar Iterators = require('./_iterators');\nvar $iterCreate = require('./_iter-create');\nvar setToStringTag = require('./_set-to-string-tag');\nvar getPrototypeOf = require('./_object-gpo');\nvar ITERATOR = require('./_wks')('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = (!BUGGY && $native) || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_iter-define.js\n// module id = 81\n// module chunks = 0","module.exports = require('./_hide');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_redefine.js\n// module id = 82\n// module chunks = 0","// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = require('./_object-keys-internal');\nvar hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_object-gopn.js\n// module id = 83\n// module chunks = 0","var pIE = require('./_object-pie');\nvar createDesc = require('./_property-desc');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar has = require('./_has');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_object-gopd.js\n// module id = 84\n// module chunks = 0","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function validateFormat(format) {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports = invariant;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/fbjs/lib/invariant.js\n// module id = 85\n// module chunks = 0","import addDOMEventListener from 'add-dom-event-listener';\nimport ReactDOM from 'react-dom';\n\nexport default function addEventListenerWrap(target, eventType, cb) {\n  /* eslint camelcase: 2 */\n  var callback = ReactDOM.unstable_batchedUpdates ? function run(e) {\n    ReactDOM.unstable_batchedUpdates(cb, e);\n  } : cb;\n  return addDOMEventListener(target, eventType, callback);\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rc-util/es/Dom/addEventListener.js\n// module id = 86\n// module chunks = 0","import utils from './utils';\n\n/**\n * 得到会导致元素显示不全的祖先元素\n */\n\nfunction getOffsetParent(element) {\n  if (utils.isWindow(element) || element.nodeType === 9) {\n    return null;\n  }\n  // ie 这个也不是完全可行\n  /*\n   <div style=\"width: 50px;height: 100px;overflow: hidden\">\n   <div style=\"width: 50px;height: 100px;position: relative;\" id=\"d6\">\n   元素 6 高 100px 宽 50px<br/>\n   </div>\n   </div>\n   */\n  // element.offsetParent does the right thing in ie7 and below. Return parent with layout!\n  //  In other browsers it only includes elements with position absolute, relative or\n  // fixed, not elements with overflow set to auto or scroll.\n  //        if (UA.ie && ieMode < 8) {\n  //            return element.offsetParent;\n  //        }\n  // 统一的 offsetParent 方法\n  var doc = utils.getDocument(element);\n  var body = doc.body;\n  var parent = void 0;\n  var positionStyle = utils.css(element, 'position');\n  var skipStatic = positionStyle === 'fixed' || positionStyle === 'absolute';\n\n  if (!skipStatic) {\n    return element.nodeName.toLowerCase() === 'html' ? null : element.parentNode;\n  }\n\n  for (parent = element.parentNode; parent && parent !== body; parent = parent.parentNode) {\n    positionStyle = utils.css(parent, 'position');\n    if (positionStyle !== 'static') {\n      return parent;\n    }\n  }\n  return null;\n}\n\nexport default getOffsetParent;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dom-align/es/getOffsetParent.js\n// module id = 87\n// module chunks = 0","module.exports = { \"default\": require(\"core-js/library/fn/object/define-property\"), __esModule: true };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/core-js/object/define-property.js\n// module id = 88\n// module chunks = 0","module.exports = function(arr, obj){\n  if (arr.indexOf) return arr.indexOf(obj);\n  for (var i = 0; i < arr.length; ++i) {\n    if (arr[i] === obj) return i;\n  }\n  return -1;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/component-indexof/index.js\n// module id = 89\n// module chunks = 0","var util = {\n  isAppearSupported: function isAppearSupported(props) {\n    return props.transitionName && props.transitionAppear || props.animation.appear;\n  },\n  isEnterSupported: function isEnterSupported(props) {\n    return props.transitionName && props.transitionEnter || props.animation.enter;\n  },\n  isLeaveSupported: function isLeaveSupported(props) {\n    return props.transitionName && props.transitionLeave || props.animation.leave;\n  },\n  allowAppearCallback: function allowAppearCallback(props) {\n    return props.transitionAppear || props.animation.appear;\n  },\n  allowEnterCallback: function allowEnterCallback(props) {\n    return props.transitionEnter || props.animation.enter;\n  },\n  allowLeaveCallback: function allowLeaveCallback(props) {\n    return props.transitionLeave || props.animation.leave;\n  }\n};\nexport default util;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rc-animate/es/util.js\n// module id = 90\n// module chunks = 0","import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nvar LazyRenderBox = function (_Component) {\n  _inherits(LazyRenderBox, _Component);\n\n  function LazyRenderBox() {\n    _classCallCheck(this, LazyRenderBox);\n\n    return _possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  LazyRenderBox.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n    return nextProps.hiddenClassName || nextProps.visible;\n  };\n\n  LazyRenderBox.prototype.render = function render() {\n    var _props = this.props,\n        hiddenClassName = _props.hiddenClassName,\n        visible = _props.visible,\n        props = _objectWithoutProperties(_props, ['hiddenClassName', 'visible']);\n\n    if (hiddenClassName || React.Children.count(props.children) > 1) {\n      if (!visible && hiddenClassName) {\n        props.className += ' ' + hiddenClassName;\n      }\n      return React.createElement('div', props);\n    }\n\n    return React.Children.only(props.children);\n  };\n\n  return LazyRenderBox;\n}(Component);\n\nLazyRenderBox.propTypes = {\n  children: PropTypes.any,\n  className: PropTypes.string,\n  visible: PropTypes.bool,\n  hiddenClassName: PropTypes.string\n};\n\n\nexport default LazyRenderBox;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rc-trigger/es/LazyRenderBox.js\n// module id = 91\n// module chunks = 0","import _extends from 'babel-runtime/helpers/extends';\nfunction isPointsEq(a1, a2) {\n  return a1[0] === a2[0] && a1[1] === a2[1];\n}\n\nexport function getAlignFromPlacement(builtinPlacements, placementStr, align) {\n  var baseAlign = builtinPlacements[placementStr] || {};\n  return _extends({}, baseAlign, align);\n}\n\nexport function getPopupClassNameFromAlign(builtinPlacements, prefixCls, align) {\n  var points = align.points;\n  for (var placement in builtinPlacements) {\n    if (builtinPlacements.hasOwnProperty(placement)) {\n      if (isPointsEq(builtinPlacements[placement].points, points)) {\n        return prefixCls + '-placement-' + placement;\n      }\n    }\n  }\n  return '';\n}\n\nexport function saveRef(name, component) {\n  this[name] = component;\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rc-trigger/es/utils.js\n// module id = 92\n// module chunks = 0","import * as React from \"react\";\nimport lzString from \"lz-string\";\nimport {\n\tqalculate,\n\tqalculationHasSideeffect,\n\tparseEvaluate,\n\tQalculationResult,\n} from \"./libqalc\";\nimport { UnitNumber } from \"./unitNumber\";\nimport { TaggedString } from \"./output\";\nimport * as queryString from \"query-string\";\nimport scope from \"./libqalc/globalScope\";\nimport { render } from \"react-dom\";\nimport Tooltip from \"rc-tooltip\";\nimport { observable } from \"mobx\";\nimport \"../style.scss\";\nimport \"rc-tooltip/assets/bootstrap_white.css\";\nimport { observer } from \"mobx-react\";\nimport { tokenize, TokenType } from \"./libqalc/parser\";\n\n@observer\nclass DefinitionOvelay extends React.Component<{\n\tunit: UnitNumber;\n\tonClickUnit: (u: UnitNumber) => void;\n}> {\n\t@observable definition: TaggedString | null = null;\n\tconstructor(p: any) {\n\t\tsuper(p);\n\t\tthis.load();\n\t}\n\tasync load() {\n\t\ttry {\n\t\t\tthis.definition = (await qalculate(this.props.unit.id!)).output;\n\t\t} catch (e) {\n\t\t\tthis.definition = new TaggedString(e.message);\n\t\t}\n\t}\n\trender() {\n\t\tif (this.definition)\n\t\t\treturn (\n\t\t\t\t<TaggedStringDisplay\n\t\t\t\t\ttext={this.definition}\n\t\t\t\t\tignore={[this.props.unit]}\n\t\t\t\t\tonClickUnit={this.props.onClickUnit}\n\t\t\t\t/>\n\t\t\t);\n\t\treturn <div>Loading</div>;\n\t}\n}\nclass TaggedStringDisplay extends React.Component<{\n\tclassName?: string;\n\ttext: TaggedString;\n\tignore?: UnitNumber[];\n\tonClickUnit: (u: UnitNumber) => void;\n}> {\n\tconstructor(props: any) {\n\t\tsuper(props);\n\t}\n\ttaggedStringToHtml(str: TaggedString): any[] {\n\t\treturn str.vals.map((x, i) => {\n\t\t\tif (typeof x === \"string\") return <span key={i}>{x}</span>;\n\t\t\telse if (x instanceof UnitNumber) {\n\t\t\t\tif (\n\t\t\t\t\tthis.props.ignore &&\n\t\t\t\t\tthis.props.ignore.some(i => i.id === x.id)\n\t\t\t\t)\n\t\t\t\t\treturn <span key={i}>{x.toString()}</span>;\n\t\t\t\treturn (\n\t\t\t\t\t<Tooltip\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tplacement=\"bottom\"\n\t\t\t\t\t\toverlay={() => (\n\t\t\t\t\t\t\t<DefinitionOvelay\n\t\t\t\t\t\t\t\tunit={x}\n\t\t\t\t\t\t\t\tonClickUnit={this.props.onClickUnit}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\thref=\"#\"\n\t\t\t\t\t\t\tclassName=\"unit-href\"\n\t\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\t\tthis.props.onClickUnit(x);\n\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{x.toString()}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</Tooltip>\n\t\t\t\t);\n\t\t\t} else if (x instanceof TaggedString)\n\t\t\t\treturn this.taggedStringToHtml(x);\n\t\t\telse throw Error(\"unknown value\");\n\t\t});\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={`tagged-string-display ${this.props.className ||\n\t\t\t\t\t\"\"}`}\n\t\t\t>\n\t\t\t\t{this.taggedStringToHtml(this.props.text)}\n\t\t\t</div>\n\t\t);\n\t}\n}\nclass GuiLineElement {\n\tpublic id: number;\n\tprivate static idCounter = 0;\n\tconstructor(public data: QalculationResult) {\n\t\tthis.id = GuiLineElement.idCounter++;\n\t}\n}\ninterface GuiState {\n\tlines: GuiLineElement[];\n\tcurrentInput: string;\n\tcurrentOutput: TaggedString;\n}\nexport class GUILine extends React.Component<\n\t{\n\t\tline: GuiLineElement;\n\t\tindex: number;\n\t\tonClickRemove: () => void;\n\t\tonClickInput: (g: GuiLineElement) => void;\n\t\tonClickUnit: (u: UnitNumber) => void;\n\t},\n\t{}\n> {\n\tconstructor(props: any) {\n\t\tsuper(props);\n\t\tthis.state = { displayDepth: 0 };\n\t}\n\trender() {\n\t\tconst { type, comment, input, output } = this.props.line.data;\n\t\tconst isDefinition = type === \"definition\";\n\t\treturn (\n\t\t\t<div className=\"gui-line\">\n\t\t\t\t{/*<b>{this.props.index}.</b>*/}{\" \"}\n\t\t\t\t{comment ? <h4 className=\"comment\">{comment}</h4> : \"\"}\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"btn pull-right close\"\n\t\t\t\t\tonClick={() => this.props.onClickRemove()}\n\t\t\t\t>\n\t\t\t\t\t×\n\t\t\t\t</button>\n\t\t\t\t{!isDefinition && (\n\t\t\t\t\t<div\n\t\t\t\t\t\tstyle={{ cursor: \"pointer\" }}\n\t\t\t\t\t\tonClick={() => this.props.onClickInput(this.props.line)}\n\t\t\t\t\t>\n\t\t\t\t\t\t<TaggedStringDisplay\n\t\t\t\t\t\t\ttext={input}\n\t\t\t\t\t\t\tonClickUnit={this.props.onClickUnit}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t<TaggedStringDisplay\n\t\t\t\t\tclassName=\"block-response\"\n\t\t\t\t\ttext={isDefinition ? output : TaggedString.t` = ${output}`}\n\t\t\t\t\tonClickUnit={this.props.onClickUnit}\n\t\t\t\t/>\n\t\t\t\t<hr />\n\t\t\t</div>\n\t\t);\n\t}\n}\nlet guiInst: GUI;\nconst presetLines = `\nsqrt(2 * ((100000 pound uranium_pure + 6 million tons * uranium_natural)) / (100000 pounds + 0.7% * 6 million tons)) to c   # speed a rocket could get with all the uranium on earth (E=1/2 mv^2 ⇒ v = sqrt(2E/m))\n1 kg charcoal to liter gasoline # energy density conversion\nsolarluminosity / spheresurface(astronomicalunit) to kW/m^2 # maximum amount of energy a square meter on earth can get from the sun\n3200 mAh * 3.7 V to Wh # energy in a phone battery\n100W * 10 days * 0.25€/kWh to € # cost of energy consumption of a 100W device over 10 days\n16Mbit/s * 2h to Gbyte # How much can you download in 2 hours with a 16Mbit connection?\n88 mph to km/h\n100°F to °C\n`\n\t.split(\"\\n\")\n\t.map(line => line.trim())\n\t.filter(line => line.length > 0);\n\ntype Serialized = {\n\tlines: string[];\n};\nasync function loadPresetLines() {\n\tlet presets = presetLines;\n\tlet { state } = queryString.parse(location.hash);\n\tif (state) {\n\t\tconst ser = JSON.parse(\n\t\t\tlzString.decompressFromEncodedURIComponent(state as string),\n\t\t) as Serialized;\n\t\tpresets = ser.lines;\n\t}\n\tconst lines = await Promise.all(\n\t\tpresets.map(input =>\n\t\t\tqalculate(input)\n\t\t\t\t.then(data => new GuiLineElement(data))\n\t\t\t\t.catch(\n\t\t\t\t\terror =>\n\t\t\t\t\t\tnew GuiLineElement({\n\t\t\t\t\t\t\tinput: TaggedString.t`${input}`,\n\t\t\t\t\t\t\toutput: new TaggedString(\"\" + error),\n\t\t\t\t\t\t\ttype: \"error\",\n\t\t\t\t\t\t}),\n\t\t\t\t),\n\t\t),\n\t);\n\tfor (const line of lines) guiInst.addLine(line);\n}\n\n@observer\nclass UnitCompleteInput extends React.Component<\n\t{\n\t\tvalue: string;\n\t\tonChange: (value: string) => void;\n\t},\n\t{}\n> {\n\tconstructor(props: any) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\t@observable cursorIndexChars: number | null = null;\n\t@observable focused = false;\n\tinp: HTMLInputElement | null = null;\n\tsetInput = (u: HTMLInputElement | null) => (this.inp = u);\n\treplaceCurrent = (u: string) => {\n\t\tlet { tokens, cursorIndex } = this.tokens();\n\t\tif (cursorIndex !== null) {\n\t\t\tconst before = tokens[cursorIndex];\n\t\t\tif (before.str === \"to \") cursorIndex++;\n\t\t\ttokens[cursorIndex] = {\n\t\t\t\tstr: u,\n\t\t\t\ttype: TokenType.Identifier,\n\t\t\t\tstart: 0,\n\t\t\t};\n\t\t}\n\t\tthis.props.onChange(tokens.map(x => x.str).join(\"\"));\n\t};\n\ttokens() {\n\t\tconst tokens = [...tokenize(this.props.value)];\n\t\tif (!this.cursorIndexChars) return { tokens, cursorIndex: null };\n\t\tconst cursorIndex = tokens.findIndex(\n\t\t\tt =>\n\t\t\t\tt.type !== TokenType.Whitespace &&\n\t\t\t\tt.start + t.str.length >= this.cursorIndexChars!,\n\t\t);\n\t\treturn {\n\t\t\ttokens,\n\t\t\tcursorIndex: cursorIndex !== null ? cursorIndex : null,\n\t\t};\n\t}\n\tonChange: React.ChangeEventHandler<HTMLInputElement> = e =>\n\t\tthis.props.onChange(e.currentTarget.value);\n\tonSelect: React.ReactEventHandler<HTMLInputElement> = e => (\n\t\t(this.focused = true),\n\t\t(this.cursorIndexChars = e.currentTarget.selectionStart)\n\t);\n\trender() {\n\t\tconst { tokens, cursorIndex } = this.tokens();\n\t\tconst cursorToken = cursorIndex !== null ? tokens[cursorIndex] : null;\n\t\tconst poss: string[] = [];\n\t\tif (this.focused && cursorToken) {\n\t\t\tif (\n\t\t\t\tcursorIndex === tokens.length - 1 &&\n\t\t\t\tcursorToken.str === \"to \"\n\t\t\t) {\n\t\t\t\ttry {\n\t\t\t\t\tconst evaled = parseEvaluate(\n\t\t\t\t\t\ttokens\n\t\t\t\t\t\t\t.slice(0, cursorIndex)\n\t\t\t\t\t\t\t.map(x => x.str)\n\t\t\t\t\t\t\t.join(\"\"),\n\t\t\t\t\t);\n\t\t\t\t\tconst val = evaled.value;\n\t\t\t\t\tfor (const name of scope.getAllUnits()) {\n\t\t\t\t\t\tconst unit = scope.getUnit(name)!.value;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!unit.isSpecial() &&\n\t\t\t\t\t\t\tunit.dimensions.equals(val.dimensions)\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\tposs.push(name);\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log(e);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (cursorToken.type === TokenType.Identifier) {\n\t\t\t\tconst units =\n\t\t\t\t\tposs.length > 0 ? poss.splice(0) : scope.getAllUnits();\n\n\t\t\t\tfor (const unitName of units) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tunitName.indexOf(cursorToken.str) >= 0 &&\n\t\t\t\t\t\tunitName !== cursorToken.str\n\t\t\t\t\t)\n\t\t\t\t\t\tposs.push(unitName);\n\t\t\t\t\tif (poss.length > 30) break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn (\n\t\t\t<div className=\"unit-complete-input inline-query\">\n\t\t\t\t<span className=\"prompt\">> </span>\n\t\t\t\t<input\n\t\t\t\t\tvalue={this.props.value}\n\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t\tonSelect={this.onSelect}\n\t\t\t\t\tonBlur={() => setTimeout(() => (this.focused = false), 500)}\n\t\t\t\t\tonFocus={this.onSelect}\n\t\t\t\t\tref={this.setInput}\n\t\t\t\t\tsize={this.props.value.length}\n\t\t\t\t\tautoCorrect={\"off\"}\n\t\t\t\t\tautoComplete={\"off\"}\n\t\t\t\t\tautoCapitalize={\"none\"}\n\t\t\t\t\tplaceholder=\"enter formula\"\n\t\t\t\t/>\n\t\t\t\t{poss.length > 0 ? (\n\t\t\t\t\t<ul className=\"dropdown-menu\">\n\t\t\t\t\t\t{poss.map(unit => (\n\t\t\t\t\t\t\t<li key={unit}>\n\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\thref=\"#\"\n\t\t\t\t\t\t\t\t\tonClick={() => this.replaceCurrent(unit)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{unit}\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</ul>\n\t\t\t\t) : (\n\t\t\t\t\t\"\"\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport class GUI extends React.Component<{}, GuiState> {\n\tconstructor(props: {}) {\n\t\tsuper(props);\n\t\tguiInst = this;\n\t\tthis.state = {\n\t\t\tlines: [],\n\t\t\tcurrentInput: \"\",\n\t\t\tcurrentOutput: new TaggedString(),\n\t\t};\n\t\tloadPresetLines();\n\t}\n\taddLine(line: GuiLineElement) {\n\t\tconst lines = this.state.lines.slice();\n\t\tlines.unshift(line);\n\t\tthis.setState({ lines } as any);\n\t}\n\tremoveLine(index: number) {\n\t\tconst lines = this.state.lines.slice();\n\t\tlines.splice(index, 1);\n\t\tthis.setState({ lines: lines } as any);\n\t}\n\tonSubmit = (evt: React.FormEvent<HTMLFormElement>) => {\n\t\tevt.preventDefault();\n\t\tconst input = this.state.currentInput;\n\t\tif (input.trim().length > 0)\n\t\t\tqalculate(input)\n\t\t\t\t.then(data => this.addLine(new GuiLineElement(data)))\n\t\t\t\t.catch(reason => {\n\t\t\t\t\tconsole.error(\"could not qalc\", input, reason);\n\t\t\t\t\tthis.addLine(\n\t\t\t\t\t\tnew GuiLineElement({\n\t\t\t\t\t\t\tinput: TaggedString.t`${input}`,\n\t\t\t\t\t\t\toutput: new TaggedString(\"\" + reason),\n\t\t\t\t\t\t\ttype: \"error\",\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t});\n\t\tthis.setState({\n\t\t\tcurrentInput: \"\",\n\t\t\tcurrentOutput: new TaggedString(),\n\t\t} as any);\n\t};\n\tasync setInput(input: string) {\n\t\tthis.setState({ currentInput: input } as any);\n\t\tif (await qalculationHasSideeffect(input))\n\t\t\tthis.setState({\n\t\t\t\tcurrentOutput: new TaggedString(\"press enter to execute\"),\n\t\t\t} as any);\n\t\telse\n\t\t\tqalculate(input)\n\t\t\t\t.then(({ output }) => this.setState({ currentOutput: output }))\n\t\t\t\t.catch(reason =>\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tcurrentOutput: new TaggedString(\"\" + reason),\n\t\t\t\t\t} as any),\n\t\t\t\t);\n\t}\n\tonChange = (v: string) => {\n\t\tthis.setInput(v);\n\t};\n\tshowUnit(unit: UnitNumber) {\n\t\tconsole.log(\"showing\", unit);\n\t\tthis.setInput(unit.toString());\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"container calc-ui\">\n\t\t\t\t<div className=\"page-header\">\n\t\t\t\t\t<h1>Qalc</h1>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"gui-line unit-complete\">\n\t\t\t\t\t<form onSubmit={this.onSubmit}>\n\t\t\t\t\t\t<UnitCompleteInput\n\t\t\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t\t\t\tvalue={this.state.currentInput}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{this.state.currentOutput.vals.length > 0 ? (\n\t\t\t\t\t\t\t<TaggedStringDisplay\n\t\t\t\t\t\t\t\tclassName=\"inline-response\"\n\t\t\t\t\t\t\t\ttext={TaggedString.t` = ${\n\t\t\t\t\t\t\t\t\tthis.state.currentOutput\n\t\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t\t\tonClickUnit={unit => this.showUnit(unit)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\"\"\n\t\t\t\t\t\t)}\n\t\t\t\t\t</form>\n\t\t\t\t\t<hr />\n\t\t\t\t</div>\n\t\t\t\t{this.state.lines.map((line, i) => (\n\t\t\t\t\t<GUILine\n\t\t\t\t\t\tkey={line.id}\n\t\t\t\t\t\tindex={i}\n\t\t\t\t\t\tline={line}\n\t\t\t\t\t\tonClickInput={() =>\n\t\t\t\t\t\t\tthis.setInput(line.data.input.toString())\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonClickUnit={unit => this.showUnit(unit)}\n\t\t\t\t\t\tonClickRemove={() => this.removeLine(i)}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\n\t\t\t\t<footer>\n\t\t\t\t\t<small>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\thref=\"#\"\n\t\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\tthis.exportToUrl();\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tExport to URL\n\t\t\t\t\t\t</a>{\" \"}\n\t\t\t\t\t\t|{\" \"}\n\t\t\t\t\t\t<a href=\"https://github.com/phiresky/qalc-react\">\n\t\t\t\t\t\t\tSource code on GitHub\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</small>\n\t\t\t\t</footer>\n\t\t\t</div>\n\t\t);\n\t}\n\tcomponentDidUpdate(_prevProps: any, prevState: GuiState) {\n\t\tif (prevState.lines !== this.state.lines) {\n\t\t\thistory.replaceState(\n\t\t\t\t{},\n\t\t\t\t\"\",\n\t\t\t\twindow.location.pathname + window.location.search,\n\t\t\t);\n\t\t}\n\t}\n\texportToUrl() {\n\t\thistory.replaceState(\n\t\t\t{},\n\t\t\t\"\",\n\t\t\t\"#\" + queryString.stringify({ state: this.serialize() }),\n\t\t);\n\t}\n\tserialize() {\n\t\treturn lzString.compressToEncodedURIComponent(\n\t\t\tJSON.stringify({\n\t\t\t\tlines: this.state.lines\n\t\t\t\t\t.map(line => line.data.input.toString())\n\t\t\t\t\t.reverse(),\n\t\t\t} as Serialized),\n\t\t);\n\t}\n}\n\nconst gui = render(<GUI />, document.getElementById(\"app\"));\nObject.assign(window, { gui, qalculationHasSideeffect, qalculate });\n\n\n\n// WEBPACK FOOTER //\n// ./src/gui.tsx","// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>\n// This work is free. You can redistribute it and/or modify it\n// under the terms of the WTFPL, Version 2\n// For more information see LICENSE.txt or http://www.wtfpl.net/\n//\n// For more information, the home page:\n// http://pieroxy.net/blog/pages/lz-string/testing.html\n//\n// LZ-based compression algorithm, version 1.4.4\nvar LZString = (function() {\n\n// private property\nvar f = String.fromCharCode;\nvar keyStrBase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nvar keyStrUriSafe = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$\";\nvar baseReverseDic = {};\n\nfunction getBaseValue(alphabet, character) {\n  if (!baseReverseDic[alphabet]) {\n    baseReverseDic[alphabet] = {};\n    for (var i=0 ; i<alphabet.length ; i++) {\n      baseReverseDic[alphabet][alphabet.charAt(i)] = i;\n    }\n  }\n  return baseReverseDic[alphabet][character];\n}\n\nvar LZString = {\n  compressToBase64 : function (input) {\n    if (input == null) return \"\";\n    var res = LZString._compress(input, 6, function(a){return keyStrBase64.charAt(a);});\n    switch (res.length % 4) { // To produce valid Base64\n    default: // When could this happen ?\n    case 0 : return res;\n    case 1 : return res+\"===\";\n    case 2 : return res+\"==\";\n    case 3 : return res+\"=\";\n    }\n  },\n\n  decompressFromBase64 : function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrBase64, input.charAt(index)); });\n  },\n\n  compressToUTF16 : function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 15, function(a){return f(a+32);}) + \" \";\n  },\n\n  decompressFromUTF16: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 16384, function(index) { return compressed.charCodeAt(index) - 32; });\n  },\n\n  //compress into uint8array (UCS-2 big endian format)\n  compressToUint8Array: function (uncompressed) {\n    var compressed = LZString.compress(uncompressed);\n    var buf=new Uint8Array(compressed.length*2); // 2 bytes per character\n\n    for (var i=0, TotalLen=compressed.length; i<TotalLen; i++) {\n      var current_value = compressed.charCodeAt(i);\n      buf[i*2] = current_value >>> 8;\n      buf[i*2+1] = current_value % 256;\n    }\n    return buf;\n  },\n\n  //decompress from uint8array (UCS-2 big endian format)\n  decompressFromUint8Array:function (compressed) {\n    if (compressed===null || compressed===undefined){\n        return LZString.decompress(compressed);\n    } else {\n        var buf=new Array(compressed.length/2); // 2 bytes per character\n        for (var i=0, TotalLen=buf.length; i<TotalLen; i++) {\n          buf[i]=compressed[i*2]*256+compressed[i*2+1];\n        }\n\n        var result = [];\n        buf.forEach(function (c) {\n          result.push(f(c));\n        });\n        return LZString.decompress(result.join(''));\n\n    }\n\n  },\n\n\n  //compress into a string that is already URI encoded\n  compressToEncodedURIComponent: function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 6, function(a){return keyStrUriSafe.charAt(a);});\n  },\n\n  //decompress from an output of compressToEncodedURIComponent\n  decompressFromEncodedURIComponent:function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    input = input.replace(/ /g, \"+\");\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrUriSafe, input.charAt(index)); });\n  },\n\n  compress: function (uncompressed) {\n    return LZString._compress(uncompressed, 16, function(a){return f(a);});\n  },\n  _compress: function (uncompressed, bitsPerChar, getCharFromInt) {\n    if (uncompressed == null) return \"\";\n    var i, value,\n        context_dictionary= {},\n        context_dictionaryToCreate= {},\n        context_c=\"\",\n        context_wc=\"\",\n        context_w=\"\",\n        context_enlargeIn= 2, // Compensate for the first entry which should not count\n        context_dictSize= 3,\n        context_numBits= 2,\n        context_data=[],\n        context_data_val=0,\n        context_data_position=0,\n        ii;\n\n    for (ii = 0; ii < uncompressed.length; ii += 1) {\n      context_c = uncompressed.charAt(ii);\n      if (!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {\n        context_dictionary[context_c] = context_dictSize++;\n        context_dictionaryToCreate[context_c] = true;\n      }\n\n      context_wc = context_w + context_c;\n      if (Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {\n        context_w = context_wc;\n      } else {\n        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n          if (context_w.charCodeAt(0)<256) {\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<8 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          } else {\n            value = 1;\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1) | value;\n              if (context_data_position ==bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = 0;\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<16 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          }\n          context_enlargeIn--;\n          if (context_enlargeIn == 0) {\n            context_enlargeIn = Math.pow(2, context_numBits);\n            context_numBits++;\n          }\n          delete context_dictionaryToCreate[context_w];\n        } else {\n          value = context_dictionary[context_w];\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n\n\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        // Add wc to the dictionary.\n        context_dictionary[context_wc] = context_dictSize++;\n        context_w = String(context_c);\n      }\n    }\n\n    // Output the code for w.\n    if (context_w !== \"\") {\n      if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n        if (context_w.charCodeAt(0)<256) {\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<8 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        } else {\n          value = 1;\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | value;\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = 0;\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<16 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        delete context_dictionaryToCreate[context_w];\n      } else {\n        value = context_dictionary[context_w];\n        for (i=0 ; i<context_numBits ; i++) {\n          context_data_val = (context_data_val << 1) | (value&1);\n          if (context_data_position == bitsPerChar-1) {\n            context_data_position = 0;\n            context_data.push(getCharFromInt(context_data_val));\n            context_data_val = 0;\n          } else {\n            context_data_position++;\n          }\n          value = value >> 1;\n        }\n\n\n      }\n      context_enlargeIn--;\n      if (context_enlargeIn == 0) {\n        context_enlargeIn = Math.pow(2, context_numBits);\n        context_numBits++;\n      }\n    }\n\n    // Mark the end of the stream\n    value = 2;\n    for (i=0 ; i<context_numBits ; i++) {\n      context_data_val = (context_data_val << 1) | (value&1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data_position = 0;\n        context_data.push(getCharFromInt(context_data_val));\n        context_data_val = 0;\n      } else {\n        context_data_position++;\n      }\n      value = value >> 1;\n    }\n\n    // Flush the last char\n    while (true) {\n      context_data_val = (context_data_val << 1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data.push(getCharFromInt(context_data_val));\n        break;\n      }\n      else context_data_position++;\n    }\n    return context_data.join('');\n  },\n\n  decompress: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 32768, function(index) { return compressed.charCodeAt(index); });\n  },\n\n  _decompress: function (length, resetValue, getNextValue) {\n    var dictionary = [],\n        next,\n        enlargeIn = 4,\n        dictSize = 4,\n        numBits = 3,\n        entry = \"\",\n        result = [],\n        i,\n        w,\n        bits, resb, maxpower, power,\n        c,\n        data = {val:getNextValue(0), position:resetValue, index:1};\n\n    for (i = 0; i < 3; i += 1) {\n      dictionary[i] = i;\n    }\n\n    bits = 0;\n    maxpower = Math.pow(2,2);\n    power=1;\n    while (power!=maxpower) {\n      resb = data.val & data.position;\n      data.position >>= 1;\n      if (data.position == 0) {\n        data.position = resetValue;\n        data.val = getNextValue(data.index++);\n      }\n      bits |= (resb>0 ? 1 : 0) * power;\n      power <<= 1;\n    }\n\n    switch (next = bits) {\n      case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 2:\n        return \"\";\n    }\n    dictionary[3] = c;\n    w = c;\n    result.push(c);\n    while (true) {\n      if (data.index > length) {\n        return \"\";\n      }\n\n      bits = 0;\n      maxpower = Math.pow(2,numBits);\n      power=1;\n      while (power!=maxpower) {\n        resb = data.val & data.position;\n        data.position >>= 1;\n        if (data.position == 0) {\n          data.position = resetValue;\n          data.val = getNextValue(data.index++);\n        }\n        bits |= (resb>0 ? 1 : 0) * power;\n        power <<= 1;\n      }\n\n      switch (c = bits) {\n        case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 2:\n          return result.join('');\n      }\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n      if (dictionary[c]) {\n        entry = dictionary[c];\n      } else {\n        if (c === dictSize) {\n          entry = w + w.charAt(0);\n        } else {\n          return null;\n        }\n      }\n      result.push(entry);\n\n      // Add w+entry[0] to the dictionary.\n      dictionary[dictSize++] = w + entry.charAt(0);\n      enlargeIn--;\n\n      w = entry;\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n    }\n  }\n};\n  return LZString;\n})();\n\nif (typeof define === 'function' && define.amd) {\n  define(function () { return LZString; });\n} else if( typeof module !== 'undefined' && module != null ) {\n  module.exports = LZString\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lz-string/libs/lz-string.js\n// module id = 94\n// module chunks = 0","import { RPNToken, AToken } from \"./parser\";\nimport Scope from \"./scope\";\nimport { TaggedString } from \"../output\";\nimport * as Tree from \"./Tree\";\nimport * as parser from \"./parser\";\nimport globalScope from \"./globalScope\";\nimport {\n\tevaluationHasSideeffect,\n\tstripCommentsTrim,\n\tevaluate,\n\tdefine,\n} from \"./evaluator\";\n\nfunction unitConvertedTaggedString(node: Tree.Node, scope: Scope) {\n\tif (node instanceof Tree.FunctionCallNode && node.fnname === \"to\") {\n\t\tconst unit = evaluate(node.operands[1], scope);\n\t\tconst numericValue = evaluate(node.operands[0], scope).value.div(\n\t\t\tunit.value,\n\t\t);\n\t\treturn TaggedString.t`${numericValue.toString()} ${unit.toTaggedString()}`;\n\t} else return evaluate(node, scope).value.toTaggedString();\n}\n\nfunction isDefinition(node: Tree.EvaluatedNode) {\n\tif (node.value.id && node instanceof Tree.IdentifierNode) return true;\n}\n\nexport async function qalculationHasSideeffect(\n\tinput: string,\n): Promise<boolean> {\n\ttry {\n\t\tconst tree = Tree.rpnToTree(\n\t\t\tparser.toRPN(parser.preprocess(parser.tokenize(input))),\n\t\t);\n\t\treturn evaluationHasSideeffect(tree, globalScope);\n\t} catch (e) {\n\t\t// can't parse -> cant execute -> no sideeffects\n\t\treturn false;\n\t}\n}\nexport type QalculationResult = {\n\tinput: TaggedString;\n\toutput: TaggedString;\n\tcomment?: string;\n\ttype: \"error\" | \"result\" | \"definition\";\n};\nexport async function qalculate(\n\t_input: string,\n\tdebug = false,\n): Promise<QalculationResult> {\n\tconst scope = globalScope;\n\tif (debug) return qalculateDebug(_input);\n\tconst { code, comment } = stripCommentsTrim(_input);\n\tconst inputTree = Tree.rpnToTree(\n\t\tparser.toRPN(parser.preprocess(parser.tokenize(code))),\n\t);\n\tconst evaled = evaluate(inputTree, scope);\n\tif (isDefinition(evaled))\n\t\treturn {\n\t\t\tinput: inputTree.toTaggedString(),\n\t\t\toutput: define(evaled, scope),\n\t\t\ttype: \"definition\",\n\t\t\tcomment,\n\t\t};\n\treturn {\n\t\tinput: inputTree.toTaggedString(),\n\t\toutput: TaggedString.t`${unitConvertedTaggedString(evaled, scope)}`,\n\t\ttype: \"result\",\n\t\tcomment,\n\t};\n}\nexport async function qalculateDebug(\n\t_input: string,\n): Promise<QalculationResult> {\n\tconst scope = globalScope;\n\tconst { code, comment } = stripCommentsTrim(_input);\n\tif (code.length === 0)\n\t\treturn {\n\t\t\tinput: TaggedString.t``,\n\t\t\toutput: TaggedString.t``,\n\t\t\ttype: \"result\",\n\t\t\tcomment,\n\t\t};\n\tlet error = \"\";\n\tlet tokens: AToken[] | null = null;\n\ttry {\n\t\ttokens = [...parser.tokenize(code)];\n\t} catch (e) {\n\t\tconsole.error(e);\n\t\terror += e + \"\\n\";\n\t}\n\tconst pre = (e: Error) => (e.stack || e) + \"\\n\";\n\tlet preproc: AToken[] | null = null;\n\tif (tokens)\n\t\ttry {\n\t\t\tpreproc = [...parser.preprocess(tokens)];\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\terror += pre(e);\n\t\t}\n\tlet rpn: RPNToken[] | null = null;\n\tif (preproc)\n\t\ttry {\n\t\t\trpn = [...parser.toRPN(preproc)];\n\t\t} catch (e) {\n\t\t\terror += pre(e);\n\t\t}\n\tlet parsed: Tree.Node | null = null;\n\tif (rpn)\n\t\ttry {\n\t\t\tparsed = Tree.rpnToTree(rpn);\n\t\t} catch (e) {\n\t\t\terror += pre(e);\n\t\t}\n\tlet evaled: Tree.EvaluatedNode | null = null;\n\tif (parsed)\n\t\ttry {\n\t\t\tevaled = evaluate(parsed!, scope);\n\t\t} catch (e) {\n\t\t\terror += pre(e);\n\t\t}\n\n\tif (evaled && isDefinition(evaled))\n\t\treturn {\n\t\t\tinput: parsed!.toTaggedString(),\n\t\t\toutput: define(evaled, scope),\n\t\t\ttype: \"definition\",\n\t\t\tcomment,\n\t\t};\n\tconst output = TaggedString.t`\nres = ${\n\t\tevaled\n\t\t\t? TaggedString.t`${evaled.toTaggedString()} = ${unitConvertedTaggedString(\n\t\t\t\t\tevaled,\n\t\t\t\t\tscope,\n\t\t\t\t)}`\n\t\t\t: \"err\"\n\t}\ntokens = ${\n\t\ttokens ? tokens.map(t => parser.tokenToDebugString(t)).join(\" \") : \"err\"\n\t}\npreproc = ${\n\t\tpreproc\n\t\t\t? preproc.map(t => parser.tokenToDebugString(t)).join(\" \")\n\t\t\t: \"err\"\n\t}\nrpn = ${rpn ? rpn.map(t => parser.tokenToDebugString(t)).join(\" \") : \"err\"}\nparsed = ${parsed ? parsed.toDebugString() : \"err\"}\n${error ? \"error = \" + error : \"\"}`;\n\treturn {\n\t\tinput: parsed ? parsed.toTaggedString() : TaggedString.t``,\n\t\toutput,\n\t\ttype: \"result\",\n\t\tcomment,\n\t};\n}\n\nexport { parseEvaluate } from \"./evaluator\";\nexport { default as init } from \"./init\";\n\n\n\n// WEBPACK FOOTER //\n// ./src/libqalc/index.ts","/*\r\n *\r\n *  decimal.js v9.0.1\r\n *  An arbitrary-precision Decimal type for JavaScript.\r\n *  https://github.com/MikeMcl/decimal.js\r\n *  Copyright (c) 2017 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  MIT Licence\r\n *  https://github.com/MikeMcl/decimal.js/LICENCE\r\n *\r\n */\r\n\r\n\r\n// -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n  // The maximum exponent magnitude.\r\n  // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\nvar EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n  // The limit on the value of `precision`, and on the value of the first argument to\r\n  // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n  MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n  // Base conversion alphabet.\r\n  NUMERALS = '0123456789abcdef',\r\n\r\n  // The natural logarithm of 10 (1025 digits).\r\n  LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n  // Pi (1025 digits).\r\n  PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n  // The initial configuration properties of the Decimal constructor.\r\n  DEFAULTS = {\r\n\r\n    // These values must be integers within the stated ranges (inclusive).\r\n    // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n    // The maximum number of significant digits of the result of a calculation or base conversion.\r\n    // E.g. `Decimal.config({ precision: 20 });`\r\n    precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n    // The rounding mode used when rounding to `precision`.\r\n    //\r\n    // ROUND_UP         0 Away from zero.\r\n    // ROUND_DOWN       1 Towards zero.\r\n    // ROUND_CEIL       2 Towards +Infinity.\r\n    // ROUND_FLOOR      3 Towards -Infinity.\r\n    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    //\r\n    // E.g.\r\n    // `Decimal.rounding = 4;`\r\n    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n    rounding: 4,                           // 0 to 8\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n    // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN  6 The IEEE 754 remainder function.\r\n    // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n    //\r\n    // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n    // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n    // be used, but they may not give useful results.\r\n    modulo: 1,                             // 0 to 9\r\n\r\n    // The exponent value at and beneath which `toString` returns exponential notation.\r\n    // JavaScript numbers: -7\r\n    toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n    // The exponent value at and above which `toString` returns exponential notation.\r\n    // JavaScript numbers: 21\r\n    toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // JavaScript numbers: -324  (5e-324)\r\n    minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n    maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    crypto: false                          // true/false\r\n  },\r\n\r\n\r\n// ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n  inexact, quadrant,\r\n  external = true,\r\n\r\n  decimalError = '[DecimalError] ',\r\n  invalidArgument = decimalError + 'Invalid argument: ',\r\n  precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n  cryptoUnavailable = decimalError + 'crypto unavailable',\r\n\r\n  mathfloor = Math.floor,\r\n  mathpow = Math.pow,\r\n\r\n  isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n  isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n  isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n  isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n  BASE = 1e7,\r\n  LOG_BASE = 7,\r\n  MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n  LN10_PRECISION = LN10.length - 1,\r\n  PI_PRECISION = PI.length - 1,\r\n\r\n  // Decimal.prototype object\r\n  P = { name: '[object Decimal]' };\r\n\r\n\r\n// Decimal prototype methods\r\n\r\n\r\n/*\r\n *  absoluteValue             abs\r\n *  ceil\r\n *  comparedTo                cmp\r\n *  cosine                    cos\r\n *  cubeRoot                  cbrt\r\n *  decimalPlaces             dp\r\n *  dividedBy                 div\r\n *  dividedToIntegerBy        divToInt\r\n *  equals                    eq\r\n *  floor\r\n *  greaterThan               gt\r\n *  greaterThanOrEqualTo      gte\r\n *  hyperbolicCosine          cosh\r\n *  hyperbolicSine            sinh\r\n *  hyperbolicTangent         tanh\r\n *  inverseCosine             acos\r\n *  inverseHyperbolicCosine   acosh\r\n *  inverseHyperbolicSine     asinh\r\n *  inverseHyperbolicTangent  atanh\r\n *  inverseSine               asin\r\n *  inverseTangent            atan\r\n *  isFinite\r\n *  isInteger                 isInt\r\n *  isNaN\r\n *  isNegative                isNeg\r\n *  isPositive                isPos\r\n *  isZero\r\n *  lessThan                  lt\r\n *  lessThanOrEqualTo         lte\r\n *  logarithm                 log\r\n *  [maximum]                 [max]\r\n *  [minimum]                 [min]\r\n *  minus                     sub\r\n *  modulo                    mod\r\n *  naturalExponential        exp\r\n *  naturalLogarithm          ln\r\n *  negated                   neg\r\n *  plus                      add\r\n *  precision                 sd\r\n *  round\r\n *  sine                      sin\r\n *  squareRoot                sqrt\r\n *  tangent                   tan\r\n *  times                     mul\r\n *  toBinary\r\n *  toDecimalPlaces           toDP\r\n *  toExponential\r\n *  toFixed\r\n *  toFraction\r\n *  toHexadecimal             toHex\r\n *  toNearest\r\n *  toNumber\r\n *  toOctal\r\n *  toPower                   pow\r\n *  toPrecision\r\n *  toSignificantDigits       toSD\r\n *  toString\r\n *  truncated                 trunc\r\n *  valueOf                   toJSON\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of this Decimal.\r\n *\r\n */\r\nP.absoluteValue = P.abs = function () {\r\n  var x = new this.constructor(this);\r\n  if (x.s < 0) x.s = 1;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of positive Infinity.\r\n *\r\n */\r\nP.ceil = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 2);\r\n};\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if the value of this Decimal is greater than the value of `y`,\r\n *  -1    if the value of this Decimal is less than the value of `y`,\r\n *   0    if they have the same value,\r\n *   NaN  if the value of either Decimal is NaN.\r\n *\r\n */\r\nP.comparedTo = P.cmp = function (y) {\r\n  var i, j, xdL, ydL,\r\n    x = this,\r\n    xd = x.d,\r\n    yd = (y = new x.constructor(y)).d,\r\n    xs = x.s,\r\n    ys = y.s;\r\n\r\n  // Either NaN or ±Infinity?\r\n  if (!xd || !yd) {\r\n    return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Either zero?\r\n  if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n  // Signs differ?\r\n  if (xs !== ys) return xs;\r\n\r\n  // Compare exponents.\r\n  if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n    if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * cos(0)         = 1\r\n * cos(-0)        = 1\r\n * cos(Infinity)  = NaN\r\n * cos(-Infinity) = NaN\r\n * cos(NaN)       = NaN\r\n *\r\n */\r\nP.cosine = P.cos = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.d) return new Ctor(NaN);\r\n\r\n  // cos(0) = cos(-0) = 1\r\n  if (!x.d[0]) return new Ctor(1);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *\r\n * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n *  cbrt(0)  =  0\r\n *  cbrt(-0) = -0\r\n *  cbrt(1)  =  1\r\n *  cbrt(-1) = -1\r\n *  cbrt(N)  =  N\r\n *  cbrt(-I) = -I\r\n *  cbrt(I)  =  I\r\n *\r\n * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n *\r\n */\r\nP.cubeRoot = P.cbrt = function () {\r\n  var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = x.s * Math.pow(x.s * x, 1 / 3);\r\n\r\n   // Math.cbrt underflow/overflow?\r\n   // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n  if (!s || Math.abs(s) == 1 / 0) {\r\n    n = digitsToString(x.d);\r\n    e = x.e;\r\n\r\n    // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n    if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n    s = Math.pow(n, 1 / 3);\r\n\r\n    // Rarely, e may be one less than the result exponent value.\r\n    e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n    r.s = x.s;\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Halley's method.\r\n  // TODO? Compare Newton's method.\r\n  for (;;) {\r\n    t = r;\r\n    t3 = t.times(t).times(t);\r\n    t3plusx = t3.plus(x);\r\n    r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n      // , i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return the number of decimal places of the value of this Decimal.\r\n *\r\n */\r\nP.decimalPlaces = P.dp = function () {\r\n  var w,\r\n    d = this.d,\r\n    n = NaN;\r\n\r\n  if (d) {\r\n    w = d.length - 1;\r\n    n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    w = d[w];\r\n    if (w) for (; w % 10 == 0; w /= 10) n--;\r\n    if (n < 0) n = 0;\r\n  }\r\n\r\n  return n;\r\n};\r\n\r\n\r\n/*\r\n *  n / 0 = I\r\n *  n / N = N\r\n *  n / I = 0\r\n *  0 / n = 0\r\n *  0 / 0 = N\r\n *  0 / N = N\r\n *  0 / I = 0\r\n *  N / n = N\r\n *  N / 0 = N\r\n *  N / N = N\r\n *  N / I = N\r\n *  I / n = I\r\n *  I / 0 = I\r\n *  I / N = N\r\n *  I / I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedBy = P.div = function (y) {\r\n  return divide(this, new this.constructor(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedToIntegerBy = P.divToInt = function (y) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n  return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n *\r\n */\r\nP.equals = P.eq = function (y) {\r\n  return this.cmp(y) === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of negative Infinity.\r\n *\r\n */\r\nP.floor = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 3);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n * false.\r\n *\r\n */\r\nP.greaterThan = P.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n * otherwise return false.\r\n *\r\n */\r\nP.greaterThanOrEqualTo = P.gte = function (y) {\r\n  var k = this.cmp(y);\r\n  return k == 1 || k === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [1, Infinity]\r\n *\r\n * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n *\r\n * cosh(0)         = 1\r\n * cosh(-0)        = 1\r\n * cosh(Infinity)  = Infinity\r\n * cosh(-Infinity) = Infinity\r\n * cosh(NaN)       = NaN\r\n *\r\n *  x        time taken (ms)   result\r\n * 1000      9                 9.8503555700852349694e+433\r\n * 10000     25                4.4034091128314607936e+4342\r\n * 100000    171               1.4033316802130615897e+43429\r\n * 1000000   3817              1.5166076984010437725e+434294\r\n * 10000000  abandoned after 2 minute wait\r\n *\r\n * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n *\r\n */\r\nP.hyperbolicCosine = P.cosh = function () {\r\n  var k, n, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    one = new Ctor(1);\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n  if (x.isZero()) return one;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n  // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  // TODO? Estimation reused from cosine() and may not be optimal here.\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    n = Math.pow(4, -k).toString();\r\n  } else {\r\n    k = 16;\r\n    n = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n  // Reverse argument reduction\r\n  var cosh2_x,\r\n    i = k,\r\n    d8 = new Ctor(8);\r\n  for (; i--;) {\r\n    cosh2_x = x.times(x);\r\n    x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n  }\r\n\r\n  return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n *\r\n * sinh(0)         = 0\r\n * sinh(-0)        = -0\r\n * sinh(Infinity)  = Infinity\r\n * sinh(-Infinity) = -Infinity\r\n * sinh(NaN)       = NaN\r\n *\r\n * x        time taken (ms)\r\n * 10       2 ms\r\n * 100      5 ms\r\n * 1000     14 ms\r\n * 10000    82 ms\r\n * 100000   886 ms            1.4033316802130615897e+43429\r\n * 200000   2613 ms\r\n * 300000   5407 ms\r\n * 400000   8824 ms\r\n * 500000   13026 ms          8.7080643612718084129e+217146\r\n * 1000000  48543 ms\r\n *\r\n * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n *\r\n */\r\nP.hyperbolicSine = P.sinh = function () {\r\n  var k, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n  } else {\r\n\r\n    // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n    // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n    // 3 multiplications and 1 addition\r\n\r\n    // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n    // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n    // 4 multiplications and 2 additions\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    x = x.times(Math.pow(5, -k));\r\n\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n    // Reverse argument reduction\r\n    var sinh2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sinh2_x = x.times(x);\r\n      x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n    }\r\n  }\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * tanh(x) = sinh(x) / cosh(x)\r\n *\r\n * tanh(0)         = 0\r\n * tanh(-0)        = -0\r\n * tanh(Infinity)  = 1\r\n * tanh(-Infinity) = -1\r\n * tanh(NaN)       = NaN\r\n *\r\n */\r\nP.hyperbolicTangent = P.tanh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 7;\r\n  Ctor.rounding = 1;\r\n\r\n  return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n * this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [0, pi]\r\n *\r\n * acos(x) = pi/2 - asin(x)\r\n *\r\n * acos(0)       = pi/2\r\n * acos(-0)      = pi/2\r\n * acos(1)       = 0\r\n * acos(-1)      = pi\r\n * acos(1/2)     = pi/3\r\n * acos(-1/2)    = 2*pi/3\r\n * acos(|x| > 1) = NaN\r\n * acos(NaN)     = NaN\r\n *\r\n */\r\nP.inverseCosine = P.acos = function () {\r\n  var halfPi,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    k = x.abs().cmp(1),\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n    return k === 0\r\n      // |x| is 1\r\n      ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n      // |x| > 1 or x is NaN\r\n      : new Ctor(NaN);\r\n  }\r\n\r\n  if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.asin();\r\n  halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return halfPi.minus(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [1, Infinity]\r\n * Range: [0, Infinity]\r\n *\r\n * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n *\r\n * acosh(x < 1)     = NaN\r\n * acosh(NaN)       = NaN\r\n * acosh(Infinity)  = Infinity\r\n * acosh(-Infinity) = NaN\r\n * acosh(0)         = NaN\r\n * acosh(-0)        = NaN\r\n * acosh(1)         = 0\r\n * acosh(-1)        = NaN\r\n *\r\n */\r\nP.inverseHyperbolicCosine = P.acosh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n  if (!x.isFinite()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n *\r\n * asinh(NaN)       = NaN\r\n * asinh(Infinity)  = Infinity\r\n * asinh(-Infinity) = -Infinity\r\n * asinh(0)         = 0\r\n * asinh(-0)        = -0\r\n *\r\n */\r\nP.inverseHyperbolicSine = P.asinh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n *\r\n * atanh(|x| > 1)   = NaN\r\n * atanh(NaN)       = NaN\r\n * atanh(Infinity)  = NaN\r\n * atanh(-Infinity) = NaN\r\n * atanh(0)         = 0\r\n * atanh(-0)        = -0\r\n * atanh(1)         = Infinity\r\n * atanh(-1)        = -Infinity\r\n *\r\n */\r\nP.inverseHyperbolicTangent = P.atanh = function () {\r\n  var pr, rm, wpr, xsd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  xsd = x.sd();\r\n\r\n  if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n  Ctor.precision = wpr = xsd - x.e;\r\n\r\n  x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n  Ctor.precision = pr + 4;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.ln();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(0.5);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n *\r\n * asin(0)       = 0\r\n * asin(-0)      = -0\r\n * asin(1/2)     = pi/6\r\n * asin(-1/2)    = -pi/6\r\n * asin(1)       = pi/2\r\n * asin(-1)      = -pi/2\r\n * asin(|x| > 1) = NaN\r\n * asin(NaN)     = NaN\r\n *\r\n * TODO? Compare performance of Taylor series.\r\n *\r\n */\r\nP.inverseSine = P.asin = function () {\r\n  var halfPi, k,\r\n    pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  k = x.abs().cmp(1);\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n\r\n    // |x| is 1\r\n    if (k === 0) {\r\n      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      halfPi.s = x.s;\r\n      return halfPi;\r\n    }\r\n\r\n    // |x| > 1 or x is NaN\r\n    return new Ctor(NaN);\r\n  }\r\n\r\n  // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n *\r\n * atan(0)         = 0\r\n * atan(-0)        = -0\r\n * atan(1)         = pi/4\r\n * atan(-1)        = -pi/4\r\n * atan(Infinity)  = pi/2\r\n * atan(-Infinity) = -pi/2\r\n * atan(NaN)       = NaN\r\n *\r\n */\r\nP.inverseTangent = P.atan = function () {\r\n  var i, j, k, n, px, t, r, wpr, x2,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (!x.isFinite()) {\r\n    if (!x.s) return new Ctor(NaN);\r\n    if (pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n  } else if (x.isZero()) {\r\n    return new Ctor(x);\r\n  } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n    r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n    r.s = x.s;\r\n    return r;\r\n  }\r\n\r\n  Ctor.precision = wpr = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n  // Argument reduction\r\n  // Ensure |x| < 0.42\r\n  // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n  k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n  for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n  external = false;\r\n\r\n  j = Math.ceil(wpr / LOG_BASE);\r\n  n = 1;\r\n  x2 = x.times(x);\r\n  r = new Ctor(x);\r\n  px = x;\r\n\r\n  // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n  for (; i !== -1;) {\r\n    px = px.times(x2);\r\n    t = r.minus(px.div(n += 2));\r\n\r\n    px = px.times(x2);\r\n    r = t.plus(px.div(n += 2));\r\n\r\n    if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n  }\r\n\r\n  if (k) r = r.times(2 << (k - 1));\r\n\r\n  external = true;\r\n\r\n  return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n *\r\n */\r\nP.isFinite = function () {\r\n  return !!this.d;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is an integer, otherwise return false.\r\n *\r\n */\r\nP.isInteger = P.isInt = function () {\r\n  return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is NaN, otherwise return false.\r\n *\r\n */\r\nP.isNaN = function () {\r\n  return !this.s;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is negative, otherwise return false.\r\n *\r\n */\r\nP.isNegative = P.isNeg = function () {\r\n  return this.s < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is positive, otherwise return false.\r\n *\r\n */\r\nP.isPositive = P.isPos = function () {\r\n  return this.s > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n *\r\n */\r\nP.isZero = function () {\r\n  return !!this.d && this.d[0] === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThan = P.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThanOrEqualTo = P.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * If no base is specified, return log[10](arg).\r\n *\r\n * log[base](arg) = ln(arg) / ln(base)\r\n *\r\n * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n * otherwise:\r\n *\r\n * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n *\r\n * log[-b](a)       = NaN\r\n * log[0](a)        = NaN\r\n * log[1](a)        = NaN\r\n * log[NaN](a)      = NaN\r\n * log[Infinity](a) = NaN\r\n * log[b](0)        = -Infinity\r\n * log[b](-0)       = -Infinity\r\n * log[b](-a)       = NaN\r\n * log[b](1)        = 0\r\n * log[b](Infinity) = Infinity\r\n * log[b](NaN)      = NaN\r\n *\r\n * [base] {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nP.logarithm = P.log = function (base) {\r\n  var isBase10, d, denominator, k, inf, num, sd, r,\r\n    arg = this,\r\n    Ctor = arg.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding,\r\n    guard = 5;\r\n\r\n  // Default base is 10.\r\n  if (base == null) {\r\n    base = new Ctor(10);\r\n    isBase10 = true;\r\n  } else {\r\n    base = new Ctor(base);\r\n    d = base.d;\r\n\r\n    // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n    if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n    isBase10 = base.eq(10);\r\n  }\r\n\r\n  d = arg.d;\r\n\r\n  // Is arg negative, non-finite, 0 or 1?\r\n  if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n    return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n  }\r\n\r\n  // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n  // integer power of 10.\r\n  if (isBase10) {\r\n    if (d.length > 1) {\r\n      inf = true;\r\n    } else {\r\n      for (k = d[0]; k % 10 === 0;) k /= 10;\r\n      inf = k !== 1;\r\n    }\r\n  }\r\n\r\n  external = false;\r\n  sd = pr + guard;\r\n  num = naturalLogarithm(arg, sd);\r\n  denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n  // The result will have 5 rounding digits.\r\n  r = divide(num, denominator, sd, 1);\r\n\r\n  // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n  // calculate 10 further digits.\r\n  //\r\n  // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n  // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n  // further digits, the last 14 are nines, round up and assume the result is exact.\r\n  // Also assume the result is exact if the last 14 are zero.\r\n  //\r\n  // Example of a result that will be incorrectly rounded:\r\n  // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n  // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n  // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n  // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n  // place is still 2.6.\r\n  if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n    do {\r\n      sd += 10;\r\n      num = naturalLogarithm(arg, sd);\r\n      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n      r = divide(num, denominator, sd, 1);\r\n\r\n      if (!inf) {\r\n\r\n        // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n        if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n\r\n        break;\r\n      }\r\n    } while (checkRoundingDigits(r.d, k += 10, rm));\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.max = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'lt');\r\n};\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.min = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'gt');\r\n};\r\n */\r\n\r\n\r\n/*\r\n *  n - 0 = n\r\n *  n - N = N\r\n *  n - I = -I\r\n *  0 - n = -n\r\n *  0 - 0 = 0\r\n *  0 - N = N\r\n *  0 - I = -I\r\n *  N - n = N\r\n *  N - 0 = N\r\n *  N - N = N\r\n *  N - I = N\r\n *  I - n = I\r\n *  I - 0 = I\r\n *  I - N = N\r\n *  I - I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return y negated if x is finite and y is ±Infinity.\r\n    else if (x.d) y.s = -y.s;\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with different signs.\r\n    // Return NaN if both are ±Infinity with the same sign.\r\n    else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n  // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.plus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return y negated if x is zero and y is non-zero.\r\n    if (yd[0]) y.s = -y.s;\r\n\r\n    // Return x if y is zero and x is non-zero.\r\n    else if (xd[0]) y = new Ctor(x);\r\n\r\n    // Return zero if both are zero.\r\n    // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n    else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  e = mathfloor(y.e / LOG_BASE);\r\n  xe = mathfloor(x.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  k = xe - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (k) {\r\n    xLTy = k < 0;\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      k = -k;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = xe;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Numbers with massively different exponents would result in a very high number of\r\n    // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n    // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n    if (k > i) {\r\n      k = i;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    d.reverse();\r\n    for (i = k; i--;) d.push(0);\r\n    d.reverse();\r\n\r\n  // Base 1e7 exponents equal.\r\n  } else {\r\n\r\n    // Check digits to determine which is the bigger number.\r\n\r\n    i = xd.length;\r\n    len = yd.length;\r\n    xLTy = i < len;\r\n    if (xLTy) len = i;\r\n\r\n    for (i = 0; i < len; i++) {\r\n      if (xd[i] != yd[i]) {\r\n        xLTy = xd[i] < yd[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    k = 0;\r\n  }\r\n\r\n  if (xLTy) {\r\n    d = xd;\r\n    xd = yd;\r\n    yd = d;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  len = xd.length;\r\n\r\n  // Append zeros to `xd` if shorter.\r\n  // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n  for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n  // Subtract yd from xd.\r\n  for (i = yd.length; i > k;) {\r\n\r\n    if (xd[--i] < yd[i]) {\r\n      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n      --xd[j];\r\n      xd[i] += BASE;\r\n    }\r\n\r\n    xd[i] -= yd[i];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xd[--len] === 0;) xd.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n  // Zero?\r\n  if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n *   n % 0 =  N\r\n *   n % N =  N\r\n *   n % I =  n\r\n *   0 % n =  0\r\n *  -0 % n = -0\r\n *   0 % 0 =  N\r\n *   0 % N =  N\r\n *   0 % I =  0\r\n *   N % n =  N\r\n *   N % 0 =  N\r\n *   N % N =  N\r\n *   N % I =  N\r\n *   I % n =  N\r\n *   I % 0 =  N\r\n *   I % N =  N\r\n *   I % I =  N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * The result depends on the modulo mode.\r\n *\r\n */\r\nP.modulo = P.mod = function (y) {\r\n  var q,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n  if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n  // Return x if y is ±Infinity or x is ±0.\r\n  if (!y.d || x.d && !x.d[0]) {\r\n    return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n  }\r\n\r\n  // Prevent rounding of intermediate calculations.\r\n  external = false;\r\n\r\n  if (Ctor.modulo == 9) {\r\n\r\n    // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n    // result = x - q * y    where  0 <= result < abs(y)\r\n    q = divide(x, y.abs(), 0, 3, 1);\r\n    q.s *= y.s;\r\n  } else {\r\n    q = divide(x, y, 0, Ctor.modulo, 1);\r\n  }\r\n\r\n  q = q.times(y);\r\n\r\n  external = true;\r\n\r\n  return x.minus(q);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalExponential = P.exp = function () {\r\n  return naturalExponential(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalLogarithm = P.ln = function () {\r\n  return naturalLogarithm(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n * -1.\r\n *\r\n */\r\nP.negated = P.neg = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = -x.s;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n *  n + 0 = n\r\n *  n + N = N\r\n *  n + I = I\r\n *  0 + n = n\r\n *  0 + 0 = 0\r\n *  0 + N = N\r\n *  0 + I = I\r\n *  N + n = N\r\n *  N + 0 = N\r\n *  N + N = N\r\n *  N + I = N\r\n *  I + n = I\r\n *  I + 0 = I\r\n *  I + N = N\r\n *  I + I = I\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.plus = P.add = function (y) {\r\n  var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with the same sign.\r\n    // Return NaN if both are ±Infinity with different signs.\r\n    // Return y if x is finite and y is ±Infinity.\r\n    else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n   // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.minus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return x if y is zero.\r\n    // Return y if y is non-zero.\r\n    if (!yd[0]) y = new Ctor(x);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  k = mathfloor(x.e / LOG_BASE);\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  i = k - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (i) {\r\n\r\n    if (i < 0) {\r\n      d = xd;\r\n      i = -i;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = k;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n    k = Math.ceil(pr / LOG_BASE);\r\n    len = k > len ? k + 1 : len + 1;\r\n\r\n    if (i > len) {\r\n      i = len;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n    d.reverse();\r\n    for (; i--;) d.push(0);\r\n    d.reverse();\r\n  }\r\n\r\n  len = xd.length;\r\n  i = yd.length;\r\n\r\n  // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n  if (len - i < 0) {\r\n    i = len;\r\n    d = yd;\r\n    yd = xd;\r\n    xd = d;\r\n  }\r\n\r\n  // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n  for (carry = 0; i;) {\r\n    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n    xd[i] %= BASE;\r\n  }\r\n\r\n  if (carry) {\r\n    xd.unshift(carry);\r\n    ++e;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n  for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return the number of significant digits of the value of this Decimal.\r\n *\r\n * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n *\r\n */\r\nP.precision = P.sd = function (z) {\r\n  var k,\r\n    x = this;\r\n\r\n  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n  if (x.d) {\r\n    k = getPrecision(x.d);\r\n    if (z && x.e + 1 > k) k = x.e + 1;\r\n  } else {\r\n    k = NaN;\r\n  }\r\n\r\n  return k;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n * rounding mode `rounding`.\r\n *\r\n */\r\nP.round = function () {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n *\r\n * sin(0)         = 0\r\n * sin(-0)        = -0\r\n * sin(Infinity)  = NaN\r\n * sin(-Infinity) = NaN\r\n * sin(NaN)       = NaN\r\n *\r\n */\r\nP.sine = P.sin = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n *  sqrt(-n) =  N\r\n *  sqrt(N)  =  N\r\n *  sqrt(-I) =  N\r\n *  sqrt(I)  =  I\r\n *  sqrt(0)  =  0\r\n *  sqrt(-0) = -0\r\n *\r\n */\r\nP.squareRoot = P.sqrt = function () {\r\n  var m, n, sd, r, rep, t,\r\n    x = this,\r\n    d = x.d,\r\n    e = x.e,\r\n    s = x.s,\r\n    Ctor = x.constructor;\r\n\r\n  // Negative/NaN/Infinity/zero?\r\n  if (s !== 1 || !d || !d[0]) {\r\n    return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n  }\r\n\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = Math.sqrt(+x);\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n  if (s == 0 || s == 1 / 0) {\r\n    n = digitsToString(d);\r\n\r\n    if ((n.length + e) % 2 == 0) n += '0';\r\n    s = Math.sqrt(n);\r\n    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n    if (s == 1 / 0) {\r\n      n = '1e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Newton-Raphson iteration.\r\n  for (;;) {\r\n    t = r;\r\n    r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n      // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * tan(0)         = 0\r\n * tan(-0)        = -0\r\n * tan(Infinity)  = NaN\r\n * tan(-Infinity) = NaN\r\n * tan(NaN)       = NaN\r\n *\r\n */\r\nP.tangent = P.tan = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.sin();\r\n  x.s = 1;\r\n  x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *  n * 0 = 0\r\n *  n * N = N\r\n *  n * I = I\r\n *  0 * n = 0\r\n *  0 * 0 = 0\r\n *  0 * N = N\r\n *  0 * I = N\r\n *  N * n = N\r\n *  N * 0 = N\r\n *  N * N = N\r\n *  N * I = N\r\n *  I * n = I\r\n *  I * 0 = N\r\n *  I * N = N\r\n *  I * I = I\r\n *\r\n * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.times = P.mul = function (y) {\r\n  var carry, e, i, k, r, rL, t, xdL, ydL,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    xd = x.d,\r\n    yd = (y = new Ctor(y)).d;\r\n\r\n  y.s *= x.s;\r\n\r\n   // If either is NaN, ±Infinity or ±0...\r\n  if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n    return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n      // Return NaN if either is NaN.\r\n      // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n      ? NaN\r\n\r\n      // Return ±Infinity if either is ±Infinity.\r\n      // Return ±0 if either is ±0.\r\n      : !xd || !yd ? y.s / 0 : y.s * 0);\r\n  }\r\n\r\n  e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Ensure xd points to the longer array.\r\n  if (xdL < ydL) {\r\n    r = xd;\r\n    xd = yd;\r\n    yd = r;\r\n    rL = xdL;\r\n    xdL = ydL;\r\n    ydL = rL;\r\n  }\r\n\r\n  // Initialise the result array with zeros.\r\n  r = [];\r\n  rL = xdL + ydL;\r\n  for (i = rL; i--;) r.push(0);\r\n\r\n  // Multiply!\r\n  for (i = ydL; --i >= 0;) {\r\n    carry = 0;\r\n    for (k = xdL + i; k > i;) {\r\n      t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n      r[k--] = t % BASE | 0;\r\n      carry = t / BASE | 0;\r\n    }\r\n\r\n    r[k] = (r[k] + carry) % BASE | 0;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; !r[--rL];) r.pop();\r\n\r\n  if (carry) ++e;\r\n  else r.shift();\r\n\r\n  y.d = r;\r\n  y.e = getBase10Exponent(r, e);\r\n\r\n  return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toBinary = function (sd, rm) {\r\n  return toStringBinary(this, 2, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n *\r\n * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n  if (dp === void 0) return x;\r\n\r\n  checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n  if (rm === void 0) rm = Ctor.rounding;\r\n  else checkInt32(rm, 0, 8);\r\n\r\n  return finalise(x, dp + x.e + 1, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in exponential notation rounded to\r\n * `dp` fixed decimal places using rounding mode `rounding`.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toExponential = function (dp, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x, true);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), dp + 1, rm);\r\n    str = finiteToString(x, true, dp + 1);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n * omitted.\r\n *\r\n * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n * (-0).toFixed(3) is '0.000'.\r\n * (-0.5).toFixed(0) is '-0'.\r\n *\r\n */\r\nP.toFixed = function (dp, rm) {\r\n  var str, y,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n    str = finiteToString(y, false, dp + y.e + 1);\r\n  }\r\n\r\n  // To determine whether to add the minus sign look at the value before it was rounded,\r\n  // i.e. look at `x` rather than `y`.\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n * numerator and an integer denominator.\r\n *\r\n * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n * value necessary to represent the number exactly.\r\n *\r\n * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n *\r\n */\r\nP.toFraction = function (maxD) {\r\n  var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n    x = this,\r\n    xd = x.d,\r\n    Ctor = x.constructor;\r\n\r\n  if (!xd) return new Ctor(x);\r\n\r\n  n1 = d0 = new Ctor(1);\r\n  d1 = n0 = new Ctor(0);\r\n\r\n  d = new Ctor(d1);\r\n  e = d.e = getPrecision(xd) - x.e - 1;\r\n  k = e % LOG_BASE;\r\n  d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n  if (maxD == null) {\r\n\r\n    // d is 10**e, the minimum max-denominator needed.\r\n    maxD = e > 0 ? d : n1;\r\n  } else {\r\n    n = new Ctor(maxD);\r\n    if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n    maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n  }\r\n\r\n  external = false;\r\n  n = new Ctor(digitsToString(xd));\r\n  pr = Ctor.precision;\r\n  Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n  for (;;)  {\r\n    q = divide(n, d, 0, 1, 1);\r\n    d2 = d0.plus(q.times(d1));\r\n    if (d2.cmp(maxD) == 1) break;\r\n    d0 = d1;\r\n    d1 = d2;\r\n    d2 = n1;\r\n    n1 = n0.plus(q.times(d2));\r\n    n0 = d2;\r\n    d2 = d;\r\n    d = n.minus(q.times(d2));\r\n    n = d2;\r\n  }\r\n\r\n  d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n  n0 = n0.plus(d2.times(n1));\r\n  d0 = d0.plus(d2.times(d1));\r\n  n0.s = n1.s = x.s;\r\n\r\n  // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n  r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n      ? [n1, d1] : [n0, d0];\r\n\r\n  Ctor.precision = pr;\r\n  external = true;\r\n\r\n  return r;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toHexadecimal = P.toHex = function (sd, rm) {\r\n  return toStringBinary(this, 16, sd, rm);\r\n};\r\n\r\n\r\n\r\n/*\r\n * Returns a new Decimal whose value is the nearest multiple of the magnitude of `y` to the value\r\n * of this Decimal.\r\n *\r\n * If the value of this Decimal is equidistant from two multiples of `y`, the rounding mode `rm`,\r\n * or `Decimal.rounding` if `rm` is omitted, determines the direction of the nearest multiple.\r\n *\r\n * In the context of this method, rounding mode 4 (ROUND_HALF_UP) is the same as rounding mode 0\r\n * (ROUND_UP), and so on.\r\n *\r\n * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n * or `y` is NaN, in which case the return value will be also be NaN.\r\n *\r\n * The return value is not affected by the value of `precision`.\r\n *\r\n * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toNearest() rounding mode not an integer: {rm}'\r\n * 'toNearest() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toNearest = function (y, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (y == null) {\r\n\r\n    // If x is not finite, return x.\r\n    if (!x.d) return x;\r\n\r\n    y = new Ctor(1);\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    y = new Ctor(y);\r\n    if (rm !== void 0) checkInt32(rm, 0, 8);\r\n\r\n    // If x is not finite, return x if y is not NaN, else NaN.\r\n    if (!x.d) return y.s ? x : y;\r\n\r\n    // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n    if (!y.d) {\r\n      if (y.s) y.s = x.s;\r\n      return y;\r\n    }\r\n  }\r\n\r\n  // If y is not zero, calculate the nearest multiple of y to x.\r\n  if (y.d[0]) {\r\n    external = false;\r\n    if (rm < 4) rm = [4, 5, 7, 8][rm];\r\n    x = divide(x, y, 0, rm, 1).times(y);\r\n    external = true;\r\n    finalise(x);\r\n\r\n  // If y is zero, return zero with the sign of x.\r\n  } else {\r\n    y.s = x.s;\r\n    x = y;\r\n  }\r\n\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return the value of this Decimal converted to a number primitive.\r\n * Zero keeps its sign.\r\n *\r\n */\r\nP.toNumber = function () {\r\n  return +this;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toOctal = function (sd, rm) {\r\n  return toStringBinary(this, 8, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n * to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * ECMAScript compliant.\r\n *\r\n *   pow(x, NaN)                           = NaN\r\n *   pow(x, ±0)                            = 1\r\n\r\n *   pow(NaN, non-zero)                    = NaN\r\n *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n *   pow(abs(x) > 1, -Infinity)            = +0\r\n *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n *   pow(abs(x) < 1, +Infinity)            = +0\r\n *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n *   pow(+Infinity, y > 0)                 = +Infinity\r\n *   pow(+Infinity, y < 0)                 = +0\r\n *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n *   pow(-Infinity, even integer > 0)      = +Infinity\r\n *   pow(-Infinity, odd integer < 0)       = -0\r\n *   pow(-Infinity, even integer < 0)      = +0\r\n *   pow(+0, y > 0)                        = +0\r\n *   pow(+0, y < 0)                        = +Infinity\r\n *   pow(-0, odd integer > 0)              = -0\r\n *   pow(-0, even integer > 0)             = +0\r\n *   pow(-0, odd integer < 0)              = -Infinity\r\n *   pow(-0, even integer < 0)             = +Infinity\r\n *   pow(finite x < 0, finite non-integer) = NaN\r\n *\r\n * For non-integer or very large exponents pow(x, y) is calculated using\r\n *\r\n *   x^y = exp(y*ln(x))\r\n *\r\n * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n * probability of an incorrectly rounded result\r\n * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n * i.e. 1 in 250,000,000,000,000\r\n *\r\n * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n *\r\n * y {number|string|Decimal} The power to which to raise this Decimal.\r\n *\r\n */\r\nP.toPower = P.pow = function (y) {\r\n  var e, k, pr, r, rm, s,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    yn = +(y = new Ctor(y));\r\n\r\n  // Either ±Infinity, NaN or ±0?\r\n  if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (x.eq(1)) return x;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n  // y exponent\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n  if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n    r = intPow(Ctor, x, k, pr);\r\n    return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n  }\r\n\r\n  s = x.s;\r\n\r\n  // if x is negative\r\n  if (s < 0) {\r\n\r\n    // if y is not an integer\r\n    if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n    // Result is positive if x is negative and the last digit of integer y is even.\r\n    if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n    // if x.eq(-1)\r\n    if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n      x.s = s;\r\n      return x;\r\n    }\r\n  }\r\n\r\n  // Estimate result exponent.\r\n  // x^y = 10^e,  where e = y * log10(x)\r\n  // log10(x) = log10(x_significand) + x_exponent\r\n  // log10(x_significand) = ln(x_significand) / ln(10)\r\n  k = mathpow(+x, yn);\r\n  e = k == 0 || !isFinite(k)\r\n    ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n    : new Ctor(k + '').e;\r\n\r\n  // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n  // Overflow/underflow?\r\n  if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n  external = false;\r\n  Ctor.rounding = x.s = 1;\r\n\r\n  // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n  // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n  // new Decimal(2.32456).pow('2087987436534566.46411')\r\n  // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n  k = Math.min(12, (e + '').length);\r\n\r\n  // r = x^y = exp(y*ln(x))\r\n  r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n  // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n  if (r.d) {\r\n\r\n    // Truncate to the required precision plus five rounding digits.\r\n    r = finalise(r, pr + 5, 1);\r\n\r\n    // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n    // the result.\r\n    if (checkRoundingDigits(r.d, pr, rm)) {\r\n      e = pr + 10;\r\n\r\n      // Truncate to the increased precision plus five rounding digits.\r\n      r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n      // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n      if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n        r = finalise(r, pr + 1, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  r.s = s;\r\n  external = true;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toPrecision = function (sd, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), sd, rm);\r\n    str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n * omitted.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toSD() digits out of range: {sd}'\r\n * 'toSD() digits not an integer: {sd}'\r\n * 'toSD() rounding mode not an integer: {rm}'\r\n * 'toSD() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toSignificantDigits = P.toSD = function (sd, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  }\r\n\r\n  return finalise(new Ctor(x), sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n *\r\n * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n *\r\n */\r\nP.toString = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n *\r\n */\r\nP.truncated = P.trunc = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 1);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n * Unlike `toString`, negative zero will include the minus sign.\r\n *\r\n */\r\nP.valueOf = P.toJSON = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n// Add aliases to match BigDecimal method names.\r\n// P.add = P.plus;\r\nP.subtract = P.minus;\r\nP.multiply = P.times;\r\nP.divide = P.div;\r\nP.remainder = P.mod;\r\nP.compareTo = P.cmp;\r\nP.negate = P.neg;\r\n */\r\n\r\n\r\n// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n/*\r\n *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n *                           finiteToString, naturalExponential, naturalLogarithm\r\n *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n *  convertBase              toStringBinary, parseOther\r\n *  cos                      P.cos\r\n *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n *                           taylorSeries, atan2, parseOther\r\n *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n *                           naturalLogarithm, ceil, floor, round, trunc\r\n *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n *                           toStringBinary\r\n *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n *  getLn10                  P.logarithm, naturalLogarithm\r\n *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n *  getPrecision             P.precision, P.toFraction\r\n *  getZeroString            digitsToString, finiteToString\r\n *  intPow                   P.toPower, parseOther\r\n *  isOdd                    toLessThanHalfPi\r\n *  maxOrMin                 max, min\r\n *  naturalExponential       P.naturalExponential, P.toPower\r\n *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n *                           P.toPower, naturalExponential\r\n *  nonFiniteToString        finiteToString, toStringBinary\r\n *  parseDecimal             Decimal\r\n *  parseOther               Decimal\r\n *  sin                      P.sin\r\n *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n *  toLessThanHalfPi         P.cos, P.sin\r\n *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n *  truncate                 intPow\r\n *\r\n *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n *                           naturalLogarithm, config, parseOther, random, Decimal\r\n */\r\n\r\n\r\nfunction digitsToString(d) {\r\n  var i, k, ws,\r\n    indexOfLastWord = d.length - 1,\r\n    str = '',\r\n    w = d[0];\r\n\r\n  if (indexOfLastWord > 0) {\r\n    str += w;\r\n    for (i = 1; i < indexOfLastWord; i++) {\r\n      ws = d[i] + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n      str += ws;\r\n    }\r\n\r\n    w = d[i];\r\n    ws = w + '';\r\n    k = LOG_BASE - ws.length;\r\n    if (k) str += getZeroString(k);\r\n  } else if (w === 0) {\r\n    return '0';\r\n  }\r\n\r\n  // Remove trailing zeros of last w.\r\n  for (; w % 10 === 0;) w /= 10;\r\n\r\n  return str + w;\r\n}\r\n\r\n\r\nfunction checkInt32(i, min, max) {\r\n  if (i !== ~~i || i < min || i > max) {\r\n    throw Error(invalidArgument + i);\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n * `repeating == null` if caller is `log` or `pow`,\r\n * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n */\r\nfunction checkRoundingDigits(d, i, rm, repeating) {\r\n  var di, k, r, rd;\r\n\r\n  // Get the length of the first word of the array d.\r\n  for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n  // Is the rounding digit in the first word of d?\r\n  if (--i < 0) {\r\n    i += LOG_BASE;\r\n    di = 0;\r\n  } else {\r\n    di = Math.ceil((i + 1) / LOG_BASE);\r\n    i %= LOG_BASE;\r\n  }\r\n\r\n  // i is the index (0 - 6) of the rounding digit.\r\n  // E.g. if within the word 3487563 the first rounding digit is 5,\r\n  // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n  k = mathpow(10, LOG_BASE - i);\r\n  rd = d[di] % k | 0;\r\n\r\n  if (repeating == null) {\r\n    if (i < 3) {\r\n      if (i == 0) rd = rd / 100 | 0;\r\n      else if (i == 1) rd = rd / 10 | 0;\r\n      r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n    } else {\r\n      r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n          (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n    }\r\n  } else {\r\n    if (i < 4) {\r\n      if (i == 0) rd = rd / 1000 | 0;\r\n      else if (i == 1) rd = rd / 100 | 0;\r\n      else if (i == 2) rd = rd / 10 | 0;\r\n      r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n    } else {\r\n      r = ((repeating || rm < 4) && rd + 1 == k ||\r\n      (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n    }\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n// Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n// Eg. convertBase('255', 10, 16) returns [15, 15].\r\n// Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\nfunction convertBase(str, baseIn, baseOut) {\r\n  var j,\r\n    arr = [0],\r\n    arrL,\r\n    i = 0,\r\n    strL = str.length;\r\n\r\n  for (; i < strL;) {\r\n    for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n    arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n    for (j = 0; j < arr.length; j++) {\r\n      if (arr[j] > baseOut - 1) {\r\n        if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n        arr[j + 1] += arr[j] / baseOut | 0;\r\n        arr[j] %= baseOut;\r\n      }\r\n    }\r\n  }\r\n\r\n  return arr.reverse();\r\n}\r\n\r\n\r\n/*\r\n * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction cosine(Ctor, x) {\r\n  var k, y,\r\n    len = x.d.length;\r\n\r\n  // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n  // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    y = Math.pow(4, -k).toString();\r\n  } else {\r\n    k = 16;\r\n    y = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  Ctor.precision += k;\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n  // Reverse argument reduction\r\n  for (var i = k; i--;) {\r\n    var cos2x = x.times(x);\r\n    x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n  }\r\n\r\n  Ctor.precision -= k;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Perform division in the specified base.\r\n */\r\nvar divide = (function () {\r\n\r\n  // Assumes non-zero x and k, and hence non-zero result.\r\n  function multiplyInteger(x, k, base) {\r\n    var temp,\r\n      carry = 0,\r\n      i = x.length;\r\n\r\n    for (x = x.slice(); i--;) {\r\n      temp = x[i] * k + carry;\r\n      x[i] = temp % base | 0;\r\n      carry = temp / base | 0;\r\n    }\r\n\r\n    if (carry) x.unshift(carry);\r\n\r\n    return x;\r\n  }\r\n\r\n  function compare(a, b, aL, bL) {\r\n    var i, r;\r\n\r\n    if (aL != bL) {\r\n      r = aL > bL ? 1 : -1;\r\n    } else {\r\n      for (i = r = 0; i < aL; i++) {\r\n        if (a[i] != b[i]) {\r\n          r = a[i] > b[i] ? 1 : -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n  function subtract(a, b, aL, base) {\r\n    var i = 0;\r\n\r\n    // Subtract b from a.\r\n    for (; aL--;) {\r\n      a[aL] -= i;\r\n      i = a[aL] < b[aL] ? 1 : 0;\r\n      a[aL] = i * base + a[aL] - b[aL];\r\n    }\r\n\r\n    // Remove leading zeros.\r\n    for (; !a[0] && a.length > 1;) a.shift();\r\n  }\r\n\r\n  return function (x, y, pr, rm, dp, base) {\r\n    var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n      yL, yz,\r\n      Ctor = x.constructor,\r\n      sign = x.s == y.s ? 1 : -1,\r\n      xd = x.d,\r\n      yd = y.d;\r\n\r\n    // Either NaN, Infinity or 0?\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n        !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n        // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n        xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n    }\r\n\r\n    if (base) {\r\n      logBase = 1;\r\n      e = x.e - y.e;\r\n    } else {\r\n      base = BASE;\r\n      logBase = LOG_BASE;\r\n      e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n    }\r\n\r\n    yL = yd.length;\r\n    xL = xd.length;\r\n    q = new Ctor(sign);\r\n    qd = q.d = [];\r\n\r\n    // Result exponent may be one less than e.\r\n    // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n    for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n    if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n    if (pr == null) {\r\n      sd = pr = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else if (dp) {\r\n      sd = pr + (x.e - y.e) + 1;\r\n    } else {\r\n      sd = pr;\r\n    }\r\n\r\n    if (sd < 0) {\r\n      qd.push(1);\r\n      more = true;\r\n    } else {\r\n\r\n      // Convert precision in number of base 10 digits to base 1e7 digits.\r\n      sd = sd / logBase + 2 | 0;\r\n      i = 0;\r\n\r\n      // divisor < 1e7\r\n      if (yL == 1) {\r\n        k = 0;\r\n        yd = yd[0];\r\n        sd++;\r\n\r\n        // k is the carry.\r\n        for (; (i < xL || k) && sd--; i++) {\r\n          t = k * base + (xd[i] || 0);\r\n          qd[i] = t / yd | 0;\r\n          k = t % yd | 0;\r\n        }\r\n\r\n        more = k || i < xL;\r\n\r\n      // divisor >= 1e7\r\n      } else {\r\n\r\n        // Normalise xd and yd so highest order digit of yd is >= base/2\r\n        k = base / (yd[0] + 1) | 0;\r\n\r\n        if (k > 1) {\r\n          yd = multiplyInteger(yd, k, base);\r\n          xd = multiplyInteger(xd, k, base);\r\n          yL = yd.length;\r\n          xL = xd.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xd.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL;) rem[remL++] = 0;\r\n\r\n        yz = yd.slice();\r\n        yz.unshift(0);\r\n        yd0 = yd[0];\r\n\r\n        if (yd[1] >= base / 2) ++yd0;\r\n\r\n        do {\r\n          k = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yd, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, k.\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // k will be how many times the divisor goes into the current remainder.\r\n            k = rem0 / yd0 | 0;\r\n\r\n            //  Algorithm:\r\n            //  1. product = divisor * trial digit (k)\r\n            //  2. if product > remainder: product -= divisor, k--\r\n            //  3. remainder -= product\r\n            //  4. if product was < remainder at 2:\r\n            //    5. compare new remainder and divisor\r\n            //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n            if (k > 1) {\r\n              if (k >= base) k = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiplyInteger(yd, k, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              cmp = compare(prod, rem, prodL, remL);\r\n\r\n              // product > remainder.\r\n              if (cmp == 1) {\r\n                k--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n              }\r\n            } else {\r\n\r\n              // cmp is -1.\r\n              // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n              // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n              if (k == 0) cmp = k = 1;\r\n              prod = yd.slice();\r\n            }\r\n\r\n            prodL = prod.length;\r\n            if (prodL < remL) prod.unshift(0);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n\r\n            // If product was < previous remainder.\r\n            if (cmp == -1) {\r\n              remL = rem.length;\r\n\r\n              // Compare divisor and new remainder.\r\n              cmp = compare(yd, rem, yL, remL);\r\n\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              if (cmp < 1) {\r\n                k++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yd, remL, base);\r\n              }\r\n            }\r\n\r\n            remL = rem.length;\r\n          } else if (cmp === 0) {\r\n            k++;\r\n            rem = [0];\r\n          }    // if cmp === 1, k will be 0\r\n\r\n          // Add the next digit, k, to the result array.\r\n          qd[i++] = k;\r\n\r\n          // Update the remainder.\r\n          if (cmp && rem[0]) {\r\n            rem[remL++] = xd[xi] || 0;\r\n          } else {\r\n            rem = [xd[xi]];\r\n            remL = 1;\r\n          }\r\n\r\n        } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n        more = rem[0] !== void 0;\r\n      }\r\n\r\n      // Leading zero?\r\n      if (!qd[0]) qd.shift();\r\n    }\r\n\r\n    // logBase is 1 when divide is being used for base conversion.\r\n    if (logBase == 1) {\r\n      q.e = e;\r\n      inexact = more;\r\n    } else {\r\n\r\n      // To calculate q.e, first get the number of digits of qd[0].\r\n      for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n      q.e = i + e * logBase - 1;\r\n\r\n      finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n    }\r\n\r\n    return q;\r\n  };\r\n})();\r\n\r\n\r\n/*\r\n * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n * Check for over/under-flow.\r\n */\r\n function finalise(x, sd, rm, isTruncated) {\r\n  var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n    Ctor = x.constructor;\r\n\r\n  // Don't round if sd is null or undefined.\r\n  out: if (sd != null) {\r\n    xd = x.d;\r\n\r\n    // Infinity/NaN.\r\n    if (!xd) return x;\r\n\r\n    // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n    // w: the word of xd containing rd, a base 1e7 number.\r\n    // xdi: the index of w within xd.\r\n    // digits: the number of digits of w.\r\n    // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n    // they had leading zeros)\r\n    // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n    // Get the length of the first word of the digits array xd.\r\n    for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n    i = sd - digits;\r\n\r\n    // Is the rounding digit in the first word of xd?\r\n    if (i < 0) {\r\n      i += LOG_BASE;\r\n      j = sd;\r\n      w = xd[xdi = 0];\r\n\r\n      // Get the rounding digit at index j of w.\r\n      rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n    } else {\r\n      xdi = Math.ceil((i + 1) / LOG_BASE);\r\n      k = xd.length;\r\n      if (xdi >= k) {\r\n        if (isTruncated) {\r\n\r\n          // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n          for (; k++ <= xdi;) xd.push(0);\r\n          w = rd = 0;\r\n          digits = 1;\r\n          i %= LOG_BASE;\r\n          j = i - LOG_BASE + 1;\r\n        } else {\r\n          break out;\r\n        }\r\n      } else {\r\n        w = k = xd[xdi];\r\n\r\n        // Get the number of digits of w.\r\n        for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n        // Get the index of rd within w.\r\n        i %= LOG_BASE;\r\n\r\n        // Get the index of rd within w, adjusted for leading zeros.\r\n        // The number of leading zeros of w is given by LOG_BASE - digits.\r\n        j = i - LOG_BASE + digits;\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      }\r\n    }\r\n\r\n    // Are there any non-zero digits after the rounding digit?\r\n    isTruncated = isTruncated || sd < 0 ||\r\n      xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n    // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n    // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n    // will give 714.\r\n\r\n    roundUp = rm < 4\r\n      ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n      : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n        // Check whether the digit to the left of the rounding digit is odd.\r\n        ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n          rm == (x.s < 0 ? 8 : 7));\r\n\r\n    if (sd < 1 || !xd[0]) {\r\n      xd.length = 0;\r\n      if (roundUp) {\r\n\r\n        // Convert sd to decimal places.\r\n        sd -= x.e + 1;\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n        x.e = -sd || 0;\r\n      } else {\r\n\r\n        // Zero.\r\n        xd[0] = x.e = 0;\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n    // Remove excess digits.\r\n    if (i == 0) {\r\n      xd.length = xdi;\r\n      k = 1;\r\n      xdi--;\r\n    } else {\r\n      xd.length = xdi + 1;\r\n      k = mathpow(10, LOG_BASE - i);\r\n\r\n      // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n      // j > 0 means i > number of leading zeros of w.\r\n      xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n    }\r\n\r\n    if (roundUp) {\r\n      for (;;) {\r\n\r\n        // Is the digit to be rounded up in the first word of xd?\r\n        if (xdi == 0) {\r\n\r\n          // i will be the length of xd[0] before k is added.\r\n          for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n          j = xd[0] += k;\r\n          for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n          // if i != k the length has increased.\r\n          if (i != k) {\r\n            x.e++;\r\n            if (xd[0] == BASE) xd[0] = 1;\r\n          }\r\n\r\n          break;\r\n        } else {\r\n          xd[xdi] += k;\r\n          if (xd[xdi] != BASE) break;\r\n          xd[xdi--] = 0;\r\n          k = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n  }\r\n\r\n  if (external) {\r\n\r\n    // Overflow?\r\n    if (x.e > Ctor.maxE) {\r\n\r\n      // Infinity.\r\n      x.d = null;\r\n      x.e = NaN;\r\n\r\n    // Underflow?\r\n    } else if (x.e < Ctor.minE) {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n      // Ctor.underflow = true;\r\n    } // else Ctor.underflow = false;\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\nfunction finiteToString(x, isExp, sd) {\r\n  if (!x.isFinite()) return nonFiniteToString(x);\r\n  var k,\r\n    e = x.e,\r\n    str = digitsToString(x.d),\r\n    len = str.length;\r\n\r\n  if (isExp) {\r\n    if (sd && (k = sd - len) > 0) {\r\n      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n    } else if (len > 1) {\r\n      str = str.charAt(0) + '.' + str.slice(1);\r\n    }\r\n\r\n    str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n  } else if (e < 0) {\r\n    str = '0.' + getZeroString(-e - 1) + str;\r\n    if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n  } else if (e >= len) {\r\n    str += getZeroString(e + 1 - len);\r\n    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n  } else {\r\n    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n    if (sd && (k = sd - len) > 0) {\r\n      if (e + 1 === len) str += '.';\r\n      str += getZeroString(k);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// Calculate the base 10 exponent from the base 1e7 exponent.\r\nfunction getBase10Exponent(digits, e) {\r\n  var w = digits[0];\r\n\r\n  // Add the number of digits of the first word of the digits array.\r\n  for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n  return e;\r\n}\r\n\r\n\r\nfunction getLn10(Ctor, sd, pr) {\r\n  if (sd > LN10_PRECISION) {\r\n\r\n    // Reset global state in case the exception is caught.\r\n    external = true;\r\n    if (pr) Ctor.precision = pr;\r\n    throw Error(precisionLimitExceeded);\r\n  }\r\n  return finalise(new Ctor(LN10), sd, 1, true);\r\n}\r\n\r\n\r\nfunction getPi(Ctor, sd, rm) {\r\n  if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n  return finalise(new Ctor(PI), sd, rm, true);\r\n}\r\n\r\n\r\nfunction getPrecision(digits) {\r\n  var w = digits.length - 1,\r\n    len = w * LOG_BASE + 1;\r\n\r\n  w = digits[w];\r\n\r\n  // If non-zero...\r\n  if (w) {\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    for (; w % 10 == 0; w /= 10) len--;\r\n\r\n    // Add the number of digits of the first word.\r\n    for (w = digits[0]; w >= 10; w /= 10) len++;\r\n  }\r\n\r\n  return len;\r\n}\r\n\r\n\r\nfunction getZeroString(k) {\r\n  var zs = '';\r\n  for (; k--;) zs += '0';\r\n  return zs;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n * integer of type number.\r\n *\r\n * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n *\r\n */\r\nfunction intPow(Ctor, x, n, pr) {\r\n  var isTruncated,\r\n    r = new Ctor(1),\r\n\r\n    // Max n of 9007199254740991 takes 53 loop iterations.\r\n    // Maximum digits array length; leaves [28, 34] guard digits.\r\n    k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n  external = false;\r\n\r\n  for (;;) {\r\n    if (n % 2) {\r\n      r = r.times(x);\r\n      if (truncate(r.d, k)) isTruncated = true;\r\n    }\r\n\r\n    n = mathfloor(n / 2);\r\n    if (n === 0) {\r\n\r\n      // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n      n = r.d.length - 1;\r\n      if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n      break;\r\n    }\r\n\r\n    x = x.times(x);\r\n    truncate(x.d, k);\r\n  }\r\n\r\n  external = true;\r\n\r\n  return r;\r\n}\r\n\r\n\r\nfunction isOdd(n) {\r\n  return n.d[n.d.length - 1] & 1;\r\n}\r\n\r\n\r\n/*\r\n * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n */\r\nfunction maxOrMin(Ctor, args, ltgt) {\r\n  var y,\r\n    x = new Ctor(args[0]),\r\n    i = 0;\r\n\r\n  for (; ++i < args.length;) {\r\n    y = new Ctor(args[i]);\r\n    if (!y.s) {\r\n      x = y;\r\n      break;\r\n    } else if (x[ltgt](y)) {\r\n      x = y;\r\n    }\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n * Taylor/Maclaurin series.\r\n *\r\n * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n *\r\n * Argument reduction:\r\n *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n *   exp(x) = exp(x / 2^k)^(2^k)\r\n *\r\n * Previously, the argument was initially reduced by\r\n * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n * found to be slower than just dividing repeatedly by 32 as above.\r\n *\r\n * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n *\r\n *  exp(Infinity)  = Infinity\r\n *  exp(-Infinity) = 0\r\n *  exp(NaN)       = NaN\r\n *  exp(±0)        = 1\r\n *\r\n *  exp(x) is non-terminating for any finite, non-zero x.\r\n *\r\n *  The result will always be correctly rounded.\r\n *\r\n */\r\nfunction naturalExponential(x, sd) {\r\n  var denominator, guard, j, pow, sum, t, wpr,\r\n    rep = 0,\r\n    i = 0,\r\n    k = 0,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // 0/NaN/Infinity?\r\n  if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n    return new Ctor(x.d\r\n      ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n      : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  t = new Ctor(0.03125);\r\n\r\n  // while abs(x) >= 0.1\r\n  while (x.e > -2) {\r\n\r\n    // x = x / 2^5\r\n    x = x.times(t);\r\n    k += 5;\r\n  }\r\n\r\n  // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n  // necessary to ensure the first 4 rounding digits are correct.\r\n  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n  wpr += guard;\r\n  denominator = pow = sum = new Ctor(1);\r\n  Ctor.precision = wpr;\r\n\r\n  for (;;) {\r\n    pow = finalise(pow.times(x), wpr, 1);\r\n    denominator = denominator.times(++i);\r\n    t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      j = k;\r\n      while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n      // Check to see if the first 4 rounding digits are [49]999.\r\n      // If so, repeat the summation with a higher precision, otherwise\r\n      // e.g. with precision: 18, rounding: 1\r\n      // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n\r\n        if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += 10;\r\n          denominator = pow = t = new Ctor(1);\r\n          i = 0;\r\n          rep++;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n *  ln(-n)        = NaN\r\n *  ln(0)         = -Infinity\r\n *  ln(-0)        = -Infinity\r\n *  ln(1)         = 0\r\n *  ln(Infinity)  = Infinity\r\n *  ln(-Infinity) = NaN\r\n *  ln(NaN)       = NaN\r\n *\r\n *  ln(n) (n != 1) is non-terminating.\r\n *\r\n */\r\nfunction naturalLogarithm(y, sd) {\r\n  var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n    n = 1,\r\n    guard = 10,\r\n    x = y,\r\n    xd = x.d,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // Is x negative or Infinity, NaN, 0 or 1?\r\n  if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n    return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  Ctor.precision = wpr += guard;\r\n  c = digitsToString(xd);\r\n  c0 = c.charAt(0);\r\n\r\n  if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n    // Argument reduction.\r\n    // The series converges faster the closer the argument is to 1, so using\r\n    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n    // later be divided by this number, then separate out the power of 10 using\r\n    // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n    // max n is 6 (gives 0.7 - 1.3)\r\n    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n      x = x.times(y);\r\n      c = digitsToString(x.d);\r\n      c0 = c.charAt(0);\r\n      n++;\r\n    }\r\n\r\n    e = x.e;\r\n\r\n    if (c0 > 1) {\r\n      x = new Ctor('0.' + c);\r\n      e++;\r\n    } else {\r\n      x = new Ctor(c0 + '.' + c.slice(1));\r\n    }\r\n  } else {\r\n\r\n    // The argument reduction method above may result in overflow if the argument y is a massive\r\n    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n    // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n    t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n    x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n    Ctor.precision = pr;\r\n\r\n    return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n  }\r\n\r\n  // x1 is x reduced to a value near 1.\r\n  x1 = x;\r\n\r\n  // Taylor series.\r\n  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n  // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n  sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n  x2 = finalise(x.times(x), wpr, 1);\r\n  denominator = 3;\r\n\r\n  for (;;) {\r\n    numerator = finalise(numerator.times(x2), wpr, 1);\r\n    t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      sum = sum.times(2);\r\n\r\n      // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n      // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n      sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n      // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n      // been repeated previously) and the first 4 rounding digits 9999?\r\n      // If so, restart the summation with a higher precision, otherwise\r\n      // e.g. with precision: 12, rounding: 1\r\n      // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n        if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += guard;\r\n          t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n          x2 = finalise(x.times(x), wpr, 1);\r\n          denominator = rep = 1;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n    denominator += 2;\r\n  }\r\n}\r\n\r\n\r\n// ±Infinity, NaN.\r\nfunction nonFiniteToString(x) {\r\n  // Unsigned.\r\n  return String(x.s * x.s / 0);\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from string `str`.\r\n */\r\nfunction parseDecimal(x, str) {\r\n  var e, i, len;\r\n\r\n  // Decimal point?\r\n  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = str.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +str.slice(i + 1);\r\n    str = str.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = str.length;\r\n  }\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n  // Determine trailing zeros.\r\n  for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n  str = str.slice(i, len);\r\n\r\n  if (str) {\r\n    len -= i;\r\n    x.e = e = e - i - 1;\r\n    x.d = [];\r\n\r\n    // Transform base\r\n\r\n    // e is the base 10 exponent.\r\n    // i is where to slice str to get the first word of the digits array.\r\n    i = (e + 1) % LOG_BASE;\r\n    if (e < 0) i += LOG_BASE;\r\n\r\n    if (i < len) {\r\n      if (i) x.d.push(+str.slice(0, i));\r\n      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n      str = str.slice(i);\r\n      i = LOG_BASE - str.length;\r\n    } else {\r\n      i -= len;\r\n    }\r\n\r\n    for (; i--;) str += '0';\r\n    x.d.push(+str);\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > x.constructor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < x.constructor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // x.constructor.underflow = true;\r\n      } // else x.constructor.underflow = false;\r\n    }\r\n  } else {\r\n\r\n    // Zero.\r\n    x.e = 0;\r\n    x.d = [0];\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n */\r\nfunction parseOther(x, str) {\r\n  var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n  if (str === 'Infinity' || str === 'NaN') {\r\n    if (!+str) x.s = NaN;\r\n    x.e = NaN;\r\n    x.d = null;\r\n    return x;\r\n  }\r\n\r\n  if (isHex.test(str))  {\r\n    base = 16;\r\n    str = str.toLowerCase();\r\n  } else if (isBinary.test(str))  {\r\n    base = 2;\r\n  } else if (isOctal.test(str))  {\r\n    base = 8;\r\n  } else {\r\n    throw Error(invalidArgument + str);\r\n  }\r\n\r\n  // Is there a binary exponent part?\r\n  i = str.search(/p/i);\r\n\r\n  if (i > 0) {\r\n    p = +str.slice(i + 1);\r\n    str = str.substring(2, i);\r\n  } else {\r\n    str = str.slice(2);\r\n  }\r\n\r\n  // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n  // fraction part will be restored.\r\n  i = str.indexOf('.');\r\n  isFloat = i >= 0;\r\n  Ctor = x.constructor;\r\n\r\n  if (isFloat) {\r\n    str = str.replace('.', '');\r\n    len = str.length;\r\n    i = len - i;\r\n\r\n    // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n    divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n  }\r\n\r\n  xd = convertBase(str, base, BASE);\r\n  xe = xd.length - 1;\r\n\r\n  // Remove trailing zeros.\r\n  for (i = xe; xd[i] === 0; --i) xd.pop();\r\n  if (i < 0) return new Ctor(x.s * 0);\r\n  x.e = getBase10Exponent(xd, xe);\r\n  x.d = xd;\r\n  external = false;\r\n\r\n  // At what precision to perform the division to ensure exact conversion?\r\n  // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n  // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n  // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n  // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n  // Therefore using 4 * the number of digits of str will always be enough.\r\n  if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n  // Multiply by the binary exponent part if present.\r\n  if (p) x = x.times(Math.abs(p) < 54 ? Math.pow(2, p) : Decimal.pow(2, p));\r\n  external = true;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction sine(Ctor, x) {\r\n  var k,\r\n    len = x.d.length;\r\n\r\n  if (len < 3) return taylorSeries(Ctor, 2, x, x);\r\n\r\n  // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n  // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n  // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  k = 1.4 * Math.sqrt(len);\r\n  k = k > 16 ? 16 : k | 0;\r\n\r\n  // Max k before Math.pow precision loss is 22\r\n  x = x.times(Math.pow(5, -k));\r\n  x = taylorSeries(Ctor, 2, x, x);\r\n\r\n  // Reverse argument reduction\r\n  var sin2_x,\r\n    d5 = new Ctor(5),\r\n    d16 = new Ctor(16),\r\n    d20 = new Ctor(20);\r\n  for (; k--;) {\r\n    sin2_x = x.times(x);\r\n    x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n// Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\nfunction taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n  var j, t, u, x2,\r\n    i = 1,\r\n    pr = Ctor.precision,\r\n    k = Math.ceil(pr / LOG_BASE);\r\n\r\n  external = false;\r\n  x2 = x.times(x);\r\n  u = new Ctor(y);\r\n\r\n  for (;;) {\r\n    t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n    y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    t = u.plus(y);\r\n\r\n    if (t.d[k] !== void 0) {\r\n      for (j = k; t.d[j] === u.d[j] && j--;);\r\n      if (j == -1) break;\r\n    }\r\n\r\n    j = u;\r\n    u = y;\r\n    y = t;\r\n    t = j;\r\n    i++;\r\n  }\r\n\r\n  external = true;\r\n  t.d.length = k + 1;\r\n\r\n  return t;\r\n}\r\n\r\n\r\n// Return the absolute value of `x` reduced to less than or equal to half pi.\r\nfunction toLessThanHalfPi(Ctor, x) {\r\n  var t,\r\n    isNeg = x.s < 0,\r\n    pi = getPi(Ctor, Ctor.precision, 1),\r\n    halfPi = pi.times(0.5);\r\n\r\n  x = x.abs();\r\n\r\n  if (x.lte(halfPi)) {\r\n    quadrant = isNeg ? 4 : 1;\r\n    return x;\r\n  }\r\n\r\n  t = x.divToInt(pi);\r\n\r\n  if (t.isZero()) {\r\n    quadrant = isNeg ? 3 : 2;\r\n  } else {\r\n    x = x.minus(t.times(pi));\r\n\r\n    // 0 <= x < pi\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n      return x;\r\n    }\r\n\r\n    quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n  }\r\n\r\n  return x.minus(pi).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return the value of Decimal `x` as a string in base `baseOut`.\r\n *\r\n * If the optional `sd` argument is present include a binary exponent suffix.\r\n */\r\nfunction toStringBinary(x, baseOut, sd, rm) {\r\n  var base, e, i, k, len, roundUp, str, xd, y,\r\n    Ctor = x.constructor,\r\n    isExp = sd !== void 0;\r\n\r\n  if (isExp) {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  } else {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  }\r\n\r\n  if (!x.isFinite()) {\r\n    str = nonFiniteToString(x);\r\n  } else {\r\n    str = finiteToString(x);\r\n    i = str.indexOf('.');\r\n\r\n    // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n    // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n    // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n    // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n    if (isExp) {\r\n      base = 2;\r\n      if (baseOut == 16) {\r\n        sd = sd * 4 - 3;\r\n      } else if (baseOut == 8) {\r\n        sd = sd * 3 - 2;\r\n      }\r\n    } else {\r\n      base = baseOut;\r\n    }\r\n\r\n    // Convert the number as an integer then divide the result by its base raised to a power such\r\n    // that the fraction part will be restored.\r\n\r\n    // Non-integer.\r\n    if (i >= 0) {\r\n      str = str.replace('.', '');\r\n      y = new Ctor(1);\r\n      y.e = str.length - i;\r\n      y.d = convertBase(finiteToString(y), 10, base);\r\n      y.e = y.d.length;\r\n    }\r\n\r\n    xd = convertBase(str, 10, base);\r\n    e = len = xd.length;\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] == 0;) xd.pop();\r\n\r\n    if (!xd[0]) {\r\n      str = isExp ? '0p+0' : '0';\r\n    } else {\r\n      if (i < 0) {\r\n        e--;\r\n      } else {\r\n        x = new Ctor(x);\r\n        x.d = xd;\r\n        x.e = e;\r\n        x = divide(x, y, sd, rm, 0, base);\r\n        xd = x.d;\r\n        e = x.e;\r\n        roundUp = inexact;\r\n      }\r\n\r\n      // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      i = xd[sd];\r\n      k = base / 2;\r\n      roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n      roundUp = rm < 4\r\n        ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n        : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n          rm === (x.s < 0 ? 8 : 7));\r\n\r\n      xd.length = sd;\r\n\r\n      if (roundUp) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up and so on.\r\n        for (; ++xd[--sd] > base - 1;) {\r\n          xd[sd] = 0;\r\n          if (!sd) {\r\n            ++e;\r\n            xd.unshift(1);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Determine trailing zeros.\r\n      for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n      // E.g. [4, 11, 15] becomes 4bf.\r\n      for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n      // Add binary exponent suffix?\r\n      if (isExp) {\r\n        if (len > 1) {\r\n          if (baseOut == 16 || baseOut == 8) {\r\n            i = baseOut == 16 ? 4 : 3;\r\n            for (--len; len % i; len++) str += '0';\r\n            xd = convertBase(str, base, baseOut);\r\n            for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n            // xd[0] will always be be 1\r\n            for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n          } else {\r\n            str = str.charAt(0) + '.' + str.slice(1);\r\n          }\r\n        }\r\n\r\n        str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n      } else if (e < 0) {\r\n        for (; ++e;) str = '0' + str;\r\n        str = '0.' + str;\r\n      } else {\r\n        if (++e > len) for (e -= len; e-- ;) str += '0';\r\n        else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n  }\r\n\r\n  return x.s < 0 ? '-' + str : str;\r\n}\r\n\r\n\r\n// Does not strip trailing zeros.\r\nfunction truncate(arr, len) {\r\n  if (arr.length > len) {\r\n    arr.length = len;\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n// Decimal methods\r\n\r\n\r\n/*\r\n *  abs\r\n *  acos\r\n *  acosh\r\n *  add\r\n *  asin\r\n *  asinh\r\n *  atan\r\n *  atanh\r\n *  atan2\r\n *  cbrt\r\n *  ceil\r\n *  clone\r\n *  config\r\n *  cos\r\n *  cosh\r\n *  div\r\n *  exp\r\n *  floor\r\n *  hypot\r\n *  ln\r\n *  log\r\n *  log2\r\n *  log10\r\n *  max\r\n *  min\r\n *  mod\r\n *  mul\r\n *  pow\r\n *  random\r\n *  round\r\n *  set\r\n *  sign\r\n *  sin\r\n *  sinh\r\n *  sqrt\r\n *  sub\r\n *  tan\r\n *  tanh\r\n *  trunc\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction abs(x) {\r\n  return new this(x).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction acos(x) {\r\n  return new this(x).acos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction acosh(x) {\r\n  return new this(x).acosh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction add(x, y) {\r\n  return new this(x).plus(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction asin(x) {\r\n  return new this(x).asin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction asinh(x) {\r\n  return new this(x).asinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction atan(x) {\r\n  return new this(x).atan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction atanh(x) {\r\n  return new this(x).atanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi, pi]\r\n *\r\n * y {number|string|Decimal} The y-coordinate.\r\n * x {number|string|Decimal} The x-coordinate.\r\n *\r\n * atan2(±0, -0)               = ±pi\r\n * atan2(±0, +0)               = ±0\r\n * atan2(±0, -x)               = ±pi for x > 0\r\n * atan2(±0, x)                = ±0 for x > 0\r\n * atan2(-y, ±0)               = -pi/2 for y > 0\r\n * atan2(y, ±0)                = pi/2 for y > 0\r\n * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n * atan2(±Infinity, +Infinity) = ±pi/4\r\n * atan2(NaN, x) = NaN\r\n * atan2(y, NaN) = NaN\r\n *\r\n */\r\nfunction atan2(y, x) {\r\n  y = new this(y);\r\n  x = new this(x);\r\n  var r,\r\n    pr = this.precision,\r\n    rm = this.rounding,\r\n    wpr = pr + 4;\r\n\r\n  // Either NaN\r\n  if (!y.s || !x.s) {\r\n    r = new this(NaN);\r\n\r\n  // Both ±Infinity\r\n  } else if (!y.d && !x.d) {\r\n    r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n    r.s = y.s;\r\n\r\n  // x is ±Infinity or y is ±0\r\n  } else if (!x.d || y.isZero()) {\r\n    r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n    r.s = y.s;\r\n\r\n  // y is ±Infinity or x is ±0\r\n  } else if (!y.d || x.isZero()) {\r\n    r = getPi(this, wpr, 1).times(0.5);\r\n    r.s = y.s;\r\n\r\n  // Both non-zero and finite\r\n  } else if (x.s < 0) {\r\n    this.precision = wpr;\r\n    this.rounding = 1;\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n    x = getPi(this, wpr, 1);\r\n    this.precision = pr;\r\n    this.rounding = rm;\r\n    r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n  } else {\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction cbrt(x) {\r\n  return new this(x).cbrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction ceil(x) {\r\n  return finalise(x = new this(x), x.e + 1, 2);\r\n}\r\n\r\n\r\n/*\r\n * Configure global settings for a Decimal constructor.\r\n *\r\n * `obj` is an object with one or more of the following properties,\r\n *\r\n *   precision  {number}\r\n *   rounding   {number}\r\n *   toExpNeg   {number}\r\n *   toExpPos   {number}\r\n *   maxE       {number}\r\n *   minE       {number}\r\n *   modulo     {number}\r\n *   crypto     {boolean|number}\r\n *   defaults   {true}\r\n *\r\n * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n *\r\n */\r\nfunction config(obj) {\r\n  if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n  var i, p, v,\r\n    useDefaults = obj.defaults === true,\r\n    ps = [\r\n      'precision', 1, MAX_DIGITS,\r\n      'rounding', 0, 8,\r\n      'toExpNeg', -EXP_LIMIT, 0,\r\n      'toExpPos', 0, EXP_LIMIT,\r\n      'maxE', 0, EXP_LIMIT,\r\n      'minE', -EXP_LIMIT, 0,\r\n      'modulo', 0, 9\r\n    ];\r\n\r\n  for (i = 0; i < ps.length; i += 3) {\r\n    if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n    if ((v = obj[p]) !== void 0) {\r\n      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n      else throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n  if ((v = obj[p]) !== void 0) {\r\n    if (v === true || v === false || v === 0 || v === 1) {\r\n      if (v) {\r\n        if (typeof crypto != 'undefined' && crypto &&\r\n          (crypto.getRandomValues || crypto.randomBytes)) {\r\n          this[p] = true;\r\n        } else {\r\n          throw Error(cryptoUnavailable);\r\n        }\r\n      } else {\r\n        this[p] = false;\r\n      }\r\n    } else {\r\n      throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cos(x) {\r\n  return new this(x).cos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cosh(x) {\r\n  return new this(x).cosh();\r\n}\r\n\r\n\r\n/*\r\n * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n * constructor.\r\n *\r\n */\r\nfunction clone(obj) {\r\n  var i, p, ps;\r\n\r\n  /*\r\n   * The Decimal constructor and exported function.\r\n   * Return a new Decimal instance.\r\n   *\r\n   * v {number|string|Decimal} A numeric value.\r\n   *\r\n   */\r\n  function Decimal(v) {\r\n    var e, i, t,\r\n      x = this;\r\n\r\n    // Decimal called without new.\r\n    if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n    // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n    // which points to Object.\r\n    x.constructor = Decimal;\r\n\r\n    // Duplicate.\r\n    if (v instanceof Decimal) {\r\n      x.s = v.s;\r\n      x.e = v.e;\r\n      x.d = (v = v.d) ? v.slice() : v;\r\n      return;\r\n    }\r\n\r\n    t = typeof v;\r\n\r\n    if (t === 'number') {\r\n      if (v === 0) {\r\n        x.s = 1 / v < 0 ? -1 : 1;\r\n        x.e = 0;\r\n        x.d = [0];\r\n        return;\r\n      }\r\n\r\n      if (v < 0) {\r\n        v = -v;\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 1;\r\n      }\r\n\r\n      // Fast path for small integers.\r\n      if (v === ~~v && v < 1e7) {\r\n        for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n        x.e = e;\r\n        x.d = [v];\r\n        return;\r\n\r\n      // Infinity, NaN.\r\n      } else if (v * 0 !== 0) {\r\n        if (!v) x.s = NaN;\r\n        x.e = NaN;\r\n        x.d = null;\r\n        return;\r\n      }\r\n\r\n      return parseDecimal(x, v.toString());\r\n\r\n    } else if (t !== 'string') {\r\n      throw Error(invalidArgument + v);\r\n    }\r\n\r\n    // Minus sign?\r\n    if (v.charCodeAt(0) === 45) {\r\n      v = v.slice(1);\r\n      x.s = -1;\r\n    } else {\r\n      x.s = 1;\r\n    }\r\n\r\n    return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n  }\r\n\r\n  Decimal.prototype = P;\r\n\r\n  Decimal.ROUND_UP = 0;\r\n  Decimal.ROUND_DOWN = 1;\r\n  Decimal.ROUND_CEIL = 2;\r\n  Decimal.ROUND_FLOOR = 3;\r\n  Decimal.ROUND_HALF_UP = 4;\r\n  Decimal.ROUND_HALF_DOWN = 5;\r\n  Decimal.ROUND_HALF_EVEN = 6;\r\n  Decimal.ROUND_HALF_CEIL = 7;\r\n  Decimal.ROUND_HALF_FLOOR = 8;\r\n  Decimal.EUCLID = 9;\r\n\r\n  Decimal.config = Decimal.set = config;\r\n  Decimal.clone = clone;\r\n  Decimal.isDecimal = isDecimalInstance;                          \r\n\r\n  Decimal.abs = abs;\r\n  Decimal.acos = acos;\r\n  Decimal.acosh = acosh;        // ES6\r\n  Decimal.add = add;\r\n  Decimal.asin = asin;\r\n  Decimal.asinh = asinh;        // ES6\r\n  Decimal.atan = atan;\r\n  Decimal.atanh = atanh;        // ES6\r\n  Decimal.atan2 = atan2;\r\n  Decimal.cbrt = cbrt;          // ES6\r\n  Decimal.ceil = ceil;\r\n  Decimal.cos = cos;\r\n  Decimal.cosh = cosh;          // ES6\r\n  Decimal.div = div;\r\n  Decimal.exp = exp;\r\n  Decimal.floor = floor;\r\n  Decimal.hypot = hypot;        // ES6\r\n  Decimal.ln = ln;\r\n  Decimal.log = log;\r\n  Decimal.log10 = log10;        // ES6\r\n  Decimal.log2 = log2;          // ES6\r\n  Decimal.max = max;\r\n  Decimal.min = min;\r\n  Decimal.mod = mod;\r\n  Decimal.mul = mul;\r\n  Decimal.pow = pow;\r\n  Decimal.random = random;\r\n  Decimal.round = round;\r\n  Decimal.sign = sign;          // ES6\r\n  Decimal.sin = sin;\r\n  Decimal.sinh = sinh;          // ES6\r\n  Decimal.sqrt = sqrt;\r\n  Decimal.sub = sub;\r\n  Decimal.tan = tan;\r\n  Decimal.tanh = tanh;          // ES6\r\n  Decimal.trunc = trunc;        // ES6\r\n\r\n  if (obj === void 0) obj = {};\r\n  if (obj) {\r\n    if (obj.defaults !== true) {\r\n      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n    }\r\n  }\r\n\r\n  Decimal.config(obj);\r\n\r\n  return Decimal;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction div(x, y) {\r\n  return new this(x).div(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n *\r\n */\r\nfunction exp(x) {\r\n  return new this(x).exp();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction floor(x) {\r\n  return finalise(x = new this(x), x.e + 1, 3);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n *\r\n */\r\nfunction hypot() {\r\n  var i, n,\r\n    t = new this(0);\r\n\r\n  external = false;\r\n\r\n  for (i = 0; i < arguments.length;) {\r\n    n = new this(arguments[i++]);\r\n    if (!n.d) {\r\n      if (n.s) {\r\n        external = true;\r\n        return new this(1 / 0);\r\n      }\r\n      t = n;\r\n    } else if (t.d) {\r\n      t = t.plus(n.times(n));\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return t.sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n * otherwise return false.\r\n *\r\n */\r\nfunction isDecimalInstance(obj) {\r\n  return obj instanceof Decimal || obj && obj.name === '[object Decimal]' || false;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction ln(x) {\r\n  return new this(x).ln();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * log[y](x)\r\n *\r\n * x {number|string|Decimal} The argument of the logarithm.\r\n * y {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nfunction log(x, y) {\r\n  return new this(x).log(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction log2(x) {\r\n  return new this(x).log(2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction log10(x) {\r\n  return new this(x).log(10);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction max() {\r\n  return maxOrMin(this, arguments, 'lt');\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction min() {\r\n  return maxOrMin(this, arguments, 'gt');\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction mod(x, y) {\r\n  return new this(x).mod(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction mul(x, y) {\r\n  return new this(x).mul(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The base.\r\n * y {number|string|Decimal} The exponent.\r\n *\r\n */\r\nfunction pow(x, y) {\r\n  return new this(x).pow(y);\r\n}\r\n\r\n\r\n/*\r\n * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n * are produced).\r\n *\r\n * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n *\r\n */\r\nfunction random(sd) {\r\n  var d, e, k, n,\r\n    i = 0,\r\n    r = new this(1),\r\n    rd = [];\r\n\r\n  if (sd === void 0) sd = this.precision;\r\n  else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n  k = Math.ceil(sd / LOG_BASE);\r\n\r\n  if (!this.crypto) {\r\n    for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n  // Browsers supporting crypto.getRandomValues.\r\n  } else if (crypto.getRandomValues) {\r\n    d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n    for (; i < k;) {\r\n      n = d[i];\r\n\r\n      // 0 <= n < 4294967296\r\n      // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n      if (n >= 4.29e9) {\r\n        d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n      } else {\r\n\r\n        // 0 <= n <= 4289999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd[i++] = n % 1e7;\r\n      }\r\n    }\r\n\r\n  // Node.js supporting crypto.randomBytes.\r\n  } else if (crypto.randomBytes) {\r\n\r\n    // buffer\r\n    d = crypto.randomBytes(k *= 4);\r\n\r\n    for (; i < k;) {\r\n\r\n      // 0 <= n < 2147483648\r\n      n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n      // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n      if (n >= 2.14e9) {\r\n        crypto.randomBytes(4).copy(d, i);\r\n      } else {\r\n\r\n        // 0 <= n <= 2139999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd.push(n % 1e7);\r\n        i += 4;\r\n      }\r\n    }\r\n\r\n    i = k / 4;\r\n  } else {\r\n    throw Error(cryptoUnavailable);\r\n  }\r\n\r\n  k = rd[--i];\r\n  sd %= LOG_BASE;\r\n\r\n  // Convert trailing digits to zeros according to sd.\r\n  if (k && sd) {\r\n    n = mathpow(10, LOG_BASE - sd);\r\n    rd[i] = (k / n | 0) * n;\r\n  }\r\n\r\n  // Remove trailing words which are zero.\r\n  for (; rd[i] === 0; i--) rd.pop();\r\n\r\n  // Zero?\r\n  if (i < 0) {\r\n    e = 0;\r\n    rd = [0];\r\n  } else {\r\n    e = -1;\r\n\r\n    // Remove leading words which are zero and adjust exponent accordingly.\r\n    for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n    // Count the digits of the first word of rd to determine leading zeros.\r\n    for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n    // Adjust the exponent for leading zeros of the first word of rd.\r\n    if (k < LOG_BASE) e -= LOG_BASE - k;\r\n  }\r\n\r\n  r.e = e;\r\n  r.d = rd;\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n *\r\n * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction round(x) {\r\n  return finalise(x = new this(x), x.e + 1, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if x > 0,\r\n *  -1    if x < 0,\r\n *   0    if x is 0,\r\n *  -0    if x is -0,\r\n *   NaN  otherwise\r\n *\r\n */\r\nfunction sign(x) {\r\n  x = new this(x);\r\n  return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sin(x) {\r\n  return new this(x).sin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sinh(x) {\r\n  return new this(x).sinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction sqrt(x) {\r\n  return new this(x).sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction sub(x, y) {\r\n  return new this(x).sub(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tan(x) {\r\n  return new this(x).tan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tanh(x) {\r\n  return new this(x).tanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` truncated to an integer.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction trunc(x) {\r\n  return finalise(x = new this(x), x.e + 1, 1);\r\n}\r\n\r\n\r\n// Create and configure initial Decimal constructor.\r\nexport const Decimal = clone(DEFAULTS);\r\n\r\n// Create the internal constants from their string values.\r\nLN10 = new Decimal(LN10);\r\nPI = new Decimal(PI);\r\n\r\nexport default Decimal;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/decimal.js/decimal.mjs\n// module id = 96\n// module chunks = 0","import UnitNumber from \"./UnitNumber\";\nimport DimensionMap from \"./DimensionMap\";\nimport Decimal from \"decimal.js\";\nimport { TaggedString } from \"../output\";\nimport * as Tree from \"../libqalc/Tree\";\n\nexport default class SpecialUnitNumber extends UnitNumber {\n\tget value(): Decimal {\n\t\tthrow Error(\"can't get function.value\");\n\t}\n\tget dimensions(): DimensionMap {\n\t\tthrow Error(\"can't get function.dimensions\");\n\t}\n\tfn: ((arg: UnitNumber, mode: \"left\" | \"right\") => UnitNumber) | null;\n\tfnTree: Tree.Node | null;\n\thasSideEffects: boolean;\n\treadonly inverse: SpecialUnitNumber;\n\tconstructor(meta: {\n\t\tfnTree?: Tree.Node;\n\t\tfn?: ((arg: UnitNumber, mode: \"left\" | \"right\") => UnitNumber);\n\t\tinverse?: SpecialUnitNumber;\n\t\tid?: string;\n\t\tinverseFnTree?: Tree.Node;\n\t\tinverseFn?: ((arg: UnitNumber, mode: \"left\" | \"right\") => UnitNumber);\n\t\thasSideEffects: boolean;\n\t}) {\n\t\tsuper(null!, null!, meta.id);\n\t\tthis.fnTree = meta.fnTree || null;\n\t\tthis.fn = meta.fn || null;\n\t\tthis.hasSideEffects = meta.hasSideEffects;\n\t\tthis.inverse =\n\t\t\tmeta.inverse ||\n\t\t\tnew SpecialUnitNumber({\n\t\t\t\tfnTree: meta.inverseFnTree,\n\t\t\t\tfn: meta.inverseFn,\n\t\t\t\tinverse: this,\n\t\t\t\tid: meta.id + \"^-1\",\n\t\t\t\thasSideEffects: meta.hasSideEffects,\n\t\t\t});\n\t}\n\twithIdentifier(id: string): SpecialUnitNumber {\n\t\treturn new SpecialUnitNumber({\n\t\t\tfnTree: this.fnTree || undefined,\n\t\t\tfn: this.fn || undefined,\n\t\t\tid,\n\t\t\tinverseFnTree: this.inverse.fnTree || undefined,\n\t\t\tinverseFn: this.inverse.fn || undefined,\n\t\t\thasSideEffects: this.hasSideEffects,\n\t\t});\n\t}\n\tmul(other: UnitNumber, reversed = false): UnitNumber {\n\t\tif (this.fn) return this.fn(other, reversed ? \"right\" : \"left\");\n\t\tthrow Error(`function not defined: ${this}`);\n\t}\n\tdiv(other: UnitNumber, reversed = false): UnitNumber {\n\t\tif (reversed) return this.inverse.mul(other);\n\t\telse throw Error(`can't divide function ${this} with ${other}`);\n\t}\n\tplus(other: UnitNumber, _factor = 1, _reversed = false): UnitNumber {\n\t\tthrow Error(`can't add ${this} and ${other}`);\n\t}\n\tpow(other: UnitNumber, _reversed = false): UnitNumber {\n\t\tother.dimensions.assertEmpty();\n\t\tif (other.value.equals(-1)) return this.inverse;\n\t\tthrow Error(`can't pow ${this} with ${other}`);\n\t}\n\tmemberFunctionHasSideeffects(member: string, _other: UnitNumber): boolean {\n\t\tif (member === \"mul\" || member === \"div\") return this.hasSideEffects;\n\t\telse return false;\n\t}\n\t/** TODO: replace this with normal assignment / replacement? */\n\tassign(other: UnitNumber) {\n\t\tif (other.isSpecial()) {\n\t\t\tthis.fn = other.fn;\n\t\t\tthis.fnTree = other.fnTree;\n\t\t\tthis.hasSideEffects = other.hasSideEffects;\n\t\t} else throw Error(\"can't assign non-function to function\");\n\t}\n\tisSpecial(): this is SpecialUnitNumber {\n\t\treturn true;\n\t}\n\ttoString(): string {\n\t\tif (this.id) return this.id;\n\t\telse return this.toTaggedString().toString();\n\t}\n\ttoTaggedString(): TaggedString {\n\t\tif (this.id) return new TaggedString(this);\n\t\telse return this.fnTree!.toTaggedString();\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/unitNumber/SpecialUnitNumber.ts","import * as Tree from \"./Tree\";\nimport { UnitNumber, SpecialUnitNumber } from \"../unitNumber\";\nimport { evaluate } from \"./evaluator\";\nimport * as util from \"./util\";\nimport { FunctionDefinition } from \"./functions\";\n\nexport type ScopeMaps = Map<string, Tree.Node>[];\n\nexport default class Scope {\n\treadonly globalScope = new Map<string, Tree.Node>();\n\treadonly scopes: ReadonlyArray<Map<string, Tree.Node>> = [this.globalScope];\n\treadonly prefixMap = new Map<string, Tree.Node>();\n\treadonly canonicalMap = new Map<UnitNumber, UnitNumber>();\n\treadonly aliasMap = new Map<UnitNumber, Set<Tree.EvaluatedNode>>();\n\treadonly docMap = new Map<\n\t\tstring,\n\t\t{ comment: string; headings: string[] }\n\t>();\n\n\tconstructor(scopes?: Map<string, Tree.Node>[]) {\n\t\tif (scopes) this.scopes = scopes;\n\t}\n\n\taddFunctions(...fns: FunctionDefinition[]) {\n\t\tfor (const {\n\t\t\tname,\n\t\t\tfn,\n\t\t\thasSideEffects = false,\n\t\t\tmode = \"leftOnly\",\n\t\t} of fns) {\n\t\t\tconst builtin = new Tree.IdentifierNode(\n\t\t\t\t\"[builtin]\",\n\t\t\t) as Tree.EvaluatedNode;\n\t\t\tfunction apply(a: UnitNumber, modeB: \"left\" | \"right\"): UnitNumber {\n\t\t\t\tif (modeB === \"left\" && mode === \"rightOnly\")\n\t\t\t\t\tthrow Error(\n\t\t\t\t\t\t`${name} must be invoked as \"x ${name}\" not \"${name} x\"`,\n\t\t\t\t\t);\n\t\t\t\tif (modeB === \"right\" && mode === \"leftOnly\")\n\t\t\t\t\tthrow Error(\n\t\t\t\t\t\t`${name} must be invoked as \"${name} x\" not \"x ${name}\"`,\n\t\t\t\t\t);\n\t\t\t\treturn fn(a);\n\t\t\t}\n\t\t\tbuiltin.value = new SpecialUnitNumber({\n\t\t\t\tfnTree: new Tree.NumberNode(\"[built in]\"),\n\t\t\t\tfn: apply,\n\t\t\t\thasSideEffects,\n\t\t\t});\n\t\t\tevaluate(\n\t\t\t\tnew Tree.InfixFunctionCallNode(\"=\", [\n\t\t\t\t\tnew Tree.IdentifierNode(name),\n\t\t\t\t\tbuiltin,\n\t\t\t\t]),\n\t\t\t\tthis,\n\t\t\t);\n\t\t}\n\t}\n\n\tsetUnit(name: string, val: Tree.Node) {\n\t\tif (this.globalScope.has(name))\n\t\t\tthrow Error(\n\t\t\t\t`Unit ${name} already exists.\\nUse delete(${name}) to remove it. (${this.globalScope.get(\n\t\t\t\t\tname,\n\t\t\t\t)!.toDebugString()})`,\n\t\t\t);\n\t\tthis.globalScope.set(name, val);\n\t}\n\tsetPrefix(prefixName: string, node: Tree.Node) {\n\t\tthis.prefixMap.set(prefixName, node);\n\t}\n\tsetUnitOrPrefixRaw(name: string, assignmentNode: Tree.Node) {\n\t\tif (name.endsWith(\"_\")) {\n\t\t\tconst prefixName = name.substr(0, name.length - 1);\n\t\t\tthis.setPrefix(prefixName, assignmentNode);\n\t\t} else {\n\t\t\tthis.setUnit(name, assignmentNode);\n\t\t}\n\t}\n\tsetUnitOrPrefix(\n\t\tname: string,\n\t\tassignmentNode: Tree.Node,\n\t\tunit: Tree.EvaluatedNode,\n\t) {\n\t\tconst evNode = assignmentNode as Tree.EvaluatedNode;\n\t\tevNode.value = unit.value.withIdentifier(name);\n\t\tthis.setUnitOrPrefixRaw(name, assignmentNode);\n\t\tthis.unifyAliases(evNode, unit);\n\t}\n\tgetAllUnits() {\n\t\treturn this.globalScope.keys();\n\t}\n\n\tdeleteUnit(name: string) {\n\t\tconst unit = this.getUnit(name)!;\n\t\tconst aliases = this.aliasMap.get(this.getCanonical(unit.value)!);\n\t\tif (aliases) aliases.delete(unit);\n\t\treturn this.globalScope.delete(name);\n\t}\n\n\tgetUnit(\n\t\tname: string,\n\t\t{\n\t\t\twithPrefix = true,\n\t\t\twithPluralSuffix = true,\n\t\t\tthrowOnError = true,\n\t\t} = {},\n\t): Tree.EvaluatedNode | null {\n\t\tif (name.endsWith(\"_\"))\n\t\t\treturn this.getPrefix(name.substr(0, name.length - 1));\n\t\tconst foundScope = this.scopes.find(map => map.has(name));\n\t\tif (!foundScope) {\n\t\t\tif (withPrefix)\n\t\t\t\tfor (const prefix of this.prefixMap.keys()) {\n\t\t\t\t\tif (name.startsWith(prefix)) {\n\t\t\t\t\t\tlet unit = this.getPrefix(prefix);\n\t\t\t\t\t\tif (prefix.length < name.length) {\n\t\t\t\t\t\t\tconst suffix = this.getUnit(\n\t\t\t\t\t\t\t\tname.substr(prefix.length),\n\t\t\t\t\t\t\t\t{ withPrefix: false, throwOnError: false },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (suffix === null) continue;\n\t\t\t\t\t\t\tconst unitValue = evaluate(\n\t\t\t\t\t\t\t\tnew Tree.InfixFunctionCallNode(\"·\", [\n\t\t\t\t\t\t\t\t\tunit,\n\t\t\t\t\t\t\t\t\tsuffix,\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (unitValue.value.isSpecial()) continue; // ignore suffix on functions\n\t\t\t\t\t\t\tunit = new Tree.InfixFunctionCallNode(\"=\", [\n\t\t\t\t\t\t\t\tnew Tree.IdentifierNode(name),\n\t\t\t\t\t\t\t\tunitValue,\n\t\t\t\t\t\t\t]) as Tree.EvaluatedNode;\n\t\t\t\t\t\t\tunit.value = unitValue.value.withIdentifier(name);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn unit;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tif (withPluralSuffix) {\n\t\t\t\tconst withoutPlural = util.tryRemovePluralSuffix(name);\n\t\t\t\tif (withoutPlural) {\n\t\t\t\t\treturn this.getUnit(withoutPlural, {\n\t\t\t\t\t\twithPrefix,\n\t\t\t\t\t\twithPluralSuffix: false,\n\t\t\t\t\t\tthrowOnError,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (throwOnError) throw Error(\"unknown unit: \" + name);\n\t\t\telse return null;\n\t\t}\n\t\tlet res = foundScope.get(name)!;\n\t\tif (!Tree.isEvaluated(res)) {\n\t\t\tfoundScope.delete(name);\n\t\t\treturn evaluate(res, this);\n\t\t} else return res;\n\t}\n\n\tunifyAliases(unit1: Tree.EvaluatedNode, unit2: Tree.EvaluatedNode) {\n\t\tconst can1 = this.getCanonical(unit1.value),\n\t\t\tcan2 = this.getCanonical(unit2.value);\n\t\tif (!can1 && !can2) {\n\t\t\tconst canonical =\n\t\t\t\tunit2.value.isSpecial() || unit2.value.dimensions.size > 0\n\t\t\t\t\t? unit2.value\n\t\t\t\t\t: unit1.value;\n\t\t\tthis.canonicalMap.set(unit1.value, canonical);\n\t\t\tthis.canonicalMap.set(unit2.value, canonical);\n\t\t\tthis.aliasMap.set(canonical, new Set([unit1, unit2]));\n\t\t\treturn;\n\t\t}\n\t\tif (!can2 && can1) {\n\t\t\tthis.canonicalMap.set(unit2.value, can1);\n\t\t\tthis.aliasMap.get(can1!)!.add(unit2);\n\t\t\treturn;\n\t\t}\n\t\tif (!can1 && can2) {\n\t\t\tthis.canonicalMap.set(unit1.value, can2);\n\t\t\tthis.aliasMap.get(can2)!.add(unit1);\n\t\t\treturn;\n\t\t}\n\t\tthrow Error(\n\t\t\t\"unity error, can. form ex. for both \" +\n\t\t\t\tunit1 +\n\t\t\t\t\" and \" +\n\t\t\t\tunit2 +\n\t\t\t\t\":\" +\n\t\t\t\tcan1 +\n\t\t\t\t\" and \" +\n\t\t\t\tcan2,\n\t\t);\n\t}\n\tgetCanonical(u: UnitNumber) {\n\t\twhile (true) {\n\t\t\tlet u2 = this.canonicalMap.get(u);\n\t\t\tif (!u2) return u2;\n\t\t\tif (u2 === u) return u;\n\t\t\tu = u2;\n\t\t}\n\t}\n\tgetAliases(u: UnitNumber) {\n\t\treturn [...(this.aliasMap.get(this.getCanonical(u)!) || [])].filter(\n\t\t\tx => !!x.value.id,\n\t\t);\n\t}\n\tgetPrefix(name: string): Tree.EvaluatedNode {\n\t\tlet res = this.prefixMap.get(name);\n\t\tif (!res) throw Error(\"unknown prefix: \" + name);\n\t\tif (!Tree.isEvaluated(res)) {\n\t\t\tthis.prefixMap.delete(name);\n\t\t\treturn evaluate(res, this);\n\t\t} else return res;\n\t}\n\n\twithNew(...args: [string, Tree.Node][]) {\n\t\tconst newScope = new Map<string, Tree.Node>(args);\n\t\treturn Object.create(this, {\n\t\t\tscopes: { writable: false, value: [newScope, ...this.scopes] },\n\t\t});\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/libqalc/scope.ts","import { UnitNumber, SpecialUnitNumber } from \"../unitNumber\";\nimport * as Tree from \"./Tree\";\nimport { QalcFunction } from \"./functions\";\nimport { evaluate, evaluationHasSideeffect } from \"./evaluator\";\nimport Scope from \"./scope\";\n\nfunction makeFn(\n\tfn: (...args: UnitNumber[]) => UnitNumber,\n\thasSideEffects: (\n\t\tnode: Tree.FunctionCallNode,\n\t\tscope: Scope,\n\t) => boolean = () => false,\n): QalcFunction {\n\treturn {\n\t\tapply: (node, scope) =>\n\t\t\tfn(...node.operands.map(arg => evaluate(arg, scope).value)),\n\t\thasSideEffects,\n\t};\n}\nfunction memberAlias(\n\tfnname: \"mul\" | \"div\" | \"plus\" | \"pow\" | \"minus\" | \"convertTo\",\n): QalcFunction {\n\treturn makeFn(\n\t\t(a, b) => {\n\t\t\tconst x: (other: UnitNumber) => UnitNumber = a[fnname];\n\t\t\treturn x.call(a, b);\n\t\t},\n\t\t(node, scope) => {\n\t\t\tif (node.operands.some(op => evaluationHasSideeffect(op, scope)))\n\t\t\t\treturn true;\n\t\t\tconst [op1, op2] = node.operands;\n\t\t\tconst [o1, o2] = [evaluate(op1, scope), evaluate(op2, scope)];\n\t\t\treturn o1.value.memberFunctionHasSideeffects(fnname, o2.value);\n\t\t},\n\t);\n}\n\nfunction makeRawFn(\n\thasSideEffects: boolean | (() => boolean),\n\tapply: (args: Tree.FunctionCallNode, scope: Scope) => UnitNumber,\n): QalcFunction {\n\tif (typeof hasSideEffects !== \"function\") {\n\t\tconst val = hasSideEffects;\n\t\thasSideEffects = () => val;\n\t}\n\treturn {\n\t\tapply,\n\t\thasSideEffects,\n\t};\n}\nconst yes = UnitNumber.one;\nconst no = UnitNumber.zero;\nexport const unaryOperators: { [name: string]: QalcFunction } = {\n\t\"-\": makeFn(l => l.mul(UnitNumber.minusOne)),\n\t\"/\": makeFn(l => UnitNumber.one.div(l)),\n};\nconst assignment = makeRawFn(true, (node, scope) => {\n\tconst [name, val] = node.operands;\n\tconst evNode = node as Tree.EvaluatedNode;\n\tif (name instanceof Tree.IdentifierNode) {\n\t\tscope.setUnitOrPrefix(name.identifier, evNode, evaluate(val, scope));\n\t\treturn evNode.value;\n\t} else {\n\t\tconst leftVal = evaluate(name, scope);\n\t\tif (leftVal.value.id) leftVal.value.assign(evaluate(val, scope).value);\n\t\telse throw Error(\"invalid left hand side of assignment\");\n\t\treturn leftVal.value;\n\t}\n});\nexport const infixOperators: { [name: string]: QalcFunction | undefined } = {\n\t\"=\": assignment,\n\t\"≈\": assignment,\n\t\"!\": makeRawFn(true, (node, scope) => {\n\t\tconst [name, oth] = node.operands;\n\t\tif (oth) throw Error(\"! must be at end of line\");\n\t\tconst evNode = node as Tree.EvaluatedNode;\n\t\tif (name instanceof Tree.IdentifierNode) {\n\t\t\tevNode.value = UnitNumber.createBaseUnit(name.identifier);\n\t\t\tscope.setUnit(name.identifier, evNode);\n\t\t\treturn evNode.value;\n\t\t} else throw Error(\"invalid definition\");\n\t}),\n\t\"=>\": makeRawFn(false, (node, scope) => {\n\t\tconst [argNameNode, val] = node.operands;\n\t\tif (argNameNode instanceof Tree.IdentifierNode) {\n\t\t\tconst argName = argNameNode.identifier;\n\t\t\treturn new SpecialUnitNumber({\n\t\t\t\tfnTree: val,\n\t\t\t\tfn: arg => {\n\t\t\t\t\tconst argval = new Tree.IdentifierNode(\n\t\t\t\t\t\targName,\n\t\t\t\t\t) as Tree.EvaluatedNode;\n\t\t\t\t\targval.value = arg;\n\t\t\t\t\treturn evaluate(\n\t\t\t\t\t\tval.clone(),\n\t\t\t\t\t\tscope.withNew([argName, argval]),\n\t\t\t\t\t).value;\n\t\t\t\t},\n\t\t\t\thasSideEffects: false,\n\t\t\t});\n\t\t} else throw Error(\"invalid lambda definition\");\n\t}),\n\t\">\": makeFn(\n\t\t(a, b) => (\n\t\t\ta.dimensions.assertEqual(b.dimensions),\n\t\t\ta.value.greaterThan(b.value) ? yes : no\n\t\t),\n\t),\n\t\"<\": makeFn(\n\t\t(a, b) => (\n\t\t\ta.dimensions.assertEqual(b.dimensions),\n\t\t\ta.value.lessThan(b.value) ? yes : no\n\t\t),\n\t),\n\t\">=\": makeFn(\n\t\t(a, b) => (\n\t\t\ta.dimensions.assertEqual(b.dimensions),\n\t\t\ta.value.greaterThanOrEqualTo(b.value) ? yes : no\n\t\t),\n\t),\n\t\"<=\": makeFn(\n\t\t(a, b) => (\n\t\t\ta.dimensions.assertEqual(b.dimensions),\n\t\t\ta.value.lessThanOrEqualTo(b.value) ? yes : no\n\t\t),\n\t),\n\t\"==\": makeFn(\n\t\t(a, b) =>\n\t\t\ta.value.equals(b.value) && a.dimensions.equals(b.dimensions)\n\t\t\t\t? yes\n\t\t\t\t: no,\n\t),\n\t\"!=\": makeFn(\n\t\t(a, b) => (\n\t\t\ta.dimensions.assertEqual(b.dimensions),\n\t\t\ta.value.equals(b.value) ? no : yes\n\t\t),\n\t),\n\n\t\"&&\": makeRawFn(false, ({ operands: [a, b] }, scope) => {\n\t\tconst aEv = evaluate(a, scope).value;\n\t\treturn !aEv.value.isZero() ? evaluate(b, scope).value : aEv;\n\t}),\n\t\"||\": makeRawFn(false, ({ operands: [a, b] }, scope) => {\n\t\tconst aEv = evaluate(a, scope).value;\n\t\treturn aEv.value.isZero() ? evaluate(b, scope).value : aEv;\n\t}),\n\n\t\"·\": memberAlias(\"mul\"),\n\t\"\": memberAlias(\"mul\"),\n\t\"/\": memberAlias(\"div\"),\n\t\"|\": memberAlias(\"div\"),\n\t\"^\": memberAlias(\"pow\"),\n\t\"+\": memberAlias(\"plus\"),\n\t\"-\": memberAlias(\"minus\"),\n\tto: memberAlias(\"convertTo\"),\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/libqalc/operators.ts","import Scope from \"./scope\";\nimport { stripCommentsTrim, evaluate } from \"./evaluator\";\nimport { parse } from \"./parser\";\nimport * as Tree from \"./Tree\";\ntype PostEvaluation = {\n\treevaluateUnit?: string;\n\tevaluateNode?: Tree.Node;\n};\nexport function loadUnit(\n\tscope: Scope,\n\tdata: { line: string; info: { comment: string; headings: string[] } },\n\tpostEvaluate: { push(p: PostEvaluation): void },\n) {\n\tconst { code: line } = stripCommentsTrim(data.line);\n\tif (line.length === 0) return;\n\t//if (line.indexOf(\"=\") >= 0 && line.split(\"=\")[0].search(/[\\(\\[]/) >= 0)\n\t//\treturn;\n\tconst tree = parse(line);\n\tif (tree instanceof Tree.FunctionCallNode && tree.fnname === \"=\") {\n\t\tconst nameNode = tree.operands[0];\n\t\tconst name =\n\t\t\tnameNode instanceof Tree.IdentifierNode && nameNode.identifier;\n\t\tif (!name) {\n\t\t\tpostEvaluate.push({ evaluateNode: tree });\n\t\t\treturn;\n\t\t}\n\t\tscope.setUnitOrPrefixRaw(name, tree);\n\t\tscope.docMap.set(name, data.info);\n\t\tpostEvaluate.push({ reevaluateUnit: name });\n\t} else if (tree instanceof Tree.FunctionCallNode && tree.fnname === \"!\") {\n\t\tscope.docMap.set(\n\t\t\t(tree.operands[0] as Tree.IdentifierNode).identifier,\n\t\t\tdata.info,\n\t\t);\n\t\tpostEvaluate.push({ evaluateNode: tree });\n\t} else {\n\t\tpostEvaluate.push({ evaluateNode: tree });\n\t}\n}\nfunction applyPostEvaluate(\n\tscope: Scope,\n\t{ reevaluateUnit, evaluateNode }: PostEvaluation,\n) {\n\ttry {\n\t\tif (reevaluateUnit) scope.getUnit(reevaluateUnit);\n\t\tif (evaluateNode) evaluate(evaluateNode, scope);\n\t} catch (e) {\n\t\tconsole.error(\"force-evaluate unit\", reevaluateUnit || evaluateNode, e);\n\t}\n}\nexport function loadUnitsJson(\n\tscope: Scope,\n\tfilename: string,\n\tdata: { line: string; info: { comment: string; headings: string[] } }[],\n\timmediately = false,\n) {\n\tconst postEvaluate = immediately\n\t\t? {\n\t\t\t\tpush(x: PostEvaluation) {\n\t\t\t\t\tapplyPostEvaluate(scope, x);\n\t\t\t\t},\n\t\t\t}\n\t\t: ([] as PostEvaluation[]);\n\tfor (let i = 0; i < data.length; i++) {\n\t\ttry {\n\t\t\tloadUnit(scope, data[i], postEvaluate);\n\t\t} catch (e) {\n\t\t\tconsole.error(filename + \":\" + (i + 1), data[i], e);\n\t\t}\n\t}\n\t// force evaluate all units\n\tif (Array.isArray(postEvaluate))\n\t\tfor (const p of postEvaluate) {\n\t\t\tapplyPostEvaluate(scope, p);\n\t\t}\n}\nexport const loadUnitsTxt = (\n\tscope: Scope,\n\tfilename: string,\n\tdata: string,\n\timmediately: boolean,\n) => {\n\tloadUnitsJson(\n\t\tscope,\n\t\tfilename,\n\t\tdata\n\t\t\t.split(\"\\n\")\n\t\t\t.map(line => ({ line, info: { comment: \"\", headings: [] } })),\n\t\timmediately,\n\t);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/libqalc/load.ts","import { UnitNumber } from \"../unitNumber\";\nimport * as Tree from \"./Tree\";\nimport Scope from \"./scope\";\nimport scope from \"./globalScope\";\n\nexport interface QalcFunction {\n\tapply(node: Tree.FunctionCallNode, scope: Scope): UnitNumber;\n\thasSideEffects(node: Tree.FunctionCallNode, scope: Scope): boolean;\n}\nexport interface FunctionDefinition {\n\tname: string;\n\tfn: (arg: UnitNumber) => UnitNumber;\n\thasSideEffects?: true;\n\t/**\n\t * * leftOnly: `log 10`\n\t * * rightOnly: `10 °C`\n\t * * both: `fn x` and `x fn`\n\t *\n\t * default: leftOnly\n\t */\n\tmode?: \"leftOnly\" | \"rightOnly\" | \"leftAndRight\";\n}\nexport const internalFunctions: FunctionDefinition[] = [\n\t{ name: \"sqrt\", fn: num => num.pow(0.5) },\n\t{\n\t\tname: \"ln\",\n\t\tfn: num => {\n\t\t\tnum.dimensions.assertEmpty(\"argument of ln()\");\n\t\t\treturn new UnitNumber(num.value.ln());\n\t\t},\n\t},\n\t{\n\t\tname: \"delete\",\n\t\tfn: num => {\n\t\t\tif (!num.id) throw Error(\"has no ID\");\n\t\t\treturn scope.deleteUnit(num.id) ? UnitNumber.one : UnitNumber.zero;\n\t\t},\n\t\thasSideEffects: true,\n\t},\n\t{\n\t\tname: \"log2\",\n\t\tfn: num => (\n\t\t\tnum.dimensions.assertEmpty(), new UnitNumber(num.value.logarithm(2))\n\t\t),\n\t},\n\t{\n\t\tname: \"exp\",\n\t\tfn: num => (\n\t\t\tnum.dimensions.assertEmpty(), new UnitNumber(num.value.exp())\n\t\t),\n\t},\n\t{\n\t\tname: \"tan\",\n\t\tfn: num => (\n\t\t\tnum.dimensions.assertEmpty(),\n\t\t\tnew UnitNumber(Math.tan(num.value.toNumber()))\n\t\t),\n\t},\n\t{\n\t\tname: \"log\",\n\t\tfn: num => (\n\t\t\tnum.dimensions.assertEmpty(),\n\t\t\tnew UnitNumber(num.value.logarithm(10))\n\t\t),\n\t},\n];\n\n\n\n// WEBPACK FOOTER //\n// ./src/libqalc/functions.ts","module.exports = [{\"line\":\"kg!\",\"info\":{\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.1. SI units\"],\"comment\":\"Mass of the international prototype\"}},{\"line\":\"kilogram = kg\",\"info\":{\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.1. SI units\"],\"comment\":\"Mass of the international prototype\"}},{\"line\":\"s!\",\"info\":{\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.1. SI units\"],\"comment\":\"Duration of 9192631770 periods of the radiation\\ncorresponding to the transition between the two hyperfine\\nlevels of the ground state of the cesium-133 atom\"}},{\"line\":\"second = s\",\"info\":{\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.1. SI units\"],\"comment\":\"Duration of 9192631770 periods of the radiation\\ncorresponding to the transition between the two hyperfine\\nlevels of the ground state of the cesium-133 atom\"}},{\"line\":\"m!\",\"info\":{\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.1. SI units\"],\"comment\":\"Length of the path traveled by light in a vacuum\\nduring 1|299792458 seconds.  Originally meant to be\\n1e-7 of the length along a meridian from the equator\\nto a pole.\"}},{\"line\":\"meter = m\",\"info\":{\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.1. SI units\"],\"comment\":\"Length of the path traveled by light in a vacuum\\nduring 1|299792458 seconds.  Originally meant to be\\n1e-7 of the length along a meridian from the equator\\nto a pole.\"}},{\"line\":\"A!\",\"info\":{\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.1. SI units\"],\"comment\":\"The current which produces a force of 2e-7 N/m between two\\ninfinitely long wires that are 1 meter apart\"}},{\"line\":\"ampere = A\",\"info\":{\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.1. SI units\"],\"comment\":\"The current which produces a force of 2e-7 N/m between two\\ninfinitely long wires that are 1 meter apart\"}},{\"line\":\"amp = ampere\",\"info\":{\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.1. SI units\"],\"comment\":\"The current which produces a force of 2e-7 N/m between two\\ninfinitely long wires that are 1 meter apart\"}},{\"line\":\"cd!\",\"info\":{\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.1. SI units\"],\"comment\":\"Luminous intensity in a given direction of a source which\\nemits monochromatic radiation at 540e12 Hz with radiant\\nintensity 1|683 W/steradian.  (This differs from radiant\\nintensity (W/sr) in that it is adjusted for human\\nperceptual dependence on wavelength.  The frequency of\\n540e12 Hz (yellow) is where human perception is most\\nefficient.)\"}},{\"line\":\"candela = cd\",\"info\":{\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.1. SI units\"],\"comment\":\"Luminous intensity in a given direction of a source which\\nemits monochromatic radiation at 540e12 Hz with radiant\\nintensity 1|683 W/steradian.  (This differs from radiant\\nintensity (W/sr) in that it is adjusted for human\\nperceptual dependence on wavelength.  The frequency of\\n540e12 Hz (yellow) is where human perception is most\\nefficient.)\"}},{\"line\":\"mol!\",\"info\":{\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.1. SI units\"],\"comment\":\"The amount of substance of a system which contains as many\\nelementary entities as there are atoms in 0.012 kg of\\ncarbon 12.  The elementary entities must be specified and\\nmay be atoms, molecules, ions, electrons, or other\\nparticles or groups of particles.  It is understood that\\nunbound atoms of carbon 12, at rest and in the ground\\nstate, are referred to.\"}},{\"line\":\"mole = mol\",\"info\":{\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.1. SI units\"],\"comment\":\"The amount of substance of a system which contains as many\\nelementary entities as there are atoms in 0.012 kg of\\ncarbon 12.  The elementary entities must be specified and\\nmay be atoms, molecules, ions, electrons, or other\\nparticles or groups of particles.  It is understood that\\nunbound atoms of carbon 12, at rest and in the ground\\nstate, are referred to.\"}},{\"line\":\"K!\",\"info\":{\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.1. SI units\"],\"comment\":\"1|273.16 of the thermodynamic temperature of the triple\\npoint of water\"}},{\"line\":\"kelvin = K\",\"info\":{\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.1. SI units\"],\"comment\":\"1|273.16 of the thermodynamic temperature of the triple\\npoint of water\"}},{\"line\":\"radian = 1\",\"info\":{\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.2. The radian and steradian are defined as dimensionless primitive units.\\nThe radian is equal to m/m and the steradian to m^2/m^2 so these units are\\ndimensionless. Retaining them as named units is useful because it allows\\nclarity in expressions and makes the meaning of unit definitions more clear.\\nThese units will reduce to 1 in conversions but not for sums of units or for\\narguments to functions.\"],\"comment\":\"The angle subtended at the center of a circle by\\nan arc equal in length to the radius of the\\ncircle\\nSolid angle which cuts off an area of the surface\\nof the sphere equal to that of a square with\\nsides of length equal to the radius of the\\nsphere\"}},{\"line\":\"sr = 1\",\"info\":{\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.2. The radian and steradian are defined as dimensionless primitive units.\\nThe radian is equal to m/m and the steradian to m^2/m^2 so these units are\\ndimensionless. Retaining them as named units is useful because it allows\\nclarity in expressions and makes the meaning of unit definitions more clear.\\nThese units will reduce to 1 in conversions but not for sums of units or for\\narguments to functions.\"],\"comment\":\"The angle subtended at the center of a circle by\\nan arc equal in length to the radius of the\\ncircle\\nSolid angle which cuts off an area of the surface\\nof the sphere equal to that of a square with\\nsides of length equal to the radius of the\\nsphere\"}},{\"line\":\"steradian = sr\",\"info\":{\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.2. The radian and steradian are defined as dimensionless primitive units.\\nThe radian is equal to m/m and the steradian to m^2/m^2 so these units are\\ndimensionless. Retaining them as named units is useful because it allows\\nclarity in expressions and makes the meaning of unit definitions more clear.\\nThese units will reduce to 1 in conversions but not for sums of units or for\\narguments to functions.\"],\"comment\":\"The angle subtended at the center of a circle by\\nan arc equal in length to the radius of the\\ncircle\\nSolid angle which cuts off an area of the surface\\nof the sphere equal to that of a square with\\nsides of length equal to the radius of the\\nsphere\"}},{\"line\":\"US$!\",\"info\":{\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.3. Some primitive non-SI units\"],\"comment\":\"The US dollar is chosen arbitrarily to be the primitive\\nunit of money.\"}},{\"line\":\"bit!\",\"info\":{\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.3. Some primitive non-SI units\"],\"comment\":\"Basic unit of information (entropy).  The entropy in bits\\nof a random variable over a finite alphabet is defined\\nto be the sum of -p(i)*log2(p(i)) over the alphabet where\\np(i) is the probability that the random variable takes\\non the value i.\"}},{\"line\":\"yotta_ = 1e24\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Greek or Latin octo, \\\"eight\\\"\"}},{\"line\":\"zetta_ = 1e21\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Latin septem, \\\"seven\\\"\"}},{\"line\":\"exa_ = 1e18\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Greek hex, \\\"six\\\"\"}},{\"line\":\"peta_ = 1e15\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Greek pente, \\\"five\\\"\"}},{\"line\":\"tera_ = 1e12\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Greek teras, \\\"monster\\\"\"}},{\"line\":\"giga_ = 1e9\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Greek gigas, \\\"giant\\\"\"}},{\"line\":\"mega_ = 1e6\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Greek megas, \\\"large\\\"\"}},{\"line\":\"myria_ = 1e4\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Not an official SI prefix\"}},{\"line\":\"kilo_ = 1e3\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Greek chilioi, \\\"thousand\\\"\"}},{\"line\":\"hecto_ = 1e2\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Greek hekaton, \\\"hundred\\\"\"}},{\"line\":\"deca_ = 1e1\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Greek deka, \\\"ten\\\"\"}},{\"line\":\"deka_ = deca\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Greek deka, \\\"ten\\\"\"}},{\"line\":\"deci_ = 1e-1\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Latin decimus, \\\"tenth\\\"\"}},{\"line\":\"centi_ = 1e-2\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Latin centum, \\\"hundred\\\"\"}},{\"line\":\"milli_ = 1e-3\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Latin mille, \\\"thousand\\\"\"}},{\"line\":\"micro_ = 1e-6\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Latin micro or Greek mikros, \\\"small\\\"\"}},{\"line\":\"nano_ = 1e-9\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Latin nanus or Greek nanos, \\\"dwarf\\\"\"}},{\"line\":\"pico_ = 1e-12\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Spanish pico, \\\"a bit\\\"\"}},{\"line\":\"femto_ = 1e-15\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Danish-Norwegian femten, \\\"fifteen\\\"\"}},{\"line\":\"atto_ = 1e-18\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Danish-Norwegian atten, \\\"eighteen\\\"\"}},{\"line\":\"zepto_ = 1e-21\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Latin septem, \\\"seven\\\"\"}},{\"line\":\"yocto_ = 1e-24\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Greek or Latin octo, \\\"eight\\\"\"}},{\"line\":\"quarter_ = 1|4\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"semi_ = 0.5\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"demi_ = 0.5\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"hemi_ = 0.5\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"half_ = 0.5\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"double_ = 2\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"triple_ = 3\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"treble_ = 3\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"kibi_ = 2^10\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"In response to the convention of illegally\\nand confusingly using metric prefixes for\\npowers of two, the International\\nElectrotechnical Commission aproved these\\nbinary prefixes for use in 1998.  If you\\nwant to refer to \\\"megabytes\\\" using the\\nbinary definition, use these prefixes.\"}},{\"line\":\"mebi_ = 2^20\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"In response to the convention of illegally\\nand confusingly using metric prefixes for\\npowers of two, the International\\nElectrotechnical Commission aproved these\\nbinary prefixes for use in 1998.  If you\\nwant to refer to \\\"megabytes\\\" using the\\nbinary definition, use these prefixes.\"}},{\"line\":\"gibi_ = 2^30\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"In response to the convention of illegally\\nand confusingly using metric prefixes for\\npowers of two, the International\\nElectrotechnical Commission aproved these\\nbinary prefixes for use in 1998.  If you\\nwant to refer to \\\"megabytes\\\" using the\\nbinary definition, use these prefixes.\"}},{\"line\":\"tebi_ = 2^40\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"In response to the convention of illegally\\nand confusingly using metric prefixes for\\npowers of two, the International\\nElectrotechnical Commission aproved these\\nbinary prefixes for use in 1998.  If you\\nwant to refer to \\\"megabytes\\\" using the\\nbinary definition, use these prefixes.\"}},{\"line\":\"pebi_ = 2^50\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"In response to the convention of illegally\\nand confusingly using metric prefixes for\\npowers of two, the International\\nElectrotechnical Commission aproved these\\nbinary prefixes for use in 1998.  If you\\nwant to refer to \\\"megabytes\\\" using the\\nbinary definition, use these prefixes.\"}},{\"line\":\"exbi_ = 2^60\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"In response to the convention of illegally\\nand confusingly using metric prefixes for\\npowers of two, the International\\nElectrotechnical Commission aproved these\\nbinary prefixes for use in 1998.  If you\\nwant to refer to \\\"megabytes\\\" using the\\nbinary definition, use these prefixes.\"}},{\"line\":\"Ki_ = kibi\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"In response to the convention of illegally\\nand confusingly using metric prefixes for\\npowers of two, the International\\nElectrotechnical Commission aproved these\\nbinary prefixes for use in 1998.  If you\\nwant to refer to \\\"megabytes\\\" using the\\nbinary definition, use these prefixes.\"}},{\"line\":\"Mi_ = mebi\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"In response to the convention of illegally\\nand confusingly using metric prefixes for\\npowers of two, the International\\nElectrotechnical Commission aproved these\\nbinary prefixes for use in 1998.  If you\\nwant to refer to \\\"megabytes\\\" using the\\nbinary definition, use these prefixes.\"}},{\"line\":\"Gi_ = gibi\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"In response to the convention of illegally\\nand confusingly using metric prefixes for\\npowers of two, the International\\nElectrotechnical Commission aproved these\\nbinary prefixes for use in 1998.  If you\\nwant to refer to \\\"megabytes\\\" using the\\nbinary definition, use these prefixes.\"}},{\"line\":\"Ti_ = tebi\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"In response to the convention of illegally\\nand confusingly using metric prefixes for\\npowers of two, the International\\nElectrotechnical Commission aproved these\\nbinary prefixes for use in 1998.  If you\\nwant to refer to \\\"megabytes\\\" using the\\nbinary definition, use these prefixes.\"}},{\"line\":\"Pi_ = pebi\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"In response to the convention of illegally\\nand confusingly using metric prefixes for\\npowers of two, the International\\nElectrotechnical Commission aproved these\\nbinary prefixes for use in 1998.  If you\\nwant to refer to \\\"megabytes\\\" using the\\nbinary definition, use these prefixes.\"}},{\"line\":\"Ei_ = exbi\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"In response to the convention of illegally\\nand confusingly using metric prefixes for\\npowers of two, the International\\nElectrotechnical Commission aproved these\\nbinary prefixes for use in 1998.  If you\\nwant to refer to \\\"megabytes\\\" using the\\nbinary definition, use these prefixes.\"}},{\"line\":\"Y_ = yotta\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"Z_ = zetta\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"E_ = exa\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"P_ = peta\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"T_ = tera\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"G_ = giga\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"M_ = mega\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"k_ = kilo\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"h_ = hecto\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"da_ = deka\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"d_ = deci\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"c_ = centi\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"m_ = milli\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"u_ = micro\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"it should be a mu but u is easy to type\"}},{\"line\":\"n_ = nano\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"p_ = pico\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"f_ = femto\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"a_ = atto\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"z_ = zepto\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"y_ = yocto\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"one = 1\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"two = 2\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"double = 2\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"couple = 2\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"three = 3\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"triple = 3\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"four = 4\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"quadruple = 4\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"five = 5\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"quintuple = 5\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"six = 6\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"seven = 7\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"eight = 8\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"nine = 9\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"ten = 10\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"eleven = 11\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"twelve = 12\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"thirteen = 13\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"fourteen = 14\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"fifteen = 15\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"sixteen = 16\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"seventeen = 17\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"eighteen = 18\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"nineteen = 19\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"twenty = 20\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"thirty = 30\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"forty = 40\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"fifty = 50\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"sixty = 60\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"seventy = 70\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"eighty = 80\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"ninety = 90\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"hundred = 100\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"thousand = 1000\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"million = 1e6\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"shortbillion = 1e9\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shorttrillion = 1e12\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortquadrillion = 1e15\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortquintillion = 1e18\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortsextillion = 1e21\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortseptillion = 1e24\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortoctillion = 1e27\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortnonillion = 1e30\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortnoventillion = shortnonillion\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortdecillion = 1e33\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortundecillion = 1e36\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortduodecillion = 1e39\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shorttredecillion = 1e42\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortquattuordecillion = 1e45\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortquindecillion = 1e48\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortsexdecillion = 1e51\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortseptendecillion = 1e54\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortoctodecillion = 1e57\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortnovemdecillion = 1e60\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortvigintillion = 1e63\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"centillion = 1e303\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"googol = 1e100\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longbillion = million^2\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longtrillion = million^3\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longquadrillion = million^4\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longquintillion = million^5\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longsextillion = million^6\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longseptillion = million^7\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longoctillion = million^8\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longnonillion = million^9\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longnoventillion = longnonillion\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longdecillion = million^10\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longundecillion = million^11\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longduodecillion = million^12\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longtredecillion = million^13\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longquattuordecillion = million^14\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longquindecillion = million^15\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longsexdecillion = million^16\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longseptdecillion = million^17\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longoctodecillion = million^18\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longnovemdecillion = million^19\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longvigintillion = million^20\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"milliard = 1000 million\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.1. These numbers fill the gaps left by the long system above.\"],\"comment\":\"\"}},{\"line\":\"billiard = 1000 million^2\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.1. These numbers fill the gaps left by the long system above.\"],\"comment\":\"\"}},{\"line\":\"trilliard = 1000 million^3\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.1. These numbers fill the gaps left by the long system above.\"],\"comment\":\"\"}},{\"line\":\"quadrilliard = 1000 million^4\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.1. These numbers fill the gaps left by the long system above.\"],\"comment\":\"\"}},{\"line\":\"quintilliard = 1000 million^5\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.1. These numbers fill the gaps left by the long system above.\"],\"comment\":\"\"}},{\"line\":\"sextilliard = 1000 million^6\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.1. These numbers fill the gaps left by the long system above.\"],\"comment\":\"\"}},{\"line\":\"septilliard = 1000 million^7\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.1. These numbers fill the gaps left by the long system above.\"],\"comment\":\"\"}},{\"line\":\"octilliard = 1000 million^8\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.1. These numbers fill the gaps left by the long system above.\"],\"comment\":\"\"}},{\"line\":\"nonilliard = 1000 million^9\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.1. These numbers fill the gaps left by the long system above.\"],\"comment\":\"\"}},{\"line\":\"noventilliard = nonilliard\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.1. These numbers fill the gaps left by the long system above.\"],\"comment\":\"\"}},{\"line\":\"decilliard = 1000 million^10\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.1. These numbers fill the gaps left by the long system above.\"],\"comment\":\"\"}},{\"line\":\"longmilliard = milliard\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.2. For consistency\"],\"comment\":\"\"}},{\"line\":\"longbilliard = billiard\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.2. For consistency\"],\"comment\":\"\"}},{\"line\":\"longtrilliard = trilliard\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.2. For consistency\"],\"comment\":\"\"}},{\"line\":\"longquadrilliard = quadrilliard\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.2. For consistency\"],\"comment\":\"\"}},{\"line\":\"longquintilliard = quintilliard\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.2. For consistency\"],\"comment\":\"\"}},{\"line\":\"longsextilliard = sextilliard\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.2. For consistency\"],\"comment\":\"\"}},{\"line\":\"longseptilliard = septilliard\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.2. For consistency\"],\"comment\":\"\"}},{\"line\":\"longoctilliard = octilliard\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.2. For consistency\"],\"comment\":\"\"}},{\"line\":\"longnonilliard = nonilliard\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.2. For consistency\"],\"comment\":\"\"}},{\"line\":\"longnoventilliard = noventilliard\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.2. For consistency\"],\"comment\":\"\"}},{\"line\":\"longdecilliard = decilliard\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.2. For consistency\"],\"comment\":\"\"}},{\"line\":\"billion = shortbillion\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"trillion = shorttrillion\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"quadrillion = shortquadrillion\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"quintillion = shortquintillion\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"sextillion = shortsextillion\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"septillion = shortseptillion\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"octillion = shortoctillion\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"nonillion = shortnonillion\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"noventillion = shortnoventillion\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"decillion = shortdecillion\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"undecillion = shortundecillion\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"duodecillion = shortduodecillion\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"tredecillion = shorttredecillion\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"quattuordecillion = shortquattuordecillion\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"quindecillion = shortquindecillion\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"sexdecillion = shortsexdecillion\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"septendecillion = shortseptendecillion\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"octodecillion = shortoctodecillion\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"novemdecillion = shortnovemdecillion\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"vigintillion = shortvigintillion\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"lakh = 1e5\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.4. Numbers used in India\"],\"comment\":\"\"}},{\"line\":\"crore = 1e7\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.4. Numbers used in India\"],\"comment\":\"\"}},{\"line\":\"arab = 1e9\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.4. Numbers used in India\"],\"comment\":\"\"}},{\"line\":\"kharab = 1e11\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.4. Numbers used in India\"],\"comment\":\"\"}},{\"line\":\"neel = 1e13\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.4. Numbers used in India\"],\"comment\":\"\"}},{\"line\":\"padm = 1e15\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.4. Numbers used in India\"],\"comment\":\"\"}},{\"line\":\"shankh = 1e17\",\"info\":{\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.4. Numbers used in India\"],\"comment\":\"\"}},{\"line\":\"newton = kg m / s^2\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"force\"}},{\"line\":\"N = newton\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"force\"}},{\"line\":\"pascal = N/m^2\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"pressure or stress\"}},{\"line\":\"Pa = pascal\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"pressure or stress\"}},{\"line\":\"joule = N m\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"energy\"}},{\"line\":\"J = joule\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"energy\"}},{\"line\":\"watt = J/s\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"power\"}},{\"line\":\"W = watt\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"power\"}},{\"line\":\"coulomb = A s\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"charge\"}},{\"line\":\"C = coulomb\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"charge\"}},{\"line\":\"volt = W/A\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"potential difference\"}},{\"line\":\"V = volt\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"potential difference\"}},{\"line\":\"ohm = V/A\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"electrical resistance\"}},{\"line\":\"siemens = A/V\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"electrical conductance\"}},{\"line\":\"S = siemens\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"electrical conductance\"}},{\"line\":\"farad = C/V\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"capacitance\"}},{\"line\":\"F = farad\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"capacitance\"}},{\"line\":\"weber = V s\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"magnetic flux\"}},{\"line\":\"Wb = weber\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"magnetic flux\"}},{\"line\":\"henry = Wb/A\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"inductance\"}},{\"line\":\"H = henry\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"inductance\"}},{\"line\":\"tesla = Wb/m^2\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"magnetic flux density\"}},{\"line\":\"T = tesla\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"magnetic flux density\"}},{\"line\":\"hertz = /s\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"frequency\"}},{\"line\":\"Hz = hertz\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"frequency\"}},{\"line\":\"LENGTH = meter\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"AREA = LENGTH^2\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"VOLUME = LENGTH^3\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"MASS = kilogram\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"CURRENT = ampere\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"AMOUNT = mole\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"ANGLE = radian\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"SOLID_ANGLE = steradian\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"MONEY = US$\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"FORCE = newton\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"PRESSURE = FORCE / AREA\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"STRESS = FORCE / AREA\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"CHARGE = coulomb\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"CAPACITANCE = farad\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"RESISTANCE = ohm\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"CONDUCTANCE = siemens\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"INDUCTANCE = henry\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"FREQUENCY = hertz\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"VELOCITY = LENGTH / TIME\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"ACCELERATION = VELOCITY / TIME\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"DENSITY = MASS / VOLUME\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"LINEAR_DENSITY = MASS / LENGTH\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"VISCOSITY = FORCE TIME / AREA\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"KINEMATIC_VISCOSITY = VISCOSITY / DENSITY\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"gram = millikg\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"gm = gram\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"g = gram\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"tonne = 1000 kg\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"t = tonne\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"metricton = tonne\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"sthene = tonne m / s^2\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"funal = sthene\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"pieze = sthene / m^2\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"quintal = 100 kg\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"bar = 1e5 Pa\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"About 1 atm\"}},{\"line\":\"b = bar\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"About 1 atm\"}},{\"line\":\"vac = millibar\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"micron = micrometer\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"One millionth of a meter\"}},{\"line\":\"bicron = picometer\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"One brbillionth of a meter\"}},{\"line\":\"cc = cm^3\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"are = 100 m^2\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"a = are\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"liter = 1000 cc\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"The liter was defined in 1901 as the\\nspace occupied by 1 kg of pure water at\\nthe temperature of its maximum density\\nunder a pressure of 1 atm.  This was\\nsupposed to be 1000 cubic cm, but it\\nwas discovered that the original\\nmeasurement was off.  In 1964, the\\nliter was redefined to be exactly 1000\\ncubic centimeters.\"}},{\"line\":\"oldliter = 1.000028 dm^3\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"The liter was defined in 1901 as the\\nspace occupied by 1 kg of pure water at\\nthe temperature of its maximum density\\nunder a pressure of 1 atm.  This was\\nsupposed to be 1000 cubic cm, but it\\nwas discovered that the original\\nmeasurement was off.  In 1964, the\\nliter was redefined to be exactly 1000\\ncubic centimeters.\"}},{\"line\":\"L = liter\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"The liter was defined in 1901 as the\\nspace occupied by 1 kg of pure water at\\nthe temperature of its maximum density\\nunder a pressure of 1 atm.  This was\\nsupposed to be 1000 cubic cm, but it\\nwas discovered that the original\\nmeasurement was off.  In 1964, the\\nliter was redefined to be exactly 1000\\ncubic centimeters.\"}},{\"line\":\"l = liter\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"The liter was defined in 1901 as the\\nspace occupied by 1 kg of pure water at\\nthe temperature of its maximum density\\nunder a pressure of 1 atm.  This was\\nsupposed to be 1000 cubic cm, but it\\nwas discovered that the original\\nmeasurement was off.  In 1964, the\\nliter was redefined to be exactly 1000\\ncubic centimeters.\"}},{\"line\":\"mho = siemens\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Inverse of ohm, hence ohm spelled backward\"}},{\"line\":\"galvat = ampere\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Named after Luigi Galvani\"}},{\"line\":\"angstrom = 1e-10 m\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Convenient for describing molecular sizes\"}},{\"line\":\"xunit = xunit_cu\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Used for measuring x-ray wavelengths.\\nOriginally defined to be 1|3029.45 of\\nthe spacing of calcite planes at 18\\ndegC.  It was intended to be exactly\\n1e-13 m, but was later found to be\\nslightly off.  Current usage is with\\nreference to common x-ray lines, either\\nthe K-alpha 1 line of copper or the\\nsame line of molybdenum.\"}},{\"line\":\"siegbahn = xunit\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Used for measuring x-ray wavelengths.\\nOriginally defined to be 1|3029.45 of\\nthe spacing of calcite planes at 18\\ndegC.  It was intended to be exactly\\n1e-13 m, but was later found to be\\nslightly off.  Current usage is with\\nreference to common x-ray lines, either\\nthe K-alpha 1 line of copper or the\\nsame line of molybdenum.\"}},{\"line\":\"xunit_cu = 1.00207697e-13 m\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Used for measuring x-ray wavelengths.\\nOriginally defined to be 1|3029.45 of\\nthe spacing of calcite planes at 18\\ndegC.  It was intended to be exactly\\n1e-13 m, but was later found to be\\nslightly off.  Current usage is with\\nreference to common x-ray lines, either\\nthe K-alpha 1 line of copper or the\\nsame line of molybdenum.\"}},{\"line\":\"xunit_mo = 1.00209952e-13 m\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Used for measuring x-ray wavelengths.\\nOriginally defined to be 1|3029.45 of\\nthe spacing of calcite planes at 18\\ndegC.  It was intended to be exactly\\n1e-13 m, but was later found to be\\nslightly off.  Current usage is with\\nreference to common x-ray lines, either\\nthe K-alpha 1 line of copper or the\\nsame line of molybdenum.\"}},{\"line\":\"angstromstar = 1.00001495 angstrom\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Defined by JA Bearden in 1965\"}},{\"line\":\"fermi = 1e-15 m\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Convenient for describing nuclear sizes\\nNuclear radius is from 1 to 10 fermis\"}},{\"line\":\"barn = 1e-28 m^2\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Used to measure cross section for\\nparticle physics collision, said to\\nhave originated in the phrase \\\"big as\\na barn\\\".\"}},{\"line\":\"shed = 1e-24 barn\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Defined to be a smaller companion to the\\nbarn, but it's too small to be of\\nmuch use.\"}},{\"line\":\"brewster = micron^2/N\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"measures stress-optical coef\"}},{\"line\":\"diopter = /m\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"measures reciprocal of lens focal length\"}},{\"line\":\"fresnel = 1e12 Hz\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"occasionally used in spectroscopy\"}},{\"line\":\"shake = 1e-8 sec\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"svedberg = 1e-13 s\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Used for measuring the sedimentation\\ncoefficient for centrifuging.\"}},{\"line\":\"gamma = microgram\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Also used for 1e-9 tesla\"}},{\"line\":\"lambda = microliter\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"spat = 1e12 m\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Rarely used for astronomical measurements\"}},{\"line\":\"preece = 1e13 ohm m\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"resistivity\"}},{\"line\":\"planck = J s\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"action of one joule over one second\"}},{\"line\":\"sturgeon = /henry\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"magnetic reluctance\"}},{\"line\":\"daraf = 1/farad\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"elastance (farad spelled backwards)\"}},{\"line\":\"leo = 10 m/s^2\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"poiseuille = N s / m^2\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"viscosity\"}},{\"line\":\"mayer = J/g K\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"specific heat\"}},{\"line\":\"mired = / microK\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"reciprocal color temperature.  The name\\nabbreviates micro reciprocal degree.\"}},{\"line\":\"crocodile = megavolt\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"used informally in UK physics labs\"}},{\"line\":\"metricounce = 25 g\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"mounce = metricounce\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"finsenunit = 1e5 W/m^2\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Measures intensity of ultraviolet light\\nwith wavelength 296.7 nm.\"}},{\"line\":\"fluxunit = 1e-26 W/m^2 Hz\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Used in radio astronomy to measure\\nthe energy incident on the receiving\\nbody across a specified frequency\\nbandwidth.  [12]\\nK. G. Jansky identified radio waves coming\\nfrom outer space in 1931.\"}},{\"line\":\"jansky = fluxunit\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Used in radio astronomy to measure\\nthe energy incident on the receiving\\nbody across a specified frequency\\nbandwidth.  [12]\\nK. G. Jansky identified radio waves coming\\nfrom outer space in 1931.\"}},{\"line\":\"Jy = jansky\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Used in radio astronomy to measure\\nthe energy incident on the receiving\\nbody across a specified frequency\\nbandwidth.  [12]\\nK. G. Jansky identified radio waves coming\\nfrom outer space in 1931.\"}},{\"line\":\"flick = W / cm^2 sr micrometer\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Spectral radiance or irradiance\"}},{\"line\":\"pfu = / cm^2 sr s\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"particle flux unit -- Used to measure\\nrate at which particles are received by\\na spacecraft as particles per solid\\nangle per detector area per second. [18]\"}},{\"line\":\"pyron = cal_IT / cm^2 min\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Measures heat flow from solar radiation,\\nfrom Greek work \\\"pyr\\\" for fire.\"}},{\"line\":\"katal = mol/sec\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Measure of the amount of a catalyst.  One\\nkatal of catalyst enables the reaction\\nto consume or produce on mol/sec.\"}},{\"line\":\"kat = katal\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Measure of the amount of a catalyst.  One\\nkatal of catalyst enables the reaction\\nto consume or produce on mol/sec.\"}},{\"line\":\"solarluminosity = 384.6e24 W\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"A common yardstick for comparing the\\noutput of different stars.\\nhttp://nssdc.gsfc.nasa.gov/planetary/factsheet/sunfact.html\"}},{\"line\":\"sec = s\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"\"}},{\"line\":\"minute = 60 s\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"\"}},{\"line\":\"min = minute\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"\"}},{\"line\":\"hour = 60 min\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"\"}},{\"line\":\"hr = hour\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"\"}},{\"line\":\"day = 24 hr\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"\"}},{\"line\":\"d = day\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"\"}},{\"line\":\"da = day\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"\"}},{\"line\":\"week = 7 day\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"\"}},{\"line\":\"wk = week\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"\"}},{\"line\":\"sennight = 7 day\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"\"}},{\"line\":\"fortnight = 14 day\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"\"}},{\"line\":\"blink = 1e-5 day\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"Actual human blink takes 1|3 second\"}},{\"line\":\"ce = 1e-2 day\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"\"}},{\"line\":\"cron = 1e6 years\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"\"}},{\"line\":\"watch = 4 hours\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"time a sentry stands watch or a ship's\\ncrew is on duty.\"}},{\"line\":\"bell = 1|8 watch\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"Bell would be sounded every 30 minutes.\"}},{\"line\":\"decimalhour = 1|10 day\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\",\"3.4.1. French Revolutionary Time or Decimal Time. It was Proposed during\\nthe French Revolution. A few clocks were made, but it never caught\\non. In 1998 Swatch defined a time measurement called \\\".beat\\\" and\\nsold some watches that displayed time in this unit.\"],\"comment\":\"\"}},{\"line\":\"decimalminute = 1|100 decimalhour\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\",\"3.4.1. French Revolutionary Time or Decimal Time. It was Proposed during\\nthe French Revolution. A few clocks were made, but it never caught\\non. In 1998 Swatch defined a time measurement called \\\".beat\\\" and\\nsold some watches that displayed time in this unit.\"],\"comment\":\"\"}},{\"line\":\"decimalsecond = 1|100 decimalminute\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\",\"3.4.1. French Revolutionary Time or Decimal Time. It was Proposed during\\nthe French Revolution. A few clocks were made, but it never caught\\non. In 1998 Swatch defined a time measurement called \\\".beat\\\" and\\nsold some watches that displayed time in this unit.\"],\"comment\":\"\"}},{\"line\":\"beat = decimalminute\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\",\"3.4.1. French Revolutionary Time or Decimal Time. It was Proposed during\\nthe French Revolution. A few clocks were made, but it never caught\\non. In 1998 Swatch defined a time measurement called \\\".beat\\\" and\\nsold some watches that displayed time in this unit.\"],\"comment\":\"Swatch Internet Time\"}},{\"line\":\"circle = 2 pi radian\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"degree = 1|360 circle\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"deg = degree\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"arcdeg = degree\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"arcmin = 1|60 degree\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"arcminute = arcmin\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"' = arcmin\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"arcsec = 1|60 arcmin\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"arcsecond = arcsec\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"\\\" = arcsec\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"'' = \\\"\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"rightangle = 90 degrees\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"quadrant = 1|4 circle\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"quintant = 1|5 circle\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"sextant = 1|6 circle\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"sign = 1|12 circle\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"Angular extent of one sign of the zodiac\"}},{\"line\":\"turn = circle\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"revolution = turn\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"rev = turn\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"pulsatance = radian / sec\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"gon = 1|100 rightangle\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"measure of grade\"}},{\"line\":\"grade = gon\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"measure of grade\"}},{\"line\":\"centesimalminute = 1|100 grade\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"centesimalsecond = 1|100 centesimalminute\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"milangle = 1|6400 circle\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"Official NIST definition.\\nAnother choice is 1e-3 radian.\"}},{\"line\":\"pointangle = 1|32 circle\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"Used for reporting compass readings\"}},{\"line\":\"centrad = 0.01 radian\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"Used for angular deviation of light\\nthrough a prism.\"}},{\"line\":\"mas = milli arcsec\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"Used by astronomers\"}},{\"line\":\"seclongitude = circle (seconds/day)\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"Astronomers measure longitude\\n(which they call right ascension) in\\ntime units by dividing the equator into\\n24 hours instead of 360 degrees.\"}},{\"line\":\"circlearea = r => pi r^2 \",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.6. Some geometric formulas\"],\"comment\":\"\"}},{\"line\":\"circlearea^-1 = circlearea => sqrt(circlearea/pi)\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.6. Some geometric formulas\"],\"comment\":\"\"}},{\"line\":\"spherevolume = r => 4|3 pi r^3 \",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.6. Some geometric formulas\"],\"comment\":\"\"}},{\"line\":\"spherevolume^-1 = spherevolume => cuberoot(spherevolume/4|3 pi)\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.6. Some geometric formulas\"],\"comment\":\"\"}},{\"line\":\"spherevol = spherevolume\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.6. Some geometric formulas\"],\"comment\":\"\"}},{\"line\":\"square = x => x^2 \",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.6. Some geometric formulas\"],\"comment\":\"\"}},{\"line\":\"square^-1 = square => sqrt(square)\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.6. Some geometric formulas\"],\"comment\":\"\"}},{\"line\":\"sphere = 4 pi sr\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.7. Solid angle measure\"],\"comment\":\"\"}},{\"line\":\"squaredegree = 1|180^2 pi^2 sr\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.7. Solid angle measure\"],\"comment\":\"\"}},{\"line\":\"squareminute = 1|60^2 squaredegree\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.7. Solid angle measure\"],\"comment\":\"\"}},{\"line\":\"squaresecond = 1|60^2 squareminute\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.7. Solid angle measure\"],\"comment\":\"\"}},{\"line\":\"squarearcmin = squareminute\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.7. Solid angle measure\"],\"comment\":\"\"}},{\"line\":\"squarearcsec = squaresecond\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.7. Solid angle measure\"],\"comment\":\"\"}},{\"line\":\"sphericalrightangle = 0.5 pi sr\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.7. Solid angle measure\"],\"comment\":\"\"}},{\"line\":\"octant = 0.5 pi sr\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.7. Solid angle measure\"],\"comment\":\"\"}},{\"line\":\"percent = 0.01\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"\"}},{\"line\":\"% = percent\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"\"}},{\"line\":\"mill = 0.001\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"Originally established by Congress in 1791\\nas a unit of money equal to 0.001 dollars,\\nit has come to refer to 0.001 in general.\\nUsed by some towns to set their property\\ntax rate, and written with a symbol similar\\nto the % symbol but with two 0's in the\\ndenominator.  [18]\"}},{\"line\":\"proof = 1|200\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"Alcohol content measured by volume at\\n60 degrees Fahrenheit.  This is a USA\\nmeasure.  In Europe proof=percent.\"}},{\"line\":\"ppm = 1e-6\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"\"}},{\"line\":\"partspermillion = ppm\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"\"}},{\"line\":\"ppb = 1e-9\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"USA billion\"}},{\"line\":\"partsperbillion = ppb\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"USA billion\"}},{\"line\":\"ppt = 1e-12\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"USA trillion\"}},{\"line\":\"partspertrillion = ppt\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"USA trillion\"}},{\"line\":\"karat = 1|24\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"measure of gold purity\"}},{\"line\":\"caratgold = karat\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"measure of gold purity\"}},{\"line\":\"gammil = mg/l\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"\"}},{\"line\":\"basispoint = 0.01 %\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"Used in finance\"}},{\"line\":\"fine = 1|1000\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"Measure of gold purity\"}},{\"line\":\"pH = x => 10^(-x) mol/liter \",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"The pH scale is used to measure the concentration of hydronium (H3O+) ions in\\na solution.  A neutral solution has a pH of 7 as a result of dissociated\\nwater molecules.\"}},{\"line\":\"pH^-1 = pH => (-log(pH liters/mol))\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"The pH scale is used to measure the concentration of hydronium (H3O+) ions in\\na solution.  A neutral solution has a pH of 7 as a result of dissociated\\nwater molecules.\"}},{\"line\":\"TEMPERATURE = kelvin\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\"],\"comment\":\"\"}},{\"line\":\"TEMPERATURE_DIFFERENCE = kelvin\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\"],\"comment\":\"\"}},{\"line\":\"tempC = x => x K + stdtemp \",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\"],\"comment\":\"In 1741 Anders Celsius introduced a temperature scale with water boiling at\\n0 degrees and freezing at 100 degrees at standard pressure. After his death\\nthe fixed points were reversed and the scale was called the centigrade\\nscale.  Due to the difficulty of accurately measuring the temperature of\\nmelting ice at standard pressure, the centigrade scale was replaced in 1954\\nby the Celsius scale which is defined by subtracting 273.15 from the\\ntemperature in Kelvins.  This definition differed slightly from the old\\ncentigrade definition, but the Kelvin scale depends on the triple point of\\nwater rather than a melting point, so it can be measured accurately.\"}},{\"line\":\"tempC^-1 = tempC => (tempC +(-stdtemp))/K\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\"],\"comment\":\"In 1741 Anders Celsius introduced a temperature scale with water boiling at\\n0 degrees and freezing at 100 degrees at standard pressure. After his death\\nthe fixed points were reversed and the scale was called the centigrade\\nscale.  Due to the difficulty of accurately measuring the temperature of\\nmelting ice at standard pressure, the centigrade scale was replaced in 1954\\nby the Celsius scale which is defined by subtracting 273.15 from the\\ntemperature in Kelvins.  This definition differed slightly from the old\\ncentigrade definition, but the Kelvin scale depends on the triple point of\\nwater rather than a melting point, so it can be measured accurately.\"}},{\"line\":\"tempcelsius = tempC\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\"],\"comment\":\"In 1741 Anders Celsius introduced a temperature scale with water boiling at\\n0 degrees and freezing at 100 degrees at standard pressure. After his death\\nthe fixed points were reversed and the scale was called the centigrade\\nscale.  Due to the difficulty of accurately measuring the temperature of\\nmelting ice at standard pressure, the centigrade scale was replaced in 1954\\nby the Celsius scale which is defined by subtracting 273.15 from the\\ntemperature in Kelvins.  This definition differed slightly from the old\\ncentigrade definition, but the Kelvin scale depends on the triple point of\\nwater rather than a melting point, so it can be measured accurately.\"}},{\"line\":\"degcelsius = K\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\"],\"comment\":\"In 1741 Anders Celsius introduced a temperature scale with water boiling at\\n0 degrees and freezing at 100 degrees at standard pressure. After his death\\nthe fixed points were reversed and the scale was called the centigrade\\nscale.  Due to the difficulty of accurately measuring the temperature of\\nmelting ice at standard pressure, the centigrade scale was replaced in 1954\\nby the Celsius scale which is defined by subtracting 273.15 from the\\ntemperature in Kelvins.  This definition differed slightly from the old\\ncentigrade definition, but the Kelvin scale depends on the triple point of\\nwater rather than a melting point, so it can be measured accurately.\"}},{\"line\":\"degC = K\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\"],\"comment\":\"In 1741 Anders Celsius introduced a temperature scale with water boiling at\\n0 degrees and freezing at 100 degrees at standard pressure. After his death\\nthe fixed points were reversed and the scale was called the centigrade\\nscale.  Due to the difficulty of accurately measuring the temperature of\\nmelting ice at standard pressure, the centigrade scale was replaced in 1954\\nby the Celsius scale which is defined by subtracting 273.15 from the\\ntemperature in Kelvins.  This definition differed slightly from the old\\ncentigrade definition, but the Kelvin scale depends on the triple point of\\nwater rather than a melting point, so it can be measured accurately.\"}},{\"line\":\"tempF = x => (x+(-32)) degF + stdtemp \",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"\"}},{\"line\":\"tempF^-1 = tempF => (tempF+(-stdtemp))/degF + 32\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"\"}},{\"line\":\"tempfahrenheit = tempF\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"\"}},{\"line\":\"degfahrenheit = 5|9 degC\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"\"}},{\"line\":\"degF = 5|9 degC\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"\"}},{\"line\":\"degreesrankine = degF\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"The Rankine scale has the\\nFahrenheit degree, but its zero\\nis at absolute zero.\"}},{\"line\":\"degrankine = degreesrankine\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"The Rankine scale has the\\nFahrenheit degree, but its zero\\nis at absolute zero.\"}},{\"line\":\"degreerankine = degF\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"The Rankine scale has the\\nFahrenheit degree, but its zero\\nis at absolute zero.\"}},{\"line\":\"degR = degrankine\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"The Rankine scale has the\\nFahrenheit degree, but its zero\\nis at absolute zero.\"}},{\"line\":\"tempR = degrankine\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"The Rankine scale has the\\nFahrenheit degree, but its zero\\nis at absolute zero.\"}},{\"line\":\"temprankine = degrankine\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"The Rankine scale has the\\nFahrenheit degree, but its zero\\nis at absolute zero.\"}},{\"line\":\"tempreaumur = x => x degreaumur+stdtemp \",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"The Reaumur scale was used in Europe and\\nparticularly in France.  It is defined\\nto be 0 at the freezing point of water\\nand 80 at the boiling point.  Reaumur\\napparently selected 80 because it is\\ndivisible by many numbers.\"}},{\"line\":\"tempreaumur^-1 = tempreaumur => (tempreaumur+(-stdtemp))/degreaumur\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"The Reaumur scale was used in Europe and\\nparticularly in France.  It is defined\\nto be 0 at the freezing point of water\\nand 80 at the boiling point.  Reaumur\\napparently selected 80 because it is\\ndivisible by many numbers.\"}},{\"line\":\"degreaumur = 10|8 degC\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"The Reaumur scale was used in Europe and\\nparticularly in France.  It is defined\\nto be 0 at the freezing point of water\\nand 80 at the boiling point.  Reaumur\\napparently selected 80 because it is\\ndivisible by many numbers.\"}},{\"line\":\"degK = K\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"\\\"Degrees Kelvin\\\" is forbidden usage.\\nFor consistency\"}},{\"line\":\"tempK = K\",\"info\":{\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"\\\"Degrees Kelvin\\\" is forbidden usage.\\nFor consistency\"}},{\"line\":\"pi = 3.14159265358979323846\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.1. Basic constants\"],\"comment\":\"\"}},{\"line\":\"c = 2.99792458e8 m/s\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.1. Basic constants\"],\"comment\":\"speed of light in vacuum (exact)\"}},{\"line\":\"light = c\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.1. Basic constants\"],\"comment\":\"speed of light in vacuum (exact)\"}},{\"line\":\"mu0 = 4 pi 1e-7 H/m\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.1. Basic constants\"],\"comment\":\"permeability of vacuum (exact)\"}},{\"line\":\"epsilon0 = 1/mu0 c^2\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.1. Basic constants\"],\"comment\":\"permittivity of vacuum (exact)\"}},{\"line\":\"energy = c^2\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.1. Basic constants\"],\"comment\":\"convert mass to energy\"}},{\"line\":\"e = 1.6021766208e-19 C\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.1. Basic constants\"],\"comment\":\"electron charge\"}},{\"line\":\"h = 4.135667662e-15 eV s\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.1. Basic constants\"],\"comment\":\"Planck constant\"}},{\"line\":\"hbar = h / 2 pi\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.1. Basic constants\"],\"comment\":\"\"}},{\"line\":\"spin = hbar\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.1. Basic constants\"],\"comment\":\"\"}},{\"line\":\"G = 6.67408e-11 N m^2 / kg^2\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.1. Basic constants\"],\"comment\":\"Newtonian gravitational constant\\nThis is the NIST 2006 value.\\nThe relative uncertainty on this\\nis 1e-4.\"}},{\"line\":\"coulombconst = 1/4 pi epsilon0\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.1. Basic constants\"],\"comment\":\"listed as \\\"k\\\" sometimes\"}},{\"line\":\"atomicmassunit = 1.660539040e-27 kg\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"atomic mass unit (defined to be\\n1|12 of the mass of carbon 12)\"}},{\"line\":\"u = atomicmassunit\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"atomic mass unit (defined to be\\n1|12 of the mass of carbon 12)\"}},{\"line\":\"amu = atomicmassunit\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"atomic mass unit (defined to be\\n1|12 of the mass of carbon 12)\"}},{\"line\":\"amu_chem = 1.66026e-27 kg\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"1|16 of the weighted average mass of\\nthe 3 naturally occuring neutral\\nisotopes of oxygen\"}},{\"line\":\"amu_phys = 1.65981e-27 kg\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"1|16 of the mass of a neutral\\noxygen 16 atom\"}},{\"line\":\"dalton = u\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"Maybe this should be amu_chem?\"}},{\"line\":\"avogadro = grams/amu mol\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"size of a mole\"}},{\"line\":\"N_A = avogadro\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"size of a mole\"}},{\"line\":\"gasconstant = k N_A\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"molar gas constant\"}},{\"line\":\"R = gasconstant\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"molar gas constant\"}},{\"line\":\"boltzmann = 1.38064852e-23 J/K\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"Boltzmann constant\"}},{\"line\":\"k = boltzmann\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"Boltzmann constant\"}},{\"line\":\"kboltzmann = boltzmann\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"Boltzmann constant\"}},{\"line\":\"molarvolume = mol R stdtemp / atm\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"Volume occupied by one mole of an\\nideal gas at STP.\"}},{\"line\":\"loschmidt = avogadro mol / molarvolume\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"Molecules per cubic meter of an\\nideal gas at STP.  Loschmidt did\\nwork similar to Avogadro.\"}},{\"line\":\"stefanboltzmann = pi^2 k^4 / 60 hbar^3 c^2\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"The power per area radiated by a\\nblackbody at temperature T is\\ngiven by sigma T^4.\"}},{\"line\":\"sigma = stefanboltzmann\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"The power per area radiated by a\\nblackbody at temperature T is\\ngiven by sigma T^4.\"}},{\"line\":\"wiendisplacement = 2.8977729e-3 m K\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"Wien's Displacement Law gives the\\nfrequency at which the the Planck\\nspectrum has maximum intensity.\\nThe relation is lambda T = b where\\nlambda is wavelength, T is\\ntemperature and b is the Wien\\ndisplacement.  This relation is\\nused to determine the temperature\\nof stars.\"}},{\"line\":\"K_J90 = 483597.9 GHz/V\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"Direct measurement of the volt is difficult.  Until\\nrecently, laboratories kept Weston cadmium cells as\\na reference, but they could drift.  In 1987 the\\nCGPM officially recommended the use of the\\nJosephson effect as a laboratory representation of\\nthe volt.  The Josephson effect occurs when two\\nsuperconductors are separated by a thin insulating\\nlayer.  A \\\"supercurrent\\\" flows across the insulator\\nwith a frequency that depends on the potential\\napplied across the superconductors.  This frequency\\ncan be very accurately measured.  The Josephson\\nconstant K_J, which is equal to 2e/h, relates the\\nmeasured frequency to the potential.  Two values\\ngiven, the conventional (exact) value from 1990 and\\nthe current CODATA measured value.\"}},{\"line\":\"K_J = 483597.8525 GHz/V\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"Direct measurement of the volt is difficult.  Until\\nrecently, laboratories kept Weston cadmium cells as\\na reference, but they could drift.  In 1987 the\\nCGPM officially recommended the use of the\\nJosephson effect as a laboratory representation of\\nthe volt.  The Josephson effect occurs when two\\nsuperconductors are separated by a thin insulating\\nlayer.  A \\\"supercurrent\\\" flows across the insulator\\nwith a frequency that depends on the potential\\napplied across the superconductors.  This frequency\\ncan be very accurately measured.  The Josephson\\nconstant K_J, which is equal to 2e/h, relates the\\nmeasured frequency to the potential.  Two values\\ngiven, the conventional (exact) value from 1990 and\\nthe current CODATA measured value.\"}},{\"line\":\"R_K90 = 25812.807 ohm\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"Measurement of the ohm also presents difficulties.\\nThe old approach involved maintaining resistances\\nthat were subject to drift.  The new standard is\\nbased on the Hall effect.  When a current carrying\\nribbon is placed in a magnetic field, a potential\\ndifference develops across the ribbon.  The ratio\\nof the potential difference to the current is\\ncalled the Hall resistance.  Klaus von Klitzing\\ndiscovered in 1980 that the Hall resistance varies\\nin discrete jumps when the magnetic field is very\\nlarge and the temperature very low.  This enables\\naccurate realization of the resistance h/e^2 in the\\nlab.  Two values given, the conventional (exact)\\nvalue from 1990 and the current CODATA measured\\nvalue.\"}},{\"line\":\"R_K = 25812.8074555 ohm\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"Measurement of the ohm also presents difficulties.\\nThe old approach involved maintaining resistances\\nthat were subject to drift.  The new standard is\\nbased on the Hall effect.  When a current carrying\\nribbon is placed in a magnetic field, a potential\\ndifference develops across the ribbon.  The ratio\\nof the potential difference to the current is\\ncalled the Hall resistance.  Klaus von Klitzing\\ndiscovered in 1980 that the Hall resistance varies\\nin discrete jumps when the magnetic field is very\\nlarge and the temperature very low.  This enables\\naccurate realization of the resistance h/e^2 in the\\nlab.  Two values given, the conventional (exact)\\nvalue from 1990 and the current CODATA measured\\nvalue.\"}},{\"line\":\"gravity = 9.80665 m/s^2\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.3. Various conventional values\"],\"comment\":\"std acceleration of gravity (exact)\\nuse to turn masses into forces\"}},{\"line\":\"force = gravity\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.3. Various conventional values\"],\"comment\":\"std acceleration of gravity (exact)\\nuse to turn masses into forces\"}},{\"line\":\"atm = 101325 Pa\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.3. Various conventional values\"],\"comment\":\"Standard atmospheric pressure\"}},{\"line\":\"atmosphere = atm\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.3. Various conventional values\"],\"comment\":\"Standard atmospheric pressure\"}},{\"line\":\"Hg = 13.5951 gram force / cm^3\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.3. Various conventional values\"],\"comment\":\"Standard weight of mercury (exact)\"}},{\"line\":\"water = gram force/cm^3\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.3. Various conventional values\"],\"comment\":\"Standard weight of water (exact)\"}},{\"line\":\"waterdensity = gram / cm^3\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.3. Various conventional values\"],\"comment\":\"Density of water\"}},{\"line\":\"H2O = water\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.3. Various conventional values\"],\"comment\":\"water column\"}},{\"line\":\"wc = water\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.3. Various conventional values\"],\"comment\":\"water column\"}},{\"line\":\"mach = 331.46 m/s\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.3. Various conventional values\"],\"comment\":\"speed of sound in dry air at STP\"}},{\"line\":\"standardtemp = 273.15 K\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.3. Various conventional values\"],\"comment\":\"standard temperature\"}},{\"line\":\"stdtemp = standardtemp\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.3. Various conventional values\"],\"comment\":\"standard temperature\"}},{\"line\":\"normaltemp = tempF(70)\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.3. Various conventional values\"],\"comment\":\"for gas density, from NIST\\nHandbook 44\"}},{\"line\":\"normtemp = normaltemp\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.3. Various conventional values\"],\"comment\":\"for gas density, from NIST\\nHandbook 44\"}},{\"line\":\"Hg10C = 13.5708 force gram / cm^3\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.4. Weight of mercury and water at different temperatures using the standard\\nforce of gravity.\"],\"comment\":\"These units, when used to form\\npressure measures, are not accurate\\nbecause of considerations of the\\nrevised practical temperature scale.\"}},{\"line\":\"Hg20C = 13.5462 force gram / cm^3\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.4. Weight of mercury and water at different temperatures using the standard\\nforce of gravity.\"],\"comment\":\"These units, when used to form\\npressure measures, are not accurate\\nbecause of considerations of the\\nrevised practical temperature scale.\"}},{\"line\":\"Hg23C = 13.5386 force gram / cm^3\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.4. Weight of mercury and water at different temperatures using the standard\\nforce of gravity.\"],\"comment\":\"These units, when used to form\\npressure measures, are not accurate\\nbecause of considerations of the\\nrevised practical temperature scale.\"}},{\"line\":\"Hg30C = 13.5217 force gram / cm^3\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.4. Weight of mercury and water at different temperatures using the standard\\nforce of gravity.\"],\"comment\":\"These units, when used to form\\npressure measures, are not accurate\\nbecause of considerations of the\\nrevised practical temperature scale.\"}},{\"line\":\"Hg40C = 13.4973 force gram / cm^3\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.4. Weight of mercury and water at different temperatures using the standard\\nforce of gravity.\"],\"comment\":\"These units, when used to form\\npressure measures, are not accurate\\nbecause of considerations of the\\nrevised practical temperature scale.\"}},{\"line\":\"Hg60F = 13.5574 force gram / cm^3\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.4. Weight of mercury and water at different temperatures using the standard\\nforce of gravity.\"],\"comment\":\"These units, when used to form\\npressure measures, are not accurate\\nbecause of considerations of the\\nrevised practical temperature scale.\"}},{\"line\":\"H2O0C = 0.99987 force gram / cm^3\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.4. Weight of mercury and water at different temperatures using the standard\\nforce of gravity.\"],\"comment\":\"These units, when used to form\\npressure measures, are not accurate\\nbecause of considerations of the\\nrevised practical temperature scale.\"}},{\"line\":\"H2O5C = 0.99999 force gram / cm^3\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.4. Weight of mercury and water at different temperatures using the standard\\nforce of gravity.\"],\"comment\":\"These units, when used to form\\npressure measures, are not accurate\\nbecause of considerations of the\\nrevised practical temperature scale.\"}},{\"line\":\"H2O10C = 0.99973 force gram / cm^3\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.4. Weight of mercury and water at different temperatures using the standard\\nforce of gravity.\"],\"comment\":\"These units, when used to form\\npressure measures, are not accurate\\nbecause of considerations of the\\nrevised practical temperature scale.\"}},{\"line\":\"H2O15C = 0.99913 force gram / cm^3\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.4. Weight of mercury and water at different temperatures using the standard\\nforce of gravity.\"],\"comment\":\"These units, when used to form\\npressure measures, are not accurate\\nbecause of considerations of the\\nrevised practical temperature scale.\"}},{\"line\":\"H2O18C = 0.99862 force gram / cm^3\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.4. Weight of mercury and water at different temperatures using the standard\\nforce of gravity.\"],\"comment\":\"These units, when used to form\\npressure measures, are not accurate\\nbecause of considerations of the\\nrevised practical temperature scale.\"}},{\"line\":\"H2O20C = 0.99823 force gram / cm^3\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.4. Weight of mercury and water at different temperatures using the standard\\nforce of gravity.\"],\"comment\":\"These units, when used to form\\npressure measures, are not accurate\\nbecause of considerations of the\\nrevised practical temperature scale.\"}},{\"line\":\"H2O25C = 0.99707 force gram / cm^3\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.4. Weight of mercury and water at different temperatures using the standard\\nforce of gravity.\"],\"comment\":\"These units, when used to form\\npressure measures, are not accurate\\nbecause of considerations of the\\nrevised practical temperature scale.\"}},{\"line\":\"H2O50C = 0.98807 force gram / cm^3\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.4. Weight of mercury and water at different temperatures using the standard\\nforce of gravity.\"],\"comment\":\"These units, when used to form\\npressure measures, are not accurate\\nbecause of considerations of the\\nrevised practical temperature scale.\"}},{\"line\":\"H2O100C = 0.95838 force gram / cm^3\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.4. Weight of mercury and water at different temperatures using the standard\\nforce of gravity.\"],\"comment\":\"These units, when used to form\\npressure measures, are not accurate\\nbecause of considerations of the\\nrevised practical temperature scale.\"}},{\"line\":\"Rinfinity = 10973731.568539 /m\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.5. Atomic constants\"],\"comment\":\"The wavelengths of a spectral series\\ncan be expressed as\\n1/lambda = R (1/m^2 - 1/n^2).\\nwhere R is a number that various\\nslightly from element to element.\\nFor hydrogen, R_H is the value,\\nand for heavy elements, the value\\napproaches Rinfinity, which can be\\ncomputed from\\nm_e c alpha^2 / 2 h\\nwith a loss of 4 digits\\nof precision.\"}},{\"line\":\"R_H = 10967760 /m\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.5. Atomic constants\"],\"comment\":\"The wavelengths of a spectral series\\ncan be expressed as\\n1/lambda = R (1/m^2 - 1/n^2).\\nwhere R is a number that various\\nslightly from element to element.\\nFor hydrogen, R_H is the value,\\nand for heavy elements, the value\\napproaches Rinfinity, which can be\\ncomputed from\\nm_e c alpha^2 / 2 h\\nwith a loss of 4 digits\\nof precision.\"}},{\"line\":\"alpha = 7.2973525664e-3\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.5. Atomic constants\"],\"comment\":\"The fine structure constant was\\nintroduced to explain fine\\nstructure visible in spectral\\nlines.  It can be computed from\\nmu0 c e^2 / 2 h\\nwith a loss of 3 digits precision\\nand loss of precision in derived\\nvalues which use alpha.\"}},{\"line\":\"bohrradius = alpha / 4 pi Rinfinity\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.5. Atomic constants\"],\"comment\":\"\"}},{\"line\":\"prout = 185.5 keV\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.5. Atomic constants\"],\"comment\":\"nuclear binding energy equal to 1|12\\nbinding energy of the deuteron\"}},{\"line\":\"planckmass = 2.17651e-8 kg\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.6. Planck constants\"],\"comment\":\"sqrt(hbar c / G)\"}},{\"line\":\"m_P = planckmass\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.6. Planck constants\"],\"comment\":\"sqrt(hbar c / G)\"}},{\"line\":\"plancktime = hbar / planckmass c^2\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.6. Planck constants\"],\"comment\":\"\"}},{\"line\":\"t_P = plancktime\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.6. Planck constants\"],\"comment\":\"\"}},{\"line\":\"plancklength = plancktime c\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.6. Planck constants\"],\"comment\":\"\"}},{\"line\":\"l_P = plancklength\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.6. Planck constants\"],\"comment\":\"\"}},{\"line\":\"electronradius = (1/4 pi epsilon0) e^2 / electronmass c^2\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.7. Particle radius\"],\"comment\":\"Classical\"}},{\"line\":\"deuteronchargeradius = 2.1413e-15 m\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.7. Particle radius\"],\"comment\":\"\"}},{\"line\":\"protonchargeradius = 0.8751e-15 m\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.7. Particle radius\"],\"comment\":\"\"}},{\"line\":\"electronmass = 5.48579909070e-4 u\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"m_e = electronmass\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"protonmass = 1.007276466879 u\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"m_p = protonmass\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"neutronmass = 1.00866491588 u\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"m_n = neutronmass\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"muonmass = 0.1134289257 u\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"m_mu = muonmass\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"deuteronmass = 2.013553212745 u\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"m_d = deuteronmass\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"alphaparticlemass = 4.001506179127 u\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"m_alpha = alphaparticlemass\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"taumass = 1.90749 u\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"m_tau = taumass\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"tritonmass = 3.01550071632 u\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"m_t = tritonmass\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"helionmass = 3.01493224673 u\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"m_h = helionmass\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"electronwavelength = h / m_e c\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.9. particle wavelengths: the compton wavelength of a particle is\\ndefined as h / m c where m is the mass of the particle.\"],\"comment\":\"\"}},{\"line\":\"lambda_C = electronwavelength\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.9. particle wavelengths: the compton wavelength of a particle is\\ndefined as h / m c where m is the mass of the particle.\"],\"comment\":\"\"}},{\"line\":\"protonwavelength = h / m_p c\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.9. particle wavelengths: the compton wavelength of a particle is\\ndefined as h / m c where m is the mass of the particle.\"],\"comment\":\"\"}},{\"line\":\"lambda_C,p = protonwavelength\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.9. particle wavelengths: the compton wavelength of a particle is\\ndefined as h / m c where m is the mass of the particle.\"],\"comment\":\"\"}},{\"line\":\"neutronwavelength = h / m_n c\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.9. particle wavelengths: the compton wavelength of a particle is\\ndefined as h / m c where m is the mass of the particle.\"],\"comment\":\"\"}},{\"line\":\"lambda_C,n = neutronwavelength\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.9. particle wavelengths: the compton wavelength of a particle is\\ndefined as h / m c where m is the mass of the particle.\"],\"comment\":\"\"}},{\"line\":\"bohrmagneton = e hbar / 2 electronmass\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.10. Magnetic moments\"],\"comment\":\"\"}},{\"line\":\"mu_B = bohrmagneton\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.10. Magnetic moments\"],\"comment\":\"\"}},{\"line\":\"nuclearmagneton = e hbar /  2 protonmass\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.10. Magnetic moments\"],\"comment\":\"\"}},{\"line\":\"mu_N = nuclearmagneton\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.10. Magnetic moments\"],\"comment\":\"\"}},{\"line\":\"mu_mu = -4.49044826e-26 J/T\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.10. Magnetic moments\"],\"comment\":\"Muon magnetic moment\"}},{\"line\":\"mu_p = 1.4106067873e-26 J/T\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.10. Magnetic moments\"],\"comment\":\"Proton magnetic moment\"}},{\"line\":\"mu_e = -928.4764620e-26 J/T\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.10. Magnetic moments\"],\"comment\":\"Electron magnetic moment\"}},{\"line\":\"mu_n = -0.96623650e-26 J/T\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.10. Magnetic moments\"],\"comment\":\"Neutron magnetic moment\"}},{\"line\":\"mu_d = 0.4330735040e-26 J/T\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.10. Magnetic moments\"],\"comment\":\"Deuteron magnetic moment\"}},{\"line\":\"mu_t = 1.504609503e-26 J/T\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.10. Magnetic moments\"],\"comment\":\"Triton magnetic moment\"}},{\"line\":\"mu_h = -1.074617522e-26 J/T\",\"info\":{\"headings\":[\"4. Physical constants\",\"4.10. Magnetic moments\"],\"comment\":\"Helion magnetic moment\"}},{\"line\":\"kgf = kg force\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"\"}},{\"line\":\"technicalatmosphere = kgf / cm^2\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"\"}},{\"line\":\"at = technicalatmosphere\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"\"}},{\"line\":\"hyl = kgf s^2 / m\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Also gram-force s^2/m according to [15]\"}},{\"line\":\"mmHg = mm Hg\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"\"}},{\"line\":\"torr = atm / 760\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"These units, both named after Evangelista\\nTorricelli, should not be confused.  The\\ntorr is very close to the mm Hg.\"}},{\"line\":\"tor = Pa\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"These units, both named after Evangelista\\nTorricelli, should not be confused.  The\\ntorr is very close to the mm Hg.\"}},{\"line\":\"inHg = inch Hg\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"These units, both named after Evangelista\\nTorricelli, should not be confused.  The\\ntorr is very close to the mm Hg.\"}},{\"line\":\"inH2O = inch water\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"\"}},{\"line\":\"mmH2O = mm water\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"\"}},{\"line\":\"eV = e V\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Energy acquired by a particle with charge e\\nwhen it is accelerated through 1 V\"}},{\"line\":\"electronvolt = eV\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Energy acquired by a particle with charge e\\nwhen it is accelerated through 1 V\"}},{\"line\":\"lightyear = c julianyear\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"The 365.25 day year is specified in\\nNIST publication 811\"}},{\"line\":\"ly = lightyear\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"The 365.25 day year is specified in\\nNIST publication 811\"}},{\"line\":\"lightsecond = c s\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"\"}},{\"line\":\"lightminute = c min\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"\"}},{\"line\":\"parsec = au / tan(arcsec)\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Unit of length equal to distance\\nfrom the sun to a point having\\nheliocentric parallax of 1\\narcsec (derived from parallax\\nsecond).  A distant object with\\nparalax theta will be about\\n(arcsec/theta) parsecs from the\\nsun (using the approximation\\nthat tan(theta) = theta).\"}},{\"line\":\"pc = parsec\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Unit of length equal to distance\\nfrom the sun to a point having\\nheliocentric parallax of 1\\narcsec (derived from parallax\\nsecond).  A distant object with\\nparalax theta will be about\\n(arcsec/theta) parsecs from the\\nsun (using the approximation\\nthat tan(theta) = theta).\"}},{\"line\":\"rydberg = h c Rinfinity\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Rydberg energy\"}},{\"line\":\"crith = 0.089885 gram\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"The crith is the mass of one\\nliter of hydrogen at standard\\ntemperature and pressure.\"}},{\"line\":\"amagatvolume = molarvolume\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"\"}},{\"line\":\"amagat = mol/amagatvolume\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Used to measure gas densities\"}},{\"line\":\"lorentz = bohrmagneton / h c\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Used to measure the extent\\nthat the frequency of light\\nis shifted by a magnetic field.\"}},{\"line\":\"cminv = h c / cm\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Unit of energy used in infrared\\nspectroscopy.\"}},{\"line\":\"invcm = cminv\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Unit of energy used in infrared\\nspectroscopy.\"}},{\"line\":\"wavenumber = cminv\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Unit of energy used in infrared\\nspectroscopy.\"}},{\"line\":\"kcal_mol = kcal_th / mol N_A\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"kcal/mol is used as a unit of\\nenergy by physical chemists.\"}},{\"line\":\"dyne = cm gram / s^2\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"force\"}},{\"line\":\"dyn = dyne\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"force\"}},{\"line\":\"erg = cm dyne\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"energy\"}},{\"line\":\"poise = gram / cm s\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"viscosity, honors Jean Poiseuille\"}},{\"line\":\"P = poise\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"viscosity, honors Jean Poiseuille\"}},{\"line\":\"rhe = /poise\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"reciprocal viscosity\"}},{\"line\":\"stokes = cm^2 / s\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"kinematic viscosity\"}},{\"line\":\"St = stokes\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"kinematic viscosity\"}},{\"line\":\"stoke = stokes\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"kinematic viscosity\"}},{\"line\":\"lentor = stokes\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"old name\"}},{\"line\":\"Gal = cm / s^2\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"acceleration, used in geophysics\\nfor earth's gravitational field\\n(note that \\\"gal\\\" is for gallon\\nbut \\\"Gal\\\" is the standard symbol\\nfor the gal which is evidently a\\nshortened form of \\\"galileo\\\".)\"}},{\"line\":\"galileo = Gal\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"acceleration, used in geophysics\\nfor earth's gravitational field\\n(note that \\\"gal\\\" is for gallon\\nbut \\\"Gal\\\" is the standard symbol\\nfor the gal which is evidently a\\nshortened form of \\\"galileo\\\".)\"}},{\"line\":\"barye = dyne/cm^2\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"pressure\"}},{\"line\":\"barad = barye\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"old name\"}},{\"line\":\"kayser = 1/cm\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Proposed as a unit for wavenumber\\nEven less common name than \\\"kayser\\\"\"}},{\"line\":\"balmer = kayser\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Proposed as a unit for wavenumber\\nEven less common name than \\\"kayser\\\"\"}},{\"line\":\"kine = cm/s\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"velocity\"}},{\"line\":\"bole = g cm / s\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"momentum\"}},{\"line\":\"pond = gram force\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"\"}},{\"line\":\"glug = gram force s^2 / cm\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Mass which is accelerated at\\n1 cm/s^2 by 1 gram force\"}},{\"line\":\"darcy = centipoise cm^2 / s atm\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Measures permeability to fluid flow.\\n\\nOne darcy is the permeability of a\\nmedium that allows a flow of cc/s\\nof a liquid of centipoise viscosity\\nunder a pressure gradient of\\natm/cm.  Named for H. Darcy.\"}},{\"line\":\"mobileohm = cm / dyn s\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"mobile ohm, measure of mechanical\\nmobility\"}},{\"line\":\"mechanicalohm = dyn s / cm\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"mechanical resistance\"}},{\"line\":\"acousticalohm = dyn s / cm^5\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"ratio of the sound pressure of\\n1 dyn/cm^2 to a source of strength\\n1 cm^3/s\"}},{\"line\":\"ray = acousticalohm\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"ratio of the sound pressure of\\n1 dyn/cm^2 to a source of strength\\n1 cm^3/s\"}},{\"line\":\"rayl = dyn s / cm^3\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Specific acoustical resistance\"}},{\"line\":\"eotvos = 1e-9 Gal/cm\",\"info\":{\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Change in gravitational acceleration\\nover horizontal distance\"}},{\"line\":\"abampere = 10 A\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"Current which produces a force of\\n2 dyne/cm between two infinitely\\nlong wires that are 1 cm apart\\nalternative name for abamp\"}},{\"line\":\"abamp = abampere\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"Current which produces a force of\\n2 dyne/cm between two infinitely\\nlong wires that are 1 cm apart\\nalternative name for abamp\"}},{\"line\":\"aA = abampere\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"Current which produces a force of\\n2 dyne/cm between two infinitely\\nlong wires that are 1 cm apart\\nalternative name for abamp\"}},{\"line\":\"biot = aA\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"Current which produces a force of\\n2 dyne/cm between two infinitely\\nlong wires that are 1 cm apart\\nalternative name for abamp\"}},{\"line\":\"Bi = biot\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"Current which produces a force of\\n2 dyne/cm between two infinitely\\nlong wires that are 1 cm apart\\nalternative name for abamp\"}},{\"line\":\"abcoulomb = abamp sec\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\"}},{\"line\":\"abcoul = abcoulomb\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\"}},{\"line\":\"abfarad = abampere sec / abvolt\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\"}},{\"line\":\"abhenry = abvolt sec / abamp\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\"}},{\"line\":\"abvolt = dyne cm  / abamp sec\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\"}},{\"line\":\"abohm = abvolt / abamp\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\"}},{\"line\":\"abmho = /abohm\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\"}},{\"line\":\"gauss = abvolt sec / cm^2\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\"}},{\"line\":\"Gs = gauss\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\"}},{\"line\":\"maxwell = abvolt sec\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"Also called the \\\"line\\\"\"}},{\"line\":\"Mx = maxwell\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"Also called the \\\"line\\\"\"}},{\"line\":\"oersted = gauss / mu0\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\"}},{\"line\":\"Oe = oersted\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\"}},{\"line\":\"gilbert = gauss cm / mu0\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\"}},{\"line\":\"Gb = gilbert\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\"}},{\"line\":\"Gi = gilbert\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\"}},{\"line\":\"unitpole = 4 pi maxwell\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\"}},{\"line\":\"emu = erg/gauss\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\\\"electro-magnetic unit\\\", a measure of\\nmagnetic moment, often used as emu/cm^3\\nto specify magnetic moment density.\"}},{\"line\":\"statampere = 10 A cm / s c\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"\"}},{\"line\":\"statamp = statampere\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"\"}},{\"line\":\"statvolt = dyne cm / statamp sec\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"\"}},{\"line\":\"statcoulomb = statamp s\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"\"}},{\"line\":\"esu = statcoulomb\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"\"}},{\"line\":\"statcoul = statcoulomb\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"\"}},{\"line\":\"statfarad = statamp sec / statvolt\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"\"}},{\"line\":\"cmcapacitance = statfarad\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"\"}},{\"line\":\"stathenry = statvolt sec / statamp\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"\"}},{\"line\":\"statohm = statvolt / statamp\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"\"}},{\"line\":\"statmho = /statohm\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"\"}},{\"line\":\"statmaxwell = statvolt sec\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"\"}},{\"line\":\"franklin = statcoulomb\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"\"}},{\"line\":\"debye = 1e-18 statcoul cm\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"unit of electrical dipole moment\"}},{\"line\":\"helmholtz = debye/angstrom^2\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"Dipole moment per area\"}},{\"line\":\"jar = 1000 statfarad\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"approx capacitance of Leyden jar\"}},{\"line\":\"intampere = 0.999835 A\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"Defined as the current which in one\\nsecond deposits .001118 gram of\\nsilver from an aqueous solution of\\nsilver nitrate.\"}},{\"line\":\"intamp = intampere\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"Defined as the current which in one\\nsecond deposits .001118 gram of\\nsilver from an aqueous solution of\\nsilver nitrate.\"}},{\"line\":\"intfarad = 0.999505 F\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"\"}},{\"line\":\"intvolt = 1.00033 V\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"\"}},{\"line\":\"intohm = 1.000495 ohm\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"Defined as the resistance of a\\nuniform column of mercury containing\\n14.4521 gram in a column 1.063 m\\nlong and maintained at 0 degC.\"}},{\"line\":\"daniell = 1.042 V\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"Meant to be electromotive force of a\\nDaniell cell, but in error by .04 V\"}},{\"line\":\"faraday = N_A e mol\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"Charge that must flow to deposit or\\nliberate one gram equivalent of any\\nelement.  (The chemical and physical\\nvalues are off slightly from what is\\nobtained by multiplying by amu_chem\\nor amu_phys.  These values are from\\na 1991 NIST publication.)  Note that\\nthere is a Faraday constant which is\\nequal to N_A e and hence has units of\\nC/mol.\"}},{\"line\":\"faraday_phys = 96521.9 C\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"Charge that must flow to deposit or\\nliberate one gram equivalent of any\\nelement.  (The chemical and physical\\nvalues are off slightly from what is\\nobtained by multiplying by amu_chem\\nor amu_phys.  These values are from\\na 1991 NIST publication.)  Note that\\nthere is a Faraday constant which is\\nequal to N_A e and hence has units of\\nC/mol.\"}},{\"line\":\"faraday_chem = 96495.7 C\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"Charge that must flow to deposit or\\nliberate one gram equivalent of any\\nelement.  (The chemical and physical\\nvalues are off slightly from what is\\nobtained by multiplying by amu_chem\\nor amu_phys.  These values are from\\na 1991 NIST publication.)  Note that\\nthere is a Faraday constant which is\\nequal to N_A e and hence has units of\\nC/mol.\"}},{\"line\":\"kappline = 6000 maxwell\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"Named by and for Gisbert Kapp\"}},{\"line\":\"siemensunit = 0.9534 ohm\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"Resistance of a meter long column of\\nmercury with a 1 mm cross section.\"}},{\"line\":\"copperconductivity = 58 siemens m / mm^2\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"A wire a meter long with\\na 1 mm^2 cross section\"}},{\"line\":\"IACS = copperconductivity\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"A wire a meter long with\\na 1 mm^2 cross section\"}},{\"line\":\"copperdensity = 8.89 g/cm^3\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"The \\\"ounce\\\" measures the\\nthickness of copper used\\nin circuitboard fabrication\"}},{\"line\":\"ouncecopper = oz / ft^2 copperdensity\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"The \\\"ounce\\\" measures the\\nthickness of copper used\\nin circuitboard fabrication\"}},{\"line\":\"ozcu = ouncecopper\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"The \\\"ounce\\\" measures the\\nthickness of copper used\\nin circuitboard fabrication\"}},{\"line\":\"LUMINOUS_INTENSITY = candela\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"\"}},{\"line\":\"LUMINOUS_FLUX = lumen\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"\"}},{\"line\":\"LUMINOUS_ENERGY = talbot\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"\"}},{\"line\":\"ILLUMINANCE = lux\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"\"}},{\"line\":\"EXITANCE = lux\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"\"}},{\"line\":\"candle = 1.02 candela\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"Standard unit for luminous intensity\\nin use before candela\"}},{\"line\":\"hefnerunit = 0.9 candle\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"Standard unit for luminous intensity\\nin use before candela\"}},{\"line\":\"hefnercandle = hefnerunit\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"Standard unit for luminous intensity\\nin use before candela\"}},{\"line\":\"violle = 20.17 cd\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"luminous intensity of 1 cm^2 of\\nplatinum at its temperature of\\nsolidification (2045 K)\"}},{\"line\":\"lumen = cd sr\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"Luminous flux (luminous energy per\\ntime unit)\"}},{\"line\":\"lm = lumen\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"Luminous flux (luminous energy per\\ntime unit)\"}},{\"line\":\"talbot = lumen s\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"Luminous energy\\nReferences give these values for\\nlumerg and lumberg both.  Note that\\na paper from 1948 suggests that\\nlumerg should be 1e-7 talbots so\\nthat lumergs/erg = talbots/joule.\\nlumerg = luminous erg\"}},{\"line\":\"lumberg = talbot\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"Luminous energy\\nReferences give these values for\\nlumerg and lumberg both.  Note that\\na paper from 1948 suggests that\\nlumerg should be 1e-7 talbots so\\nthat lumergs/erg = talbots/joule.\\nlumerg = luminous erg\"}},{\"line\":\"lumerg = talbot\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"Luminous energy\\nReferences give these values for\\nlumerg and lumberg both.  Note that\\na paper from 1948 suggests that\\nlumerg should be 1e-7 talbots so\\nthat lumergs/erg = talbots/joule.\\nlumerg = luminous erg\"}},{\"line\":\"lux = lm/m^2\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"Illuminance or exitance (luminous\\nflux incident on or coming from\\na surface)\"}},{\"line\":\"lx = lux\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"Illuminance or exitance (luminous\\nflux incident on or coming from\\na surface)\"}},{\"line\":\"phot = lumen / cm^2\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"Illuminance or exitance (luminous\\nflux incident on or coming from\\na surface)\"}},{\"line\":\"ph = phot\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"Illuminance or exitance (luminous\\nflux incident on or coming from\\na surface)\"}},{\"line\":\"footcandle = lumen/ft^2\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"Illuminance from a 1 candela source\\nat a distance of one foot\"}},{\"line\":\"metercandle = lumen/m^2\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"Illuminance from a 1 candela source\\nat a distance of one meter\"}},{\"line\":\"mcs = metercandle s\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"luminous energy per area, used to\\nmeasure photographic exposure\"}},{\"line\":\"nox = 1e-3 lux\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"These two units were proposed for\\nmeasurements relating to dark adapted\\neyes.\"}},{\"line\":\"skot = 1e-3 apostilb\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"These two units were proposed for\\nmeasurements relating to dark adapted\\neyes.\"}},{\"line\":\"LUMINANCE = nit\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\"],\"comment\":\"\"}},{\"line\":\"nit = cd/m^2\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\"],\"comment\":\"Luminance: the intensity per projected\\narea of an extended luminous source.\\n(nit is from latin nitere = to shine.)\"}},{\"line\":\"stilb = cd / cm^2\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\"],\"comment\":\"Luminance: the intensity per projected\\narea of an extended luminous source.\\n(nit is from latin nitere = to shine.)\"}},{\"line\":\"sb = stilb\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\"],\"comment\":\"Luminance: the intensity per projected\\narea of an extended luminous source.\\n(nit is from latin nitere = to shine.)\"}},{\"line\":\"apostilb = cd/pi m^2\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\"],\"comment\":\"\"}},{\"line\":\"asb = apostilb\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\"],\"comment\":\"\"}},{\"line\":\"blondel = apostilb\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\"],\"comment\":\"Named after a French scientist.\"}},{\"line\":\"equivalentlux = cd / pi m^2\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\",\"5.2.1.1. Equivalent luminance measures. These units are units which measure\\nthe luminance of a surface with a specified exitance which obeys\\nLambert's law. (Lambert's law specifies that luminous intensity of\\na perfectly diffuse luminous surface is proportional to the cosine\\nof the angle at which you view the luminous surface.)\"],\"comment\":\"luminance of a 1 lux surface\"}},{\"line\":\"equivalentphot = cd / pi cm^2\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\",\"5.2.1.1. Equivalent luminance measures. These units are units which measure\\nthe luminance of a surface with a specified exitance which obeys\\nLambert's law. (Lambert's law specifies that luminous intensity of\\na perfectly diffuse luminous surface is proportional to the cosine\\nof the angle at which you view the luminous surface.)\"],\"comment\":\"luminance of a 1 phot surface\"}},{\"line\":\"lambert = cd / pi cm^2\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\",\"5.2.1.1. Equivalent luminance measures. These units are units which measure\\nthe luminance of a surface with a specified exitance which obeys\\nLambert's law. (Lambert's law specifies that luminous intensity of\\na perfectly diffuse luminous surface is proportional to the cosine\\nof the angle at which you view the luminous surface.)\"],\"comment\":\"luminance of a 1 phot surface\"}},{\"line\":\"footlambert = cd / pi ft^2\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\",\"5.2.1.1. Equivalent luminance measures. These units are units which measure\\nthe luminance of a surface with a specified exitance which obeys\\nLambert's law. (Lambert's law specifies that luminous intensity of\\na perfectly diffuse luminous surface is proportional to the cosine\\nof the angle at which you view the luminous surface.)\"],\"comment\":\"\"}},{\"line\":\"bril = x => 2^(x+-100) lamberts \",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\",\"5.2.1.1. Equivalent luminance measures. These units are units which measure\\nthe luminance of a surface with a specified exitance which obeys\\nLambert's law. (Lambert's law specifies that luminous intensity of\\na perfectly diffuse luminous surface is proportional to the cosine\\nof the angle at which you view the luminous surface.)\"],\"comment\":\"The bril is used to express \\\"brilliance\\\" of a source of light on a\\nlogarithmic scale to correspond to subjective perception.  An increase of 1\\nbril means doubling the luminance.  A luminance of 1 lambert is defined to\\nhave a brilliance of 1 bril.\"}},{\"line\":\"bril^-1 = bril => log2(bril/lambert)+100\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\",\"5.2.1.1. Equivalent luminance measures. These units are units which measure\\nthe luminance of a surface with a specified exitance which obeys\\nLambert's law. (Lambert's law specifies that luminous intensity of\\na perfectly diffuse luminous surface is proportional to the cosine\\nof the angle at which you view the luminous surface.)\"],\"comment\":\"The bril is used to express \\\"brilliance\\\" of a source of light on a\\nlogarithmic scale to correspond to subjective perception.  An increase of 1\\nbril means doubling the luminance.  A luminance of 1 lambert is defined to\\nhave a brilliance of 1 bril.\"}},{\"line\":\"sunlum = 1.6e9 cd/m^2\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\",\"5.2.1.2. Some luminance data from the IES Lighting Handbook, 8th ed, 1993\"],\"comment\":\"at zenith\"}},{\"line\":\"sunillum = 100e3 lux\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\",\"5.2.1.2. Some luminance data from the IES Lighting Handbook, 8th ed, 1993\"],\"comment\":\"clear sky\"}},{\"line\":\"sunillum_o = 10e3 lux\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\",\"5.2.1.2. Some luminance data from the IES Lighting Handbook, 8th ed, 1993\"],\"comment\":\"overcast sky\"}},{\"line\":\"sunlum_h = 6e6 cd/m^2\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\",\"5.2.1.2. Some luminance data from the IES Lighting Handbook, 8th ed, 1993\"],\"comment\":\"value at horizon\"}},{\"line\":\"skylum = 8000 cd/m^2\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\",\"5.2.1.2. Some luminance data from the IES Lighting Handbook, 8th ed, 1993\"],\"comment\":\"average, clear sky\"}},{\"line\":\"skylum_o = 2000 cd/m^2\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\",\"5.2.1.2. Some luminance data from the IES Lighting Handbook, 8th ed, 1993\"],\"comment\":\"average, overcast sky\"}},{\"line\":\"moonlum = 2500 cd/m^2\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\",\"5.2.1.2. Some luminance data from the IES Lighting Handbook, 8th ed, 1993\"],\"comment\":\"\"}},{\"line\":\"s100 = 100 / lx s\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\"],\"comment\":\"ISO 100 speed\"}},{\"line\":\"iso100 = s100\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\"],\"comment\":\"ISO 100 speed\"}},{\"line\":\"k1250 = 12.5 (cd/m^2) / lx s\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.1. Reflected-light meter calibration constant with ISO 100 speed\"],\"comment\":\"For Canon, Nikon, and Sekonic\"}},{\"line\":\"k1400 = 14   (cd/m^2) / lx s\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.1. Reflected-light meter calibration constant with ISO 100 speed\"],\"comment\":\"For Kenko (Minolta) and Pentax\"}},{\"line\":\"c250 = 250 lx / lx s\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.2. Incident-light meter calibration constant with ISO 100 film\"],\"comment\":\"flat-disc receptor\"}},{\"line\":\"ev100 = x => 2^x k1250 / s100\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.4. \",\"5.2.2.4.2. For Canon, Nikon, or Sekonic\"],\"comment\":\"\"}},{\"line\":\"ev100^-1 = ev100 => log2(ev100 s100/k1250)\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.4. \",\"5.2.2.4.2. For Canon, Nikon, or Sekonic\"],\"comment\":\"\"}},{\"line\":\"EV100 = ev100\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.4. \",\"5.2.2.4.2. For Canon, Nikon, or Sekonic\"],\"comment\":\"\"}},{\"line\":\"iv100 = x => 2^x c250 / s100\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.5. Exposure value to scene illuminance with ISO 100 imaging media\"],\"comment\":\"\"}},{\"line\":\"iv100^-1 = iv100 => log2(iv100 s100 / c250)\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.5. Exposure value to scene illuminance with ISO 100 imaging media\"],\"comment\":\"\"}},{\"line\":\"N_exif = 1|3.125 lx s\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.6. Other Photographic Exposure Conversions\\n\\nAs part of APEX, ASA PH2.5-1960 proposed several logarithmic quantities\\nrelated by\\n\\nEv = Av + Tv = Bv + Sv\\n\\nwhere\\nAv = log2(A^2) Aperture value\\nTv = log2(1/t) Time value\\nSv = log2(N Sx) Speed value\\nBv = log2(B S / K) Luminance (\\\"brightness\\\") value\\nIv = log2(I S / C) Illuminance value\\n\\nand\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nSx = Arithmetic ISO speed in 1/lux s\\nB = luminance in cd/m2\\nI = luminance in lux\\n\\nThe constant N derives from the arcane relationship between arithmetic\\nand logarithmic speed given in ASA PH2.5-1960. That relationship\\napparently was not obvious--so much so that it was thought necessary\\nto explain it in PH2.12-1961. The constant has had several values\\nover the years, usually without explanation for the changes. Although\\nAPEX had little impact on consumer cameras, it has seen a partial\\nresurrection in the Exif standards published by the Camera & Imaging\\nProducts Association of Japan.\\n\\nN_apex 2^-1.75 lx s  precise value implied in ASA PH2.12-1961,\\nderived from ASA PH2.5-1960.\\nN_apex 0.30 lx s  rounded value in ASA PH2.5-1960,\\nASA PH2.12-1961, and ANSI PH2.7-1986\\nN_apex 0.3162 lx s  value in ANSI PH2.7-1973\"],\"comment\":\"value in Exif 2.3 (2010), making Sv(5) = 100\"}},{\"line\":\"K_apex1961 = 11.4 (cd/m^2) / lx s\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.6. Other Photographic Exposure Conversions\\n\\nAs part of APEX, ASA PH2.5-1960 proposed several logarithmic quantities\\nrelated by\\n\\nEv = Av + Tv = Bv + Sv\\n\\nwhere\\nAv = log2(A^2) Aperture value\\nTv = log2(1/t) Time value\\nSv = log2(N Sx) Speed value\\nBv = log2(B S / K) Luminance (\\\"brightness\\\") value\\nIv = log2(I S / C) Illuminance value\\n\\nand\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nSx = Arithmetic ISO speed in 1/lux s\\nB = luminance in cd/m2\\nI = luminance in lux\\n\\nThe constant N derives from the arcane relationship between arithmetic\\nand logarithmic speed given in ASA PH2.5-1960. That relationship\\napparently was not obvious--so much so that it was thought necessary\\nto explain it in PH2.12-1961. The constant has had several values\\nover the years, usually without explanation for the changes. Although\\nAPEX had little impact on consumer cameras, it has seen a partial\\nresurrection in the Exif standards published by the Camera & Imaging\\nProducts Association of Japan.\\n\\nN_apex 2^-1.75 lx s  precise value implied in ASA PH2.12-1961,\\nderived from ASA PH2.5-1960.\\nN_apex 0.30 lx s  rounded value in ASA PH2.5-1960,\\nASA PH2.12-1961, and ANSI PH2.7-1986\\nN_apex 0.3162 lx s  value in ANSI PH2.7-1973\"],\"comment\":\"value in ASA PH2.12-1961\"}},{\"line\":\"K_apex1971 = 12.5 (cd/m^2) / lx s\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.6. Other Photographic Exposure Conversions\\n\\nAs part of APEX, ASA PH2.5-1960 proposed several logarithmic quantities\\nrelated by\\n\\nEv = Av + Tv = Bv + Sv\\n\\nwhere\\nAv = log2(A^2) Aperture value\\nTv = log2(1/t) Time value\\nSv = log2(N Sx) Speed value\\nBv = log2(B S / K) Luminance (\\\"brightness\\\") value\\nIv = log2(I S / C) Illuminance value\\n\\nand\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nSx = Arithmetic ISO speed in 1/lux s\\nB = luminance in cd/m2\\nI = luminance in lux\\n\\nThe constant N derives from the arcane relationship between arithmetic\\nand logarithmic speed given in ASA PH2.5-1960. That relationship\\napparently was not obvious--so much so that it was thought necessary\\nto explain it in PH2.12-1961. The constant has had several values\\nover the years, usually without explanation for the changes. Although\\nAPEX had little impact on consumer cameras, it has seen a partial\\nresurrection in the Exif standards published by the Camera & Imaging\\nProducts Association of Japan.\\n\\nN_apex 2^-1.75 lx s  precise value implied in ASA PH2.12-1961,\\nderived from ASA PH2.5-1960.\\nN_apex 0.30 lx s  rounded value in ASA PH2.5-1960,\\nASA PH2.12-1961, and ANSI PH2.7-1986\\nN_apex 0.3162 lx s  value in ANSI PH2.7-1973\"],\"comment\":\"value in ANSI PH3.49-1971; more common\"}},{\"line\":\"C_apex1961 = 224 lx / lx s\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.6. Other Photographic Exposure Conversions\\n\\nAs part of APEX, ASA PH2.5-1960 proposed several logarithmic quantities\\nrelated by\\n\\nEv = Av + Tv = Bv + Sv\\n\\nwhere\\nAv = log2(A^2) Aperture value\\nTv = log2(1/t) Time value\\nSv = log2(N Sx) Speed value\\nBv = log2(B S / K) Luminance (\\\"brightness\\\") value\\nIv = log2(I S / C) Illuminance value\\n\\nand\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nSx = Arithmetic ISO speed in 1/lux s\\nB = luminance in cd/m2\\nI = luminance in lux\\n\\nThe constant N derives from the arcane relationship between arithmetic\\nand logarithmic speed given in ASA PH2.5-1960. That relationship\\napparently was not obvious--so much so that it was thought necessary\\nto explain it in PH2.12-1961. The constant has had several values\\nover the years, usually without explanation for the changes. Although\\nAPEX had little impact on consumer cameras, it has seen a partial\\nresurrection in the Exif standards published by the Camera & Imaging\\nProducts Association of Japan.\\n\\nN_apex 2^-1.75 lx s  precise value implied in ASA PH2.12-1961,\\nderived from ASA PH2.5-1960.\\nN_apex 0.30 lx s  rounded value in ASA PH2.5-1960,\\nASA PH2.12-1961, and ANSI PH2.7-1986\\nN_apex 0.3162 lx s  value in ANSI PH2.7-1973\"],\"comment\":\"value in PH2.12-1961 (20.83 for I in\\nfootcandles; flat sensor?)\"}},{\"line\":\"C_apex1971 = 322 lx / lx s\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.6. Other Photographic Exposure Conversions\\n\\nAs part of APEX, ASA PH2.5-1960 proposed several logarithmic quantities\\nrelated by\\n\\nEv = Av + Tv = Bv + Sv\\n\\nwhere\\nAv = log2(A^2) Aperture value\\nTv = log2(1/t) Time value\\nSv = log2(N Sx) Speed value\\nBv = log2(B S / K) Luminance (\\\"brightness\\\") value\\nIv = log2(I S / C) Illuminance value\\n\\nand\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nSx = Arithmetic ISO speed in 1/lux s\\nB = luminance in cd/m2\\nI = luminance in lux\\n\\nThe constant N derives from the arcane relationship between arithmetic\\nand logarithmic speed given in ASA PH2.5-1960. That relationship\\napparently was not obvious--so much so that it was thought necessary\\nto explain it in PH2.12-1961. The constant has had several values\\nover the years, usually without explanation for the changes. Although\\nAPEX had little impact on consumer cameras, it has seen a partial\\nresurrection in the Exif standards published by the Camera & Imaging\\nProducts Association of Japan.\\n\\nN_apex 2^-1.75 lx s  precise value implied in ASA PH2.12-1961,\\nderived from ASA PH2.5-1960.\\nN_apex 0.30 lx s  rounded value in ASA PH2.5-1960,\\nASA PH2.12-1961, and ANSI PH2.7-1986\\nN_apex 0.3162 lx s  value in ANSI PH2.7-1973\"],\"comment\":\"mean value in PH3.49-1971 (30 +/- 5 for I in\\nfootcandles; hemispherical sensor?)\"}},{\"line\":\"N_speed = N_exif\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.6. Other Photographic Exposure Conversions\\n\\nAs part of APEX, ASA PH2.5-1960 proposed several logarithmic quantities\\nrelated by\\n\\nEv = Av + Tv = Bv + Sv\\n\\nwhere\\nAv = log2(A^2) Aperture value\\nTv = log2(1/t) Time value\\nSv = log2(N Sx) Speed value\\nBv = log2(B S / K) Luminance (\\\"brightness\\\") value\\nIv = log2(I S / C) Illuminance value\\n\\nand\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nSx = Arithmetic ISO speed in 1/lux s\\nB = luminance in cd/m2\\nI = luminance in lux\\n\\nThe constant N derives from the arcane relationship between arithmetic\\nand logarithmic speed given in ASA PH2.5-1960. That relationship\\napparently was not obvious--so much so that it was thought necessary\\nto explain it in PH2.12-1961. The constant has had several values\\nover the years, usually without explanation for the changes. Although\\nAPEX had little impact on consumer cameras, it has seen a partial\\nresurrection in the Exif standards published by the Camera & Imaging\\nProducts Association of Japan.\\n\\nN_apex 2^-1.75 lx s  precise value implied in ASA PH2.12-1961,\\nderived from ASA PH2.5-1960.\\nN_apex 0.30 lx s  rounded value in ASA PH2.5-1960,\\nASA PH2.12-1961, and ANSI PH2.7-1986\\nN_apex 0.3162 lx s  value in ANSI PH2.7-1973\"],\"comment\":\"\"}},{\"line\":\"K_lum = K_apex1971\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.6. Other Photographic Exposure Conversions\\n\\nAs part of APEX, ASA PH2.5-1960 proposed several logarithmic quantities\\nrelated by\\n\\nEv = Av + Tv = Bv + Sv\\n\\nwhere\\nAv = log2(A^2) Aperture value\\nTv = log2(1/t) Time value\\nSv = log2(N Sx) Speed value\\nBv = log2(B S / K) Luminance (\\\"brightness\\\") value\\nIv = log2(I S / C) Illuminance value\\n\\nand\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nSx = Arithmetic ISO speed in 1/lux s\\nB = luminance in cd/m2\\nI = luminance in lux\\n\\nThe constant N derives from the arcane relationship between arithmetic\\nand logarithmic speed given in ASA PH2.5-1960. That relationship\\napparently was not obvious--so much so that it was thought necessary\\nto explain it in PH2.12-1961. The constant has had several values\\nover the years, usually without explanation for the changes. Although\\nAPEX had little impact on consumer cameras, it has seen a partial\\nresurrection in the Exif standards published by the Camera & Imaging\\nProducts Association of Japan.\\n\\nN_apex 2^-1.75 lx s  precise value implied in ASA PH2.12-1961,\\nderived from ASA PH2.5-1960.\\nN_apex 0.30 lx s  rounded value in ASA PH2.5-1960,\\nASA PH2.12-1961, and ANSI PH2.7-1986\\nN_apex 0.3162 lx s  value in ANSI PH2.7-1973\"],\"comment\":\"\"}},{\"line\":\"C_illum = C_apex1961\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.6. Other Photographic Exposure Conversions\\n\\nAs part of APEX, ASA PH2.5-1960 proposed several logarithmic quantities\\nrelated by\\n\\nEv = Av + Tv = Bv + Sv\\n\\nwhere\\nAv = log2(A^2) Aperture value\\nTv = log2(1/t) Time value\\nSv = log2(N Sx) Speed value\\nBv = log2(B S / K) Luminance (\\\"brightness\\\") value\\nIv = log2(I S / C) Illuminance value\\n\\nand\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nSx = Arithmetic ISO speed in 1/lux s\\nB = luminance in cd/m2\\nI = luminance in lux\\n\\nThe constant N derives from the arcane relationship between arithmetic\\nand logarithmic speed given in ASA PH2.5-1960. That relationship\\napparently was not obvious--so much so that it was thought necessary\\nto explain it in PH2.12-1961. The constant has had several values\\nover the years, usually without explanation for the changes. Although\\nAPEX had little impact on consumer cameras, it has seen a partial\\nresurrection in the Exif standards published by the Camera & Imaging\\nProducts Association of Japan.\\n\\nN_apex 2^-1.75 lx s  precise value implied in ASA PH2.12-1961,\\nderived from ASA PH2.5-1960.\\nN_apex 0.30 lx s  rounded value in ASA PH2.5-1960,\\nASA PH2.12-1961, and ANSI PH2.7-1986\\nN_apex 0.3162 lx s  value in ANSI PH2.7-1973\"],\"comment\":\"\"}},{\"line\":\"Av = A => 2^(A/2)\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.8. \"],\"comment\":\"convert relative aperture (f-number) to aperture value\"}},{\"line\":\"Av^-1 = Av => 2 log2(Av)\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.8. \"],\"comment\":\"convert relative aperture (f-number) to aperture value\"}},{\"line\":\"Tv = t => 2^(-t) s\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.8. \"],\"comment\":\"convert exposure time to time value\"}},{\"line\":\"Tv^-1 = Tv => log2(s / Tv)\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.8. \"],\"comment\":\"convert exposure time to time value\"}},{\"line\":\"Sval = S => 2^S / (N_speed/lx s)\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.8. \"],\"comment\":\"convert logarithmic speed Sv in ASA PH2.5-1960 to ASA/ISO arithmetic speed;\\nmake arithmetic speed dimensionless\\n'Sv' conflicts with the symbol for sievert; you can uncomment this function\\ndefinition if you don't need that symbol\\nSv(S)    units=[1;1] range=(0,) 2^S / (N_speed/lx s); log2((N_speed/lx s) Sv)\"}},{\"line\":\"Sval^-1 = Sval => log2((N_speed/lx s) Sval)\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.8. \"],\"comment\":\"convert logarithmic speed Sv in ASA PH2.5-1960 to ASA/ISO arithmetic speed;\\nmake arithmetic speed dimensionless\\n'Sv' conflicts with the symbol for sievert; you can uncomment this function\\ndefinition if you don't need that symbol\\nSv(S)    units=[1;1] range=(0,) 2^S / (N_speed/lx s); log2((N_speed/lx s) Sv)\"}},{\"line\":\"Bv = x => 2^x K_lum N_speed \",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.8. \"],\"comment\":\"convert luminance value Bv in ASA PH2.12-1961 to luminance\"}},{\"line\":\"Bv^-1 = Bv => log2(Bv / (K_lum N_speed))\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.8. \"],\"comment\":\"convert luminance value Bv in ASA PH2.12-1961 to luminance\"}},{\"line\":\"Iv = x => 2^x C_illum N_speed \",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.8. \"],\"comment\":\"convert illuminance value Iv in ASA PH2.12-1961 to illuminance\"}},{\"line\":\"Iv^-1 = Iv => log2(Iv / (C_illum N_speed))\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.8. \"],\"comment\":\"convert illuminance value Iv in ASA PH2.12-1961 to illuminance\"}},{\"line\":\"Sx = S => log2((N_speed/lx s) S)\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.8. \"],\"comment\":\"convert ASA/ISO arithmetic speed Sx to ASA logarithmic speed in\\nASA PH2.5-1960; make arithmetic speed dimensionless\"}},{\"line\":\"Sx^-1 = Sx => 2^Sx / (N_speed/lx s)\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.8. \"],\"comment\":\"convert ASA/ISO arithmetic speed Sx to ASA logarithmic speed in\\nASA PH2.5-1960; make arithmetic speed dimensionless\"}},{\"line\":\"Sdeg = S => 10^((S - 1) / 10) \",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.8. \"],\"comment\":\"convert DIN speed/ISO logarithmic speed in ISO 6:1993 to arithmetic speed\\nfor convenience, speed is treated here as if it were dimensionless\"}},{\"line\":\"Sdeg^-1 = Sdeg => (1 + 10 log(Sdeg))\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.8. \"],\"comment\":\"convert DIN speed/ISO logarithmic speed in ISO 6:1993 to arithmetic speed\\nfor convenience, speed is treated here as if it were dimensionless\"}},{\"line\":\"Sdin = Sdeg\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.8. \"],\"comment\":\"convert DIN speed/ISO logarithmic speed in ISO 6:1993 to arithmetic speed\\nfor convenience, speed is treated here as if it were dimensionless\"}},{\"line\":\"numericalaperture = x => 0.5 / x \",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.9. Numerical Aperture and f-Number of a Lens\\n\\nThe numerical aperture (NA) is given by\\n\\nNA = n sin(theta)\\n\\nwhere n is the index of refraction of the medium and theta is half\\nof the angle subtended by the aperture stop from a point in the image\\nor object plane. For a lens in air, n = 1, and\\n\\nNA = 0.5 / f-number\\n\\nconvert NA to f-number\"],\"comment\":\"\"}},{\"line\":\"numericalaperture^-1 = numericalaperture => 0.5 / numericalaperture\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.9. Numerical Aperture and f-Number of a Lens\\n\\nThe numerical aperture (NA) is given by\\n\\nNA = n sin(theta)\\n\\nwhere n is the index of refraction of the medium and theta is half\\nof the angle subtended by the aperture stop from a point in the image\\nor object plane. For a lens in air, n = 1, and\\n\\nNA = 0.5 / f-number\\n\\nconvert NA to f-number\"],\"comment\":\"\"}},{\"line\":\"NA = numericalaperture\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.9. Numerical Aperture and f-Number of a Lens\\n\\nThe numerical aperture (NA) is given by\\n\\nNA = n sin(theta)\\n\\nwhere n is the index of refraction of the medium and theta is half\\nof the angle subtended by the aperture stop from a point in the image\\nor object plane. For a lens in air, n = 1, and\\n\\nNA = 0.5 / f-number\\n\\nconvert NA to f-number\"],\"comment\":\"convert f-number to itself; restrict values to those possible\"}},{\"line\":\"fnumber = x => x \",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.9. Numerical Aperture and f-Number of a Lens\\n\\nThe numerical aperture (NA) is given by\\n\\nNA = n sin(theta)\\n\\nwhere n is the index of refraction of the medium and theta is half\\nof the angle subtended by the aperture stop from a point in the image\\nor object plane. For a lens in air, n = 1, and\\n\\nNA = 0.5 / f-number\\n\\nconvert NA to f-number\"],\"comment\":\"\"}},{\"line\":\"fnumber^-1 = fnumber => fnumber\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.9. Numerical Aperture and f-Number of a Lens\\n\\nThe numerical aperture (NA) is given by\\n\\nNA = n sin(theta)\\n\\nwhere n is the index of refraction of the medium and theta is half\\nof the angle subtended by the aperture stop from a point in the image\\nor object plane. For a lens in air, n = 1, and\\n\\nNA = 0.5 / f-number\\n\\nconvert NA to f-number\"],\"comment\":\"\"}},{\"line\":\"TIME = second\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"anomalisticyear = 365.2596 days\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"The time between successive\\nperihelion passages of the\\nearth.\"}},{\"line\":\"siderealyear = 365.256360417 day\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"The time for the earth to make\\none revolution around the sun\\nrelative to the stars.\"}},{\"line\":\"tropicalyear = 365.242198781 day\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"The time needed for the mean sun\\nas defined above to increase\\nits longitude by 360 degrees.\\nMost references defined the\\ntropical year as the interval\\nbetween vernal equinoxes, but\\nthis is misleading.  The length\\nof the season changes over time\\nbecause of the eccentricity of\\nthe earth's orbit.  The time\\nbetween vernal equinoxes is\\napproximately 365.24237 days\\naround the year 2000.  See\\n\\\"Mathematical Astronomy\\nMorsels\\\" for more details.\"}},{\"line\":\"eclipseyear = 346.62 days\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"The line of nodes is the\\nintersection of the plane of\\nEarth's orbit around the sun\\nwith the plane of the moon's\\norbit around earth.  Eclipses\\ncan only occur when the moon\\nand sun are close to this\\nline.  The line rotates and\\nappearances of the sun on the\\nline of nodes occur every\\neclipse year.\"}},{\"line\":\"saros = 223 synodicmonth\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"The earth, moon and sun appear in\\nthe same arrangement every\\nsaros, so if an eclipse occurs,\\nthen one saros later, a similar\\neclipse will occur.  (The saros\\nis close to 19 eclipse years.)\\nThe eclipse will occur about\\n120 degrees west of the\\npreceeding one because the\\nsaros is not an even number of\\ndays.  After 3 saros, an\\neclipse will occur at\\napproximately the same place.\"}},{\"line\":\"siderealday = 86164.09054 s\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"The sidereal day is the interval\\nbetween two successive transits\\nof a star over the meridian,\\nor the time required  for the\\nearth to make one rotation\\nrelative to the stars.  The\\nmore usual solar day is the\\ntime required to make a\\nrotation relative to the sun.\\nBecause the earth moves in its\\norbit, it has to turn a bit\\nextra to face the sun again,\\nhence the solar day is slightly\\nlonger.\"}},{\"line\":\"siderealhour = 1|24 siderealday\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"The sidereal day is the interval\\nbetween two successive transits\\nof a star over the meridian,\\nor the time required  for the\\nearth to make one rotation\\nrelative to the stars.  The\\nmore usual solar day is the\\ntime required to make a\\nrotation relative to the sun.\\nBecause the earth moves in its\\norbit, it has to turn a bit\\nextra to face the sun again,\\nhence the solar day is slightly\\nlonger.\"}},{\"line\":\"siderealminute = 1|60 siderealhour\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"The sidereal day is the interval\\nbetween two successive transits\\nof a star over the meridian,\\nor the time required  for the\\nearth to make one rotation\\nrelative to the stars.  The\\nmore usual solar day is the\\ntime required to make a\\nrotation relative to the sun.\\nBecause the earth moves in its\\norbit, it has to turn a bit\\nextra to face the sun again,\\nhence the solar day is slightly\\nlonger.\"}},{\"line\":\"siderealsecond = 1|60 siderealminute\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"The sidereal day is the interval\\nbetween two successive transits\\nof a star over the meridian,\\nor the time required  for the\\nearth to make one rotation\\nrelative to the stars.  The\\nmore usual solar day is the\\ntime required to make a\\nrotation relative to the sun.\\nBecause the earth moves in its\\norbit, it has to turn a bit\\nextra to face the sun again,\\nhence the solar day is slightly\\nlonger.\"}},{\"line\":\"anomalisticmonth = 27.55454977 day\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"Time for the moon to travel from\\nperigee to perigee\"}},{\"line\":\"nodicalmonth = 27.2122199 day\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"The nodes are the points where\\nan orbit crosses the ecliptic.\\nThis is the time required to\\ntravel from the ascending node\\nto the next ascending node.\"}},{\"line\":\"draconicmonth = nodicalmonth\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"The nodes are the points where\\nan orbit crosses the ecliptic.\\nThis is the time required to\\ntravel from the ascending node\\nto the next ascending node.\"}},{\"line\":\"draconiticmonth = nodicalmonth\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"The nodes are the points where\\nan orbit crosses the ecliptic.\\nThis is the time required to\\ntravel from the ascending node\\nto the next ascending node.\"}},{\"line\":\"siderealmonth = 27.321661 day\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"Time required for the moon to\\norbit the earth\"}},{\"line\":\"lunarmonth = 29 days + 12 hours + 44 minutes + 2.8 seconds\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"Mean time between full moons.\\nFull moons occur when the sun\\nand moon are on opposite sides\\nof the earth.  Since the earth\\nmoves around the sun, the moon\\nhas to revolve a bit extra to\\nget into the full moon\\nconfiguration.\"}},{\"line\":\"synodicmonth = lunarmonth\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"Mean time between full moons.\\nFull moons occur when the sun\\nand moon are on opposite sides\\nof the earth.  Since the earth\\nmoves around the sun, the moon\\nhas to revolve a bit extra to\\nget into the full moon\\nconfiguration.\"}},{\"line\":\"lunation = synodicmonth\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"Mean time between full moons.\\nFull moons occur when the sun\\nand moon are on opposite sides\\nof the earth.  Since the earth\\nmoves around the sun, the moon\\nhas to revolve a bit extra to\\nget into the full moon\\nconfiguration.\"}},{\"line\":\"lune = 1|30 lunation\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"Mean time between full moons.\\nFull moons occur when the sun\\nand moon are on opposite sides\\nof the earth.  Since the earth\\nmoves around the sun, the moon\\nhas to revolve a bit extra to\\nget into the full moon\\nconfiguration.\"}},{\"line\":\"lunour = 1|24 lune\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"Mean time between full moons.\\nFull moons occur when the sun\\nand moon are on opposite sides\\nof the earth.  Since the earth\\nmoves around the sun, the moon\\nhas to revolve a bit extra to\\nget into the full moon\\nconfiguration.\"}},{\"line\":\"year = tropicalyear\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"yr = year\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"month = 1|12 year\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"mo = month\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"lustrum = 5 years\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"The Lustrum was a Roman\\npurification ceremony that took\\nplace every five years.\\nClassically educated Englishmen\\nused this term.\"}},{\"line\":\"decade = 10 years\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"century = 100 years\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"millennium = 1000 years\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"millennia = millennium\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"solaryear = year\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"lunaryear = 12 lunarmonth\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"calendaryear = 365 day\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"commonyear = 365 day\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"leapyear = 366 day\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"julianyear = 365.25 day\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"gregorianyear = 365.2425 day\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"islamicyear = 354 day\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"A year of 12 lunar months. They\\nbegan counting on July 16, AD 622\\nwhen Muhammad emigrated to Medina\\n(the year of the Hegira).  They need\\n11 leap days in 30 years to stay in\\nsync with the lunar year which is a\\nbit longer than the 29.5 days of the\\naverage month.  The months do not\\nkeep to the same seasons, but\\nregress through the seasons every\\n32.5 years.\"}},{\"line\":\"islamicleapyear = 355 day\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"A year of 12 lunar months. They\\nbegan counting on July 16, AD 622\\nwhen Muhammad emigrated to Medina\\n(the year of the Hegira).  They need\\n11 leap days in 30 years to stay in\\nsync with the lunar year which is a\\nbit longer than the 29.5 days of the\\naverage month.  The months do not\\nkeep to the same seasons, but\\nregress through the seasons every\\n32.5 years.\"}},{\"line\":\"islamicmonth = 1|12 islamicyear\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"They have 29 day and 30 day months.\"}},{\"line\":\"mercuryday = 58.6462 day\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.1. Sidereal days\"],\"comment\":\"\"}},{\"line\":\"venusday = 243.01 day\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.1. Sidereal days\"],\"comment\":\"retrograde\"}},{\"line\":\"earthday = siderealday\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.1. Sidereal days\"],\"comment\":\"\"}},{\"line\":\"marsday = 1.02595675 day\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.1. Sidereal days\"],\"comment\":\"\"}},{\"line\":\"jupiterday = 0.41354 day\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.1. Sidereal days\"],\"comment\":\"\"}},{\"line\":\"saturnday = 0.4375 day\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.1. Sidereal days\"],\"comment\":\"\"}},{\"line\":\"uranusday = 0.65 day\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.1. Sidereal days\"],\"comment\":\"retrograde\"}},{\"line\":\"neptuneday = 0.768 day\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.1. Sidereal days\"],\"comment\":\"\"}},{\"line\":\"plutoday = 6.3867 day\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.1. Sidereal days\"],\"comment\":\"\"}},{\"line\":\"mercuryyear = 0.2408467 julianyear\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.2. Sidereal years from http://ssd.jpl.nasa.gov/phys_props_planets.html. Data\\nwas updated in May 2001 based on the 1992 Explanatory Supplement to the\\nAstronomical Almanac and the mean longitude rates. Apparently the table of\\nyears in that reference is incorrect.\"],\"comment\":\"\"}},{\"line\":\"venusyear = 0.61519726 julianyear\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.2. Sidereal years from http://ssd.jpl.nasa.gov/phys_props_planets.html. Data\\nwas updated in May 2001 based on the 1992 Explanatory Supplement to the\\nAstronomical Almanac and the mean longitude rates. Apparently the table of\\nyears in that reference is incorrect.\"],\"comment\":\"\"}},{\"line\":\"earthyear = siderealyear\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.2. Sidereal years from http://ssd.jpl.nasa.gov/phys_props_planets.html. Data\\nwas updated in May 2001 based on the 1992 Explanatory Supplement to the\\nAstronomical Almanac and the mean longitude rates. Apparently the table of\\nyears in that reference is incorrect.\"],\"comment\":\"\"}},{\"line\":\"marsyear = 1.8808476 julianyear\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.2. Sidereal years from http://ssd.jpl.nasa.gov/phys_props_planets.html. Data\\nwas updated in May 2001 based on the 1992 Explanatory Supplement to the\\nAstronomical Almanac and the mean longitude rates. Apparently the table of\\nyears in that reference is incorrect.\"],\"comment\":\"\"}},{\"line\":\"jupiteryear = 11.862615 julianyear\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.2. Sidereal years from http://ssd.jpl.nasa.gov/phys_props_planets.html. Data\\nwas updated in May 2001 based on the 1992 Explanatory Supplement to the\\nAstronomical Almanac and the mean longitude rates. Apparently the table of\\nyears in that reference is incorrect.\"],\"comment\":\"\"}},{\"line\":\"saturnyear = 29.447498 julianyear\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.2. Sidereal years from http://ssd.jpl.nasa.gov/phys_props_planets.html. Data\\nwas updated in May 2001 based on the 1992 Explanatory Supplement to the\\nAstronomical Almanac and the mean longitude rates. Apparently the table of\\nyears in that reference is incorrect.\"],\"comment\":\"\"}},{\"line\":\"uranusyear = 84.016846 julianyear\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.2. Sidereal years from http://ssd.jpl.nasa.gov/phys_props_planets.html. Data\\nwas updated in May 2001 based on the 1992 Explanatory Supplement to the\\nAstronomical Almanac and the mean longitude rates. Apparently the table of\\nyears in that reference is incorrect.\"],\"comment\":\"\"}},{\"line\":\"neptuneyear = 164.79132 julianyear\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.2. Sidereal years from http://ssd.jpl.nasa.gov/phys_props_planets.html. Data\\nwas updated in May 2001 based on the 1992 Explanatory Supplement to the\\nAstronomical Almanac and the mean longitude rates. Apparently the table of\\nyears in that reference is incorrect.\"],\"comment\":\"\"}},{\"line\":\"plutoyear = 247.92065 julianyear\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.2. Sidereal years from http://ssd.jpl.nasa.gov/phys_props_planets.html. Data\\nwas updated in May 2001 based on the 1992 Explanatory Supplement to the\\nAstronomical Almanac and the mean longitude rates. Apparently the table of\\nyears in that reference is incorrect.\"],\"comment\":\"\"}},{\"line\":\"earthflattening = 1|298.25642\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.4. Objects on the earth are charted relative to a perfect ellipsoid whose\\ndimensions are specified by different organizations. The ellipsoid is\\nspecified by an equatorial radius and a flattening value which defines the\\npolar radius. These values are the 1996 values given by the International\\nEarth Rotation Service (IERS) whose reference documents can be found at\\nhttp://maia.usno.navy.mil/\"],\"comment\":\"\"}},{\"line\":\"earthradius_equatorial = 6378136.49 m\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.4. Objects on the earth are charted relative to a perfect ellipsoid whose\\ndimensions are specified by different organizations. The ellipsoid is\\nspecified by an equatorial radius and a flattening value which defines the\\npolar radius. These values are the 1996 values given by the International\\nEarth Rotation Service (IERS) whose reference documents can be found at\\nhttp://maia.usno.navy.mil/\"],\"comment\":\"\"}},{\"line\":\"earthradius_polar = (-earthflattening+1) earthradius_equatorial\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.4. Objects on the earth are charted relative to a perfect ellipsoid whose\\ndimensions are specified by different organizations. The ellipsoid is\\nspecified by an equatorial radius and a flattening value which defines the\\npolar radius. These values are the 1996 values given by the International\\nEarth Rotation Service (IERS) whose reference documents can be found at\\nhttp://maia.usno.navy.mil/\"],\"comment\":\"\"}},{\"line\":\"landarea = 148.847e6 km^2\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.4. Objects on the earth are charted relative to a perfect ellipsoid whose\\ndimensions are specified by different organizations. The ellipsoid is\\nspecified by an equatorial radius and a flattening value which defines the\\npolar radius. These values are the 1996 values given by the International\\nEarth Rotation Service (IERS) whose reference documents can be found at\\nhttp://maia.usno.navy.mil/\"],\"comment\":\"\"}},{\"line\":\"oceanarea = 361.254e6 km^2\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.4. Objects on the earth are charted relative to a perfect ellipsoid whose\\ndimensions are specified by different organizations. The ellipsoid is\\nspecified by an equatorial radius and a flattening value which defines the\\npolar radius. These values are the 1996 values given by the International\\nEarth Rotation Service (IERS) whose reference documents can be found at\\nhttp://maia.usno.navy.mil/\"],\"comment\":\"\"}},{\"line\":\"moonradius = 1738 km\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.4. Objects on the earth are charted relative to a perfect ellipsoid whose\\ndimensions are specified by different organizations. The ellipsoid is\\nspecified by an equatorial radius and a flattening value which defines the\\npolar radius. These values are the 1996 values given by the International\\nEarth Rotation Service (IERS) whose reference documents can be found at\\nhttp://maia.usno.navy.mil/\"],\"comment\":\"mean value\"}},{\"line\":\"sunradius = 6.96e8 m\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.4. Objects on the earth are charted relative to a perfect ellipsoid whose\\ndimensions are specified by different organizations. The ellipsoid is\\nspecified by an equatorial radius and a flattening value which defines the\\npolar radius. These values are the 1996 values given by the International\\nEarth Rotation Service (IERS) whose reference documents can be found at\\nhttp://maia.usno.navy.mil/\"],\"comment\":\"\"}},{\"line\":\"gauss_k = 0.01720209895\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\"],\"comment\":\"This beast has dimensions of\\nau^(3|2) / day and is exact.\"}},{\"line\":\"gaussianyear = (2 pi / gauss_k) days\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\"],\"comment\":\"Year that corresponds to the Gaussian\\ngravitational constant. This is a\\nfictional year, and doesn't\\ncorrespond to any celestial event.\"}},{\"line\":\"astronomicalunit = 149597870700 m\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\"],\"comment\":\"IAU definition from 2012, exact\\nephemeris for the above described\\nastronomical unit.  (See the NASA\\nsite listed above.)\"}},{\"line\":\"au = astronomicalunit\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\"],\"comment\":\"IAU definition from 2012, exact\\nephemeris for the above described\\nastronomical unit.  (See the NASA\\nsite listed above.)\"}},{\"line\":\"solarmass = 1.9891e30 kg\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\"],\"comment\":\"\"}},{\"line\":\"sunmass = solarmass\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\"],\"comment\":\"\"}},{\"line\":\"sundist = 1.0000010178 au\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\"],\"comment\":\"mean earth-sun distance\"}},{\"line\":\"moondist = 3.844e8 m\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\"],\"comment\":\"mean earth-moon distance\"}},{\"line\":\"sundist_near = 1.471e11 m\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\"],\"comment\":\"earth-sun distance at perihelion\"}},{\"line\":\"sundist_far = 1.521e11 m\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\"],\"comment\":\"earth-sun distance at aphelion\"}},{\"line\":\"mercurymass = solarmass / 6023600\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.1. The following are masses for planetary systems, not just the planet itself.\\nThe comments give the uncertainty in the denominators. As noted above,\\nmasses are given relative to the solarmass because this is more accurate.\\nThe conversion to SI is uncertain because of uncertainty in G, the\\ngravitational constant.\\n\\nValues are from http://ssd.jpl.nasa.gov/astro_constants.html\"],\"comment\":\"250\"}},{\"line\":\"venusmass = solarmass / 408523.71\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.1. The following are masses for planetary systems, not just the planet itself.\\nThe comments give the uncertainty in the denominators. As noted above,\\nmasses are given relative to the solarmass because this is more accurate.\\nThe conversion to SI is uncertain because of uncertainty in G, the\\ngravitational constant.\\n\\nValues are from http://ssd.jpl.nasa.gov/astro_constants.html\"],\"comment\":\"0.06\"}},{\"line\":\"earthmoonmass = solarmass / 328900.56\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.1. The following are masses for planetary systems, not just the planet itself.\\nThe comments give the uncertainty in the denominators. As noted above,\\nmasses are given relative to the solarmass because this is more accurate.\\nThe conversion to SI is uncertain because of uncertainty in G, the\\ngravitational constant.\\n\\nValues are from http://ssd.jpl.nasa.gov/astro_constants.html\"],\"comment\":\"0.02\"}},{\"line\":\"marsmass = solarmass / 3098708\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.1. The following are masses for planetary systems, not just the planet itself.\\nThe comments give the uncertainty in the denominators. As noted above,\\nmasses are given relative to the solarmass because this is more accurate.\\nThe conversion to SI is uncertain because of uncertainty in G, the\\ngravitational constant.\\n\\nValues are from http://ssd.jpl.nasa.gov/astro_constants.html\"],\"comment\":\"9\"}},{\"line\":\"jupitermass = solarmass / 1047.3486\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.1. The following are masses for planetary systems, not just the planet itself.\\nThe comments give the uncertainty in the denominators. As noted above,\\nmasses are given relative to the solarmass because this is more accurate.\\nThe conversion to SI is uncertain because of uncertainty in G, the\\ngravitational constant.\\n\\nValues are from http://ssd.jpl.nasa.gov/astro_constants.html\"],\"comment\":\"0.0008\"}},{\"line\":\"saturnmass = solarmass / 3497.898\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.1. The following are masses for planetary systems, not just the planet itself.\\nThe comments give the uncertainty in the denominators. As noted above,\\nmasses are given relative to the solarmass because this is more accurate.\\nThe conversion to SI is uncertain because of uncertainty in G, the\\ngravitational constant.\\n\\nValues are from http://ssd.jpl.nasa.gov/astro_constants.html\"],\"comment\":\"0.018\"}},{\"line\":\"uranusmass = solarmass / 22902.98\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.1. The following are masses for planetary systems, not just the planet itself.\\nThe comments give the uncertainty in the denominators. As noted above,\\nmasses are given relative to the solarmass because this is more accurate.\\nThe conversion to SI is uncertain because of uncertainty in G, the\\ngravitational constant.\\n\\nValues are from http://ssd.jpl.nasa.gov/astro_constants.html\"],\"comment\":\"0.03\"}},{\"line\":\"neptunemass = solarmass / 19412.24\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.1. The following are masses for planetary systems, not just the planet itself.\\nThe comments give the uncertainty in the denominators. As noted above,\\nmasses are given relative to the solarmass because this is more accurate.\\nThe conversion to SI is uncertain because of uncertainty in G, the\\ngravitational constant.\\n\\nValues are from http://ssd.jpl.nasa.gov/astro_constants.html\"],\"comment\":\"0.04\"}},{\"line\":\"plutomass = solarmass / 1.35e8\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.1. The following are masses for planetary systems, not just the planet itself.\\nThe comments give the uncertainty in the denominators. As noted above,\\nmasses are given relative to the solarmass because this is more accurate.\\nThe conversion to SI is uncertain because of uncertainty in G, the\\ngravitational constant.\\n\\nValues are from http://ssd.jpl.nasa.gov/astro_constants.html\"],\"comment\":\"0.07e8\"}},{\"line\":\"moonearthmassratio = 0.012300034\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.1. The following are masses for planetary systems, not just the planet itself.\\nThe comments give the uncertainty in the denominators. As noted above,\\nmasses are given relative to the solarmass because this is more accurate.\\nThe conversion to SI is uncertain because of uncertainty in G, the\\ngravitational constant.\\n\\nValues are from http://ssd.jpl.nasa.gov/astro_constants.html\"],\"comment\":\"uncertainty 3 x 10-9\"}},{\"line\":\"earthmass = earthmoonmass / ( 1 + moonearthmassratio)\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.1. The following are masses for planetary systems, not just the planet itself.\\nThe comments give the uncertainty in the denominators. As noted above,\\nmasses are given relative to the solarmass because this is more accurate.\\nThe conversion to SI is uncertain because of uncertainty in G, the\\ngravitational constant.\\n\\nValues are from http://ssd.jpl.nasa.gov/astro_constants.html\"],\"comment\":\"\"}},{\"line\":\"moonmass = moonearthmassratio earthmass\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.1. The following are masses for planetary systems, not just the planet itself.\\nThe comments give the uncertainty in the denominators. As noted above,\\nmasses are given relative to the solarmass because this is more accurate.\\nThe conversion to SI is uncertain because of uncertainty in G, the\\ngravitational constant.\\n\\nValues are from http://ssd.jpl.nasa.gov/astro_constants.html\"],\"comment\":\"\"}},{\"line\":\"oldmercurymass = 0.33022e24 kg\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.2. These are the old values for the planetary masses. They may give\\nthe masses of the planets alone.\"],\"comment\":\"\"}},{\"line\":\"oldvenusmass = 4.8690e24 kg\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.2. These are the old values for the planetary masses. They may give\\nthe masses of the planets alone.\"],\"comment\":\"\"}},{\"line\":\"oldmarsmass = 0.64191e24 kg\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.2. These are the old values for the planetary masses. They may give\\nthe masses of the planets alone.\"],\"comment\":\"\"}},{\"line\":\"oldjupitermass = 1898.8e24 kg\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.2. These are the old values for the planetary masses. They may give\\nthe masses of the planets alone.\"],\"comment\":\"\"}},{\"line\":\"oldsaturnmass = 568.5e24 kg\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.2. These are the old values for the planetary masses. They may give\\nthe masses of the planets alone.\"],\"comment\":\"\"}},{\"line\":\"olduranusmass = 86.625e24 kg\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.2. These are the old values for the planetary masses. They may give\\nthe masses of the planets alone.\"],\"comment\":\"\"}},{\"line\":\"oldneptunemass = 102.78e24 kg\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.2. These are the old values for the planetary masses. They may give\\nthe masses of the planets alone.\"],\"comment\":\"\"}},{\"line\":\"oldplutomass = 0.015e24 kg\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.2. These are the old values for the planetary masses. They may give\\nthe masses of the planets alone.\"],\"comment\":\"\"}},{\"line\":\"mercuryradius = 2440 km\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.3. Mean radius from http://ssd.jpl.nsaa.gov/phys_props_planets.html which in\\nturn cites Global Earth Physics by CF Yoder, 1995.\"],\"comment\":\"\"}},{\"line\":\"venusradius = 6051.84 km\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.3. Mean radius from http://ssd.jpl.nsaa.gov/phys_props_planets.html which in\\nturn cites Global Earth Physics by CF Yoder, 1995.\"],\"comment\":\"\"}},{\"line\":\"earthradius = 6371.01 km\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.3. Mean radius from http://ssd.jpl.nsaa.gov/phys_props_planets.html which in\\nturn cites Global Earth Physics by CF Yoder, 1995.\"],\"comment\":\"\"}},{\"line\":\"marsradius = 3389.92 km\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.3. Mean radius from http://ssd.jpl.nsaa.gov/phys_props_planets.html which in\\nturn cites Global Earth Physics by CF Yoder, 1995.\"],\"comment\":\"\"}},{\"line\":\"jupiterradius = 69911 km\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.3. Mean radius from http://ssd.jpl.nsaa.gov/phys_props_planets.html which in\\nturn cites Global Earth Physics by CF Yoder, 1995.\"],\"comment\":\"\"}},{\"line\":\"saturnradius = 58232 km\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.3. Mean radius from http://ssd.jpl.nsaa.gov/phys_props_planets.html which in\\nturn cites Global Earth Physics by CF Yoder, 1995.\"],\"comment\":\"\"}},{\"line\":\"uranusradius = 25362 km\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.3. Mean radius from http://ssd.jpl.nsaa.gov/phys_props_planets.html which in\\nturn cites Global Earth Physics by CF Yoder, 1995.\"],\"comment\":\"\"}},{\"line\":\"neptuneradius = 24624 km\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.3. Mean radius from http://ssd.jpl.nsaa.gov/phys_props_planets.html which in\\nturn cites Global Earth Physics by CF Yoder, 1995.\"],\"comment\":\"\"}},{\"line\":\"plutoradius = 1151 km\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.3. Mean radius from http://ssd.jpl.nsaa.gov/phys_props_planets.html which in\\nturn cites Global Earth Physics by CF Yoder, 1995.\"],\"comment\":\"\"}},{\"line\":\"moongravity = 1.62 m/s^2\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.3. Mean radius from http://ssd.jpl.nsaa.gov/phys_props_planets.html which in\\nturn cites Global Earth Physics by CF Yoder, 1995.\"],\"comment\":\"\"}},{\"line\":\"atomicmass = electronmass\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.6. The Hartree system of atomic units, derived from fundamental units\\nof mass (of electron), action (planck's constant), charge, and\\nthe coulomb constant.\",\"5.6.1. Fundamental units\"],\"comment\":\"\"}},{\"line\":\"atomiccharge = e\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.6. The Hartree system of atomic units, derived from fundamental units\\nof mass (of electron), action (planck's constant), charge, and\\nthe coulomb constant.\",\"5.6.1. Fundamental units\"],\"comment\":\"\"}},{\"line\":\"atomicaction = hbar\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.6. The Hartree system of atomic units, derived from fundamental units\\nof mass (of electron), action (planck's constant), charge, and\\nthe coulomb constant.\",\"5.6.1. Fundamental units\"],\"comment\":\"\"}},{\"line\":\"atomiclength = bohrradius\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.6. The Hartree system of atomic units, derived from fundamental units\\nof mass (of electron), action (planck's constant), charge, and\\nthe coulomb constant.\",\"5.6.2. derived units (Warning: accuracy is lost from deriving them this way)\"],\"comment\":\"\"}},{\"line\":\"atomictime = hbar^3/coulombconst^2 atomicmass e^4\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.6. The Hartree system of atomic units, derived from fundamental units\\nof mass (of electron), action (planck's constant), charge, and\\nthe coulomb constant.\",\"5.6.2. derived units (Warning: accuracy is lost from deriving them this way)\"],\"comment\":\"Period of first\\nbohr orbit\"}},{\"line\":\"atomicvelocity = atomiclength / atomictime\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.6. The Hartree system of atomic units, derived from fundamental units\\nof mass (of electron), action (planck's constant), charge, and\\nthe coulomb constant.\",\"5.6.2. derived units (Warning: accuracy is lost from deriving them this way)\"],\"comment\":\"\"}},{\"line\":\"atomicenergy = hbar / atomictime\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.6. The Hartree system of atomic units, derived from fundamental units\\nof mass (of electron), action (planck's constant), charge, and\\nthe coulomb constant.\",\"5.6.2. derived units (Warning: accuracy is lost from deriving them this way)\"],\"comment\":\"\"}},{\"line\":\"hartree = atomicenergy\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.6. The Hartree system of atomic units, derived from fundamental units\\nof mass (of electron), action (planck's constant), charge, and\\nthe coulomb constant.\",\"5.6.2. derived units (Warning: accuracy is lost from deriving them this way)\"],\"comment\":\"\"}},{\"line\":\"thermalcoulomb = J/K\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.6. The Hartree system of atomic units, derived from fundamental units\\nof mass (of electron), action (planck's constant), charge, and\\nthe coulomb constant.\",\"5.6.3. These thermal units treat entropy as charge, from [5]\"],\"comment\":\"entropy\"}},{\"line\":\"thermalampere = W/K\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.6. The Hartree system of atomic units, derived from fundamental units\\nof mass (of electron), action (planck's constant), charge, and\\nthe coulomb constant.\",\"5.6.3. These thermal units treat entropy as charge, from [5]\"],\"comment\":\"entropy flow\"}},{\"line\":\"thermalfarad = J/K^2\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.6. The Hartree system of atomic units, derived from fundamental units\\nof mass (of electron), action (planck's constant), charge, and\\nthe coulomb constant.\",\"5.6.3. These thermal units treat entropy as charge, from [5]\"],\"comment\":\"\"}},{\"line\":\"thermalohm = K^2/W\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.6. The Hartree system of atomic units, derived from fundamental units\\nof mass (of electron), action (planck's constant), charge, and\\nthe coulomb constant.\",\"5.6.3. These thermal units treat entropy as charge, from [5]\"],\"comment\":\"thermal resistance\"}},{\"line\":\"fourier = thermalohm\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.6. The Hartree system of atomic units, derived from fundamental units\\nof mass (of electron), action (planck's constant), charge, and\\nthe coulomb constant.\",\"5.6.3. These thermal units treat entropy as charge, from [5]\"],\"comment\":\"thermal resistance\"}},{\"line\":\"thermalhenry = J K^2/W^2\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.6. The Hartree system of atomic units, derived from fundamental units\\nof mass (of electron), action (planck's constant), charge, and\\nthe coulomb constant.\",\"5.6.3. These thermal units treat entropy as charge, from [5]\"],\"comment\":\"thermal inductance\"}},{\"line\":\"thermalvolt = K\",\"info\":{\"headings\":[\"5. Units derived from physical constants\",\"5.6. The Hartree system of atomic units, derived from fundamental units\\nof mass (of electron), action (planck's constant), charge, and\\nthe coulomb constant.\",\"5.6.3. These thermal units treat entropy as charge, from [5]\"],\"comment\":\"thermal potential difference\"}},{\"line\":\"US = 1200|3937 m/ft\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"These four values will convert\\ninternational measures to\\nUS Survey measures\"}},{\"line\":\"US_ = US\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"These four values will convert\\ninternational measures to\\nUS Survey measures\"}},{\"line\":\"survey_ = US\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"These four values will convert\\ninternational measures to\\nUS Survey measures\"}},{\"line\":\"geodetic_ = US\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"These four values will convert\\ninternational measures to\\nUS Survey measures\"}},{\"line\":\"int = 3937|1200 ft/m\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"Convert US Survey measures to\\ninternational measures\"}},{\"line\":\"int_ = int\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"Convert US Survey measures to\\ninternational measures\"}},{\"line\":\"inch = 2.54 cm\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"\"}},{\"line\":\"in = inch\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"\"}},{\"line\":\"foot = 12 inch\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"\"}},{\"line\":\"feet = foot\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"\"}},{\"line\":\"ft = foot\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"\"}},{\"line\":\"yard = 3 ft\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"\"}},{\"line\":\"yd = yard\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"\"}},{\"line\":\"mile = 5280 ft\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"The mile was enlarged from 5000 ft\\nto this number in order to make\\nit an even number of furlongs.\\n(The Roman mile is 5000 romanfeet.)\"}},{\"line\":\"line = 1|12 inch\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"Also defined as '.1 in' or as '1e-8 Wb'\"}},{\"line\":\"rod = 5.5 yard\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"\"}},{\"line\":\"perch = rod\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"\"}},{\"line\":\"furlong = 40 rod\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"From \\\"furrow long\\\"\"}},{\"line\":\"statutemile = mile\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"\"}},{\"line\":\"league = 3 mile\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"Intended to be an an hour's walk\"}},{\"line\":\"surveyorschain = 66 surveyft\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"surveychain = surveyorschain\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"surveyorspole = 1|4 surveyorschain\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"surveyorslink = 1|100 surveyorschain\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"chain = 66 ft\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"link = 1|100 chain\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"ch = chain\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"USacre = 10 surveychain^2\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"intacre = 10 chain^2\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"Acre based on international ft\"}},{\"line\":\"intacrefoot = acre foot\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"USacrefoot = USacre surveyfoot\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"acrefoot = intacrefoot\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"acre = intacre\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"section = mile^2\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"township = 36 section\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"homestead = 160 acre\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"Area of land granted by the 1862 Homestead\\nAct of the United States Congress\"}},{\"line\":\"gunterschain = surveyorschain\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"engineerschain = 100 ft\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"engineerslink = 1|100 engineerschain\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"ramsdenschain = engineerschain\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"ramsdenslink = engineerslink\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"gurleychain = 33 feet\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"Andrew Ellicott chain is the\\nsame length\\n\\nChain from 1664, introduced by\\nVincent Wing, also found in a\\n33 foot length with 40 links.\"}},{\"line\":\"gurleylink = 1|50 gurleychain\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"Andrew Ellicott chain is the\\nsame length\\n\\nChain from 1664, introduced by\\nVincent Wing, also found in a\\n33 foot length with 40 links.\"}},{\"line\":\"wingchain = 66 feet\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"Andrew Ellicott chain is the\\nsame length\\n\\nChain from 1664, introduced by\\nVincent Wing, also found in a\\n33 foot length with 40 links.\"}},{\"line\":\"winglink = 1|80 wingchain\",\"info\":{\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"Andrew Ellicott chain is the\\nsame length\\n\\nChain from 1664, introduced by\\nVincent Wing, also found in a\\n33 foot length with 40 links.\"}},{\"line\":\"troughtonyard = 914.42190 mm\",\"info\":{\"headings\":[\"6. United States units\",\"6.2. early US length standards\\n\\nThe US has had four standards for the yard: one by Troughton of London\\n(1815); bronze yard 11 (1856); the Mendhall yard (1893), consistent\\nwith the definition of the meter in the metric joint resolution of\\nCongress in 1866, but defining the yard in terms of the meter; and the\\ninternational yard (1959), which standardized definitions for Australia,\\nCanada, New Zealand, South Africa, the UK, and the US.\\nSources: Pat Naughtin (2009), Which Inch?, www.metricationmatters.com;\\nLewis E. Barbrow and Lewis V. Judson (1976). NBS Special Publication\\n447, Weights and Measures Standards of the United States: A Brief\\nHistory.\"],\"comment\":\"\"}},{\"line\":\"bronzeyard11 = 914.39980 mm\",\"info\":{\"headings\":[\"6. United States units\",\"6.2. early US length standards\\n\\nThe US has had four standards for the yard: one by Troughton of London\\n(1815); bronze yard 11 (1856); the Mendhall yard (1893), consistent\\nwith the definition of the meter in the metric joint resolution of\\nCongress in 1866, but defining the yard in terms of the meter; and the\\ninternational yard (1959), which standardized definitions for Australia,\\nCanada, New Zealand, South Africa, the UK, and the US.\\nSources: Pat Naughtin (2009), Which Inch?, www.metricationmatters.com;\\nLewis E. Barbrow and Lewis V. Judson (1976). NBS Special Publication\\n447, Weights and Measures Standards of the United States: A Brief\\nHistory.\"],\"comment\":\"\"}},{\"line\":\"mendenhallyard = surveyyard\",\"info\":{\"headings\":[\"6. United States units\",\"6.2. early US length standards\\n\\nThe US has had four standards for the yard: one by Troughton of London\\n(1815); bronze yard 11 (1856); the Mendhall yard (1893), consistent\\nwith the definition of the meter in the metric joint resolution of\\nCongress in 1866, but defining the yard in terms of the meter; and the\\ninternational yard (1959), which standardized definitions for Australia,\\nCanada, New Zealand, South Africa, the UK, and the US.\\nSources: Pat Naughtin (2009), Which Inch?, www.metricationmatters.com;\\nLewis E. Barbrow and Lewis V. Judson (1976). NBS Special Publication\\n447, Weights and Measures Standards of the United States: A Brief\\nHistory.\"],\"comment\":\"\"}},{\"line\":\"internationalyard = yard\",\"info\":{\"headings\":[\"6. United States units\",\"6.2. early US length standards\\n\\nThe US has had four standards for the yard: one by Troughton of London\\n(1815); bronze yard 11 (1856); the Mendhall yard (1893), consistent\\nwith the definition of the meter in the metric joint resolution of\\nCongress in 1866, but defining the yard in terms of the meter; and the\\ninternational yard (1959), which standardized definitions for Australia,\\nCanada, New Zealand, South Africa, the UK, and the US.\\nSources: Pat Naughtin (2009), Which Inch?, www.metricationmatters.com;\\nLewis E. Barbrow and Lewis V. Judson (1976). NBS Special Publication\\n447, Weights and Measures Standards of the United States: A Brief\\nHistory.\"],\"comment\":\"\"}},{\"line\":\"fathom = 6 ft\",\"info\":{\"headings\":[\"6. United States units\",\"6.3. nautical measure\"],\"comment\":\"Originally defined as the distance from\\nfingertip to fingertip with arms fully\\nextended.\"}},{\"line\":\"nauticalmile = 1852 m\",\"info\":{\"headings\":[\"6. United States units\",\"6.3. nautical measure\"],\"comment\":\"Supposed to be one minute of latitude at\\nthe equator.  That value is about 1855 m.\\nEarly estimates of the earth's circumference\\nwere a bit off.  The value of 1852 m was\\nmade the international standard in 1929.\\nThe US did not accept this value until\\n1954.  The UK switched in 1970.\"}},{\"line\":\"cable = 1|10 nauticalmile\",\"info\":{\"headings\":[\"6. United States units\",\"6.3. nautical measure\"],\"comment\":\"international cable\"}},{\"line\":\"intcable = cable\",\"info\":{\"headings\":[\"6. United States units\",\"6.3. nautical measure\"],\"comment\":\"international cable\"}},{\"line\":\"cablelength = cable\",\"info\":{\"headings\":[\"6. United States units\",\"6.3. nautical measure\"],\"comment\":\"international cable\"}},{\"line\":\"UScable = 100 USfathom\",\"info\":{\"headings\":[\"6. United States units\",\"6.3. nautical measure\"],\"comment\":\"\"}},{\"line\":\"navycablelength = 720 USft\",\"info\":{\"headings\":[\"6. United States units\",\"6.3. nautical measure\"],\"comment\":\"used for depth in water\"}},{\"line\":\"marineleague = 3 nauticalmile\",\"info\":{\"headings\":[\"6. United States units\",\"6.3. nautical measure\"],\"comment\":\"\"}},{\"line\":\"geographicalmile = brnauticalmile\",\"info\":{\"headings\":[\"6. United States units\",\"6.3. nautical measure\"],\"comment\":\"\"}},{\"line\":\"knot = nauticalmile / hr\",\"info\":{\"headings\":[\"6. United States units\",\"6.3. nautical measure\"],\"comment\":\"\"}},{\"line\":\"click = km\",\"info\":{\"headings\":[\"6. United States units\",\"6.3. nautical measure\"],\"comment\":\"US military slang\"}},{\"line\":\"klick = click\",\"info\":{\"headings\":[\"6. United States units\",\"6.3. nautical measure\"],\"comment\":\"US military slang\"}},{\"line\":\"pound = 0.45359237 kg\",\"info\":{\"headings\":[\"6. United States units\",\"6.4. Avoirdupois weight\"],\"comment\":\"The one normally used\\nFrom the latin libra\"}},{\"line\":\"lb = pound\",\"info\":{\"headings\":[\"6. United States units\",\"6.4. Avoirdupois weight\"],\"comment\":\"The one normally used\\nFrom the latin libra\"}},{\"line\":\"grain = 1|7000 pound\",\"info\":{\"headings\":[\"6. United States units\",\"6.4. Avoirdupois weight\"],\"comment\":\"The grain is the same in all three\\nweight systems.  It was originally\\ndefined as the weight of a barley\\ncorn taken from the middle of the\\near.\"}},{\"line\":\"ounce = 1|16 pound\",\"info\":{\"headings\":[\"6. United States units\",\"6.4. Avoirdupois weight\"],\"comment\":\"\"}},{\"line\":\"oz = ounce\",\"info\":{\"headings\":[\"6. United States units\",\"6.4. Avoirdupois weight\"],\"comment\":\"\"}},{\"line\":\"dram = 1|16 ounce\",\"info\":{\"headings\":[\"6. United States units\",\"6.4. Avoirdupois weight\"],\"comment\":\"\"}},{\"line\":\"dr = dram\",\"info\":{\"headings\":[\"6. United States units\",\"6.4. Avoirdupois weight\"],\"comment\":\"\"}},{\"line\":\"ushundredweight = 100 pounds\",\"info\":{\"headings\":[\"6. United States units\",\"6.4. Avoirdupois weight\"],\"comment\":\"\"}},{\"line\":\"cwt = hundredweight\",\"info\":{\"headings\":[\"6. United States units\",\"6.4. Avoirdupois weight\"],\"comment\":\"\"}},{\"line\":\"shorthundredweight = ushundredweight\",\"info\":{\"headings\":[\"6. United States units\",\"6.4. Avoirdupois weight\"],\"comment\":\"\"}},{\"line\":\"uston = shortton\",\"info\":{\"headings\":[\"6. United States units\",\"6.4. Avoirdupois weight\"],\"comment\":\"\"}},{\"line\":\"shortton = 2000 lb\",\"info\":{\"headings\":[\"6. United States units\",\"6.4. Avoirdupois weight\"],\"comment\":\"\"}},{\"line\":\"quarterweight = 1|4 uston\",\"info\":{\"headings\":[\"6. United States units\",\"6.4. Avoirdupois weight\"],\"comment\":\"\"}},{\"line\":\"shortquarterweight = 1|4 shortton\",\"info\":{\"headings\":[\"6. United States units\",\"6.4. Avoirdupois weight\"],\"comment\":\"\"}},{\"line\":\"shortquarter = shortquarterweight\",\"info\":{\"headings\":[\"6. United States units\",\"6.4. Avoirdupois weight\"],\"comment\":\"\"}},{\"line\":\"troypound = 5760 grain\",\"info\":{\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\"],\"comment\":\"\"}},{\"line\":\"troyounce = 1|12 troypound\",\"info\":{\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\"],\"comment\":\"\"}},{\"line\":\"ozt = troyounce\",\"info\":{\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\"],\"comment\":\"\"}},{\"line\":\"pennyweight = 1|20 troyounce\",\"info\":{\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\"],\"comment\":\"Abbreviated \\\"d\\\" in reference to a\\nFrankish coin called the \\\"denier\\\"\\nminted in the late 700's.  There\\nwere 240 deniers to the pound.\"}},{\"line\":\"dwt = pennyweight\",\"info\":{\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\"],\"comment\":\"Abbreviated \\\"d\\\" in reference to a\\nFrankish coin called the \\\"denier\\\"\\nminted in the late 700's.  There\\nwere 240 deniers to the pound.\"}},{\"line\":\"assayton = mg ton / troyounce\",\"info\":{\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\"],\"comment\":\"mg / assayton = troyounce / ton\"}},{\"line\":\"usassayton = mg uston / troyounce\",\"info\":{\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\"],\"comment\":\"\"}},{\"line\":\"brassayton = mg brton / troyounce\",\"info\":{\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\"],\"comment\":\"\"}},{\"line\":\"fineounce = troyounce\",\"info\":{\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\"],\"comment\":\"A troy ounce of 99.5% pure gold\"}},{\"line\":\"metriccarat = 0.2 gram\",\"info\":{\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\",\"6.5.1. Some other jewelers units\"],\"comment\":\"Defined in 1907\"}},{\"line\":\"metricgrain = 50 mg\",\"info\":{\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\",\"6.5.1. Some other jewelers units\"],\"comment\":\"\"}},{\"line\":\"carat = metriccarat\",\"info\":{\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\",\"6.5.1. Some other jewelers units\"],\"comment\":\"\"}},{\"line\":\"ct = carat\",\"info\":{\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\",\"6.5.1. Some other jewelers units\"],\"comment\":\"\"}},{\"line\":\"jewelerspoint = 1|100 carat\",\"info\":{\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\",\"6.5.1. Some other jewelers units\"],\"comment\":\"\"}},{\"line\":\"silversmithpoint = 1|4000 inch\",\"info\":{\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\",\"6.5.1. Some other jewelers units\"],\"comment\":\"\"}},{\"line\":\"momme = 3.75 grams\",\"info\":{\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\",\"6.5.1. Some other jewelers units\"],\"comment\":\"Traditional Japanese unit based\\non the chinese mace.  It is used for\\npearls in modern times and also for\\nsilk density.  The definition here\\nwas adopted in 1891.\"}},{\"line\":\"appound = troypound\",\"info\":{\"headings\":[\"6. United States units\",\"6.6. Apothecaries' weight\"],\"comment\":\"\"}},{\"line\":\"apounce = troyounce\",\"info\":{\"headings\":[\"6. United States units\",\"6.6. Apothecaries' weight\"],\"comment\":\"\"}},{\"line\":\"apdram = 1|8 apounce\",\"info\":{\"headings\":[\"6. United States units\",\"6.6. Apothecaries' weight\"],\"comment\":\"\"}},{\"line\":\"apscruple = 1|3 apdram\",\"info\":{\"headings\":[\"6. United States units\",\"6.6. Apothecaries' weight\"],\"comment\":\"\"}},{\"line\":\"usgallon = 231 in^3\",\"info\":{\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"gal = gallon\",\"info\":{\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"quart = 1|4 gallon\",\"info\":{\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"pint = 1|2 quart\",\"info\":{\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"gill = 1|4 pint\",\"info\":{\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"usquart = 1|4 usgallon\",\"info\":{\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"uspint = 1|2 usquart\",\"info\":{\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"usgill = 1|4 uspint\",\"info\":{\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"usfluidounce = 1|16 uspint\",\"info\":{\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"fluiddram = 1|8 usfloz\",\"info\":{\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"minimvolume = 1|60 fluiddram\",\"info\":{\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"qt = quart\",\"info\":{\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"pt = pint\",\"info\":{\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"floz = fluidounce\",\"info\":{\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"usfloz = usfluidounce\",\"info\":{\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"fldr = fluiddram\",\"info\":{\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"liquidbarrel = 31.5 usgallon\",\"info\":{\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"usbeerbarrel = 2 beerkegs\",\"info\":{\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"beerkeg = 15.5 usgallon\",\"info\":{\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"Various among brewers\"}},{\"line\":\"ponykeg = 1|2 beerkeg\",\"info\":{\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"\"}},{\"line\":\"winekeg = 12 usgallon\",\"info\":{\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"\"}},{\"line\":\"petroleumbarrel = 42 usgallon\",\"info\":{\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"Originated in Pennsylvania oil\\nfields, from the winetierce\"}},{\"line\":\"barrel = petroleumbarrel\",\"info\":{\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"Originated in Pennsylvania oil\\nfields, from the winetierce\"}},{\"line\":\"bbl = barrel\",\"info\":{\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"Originated in Pennsylvania oil\\nfields, from the winetierce\"}},{\"line\":\"ushogshead = 2 liquidbarrel\",\"info\":{\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"\"}},{\"line\":\"usfirkin = 9 usgallon\",\"info\":{\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"\"}},{\"line\":\"usbushel = 2150.42 in^3\",\"info\":{\"headings\":[\"6. United States units\",\"6.8. Dry measures: The Winchester Bushel was defined by William III in 1702 and\\nlegally adopted in the US in 1836.\"],\"comment\":\"Volume of 8 inch cylinder with 18.5\\ninch diameter (rounded)\"}},{\"line\":\"bu = bushel\",\"info\":{\"headings\":[\"6. United States units\",\"6.8. Dry measures: The Winchester Bushel was defined by William III in 1702 and\\nlegally adopted in the US in 1836.\"],\"comment\":\"Volume of 8 inch cylinder with 18.5\\ninch diameter (rounded)\"}},{\"line\":\"peck = 1|4 bushel\",\"info\":{\"headings\":[\"6. United States units\",\"6.8. Dry measures: The Winchester Bushel was defined by William III in 1702 and\\nlegally adopted in the US in 1836.\"],\"comment\":\"\"}},{\"line\":\"uspeck = 1|4 usbushel\",\"info\":{\"headings\":[\"6. United States units\",\"6.8. Dry measures: The Winchester Bushel was defined by William III in 1702 and\\nlegally adopted in the US in 1836.\"],\"comment\":\"\"}},{\"line\":\"brpeck = 1|4 brbushel\",\"info\":{\"headings\":[\"6. United States units\",\"6.8. Dry measures: The Winchester Bushel was defined by William III in 1702 and\\nlegally adopted in the US in 1836.\"],\"comment\":\"\"}},{\"line\":\"pk = peck\",\"info\":{\"headings\":[\"6. United States units\",\"6.8. Dry measures: The Winchester Bushel was defined by William III in 1702 and\\nlegally adopted in the US in 1836.\"],\"comment\":\"\"}},{\"line\":\"drygallon = 1|2 uspeck\",\"info\":{\"headings\":[\"6. United States units\",\"6.8. Dry measures: The Winchester Bushel was defined by William III in 1702 and\\nlegally adopted in the US in 1836.\"],\"comment\":\"\"}},{\"line\":\"dryquart = 1|4 drygallon\",\"info\":{\"headings\":[\"6. United States units\",\"6.8. Dry measures: The Winchester Bushel was defined by William III in 1702 and\\nlegally adopted in the US in 1836.\"],\"comment\":\"\"}},{\"line\":\"drypint = 1|2 dryquart\",\"info\":{\"headings\":[\"6. United States units\",\"6.8. Dry measures: The Winchester Bushel was defined by William III in 1702 and\\nlegally adopted in the US in 1836.\"],\"comment\":\"\"}},{\"line\":\"drybarrel = 7056 in^3\",\"info\":{\"headings\":[\"6. United States units\",\"6.8. Dry measures: The Winchester Bushel was defined by William III in 1702 and\\nlegally adopted in the US in 1836.\"],\"comment\":\"Used in US for fruits, vegetables,\\nand other dry commodities except for\\ncranberries.\"}},{\"line\":\"cranberrybarrel = 5826 in^3\",\"info\":{\"headings\":[\"6. United States units\",\"6.8. Dry measures: The Winchester Bushel was defined by William III in 1702 and\\nlegally adopted in the US in 1836.\"],\"comment\":\"US cranberry barrel\"}},{\"line\":\"heapedbushel = 1.278 usbushel\",\"info\":{\"headings\":[\"6. United States units\",\"6.8. Dry measures: The Winchester Bushel was defined by William III in 1702 and\\nlegally adopted in the US in 1836.\"],\"comment\":\"The following explanation for this\\nvalue was provided by Wendy Krieger\\n<os2fan2@yahoo.com> based on\\nguesswork.  The cylindrical vessel is\\n18.5 inches in diameter and 1|2 inch\\nthick.  A heaped bushel includes the\\ncontents of this cylinder plus a heap\\non top.  The heap is a cone 19.5\\ninches in diameter and 6 inches\\nhigh.  With these values, the volume\\nof the bushel is 684.5 pi in^3 and\\nthe heap occupies 190.125 pi in^3.\\nTherefore, the heaped bushel is\\n874.625|684.5 bushels.  This value is\\napproximately 1.2777575 and it rounds\\nto the value listed for the size of\\nthe heaped bushel.  Sometimes the\\nheaped bushel is reported as 1.25\\nbushels.  This same explanation gives\\nthat value if the heap is taken to\\nhave an 18.5 inch diameter.\"}},{\"line\":\"wheatbushel = 60 lb\",\"info\":{\"headings\":[\"6. United States units\",\"6.9. Grain measures. The bushel as it is used by farmers in the USA is actually\\na measure of mass which varies for different commodities. Canada uses the\\nsame bushel masses for most commodities, but not for oats.\"],\"comment\":\"\"}},{\"line\":\"soybeanbushel = 60 lb\",\"info\":{\"headings\":[\"6. United States units\",\"6.9. Grain measures. The bushel as it is used by farmers in the USA is actually\\na measure of mass which varies for different commodities. Canada uses the\\nsame bushel masses for most commodities, but not for oats.\"],\"comment\":\"\"}},{\"line\":\"cornbushel = 56 lb\",\"info\":{\"headings\":[\"6. United States units\",\"6.9. Grain measures. The bushel as it is used by farmers in the USA is actually\\na measure of mass which varies for different commodities. Canada uses the\\nsame bushel masses for most commodities, but not for oats.\"],\"comment\":\"\"}},{\"line\":\"ryebushel = 56 lb\",\"info\":{\"headings\":[\"6. United States units\",\"6.9. Grain measures. The bushel as it is used by farmers in the USA is actually\\na measure of mass which varies for different commodities. Canada uses the\\nsame bushel masses for most commodities, but not for oats.\"],\"comment\":\"\"}},{\"line\":\"barleybushel = 48 lb\",\"info\":{\"headings\":[\"6. United States units\",\"6.9. Grain measures. The bushel as it is used by farmers in the USA is actually\\na measure of mass which varies for different commodities. Canada uses the\\nsame bushel masses for most commodities, but not for oats.\"],\"comment\":\"\"}},{\"line\":\"oatbushel = 32 lb\",\"info\":{\"headings\":[\"6. United States units\",\"6.9. Grain measures. The bushel as it is used by farmers in the USA is actually\\na measure of mass which varies for different commodities. Canada uses the\\nsame bushel masses for most commodities, but not for oats.\"],\"comment\":\"\"}},{\"line\":\"ricebushel = 45 lb\",\"info\":{\"headings\":[\"6. United States units\",\"6.9. Grain measures. The bushel as it is used by farmers in the USA is actually\\na measure of mass which varies for different commodities. Canada uses the\\nsame bushel masses for most commodities, but not for oats.\"],\"comment\":\"\"}},{\"line\":\"canada_oatbushel = 34 lb\",\"info\":{\"headings\":[\"6. United States units\",\"6.9. Grain measures. The bushel as it is used by farmers in the USA is actually\\na measure of mass which varies for different commodities. Canada uses the\\nsame bushel masses for most commodities, but not for oats.\"],\"comment\":\"\"}},{\"line\":\"ponyvolume = 1 usfloz\",\"info\":{\"headings\":[\"6. United States units\",\"6.10. Wine and Spirits measure\"],\"comment\":\"\"}},{\"line\":\"jigger = 1.5 usfloz\",\"info\":{\"headings\":[\"6. United States units\",\"6.10. Wine and Spirits measure\"],\"comment\":\"Can vary between 1 and 2 usfloz\\nSometimes 1 usfloz\"}},{\"line\":\"shot = jigger\",\"info\":{\"headings\":[\"6. United States units\",\"6.10. Wine and Spirits measure\"],\"comment\":\"Can vary between 1 and 2 usfloz\\nSometimes 1 usfloz\"}},{\"line\":\"eushot = 25 ml\",\"info\":{\"headings\":[\"6. United States units\",\"6.10. Wine and Spirits measure\"],\"comment\":\"EU standard spirits measure\"}},{\"line\":\"fifth = 1|5 usgallon\",\"info\":{\"headings\":[\"6. United States units\",\"6.10. Wine and Spirits measure\"],\"comment\":\"\"}},{\"line\":\"winebottle = 750 ml\",\"info\":{\"headings\":[\"6. United States units\",\"6.10. Wine and Spirits measure\"],\"comment\":\"US industry standard, 1979\"}},{\"line\":\"winesplit = 1|4 winebottle\",\"info\":{\"headings\":[\"6. United States units\",\"6.10. Wine and Spirits measure\"],\"comment\":\"\"}},{\"line\":\"wineglass = 4 usfloz\",\"info\":{\"headings\":[\"6. United States units\",\"6.10. Wine and Spirits measure\"],\"comment\":\"\"}},{\"line\":\"magnum = 1.5 liter\",\"info\":{\"headings\":[\"6. United States units\",\"6.10. Wine and Spirits measure\"],\"comment\":\"Standardized in 1979, but given\\nas 2 qt in some references\"}},{\"line\":\"metrictenth = 375 ml\",\"info\":{\"headings\":[\"6. United States units\",\"6.10. Wine and Spirits measure\"],\"comment\":\"\"}},{\"line\":\"metricfifth = 750 ml\",\"info\":{\"headings\":[\"6. United States units\",\"6.10. Wine and Spirits measure\"],\"comment\":\"\"}},{\"line\":\"metricquart = 1 liter\",\"info\":{\"headings\":[\"6. United States units\",\"6.10. Wine and Spirits measure\"],\"comment\":\"\"}},{\"line\":\"reputedquart = 1|6 brgallon\",\"info\":{\"headings\":[\"6. United States units\",\"6.11. Old British bottle size\"],\"comment\":\"\"}},{\"line\":\"reputedpint = 1|2 reputedquart\",\"info\":{\"headings\":[\"6. United States units\",\"6.11. Old British bottle size\"],\"comment\":\"\"}},{\"line\":\"brwinebottle = reputedquart\",\"info\":{\"headings\":[\"6. United States units\",\"6.11. Old British bottle size\"],\"comment\":\"Very close to 1|5 winegallon\"}},{\"line\":\"split = 200 ml\",\"info\":{\"headings\":[\"6. United States units\",\"6.12. French champagne bottle sizes\"],\"comment\":\"\"}},{\"line\":\"jeroboam = 2 magnum\",\"info\":{\"headings\":[\"6. United States units\",\"6.12. French champagne bottle sizes\"],\"comment\":\"\"}},{\"line\":\"rehoboam = 3 magnum\",\"info\":{\"headings\":[\"6. United States units\",\"6.12. French champagne bottle sizes\"],\"comment\":\"\"}},{\"line\":\"methuselah = 4 magnum\",\"info\":{\"headings\":[\"6. United States units\",\"6.12. French champagne bottle sizes\"],\"comment\":\"\"}},{\"line\":\"salmanazar = 6 magnum\",\"info\":{\"headings\":[\"6. United States units\",\"6.12. French champagne bottle sizes\"],\"comment\":\"\"}},{\"line\":\"balthazar = 8 magnum\",\"info\":{\"headings\":[\"6. United States units\",\"6.12. French champagne bottle sizes\"],\"comment\":\"\"}},{\"line\":\"nebuchadnezzar = 10 magnum\",\"info\":{\"headings\":[\"6. United States units\",\"6.12. French champagne bottle sizes\"],\"comment\":\"\"}},{\"line\":\"clarkdegree = grains/brgallon\",\"info\":{\"headings\":[\"6. United States units\",\"6.13. Water is \\\"hard\\\" if it contains various minerals, expecially calcium\\ncarbonate.\"],\"comment\":\"Content by weigh of calcium carbonate\"}},{\"line\":\"gpg = grains/usgallon\",\"info\":{\"headings\":[\"6. United States units\",\"6.13. Water is \\\"hard\\\" if it contains various minerals, expecially calcium\\ncarbonate.\"],\"comment\":\"Divide by water's density to convert to\\na dimensionless concentration measure\"}},{\"line\":\"shoeiron = 1|48 inch\",\"info\":{\"headings\":[\"6. United States units\",\"6.14. Shoe measures\"],\"comment\":\"Used to measure leather in soles\"}},{\"line\":\"shoeounce = 1|64 inch\",\"info\":{\"headings\":[\"6. United States units\",\"6.14. Shoe measures\"],\"comment\":\"Used to measure non-sole shoe leather\"}},{\"line\":\"shoesize_delta = 1|3 inch\",\"info\":{\"headings\":[\"6. United States units\",\"6.14. Shoe measures\",\"6.14.1. USA shoe sizes. These express the length of the shoe or the length\\nof the \\\"last\\\", the form that the shoe is made on. But note that\\nthis only captures the length. It appears that widths change 1/4\\ninch for each letter within the same size, and if you change the\\nlength by half a size then the width changes between 1/8 inch and\\n1/4 inch. But this may not be standard. If you know better, please\\ncontact me.\"],\"comment\":\"USA shoe sizes differ by this amount\"}},{\"line\":\"shoe_men0 = 8.25 inch\",\"info\":{\"headings\":[\"6. United States units\",\"6.14. Shoe measures\",\"6.14.1. USA shoe sizes. These express the length of the shoe or the length\\nof the \\\"last\\\", the form that the shoe is made on. But note that\\nthis only captures the length. It appears that widths change 1/4\\ninch for each letter within the same size, and if you change the\\nlength by half a size then the width changes between 1/8 inch and\\n1/4 inch. But this may not be standard. If you know better, please\\ncontact me.\"],\"comment\":\"\"}},{\"line\":\"shoe_women0 = (7+11|12) inch\",\"info\":{\"headings\":[\"6. United States units\",\"6.14. Shoe measures\",\"6.14.1. USA shoe sizes. These express the length of the shoe or the length\\nof the \\\"last\\\", the form that the shoe is made on. But note that\\nthis only captures the length. It appears that widths change 1/4\\ninch for each letter within the same size, and if you change the\\nlength by half a size then the width changes between 1/8 inch and\\n1/4 inch. But this may not be standard. If you know better, please\\ncontact me.\"],\"comment\":\"\"}},{\"line\":\"shoe_boys0 = (3+11|12) inch\",\"info\":{\"headings\":[\"6. United States units\",\"6.14. Shoe measures\",\"6.14.1. USA shoe sizes. These express the length of the shoe or the length\\nof the \\\"last\\\", the form that the shoe is made on. But note that\\nthis only captures the length. It appears that widths change 1/4\\ninch for each letter within the same size, and if you change the\\nlength by half a size then the width changes between 1/8 inch and\\n1/4 inch. But this may not be standard. If you know better, please\\ncontact me.\"],\"comment\":\"\"}},{\"line\":\"shoe_girls0 = (3+7|12) inch\",\"info\":{\"headings\":[\"6. United States units\",\"6.14. Shoe measures\",\"6.14.1. USA shoe sizes. These express the length of the shoe or the length\\nof the \\\"last\\\", the form that the shoe is made on. But note that\\nthis only captures the length. It appears that widths change 1/4\\ninch for each letter within the same size, and if you change the\\nlength by half a size then the width changes between 1/8 inch and\\n1/4 inch. But this may not be standard. If you know better, please\\ncontact me.\"],\"comment\":\"\"}},{\"line\":\"shoesize_men = n => shoe_men0 + n shoesize_delta \",\"info\":{\"headings\":[\"6. United States units\",\"6.14. Shoe measures\",\"6.14.1. USA shoe sizes. These express the length of the shoe or the length\\nof the \\\"last\\\", the form that the shoe is made on. But note that\\nthis only captures the length. It appears that widths change 1/4\\ninch for each letter within the same size, and if you change the\\nlength by half a size then the width changes between 1/8 inch and\\n1/4 inch. But this may not be standard. If you know better, please\\ncontact me.\"],\"comment\":\"\"}},{\"line\":\"shoesize_men^-1 = shoesize_men => (shoesize_men+(-shoe_men0))/shoesize_delta\",\"info\":{\"headings\":[\"6. United States units\",\"6.14. Shoe measures\",\"6.14.1. USA shoe sizes. These express the length of the shoe or the length\\nof the \\\"last\\\", the form that the shoe is made on. But note that\\nthis only captures the length. It appears that widths change 1/4\\ninch for each letter within the same size, and if you change the\\nlength by half a size then the width changes between 1/8 inch and\\n1/4 inch. But this may not be standard. If you know better, please\\ncontact me.\"],\"comment\":\"\"}},{\"line\":\"shoesize_women = n => shoe_women0 + n shoesize_delta \",\"info\":{\"headings\":[\"6. United States units\",\"6.14. Shoe measures\",\"6.14.1. USA shoe sizes. These express the length of the shoe or the length\\nof the \\\"last\\\", the form that the shoe is made on. But note that\\nthis only captures the length. It appears that widths change 1/4\\ninch for each letter within the same size, and if you change the\\nlength by half a size then the width changes between 1/8 inch and\\n1/4 inch. But this may not be standard. If you know better, please\\ncontact me.\"],\"comment\":\"\"}},{\"line\":\"shoesize_women^-1 = shoesize_women => (shoesize_women+(-shoe_women0))/shoesize_delta\",\"info\":{\"headings\":[\"6. United States units\",\"6.14. Shoe measures\",\"6.14.1. USA shoe sizes. These express the length of the shoe or the length\\nof the \\\"last\\\", the form that the shoe is made on. But note that\\nthis only captures the length. It appears that widths change 1/4\\ninch for each letter within the same size, and if you change the\\nlength by half a size then the width changes between 1/8 inch and\\n1/4 inch. But this may not be standard. If you know better, please\\ncontact me.\"],\"comment\":\"\"}},{\"line\":\"shoesize_boys = n => shoe_boys0 + n shoesize_delta \",\"info\":{\"headings\":[\"6. United States units\",\"6.14. Shoe measures\",\"6.14.1. USA shoe sizes. These express the length of the shoe or the length\\nof the \\\"last\\\", the form that the shoe is made on. But note that\\nthis only captures the length. It appears that widths change 1/4\\ninch for each letter within the same size, and if you change the\\nlength by half a size then the width changes between 1/8 inch and\\n1/4 inch. But this may not be standard. If you know better, please\\ncontact me.\"],\"comment\":\"\"}},{\"line\":\"shoesize_boys^-1 = shoesize_boys => (shoesize_boys+(-shoe_boys0))/shoesize_delta\",\"info\":{\"headings\":[\"6. United States units\",\"6.14. Shoe measures\",\"6.14.1. USA shoe sizes. These express the length of the shoe or the length\\nof the \\\"last\\\", the form that the shoe is made on. But note that\\nthis only captures the length. It appears that widths change 1/4\\ninch for each letter within the same size, and if you change the\\nlength by half a size then the width changes between 1/8 inch and\\n1/4 inch. But this may not be standard. If you know better, please\\ncontact me.\"],\"comment\":\"\"}},{\"line\":\"shoesize_girls = n => shoe_girls0 + n shoesize_delta \",\"info\":{\"headings\":[\"6. United States units\",\"6.14. Shoe measures\",\"6.14.1. USA shoe sizes. These express the length of the shoe or the length\\nof the \\\"last\\\", the form that the shoe is made on. But note that\\nthis only captures the length. It appears that widths change 1/4\\ninch for each letter within the same size, and if you change the\\nlength by half a size then the width changes between 1/8 inch and\\n1/4 inch. But this may not be standard. If you know better, please\\ncontact me.\"],\"comment\":\"\"}},{\"line\":\"shoesize_girls^-1 = shoesize_girls => (shoesize_girls+(-shoe_girls0))/shoesize_delta\",\"info\":{\"headings\":[\"6. United States units\",\"6.14. Shoe measures\",\"6.14.1. USA shoe sizes. These express the length of the shoe or the length\\nof the \\\"last\\\", the form that the shoe is made on. But note that\\nthis only captures the length. It appears that widths change 1/4\\ninch for each letter within the same size, and if you change the\\nlength by half a size then the width changes between 1/8 inch and\\n1/4 inch. But this may not be standard. If you know better, please\\ncontact me.\"],\"comment\":\"\"}},{\"line\":\"europeshoesize = 2|3 cm\",\"info\":{\"headings\":[\"6. United States units\",\"6.14. Shoe measures\",\"6.14.2. European shoe size. According to\\nhttp://www.shoeline.com/footnotes/shoeterm.shtml\\nshoe sizes in Europe are measured with Paris points which simply measure\\nthe length of the shoe.\"],\"comment\":\"\"}},{\"line\":\"buck = US$\",\"info\":{\"headings\":[\"6. United States units\",\"6.15. USA slang units\"],\"comment\":\"\"}},{\"line\":\"fin = 5 US$\",\"info\":{\"headings\":[\"6. United States units\",\"6.15. USA slang units\"],\"comment\":\"\"}},{\"line\":\"sawbuck = 10 US$\",\"info\":{\"headings\":[\"6. United States units\",\"6.15. USA slang units\"],\"comment\":\"\"}},{\"line\":\"usgrand = 1000 US$\",\"info\":{\"headings\":[\"6. United States units\",\"6.15. USA slang units\"],\"comment\":\"\"}},{\"line\":\"greenback = US$\",\"info\":{\"headings\":[\"6. United States units\",\"6.15. USA slang units\"],\"comment\":\"\"}},{\"line\":\"key = kg\",\"info\":{\"headings\":[\"6. United States units\",\"6.15. USA slang units\"],\"comment\":\"usually of marijuana, 60's\"}},{\"line\":\"lid = 1 oz\",\"info\":{\"headings\":[\"6. United States units\",\"6.15. USA slang units\"],\"comment\":\"Another 60's weed unit\"}},{\"line\":\"footballfield = usfootballfield\",\"info\":{\"headings\":[\"6. United States units\",\"6.15. USA slang units\"],\"comment\":\"\"}},{\"line\":\"usfootballfield = 100 yards\",\"info\":{\"headings\":[\"6. United States units\",\"6.15. USA slang units\"],\"comment\":\"\"}},{\"line\":\"canadafootballfield = 110 yards\",\"info\":{\"headings\":[\"6. United States units\",\"6.15. USA slang units\"],\"comment\":\"And 65 yards wide\"}},{\"line\":\"marathon = 26 miles + 385 yards\",\"info\":{\"headings\":[\"6. United States units\",\"6.15. USA slang units\"],\"comment\":\"\"}},{\"line\":\"UK = UKlength_SJJ\",\"info\":{\"headings\":[\"7. British\",\"7.1. The length measure in the UK was defined by a bronze bar manufactured in\\n1844. Various conversions were sanctioned for convenience at different\\ntimes, which makes conversions before 1963 a confusing matter. Apparently\\nprevious conversions were never explicitly revoked. Four different\\nconversion factors appear below. Multiply them times an imperial length\\nunits as desired. The Weights and Measures Act of 1963 switched the UK away\\nfrom their bronze standard and onto a definition of the yard in terms of the\\nmeter. This happened after an international agreement in 1959 to align the\\nworld's measurement systems.\"],\"comment\":\"\"}},{\"line\":\"UK_ = UK\",\"info\":{\"headings\":[\"7. British\",\"7.1. The length measure in the UK was defined by a bronze bar manufactured in\\n1844. Various conversions were sanctioned for convenience at different\\ntimes, which makes conversions before 1963 a confusing matter. Apparently\\nprevious conversions were never explicitly revoked. Four different\\nconversion factors appear below. Multiply them times an imperial length\\nunits as desired. The Weights and Measures Act of 1963 switched the UK away\\nfrom their bronze standard and onto a definition of the yard in terms of the\\nmeter. This happened after an international agreement in 1959 to align the\\nworld's measurement systems.\"],\"comment\":\"\"}},{\"line\":\"british_ = UK\",\"info\":{\"headings\":[\"7. British\",\"7.1. The length measure in the UK was defined by a bronze bar manufactured in\\n1844. Various conversions were sanctioned for convenience at different\\ntimes, which makes conversions before 1963 a confusing matter. Apparently\\nprevious conversions were never explicitly revoked. Four different\\nconversion factors appear below. Multiply them times an imperial length\\nunits as desired. The Weights and Measures Act of 1963 switched the UK away\\nfrom their bronze standard and onto a definition of the yard in terms of the\\nmeter. This happened after an international agreement in 1959 to align the\\nworld's measurement systems.\"],\"comment\":\"\"}},{\"line\":\"UKlength_B = 0.9143992 meter / yard\",\"info\":{\"headings\":[\"7. British\",\"7.1. The length measure in the UK was defined by a bronze bar manufactured in\\n1844. Various conversions were sanctioned for convenience at different\\ntimes, which makes conversions before 1963 a confusing matter. Apparently\\nprevious conversions were never explicitly revoked. Four different\\nconversion factors appear below. Multiply them times an imperial length\\nunits as desired. The Weights and Measures Act of 1963 switched the UK away\\nfrom their bronze standard and onto a definition of the yard in terms of the\\nmeter. This happened after an international agreement in 1959 to align the\\nworld's measurement systems.\"],\"comment\":\"Benoit found the yard to be\\n0.9143992 m at a weights and\\nmeasures conference around\\n1896.   Legally sanctioned\\nin 1898.\"}},{\"line\":\"UKlength_SJJ = 0.91439841 meter / yard\",\"info\":{\"headings\":[\"7. British\",\"7.1. The length measure in the UK was defined by a bronze bar manufactured in\\n1844. Various conversions were sanctioned for convenience at different\\ntimes, which makes conversions before 1963 a confusing matter. Apparently\\nprevious conversions were never explicitly revoked. Four different\\nconversion factors appear below. Multiply them times an imperial length\\nunits as desired. The Weights and Measures Act of 1963 switched the UK away\\nfrom their bronze standard and onto a definition of the yard in terms of the\\nmeter. This happened after an international agreement in 1959 to align the\\nworld's measurement systems.\"],\"comment\":\"In 1922, Seers, Jolly and\\nJohnson found the yard to be\\n0.91439841 meters.\\nUsed starting in the 1930's.\"}},{\"line\":\"UKlength_K = meter / 39.37079 inch\",\"info\":{\"headings\":[\"7. British\",\"7.1. The length measure in the UK was defined by a bronze bar manufactured in\\n1844. Various conversions were sanctioned for convenience at different\\ntimes, which makes conversions before 1963 a confusing matter. Apparently\\nprevious conversions were never explicitly revoked. Four different\\nconversion factors appear below. Multiply them times an imperial length\\nunits as desired. The Weights and Measures Act of 1963 switched the UK away\\nfrom their bronze standard and onto a definition of the yard in terms of the\\nmeter. This happened after an international agreement in 1959 to align the\\nworld's measurement systems.\"],\"comment\":\"In 1816 Kater found this ratio\\nfor the meter and inch.  This\\nvalue was used as the legal\\nconversion ratio when the\\nmetric system was legalized\\nfor contract in 1864.\"}},{\"line\":\"UKlength_C = meter / 1.09362311 yard\",\"info\":{\"headings\":[\"7. British\",\"7.1. The length measure in the UK was defined by a bronze bar manufactured in\\n1844. Various conversions were sanctioned for convenience at different\\ntimes, which makes conversions before 1963 a confusing matter. Apparently\\nprevious conversions were never explicitly revoked. Four different\\nconversion factors appear below. Multiply them times an imperial length\\nunits as desired. The Weights and Measures Act of 1963 switched the UK away\\nfrom their bronze standard and onto a definition of the yard in terms of the\\nmeter. This happened after an international agreement in 1959 to align the\\nworld's measurement systems.\"],\"comment\":\"In 1866 Clarke found the meter\\nto be 1.09362311 yards.  This\\nconversion was legalized\\naround 1878.\"}},{\"line\":\"brnauticalmile = 6080 ft\",\"info\":{\"headings\":[\"7. British\",\"7.1. The length measure in the UK was defined by a bronze bar manufactured in\\n1844. Various conversions were sanctioned for convenience at different\\ntimes, which makes conversions before 1963 a confusing matter. Apparently\\nprevious conversions were never explicitly revoked. Four different\\nconversion factors appear below. Multiply them times an imperial length\\nunits as desired. The Weights and Measures Act of 1963 switched the UK away\\nfrom their bronze standard and onto a definition of the yard in terms of the\\nmeter. This happened after an international agreement in 1959 to align the\\nworld's measurement systems.\"],\"comment\":\"Used until 1970 when the UK\"}},{\"line\":\"brknot = brnauticalmile / hr\",\"info\":{\"headings\":[\"7. British\",\"7.1. The length measure in the UK was defined by a bronze bar manufactured in\\n1844. Various conversions were sanctioned for convenience at different\\ntimes, which makes conversions before 1963 a confusing matter. Apparently\\nprevious conversions were never explicitly revoked. Four different\\nconversion factors appear below. Multiply them times an imperial length\\nunits as desired. The Weights and Measures Act of 1963 switched the UK away\\nfrom their bronze standard and onto a definition of the yard in terms of the\\nmeter. This happened after an international agreement in 1959 to align the\\nworld's measurement systems.\"],\"comment\":\"switched to the international\"}},{\"line\":\"brcable = 1|10 brnauticalmile\",\"info\":{\"headings\":[\"7. British\",\"7.1. The length measure in the UK was defined by a bronze bar manufactured in\\n1844. Various conversions were sanctioned for convenience at different\\ntimes, which makes conversions before 1963 a confusing matter. Apparently\\nprevious conversions were never explicitly revoked. Four different\\nconversion factors appear below. Multiply them times an imperial length\\nunits as desired. The Weights and Measures Act of 1963 switched the UK away\\nfrom their bronze standard and onto a definition of the yard in terms of the\\nmeter. This happened after an international agreement in 1959 to align the\\nworld's measurement systems.\"],\"comment\":\"nautical mile.\"}},{\"line\":\"admiraltymile = brnauticalmile\",\"info\":{\"headings\":[\"7. British\",\"7.1. The length measure in the UK was defined by a bronze bar manufactured in\\n1844. Various conversions were sanctioned for convenience at different\\ntimes, which makes conversions before 1963 a confusing matter. Apparently\\nprevious conversions were never explicitly revoked. Four different\\nconversion factors appear below. Multiply them times an imperial length\\nunits as desired. The Weights and Measures Act of 1963 switched the UK away\\nfrom their bronze standard and onto a definition of the yard in terms of the\\nmeter. This happened after an international agreement in 1959 to align the\\nworld's measurement systems.\"],\"comment\":\"\"}},{\"line\":\"admiraltyknot = brknot\",\"info\":{\"headings\":[\"7. British\",\"7.1. The length measure in the UK was defined by a bronze bar manufactured in\\n1844. Various conversions were sanctioned for convenience at different\\ntimes, which makes conversions before 1963 a confusing matter. Apparently\\nprevious conversions were never explicitly revoked. Four different\\nconversion factors appear below. Multiply them times an imperial length\\nunits as desired. The Weights and Measures Act of 1963 switched the UK away\\nfrom their bronze standard and onto a definition of the yard in terms of the\\nmeter. This happened after an international agreement in 1959 to align the\\nworld's measurement systems.\"],\"comment\":\"\"}},{\"line\":\"admiraltycable = brcable\",\"info\":{\"headings\":[\"7. British\",\"7.1. The length measure in the UK was defined by a bronze bar manufactured in\\n1844. Various conversions were sanctioned for convenience at different\\ntimes, which makes conversions before 1963 a confusing matter. Apparently\\nprevious conversions were never explicitly revoked. Four different\\nconversion factors appear below. Multiply them times an imperial length\\nunits as desired. The Weights and Measures Act of 1963 switched the UK away\\nfrom their bronze standard and onto a definition of the yard in terms of the\\nmeter. This happened after an international agreement in 1959 to align the\\nworld's measurement systems.\"],\"comment\":\"\"}},{\"line\":\"seamile = 6000 ft\",\"info\":{\"headings\":[\"7. British\",\"7.1. The length measure in the UK was defined by a bronze bar manufactured in\\n1844. Various conversions were sanctioned for convenience at different\\ntimes, which makes conversions before 1963 a confusing matter. Apparently\\nprevious conversions were never explicitly revoked. Four different\\nconversion factors appear below. Multiply them times an imperial length\\nunits as desired. The Weights and Measures Act of 1963 switched the UK away\\nfrom their bronze standard and onto a definition of the yard in terms of the\\nmeter. This happened after an international agreement in 1959 to align the\\nworld's measurement systems.\"],\"comment\":\"\"}},{\"line\":\"shackle = 15 fathoms\",\"info\":{\"headings\":[\"7. British\",\"7.1. The length measure in the UK was defined by a bronze bar manufactured in\\n1844. Various conversions were sanctioned for convenience at different\\ntimes, which makes conversions before 1963 a confusing matter. Apparently\\nprevious conversions were never explicitly revoked. Four different\\nconversion factors appear below. Multiply them times an imperial length\\nunits as desired. The Weights and Measures Act of 1963 switched the UK away\\nfrom their bronze standard and onto a definition of the yard in terms of the\\nmeter. This happened after an international agreement in 1959 to align the\\nworld's measurement systems.\"],\"comment\":\"Adopted 1949 by British navy\"}},{\"line\":\"clove = 7 lb\",\"info\":{\"headings\":[\"7. British\",\"7.2. British Imperial weight is mostly the same as US weight. A few extra\\nunits are added here.\"],\"comment\":\"\"}},{\"line\":\"stone = 14 lb\",\"info\":{\"headings\":[\"7. British\",\"7.2. British Imperial weight is mostly the same as US weight. A few extra\\nunits are added here.\"],\"comment\":\"\"}},{\"line\":\"tod = 28 lb\",\"info\":{\"headings\":[\"7. British\",\"7.2. British Imperial weight is mostly the same as US weight. A few extra\\nunits are added here.\"],\"comment\":\"\"}},{\"line\":\"brquarterweight = 1|4 brhundredweight\",\"info\":{\"headings\":[\"7. British\",\"7.2. British Imperial weight is mostly the same as US weight. A few extra\\nunits are added here.\"],\"comment\":\"\"}},{\"line\":\"brhundredweight = 8 stone\",\"info\":{\"headings\":[\"7. British\",\"7.2. British Imperial weight is mostly the same as US weight. A few extra\\nunits are added here.\"],\"comment\":\"\"}},{\"line\":\"longhundredweight = brhundredweight\",\"info\":{\"headings\":[\"7. British\",\"7.2. British Imperial weight is mostly the same as US weight. A few extra\\nunits are added here.\"],\"comment\":\"\"}},{\"line\":\"longton = 20 brhundredweight\",\"info\":{\"headings\":[\"7. British\",\"7.2. British Imperial weight is mostly the same as US weight. A few extra\\nunits are added here.\"],\"comment\":\"\"}},{\"line\":\"brton = longton\",\"info\":{\"headings\":[\"7. British\",\"7.2. British Imperial weight is mostly the same as US weight. A few extra\\nunits are added here.\"],\"comment\":\"\"}},{\"line\":\"brminim = 1|60 brdram\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\"],\"comment\":\"\"}},{\"line\":\"brscruple = 1|3 brdram\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\"],\"comment\":\"\"}},{\"line\":\"fluidscruple = brscruple\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\"],\"comment\":\"\"}},{\"line\":\"brdram = 1|8 brfloz\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\"],\"comment\":\"\"}},{\"line\":\"brfluidounce = 1|20 brpint\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\"],\"comment\":\"\"}},{\"line\":\"brfloz = brfluidounce\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\"],\"comment\":\"\"}},{\"line\":\"brgill = 1|4 brpint\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\"],\"comment\":\"\"}},{\"line\":\"brpint = 1|2 brquart\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\"],\"comment\":\"\"}},{\"line\":\"brquart = 1|4 brgallon\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\"],\"comment\":\"\"}},{\"line\":\"brgallon = 4.54609 l\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\"],\"comment\":\"The British Imperial gallon was\\ndefined in 1824 to be the volume of\\nwater which weighed 10 pounds at 62\\ndeg F with a pressure of 30 inHg.\\nIt was also defined as 277.274 in^3,\\nWhich is slightly in error.  In\\n1963 it was defined to be the volume\\noccupied by 10 pounds of distilled\\nwater of density 0.998859 g/ml weighed\\nin air of density 0.001217 g/ml\\nagainst weights of density 8.136 g/ml.\\nThis gives a value of approximately\\n4.5459645 liters, but the old liter\\nwas in force at this time.  In 1976\\nthe definition was changed to exactly\\n4.54609 liters using the new\\ndefinition of the liter (1 dm^3).\"}},{\"line\":\"brbarrel = 36 brgallon\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\"],\"comment\":\"Used for beer\"}},{\"line\":\"brbushel = 8 brgallon\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\"],\"comment\":\"\"}},{\"line\":\"brheapedbushel = 1.278 brbushel\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\"],\"comment\":\"\"}},{\"line\":\"brquarter = 8 brbushel\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\"],\"comment\":\"\"}},{\"line\":\"brchaldron = 36 brbushel\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\"],\"comment\":\"\"}},{\"line\":\"bag = 4 brbushel\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"bucket = 4 brgallon\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"kilderkin = 2 brfirkin\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"last = 40 brbushel\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"noggin = brgill\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"pottle = 0.5 brgallon\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"pin = 4.5 brgallon\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"puncheon = 72 brgallon\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"seam = 8 brbushel\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"coomb = 4 brbushel\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"boll = 6 brbushel\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"firlot = 1|4 boll\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"brfirkin = 9 brgallon\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"Used for ale and beer\"}},{\"line\":\"cran = 37.5 brgallon\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"measures herring, about 750 fish\"}},{\"line\":\"brwinehogshead = 52.5 brgallon\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"This value is approximately equal\\nto the old wine hogshead of 63\\nwine gallons.  This adjustment\\nis listed in the OED and in\\n\\\"The Weights and Measures of\\nEngland\\\" by R. D. Connor\"}},{\"line\":\"brhogshead = brwinehogshead\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"This value is approximately equal\\nto the old wine hogshead of 63\\nwine gallons.  This adjustment\\nis listed in the OED and in\\n\\\"The Weights and Measures of\\nEngland\\\" by R. D. Connor\"}},{\"line\":\"brbeerhogshead = 54 brgallon\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"brbeerbutt = 2 brbeerhogshead\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"registerton = 100 ft^3\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"Used for internal capacity of ships\"}},{\"line\":\"shippington = 40 ft^3\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"Used for ship's cargo freight or timber\"}},{\"line\":\"brshippington = 42 ft^3\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"freightton = shippington\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"Both register ton and shipping ton derive\\nfrom the \\\"tun cask\\\" of wine.\"}},{\"line\":\"displacementton = 35 ft^3\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"Approximate volume of a longton weight of\\nsea water.  Measures water displaced by\\nships.\"}},{\"line\":\"waterton = 224 brgallon\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"strike = 70.5 l\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"16th century unit, sometimes\\ndefined as .5, 2, or 4 bushels\\ndepending on the location.  It\\nprobably doesn't make a lot of\\nsense to define in terms of imperial\\nbushels.  Zupko gives a value of\\n2 Winchester grain bushels or about\\n70.5 liters.\"}},{\"line\":\"amber = 4 brbushel\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"Used for dry and liquid capacity [18]\"}},{\"line\":\"imperialminim = brminim\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialscruple = brscruple\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialdram = brdram\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialfluidounce = brfluidounce\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialfloz = brfloz\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialgill = brgill\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialpint = brpint\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialquart = brquart\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialgallon = brgallon\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialbarrel = brbarrel\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialbushel = brbushel\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialheapedbushel = brheapedbushel\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialquarter = brquarter\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialchaldron = brchaldron\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialwinehogshead = brwinehogshead\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialhogshead = brhogshead\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialbeerhogshead = brbeerhogshead\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialbeerbutt = brbeerbutt\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialfirkin = brfirkin\",\"info\":{\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"barleycorn = 1|3 UKinch\",\"info\":{\"headings\":[\"7. British\",\"7.4. obscure British lengths\"],\"comment\":\"Given in Realm of Measure as the\\ndifference between successive shoe sizes\"}},{\"line\":\"nail = 1|16 UKyard\",\"info\":{\"headings\":[\"7. British\",\"7.4. obscure British lengths\"],\"comment\":\"Originally the width of the thumbnail,\\nor 1|16 ft.  This took on the general\\nmeaning of 1|16 and settled on the\\nnail of a yard or 1|16 yards as its\\nfinal value.  [12]\"}},{\"line\":\"pole = 16.5 UKft\",\"info\":{\"headings\":[\"7. British\",\"7.4. obscure British lengths\"],\"comment\":\"This was 15 Saxon feet, the Saxon\\nfoot (aka northern foot) being longer\"}},{\"line\":\"rope = 20 UKft\",\"info\":{\"headings\":[\"7. British\",\"7.4. obscure British lengths\"],\"comment\":\"This was 15 Saxon feet, the Saxon\\nfoot (aka northern foot) being longer\"}},{\"line\":\"englishell = 45 UKinch\",\"info\":{\"headings\":[\"7. British\",\"7.4. obscure British lengths\"],\"comment\":\"\"}},{\"line\":\"flemishell = 27 UKinch\",\"info\":{\"headings\":[\"7. British\",\"7.4. obscure British lengths\"],\"comment\":\"\"}},{\"line\":\"ell = englishell\",\"info\":{\"headings\":[\"7. British\",\"7.4. obscure British lengths\"],\"comment\":\"supposed to be measure from elbow to\\nfingertips\"}},{\"line\":\"span = 9 UKinch\",\"info\":{\"headings\":[\"7. British\",\"7.4. obscure British lengths\"],\"comment\":\"supposed to be distance from thumb\\nto pinky with full hand extension\"}},{\"line\":\"goad = 4.5 UKft\",\"info\":{\"headings\":[\"7. British\",\"7.4. obscure British lengths\"],\"comment\":\"used for cloth, possibly named after the\\nstick used for prodding animals.\"}},{\"line\":\"hide = 120 acre\",\"info\":{\"headings\":[\"7. British\",\"7.5. misc obscure British units\"],\"comment\":\"English unit of land area dating to the 7th\\ncentury, originally the amount of land\\nthat a single plowman could cultivate,\\nwhich varied from 60-180 acres regionally.\\nStandardized at Normon conquest.\"}},{\"line\":\"virgate = 1|4 hide\",\"info\":{\"headings\":[\"7. British\",\"7.5. misc obscure British units\"],\"comment\":\"\"}},{\"line\":\"nook = 1|2 virgate\",\"info\":{\"headings\":[\"7. British\",\"7.5. misc obscure British units\"],\"comment\":\"\"}},{\"line\":\"rood = furlong rod\",\"info\":{\"headings\":[\"7. British\",\"7.5. misc obscure British units\"],\"comment\":\"Area of a strip a rod by a furlong\"}},{\"line\":\"englishcarat = troyounce/151.5\",\"info\":{\"headings\":[\"7. British\",\"7.5. misc obscure British units\"],\"comment\":\"Originally intended to be 4 grain\\nbut this value ended up being\\nused in the London diamond market\"}},{\"line\":\"mancus = 2 oz\",\"info\":{\"headings\":[\"7. British\",\"7.5. misc obscure British units\"],\"comment\":\"\"}},{\"line\":\"mast = 2.5 lb\",\"info\":{\"headings\":[\"7. British\",\"7.5. misc obscure British units\"],\"comment\":\"\"}},{\"line\":\"nailkeg = 100 lbs\",\"info\":{\"headings\":[\"7. British\",\"7.5. misc obscure British units\"],\"comment\":\"\"}},{\"line\":\"basebox = 31360 in^2\",\"info\":{\"headings\":[\"7. British\",\"7.5. misc obscure British units\"],\"comment\":\"Used in metal plating\"}},{\"line\":\"metre = meter\",\"info\":{\"headings\":[\"7. British\",\"7.6. alternate spellings\"],\"comment\":\"\"}},{\"line\":\"gramme = gram\",\"info\":{\"headings\":[\"7. British\",\"7.6. alternate spellings\"],\"comment\":\"\"}},{\"line\":\"litre = liter\",\"info\":{\"headings\":[\"7. British\",\"7.6. alternate spellings\"],\"comment\":\"\"}},{\"line\":\"dioptre = diopter\",\"info\":{\"headings\":[\"7. British\",\"7.6. alternate spellings\"],\"comment\":\"\"}},{\"line\":\"aluminium = aluminum\",\"info\":{\"headings\":[\"7. British\",\"7.6. alternate spellings\"],\"comment\":\"\"}},{\"line\":\"sulphur = sulfur\",\"info\":{\"headings\":[\"7. British\",\"7.6. alternate spellings\"],\"comment\":\"\"}},{\"line\":\"geometricpace = 5 ft\",\"info\":{\"headings\":[\"8. Units derived the human body (may not be very accurate)\"],\"comment\":\"distance between points where the same\\nfoot hits the ground\"}},{\"line\":\"pace = 2.5 ft\",\"info\":{\"headings\":[\"8. Units derived the human body (may not be very accurate)\"],\"comment\":\"distance between points where alternate\\nfeet touch the ground\"}},{\"line\":\"USmilitarypace = 30 in\",\"info\":{\"headings\":[\"8. Units derived the human body (may not be very accurate)\"],\"comment\":\"United States official military pace\"}},{\"line\":\"USdoubletimepace = 36 in\",\"info\":{\"headings\":[\"8. Units derived the human body (may not be very accurate)\"],\"comment\":\"United States official doubletime pace\"}},{\"line\":\"fingerbreadth = 7|8 in\",\"info\":{\"headings\":[\"8. Units derived the human body (may not be very accurate)\"],\"comment\":\"The finger is defined as either the width\\nor length of the finger\"}},{\"line\":\"fingerlength = 4.5 in\",\"info\":{\"headings\":[\"8. Units derived the human body (may not be very accurate)\"],\"comment\":\"The finger is defined as either the width\\nor length of the finger\"}},{\"line\":\"finger = fingerbreadth\",\"info\":{\"headings\":[\"8. Units derived the human body (may not be very accurate)\"],\"comment\":\"The finger is defined as either the width\\nor length of the finger\"}},{\"line\":\"palmwidth = hand\",\"info\":{\"headings\":[\"8. Units derived the human body (may not be very accurate)\"],\"comment\":\"The palm is a unit defined as either the width\\nor the length of the hand\"}},{\"line\":\"palmlength = 8 in\",\"info\":{\"headings\":[\"8. Units derived the human body (may not be very accurate)\"],\"comment\":\"The palm is a unit defined as either the width\\nor the length of the hand\"}},{\"line\":\"hand = 4 inch\",\"info\":{\"headings\":[\"8. Units derived the human body (may not be very accurate)\"],\"comment\":\"width of hand\"}},{\"line\":\"shaftment = 6 inch\",\"info\":{\"headings\":[\"8. Units derived the human body (may not be very accurate)\"],\"comment\":\"Distance from tip of outstretched thumb to the\\nopposite side of the palm of the hand.  The\\nending -ment is from the old English word\\nfor hand. [18]\"}},{\"line\":\"smoot = 5 ft + 7 in\",\"info\":{\"headings\":[\"8. Units derived the human body (may not be very accurate)\"],\"comment\":\"Created as part of an MIT fraternity prank.\\nIn 1958 Oliver Smoot was used to measure\\nthe length of the Harvard Bridge, which was\\nmarked off in smooth lengths.  These\\nmarkings have been maintained on the bridge\\nsince then and repainted by subsequent\\nincoming fraternity members.  During a\\nbridge rennovation the new sidewalk was\\nscored every smooth rather than at the\\ncustomary 6 ft spacing.\"}},{\"line\":\"tbl = tablespoon\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.1. Common abbreviations\"],\"comment\":\"\"}},{\"line\":\"tbsp = tablespoon\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.1. Common abbreviations\"],\"comment\":\"\"}},{\"line\":\"tblsp = tablespoon\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.1. Common abbreviations\"],\"comment\":\"\"}},{\"line\":\"Tb = tablespoon\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.1. Common abbreviations\"],\"comment\":\"\"}},{\"line\":\"tsp = teaspoon\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.1. Common abbreviations\"],\"comment\":\"\"}},{\"line\":\"saltspoon = 1|4 tsp\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.1. Common abbreviations\"],\"comment\":\"\"}},{\"line\":\"uscup = 8 usfloz\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.2. US measures\"],\"comment\":\"\"}},{\"line\":\"ustablespoon = 1|16 uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.2. US measures\"],\"comment\":\"\"}},{\"line\":\"usteaspoon = 1|3 ustablespoon\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.2. US measures\"],\"comment\":\"\"}},{\"line\":\"ustbl = ustablespoon\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.2. US measures\"],\"comment\":\"\"}},{\"line\":\"ustbsp = ustablespoon\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.2. US measures\"],\"comment\":\"\"}},{\"line\":\"ustblsp = ustablespoon\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.2. US measures\"],\"comment\":\"\"}},{\"line\":\"ustsp = usteaspoon\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.2. US measures\"],\"comment\":\"\"}},{\"line\":\"metriccup = 250 ml\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.2. US measures\"],\"comment\":\"\"}},{\"line\":\"stickbutter = 1|4 lb\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.2. US measures\"],\"comment\":\"Butter in the USA is sold in one\\npound packages that contain four\\nindividually wrapped pieces.  The\\npieces are marked into tablespoons,\\nmaking it possible to measure out\\nbutter by volume by slicing the\\nbutter.\"}},{\"line\":\"legalcup = 240 ml\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.2. US measures\"],\"comment\":\"The cup used on nutrition labeling\"}},{\"line\":\"legaltablespoon = 1|16 legalcup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.2. US measures\"],\"comment\":\"\"}},{\"line\":\"legaltbsp = legaltablespoon\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.2. US measures\"],\"comment\":\"\"}},{\"line\":\"scoop = n => 32 usfloz / n \",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.2. US measures\",\"9.2.1. Scoop size. Ice cream scoops in the US are marked with numbers\\nindicating the number of scoops requird to fill a US quart.\"],\"comment\":\"\"}},{\"line\":\"scoop^-1 = scoop => 32 usfloz / scoop\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.2. US measures\",\"9.2.1. Scoop size. Ice cream scoops in the US are marked with numbers\\nindicating the number of scoops requird to fill a US quart.\"],\"comment\":\"\"}},{\"line\":\"number1can = 10 usfloz\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.2. US measures\",\"9.2.2. US can sizes.\"],\"comment\":\"\"}},{\"line\":\"number2can = 19 usfloz\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.2. US measures\",\"9.2.2. US can sizes.\"],\"comment\":\"\"}},{\"line\":\"number2.5can = 3.5 uscups\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.2. US measures\",\"9.2.2. US can sizes.\"],\"comment\":\"\"}},{\"line\":\"number3can = 4 uscups\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.2. US measures\",\"9.2.2. US can sizes.\"],\"comment\":\"\"}},{\"line\":\"number5can = 7 uscups\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.2. US measures\",\"9.2.2. US can sizes.\"],\"comment\":\"\"}},{\"line\":\"number10can = 105 usfloz\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.2. US measures\",\"9.2.2. US can sizes.\"],\"comment\":\"\"}},{\"line\":\"brcup = 1|2 brpint\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.3. British measures\"],\"comment\":\"\"}},{\"line\":\"brteacup = 1|3 brpint\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.3. British measures\"],\"comment\":\"\"}},{\"line\":\"brtablespoon = 15 ml\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.3. British measures\"],\"comment\":\"Also 5|8 brfloz, approx 17.7 ml\"}},{\"line\":\"brteaspoon = 1|3 brtablespoon\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.3. British measures\"],\"comment\":\"Also 1|4 brtablespoon\"}},{\"line\":\"brdessertspoon = 2 brteaspoon\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.3. British measures\"],\"comment\":\"\"}},{\"line\":\"dessertspoon = brdessertspoon\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.3. British measures\"],\"comment\":\"\"}},{\"line\":\"dsp = dessertspoon\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.3. British measures\"],\"comment\":\"\"}},{\"line\":\"brtsp = brteaspoon\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.3. British measures\"],\"comment\":\"\"}},{\"line\":\"brtbl = brtablespoon\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.3. British measures\"],\"comment\":\"\"}},{\"line\":\"brtbsp = brtablespoon\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.3. British measures\"],\"comment\":\"\"}},{\"line\":\"brtblsp = brtablespoon\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.3. British measures\"],\"comment\":\"\"}},{\"line\":\"australiatablespoon = 20 ml\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.4. Australian\"],\"comment\":\"\"}},{\"line\":\"austbl = australiatablespoon\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.4. Australian\"],\"comment\":\"\"}},{\"line\":\"austbsp = australiatablespoon\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.4. Australian\"],\"comment\":\"\"}},{\"line\":\"austblsp = australiatablespoon\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.4. Australian\"],\"comment\":\"\"}},{\"line\":\"australiateaspoon = 1|4 australiatablespoon\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.4. Australian\"],\"comment\":\"\"}},{\"line\":\"austsp = australiateaspoon\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.4. Australian\"],\"comment\":\"\"}},{\"line\":\"etto = 100 g\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.5. Italian\"],\"comment\":\"Used for buying items like meat and\\ncheese.\"}},{\"line\":\"etti = etto\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.5. Italian\"],\"comment\":\"Used for buying items like meat and\\ncheese.\"}},{\"line\":\"catty = 0.5 kg\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.6. Chinese\"],\"comment\":\"\"}},{\"line\":\"oldcatty = 4|3 lbs\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.6. Chinese\"],\"comment\":\"Before metric conversion.\"}},{\"line\":\"tael = 1|16 oldcatty\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.6. Chinese\"],\"comment\":\"Should the tael be defined both ways?\"}},{\"line\":\"mace = 0.1 tael\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.6. Chinese\"],\"comment\":\"\"}},{\"line\":\"oldpicul = 100 oldcatty\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.6. Chinese\"],\"comment\":\"\"}},{\"line\":\"picul = 100 catty\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.6. Chinese\"],\"comment\":\"Chinese usage\"}},{\"line\":\"seer = 14400 grain\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.7. Indian\"],\"comment\":\"British Colonial standard\"}},{\"line\":\"ser = seer\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.7. Indian\"],\"comment\":\"British Colonial standard\"}},{\"line\":\"maund = 40 seer\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.7. Indian\"],\"comment\":\"\"}},{\"line\":\"pakistanseer = 1 kg\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.7. Indian\"],\"comment\":\"\"}},{\"line\":\"pakistanmaund = 40 pakistanseer\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.7. Indian\"],\"comment\":\"\"}},{\"line\":\"chittak = 1|16 seer\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.7. Indian\"],\"comment\":\"\"}},{\"line\":\"tola = 1|5 chittak\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.7. Indian\"],\"comment\":\"\"}},{\"line\":\"ollock = 1|4 liter\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.7. Indian\"],\"comment\":\"Is this right?\"}},{\"line\":\"japancup = 200 ml\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.8. Japanese\"],\"comment\":\"\"}},{\"line\":\"butter = 8 oz/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"butter_clarified = 6.8 oz/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"cocoa_butter = 9 oz/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"shortening = 6.75 oz/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"vegetable shortening\"}},{\"line\":\"oil = 7.5 oz/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"cakeflour_sifted = 3.5 oz/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"The density of flour depends on the\\nmeasuring method.  \\\"Scooped\\\",  or\\n\\\"dip and sweep\\\" refers to dipping a\\nmeasure into a bin, and then sweeping\\nthe excess off the top.  \\\"Spooned\\\"\\nmeans to lightly spoon into a measure\\nand then sweep the top.  Sifted means\\nsifting the flour directly into a\\nmeasure and then sweeping the top.\"}},{\"line\":\"cakeflour_spooned = 4 oz/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"The density of flour depends on the\\nmeasuring method.  \\\"Scooped\\\",  or\\n\\\"dip and sweep\\\" refers to dipping a\\nmeasure into a bin, and then sweeping\\nthe excess off the top.  \\\"Spooned\\\"\\nmeans to lightly spoon into a measure\\nand then sweep the top.  Sifted means\\nsifting the flour directly into a\\nmeasure and then sweeping the top.\"}},{\"line\":\"cakeflour_scooped = 4.5 oz/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"The density of flour depends on the\\nmeasuring method.  \\\"Scooped\\\",  or\\n\\\"dip and sweep\\\" refers to dipping a\\nmeasure into a bin, and then sweeping\\nthe excess off the top.  \\\"Spooned\\\"\\nmeans to lightly spoon into a measure\\nand then sweep the top.  Sifted means\\nsifting the flour directly into a\\nmeasure and then sweeping the top.\"}},{\"line\":\"flour_sifted = 4 oz/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"The density of flour depends on the\\nmeasuring method.  \\\"Scooped\\\",  or\\n\\\"dip and sweep\\\" refers to dipping a\\nmeasure into a bin, and then sweeping\\nthe excess off the top.  \\\"Spooned\\\"\\nmeans to lightly spoon into a measure\\nand then sweep the top.  Sifted means\\nsifting the flour directly into a\\nmeasure and then sweeping the top.\"}},{\"line\":\"flour_spooned = 4.25 oz/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"The density of flour depends on the\\nmeasuring method.  \\\"Scooped\\\",  or\\n\\\"dip and sweep\\\" refers to dipping a\\nmeasure into a bin, and then sweeping\\nthe excess off the top.  \\\"Spooned\\\"\\nmeans to lightly spoon into a measure\\nand then sweep the top.  Sifted means\\nsifting the flour directly into a\\nmeasure and then sweeping the top.\"}},{\"line\":\"flour_scooped = 5 oz/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"The density of flour depends on the\\nmeasuring method.  \\\"Scooped\\\",  or\\n\\\"dip and sweep\\\" refers to dipping a\\nmeasure into a bin, and then sweeping\\nthe excess off the top.  \\\"Spooned\\\"\\nmeans to lightly spoon into a measure\\nand then sweep the top.  Sifted means\\nsifting the flour directly into a\\nmeasure and then sweeping the top.\"}},{\"line\":\"breadflour_sifted = 4.25 oz/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"The density of flour depends on the\\nmeasuring method.  \\\"Scooped\\\",  or\\n\\\"dip and sweep\\\" refers to dipping a\\nmeasure into a bin, and then sweeping\\nthe excess off the top.  \\\"Spooned\\\"\\nmeans to lightly spoon into a measure\\nand then sweep the top.  Sifted means\\nsifting the flour directly into a\\nmeasure and then sweeping the top.\"}},{\"line\":\"breadflour_spooned = 4.5 oz/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"The density of flour depends on the\\nmeasuring method.  \\\"Scooped\\\",  or\\n\\\"dip and sweep\\\" refers to dipping a\\nmeasure into a bin, and then sweeping\\nthe excess off the top.  \\\"Spooned\\\"\\nmeans to lightly spoon into a measure\\nand then sweep the top.  Sifted means\\nsifting the flour directly into a\\nmeasure and then sweeping the top.\"}},{\"line\":\"breadflour_scooped = 5.5 oz/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"The density of flour depends on the\\nmeasuring method.  \\\"Scooped\\\",  or\\n\\\"dip and sweep\\\" refers to dipping a\\nmeasure into a bin, and then sweeping\\nthe excess off the top.  \\\"Spooned\\\"\\nmeans to lightly spoon into a measure\\nand then sweep the top.  Sifted means\\nsifting the flour directly into a\\nmeasure and then sweeping the top.\"}},{\"line\":\"cornstarch = 120 grams/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"dutchcocoa_sifted = 75 g/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"These are for Dutch processed cocoa\"}},{\"line\":\"dutchcocoa_spooned = 92 g/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"These are for Dutch processed cocoa\"}},{\"line\":\"dutchcocoa_scooped = 95 g/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"These are for Dutch processed cocoa\"}},{\"line\":\"cocoa_sifted = 75 g/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"These are for nonalkalized cocoa\"}},{\"line\":\"cocoa_spooned = 82 g/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"These are for nonalkalized cocoa\"}},{\"line\":\"cocoa_scooped = 95 g/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"These are for nonalkalized cocoa\"}},{\"line\":\"heavycream = 232 g/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"milk = 242 g/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"sourcream = 242 g/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"molasses = 11.25 oz/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"cornsyrup = 11.5 oz/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"honey = 11.75 oz/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"sugar = 200 g/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"powdered_sugar = 4 oz/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"brownsugar_light = 217 g/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"packed\"}},{\"line\":\"brownsugar_dark = 239 g/uscup\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"baking_powder = 4.6 grams / ustsp\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"salt = 6 g / ustsp\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"koshersalt = 2.8 g / ustsp\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"Diamond Crystal kosher salt\"}},{\"line\":\"koshersalt_morton = 4.8 g / ustsp\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"Morton kosher salt\\nValues are from the nutrition info\\non the packages\"}},{\"line\":\"egg = 50 grams\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.10. Egg weights and volumes for a USA large egg\"],\"comment\":\"without shell\"}},{\"line\":\"eggwhite = 30 grams\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.10. Egg weights and volumes for a USA large egg\"],\"comment\":\"\"}},{\"line\":\"eggyolk = 18.6 grams\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.10. Egg weights and volumes for a USA large egg\"],\"comment\":\"\"}},{\"line\":\"eggvolume = 3 ustablespoons + 1|2 ustsp\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.10. Egg weights and volumes for a USA large egg\"],\"comment\":\"\"}},{\"line\":\"eggwhitevolume = 2 ustablespoons\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.10. Egg weights and volumes for a USA large egg\"],\"comment\":\"\"}},{\"line\":\"eggyolkvolume = 3.5 ustsp\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.10. Egg weights and volumes for a USA large egg\"],\"comment\":\"\"}},{\"line\":\"sugar_bpe = T => brix(~sugar_conc_bpe(T))\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.1. Density of a sugar syrup is frequently measured in candy making procedures.\\nIn the USA the boiling point of the syrup is measured. Some recipes instead\\nspecify the density using degrees Baume. Conversion between degrees Baume\\nand the boiling point measure has proved elusive. This table appeared in one\\ntext, and provides a fragmentary relationship to the concentration.\\n\\ntemp(C) conc (%)\\n100 30\\n101 40\\n102 50\\n103 60\\n106 70\\n112 80\\n123 90\\n140 95\\n151 97\\n160 98.2\\n166 99.5\\n171 99.6\\n\\nThe best source identified to date came from \\\"Boiling point elevation of\\ntechnical sugarcane solutions and its use in automatic pan boiling\\\" by\\nMichael Saska. International Sugar Journal, 2002, 104, 1247, pp 500-507.\\n\\nBut I'm using equation (3) which is credited to Starzak and Peacock,\\n\\\"Water activity coefficient in aqueous solutions of sucrose--A comprehensive\\ndata analyzis. Zuckerindustrie, 122, 380-387. (I couldn't find this\\ndocument.)\\n\\nNote that the range of validity is uncertain, but answers are in agreement\\nwith the above table all the way to 99.6.\\n\\nThe original equation has a parameter for the boiling point of water, which\\nof course varies with altitude. It also includes various other model\\nparameters. The input is the molar concentration of sucrose in the solution,\\n(moles sucrose) / (total moles).\\n\\nBsp 3797.06 degC\\nCsp 226.28 degC\\nQQ -17638 J/mol\\nasp -1.0038\\nbsp -0.24653\\ntbw 100 degC  boiling point of water\\nsugar_bpe_orig(x) ((1-QQ/R Bsp * x^2 (1+asp x + bsp x^2) (tbw + Csp) \\\\\\n/(tbw+stdtemp)) / (1+(tbw + Csp)/Bsp *ln(1-x))-1) * (tbw + Csp)\\n\\nTo convert mass concentration (brix) to molar concentration\\n\\nsc(x) (x / 342.3) / (( x/342.3) + (100-x)/18.02); \\\\\\n100 sc 342.3|18.02 / (sc (342.3|18.02-1)+1)\\n\\nHere is a simplfied version of this equation where the temperature of boiling\\nwater has been fixed at 100 degrees Celcius and the argument is now the\\nconcentration (brix).\\n\\nsugar_bpe(x) ((1+ 0.48851085 * sc(x)^2 (1+ -1.0038 sc(x) + -0.24653 sc(x)^2)) \\\\\\n/ (1+0.08592964 ln(1-sc(x)))-1) 326.28 K\\n\\n\\nThe formula is not invertible, so to implement it in units we unfortunately\\nmust turn it into a table.\",\"9.11.1.1. Using the brix table we can use this to produce a mapping from boiling point\\nto density which makes all of the units interconvertible. Because the brix\\ntable stops at 95 this approach works up to a boiling point elevation of 39 K\\nor a boiling point of 139 C / 282 F, which is the \\\"soft crack\\\" stage in candy\\nmaking. The \\\"hard crack\\\" stage continues up to 310 F.\"],\"comment\":\"Boiling point elevation\"}},{\"line\":\"sugar_bpe^-1 = sugar_bpe => sugar_conc_bpe(~brix(sugar_bpe))\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.1. Density of a sugar syrup is frequently measured in candy making procedures.\\nIn the USA the boiling point of the syrup is measured. Some recipes instead\\nspecify the density using degrees Baume. Conversion between degrees Baume\\nand the boiling point measure has proved elusive. This table appeared in one\\ntext, and provides a fragmentary relationship to the concentration.\\n\\ntemp(C) conc (%)\\n100 30\\n101 40\\n102 50\\n103 60\\n106 70\\n112 80\\n123 90\\n140 95\\n151 97\\n160 98.2\\n166 99.5\\n171 99.6\\n\\nThe best source identified to date came from \\\"Boiling point elevation of\\ntechnical sugarcane solutions and its use in automatic pan boiling\\\" by\\nMichael Saska. International Sugar Journal, 2002, 104, 1247, pp 500-507.\\n\\nBut I'm using equation (3) which is credited to Starzak and Peacock,\\n\\\"Water activity coefficient in aqueous solutions of sucrose--A comprehensive\\ndata analyzis. Zuckerindustrie, 122, 380-387. (I couldn't find this\\ndocument.)\\n\\nNote that the range of validity is uncertain, but answers are in agreement\\nwith the above table all the way to 99.6.\\n\\nThe original equation has a parameter for the boiling point of water, which\\nof course varies with altitude. It also includes various other model\\nparameters. The input is the molar concentration of sucrose in the solution,\\n(moles sucrose) / (total moles).\\n\\nBsp 3797.06 degC\\nCsp 226.28 degC\\nQQ -17638 J/mol\\nasp -1.0038\\nbsp -0.24653\\ntbw 100 degC  boiling point of water\\nsugar_bpe_orig(x) ((1-QQ/R Bsp * x^2 (1+asp x + bsp x^2) (tbw + Csp) \\\\\\n/(tbw+stdtemp)) / (1+(tbw + Csp)/Bsp *ln(1-x))-1) * (tbw + Csp)\\n\\nTo convert mass concentration (brix) to molar concentration\\n\\nsc(x) (x / 342.3) / (( x/342.3) + (100-x)/18.02); \\\\\\n100 sc 342.3|18.02 / (sc (342.3|18.02-1)+1)\\n\\nHere is a simplfied version of this equation where the temperature of boiling\\nwater has been fixed at 100 degrees Celcius and the argument is now the\\nconcentration (brix).\\n\\nsugar_bpe(x) ((1+ 0.48851085 * sc(x)^2 (1+ -1.0038 sc(x) + -0.24653 sc(x)^2)) \\\\\\n/ (1+0.08592964 ln(1-sc(x)))-1) 326.28 K\\n\\n\\nThe formula is not invertible, so to implement it in units we unfortunately\\nmust turn it into a table.\",\"9.11.1.1. Using the brix table we can use this to produce a mapping from boiling point\\nto density which makes all of the units interconvertible. Because the brix\\ntable stops at 95 this approach works up to a boiling point elevation of 39 K\\nor a boiling point of 139 C / 282 F, which is the \\\"soft crack\\\" stage in candy\\nmaking. The \\\"hard crack\\\" stage continues up to 310 F.\"],\"comment\":\"Boiling point elevation\"}},{\"line\":\"sugar_bp = T => brix(~sugar_conc_bpe(T-tempC(100))) \",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.1. Density of a sugar syrup is frequently measured in candy making procedures.\\nIn the USA the boiling point of the syrup is measured. Some recipes instead\\nspecify the density using degrees Baume. Conversion between degrees Baume\\nand the boiling point measure has proved elusive. This table appeared in one\\ntext, and provides a fragmentary relationship to the concentration.\\n\\ntemp(C) conc (%)\\n100 30\\n101 40\\n102 50\\n103 60\\n106 70\\n112 80\\n123 90\\n140 95\\n151 97\\n160 98.2\\n166 99.5\\n171 99.6\\n\\nThe best source identified to date came from \\\"Boiling point elevation of\\ntechnical sugarcane solutions and its use in automatic pan boiling\\\" by\\nMichael Saska. International Sugar Journal, 2002, 104, 1247, pp 500-507.\\n\\nBut I'm using equation (3) which is credited to Starzak and Peacock,\\n\\\"Water activity coefficient in aqueous solutions of sucrose--A comprehensive\\ndata analyzis. Zuckerindustrie, 122, 380-387. (I couldn't find this\\ndocument.)\\n\\nNote that the range of validity is uncertain, but answers are in agreement\\nwith the above table all the way to 99.6.\\n\\nThe original equation has a parameter for the boiling point of water, which\\nof course varies with altitude. It also includes various other model\\nparameters. The input is the molar concentration of sucrose in the solution,\\n(moles sucrose) / (total moles).\\n\\nBsp 3797.06 degC\\nCsp 226.28 degC\\nQQ -17638 J/mol\\nasp -1.0038\\nbsp -0.24653\\ntbw 100 degC  boiling point of water\\nsugar_bpe_orig(x) ((1-QQ/R Bsp * x^2 (1+asp x + bsp x^2) (tbw + Csp) \\\\\\n/(tbw+stdtemp)) / (1+(tbw + Csp)/Bsp *ln(1-x))-1) * (tbw + Csp)\\n\\nTo convert mass concentration (brix) to molar concentration\\n\\nsc(x) (x / 342.3) / (( x/342.3) + (100-x)/18.02); \\\\\\n100 sc 342.3|18.02 / (sc (342.3|18.02-1)+1)\\n\\nHere is a simplfied version of this equation where the temperature of boiling\\nwater has been fixed at 100 degrees Celcius and the argument is now the\\nconcentration (brix).\\n\\nsugar_bpe(x) ((1+ 0.48851085 * sc(x)^2 (1+ -1.0038 sc(x) + -0.24653 sc(x)^2)) \\\\\\n/ (1+0.08592964 ln(1-sc(x)))-1) 326.28 K\\n\\n\\nThe formula is not invertible, so to implement it in units we unfortunately\\nmust turn it into a table.\",\"9.11.1.1. Using the brix table we can use this to produce a mapping from boiling point\\nto density which makes all of the units interconvertible. Because the brix\\ntable stops at 95 this approach works up to a boiling point elevation of 39 K\\nor a boiling point of 139 C / 282 F, which is the \\\"soft crack\\\" stage in candy\\nmaking. The \\\"hard crack\\\" stage continues up to 310 F.\"],\"comment\":\"Absolute boiling point (produces an absolute temperature)\"}},{\"line\":\"sugar_bp^-1 = sugar_bp => sugar_conc_bpe(~brix(sugar_bp))+tempC(100)\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.1. Density of a sugar syrup is frequently measured in candy making procedures.\\nIn the USA the boiling point of the syrup is measured. Some recipes instead\\nspecify the density using degrees Baume. Conversion between degrees Baume\\nand the boiling point measure has proved elusive. This table appeared in one\\ntext, and provides a fragmentary relationship to the concentration.\\n\\ntemp(C) conc (%)\\n100 30\\n101 40\\n102 50\\n103 60\\n106 70\\n112 80\\n123 90\\n140 95\\n151 97\\n160 98.2\\n166 99.5\\n171 99.6\\n\\nThe best source identified to date came from \\\"Boiling point elevation of\\ntechnical sugarcane solutions and its use in automatic pan boiling\\\" by\\nMichael Saska. International Sugar Journal, 2002, 104, 1247, pp 500-507.\\n\\nBut I'm using equation (3) which is credited to Starzak and Peacock,\\n\\\"Water activity coefficient in aqueous solutions of sucrose--A comprehensive\\ndata analyzis. Zuckerindustrie, 122, 380-387. (I couldn't find this\\ndocument.)\\n\\nNote that the range of validity is uncertain, but answers are in agreement\\nwith the above table all the way to 99.6.\\n\\nThe original equation has a parameter for the boiling point of water, which\\nof course varies with altitude. It also includes various other model\\nparameters. The input is the molar concentration of sucrose in the solution,\\n(moles sucrose) / (total moles).\\n\\nBsp 3797.06 degC\\nCsp 226.28 degC\\nQQ -17638 J/mol\\nasp -1.0038\\nbsp -0.24653\\ntbw 100 degC  boiling point of water\\nsugar_bpe_orig(x) ((1-QQ/R Bsp * x^2 (1+asp x + bsp x^2) (tbw + Csp) \\\\\\n/(tbw+stdtemp)) / (1+(tbw + Csp)/Bsp *ln(1-x))-1) * (tbw + Csp)\\n\\nTo convert mass concentration (brix) to molar concentration\\n\\nsc(x) (x / 342.3) / (( x/342.3) + (100-x)/18.02); \\\\\\n100 sc 342.3|18.02 / (sc (342.3|18.02-1)+1)\\n\\nHere is a simplfied version of this equation where the temperature of boiling\\nwater has been fixed at 100 degrees Celcius and the argument is now the\\nconcentration (brix).\\n\\nsugar_bpe(x) ((1+ 0.48851085 * sc(x)^2 (1+ -1.0038 sc(x) + -0.24653 sc(x)^2)) \\\\\\n/ (1+0.08592964 ln(1-sc(x)))-1) 326.28 K\\n\\n\\nThe formula is not invertible, so to implement it in units we unfortunately\\nmust turn it into a table.\",\"9.11.1.1. Using the brix table we can use this to produce a mapping from boiling point\\nto density which makes all of the units interconvertible. Because the brix\\ntable stops at 95 this approach works up to a boiling point elevation of 39 K\\nor a boiling point of 139 C / 282 F, which is the \\\"soft crack\\\" stage in candy\\nmaking. The \\\"hard crack\\\" stage continues up to 310 F.\"],\"comment\":\"Absolute boiling point (produces an absolute temperature)\"}},{\"line\":\"sugar_bpF = T => brix(~sugar_conc_bpe(tempF(T)+-tempC(100))) \",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.1. Density of a sugar syrup is frequently measured in candy making procedures.\\nIn the USA the boiling point of the syrup is measured. Some recipes instead\\nspecify the density using degrees Baume. Conversion between degrees Baume\\nand the boiling point measure has proved elusive. This table appeared in one\\ntext, and provides a fragmentary relationship to the concentration.\\n\\ntemp(C) conc (%)\\n100 30\\n101 40\\n102 50\\n103 60\\n106 70\\n112 80\\n123 90\\n140 95\\n151 97\\n160 98.2\\n166 99.5\\n171 99.6\\n\\nThe best source identified to date came from \\\"Boiling point elevation of\\ntechnical sugarcane solutions and its use in automatic pan boiling\\\" by\\nMichael Saska. International Sugar Journal, 2002, 104, 1247, pp 500-507.\\n\\nBut I'm using equation (3) which is credited to Starzak and Peacock,\\n\\\"Water activity coefficient in aqueous solutions of sucrose--A comprehensive\\ndata analyzis. Zuckerindustrie, 122, 380-387. (I couldn't find this\\ndocument.)\\n\\nNote that the range of validity is uncertain, but answers are in agreement\\nwith the above table all the way to 99.6.\\n\\nThe original equation has a parameter for the boiling point of water, which\\nof course varies with altitude. It also includes various other model\\nparameters. The input is the molar concentration of sucrose in the solution,\\n(moles sucrose) / (total moles).\\n\\nBsp 3797.06 degC\\nCsp 226.28 degC\\nQQ -17638 J/mol\\nasp -1.0038\\nbsp -0.24653\\ntbw 100 degC  boiling point of water\\nsugar_bpe_orig(x) ((1-QQ/R Bsp * x^2 (1+asp x + bsp x^2) (tbw + Csp) \\\\\\n/(tbw+stdtemp)) / (1+(tbw + Csp)/Bsp *ln(1-x))-1) * (tbw + Csp)\\n\\nTo convert mass concentration (brix) to molar concentration\\n\\nsc(x) (x / 342.3) / (( x/342.3) + (100-x)/18.02); \\\\\\n100 sc 342.3|18.02 / (sc (342.3|18.02-1)+1)\\n\\nHere is a simplfied version of this equation where the temperature of boiling\\nwater has been fixed at 100 degrees Celcius and the argument is now the\\nconcentration (brix).\\n\\nsugar_bpe(x) ((1+ 0.48851085 * sc(x)^2 (1+ -1.0038 sc(x) + -0.24653 sc(x)^2)) \\\\\\n/ (1+0.08592964 ln(1-sc(x)))-1) 326.28 K\\n\\n\\nThe formula is not invertible, so to implement it in units we unfortunately\\nmust turn it into a table.\",\"9.11.1.1. Using the brix table we can use this to produce a mapping from boiling point\\nto density which makes all of the units interconvertible. Because the brix\\ntable stops at 95 this approach works up to a boiling point elevation of 39 K\\nor a boiling point of 139 C / 282 F, which is the \\\"soft crack\\\" stage in candy\\nmaking. The \\\"hard crack\\\" stage continues up to 310 F.\"],\"comment\":\"In practice dealing with the absolute temperature is annoying because it is\\nnot possible to convert to a nested function, so you're stuck retyping the\\nabsolute temperature in Kelvins to convert to celsius or Fahrenheit.  To\\nprevent this we supply definitions that build in the temperature conversion\\nand produce results in the Fahrenheit and Celcius scales.  So using these\\nmeasures, to convert 46 degrees Baume to a Fahrenheit boiling point:\\n\\nYou have: baume(45)\\nYou want: sugar_bpF\\n239.05647\"}},{\"line\":\"sugar_bpF^-1 = sugar_bpF => ~tempF(sugar_conc_bpe(~brix(sugar_bpF))+tempC(100))\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.1. Density of a sugar syrup is frequently measured in candy making procedures.\\nIn the USA the boiling point of the syrup is measured. Some recipes instead\\nspecify the density using degrees Baume. Conversion between degrees Baume\\nand the boiling point measure has proved elusive. This table appeared in one\\ntext, and provides a fragmentary relationship to the concentration.\\n\\ntemp(C) conc (%)\\n100 30\\n101 40\\n102 50\\n103 60\\n106 70\\n112 80\\n123 90\\n140 95\\n151 97\\n160 98.2\\n166 99.5\\n171 99.6\\n\\nThe best source identified to date came from \\\"Boiling point elevation of\\ntechnical sugarcane solutions and its use in automatic pan boiling\\\" by\\nMichael Saska. International Sugar Journal, 2002, 104, 1247, pp 500-507.\\n\\nBut I'm using equation (3) which is credited to Starzak and Peacock,\\n\\\"Water activity coefficient in aqueous solutions of sucrose--A comprehensive\\ndata analyzis. Zuckerindustrie, 122, 380-387. (I couldn't find this\\ndocument.)\\n\\nNote that the range of validity is uncertain, but answers are in agreement\\nwith the above table all the way to 99.6.\\n\\nThe original equation has a parameter for the boiling point of water, which\\nof course varies with altitude. It also includes various other model\\nparameters. The input is the molar concentration of sucrose in the solution,\\n(moles sucrose) / (total moles).\\n\\nBsp 3797.06 degC\\nCsp 226.28 degC\\nQQ -17638 J/mol\\nasp -1.0038\\nbsp -0.24653\\ntbw 100 degC  boiling point of water\\nsugar_bpe_orig(x) ((1-QQ/R Bsp * x^2 (1+asp x + bsp x^2) (tbw + Csp) \\\\\\n/(tbw+stdtemp)) / (1+(tbw + Csp)/Bsp *ln(1-x))-1) * (tbw + Csp)\\n\\nTo convert mass concentration (brix) to molar concentration\\n\\nsc(x) (x / 342.3) / (( x/342.3) + (100-x)/18.02); \\\\\\n100 sc 342.3|18.02 / (sc (342.3|18.02-1)+1)\\n\\nHere is a simplfied version of this equation where the temperature of boiling\\nwater has been fixed at 100 degrees Celcius and the argument is now the\\nconcentration (brix).\\n\\nsugar_bpe(x) ((1+ 0.48851085 * sc(x)^2 (1+ -1.0038 sc(x) + -0.24653 sc(x)^2)) \\\\\\n/ (1+0.08592964 ln(1-sc(x)))-1) 326.28 K\\n\\n\\nThe formula is not invertible, so to implement it in units we unfortunately\\nmust turn it into a table.\",\"9.11.1.1. Using the brix table we can use this to produce a mapping from boiling point\\nto density which makes all of the units interconvertible. Because the brix\\ntable stops at 95 this approach works up to a boiling point elevation of 39 K\\nor a boiling point of 139 C / 282 F, which is the \\\"soft crack\\\" stage in candy\\nmaking. The \\\"hard crack\\\" stage continues up to 310 F.\"],\"comment\":\"In practice dealing with the absolute temperature is annoying because it is\\nnot possible to convert to a nested function, so you're stuck retyping the\\nabsolute temperature in Kelvins to convert to celsius or Fahrenheit.  To\\nprevent this we supply definitions that build in the temperature conversion\\nand produce results in the Fahrenheit and Celcius scales.  So using these\\nmeasures, to convert 46 degrees Baume to a Fahrenheit boiling point:\\n\\nYou have: baume(45)\\nYou want: sugar_bpF\\n239.05647\"}},{\"line\":\"sugar_bpC = T => brix(~sugar_conc_bpe(tempC(T)+-tempC(100))) \",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.1. Density of a sugar syrup is frequently measured in candy making procedures.\\nIn the USA the boiling point of the syrup is measured. Some recipes instead\\nspecify the density using degrees Baume. Conversion between degrees Baume\\nand the boiling point measure has proved elusive. This table appeared in one\\ntext, and provides a fragmentary relationship to the concentration.\\n\\ntemp(C) conc (%)\\n100 30\\n101 40\\n102 50\\n103 60\\n106 70\\n112 80\\n123 90\\n140 95\\n151 97\\n160 98.2\\n166 99.5\\n171 99.6\\n\\nThe best source identified to date came from \\\"Boiling point elevation of\\ntechnical sugarcane solutions and its use in automatic pan boiling\\\" by\\nMichael Saska. International Sugar Journal, 2002, 104, 1247, pp 500-507.\\n\\nBut I'm using equation (3) which is credited to Starzak and Peacock,\\n\\\"Water activity coefficient in aqueous solutions of sucrose--A comprehensive\\ndata analyzis. Zuckerindustrie, 122, 380-387. (I couldn't find this\\ndocument.)\\n\\nNote that the range of validity is uncertain, but answers are in agreement\\nwith the above table all the way to 99.6.\\n\\nThe original equation has a parameter for the boiling point of water, which\\nof course varies with altitude. It also includes various other model\\nparameters. The input is the molar concentration of sucrose in the solution,\\n(moles sucrose) / (total moles).\\n\\nBsp 3797.06 degC\\nCsp 226.28 degC\\nQQ -17638 J/mol\\nasp -1.0038\\nbsp -0.24653\\ntbw 100 degC  boiling point of water\\nsugar_bpe_orig(x) ((1-QQ/R Bsp * x^2 (1+asp x + bsp x^2) (tbw + Csp) \\\\\\n/(tbw+stdtemp)) / (1+(tbw + Csp)/Bsp *ln(1-x))-1) * (tbw + Csp)\\n\\nTo convert mass concentration (brix) to molar concentration\\n\\nsc(x) (x / 342.3) / (( x/342.3) + (100-x)/18.02); \\\\\\n100 sc 342.3|18.02 / (sc (342.3|18.02-1)+1)\\n\\nHere is a simplfied version of this equation where the temperature of boiling\\nwater has been fixed at 100 degrees Celcius and the argument is now the\\nconcentration (brix).\\n\\nsugar_bpe(x) ((1+ 0.48851085 * sc(x)^2 (1+ -1.0038 sc(x) + -0.24653 sc(x)^2)) \\\\\\n/ (1+0.08592964 ln(1-sc(x)))-1) 326.28 K\\n\\n\\nThe formula is not invertible, so to implement it in units we unfortunately\\nmust turn it into a table.\",\"9.11.1.1. Using the brix table we can use this to produce a mapping from boiling point\\nto density which makes all of the units interconvertible. Because the brix\\ntable stops at 95 this approach works up to a boiling point elevation of 39 K\\nor a boiling point of 139 C / 282 F, which is the \\\"soft crack\\\" stage in candy\\nmaking. The \\\"hard crack\\\" stage continues up to 310 F.\"],\"comment\":\"In practice dealing with the absolute temperature is annoying because it is\\nnot possible to convert to a nested function, so you're stuck retyping the\\nabsolute temperature in Kelvins to convert to celsius or Fahrenheit.  To\\nprevent this we supply definitions that build in the temperature conversion\\nand produce results in the Fahrenheit and Celcius scales.  So using these\\nmeasures, to convert 46 degrees Baume to a Fahrenheit boiling point:\\n\\nYou have: baume(45)\\nYou want: sugar_bpF\\n239.05647\"}},{\"line\":\"sugar_bpC^-1 = sugar_bpC => ~tempC(sugar_conc_bpe(~brix(sugar_bpC))+tempC(100))\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.1. Density of a sugar syrup is frequently measured in candy making procedures.\\nIn the USA the boiling point of the syrup is measured. Some recipes instead\\nspecify the density using degrees Baume. Conversion between degrees Baume\\nand the boiling point measure has proved elusive. This table appeared in one\\ntext, and provides a fragmentary relationship to the concentration.\\n\\ntemp(C) conc (%)\\n100 30\\n101 40\\n102 50\\n103 60\\n106 70\\n112 80\\n123 90\\n140 95\\n151 97\\n160 98.2\\n166 99.5\\n171 99.6\\n\\nThe best source identified to date came from \\\"Boiling point elevation of\\ntechnical sugarcane solutions and its use in automatic pan boiling\\\" by\\nMichael Saska. International Sugar Journal, 2002, 104, 1247, pp 500-507.\\n\\nBut I'm using equation (3) which is credited to Starzak and Peacock,\\n\\\"Water activity coefficient in aqueous solutions of sucrose--A comprehensive\\ndata analyzis. Zuckerindustrie, 122, 380-387. (I couldn't find this\\ndocument.)\\n\\nNote that the range of validity is uncertain, but answers are in agreement\\nwith the above table all the way to 99.6.\\n\\nThe original equation has a parameter for the boiling point of water, which\\nof course varies with altitude. It also includes various other model\\nparameters. The input is the molar concentration of sucrose in the solution,\\n(moles sucrose) / (total moles).\\n\\nBsp 3797.06 degC\\nCsp 226.28 degC\\nQQ -17638 J/mol\\nasp -1.0038\\nbsp -0.24653\\ntbw 100 degC  boiling point of water\\nsugar_bpe_orig(x) ((1-QQ/R Bsp * x^2 (1+asp x + bsp x^2) (tbw + Csp) \\\\\\n/(tbw+stdtemp)) / (1+(tbw + Csp)/Bsp *ln(1-x))-1) * (tbw + Csp)\\n\\nTo convert mass concentration (brix) to molar concentration\\n\\nsc(x) (x / 342.3) / (( x/342.3) + (100-x)/18.02); \\\\\\n100 sc 342.3|18.02 / (sc (342.3|18.02-1)+1)\\n\\nHere is a simplfied version of this equation where the temperature of boiling\\nwater has been fixed at 100 degrees Celcius and the argument is now the\\nconcentration (brix).\\n\\nsugar_bpe(x) ((1+ 0.48851085 * sc(x)^2 (1+ -1.0038 sc(x) + -0.24653 sc(x)^2)) \\\\\\n/ (1+0.08592964 ln(1-sc(x)))-1) 326.28 K\\n\\n\\nThe formula is not invertible, so to implement it in units we unfortunately\\nmust turn it into a table.\",\"9.11.1.1. Using the brix table we can use this to produce a mapping from boiling point\\nto density which makes all of the units interconvertible. Because the brix\\ntable stops at 95 this approach works up to a boiling point elevation of 39 K\\nor a boiling point of 139 C / 282 F, which is the \\\"soft crack\\\" stage in candy\\nmaking. The \\\"hard crack\\\" stage continues up to 310 F.\"],\"comment\":\"In practice dealing with the absolute temperature is annoying because it is\\nnot possible to convert to a nested function, so you're stuck retyping the\\nabsolute temperature in Kelvins to convert to celsius or Fahrenheit.  To\\nprevent this we supply definitions that build in the temperature conversion\\nand produce results in the Fahrenheit and Celcius scales.  So using these\\nmeasures, to convert 46 degrees Baume to a Fahrenheit boiling point:\\n\\nYou have: baume(45)\\nYou want: sugar_bpF\\n239.05647\"}},{\"line\":\"baumeconst = 145\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.1. Density of a sugar syrup is frequently measured in candy making procedures.\\nIn the USA the boiling point of the syrup is measured. Some recipes instead\\nspecify the density using degrees Baume. Conversion between degrees Baume\\nand the boiling point measure has proved elusive. This table appeared in one\\ntext, and provides a fragmentary relationship to the concentration.\\n\\ntemp(C) conc (%)\\n100 30\\n101 40\\n102 50\\n103 60\\n106 70\\n112 80\\n123 90\\n140 95\\n151 97\\n160 98.2\\n166 99.5\\n171 99.6\\n\\nThe best source identified to date came from \\\"Boiling point elevation of\\ntechnical sugarcane solutions and its use in automatic pan boiling\\\" by\\nMichael Saska. International Sugar Journal, 2002, 104, 1247, pp 500-507.\\n\\nBut I'm using equation (3) which is credited to Starzak and Peacock,\\n\\\"Water activity coefficient in aqueous solutions of sucrose--A comprehensive\\ndata analyzis. Zuckerindustrie, 122, 380-387. (I couldn't find this\\ndocument.)\\n\\nNote that the range of validity is uncertain, but answers are in agreement\\nwith the above table all the way to 99.6.\\n\\nThe original equation has a parameter for the boiling point of water, which\\nof course varies with altitude. It also includes various other model\\nparameters. The input is the molar concentration of sucrose in the solution,\\n(moles sucrose) / (total moles).\\n\\nBsp 3797.06 degC\\nCsp 226.28 degC\\nQQ -17638 J/mol\\nasp -1.0038\\nbsp -0.24653\\ntbw 100 degC  boiling point of water\\nsugar_bpe_orig(x) ((1-QQ/R Bsp * x^2 (1+asp x + bsp x^2) (tbw + Csp) \\\\\\n/(tbw+stdtemp)) / (1+(tbw + Csp)/Bsp *ln(1-x))-1) * (tbw + Csp)\\n\\nTo convert mass concentration (brix) to molar concentration\\n\\nsc(x) (x / 342.3) / (( x/342.3) + (100-x)/18.02); \\\\\\n100 sc 342.3|18.02 / (sc (342.3|18.02-1)+1)\\n\\nHere is a simplfied version of this equation where the temperature of boiling\\nwater has been fixed at 100 degrees Celcius and the argument is now the\\nconcentration (brix).\\n\\nsugar_bpe(x) ((1+ 0.48851085 * sc(x)^2 (1+ -1.0038 sc(x) + -0.24653 sc(x)^2)) \\\\\\n/ (1+0.08592964 ln(1-sc(x)))-1) 326.28 K\\n\\n\\nThe formula is not invertible, so to implement it in units we unfortunately\\nmust turn it into a table.\",\"9.11.1.1. Using the brix table we can use this to produce a mapping from boiling point\\nto density which makes all of the units interconvertible. Because the brix\\ntable stops at 95 this approach works up to a boiling point elevation of 39 K\\nor a boiling point of 139 C / 282 F, which is the \\\"soft crack\\\" stage in candy\\nmaking. The \\\"hard crack\\\" stage continues up to 310 F.\"],\"comment\":\"Degrees Baume is used in European recipes to specify the density of a sugar\\nsyrup.  An entirely different definition is used for densities below\\n1 g/cm^3.  An arbitrary constant appears in the definition.  This value is\\nequal to 145 in the US, but was according to [], the old scale used in\\nHolland had a value of 144, and the new scale or Gerlach scale used 146.78.\\n\\nUS value\"}},{\"line\":\"baume = d => (baumeconst/(baumeconst+-d)) g/cm^3 \",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.1. Density of a sugar syrup is frequently measured in candy making procedures.\\nIn the USA the boiling point of the syrup is measured. Some recipes instead\\nspecify the density using degrees Baume. Conversion between degrees Baume\\nand the boiling point measure has proved elusive. This table appeared in one\\ntext, and provides a fragmentary relationship to the concentration.\\n\\ntemp(C) conc (%)\\n100 30\\n101 40\\n102 50\\n103 60\\n106 70\\n112 80\\n123 90\\n140 95\\n151 97\\n160 98.2\\n166 99.5\\n171 99.6\\n\\nThe best source identified to date came from \\\"Boiling point elevation of\\ntechnical sugarcane solutions and its use in automatic pan boiling\\\" by\\nMichael Saska. International Sugar Journal, 2002, 104, 1247, pp 500-507.\\n\\nBut I'm using equation (3) which is credited to Starzak and Peacock,\\n\\\"Water activity coefficient in aqueous solutions of sucrose--A comprehensive\\ndata analyzis. Zuckerindustrie, 122, 380-387. (I couldn't find this\\ndocument.)\\n\\nNote that the range of validity is uncertain, but answers are in agreement\\nwith the above table all the way to 99.6.\\n\\nThe original equation has a parameter for the boiling point of water, which\\nof course varies with altitude. It also includes various other model\\nparameters. The input is the molar concentration of sucrose in the solution,\\n(moles sucrose) / (total moles).\\n\\nBsp 3797.06 degC\\nCsp 226.28 degC\\nQQ -17638 J/mol\\nasp -1.0038\\nbsp -0.24653\\ntbw 100 degC  boiling point of water\\nsugar_bpe_orig(x) ((1-QQ/R Bsp * x^2 (1+asp x + bsp x^2) (tbw + Csp) \\\\\\n/(tbw+stdtemp)) / (1+(tbw + Csp)/Bsp *ln(1-x))-1) * (tbw + Csp)\\n\\nTo convert mass concentration (brix) to molar concentration\\n\\nsc(x) (x / 342.3) / (( x/342.3) + (100-x)/18.02); \\\\\\n100 sc 342.3|18.02 / (sc (342.3|18.02-1)+1)\\n\\nHere is a simplfied version of this equation where the temperature of boiling\\nwater has been fixed at 100 degrees Celcius and the argument is now the\\nconcentration (brix).\\n\\nsugar_bpe(x) ((1+ 0.48851085 * sc(x)^2 (1+ -1.0038 sc(x) + -0.24653 sc(x)^2)) \\\\\\n/ (1+0.08592964 ln(1-sc(x)))-1) 326.28 K\\n\\n\\nThe formula is not invertible, so to implement it in units we unfortunately\\nmust turn it into a table.\",\"9.11.1.1. Using the brix table we can use this to produce a mapping from boiling point\\nto density which makes all of the units interconvertible. Because the brix\\ntable stops at 95 this approach works up to a boiling point elevation of 39 K\\nor a boiling point of 139 C / 282 F, which is the \\\"soft crack\\\" stage in candy\\nmaking. The \\\"hard crack\\\" stage continues up to 310 F.\"],\"comment\":\"Degrees Baume is used in European recipes to specify the density of a sugar\\nsyrup.  An entirely different definition is used for densities below\\n1 g/cm^3.  An arbitrary constant appears in the definition.  This value is\\nequal to 145 in the US, but was according to [], the old scale used in\\nHolland had a value of 144, and the new scale or Gerlach scale used 146.78.\\n\\nUS value\"}},{\"line\":\"baume^-1 = baume => (baume+((-g)/cm^3)) baumeconst / baume\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.1. Density of a sugar syrup is frequently measured in candy making procedures.\\nIn the USA the boiling point of the syrup is measured. Some recipes instead\\nspecify the density using degrees Baume. Conversion between degrees Baume\\nand the boiling point measure has proved elusive. This table appeared in one\\ntext, and provides a fragmentary relationship to the concentration.\\n\\ntemp(C) conc (%)\\n100 30\\n101 40\\n102 50\\n103 60\\n106 70\\n112 80\\n123 90\\n140 95\\n151 97\\n160 98.2\\n166 99.5\\n171 99.6\\n\\nThe best source identified to date came from \\\"Boiling point elevation of\\ntechnical sugarcane solutions and its use in automatic pan boiling\\\" by\\nMichael Saska. International Sugar Journal, 2002, 104, 1247, pp 500-507.\\n\\nBut I'm using equation (3) which is credited to Starzak and Peacock,\\n\\\"Water activity coefficient in aqueous solutions of sucrose--A comprehensive\\ndata analyzis. Zuckerindustrie, 122, 380-387. (I couldn't find this\\ndocument.)\\n\\nNote that the range of validity is uncertain, but answers are in agreement\\nwith the above table all the way to 99.6.\\n\\nThe original equation has a parameter for the boiling point of water, which\\nof course varies with altitude. It also includes various other model\\nparameters. The input is the molar concentration of sucrose in the solution,\\n(moles sucrose) / (total moles).\\n\\nBsp 3797.06 degC\\nCsp 226.28 degC\\nQQ -17638 J/mol\\nasp -1.0038\\nbsp -0.24653\\ntbw 100 degC  boiling point of water\\nsugar_bpe_orig(x) ((1-QQ/R Bsp * x^2 (1+asp x + bsp x^2) (tbw + Csp) \\\\\\n/(tbw+stdtemp)) / (1+(tbw + Csp)/Bsp *ln(1-x))-1) * (tbw + Csp)\\n\\nTo convert mass concentration (brix) to molar concentration\\n\\nsc(x) (x / 342.3) / (( x/342.3) + (100-x)/18.02); \\\\\\n100 sc 342.3|18.02 / (sc (342.3|18.02-1)+1)\\n\\nHere is a simplfied version of this equation where the temperature of boiling\\nwater has been fixed at 100 degrees Celcius and the argument is now the\\nconcentration (brix).\\n\\nsugar_bpe(x) ((1+ 0.48851085 * sc(x)^2 (1+ -1.0038 sc(x) + -0.24653 sc(x)^2)) \\\\\\n/ (1+0.08592964 ln(1-sc(x)))-1) 326.28 K\\n\\n\\nThe formula is not invertible, so to implement it in units we unfortunately\\nmust turn it into a table.\",\"9.11.1.1. Using the brix table we can use this to produce a mapping from boiling point\\nto density which makes all of the units interconvertible. Because the brix\\ntable stops at 95 this approach works up to a boiling point elevation of 39 K\\nor a boiling point of 139 C / 282 F, which is the \\\"soft crack\\\" stage in candy\\nmaking. The \\\"hard crack\\\" stage continues up to 310 F.\"],\"comment\":\"Degrees Baume is used in European recipes to specify the density of a sugar\\nsyrup.  An entirely different definition is used for densities below\\n1 g/cm^3.  An arbitrary constant appears in the definition.  This value is\\nequal to 145 in the US, but was according to [], the old scale used in\\nHolland had a value of 144, and the new scale or Gerlach scale used 146.78.\\n\\nUS value\"}},{\"line\":\"twaddell = x => (1 + 0.005 x) g / cm^3 \",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.1. Density of a sugar syrup is frequently measured in candy making procedures.\\nIn the USA the boiling point of the syrup is measured. Some recipes instead\\nspecify the density using degrees Baume. Conversion between degrees Baume\\nand the boiling point measure has proved elusive. This table appeared in one\\ntext, and provides a fragmentary relationship to the concentration.\\n\\ntemp(C) conc (%)\\n100 30\\n101 40\\n102 50\\n103 60\\n106 70\\n112 80\\n123 90\\n140 95\\n151 97\\n160 98.2\\n166 99.5\\n171 99.6\\n\\nThe best source identified to date came from \\\"Boiling point elevation of\\ntechnical sugarcane solutions and its use in automatic pan boiling\\\" by\\nMichael Saska. International Sugar Journal, 2002, 104, 1247, pp 500-507.\\n\\nBut I'm using equation (3) which is credited to Starzak and Peacock,\\n\\\"Water activity coefficient in aqueous solutions of sucrose--A comprehensive\\ndata analyzis. Zuckerindustrie, 122, 380-387. (I couldn't find this\\ndocument.)\\n\\nNote that the range of validity is uncertain, but answers are in agreement\\nwith the above table all the way to 99.6.\\n\\nThe original equation has a parameter for the boiling point of water, which\\nof course varies with altitude. It also includes various other model\\nparameters. The input is the molar concentration of sucrose in the solution,\\n(moles sucrose) / (total moles).\\n\\nBsp 3797.06 degC\\nCsp 226.28 degC\\nQQ -17638 J/mol\\nasp -1.0038\\nbsp -0.24653\\ntbw 100 degC  boiling point of water\\nsugar_bpe_orig(x) ((1-QQ/R Bsp * x^2 (1+asp x + bsp x^2) (tbw + Csp) \\\\\\n/(tbw+stdtemp)) / (1+(tbw + Csp)/Bsp *ln(1-x))-1) * (tbw + Csp)\\n\\nTo convert mass concentration (brix) to molar concentration\\n\\nsc(x) (x / 342.3) / (( x/342.3) + (100-x)/18.02); \\\\\\n100 sc 342.3|18.02 / (sc (342.3|18.02-1)+1)\\n\\nHere is a simplfied version of this equation where the temperature of boiling\\nwater has been fixed at 100 degrees Celcius and the argument is now the\\nconcentration (brix).\\n\\nsugar_bpe(x) ((1+ 0.48851085 * sc(x)^2 (1+ -1.0038 sc(x) + -0.24653 sc(x)^2)) \\\\\\n/ (1+0.08592964 ln(1-sc(x)))-1) 326.28 K\\n\\n\\nThe formula is not invertible, so to implement it in units we unfortunately\\nmust turn it into a table.\",\"9.11.1.1. Using the brix table we can use this to produce a mapping from boiling point\\nto density which makes all of the units interconvertible. Because the brix\\ntable stops at 95 this approach works up to a boiling point elevation of 39 K\\nor a boiling point of 139 C / 282 F, which is the \\\"soft crack\\\" stage in candy\\nmaking. The \\\"hard crack\\\" stage continues up to 310 F.\"],\"comment\":\"It's not clear if this value was ever used with negative degrees.\"}},{\"line\":\"twaddell^-1 = twaddell => 200 (twaddell / (g/cm^3) +- 1)\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.1. Density of a sugar syrup is frequently measured in candy making procedures.\\nIn the USA the boiling point of the syrup is measured. Some recipes instead\\nspecify the density using degrees Baume. Conversion between degrees Baume\\nand the boiling point measure has proved elusive. This table appeared in one\\ntext, and provides a fragmentary relationship to the concentration.\\n\\ntemp(C) conc (%)\\n100 30\\n101 40\\n102 50\\n103 60\\n106 70\\n112 80\\n123 90\\n140 95\\n151 97\\n160 98.2\\n166 99.5\\n171 99.6\\n\\nThe best source identified to date came from \\\"Boiling point elevation of\\ntechnical sugarcane solutions and its use in automatic pan boiling\\\" by\\nMichael Saska. International Sugar Journal, 2002, 104, 1247, pp 500-507.\\n\\nBut I'm using equation (3) which is credited to Starzak and Peacock,\\n\\\"Water activity coefficient in aqueous solutions of sucrose--A comprehensive\\ndata analyzis. Zuckerindustrie, 122, 380-387. (I couldn't find this\\ndocument.)\\n\\nNote that the range of validity is uncertain, but answers are in agreement\\nwith the above table all the way to 99.6.\\n\\nThe original equation has a parameter for the boiling point of water, which\\nof course varies with altitude. It also includes various other model\\nparameters. The input is the molar concentration of sucrose in the solution,\\n(moles sucrose) / (total moles).\\n\\nBsp 3797.06 degC\\nCsp 226.28 degC\\nQQ -17638 J/mol\\nasp -1.0038\\nbsp -0.24653\\ntbw 100 degC  boiling point of water\\nsugar_bpe_orig(x) ((1-QQ/R Bsp * x^2 (1+asp x + bsp x^2) (tbw + Csp) \\\\\\n/(tbw+stdtemp)) / (1+(tbw + Csp)/Bsp *ln(1-x))-1) * (tbw + Csp)\\n\\nTo convert mass concentration (brix) to molar concentration\\n\\nsc(x) (x / 342.3) / (( x/342.3) + (100-x)/18.02); \\\\\\n100 sc 342.3|18.02 / (sc (342.3|18.02-1)+1)\\n\\nHere is a simplfied version of this equation where the temperature of boiling\\nwater has been fixed at 100 degrees Celcius and the argument is now the\\nconcentration (brix).\\n\\nsugar_bpe(x) ((1+ 0.48851085 * sc(x)^2 (1+ -1.0038 sc(x) + -0.24653 sc(x)^2)) \\\\\\n/ (1+0.08592964 ln(1-sc(x)))-1) 326.28 K\\n\\n\\nThe formula is not invertible, so to implement it in units we unfortunately\\nmust turn it into a table.\",\"9.11.1.1. Using the brix table we can use this to produce a mapping from boiling point\\nto density which makes all of the units interconvertible. Because the brix\\ntable stops at 95 this approach works up to a boiling point elevation of 39 K\\nor a boiling point of 139 C / 282 F, which is the \\\"soft crack\\\" stage in candy\\nmaking. The \\\"hard crack\\\" stage continues up to 310 F.\"],\"comment\":\"It's not clear if this value was ever used with negative degrees.\"}},{\"line\":\"quevenne = x => (1 + 0.001 x) g / cm^3 \",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.1. Density of a sugar syrup is frequently measured in candy making procedures.\\nIn the USA the boiling point of the syrup is measured. Some recipes instead\\nspecify the density using degrees Baume. Conversion between degrees Baume\\nand the boiling point measure has proved elusive. This table appeared in one\\ntext, and provides a fragmentary relationship to the concentration.\\n\\ntemp(C) conc (%)\\n100 30\\n101 40\\n102 50\\n103 60\\n106 70\\n112 80\\n123 90\\n140 95\\n151 97\\n160 98.2\\n166 99.5\\n171 99.6\\n\\nThe best source identified to date came from \\\"Boiling point elevation of\\ntechnical sugarcane solutions and its use in automatic pan boiling\\\" by\\nMichael Saska. International Sugar Journal, 2002, 104, 1247, pp 500-507.\\n\\nBut I'm using equation (3) which is credited to Starzak and Peacock,\\n\\\"Water activity coefficient in aqueous solutions of sucrose--A comprehensive\\ndata analyzis. Zuckerindustrie, 122, 380-387. (I couldn't find this\\ndocument.)\\n\\nNote that the range of validity is uncertain, but answers are in agreement\\nwith the above table all the way to 99.6.\\n\\nThe original equation has a parameter for the boiling point of water, which\\nof course varies with altitude. It also includes various other model\\nparameters. The input is the molar concentration of sucrose in the solution,\\n(moles sucrose) / (total moles).\\n\\nBsp 3797.06 degC\\nCsp 226.28 degC\\nQQ -17638 J/mol\\nasp -1.0038\\nbsp -0.24653\\ntbw 100 degC  boiling point of water\\nsugar_bpe_orig(x) ((1-QQ/R Bsp * x^2 (1+asp x + bsp x^2) (tbw + Csp) \\\\\\n/(tbw+stdtemp)) / (1+(tbw + Csp)/Bsp *ln(1-x))-1) * (tbw + Csp)\\n\\nTo convert mass concentration (brix) to molar concentration\\n\\nsc(x) (x / 342.3) / (( x/342.3) + (100-x)/18.02); \\\\\\n100 sc 342.3|18.02 / (sc (342.3|18.02-1)+1)\\n\\nHere is a simplfied version of this equation where the temperature of boiling\\nwater has been fixed at 100 degrees Celcius and the argument is now the\\nconcentration (brix).\\n\\nsugar_bpe(x) ((1+ 0.48851085 * sc(x)^2 (1+ -1.0038 sc(x) + -0.24653 sc(x)^2)) \\\\\\n/ (1+0.08592964 ln(1-sc(x)))-1) 326.28 K\\n\\n\\nThe formula is not invertible, so to implement it in units we unfortunately\\nmust turn it into a table.\",\"9.11.1.1. Using the brix table we can use this to produce a mapping from boiling point\\nto density which makes all of the units interconvertible. Because the brix\\ntable stops at 95 this approach works up to a boiling point elevation of 39 K\\nor a boiling point of 139 C / 282 F, which is the \\\"soft crack\\\" stage in candy\\nmaking. The \\\"hard crack\\\" stage continues up to 310 F.\"],\"comment\":\"The degree quevenne is a unit for measuring the density of milk.\\nSimilarly it's unclear if negative values were allowed here.\"}},{\"line\":\"quevenne^-1 = quevenne => 1000 (quevenne / (g/cm^3) +- 1)\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.1. Density of a sugar syrup is frequently measured in candy making procedures.\\nIn the USA the boiling point of the syrup is measured. Some recipes instead\\nspecify the density using degrees Baume. Conversion between degrees Baume\\nand the boiling point measure has proved elusive. This table appeared in one\\ntext, and provides a fragmentary relationship to the concentration.\\n\\ntemp(C) conc (%)\\n100 30\\n101 40\\n102 50\\n103 60\\n106 70\\n112 80\\n123 90\\n140 95\\n151 97\\n160 98.2\\n166 99.5\\n171 99.6\\n\\nThe best source identified to date came from \\\"Boiling point elevation of\\ntechnical sugarcane solutions and its use in automatic pan boiling\\\" by\\nMichael Saska. International Sugar Journal, 2002, 104, 1247, pp 500-507.\\n\\nBut I'm using equation (3) which is credited to Starzak and Peacock,\\n\\\"Water activity coefficient in aqueous solutions of sucrose--A comprehensive\\ndata analyzis. Zuckerindustrie, 122, 380-387. (I couldn't find this\\ndocument.)\\n\\nNote that the range of validity is uncertain, but answers are in agreement\\nwith the above table all the way to 99.6.\\n\\nThe original equation has a parameter for the boiling point of water, which\\nof course varies with altitude. It also includes various other model\\nparameters. The input is the molar concentration of sucrose in the solution,\\n(moles sucrose) / (total moles).\\n\\nBsp 3797.06 degC\\nCsp 226.28 degC\\nQQ -17638 J/mol\\nasp -1.0038\\nbsp -0.24653\\ntbw 100 degC  boiling point of water\\nsugar_bpe_orig(x) ((1-QQ/R Bsp * x^2 (1+asp x + bsp x^2) (tbw + Csp) \\\\\\n/(tbw+stdtemp)) / (1+(tbw + Csp)/Bsp *ln(1-x))-1) * (tbw + Csp)\\n\\nTo convert mass concentration (brix) to molar concentration\\n\\nsc(x) (x / 342.3) / (( x/342.3) + (100-x)/18.02); \\\\\\n100 sc 342.3|18.02 / (sc (342.3|18.02-1)+1)\\n\\nHere is a simplfied version of this equation where the temperature of boiling\\nwater has been fixed at 100 degrees Celcius and the argument is now the\\nconcentration (brix).\\n\\nsugar_bpe(x) ((1+ 0.48851085 * sc(x)^2 (1+ -1.0038 sc(x) + -0.24653 sc(x)^2)) \\\\\\n/ (1+0.08592964 ln(1-sc(x)))-1) 326.28 K\\n\\n\\nThe formula is not invertible, so to implement it in units we unfortunately\\nmust turn it into a table.\",\"9.11.1.1. Using the brix table we can use this to produce a mapping from boiling point\\nto density which makes all of the units interconvertible. Because the brix\\ntable stops at 95 this approach works up to a boiling point elevation of 39 K\\nor a boiling point of 139 C / 282 F, which is the \\\"soft crack\\\" stage in candy\\nmaking. The \\\"hard crack\\\" stage continues up to 310 F.\"],\"comment\":\"The degree quevenne is a unit for measuring the density of milk.\\nSimilarly it's unclear if negative values were allowed here.\"}},{\"line\":\"apidegree = x => 141.5 g/cm^3 / (x+131.5) \",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.2. Density measure invented by the American Petroleum Institute. Lighter\\npetroleum products are more valuable, and they get a higher API degree.\\n\\nThe intervals of range and domain should be open rather than closed.\"],\"comment\":\"\"}},{\"line\":\"apidegree^-1 = apidegree => 141.5 (g/cm^3) / apidegree + (-131.5)\",\"info\":{\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.2. Density measure invented by the American Petroleum Institute. Lighter\\npetroleum products are more valuable, and they get a higher API degree.\\n\\nThe intervals of range and domain should be open rather than closed.\"],\"comment\":\"\"}},{\"line\":\"ouncedal = oz ft / s^2\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"force which accelerates an ounce\\nat 1 ft/s^2\\nsame thing for a pound\\nand for a ton\"}},{\"line\":\"poundal = lb ft / s^2\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"force which accelerates an ounce\\nat 1 ft/s^2\\nsame thing for a pound\\nand for a ton\"}},{\"line\":\"tondal = longton ft / s^2\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"force which accelerates an ounce\\nat 1 ft/s^2\\nsame thing for a pound\\nand for a ton\"}},{\"line\":\"pdl = poundal\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"osi = ounce force / inch^2\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"used in aviation\"}},{\"line\":\"psi = pound force / inch^2\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"absolute pressure\\nNote that gauge pressure can be given\\nusing the gaugepressure() and\\npsig() nonlinear unit definitions\"}},{\"line\":\"psia = psi\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"absolute pressure\\nNote that gauge pressure can be given\\nusing the gaugepressure() and\\npsig() nonlinear unit definitions\"}},{\"line\":\"tsi = ton force / inch^2\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"reyn = psi sec\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"slug = lbf s^2 / ft\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"slugf = slug force\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"slinch = lbf s^2 / inch\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"Mass unit derived from inch second\\npound-force system.  Used in space\\napplications where in/sec^2 was a\\nnatural acceleration measure.\"}},{\"line\":\"slinchf = slinch force\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"Mass unit derived from inch second\\npound-force system.  Used in space\\napplications where in/sec^2 was a\\nnatural acceleration measure.\"}},{\"line\":\"geepound = slug\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"lbf = lb force\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"tonf = ton force\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"lbm = lb\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"kip = 1000 lbf\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"from kilopound\"}},{\"line\":\"ksi = kip / in^2\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"mil = 0.001 inch\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"thou = 0.001 inch\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"tenth = 0.0001 inch\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"one tenth of one thousandth of an inch\"}},{\"line\":\"millionth = 1e-6 inch\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"one millionth of an inch\"}},{\"line\":\"circularinch = 1|4 pi in^2\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"area of a one-inch diameter circle\\nA circle with diameter d inches has\\nan area of d^2 circularinches\"}},{\"line\":\"circleinch = circularinch\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"area of a one-inch diameter circle\\nA circle with diameter d inches has\\nan area of d^2 circularinches\"}},{\"line\":\"cylinderinch = circleinch inch\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"Cylinder h inch tall, d inches diameter\\nhas volume d^2 h cylinder inches\"}},{\"line\":\"circularmil = 1|4 pi mil^2\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"area of one-mil diameter circle\"}},{\"line\":\"cmil = circularmil\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"area of one-mil diameter circle\"}},{\"line\":\"cental = 100 pound\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"centner = cental\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"caliber = 0.01 inch\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"for measuring bullets\"}},{\"line\":\"duty = ft lbf\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"celo = ft / s^2\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"jerk = ft / s^3\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"australiapoint = 0.01 inch\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"The \\\"point\\\" is used to measure rainfall\\nin Australia\"}},{\"line\":\"sabin = ft^2\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"Measure of sound absorption equal to the\\nabsorbing power of one square foot of\\na perfectly absorbing material.  The\\nsound absorptivity of an object is the\\narea times a dimensionless\\nabsorptivity coefficient.\"}},{\"line\":\"standardgauge = 4 ft + 8.5 in\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"Standard width between railroad track\"}},{\"line\":\"flag = 5 ft^2\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"Construction term referring to sidewalk.\"}},{\"line\":\"rollwallpaper = 30 ft^2\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"Area of roll of wall paper\"}},{\"line\":\"fillpower = in^3 / ounce\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"Density of down at standard pressure.\\nThe best down has 750-800 fillpower.\"}},{\"line\":\"pinlength = 1|16 inch\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"A\"}},{\"line\":\"buttonline = 1|40 inch\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"The line was used in 19th century USA\\nto measure width of buttons.\"}},{\"line\":\"beespace = 1|4 inch\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"Bees will fill any space that is smaller\\nthan the bee space and leave open\\nspaces that are larger.  The size of\\nthe space varies with species.\"}},{\"line\":\"diamond = 8|5 ft\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"Marking on US tape measures that is\\nuseful to carpenters who wish to place\\nfive studs in an 8 ft distance.  Note\\nthat the numbers appear in red every\\n16 inches as well, giving six\\ndivisions in 8 feet.\"}},{\"line\":\"retmaunit = 1.75 in\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"Height of rack mountable equipment.\\nEquipment should be 1|32 inch narrower\\nthan its U measurement indicates to\\nallow for clearance, so 4U=(6+31|32)in\\nRETMA stands for the former name of\\nthe standardizing organization, Radio\\nElectronics Television Manufacturers\\nAssociation.  This organization is now\\ncalled the Electronic Industries\\nAlliance (EIA) and the rack standard\\nis specified in EIA RS-310-D.\"}},{\"line\":\"U = retmaunit\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"Height of rack mountable equipment.\\nEquipment should be 1|32 inch narrower\\nthan its U measurement indicates to\\nallow for clearance, so 4U=(6+31|32)in\\nRETMA stands for the former name of\\nthe standardizing organization, Radio\\nElectronics Television Manufacturers\\nAssociation.  This organization is now\\ncalled the Electronic Industries\\nAlliance (EIA) and the rack standard\\nis specified in EIA RS-310-D.\"}},{\"line\":\"RU = U\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"Height of rack mountable equipment.\\nEquipment should be 1|32 inch narrower\\nthan its U measurement indicates to\\nallow for clearance, so 4U=(6+31|32)in\\nRETMA stands for the former name of\\nthe standardizing organization, Radio\\nElectronics Television Manufacturers\\nAssociation.  This organization is now\\ncalled the Electronic Industries\\nAlliance (EIA) and the rack standard\\nis specified in EIA RS-310-D.\"}},{\"line\":\"count = / pound\",\"info\":{\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"For measuring the size of shrimp\"}},{\"line\":\"ENERGY = joule\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\"],\"comment\":\"\"}},{\"line\":\"WORK = joule\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\"],\"comment\":\"\"}},{\"line\":\"cal_IT = 4.1868 J\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.1. Calories: energy to raise a gram of water one degree celsius\"],\"comment\":\"International Table calorie\"}},{\"line\":\"cal_th = 4.184 J\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.1. Calories: energy to raise a gram of water one degree celsius\"],\"comment\":\"Thermochemical calorie\"}},{\"line\":\"cal_fifteen = 4.18580 J\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.1. Calories: energy to raise a gram of water one degree celsius\"],\"comment\":\"Energy to go from 14.5 to 15.5 degC\"}},{\"line\":\"cal_twenty = 4.18190 J\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.1. Calories: energy to raise a gram of water one degree celsius\"],\"comment\":\"Energy to go from 19.5 to 20.5 degC\"}},{\"line\":\"cal_mean = 4.19002 J\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.1. Calories: energy to raise a gram of water one degree celsius\"],\"comment\":\"1|100 energy to go from 0 to 100 degC\"}},{\"line\":\"calorie = cal_IT\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.1. Calories: energy to raise a gram of water one degree celsius\"],\"comment\":\"\"}},{\"line\":\"cal = calorie\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.1. Calories: energy to raise a gram of water one degree celsius\"],\"comment\":\"\"}},{\"line\":\"calorie_IT = cal_IT\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.1. Calories: energy to raise a gram of water one degree celsius\"],\"comment\":\"\"}},{\"line\":\"thermcalorie = cal_th\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.1. Calories: energy to raise a gram of water one degree celsius\"],\"comment\":\"\"}},{\"line\":\"calorie_th = thermcalorie\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.1. Calories: energy to raise a gram of water one degree celsius\"],\"comment\":\"\"}},{\"line\":\"Calorie = kilocalorie\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.1. Calories: energy to raise a gram of water one degree celsius\"],\"comment\":\"the food Calorie\"}},{\"line\":\"thermie = 1e6 cal_fifteen\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.1. Calories: energy to raise a gram of water one degree celsius\"],\"comment\":\"Heat required to raise the\\ntemperature of a tonne of\\nwater from 14.5 to 15.5 degC.\"}},{\"line\":\"btu = cal lb degF / gram K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.2. btu definitions: energy to raise a pound of water 1 degF\"],\"comment\":\"international table BTU\"}},{\"line\":\"britishthermalunit = btu\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.2. btu definitions: energy to raise a pound of water 1 degF\"],\"comment\":\"international table BTU\"}},{\"line\":\"btu_IT = btu\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.2. btu definitions: energy to raise a pound of water 1 degF\"],\"comment\":\"international table BTU\"}},{\"line\":\"btu_th = cal_th lb degF / gram K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.2. btu definitions: energy to raise a pound of water 1 degF\"],\"comment\":\"\"}},{\"line\":\"btu_mean = cal_mean lb degF / gram K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.2. btu definitions: energy to raise a pound of water 1 degF\"],\"comment\":\"\"}},{\"line\":\"quad = quadrillion btu\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.2. btu definitions: energy to raise a pound of water 1 degF\"],\"comment\":\"\"}},{\"line\":\"ECtherm = 1.05506e8 J\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.2. btu definitions: energy to raise a pound of water 1 degF\"],\"comment\":\"Exact definition, close to 1e5 btu\"}},{\"line\":\"UStherm = 1.054804e8 J\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.2. btu definitions: energy to raise a pound of water 1 degF\"],\"comment\":\"Exact definition\"}},{\"line\":\"therm = UStherm\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.2. btu definitions: energy to raise a pound of water 1 degF\"],\"comment\":\"Exact definition\"}},{\"line\":\"water_fusion_heat = 79.8 calorie/g\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.3. Water latent heat (from Wikipedia)\"],\"comment\":\"\"}},{\"line\":\"water_vaporization_heat = 1160 J/g\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.3. Water latent heat (from Wikipedia)\"],\"comment\":\"\"}},{\"line\":\"specificheat_water = calorie / g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"\"}},{\"line\":\"water_specificheat = specificheat_water\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"\"}},{\"line\":\"specificheat_aluminum = 0.91 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_antimony = 0.21 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_barium = 0.20 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_beryllium = 1.83 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_bismuth = 0.13 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_cadmium = 0.23 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_cesium = 0.24 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_chromium = 0.46 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_cobalt = 0.42 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_copper = 0.39 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_gallium = 0.37 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_germanium = 0.32 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_gold = 0.13 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_hafnium = 0.14 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_indium = 0.24 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_iridium = 0.13 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_iron = 0.45 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_lanthanum = 0.195 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_lead = 0.13 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_lithium = 3.57 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_lutetium = 0.15 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_magnesium = 1.05 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_manganese = 0.48 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_mercury = 0.14 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_molybdenum = 0.25 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_nickel = 0.44 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_osmium = 0.13 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_palladium = 0.24 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_platinum = 0.13 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_plutonum = 0.13 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_potassium = 0.75 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_rhenium = 0.14 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_rhodium = 0.24 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_rubidium = 0.36 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_ruthenium = 0.24 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_scandium = 0.57  J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_selenium = 0.32 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_silicon = 0.71 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_silver = 0.23 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_sodium = 1.21 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_strontium = 0.30 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_tantalum = 0.14 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_thallium = 0.13 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_thorium = 0.13 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_tin = 0.21 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_titanium = 0.54 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_tungsten = 0.13 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_uranium = 0.12 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_vanadium = 0.39 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_yttrium = 0.30 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_zinc = 0.39 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_zirconium = 0.27 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_ethanol = 2.3  J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_ammonia = 4.6 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_freon = 0.91 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"R-12 at 0 degrees Fahrenheit\"}},{\"line\":\"specificheat_gasoline = 2.22 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"\"}},{\"line\":\"specificheat_iodine = 2.15 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"\"}},{\"line\":\"specificheat_oliveoil = 1.97 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"\"}},{\"line\":\"specificheat_hydrogen = 14.3 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_helium = 5.1932 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_argon = 0.5203 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_tissue = 3.5 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_diamond = 0.5091 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_granite = 0.79 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_graphite = 0.71 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_ice = 2.11 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_asphalt = 0.92 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_brick = 0.84 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_concrete = 0.88 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_glass_silica = 0.84 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_glass_flint = 0.503 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_glass_pyrex = 0.753 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_gypsum = 1.09 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_marble = 0.88 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_sand = 0.835 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_soil = 0.835 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_wood = 1.7 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_sucrose = 1.244 J/g K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"www.sugartech.co.za/heatcapacity/index.php\"}},{\"line\":\"tonoil = 1e10 cal_IT\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"Ton oil equivalent.  A conventional\\nvalue for the energy released by\\nburning one metric ton of oil. [18,E2]\\nNote that energy per mass of petroleum\\nproducts is fairly constant.\\nVariations in volumetric energy\\ndensity result from variations in the\\ndensity (kg/m^3) of different fuels.\\nThis definition is given by the\\nIEA/OECD.\"}},{\"line\":\"toe = tonoil\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"Ton oil equivalent.  A conventional\\nvalue for the energy released by\\nburning one metric ton of oil. [18,E2]\\nNote that energy per mass of petroleum\\nproducts is fairly constant.\\nVariations in volumetric energy\\ndensity result from variations in the\\ndensity (kg/m^3) of different fuels.\\nThis definition is given by the\\nIEA/OECD.\"}},{\"line\":\"toncoal = 7e9 cal_IT\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"Energy in metric ton coal from [18].\\nThis is a nominal value which\\nis close to the heat content\\nof coal used in the 1950's\"}},{\"line\":\"barreloil = 5.8 Mbtu\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"Conventional value for barrel of crude\\noil [E2].  Actual range is 5.6 - 6.3.\"}},{\"line\":\"naturalgas_HHV = 1027 btu/ft^3\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"Energy content of natural gas.  HHV\\nis for Higher Heating Value and\\nincludes energy from condensation\\ncombustion products.  LHV is for Lower\\nHeating Value and excludes these.\\nAmerican publications typically report\\nHHV whereas European ones report LHV.\"}},{\"line\":\"naturalgas_LHV = 930 btu/ft^3\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"Energy content of natural gas.  HHV\\nis for Higher Heating Value and\\nincludes energy from condensation\\ncombustion products.  LHV is for Lower\\nHeating Value and excludes these.\\nAmerican publications typically report\\nHHV whereas European ones report LHV.\"}},{\"line\":\"naturalgas = naturalgas_HHV\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"Energy content of natural gas.  HHV\\nis for Higher Heating Value and\\nincludes energy from condensation\\ncombustion products.  LHV is for Lower\\nHeating Value and excludes these.\\nAmerican publications typically report\\nHHV whereas European ones report LHV.\"}},{\"line\":\"charcoal = 30 GJ/tonne\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"\"}},{\"line\":\"woodenergy_dry = 20 GJ/tonne\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"HHV, a cord weights about a tonne\"}},{\"line\":\"woodenergy_airdry = 15 GJ/tonne\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"20% moisture content\"}},{\"line\":\"coal_bituminous = 27 GJ / tonne\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"\"}},{\"line\":\"coal_lignite = 15 GJ / tonne\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"\"}},{\"line\":\"coal_US = 22 GJ / uston\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"Average for US coal (short ton), 1995\"}},{\"line\":\"ethanol_HHV = 84000 btu/usgallon\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"\"}},{\"line\":\"ethanol_LHV = 75700 btu/usgallon\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"\"}},{\"line\":\"diesel = 130500 btu/usgallon\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"\"}},{\"line\":\"gasoline_LHV = 115000 btu/usgallon\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"\"}},{\"line\":\"gasoline_HHV = 125000 btu/usgallon\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"\"}},{\"line\":\"gasoline = gasoline_HHV\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"\"}},{\"line\":\"heating = 37.3 MJ/liter\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"\"}},{\"line\":\"fueloil = 39.7 MJ/liter\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"low sulphur\"}},{\"line\":\"propane = 93.3 MJ/m^3\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"\"}},{\"line\":\"butane = 124 MJ/m^3\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"\"}},{\"line\":\"uranium_pure = 200 MeV avogadro / (235.0439299 g/mol)\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\",\"11.5.1. These values give total energy from uranium fission. Actual efficiency\\nof nuclear power plants is around 30%-40%. Note also that some reactors\\nuse enriched uranium around 3% U-235. Uranium during processing or use\\nmay be in a compound of uranium oxide or uranium hexafluoride, in which\\ncase the energy density would be lower depending on how much uranium is\\nin the compound.\"],\"comment\":\"Pure U-235\"}},{\"line\":\"uranium_natural = 0.7% uranium_pure\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\",\"11.5.1. These values give total energy from uranium fission. Actual efficiency\\nof nuclear power plants is around 30%-40%. Note also that some reactors\\nuse enriched uranium around 3% U-235. Uranium during processing or use\\nmay be in a compound of uranium oxide or uranium hexafluoride, in which\\ncase the energy density would be lower depending on how much uranium is\\nin the compound.\"],\"comment\":\"Natural uranium: 0.7% U-235\"}},{\"line\":\"celsiusheatunit = cal lb degC / gram K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.6. Celsius heat unit: energy to raise a pound of water 1 degC\"],\"comment\":\"\"}},{\"line\":\"chu = celsiusheatunit\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.6. Celsius heat unit: energy to raise a pound of water 1 degC\"],\"comment\":\"\"}},{\"line\":\"POWER = watt\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.6. Celsius heat unit: energy to raise a pound of water 1 degC\"],\"comment\":\"\"}},{\"line\":\"VA = volt ampere\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.7. \\\"Apparent\\\" average power in an AC circuit, the product of rms voltage\\nand rms current, equal to the true power in watts when voltage and\\ncurrent are in phase. In a DC circuit, always equal to the true power.\"],\"comment\":\"\"}},{\"line\":\"kWh = kilowatt hour\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.7. \\\"Apparent\\\" average power in an AC circuit, the product of rms voltage\\nand rms current, equal to the true power in watts when voltage and\\ncurrent are in phase. In a DC circuit, always equal to the true power.\"],\"comment\":\"\"}},{\"line\":\"horsepower = 550 foot pound force / sec\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.8. The horsepower is supposedly the power of one horse pulling. Obviously\\ndifferent people had different horses.\"],\"comment\":\"Invented by James Watt\"}},{\"line\":\"mechanicalhorsepower = horsepower\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.8. The horsepower is supposedly the power of one horse pulling. Obviously\\ndifferent people had different horses.\"],\"comment\":\"Invented by James Watt\"}},{\"line\":\"hp = horsepower\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.8. The horsepower is supposedly the power of one horse pulling. Obviously\\ndifferent people had different horses.\"],\"comment\":\"Invented by James Watt\"}},{\"line\":\"metrichorsepower = 75 kilogram force meter / sec\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.8. The horsepower is supposedly the power of one horse pulling. Obviously\\ndifferent people had different horses.\"],\"comment\":\"PS=Pferdestaerke in\\nGermany\"}},{\"line\":\"electrichorsepower = 746 W\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.8. The horsepower is supposedly the power of one horse pulling. Obviously\\ndifferent people had different horses.\"],\"comment\":\"PS=Pferdestaerke in\\nGermany\"}},{\"line\":\"boilerhorsepower = 9809.50 W\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.8. The horsepower is supposedly the power of one horse pulling. Obviously\\ndifferent people had different horses.\"],\"comment\":\"\"}},{\"line\":\"waterhorsepower = 746.043 W\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.8. The horsepower is supposedly the power of one horse pulling. Obviously\\ndifferent people had different horses.\"],\"comment\":\"\"}},{\"line\":\"brhorsepower = 745.70 W\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.8. The horsepower is supposedly the power of one horse pulling. Obviously\\ndifferent people had different horses.\"],\"comment\":\"\"}},{\"line\":\"donkeypower = 250 W\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.8. The horsepower is supposedly the power of one horse pulling. Obviously\\ndifferent people had different horses.\"],\"comment\":\"\"}},{\"line\":\"chevalvapeur = metrichorsepower\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.8. The horsepower is supposedly the power of one horse pulling. Obviously\\ndifferent people had different horses.\"],\"comment\":\"\"}},{\"line\":\"THERMAL_CONDUCTIVITY = POWER / AREA (TEMPERATURE_DIFFERENCE/LENGTH)\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.10. Heat Transfer\"],\"comment\":\"Thermal conductivity, K, measures the rate of heat transfer across\\na material.  The heat transfered is\\nQ = K dT A t / L\\nwhere dT is the temperature difference across the material, A is the\\ncross sectional area, t is the time, and L is the length (thickness).\\nThermal conductivity is a material property.\"}},{\"line\":\"THERMAL_RESISTIVITY = 1/THERMAL_CONDUCTIVITY\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.10. Heat Transfer\"],\"comment\":\"\"}},{\"line\":\"THERMAL_CONDUCTANCE = POWER / TEMPERATURE_DIFFERENCE\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.10. Heat Transfer\"],\"comment\":\"Thermal conductance is the rate at which heat flows across a given\\nobject, so the area and thickness have been fixed.  It depends on\\nthe size of the object and is hence not a material property.\"}},{\"line\":\"THERMAL_RESISTANCE = 1/THERMAL_CONDUCTANCE\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.10. Heat Transfer\"],\"comment\":\"\"}},{\"line\":\"THERMAL_ADMITTANCE = THERMAL_CONDUCTIVITY / LENGTH\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.10. Heat Transfer\",\"11.10.1. Thermal admittance is the rate of heat flow per area across an\\nobject whose thickness has been fixed. Its reciprocal, thermal\\ninsulation, is used to for measuring the heat transfer per area\\nof sheets of insulation or cloth that are of specified thickness.\"],\"comment\":\"\"}},{\"line\":\"THERMAL_INSULANCE = THERMAL_RESISTIVITY LENGTH\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.10. Heat Transfer\",\"11.10.1. Thermal admittance is the rate of heat flow per area across an\\nobject whose thickness has been fixed. Its reciprocal, thermal\\ninsulation, is used to for measuring the heat transfer per area\\nof sheets of insulation or cloth that are of specified thickness.\"],\"comment\":\"\"}},{\"line\":\"THERMAL_INSULATION = THERMAL_RESISTIVITY LENGTH\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.10. Heat Transfer\",\"11.10.1. Thermal admittance is the rate of heat flow per area across an\\nobject whose thickness has been fixed. Its reciprocal, thermal\\ninsulation, is used to for measuring the heat transfer per area\\nof sheets of insulation or cloth that are of specified thickness.\"],\"comment\":\"\"}},{\"line\":\"Rvalue = degF ft^2 hr / btu\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.10. Heat Transfer\",\"11.10.1. Thermal admittance is the rate of heat flow per area across an\\nobject whose thickness has been fixed. Its reciprocal, thermal\\ninsulation, is used to for measuring the heat transfer per area\\nof sheets of insulation or cloth that are of specified thickness.\"],\"comment\":\"\"}},{\"line\":\"Uvalue = 1/Rvalue\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.10. Heat Transfer\",\"11.10.1. Thermal admittance is the rate of heat flow per area across an\\nobject whose thickness has been fixed. Its reciprocal, thermal\\ninsulation, is used to for measuring the heat transfer per area\\nof sheets of insulation or cloth that are of specified thickness.\"],\"comment\":\"\"}},{\"line\":\"europeanUvalue = watt / m^2 K\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.10. Heat Transfer\",\"11.10.1. Thermal admittance is the rate of heat flow per area across an\\nobject whose thickness has been fixed. Its reciprocal, thermal\\ninsulation, is used to for measuring the heat transfer per area\\nof sheets of insulation or cloth that are of specified thickness.\"],\"comment\":\"\"}},{\"line\":\"RSI = degC m^2 / W\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.10. Heat Transfer\",\"11.10.1. Thermal admittance is the rate of heat flow per area across an\\nobject whose thickness has been fixed. Its reciprocal, thermal\\ninsulation, is used to for measuring the heat transfer per area\\nof sheets of insulation or cloth that are of specified thickness.\"],\"comment\":\"\"}},{\"line\":\"clo = 0.155 degC m^2 / W\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.10. Heat Transfer\",\"11.10.1. Thermal admittance is the rate of heat flow per area across an\\nobject whose thickness has been fixed. Its reciprocal, thermal\\ninsulation, is used to for measuring the heat transfer per area\\nof sheets of insulation or cloth that are of specified thickness.\"],\"comment\":\"Supposed to be the insulance\\nrequired to keep a resting person\\ncomfortable indoors.  The value\\ngiven is from NIST and the CRC,\\nbut [5] gives a slightly different\\nvalue of 0.875 ft^2 degF hr / btu.\"}},{\"line\":\"tog = 0.1 degC m^2 / W\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.10. Heat Transfer\",\"11.10.1. Thermal admittance is the rate of heat flow per area across an\\nobject whose thickness has been fixed. Its reciprocal, thermal\\ninsulation, is used to for measuring the heat transfer per area\\nof sheets of insulation or cloth that are of specified thickness.\"],\"comment\":\"Also used for clothing.\"}},{\"line\":\"bel = x => 10^(x)\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Basic bel definition\"}},{\"line\":\"bel^-1 = bel => log(bel)\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Basic bel definition\"}},{\"line\":\"decibel = x => 10^(x/10)\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Basic decibel\"}},{\"line\":\"decibel^-1 = decibel => 10 log(decibel)\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Basic decibel\"}},{\"line\":\"dB = decibel\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Abbreviation\"}},{\"line\":\"dBW = x => dB(x) W \",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Reference = 1 W\"}},{\"line\":\"dBW^-1 = dBW => ~dB(dBW/W)\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Reference = 1 W\"}},{\"line\":\"dBk = x => dB(x) kW \",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Reference = 1 kW\"}},{\"line\":\"dBk^-1 = dBk => ~dB(dBk/kW)\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Reference = 1 kW\"}},{\"line\":\"dBf = x => dB(x) fW \",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Reference = 1 fW\"}},{\"line\":\"dBf^-1 = dBf => ~dB(dBf/fW)\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Reference = 1 fW\"}},{\"line\":\"dBm = x => dB(x) mW \",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Reference = 1 mW\"}},{\"line\":\"dBm^-1 = dBm => ~dB(dBm/mW)\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Reference = 1 mW\"}},{\"line\":\"dBmW = x => dBm(x) \",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Reference = 1 mW\"}},{\"line\":\"dBmW^-1 = dBmW => ~dBm(dBmW)\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Reference = 1 mW\"}},{\"line\":\"dBJ = x => dB(x) J\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Energy relative\\nto 1 joule.  Used for power spectral\\ndensity since W/Hz = J\"}},{\"line\":\"dBJ^-1 = dBJ => ~dB(dBJ/J)\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Energy relative\\nto 1 joule.  Used for power spectral\\ndensity since W/Hz = J\"}},{\"line\":\"dBV = x => dB(0.5 x) V\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.1. When used to measure amplitude, voltage, or current the signal is squared\\nbecause power is proportional to the square of these measures. The root\\nmean square (RMS) voltage is typically used with these units.\"],\"comment\":\"Reference = 1 V\"}},{\"line\":\"dBV^-1 = dBV => ~dB(dBV^2 / V^2)\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.1. When used to measure amplitude, voltage, or current the signal is squared\\nbecause power is proportional to the square of these measures. The root\\nmean square (RMS) voltage is typically used with these units.\"],\"comment\":\"Reference = 1 V\"}},{\"line\":\"dBmV = x => dB(0.5 x) mV\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.1. When used to measure amplitude, voltage, or current the signal is squared\\nbecause power is proportional to the square of these measures. The root\\nmean square (RMS) voltage is typically used with these units.\"],\"comment\":\"Reference = 1 mV\"}},{\"line\":\"dBmV^-1 = dBmV => ~dB(dBmV^2/mV^2)\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.1. When used to measure amplitude, voltage, or current the signal is squared\\nbecause power is proportional to the square of these measures. The root\\nmean square (RMS) voltage is typically used with these units.\"],\"comment\":\"Reference = 1 mV\"}},{\"line\":\"dBuV = x => dB(0.5 x) microV \",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.1. When used to measure amplitude, voltage, or current the signal is squared\\nbecause power is proportional to the square of these measures. The root\\nmean square (RMS) voltage is typically used with these units.\"],\"comment\":\"Reference = 1 microvolt\"}},{\"line\":\"dBuV^-1 = dBuV => ~dB(dBuV^2 / microV^2)\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.1. When used to measure amplitude, voltage, or current the signal is squared\\nbecause power is proportional to the square of these measures. The root\\nmean square (RMS) voltage is typically used with these units.\"],\"comment\":\"Reference = 1 microvolt\"}},{\"line\":\"dBu = x => dB(0.5 x) sqrt(mW 600 ohm) \",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.2. Referenced to the voltage that causes 1 mW dissipation in a 600 ohm load.\\nOriginally defined as dBv but changed to prevent confusion with dBV.\\nThe \\\"u\\\" is for unloaded.\"],\"comment\":\"\"}},{\"line\":\"dBu^-1 = dBu => ~dB(dBu^2 / mW 600 ohm)\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.2. Referenced to the voltage that causes 1 mW dissipation in a 600 ohm load.\\nOriginally defined as dBv but changed to prevent confusion with dBV.\\nThe \\\"u\\\" is for unloaded.\"],\"comment\":\"\"}},{\"line\":\"dBv = x => dBu(x) \",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.2. Referenced to the voltage that causes 1 mW dissipation in a 600 ohm load.\\nOriginally defined as dBv but changed to prevent confusion with dBV.\\nThe \\\"u\\\" is for unloaded.\"],\"comment\":\"Synonym for dBu\"}},{\"line\":\"dBv^-1 = dBv => ~dBu(dBv)\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.2. Referenced to the voltage that causes 1 mW dissipation in a 600 ohm load.\\nOriginally defined as dBv but changed to prevent confusion with dBV.\\nThe \\\"u\\\" is for unloaded.\"],\"comment\":\"Synonym for dBu\"}},{\"line\":\"dBSPL = x => dB(0.5 x) 20 microPa \",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.3. Measurements for sound in air, referenced to the threshold of human hearing\\nNote that sound in other media typically uses 1 micropascal as a reference\\nfor sound pressure. Units dBA, dBB, dBC, refer to different frequency\\nweightings meant to approximate the human ear's response.\"],\"comment\":\"pressure\"}},{\"line\":\"dBSPL^-1 = dBSPL => ~dB(dBSPL^2 / (20 microPa)^2)\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.3. Measurements for sound in air, referenced to the threshold of human hearing\\nNote that sound in other media typically uses 1 micropascal as a reference\\nfor sound pressure. Units dBA, dBB, dBC, refer to different frequency\\nweightings meant to approximate the human ear's response.\"],\"comment\":\"pressure\"}},{\"line\":\"dBSIL = x => dB(x) 1e-12 W/m^2\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.3. Measurements for sound in air, referenced to the threshold of human hearing\\nNote that sound in other media typically uses 1 micropascal as a reference\\nfor sound pressure. Units dBA, dBB, dBC, refer to different frequency\\nweightings meant to approximate the human ear's response.\"],\"comment\":\"intensity\"}},{\"line\":\"dBSIL^-1 = dBSIL => ~dB(dBSIL / (1e-12 W/m^2))\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.3. Measurements for sound in air, referenced to the threshold of human hearing\\nNote that sound in other media typically uses 1 micropascal as a reference\\nfor sound pressure. Units dBA, dBB, dBC, refer to different frequency\\nweightings meant to approximate the human ear's response.\"],\"comment\":\"intensity\"}},{\"line\":\"dBSWL = x => dB(x) 1e-12 W\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.3. Measurements for sound in air, referenced to the threshold of human hearing\\nNote that sound in other media typically uses 1 micropascal as a reference\\nfor sound pressure. Units dBA, dBB, dBC, refer to different frequency\\nweightings meant to approximate the human ear's response.\"],\"comment\":\"\"}},{\"line\":\"dBSWL^-1 = dBSWL => ~dB(dBSWL/1e-12 W)\",\"info\":{\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.3. Measurements for sound in air, referenced to the threshold of human hearing\\nNote that sound in other media typically uses 1 micropascal as a reference\\nfor sound pressure. Units dBA, dBB, dBC, refer to different frequency\\nweightings meant to approximate the human ear's response.\"],\"comment\":\"\"}},{\"line\":\"ENTROPY = ENERGY / TEMPERATURE\",\"info\":{\"headings\":[\"12. Misc other measures\"],\"comment\":\"\"}},{\"line\":\"clausius = 1e3 cal/K\",\"info\":{\"headings\":[\"12. Misc other measures\"],\"comment\":\"A unit of physical entropy\"}},{\"line\":\"langley = thermcalorie/cm^2\",\"info\":{\"headings\":[\"12. Misc other measures\"],\"comment\":\"Used in radiation theory\"}},{\"line\":\"poncelet = 100 kg force m / s\",\"info\":{\"headings\":[\"12. Misc other measures\"],\"comment\":\"\"}},{\"line\":\"tonrefrigeration = uston 144 btu / lb day\",\"info\":{\"headings\":[\"12. Misc other measures\"],\"comment\":\"One ton refrigeration is\\nthe rate of heat extraction required\\nturn one ton of water to ice in\\na day.  Ice is defined to have a\\nlatent heat of 144 btu/lb.\"}},{\"line\":\"tonref = tonrefrigeration\",\"info\":{\"headings\":[\"12. Misc other measures\"],\"comment\":\"One ton refrigeration is\\nthe rate of heat extraction required\\nturn one ton of water to ice in\\na day.  Ice is defined to have a\\nlatent heat of 144 btu/lb.\"}},{\"line\":\"refrigeration = tonref / ton\",\"info\":{\"headings\":[\"12. Misc other measures\"],\"comment\":\"\"}},{\"line\":\"frigorie = 1000 cal_fifteen\",\"info\":{\"headings\":[\"12. Misc other measures\"],\"comment\":\"Used in refrigeration engineering.\"}},{\"line\":\"tnt = 1e9 cal_th / ton\",\"info\":{\"headings\":[\"12. Misc other measures\"],\"comment\":\"So you can write tons tnt. This\\nis a defined, not measured, value.\"}},{\"line\":\"airwatt = 8.5 (ft^3/min) inH2O\",\"info\":{\"headings\":[\"12. Misc other measures\"],\"comment\":\"Measure of vacuum power as\\npressure times air flow.\"}},{\"line\":\"perm_0C = grain / hr ft^2 inHg\",\"info\":{\"headings\":[\"13. Permeability: The permeability or permeance, n, of a substance determines\\nhow fast vapor flows through the substance. The formula W = n A dP\\nholds where W is the rate of flow (in mass/time), n is the permeability,\\nA is the area of the flow path, and dP is the vapor pressure difference.\"],\"comment\":\"\"}},{\"line\":\"perm_zero = perm_0C\",\"info\":{\"headings\":[\"13. Permeability: The permeability or permeance, n, of a substance determines\\nhow fast vapor flows through the substance. The formula W = n A dP\\nholds where W is the rate of flow (in mass/time), n is the permeability,\\nA is the area of the flow path, and dP is the vapor pressure difference.\"],\"comment\":\"\"}},{\"line\":\"perm_0 = perm_0C\",\"info\":{\"headings\":[\"13. Permeability: The permeability or permeance, n, of a substance determines\\nhow fast vapor flows through the substance. The formula W = n A dP\\nholds where W is the rate of flow (in mass/time), n is the permeability,\\nA is the area of the flow path, and dP is the vapor pressure difference.\"],\"comment\":\"\"}},{\"line\":\"perm = perm_0C\",\"info\":{\"headings\":[\"13. Permeability: The permeability or permeance, n, of a substance determines\\nhow fast vapor flows through the substance. The formula W = n A dP\\nholds where W is the rate of flow (in mass/time), n is the permeability,\\nA is the area of the flow path, and dP is the vapor pressure difference.\"],\"comment\":\"\"}},{\"line\":\"perm_23C = grain / hr ft^2 in Hg23C\",\"info\":{\"headings\":[\"13. Permeability: The permeability or permeance, n, of a substance determines\\nhow fast vapor flows through the substance. The formula W = n A dP\\nholds where W is the rate of flow (in mass/time), n is the permeability,\\nA is the area of the flow path, and dP is the vapor pressure difference.\"],\"comment\":\"\"}},{\"line\":\"perm_twentythree = perm_23C\",\"info\":{\"headings\":[\"13. Permeability: The permeability or permeance, n, of a substance determines\\nhow fast vapor flows through the substance. The formula W = n A dP\\nholds where W is the rate of flow (in mass/time), n is the permeability,\\nA is the area of the flow path, and dP is the vapor pressure difference.\"],\"comment\":\"\"}},{\"line\":\"pair = 2\",\"info\":{\"headings\":[\"14. Counting measures\"],\"comment\":\"\"}},{\"line\":\"brace = 2\",\"info\":{\"headings\":[\"14. Counting measures\"],\"comment\":\"\"}},{\"line\":\"nest = 3\",\"info\":{\"headings\":[\"14. Counting measures\"],\"comment\":\"often used for items like bowls that\\nnest together\\nUsed in sports, especially cricket and ice\\nhockey to report the number of goals.\"}},{\"line\":\"hattrick = 3\",\"info\":{\"headings\":[\"14. Counting measures\"],\"comment\":\"often used for items like bowls that\\nnest together\\nUsed in sports, especially cricket and ice\\nhockey to report the number of goals.\"}},{\"line\":\"dicker = 10\",\"info\":{\"headings\":[\"14. Counting measures\"],\"comment\":\"\"}},{\"line\":\"dozen = 12\",\"info\":{\"headings\":[\"14. Counting measures\"],\"comment\":\"\"}},{\"line\":\"bakersdozen = 13\",\"info\":{\"headings\":[\"14. Counting measures\"],\"comment\":\"\"}},{\"line\":\"score = 20\",\"info\":{\"headings\":[\"14. Counting measures\"],\"comment\":\"\"}},{\"line\":\"flock = 40\",\"info\":{\"headings\":[\"14. Counting measures\"],\"comment\":\"\"}},{\"line\":\"timer = 40\",\"info\":{\"headings\":[\"14. Counting measures\"],\"comment\":\"\"}},{\"line\":\"shock = 60\",\"info\":{\"headings\":[\"14. Counting measures\"],\"comment\":\"\"}},{\"line\":\"toncount = 100\",\"info\":{\"headings\":[\"14. Counting measures\"],\"comment\":\"Used in sports in the UK\"}},{\"line\":\"longhundred = 120\",\"info\":{\"headings\":[\"14. Counting measures\"],\"comment\":\"From a germanic counting system\"}},{\"line\":\"gross = 144\",\"info\":{\"headings\":[\"14. Counting measures\"],\"comment\":\"\"}},{\"line\":\"greatgross = 12 gross\",\"info\":{\"headings\":[\"14. Counting measures\"],\"comment\":\"\"}},{\"line\":\"tithe = 1|10\",\"info\":{\"headings\":[\"14. Counting measures\"],\"comment\":\"From Anglo-Saxon word for tenth\"}},{\"line\":\"shortquire = 24\",\"info\":{\"headings\":[\"15. Paper counting measure\"],\"comment\":\"\"}},{\"line\":\"quire = 25\",\"info\":{\"headings\":[\"15. Paper counting measure\"],\"comment\":\"\"}},{\"line\":\"shortream = 480\",\"info\":{\"headings\":[\"15. Paper counting measure\"],\"comment\":\"\"}},{\"line\":\"ream = 500\",\"info\":{\"headings\":[\"15. Paper counting measure\"],\"comment\":\"\"}},{\"line\":\"perfectream = 516\",\"info\":{\"headings\":[\"15. Paper counting measure\"],\"comment\":\"\"}},{\"line\":\"bundle = 2 reams\",\"info\":{\"headings\":[\"15. Paper counting measure\"],\"comment\":\"\"}},{\"line\":\"bale = 5 bundles\",\"info\":{\"headings\":[\"15. Paper counting measure\"],\"comment\":\"\"}},{\"line\":\"lettersize = 8.5 inch 11 inch\",\"info\":{\"headings\":[\"17. USA paper sizes\"],\"comment\":\"\"}},{\"line\":\"legalsize = 8.5 inch 14 inch\",\"info\":{\"headings\":[\"17. USA paper sizes\"],\"comment\":\"\"}},{\"line\":\"ledgersize = 11 inch 17 inch\",\"info\":{\"headings\":[\"17. USA paper sizes\"],\"comment\":\"\"}},{\"line\":\"executivesize = 7.25 inch 10.5 inch\",\"info\":{\"headings\":[\"17. USA paper sizes\"],\"comment\":\"\"}},{\"line\":\"Apaper = 8.5 inch 11 inch\",\"info\":{\"headings\":[\"17. USA paper sizes\"],\"comment\":\"\"}},{\"line\":\"Bpaper = 11 inch 17 inch\",\"info\":{\"headings\":[\"17. USA paper sizes\"],\"comment\":\"\"}},{\"line\":\"Cpaper = 17 inch 22 inch\",\"info\":{\"headings\":[\"17. USA paper sizes\"],\"comment\":\"\"}},{\"line\":\"Dpaper = 22 inch 34 inch\",\"info\":{\"headings\":[\"17. USA paper sizes\"],\"comment\":\"\"}},{\"line\":\"Epaper = 34 inch 44 inch\",\"info\":{\"headings\":[\"17. USA paper sizes\"],\"comment\":\"\"}},{\"line\":\"envelope6_25size = 3.5 inch 6 inch\",\"info\":{\"headings\":[\"18. Correspondence envelope sizes. 10 is the standard business\\nenvelope in the USA.\"],\"comment\":\"\"}},{\"line\":\"envelope6_75size = 3.625 inch 6.5 inch\",\"info\":{\"headings\":[\"18. Correspondence envelope sizes. 10 is the standard business\\nenvelope in the USA.\"],\"comment\":\"\"}},{\"line\":\"envelope7size = 3.75 inch 6.75 inch\",\"info\":{\"headings\":[\"18. Correspondence envelope sizes. 10 is the standard business\\nenvelope in the USA.\"],\"comment\":\"\"}},{\"line\":\"envelope7_75size = 3.875 inch 7.5 inch\",\"info\":{\"headings\":[\"18. Correspondence envelope sizes. 10 is the standard business\\nenvelope in the USA.\"],\"comment\":\"\"}},{\"line\":\"envelope8_625size = 3.625 inch 8.625 inch\",\"info\":{\"headings\":[\"18. Correspondence envelope sizes. 10 is the standard business\\nenvelope in the USA.\"],\"comment\":\"\"}},{\"line\":\"envelope9size = 3.875 inch 8.875 inch\",\"info\":{\"headings\":[\"18. Correspondence envelope sizes. 10 is the standard business\\nenvelope in the USA.\"],\"comment\":\"\"}},{\"line\":\"envelope10size = 4.125 inch 9.5 inch\",\"info\":{\"headings\":[\"18. Correspondence envelope sizes. 10 is the standard business\\nenvelope in the USA.\"],\"comment\":\"\"}},{\"line\":\"envelope11size = 4.5 inch 10.375 inch\",\"info\":{\"headings\":[\"18. Correspondence envelope sizes. 10 is the standard business\\nenvelope in the USA.\"],\"comment\":\"\"}},{\"line\":\"envelope12size = 4.75 inch 11 inch\",\"info\":{\"headings\":[\"18. Correspondence envelope sizes. 10 is the standard business\\nenvelope in the USA.\"],\"comment\":\"\"}},{\"line\":\"envelope14size = 5 inch 11.5 inch\",\"info\":{\"headings\":[\"18. Correspondence envelope sizes. 10 is the standard business\\nenvelope in the USA.\"],\"comment\":\"\"}},{\"line\":\"envelope16size = 6 inch 12 inch\",\"info\":{\"headings\":[\"18. Correspondence envelope sizes. 10 is the standard business\\nenvelope in the USA.\"],\"comment\":\"\"}},{\"line\":\"envelopeA1size = 3.625 inch 5.125 inch\",\"info\":{\"headings\":[\"19. Announcement envelope sizes (no relation to metric paper sizes like A4)\"],\"comment\":\"same as 4bar\"}},{\"line\":\"envelopeA2size = 4.375 inch 5.75 inch\",\"info\":{\"headings\":[\"19. Announcement envelope sizes (no relation to metric paper sizes like A4)\"],\"comment\":\"\"}},{\"line\":\"envelopeA6size = 4.75 inch 6.5 inch\",\"info\":{\"headings\":[\"19. Announcement envelope sizes (no relation to metric paper sizes like A4)\"],\"comment\":\"\"}},{\"line\":\"envelopeA7size = 5.25 inch 7.25 inch\",\"info\":{\"headings\":[\"19. Announcement envelope sizes (no relation to metric paper sizes like A4)\"],\"comment\":\"\"}},{\"line\":\"envelopeA8size = 5.5 inch 8.125 inch\",\"info\":{\"headings\":[\"19. Announcement envelope sizes (no relation to metric paper sizes like A4)\"],\"comment\":\"\"}},{\"line\":\"envelopeA9size = 5.75 inch 8.75 inch\",\"info\":{\"headings\":[\"19. Announcement envelope sizes (no relation to metric paper sizes like A4)\"],\"comment\":\"\"}},{\"line\":\"envelopeA10size = 6 inch 9.5 inch\",\"info\":{\"headings\":[\"19. Announcement envelope sizes (no relation to metric paper sizes like A4)\"],\"comment\":\"\"}},{\"line\":\"envelope4bar = 3.625 inch 5.125 inch\",\"info\":{\"headings\":[\"20. Baronial envelopes\"],\"comment\":\"same as A1\"}},{\"line\":\"envelope5_5bar = 4.375 inch 5.75 inch\",\"info\":{\"headings\":[\"20. Baronial envelopes\"],\"comment\":\"\"}},{\"line\":\"envelope6bar = 4.75 inch 6.5 inch\",\"info\":{\"headings\":[\"20. Baronial envelopes\"],\"comment\":\"\"}},{\"line\":\"envelope1baby = 2.25 inch 3.5 inch\",\"info\":{\"headings\":[\"21. Coin envelopes\"],\"comment\":\"same as\"}},{\"line\":\"envelope00coin = 1.6875 inch 2.75 inch\",\"info\":{\"headings\":[\"21. Coin envelopes\"],\"comment\":\"\"}},{\"line\":\"envelope1coin = 2.25 inch 3.5 inch\",\"info\":{\"headings\":[\"21. Coin envelopes\"],\"comment\":\"\"}},{\"line\":\"envelope3coin = 2.5 inch 4.25 inch\",\"info\":{\"headings\":[\"21. Coin envelopes\"],\"comment\":\"\"}},{\"line\":\"envelope4coin = 3 inch 4.5 inch\",\"info\":{\"headings\":[\"21. Coin envelopes\"],\"comment\":\"\"}},{\"line\":\"envelope4_5coin = 3 inch 4.875 inch\",\"info\":{\"headings\":[\"21. Coin envelopes\"],\"comment\":\"\"}},{\"line\":\"envelope5coin = 2.875 inch 5.25 inch\",\"info\":{\"headings\":[\"21. Coin envelopes\"],\"comment\":\"\"}},{\"line\":\"envelope5_5coin = 3.125 inch 5.5 inch\",\"info\":{\"headings\":[\"21. Coin envelopes\"],\"comment\":\"\"}},{\"line\":\"envelope6coin = 3.375 inch 6 inch\",\"info\":{\"headings\":[\"21. Coin envelopes\"],\"comment\":\"\"}},{\"line\":\"envelope7coin = 3.5 inch 6.5 inch\",\"info\":{\"headings\":[\"21. Coin envelopes\"],\"comment\":\"\"}},{\"line\":\"A0paper = 841 mm 1189 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic size in the A series\\nis defined to have an area of\\none square meter.\"}},{\"line\":\"A1paper = 594 mm  841 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic size in the A series\\nis defined to have an area of\\none square meter.\"}},{\"line\":\"A2paper = 420 mm  594 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic size in the A series\\nis defined to have an area of\\none square meter.\"}},{\"line\":\"A3paper = 297 mm  420 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic size in the A series\\nis defined to have an area of\\none square meter.\"}},{\"line\":\"A4paper = 210 mm  297 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic size in the A series\\nis defined to have an area of\\none square meter.\"}},{\"line\":\"A5paper = 148 mm  210 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic size in the A series\\nis defined to have an area of\\none square meter.\"}},{\"line\":\"A6paper = 105 mm  148 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic size in the A series\\nis defined to have an area of\\none square meter.\"}},{\"line\":\"A7paper = 74 mm  105 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic size in the A series\\nis defined to have an area of\\none square meter.\"}},{\"line\":\"A8paper = 52 mm   74 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic size in the A series\\nis defined to have an area of\\none square meter.\"}},{\"line\":\"A9paper = 37 mm   52 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic size in the A series\\nis defined to have an area of\\none square meter.\"}},{\"line\":\"A10paper = 26 mm   37 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic size in the A series\\nis defined to have an area of\\none square meter.\"}},{\"line\":\"B0paper = 1000 mm 1414 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic B size has an area\\nof sqrt(2) square meters.\"}},{\"line\":\"B1paper = 707 mm 1000 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic B size has an area\\nof sqrt(2) square meters.\"}},{\"line\":\"B2paper = 500 mm  707 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic B size has an area\\nof sqrt(2) square meters.\"}},{\"line\":\"B3paper = 353 mm  500 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic B size has an area\\nof sqrt(2) square meters.\"}},{\"line\":\"B4paper = 250 mm  353 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic B size has an area\\nof sqrt(2) square meters.\"}},{\"line\":\"B5paper = 176 mm  250 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic B size has an area\\nof sqrt(2) square meters.\"}},{\"line\":\"B6paper = 125 mm  176 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic B size has an area\\nof sqrt(2) square meters.\"}},{\"line\":\"B7paper = 88 mm  125 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic B size has an area\\nof sqrt(2) square meters.\"}},{\"line\":\"B8paper = 62 mm   88 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic B size has an area\\nof sqrt(2) square meters.\"}},{\"line\":\"B9paper = 44 mm   62 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic B size has an area\\nof sqrt(2) square meters.\"}},{\"line\":\"B10paper = 31 mm   44 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic B size has an area\\nof sqrt(2) square meters.\"}},{\"line\":\"C0paper = 917 mm 1297 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic C size has an area\\nof sqrt(sqrt(2)) square meters.\\n\\nIntended for envelope sizes\"}},{\"line\":\"C1paper = 648 mm  917 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic C size has an area\\nof sqrt(sqrt(2)) square meters.\\n\\nIntended for envelope sizes\"}},{\"line\":\"C2paper = 458 mm  648 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic C size has an area\\nof sqrt(sqrt(2)) square meters.\\n\\nIntended for envelope sizes\"}},{\"line\":\"C3paper = 324 mm  458 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic C size has an area\\nof sqrt(sqrt(2)) square meters.\\n\\nIntended for envelope sizes\"}},{\"line\":\"C4paper = 229 mm  324 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic C size has an area\\nof sqrt(sqrt(2)) square meters.\\n\\nIntended for envelope sizes\"}},{\"line\":\"C5paper = 162 mm  229 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic C size has an area\\nof sqrt(sqrt(2)) square meters.\\n\\nIntended for envelope sizes\"}},{\"line\":\"C6paper = 114 mm  162 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic C size has an area\\nof sqrt(sqrt(2)) square meters.\\n\\nIntended for envelope sizes\"}},{\"line\":\"C7paper = 81 mm  114 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic C size has an area\\nof sqrt(sqrt(2)) square meters.\\n\\nIntended for envelope sizes\"}},{\"line\":\"C8paper = 57 mm   81 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic C size has an area\\nof sqrt(sqrt(2)) square meters.\\n\\nIntended for envelope sizes\"}},{\"line\":\"C9paper = 40 mm   57 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic C size has an area\\nof sqrt(sqrt(2)) square meters.\\n\\nIntended for envelope sizes\"}},{\"line\":\"C10paper = 28 mm   40 mm\",\"info\":{\"headings\":[\"22. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic C size has an area\\nof sqrt(sqrt(2)) square meters.\\n\\nIntended for envelope sizes\"}},{\"line\":\"gsm = grams / meter^2\",\"info\":{\"headings\":[\"23. gsm (Grams per Square Meter), a sane, metric paper weight measure\"],\"comment\":\"\"}},{\"line\":\"poundbookpaper = lb / 25 inch 38 inch ream\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"For offset printing\\n\\nDesigned to be lightweight, thin,\\nstrong and opaque.\"}},{\"line\":\"lbbook = poundbookpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"For offset printing\\n\\nDesigned to be lightweight, thin,\\nstrong and opaque.\"}},{\"line\":\"poundtextpaper = poundbookpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"For offset printing\\n\\nDesigned to be lightweight, thin,\\nstrong and opaque.\"}},{\"line\":\"lbtext = poundtextpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"For offset printing\\n\\nDesigned to be lightweight, thin,\\nstrong and opaque.\"}},{\"line\":\"poundoffsetpaper = poundbookpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"For offset printing\\n\\nDesigned to be lightweight, thin,\\nstrong and opaque.\"}},{\"line\":\"lboffset = poundoffsetpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"For offset printing\\n\\nDesigned to be lightweight, thin,\\nstrong and opaque.\"}},{\"line\":\"poundbiblepaper = poundbookpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"For offset printing\\n\\nDesigned to be lightweight, thin,\\nstrong and opaque.\"}},{\"line\":\"lbbible = poundbiblepaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"For offset printing\\n\\nDesigned to be lightweight, thin,\\nstrong and opaque.\"}},{\"line\":\"poundtagpaper = lb / 24 inch 36 inch ream\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbtag = poundtagpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundbagpaper = poundtagpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbbag = poundbagpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundnewsprintpaper = poundtagpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbnewsprint = poundnewsprintpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundposterpaper = poundtagpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbposter = poundposterpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundtissuepaper = poundtagpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbtissue = poundtissuepaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundwrappingpaper = poundtagpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbwrapping = poundwrappingpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundwaxingpaper = poundtagpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbwaxing = poundwaxingpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundglassinepaper = poundtagpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbglassine = poundglassinepaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundcoverpaper = lb / 20 inch 26 inch ream\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbcover = poundcoverpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundindexpaper = lb / 25.5 inch 30.5 inch ream\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbindex = poundindexpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundindexbristolpaper = poundindexpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbindexbristol = poundindexpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundbondpaper = lb / 17 inch 22 inch ream\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"Bond paper is stiff and\\ndurable for repeated\\nfiling, and it resists\\nink penetration.\"}},{\"line\":\"lbbond = poundbondpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"Bond paper is stiff and\\ndurable for repeated\\nfiling, and it resists\\nink penetration.\"}},{\"line\":\"poundwritingpaper = poundbondpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"Bond paper is stiff and\\ndurable for repeated\\nfiling, and it resists\\nink penetration.\"}},{\"line\":\"lbwriting = poundwritingpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"Bond paper is stiff and\\ndurable for repeated\\nfiling, and it resists\\nink penetration.\"}},{\"line\":\"poundledgerpaper = poundbondpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"Bond paper is stiff and\\ndurable for repeated\\nfiling, and it resists\\nink penetration.\"}},{\"line\":\"lbledger = poundledgerpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"Bond paper is stiff and\\ndurable for repeated\\nfiling, and it resists\\nink penetration.\"}},{\"line\":\"poundcopypaper = poundbondpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"Bond paper is stiff and\\ndurable for repeated\\nfiling, and it resists\\nink penetration.\"}},{\"line\":\"lbcopy = poundcopypaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"Bond paper is stiff and\\ndurable for repeated\\nfiling, and it resists\\nink penetration.\"}},{\"line\":\"poundblottingpaper = lb / 19 inch 24 inch ream\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbblotting = poundblottingpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundblankspaper = lb / 22 inch 28 inch ream\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbblanks = poundblankspaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundpostcardpaper = lb / 22.5 inch 28.5 inch ream\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbpostcard = poundpostcardpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundweddingbristol = poundpostcardpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbweddingbristol = poundweddingbristol\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundbristolpaper = poundweddingbristol\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbbristol = poundbristolpaper\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundboxboard = lb / 1000 ft^2\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbboxboard = poundboxboard\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundpaperboard = poundboxboard\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbpaperboard = poundpaperboard\",\"info\":{\"headings\":[\"24. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"paperM = lb / 1000\",\"info\":{\"headings\":[\"25. When paper is marked in units of M, it means the weight of 1000 sheets of the\\ngiven size of paper. To convert this to paper weight, divide by the size of\\nthe paper in question.\"],\"comment\":\"\"}},{\"line\":\"pointthickness = 0.001 in\",\"info\":{\"headings\":[\"26. In addition paper weight is reported in \\\"caliper\\\" which is simply the\\nthickness of one sheet, typically in inches. Thickness is also reported in\\n\\\"points\\\" where a point is 1|1000 inch. These conversions are supplied to\\nconvert these units roughly (using an approximate density) into the standard\\npaper weight values.\"],\"comment\":\"\"}},{\"line\":\"paperdensity = 0.8 g/cm^3\",\"info\":{\"headings\":[\"26. In addition paper weight is reported in \\\"caliper\\\" which is simply the\\nthickness of one sheet, typically in inches. Thickness is also reported in\\n\\\"points\\\" where a point is 1|1000 inch. These conversions are supplied to\\nconvert these units roughly (using an approximate density) into the standard\\npaper weight values.\"],\"comment\":\"approximate--paper densities vary!\"}},{\"line\":\"papercaliper = in paperdensity\",\"info\":{\"headings\":[\"26. In addition paper weight is reported in \\\"caliper\\\" which is simply the\\nthickness of one sheet, typically in inches. Thickness is also reported in\\n\\\"points\\\" where a point is 1|1000 inch. These conversions are supplied to\\nconvert these units roughly (using an approximate density) into the standard\\npaper weight values.\"],\"comment\":\"\"}},{\"line\":\"paperpoint = pointthickness paperdensity\",\"info\":{\"headings\":[\"26. In addition paper weight is reported in \\\"caliper\\\" which is simply the\\nthickness of one sheet, typically in inches. Thickness is also reported in\\n\\\"points\\\" where a point is 1|1000 inch. These conversions are supplied to\\nconvert these units roughly (using an approximate density) into the standard\\npaper weight values.\"],\"comment\":\"\"}},{\"line\":\"fournierpoint = 0.1648 inch / 12\",\"info\":{\"headings\":[\"27. Printing\"],\"comment\":\"First definition of the printers\\npoint made by Pierre Fournier who\\ndefined it in 1737 as 1|12 of a\\ncicero which was 0.1648 inches.\"}},{\"line\":\"olddidotpoint = 1|72 frenchinch\",\"info\":{\"headings\":[\"27. Printing\"],\"comment\":\"François Ambroise Didot, one of\\na family of printers, changed\\nFournier's definition around 1770\\nto fit to the French units then in\\nuse.\"}},{\"line\":\"bertholdpoint = 1|2660 m\",\"info\":{\"headings\":[\"27. Printing\"],\"comment\":\"H. Berthold tried to create a\\nmetric version of the didot point\\nin 1878.\"}},{\"line\":\"INpoint = 0.4 mm\",\"info\":{\"headings\":[\"27. Printing\"],\"comment\":\"This point was created by a\\ngroup directed by Fermin Didot in\\n1881 and is associated with the\\nimprimerie nationale.  It doesn't\\nseem to have been used much.\"}},{\"line\":\"germandidotpoint = 0.376065 mm\",\"info\":{\"headings\":[\"27. Printing\"],\"comment\":\"Exact definition appears in DIN\\n16507, a German standards document\\nof 1954.  Adopted more broadly  in\\n1966 by ???\"}},{\"line\":\"metricpoint = 3|8 mm\",\"info\":{\"headings\":[\"27. Printing\"],\"comment\":\"Proposed in 1977 by Eurograf\"}},{\"line\":\"oldpoint = 1|72.27 inch\",\"info\":{\"headings\":[\"27. Printing\"],\"comment\":\"The American point was invented\\nby Nelson Hawks in 1879 and\\ndominates USA publishing.\\nIt was standardized by the American\\nTypefounders Association at the\\nvalue of 0.013837 inches exactly.\\nKnuth uses the approximation given\\nhere (which is very close).  The\\ncomp.fonts FAQ claims that this\\nvalue is supposed to be 1|12 of a\\npica where 83 picas is equal to 35\\ncm.  But this value differs from\\nthe standard.\"}},{\"line\":\"printerspoint = oldpoint\",\"info\":{\"headings\":[\"27. Printing\"],\"comment\":\"The American point was invented\\nby Nelson Hawks in 1879 and\\ndominates USA publishing.\\nIt was standardized by the American\\nTypefounders Association at the\\nvalue of 0.013837 inches exactly.\\nKnuth uses the approximation given\\nhere (which is very close).  The\\ncomp.fonts FAQ claims that this\\nvalue is supposed to be 1|12 of a\\npica where 83 picas is equal to 35\\ncm.  But this value differs from\\nthe standard.\"}},{\"line\":\"texpoint = oldpoint\",\"info\":{\"headings\":[\"27. Printing\"],\"comment\":\"The American point was invented\\nby Nelson Hawks in 1879 and\\ndominates USA publishing.\\nIt was standardized by the American\\nTypefounders Association at the\\nvalue of 0.013837 inches exactly.\\nKnuth uses the approximation given\\nhere (which is very close).  The\\ncomp.fonts FAQ claims that this\\nvalue is supposed to be 1|12 of a\\npica where 83 picas is equal to 35\\ncm.  But this value differs from\\nthe standard.\"}},{\"line\":\"texscaledpoint = 1|65536 texpoint\",\"info\":{\"headings\":[\"27. Printing\"],\"comment\":\"The TeX typesetting system uses\\nthis for all computations.\"}},{\"line\":\"texsp = texscaledpoint\",\"info\":{\"headings\":[\"27. Printing\"],\"comment\":\"The TeX typesetting system uses\\nthis for all computations.\"}},{\"line\":\"computerpoint = 1|72 inch\",\"info\":{\"headings\":[\"27. Printing\"],\"comment\":\"The American point was rounded\\n\\nto an even 1|72 inch by computer\\npeople at some point.\"}},{\"line\":\"point = computerpoint\",\"info\":{\"headings\":[\"27. Printing\"],\"comment\":\"The American point was rounded\\n\\nto an even 1|72 inch by computer\\npeople at some point.\"}},{\"line\":\"computerpica = 12 computerpoint\",\"info\":{\"headings\":[\"27. Printing\"],\"comment\":\"The American point was rounded\\n\\nto an even 1|72 inch by computer\\npeople at some point.\"}},{\"line\":\"postscriptpoint = computerpoint\",\"info\":{\"headings\":[\"27. Printing\"],\"comment\":\"The American point was rounded\\n\\nto an even 1|72 inch by computer\\npeople at some point.\"}},{\"line\":\"pspoint = postscriptpoint\",\"info\":{\"headings\":[\"27. Printing\"],\"comment\":\"The American point was rounded\\n\\nto an even 1|72 inch by computer\\npeople at some point.\"}},{\"line\":\"twip = 1|20 point\",\"info\":{\"headings\":[\"27. Printing\"],\"comment\":\"TWentieth of an Imperial Point\"}},{\"line\":\"Q = 1|4 mm\",\"info\":{\"headings\":[\"27. Printing\"],\"comment\":\"Used in Japanese phototypesetting\\nQ is for quarter\"}},{\"line\":\"frenchprinterspoint = olddidotpoint\",\"info\":{\"headings\":[\"27. Printing\"],\"comment\":\"\"}},{\"line\":\"didotpoint = germandidotpoint\",\"info\":{\"headings\":[\"27. Printing\"],\"comment\":\"This seems to be the dominant value\\nfor the point used in Europe\"}},{\"line\":\"europeanpoint = didotpoint\",\"info\":{\"headings\":[\"27. Printing\"],\"comment\":\"This seems to be the dominant value\\nfor the point used in Europe\"}},{\"line\":\"cicero = 12 didotpoint\",\"info\":{\"headings\":[\"27. Printing\"],\"comment\":\"\"}},{\"line\":\"stick = 2 inches\",\"info\":{\"headings\":[\"27. Printing\"],\"comment\":\"\"}},{\"line\":\"excelsior = 3 oldpoint\",\"info\":{\"headings\":[\"28. Type sizes\"],\"comment\":\"\"}},{\"line\":\"brilliant = 3.5 oldpoint\",\"info\":{\"headings\":[\"28. Type sizes\"],\"comment\":\"\"}},{\"line\":\"diamondtype = 4 oldpoint\",\"info\":{\"headings\":[\"28. Type sizes\"],\"comment\":\"\"}},{\"line\":\"pearl = 5 oldpoint\",\"info\":{\"headings\":[\"28. Type sizes\"],\"comment\":\"\"}},{\"line\":\"agate = 5.5 oldpoint\",\"info\":{\"headings\":[\"28. Type sizes\"],\"comment\":\"Originally agate type was 14 lines per\\ninch, giving a value of 1|14 in.\\nBritish\"}},{\"line\":\"ruby = agate\",\"info\":{\"headings\":[\"28. Type sizes\"],\"comment\":\"Originally agate type was 14 lines per\\ninch, giving a value of 1|14 in.\\nBritish\"}},{\"line\":\"nonpareil = 6 oldpoint\",\"info\":{\"headings\":[\"28. Type sizes\"],\"comment\":\"\"}},{\"line\":\"mignonette = 6.5 oldpoint\",\"info\":{\"headings\":[\"28. Type sizes\"],\"comment\":\"British\"}},{\"line\":\"emerald = mignonette\",\"info\":{\"headings\":[\"28. Type sizes\"],\"comment\":\"British\"}},{\"line\":\"minion = 7 oldpoint\",\"info\":{\"headings\":[\"28. Type sizes\"],\"comment\":\"\"}},{\"line\":\"brevier = 8 oldpoint\",\"info\":{\"headings\":[\"28. Type sizes\"],\"comment\":\"\"}},{\"line\":\"bourgeois = 9 oldpoint\",\"info\":{\"headings\":[\"28. Type sizes\"],\"comment\":\"\"}},{\"line\":\"longprimer = 10 oldpoint\",\"info\":{\"headings\":[\"28. Type sizes\"],\"comment\":\"\"}},{\"line\":\"smallpica = 11 oldpoint\",\"info\":{\"headings\":[\"28. Type sizes\"],\"comment\":\"\"}},{\"line\":\"pica = 12 oldpoint\",\"info\":{\"headings\":[\"28. Type sizes\"],\"comment\":\"\"}},{\"line\":\"english = 14 oldpoint\",\"info\":{\"headings\":[\"28. Type sizes\"],\"comment\":\"\"}},{\"line\":\"columbian = 16 oldpoint\",\"info\":{\"headings\":[\"28. Type sizes\"],\"comment\":\"\"}},{\"line\":\"greatprimer = 18 oldpoint\",\"info\":{\"headings\":[\"28. Type sizes\"],\"comment\":\"\"}},{\"line\":\"paragon = 20 oldpoint\",\"info\":{\"headings\":[\"28. Type sizes\"],\"comment\":\"\"}},{\"line\":\"meridian = 44 oldpoint\",\"info\":{\"headings\":[\"28. Type sizes\"],\"comment\":\"\"}},{\"line\":\"canon = 48 oldpoint\",\"info\":{\"headings\":[\"28. Type sizes\"],\"comment\":\"\"}},{\"line\":\"nonplusultra = 2 didotpoint\",\"info\":{\"headings\":[\"29. German type sizes\"],\"comment\":\"\"}},{\"line\":\"brillant = 3 didotpoint\",\"info\":{\"headings\":[\"29. German type sizes\"],\"comment\":\"\"}},{\"line\":\"diamant = 4 didotpoint\",\"info\":{\"headings\":[\"29. German type sizes\"],\"comment\":\"\"}},{\"line\":\"perl = 5 didotpoint\",\"info\":{\"headings\":[\"29. German type sizes\"],\"comment\":\"\"}},{\"line\":\"nonpareille = 6 didotpoint\",\"info\":{\"headings\":[\"29. German type sizes\"],\"comment\":\"\"}},{\"line\":\"kolonel = 7 didotpoint\",\"info\":{\"headings\":[\"29. German type sizes\"],\"comment\":\"\"}},{\"line\":\"petit = 8 didotpoint\",\"info\":{\"headings\":[\"29. German type sizes\"],\"comment\":\"\"}},{\"line\":\"borgis = 9 didotpoint\",\"info\":{\"headings\":[\"29. German type sizes\"],\"comment\":\"\"}},{\"line\":\"korpus = 10 didotpoint\",\"info\":{\"headings\":[\"29. German type sizes\"],\"comment\":\"\"}},{\"line\":\"corpus = korpus\",\"info\":{\"headings\":[\"29. German type sizes\"],\"comment\":\"\"}},{\"line\":\"garamond = korpus\",\"info\":{\"headings\":[\"29. German type sizes\"],\"comment\":\"\"}},{\"line\":\"mittel = 14 didotpoint\",\"info\":{\"headings\":[\"29. German type sizes\"],\"comment\":\"\"}},{\"line\":\"tertia = 16 didotpoint\",\"info\":{\"headings\":[\"29. German type sizes\"],\"comment\":\"\"}},{\"line\":\"text = 18 didotpoint\",\"info\":{\"headings\":[\"29. German type sizes\"],\"comment\":\"\"}},{\"line\":\"kleine_kanon = 32 didotpoint\",\"info\":{\"headings\":[\"29. German type sizes\"],\"comment\":\"\"}},{\"line\":\"kanon = 36 didotpoint\",\"info\":{\"headings\":[\"29. German type sizes\"],\"comment\":\"\"}},{\"line\":\"grobe_kanon = 42 didotpoint\",\"info\":{\"headings\":[\"29. German type sizes\"],\"comment\":\"\"}},{\"line\":\"missal = 48 didotpoint\",\"info\":{\"headings\":[\"29. German type sizes\"],\"comment\":\"\"}},{\"line\":\"kleine_sabon = 72 didotpoint\",\"info\":{\"headings\":[\"29. German type sizes\"],\"comment\":\"\"}},{\"line\":\"grobe_sabon = 84 didotpoint\",\"info\":{\"headings\":[\"29. German type sizes\"],\"comment\":\"\"}},{\"line\":\"INFORMATION = bit\",\"info\":{\"headings\":[\"30. Information theory units. Note that the name \\\"entropy\\\" is used both\\nto measure information and as a physical quantity.\"],\"comment\":\"\"}},{\"line\":\"nat = (1/ln(2)) bits\",\"info\":{\"headings\":[\"30. Information theory units. Note that the name \\\"entropy\\\" is used both\\nto measure information and as a physical quantity.\"],\"comment\":\"Entropy measured base e\"}},{\"line\":\"hartley = log2(10) bits\",\"info\":{\"headings\":[\"30. Information theory units. Note that the name \\\"entropy\\\" is used both\\nto measure information and as a physical quantity.\"],\"comment\":\"Entropy of a uniformly\\ndistributed random variable\\nover 10 symbols.\\nfrom Decimal digIT\"}},{\"line\":\"ban = hartley\",\"info\":{\"headings\":[\"30. Information theory units. Note that the name \\\"entropy\\\" is used both\\nto measure information and as a physical quantity.\"],\"comment\":\"Entropy of a uniformly\\ndistributed random variable\\nover 10 symbols.\\nfrom Decimal digIT\"}},{\"line\":\"dit = hartley\",\"info\":{\"headings\":[\"30. Information theory units. Note that the name \\\"entropy\\\" is used both\\nto measure information and as a physical quantity.\"],\"comment\":\"Entropy of a uniformly\\ndistributed random variable\\nover 10 symbols.\\nfrom Decimal digIT\"}},{\"line\":\"bps = bit/sec\",\"info\":{\"headings\":[\"31. Computer\"],\"comment\":\"Sometimes the term \\\"baud\\\" is\\nincorrectly used to refer to\\nbits per second.  Baud refers\\nto symbols per second.  Modern\\nmodems transmit several bits\\nper symbol.\"}},{\"line\":\"byte = 8 bit\",\"info\":{\"headings\":[\"31. Computer\"],\"comment\":\"Not all machines had 8 bit\\nbytes, but these days most of\\nthem do.  But beware: for\\ntransmission over modems, a\\nfew extra bits are used so\\nthere are actually 10 bits per\\nbyte.\"}},{\"line\":\"B = byte\",\"info\":{\"headings\":[\"31. Computer\"],\"comment\":\"Not all machines had 8 bit\\nbytes, but these days most of\\nthem do.  But beware: for\\ntransmission over modems, a\\nfew extra bits are used so\\nthere are actually 10 bits per\\nbyte.\"}},{\"line\":\"octet = 8 bits\",\"info\":{\"headings\":[\"31. Computer\"],\"comment\":\"The octet is always 8 bits\"}},{\"line\":\"nybble = 4 bits\",\"info\":{\"headings\":[\"31. Computer\"],\"comment\":\"Half of a byte. Sometimes\\nequal to different lengths\\nsuch as 3 bits.\"}},{\"line\":\"nibble = nybble\",\"info\":{\"headings\":[\"31. Computer\"],\"comment\":\"Half of a byte. Sometimes\\nequal to different lengths\\nsuch as 3 bits.\"}},{\"line\":\"nyp = 2 bits\",\"info\":{\"headings\":[\"31. Computer\"],\"comment\":\"Donald Knuth asks in an exercise\\nfor a name for a 2 bit\\nquantity and gives the \\\"nyp\\\"\\nas a solution due to Gregor\\nPurdy.  Not in common use.\"}},{\"line\":\"meg = megabyte\",\"info\":{\"headings\":[\"31. Computer\"],\"comment\":\"Some people consider these\\nunits along with the kilobyte\\nto be defined according to\\npowers of 2 with the kilobyte\\nequal to 2^10 bytes, the\\nmegabyte equal to 2^20 bytes and\\nthe gigabyte equal to 2^30 bytes\\nbut these usages are forbidden\\nby SI.  Binary prefixes have\\nbeen defined by IEC to replace\\nthe SI prefixes.  Use them to\\nget the binary values: KiB, MiB,\\nand GiB.\"}},{\"line\":\"gig = gigabyte\",\"info\":{\"headings\":[\"31. Computer\"],\"comment\":\"Some people consider these\\nunits along with the kilobyte\\nto be defined according to\\npowers of 2 with the kilobyte\\nequal to 2^10 bytes, the\\nmegabyte equal to 2^20 bytes and\\nthe gigabyte equal to 2^30 bytes\\nbut these usages are forbidden\\nby SI.  Binary prefixes have\\nbeen defined by IEC to replace\\nthe SI prefixes.  Use them to\\nget the binary values: KiB, MiB,\\nand GiB.\"}},{\"line\":\"jiffy = 0.01 sec\",\"info\":{\"headings\":[\"31. Computer\"],\"comment\":\"This is defined in the Jargon File\\n(http://www.jargon.org) as being the\\nduration of a clock tick for measuring\\nwall-clock time.  Supposedly the value\\nused to be 1|60 sec or 1|50 sec\\ndepending on the frequency of AC power,\\nbut then 1|100 sec became more common.\\nOn linux systems, this term is used and\\nfor the Intel based chips, it does have\\nthe value of .01 sec.  The Jargon File\\nalso lists two other definitions:\\nmillisecond, and the time taken for\\nlight to travel one foot.\"}},{\"line\":\"jiffies = jiffy\",\"info\":{\"headings\":[\"31. Computer\"],\"comment\":\"This is defined in the Jargon File\\n(http://www.jargon.org) as being the\\nduration of a clock tick for measuring\\nwall-clock time.  Supposedly the value\\nused to be 1|60 sec or 1|50 sec\\ndepending on the frequency of AC power,\\nbut then 1|100 sec became more common.\\nOn linux systems, this term is used and\\nfor the Intel based chips, it does have\\nthe value of .01 sec.  The Jargon File\\nalso lists two other definitions:\\nmillisecond, and the time taken for\\nlight to travel one foot.\"}},{\"line\":\"cdaudiospeed = 44.1 kHz 2*16 bits\",\"info\":{\"headings\":[\"31. Computer\"],\"comment\":\"CD audio data rate at 44.1 kHz with 2\\nsamples of sixteen bits each.\"}},{\"line\":\"cdromspeed = 75 2048 bytes / sec\",\"info\":{\"headings\":[\"31. Computer\"],\"comment\":\"For data CDs (mode1) 75 sectors are read\\neach second with 2048 bytes per sector.\\nAudio CDs do not have sectors, but\\npeople sometimes divide the bit rate by\\n75 and claim a sector length of 2352.\\nData CDs have a lower rate due to\\nincreased error correction overhead.\\nThere is a rarely used mode (mode2) with\\n2336 bytes per sector that has fewer\\nerror correction bits than mode1.\"}},{\"line\":\"dvdspeed = 1385 kB/s\",\"info\":{\"headings\":[\"31. Computer\"],\"comment\":\"This is the \\\"1x\\\" speed of a DVD using\\nconstant linear velocity (CLV) mode.\\nModern DVDs may vary the linear velocity\\nas they go from the inside to the\\noutside of the disc.\\nSee http://www.osta.org/technology/dvdqa/dvdqa4.htm\"}},{\"line\":\"octave = 2\",\"info\":{\"headings\":[\"33. Perfect intervals\"],\"comment\":\"\"}},{\"line\":\"majorsecond = musicalfifth^2 / octave\",\"info\":{\"headings\":[\"33. Perfect intervals\"],\"comment\":\"\"}},{\"line\":\"majorthird = 5|4\",\"info\":{\"headings\":[\"33. Perfect intervals\"],\"comment\":\"\"}},{\"line\":\"minorthird = 6|5\",\"info\":{\"headings\":[\"33. Perfect intervals\"],\"comment\":\"\"}},{\"line\":\"musicalfourth = 4|3\",\"info\":{\"headings\":[\"33. Perfect intervals\"],\"comment\":\"\"}},{\"line\":\"musicalfifth = 3|2\",\"info\":{\"headings\":[\"33. Perfect intervals\"],\"comment\":\"\"}},{\"line\":\"majorsixth = musicalfourth majorthird\",\"info\":{\"headings\":[\"33. Perfect intervals\"],\"comment\":\"\"}},{\"line\":\"minorsixth = musicalfourth minorthird\",\"info\":{\"headings\":[\"33. Perfect intervals\"],\"comment\":\"\"}},{\"line\":\"majorseventh = musicalfifth majorthird\",\"info\":{\"headings\":[\"33. Perfect intervals\"],\"comment\":\"\"}},{\"line\":\"minorseventh = musicalfifth minorthird\",\"info\":{\"headings\":[\"33. Perfect intervals\"],\"comment\":\"\"}},{\"line\":\"pythagoreanthird = majorsecond musicalfifth^2 / octave\",\"info\":{\"headings\":[\"33. Perfect intervals\"],\"comment\":\"\"}},{\"line\":\"syntoniccomma = pythagoreanthird / majorthird\",\"info\":{\"headings\":[\"33. Perfect intervals\"],\"comment\":\"\"}},{\"line\":\"pythagoreancomma = musicalfifth^12 / octave^7\",\"info\":{\"headings\":[\"33. Perfect intervals\"],\"comment\":\"\"}},{\"line\":\"semitone = octave^(1|12)\",\"info\":{\"headings\":[\"34. Equal tempered definitions\"],\"comment\":\"\"}},{\"line\":\"musicalcent = x => semitone^(x/100) \",\"info\":{\"headings\":[\"34. Equal tempered definitions\"],\"comment\":\"\"}},{\"line\":\"musicalcent^-1 = musicalcent => 100 log(musicalcent)/log(semitone)\",\"info\":{\"headings\":[\"34. Equal tempered definitions\"],\"comment\":\"\"}},{\"line\":\"wholenote!\",\"info\":{\"headings\":[\"35. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"MUSICAL_NOTE_LENGTH = wholenote\",\"info\":{\"headings\":[\"35. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"halfnote = 1|2 wholenote\",\"info\":{\"headings\":[\"35. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"quarternote = 1|4 wholenote\",\"info\":{\"headings\":[\"35. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"eighthnote = 1|8 wholenote\",\"info\":{\"headings\":[\"35. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"sixteenthnote = 1|16 wholenote\",\"info\":{\"headings\":[\"35. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"thirtysecondnote = 1|32 wholenote\",\"info\":{\"headings\":[\"35. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"sixtyfourthnote = 1|64 wholenote\",\"info\":{\"headings\":[\"35. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"dotted = 3|2\",\"info\":{\"headings\":[\"35. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"doubledotted = 7|4\",\"info\":{\"headings\":[\"35. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"breve = doublewholenote\",\"info\":{\"headings\":[\"35. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"semibreve = wholenote\",\"info\":{\"headings\":[\"35. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"minimnote = halfnote\",\"info\":{\"headings\":[\"35. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"crotchet = quarternote\",\"info\":{\"headings\":[\"35. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"quaver = eighthnote\",\"info\":{\"headings\":[\"35. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"semiquaver = sixteenthnote\",\"info\":{\"headings\":[\"35. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"demisemiquaver = thirtysecondnote\",\"info\":{\"headings\":[\"35. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"hemidemisemiquaver = sixtyfourthnote\",\"info\":{\"headings\":[\"35. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"semidemisemiquaver = hemidemisemiquaver\",\"info\":{\"headings\":[\"35. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"woolyarnrun = 1600 yard/pound\",\"info\":{\"headings\":[\"37. yarn linear density\"],\"comment\":\"1600 yds of \\\"number 1 yarn\\\" weighs\\na pound.\"}},{\"line\":\"yarncut = 300 yard/pound\",\"info\":{\"headings\":[\"37. yarn linear density\"],\"comment\":\"Less common system used in\\nPennsylvania for wool yarn\"}},{\"line\":\"cottonyarncount = 840 yard/pound\",\"info\":{\"headings\":[\"37. yarn linear density\"],\"comment\":\"\"}},{\"line\":\"linenyarncount = 300 yard/pound\",\"info\":{\"headings\":[\"37. yarn linear density\"],\"comment\":\"Also used for hemp and ramie\"}},{\"line\":\"worstedyarncount = 1680 ft/pound\",\"info\":{\"headings\":[\"37. yarn linear density\"],\"comment\":\"\"}},{\"line\":\"metricyarncount = meter/gram\",\"info\":{\"headings\":[\"37. yarn linear density\"],\"comment\":\"\"}},{\"line\":\"denier = 1|9 tex\",\"info\":{\"headings\":[\"37. yarn linear density\"],\"comment\":\"used for silk and rayon\"}},{\"line\":\"manchesteryarnnumber = drams/1000 yards\",\"info\":{\"headings\":[\"37. yarn linear density\"],\"comment\":\"old system used for silk\"}},{\"line\":\"pli = lb/in\",\"info\":{\"headings\":[\"37. yarn linear density\"],\"comment\":\"\"}},{\"line\":\"typp = 1000 yd/lb\",\"info\":{\"headings\":[\"37. yarn linear density\"],\"comment\":\"abbreviation for Thousand Yard Per Pound\"}},{\"line\":\"asbestoscut = 100 yd/lb\",\"info\":{\"headings\":[\"37. yarn linear density\"],\"comment\":\"used for glass and asbestos yarn\"}},{\"line\":\"tex = gram / km\",\"info\":{\"headings\":[\"37. yarn linear density\"],\"comment\":\"rational metric yarn measure, meant\\nto be used for any kind of yarn\"}},{\"line\":\"drex = 0.1 tex\",\"info\":{\"headings\":[\"37. yarn linear density\"],\"comment\":\"rational metric yarn measure, meant\\nto be used for any kind of yarn\"}},{\"line\":\"poumar = lb / 1e6 yard\",\"info\":{\"headings\":[\"37. yarn linear density\"],\"comment\":\"\"}},{\"line\":\"skeincotton = 80*54 inch\",\"info\":{\"headings\":[\"38. yarn and cloth length\"],\"comment\":\"80 turns of thread on a reel with a\\n54 in circumference (varies for other\\nkinds of thread)\"}},{\"line\":\"cottonbolt = 120 ft\",\"info\":{\"headings\":[\"38. yarn and cloth length\"],\"comment\":\"cloth measurement\"}},{\"line\":\"woolbolt = 210 ft\",\"info\":{\"headings\":[\"38. yarn and cloth length\"],\"comment\":\"\"}},{\"line\":\"bolt = cottonbolt\",\"info\":{\"headings\":[\"38. yarn and cloth length\"],\"comment\":\"\"}},{\"line\":\"heer = 600 yards\",\"info\":{\"headings\":[\"38. yarn and cloth length\"],\"comment\":\"\"}},{\"line\":\"cut = 300 yards\",\"info\":{\"headings\":[\"38. yarn and cloth length\"],\"comment\":\"used for wet-spun linen yarn\"}},{\"line\":\"lea = 300 yards\",\"info\":{\"headings\":[\"38. yarn and cloth length\"],\"comment\":\"used for wet-spun linen yarn\"}},{\"line\":\"sailmakersyard = 28.5 in\",\"info\":{\"headings\":[\"38. yarn and cloth length\"],\"comment\":\"\"}},{\"line\":\"sailmakersounce = oz / sailmakersyard 36 inch\",\"info\":{\"headings\":[\"38. yarn and cloth length\"],\"comment\":\"\"}},{\"line\":\"silkmomme = momme / 25 yards 1.49 inch\",\"info\":{\"headings\":[\"38. yarn and cloth length\"],\"comment\":\"Traditional silk weight\\nBut it is also defined as\\nlb/100 yd 45 inch.  The two\\ndefinitions are slightly different\\nand neither one seems likely to be\\nthe true source definition.\"}},{\"line\":\"silkmm = silkmomme\",\"info\":{\"headings\":[\"38. yarn and cloth length\"],\"comment\":\"Traditional silk weight\\nBut it is also defined as\\nlb/100 yd 45 inch.  The two\\ndefinitions are slightly different\\nand neither one seems likely to be\\nthe true source definition.\"}},{\"line\":\"mcg = microgram\",\"info\":{\"headings\":[\"39. drug dosage\"],\"comment\":\"Frequently used for vitamins\"}},{\"line\":\"iudiptheria = 62.8 microgram\",\"info\":{\"headings\":[\"39. drug dosage\"],\"comment\":\"IU is for international unit\"}},{\"line\":\"iupenicillin = 0.6 microgram\",\"info\":{\"headings\":[\"39. drug dosage\"],\"comment\":\"\"}},{\"line\":\"iuinsulin = 41.67 microgram\",\"info\":{\"headings\":[\"39. drug dosage\"],\"comment\":\"\"}},{\"line\":\"drop = 1|20 ml\",\"info\":{\"headings\":[\"39. drug dosage\"],\"comment\":\"The drop was an old \\\"unit\\\" that was\\nreplaced by the minim.  But I was\\ntold by a pharmacist that in his\\nprofession, the conversion of 20\\ndrops per ml is actually used.\"}},{\"line\":\"bloodunit = 450 ml\",\"info\":{\"headings\":[\"39. drug dosage\"],\"comment\":\"For whole blood.  For blood\\ncomponents, a blood unit is the\\nquanity of the component found in a\\nblood unit of whole blood.  The\\nhuman body contains about 12 blood\\nunits of whole blood.\"}},{\"line\":\"frenchcathetersize = 1|3 mm\",\"info\":{\"headings\":[\"40. misc medical measure\"],\"comment\":\"measure used for the outer diameter\\nof a catheter\"}},{\"line\":\"charriere = frenchcathetersize\",\"info\":{\"headings\":[\"40. misc medical measure\"],\"comment\":\"measure used for the outer diameter\\nof a catheter\"}},{\"line\":\"hectare = hectoare\",\"info\":{\"headings\":[\"41. fixup units for times when prefix handling doesn't do the job\"],\"comment\":\"\"}},{\"line\":\"megohm = megaohm\",\"info\":{\"headings\":[\"41. fixup units for times when prefix handling doesn't do the job\"],\"comment\":\"\"}},{\"line\":\"kilohm = kiloohm\",\"info\":{\"headings\":[\"41. fixup units for times when prefix handling doesn't do the job\"],\"comment\":\"\"}},{\"line\":\"microhm = microohm\",\"info\":{\"headings\":[\"41. fixup units for times when prefix handling doesn't do the job\"],\"comment\":\"\"}},{\"line\":\"megalerg = megaerg\",\"info\":{\"headings\":[\"41. fixup units for times when prefix handling doesn't do the job\"],\"comment\":\"'L' added to make it pronounceable [18].\"}},{\"line\":\"unitedstatesdollar = US$\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"usdollar = US$\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"$ = dollar\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"mark = germanymark\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"bolivar = venezuelabolivar\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"The currency was revalued by\\na factor of 1000.\"}},{\"line\":\"venezuelanbolivarfuerte = venezuelabolivar\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"The currency was revalued by\\na factor of 1000.\"}},{\"line\":\"bolivarfuerte = bolivar\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"The currency was revalued by\\na factor of 1000.\"}},{\"line\":\"oldbolivar = 1|1000 bolivar\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"The currency was revalued by\\na factor of 1000.\"}},{\"line\":\"peseta = spainpeseta\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"rand = southafricarand\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"escudo = portugalescudo\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"guilder = netherlandsguilder\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"hollandguilder = netherlandsguilder\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"peso = mexicopeso\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"yen = japanyen\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"lira = italylira\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"rupee = indiarupee\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"drachma = greecedrachma\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"franc = francefranc\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"markka = finlandmarkka\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"britainpound = unitedkingdompound\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"greatbritainpound = unitedkingdompound\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"unitedkingdompound = ukpound\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"poundsterling = britainpound\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"yuan = chinayuan\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"austriaschilling = 1|13.7603 euro\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"belgiumfranc = 1|40.3399 euro\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"estoniakroon = 1|15.6466 euro\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"Equal to 1|8 germanymark\"}},{\"line\":\"finlandmarkka = 1|5.94573 euro\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"francefranc = 1|6.55957 euro\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"germanymark = 1|1.95583 euro\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"greecedrachma = 1|340.75 euro\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"irelandpunt = 1|0.787564 euro\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"italylira = 1|1936.27 euro\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"luxembourgfranc = 1|40.3399 euro\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"netherlandsguilder = 1|2.20371 euro\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"portugalescudo = 1|200.482 euro\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"spainpeseta = 1|166.386 euro\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"cypruspound = 1|0.585274 euro\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"maltalira = 1|0.429300 euro\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"sloveniatolar = 1|239.640 euro\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"slovakiakoruna = 1|30.1260 euro\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"UKP = GBP\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"Not an ISO code, but looks like one, and\\nsometimes used on usenet.\"}},{\"line\":\"VEB = 1|1000 VEF\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"old venezuelan bolivar\"}},{\"line\":\"icelandkróna = icelandkrona\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"polandzłoty = polandzloty\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"tongapa’anga = tongapa'anga\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"venezuelabolívar = venezuelabolivar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"vietnamđồng = vietnamdong\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"AED = uaedirham\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"AFN = afghanafghani\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"ALL = albanialek\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"AMD = armeniadram\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"AOA = angolakwanza\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"ARS = argentinapeso\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"AUD = australiadollar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"AWG = arubaflorin\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"AZN = azerbaijanmanat\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"BAM = bosniaconvertiblemark\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"BBD = barbadosdollar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"BDT = bangladeshtaka\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"BGN = bulgarialev\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"BHD = bahraindinar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"BIF = burundifranc\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"BMD = bermudadollar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"BND = bruneidollar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"BOB = boliviaboliviano\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"BRL = brazilreal\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"BSD = bahamasdollar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"BTN = bhutanngultrum\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"BWP = botswanapula\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"BYR = belarusruble\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"BZD = belizedollar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"CAD = canadadollar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"CDF = drcfranccongolais\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"CHF = swissfranc\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"CLP = chilepeso\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"CMG = sintmaartencaribbeanguilder\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"CNY = chinayuan\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"COP = colombiapeso\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"CRC = costaricacolon\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"CUP = cubapeso\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"CVE = capeverdeescudo\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"CZK = czechkoruna\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"DJF = djiboutifranc\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"DKK = denmarkkrona\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"DOP = dominicanrepublicpeso\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"DZD = algeriadinar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"EGP = egyptpound\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"ERN = eritreanakfa\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"ETB = ethiopianbirr\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"EUR = euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"FJD = fijidollar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"FKP = falklandislandspound\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"GBP = ukpound\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"GEL = georgialari\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"GGP = guernseypound\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"GHS = ghanacedi\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"GIP = gibraltarpound\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"GMD = gambiadalasi\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"GNF = guineafranc\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"GTQ = guatemalaquetzal\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"GYD = guyanadollar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"HKD = hongkongdollar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"HNL = honduraslempira\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"HRK = croatiakuna\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"HTG = haitigourde\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"HUF = hungariaforint\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"IDR = indonesiarupiah\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"ILS = israelnewshekel\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"IMP = manxpound\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"INR = indiarupee\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"IQD = iraqdinar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"IRR = iranrial\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"ISK = icelandkrona\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"JEP = jerseypound\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"JMD = jamaicadollar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"JOD = jordandinar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"JPY = japanyen\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"KES = kenyaschilling\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"KGS = kyrgyzstansom\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"KHR = cambodiariel\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"KMF = comorosfranc\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"KPW = northkoreawon\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"KRW = southkoreawon\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"KWD = kuwaitdinar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"KYD = caymanislandsdollar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"KZT = kazakhstantenge\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"LAK = laokip\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"LBP = lebanonpound\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"LKR = srilankanrupee\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"LRD = liberiadollar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"LTL = lithuanialita\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"LVL = latvialat\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"LYD = libyadinar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"MAD = moroccodirham\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"MDL = moldovaleu\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"MGA = madagascarariary\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"MKD = macedoniadenar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"MMK = myanmarkyat\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"MNT = mongoliatugrik\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"MOP = macaupataca\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"MRO = mauritaniaouguiya\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"MUR = mauritiusrupee\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"MVR = maldiverufiyaa\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"MWK = malawikwacha\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"MXN = mexicopeso\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"MYR = malaysiaringgit\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"MZN = mozambicanmetical\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"NAD = namibiadollar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"NGN = nigerianaira\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"NIO = nicaraguacordobaoro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"NOK = norwaykrone\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"NPR = nepalrupee\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"NZD = newzealanddollar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"OMR = omanrial\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"PAB = panamabalboa\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"PEN = perunuevosol\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"PGK = papuanewguineakina\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"PHP = philippinepeso\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"PKR = pakistanrupee\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"PLN = polandzloty\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"PYG = paraguayguarani\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"QAR = qatarrial\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"RON = romanianewlei\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"RSD = serbiadinar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"RUB = russiarouble\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"RWF = rwandafranc\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"SAR = saudiarabiariyal\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"SBD = solomonislandsdollar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"SCR = seychellesrupee\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"SDG = sudanpound\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"SEK = swedenkrona\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"SGD = singaporedollar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"SHP = sainthelenapound\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"SLL = sierraleoneleone\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"SOS = somaliaschilling\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"SRD = surinamedollar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"STD = saotomeandprincipedobra\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"SVC = elsalvadorcolon\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"SYP = syriapound\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"SZL = swazilandlilangeni\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"THB = thailandbaht\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"TJS = tajikistansomoni\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"TMT = turkmenistanmanat\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"TND = tunisiadinar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"TOP = tongapa'anga\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"TRY = turkeylira\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"TTD = trinidadandtobagodollar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"TVD = tuvaludollar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"TWD = taiwandollar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"TZS = tanzaniashilling\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"UAH = ukrainehryvnia\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"UGX = ugandaschilling\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"USD = usdollar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"UYU = uruguaypeso\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"UZS = uzbekistansum\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"VEF = venezuelabolivar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"VND = vietnamdong\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"VUV = vanuatuvatu\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"WST = samoatala\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"XAF = centralafricancfafranc\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"XCD = eastcaribbeandollar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"XDR = specialdrawingrights\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"XOF = westafricanfranc\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"XPF = cfpfranc\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"YER = yemenrial\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"ZAR = southafricarand\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"ZMW = zambiakwacha\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"ZWL = zimbabwedollar\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"uaedirham = 1|4.175642287901 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"afghanafghani = 1|71.834 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"albanialek = 1|139.44 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"armeniadram = 1|539.16766610698 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"angolakwanza = 1|151.63 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"argentinapeso = 1|10.844411979547 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"australiadollar = 1|1.5722 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"arubaflorin = 1|2.04239 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"azerbaijanmanat = 1|1.1998964405441 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"bosniaconvertiblemark = 1|1.95583 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"barbadosdollar = 1|2.282 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"bangladeshtaka = 1|87.075 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"bulgarialev = 1|1.9558 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"bahraindinar = 1|0.429016 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"burundifranc = 1|1751.9 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"bermudadollar = 1|1.1410 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"bruneidollar = 1|1.5949 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"boliviaboliviano = 1|7.7365 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"brazilreal = 1|4.4198 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"bahamasdollar = 1|1.1410 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"bhutanngultrum = 1|74.1465 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"botswanapula = 1|11.805 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"belarusruble = 1|19563.011314186 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"belizedollar = 1|2.282 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"canadadollar = 1|1.4816 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"drcfranccongolais = 1|1038.5 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"swissfranc = 1|1.0901 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"chilepeso = 1|779.31758530184 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"sintmaartencaribbeanguilder = 1|2.04239 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"chinayuan = 1|7.2435 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"colombiapeso = 1|3351.2415349887 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"costaricacolon = 1|598.07 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"cubapeso = 1|1.1203 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"capeverdeescudo = 1|110.265 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"czechkoruna = 1|27.113 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"djiboutifranc = 1|202.779661 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"denmarkkrona = 1|7.4612 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"dominicanrepublicpeso = 1|50.666 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"algeriadinar = 1|118.84 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"egyptpound = 1|8.9318551668023 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"eritreanakfa = 1|17.115 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"ethiopianbirr = 1|23.439 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"euro = 1.1410 US$\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"fijidollar = 1|0.4076849051416 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"falklandislandspound = 1|0.74180 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"ukpound = 1|0.74180 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"georgialari = 1|2.7114148200866 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"guernseypound = 1|0.74180 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"ghanacedi = 1|4.3690406121248 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"gibraltarpound = 1|0.74180 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"gambiadalasi = 1|43.753 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"guineafranc = 1|8122.2 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"guatemalaquetzal = 1|8.9649758454106 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"guyanadollar = 1|232.13 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"hongkongdollar = 1|8.8429 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"honduraslempira = 1|25.137148662377 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"croatiakuna = 1|7.6280 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"haitigourde = 1|60.612 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"hungariaforint = 1|311.04 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"indonesiarupiah = 1|15534.04 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"israelnewshekel = 1|4.3949 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"manxpound = 1|0.74180 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"indiarupee = 1|74.1465 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"iraqdinar = 1|1361.2 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"iranrial = 1|0.0229 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"icelandkrona = 1|141.94177822682 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"jerseypound = 1|0.74180 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"jamaicadollar = 1|136.32690541781 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"jordandinar = 1|0.808969 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"japanyen = 1|136.48 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"kenyaschilling = 1|117.51 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"kyrgyzstansom = 1|78.121502797762 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"cambodiariel = 1|4566.3 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"comorosfranc = 1|491.96775 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"northkoreawon = 1|145.7 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"southkoreawon = 1|1308.96 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"kuwaitdinar = 1|0.34321648936739 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"caymanislandsdollar = 1|0.95083333333333 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"kazakhstantenge = 1|312.7142459655 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"laokip = 1|9131 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"lebanonpound = 1|1720.0575 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"srilankanrupee = 1|0.0062118176400539 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"liberiadollar = 1|97.466 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"lithuanialita = 1|3.45280 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"latvialat = 1|0.702804 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"libyadinar = 1|1.5236 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"moroccodirham = 1|10.972653362897 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"moldovaleu = 1|11.23895 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"madagascarariary = 1|3590.6 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"macedoniadenar = 1|61.538 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"myanmarkyat = 1|1469.900990099 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"mongoliatugrik = 1|0.0344 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"macaupataca = 1|9.108187 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"mauritaniaouguiya = 1|327.17 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"mauritiusrupee = 1|39.715 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"maldiverufiyaa = 1|17.241 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"malawikwacha = 1|622.16 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"mexicopeso = 1|18.8927 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"malaysiaringgit = 1|4.8055 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"mozambicanmetical = 1|47.523 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"namibiadollar = 1|15.3094 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"nigerianaira = 1|222.94 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"nicaraguacordobaoro = 1|30.781 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"norwaykrone = 1|9.2400 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"nepalrupee = 1|118.6344 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"newzealanddollar = 1|1.6938 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"omanrial = 1|0.43871116579514 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"panamabalboa = 1|1.1410 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"perunuevosol = 1|3.7050162216122 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"papuanewguineakina = 1|0.30504551766703 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"philippinepeso = 1|52.447 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"pakistanrupee = 1|0.0083800303495282 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"polandzloty = 1|4.2378 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"paraguayguarani = 1|6325.8 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"qatarrial = 1|4.15324 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"romanianewlei = 1|4.4145 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"serbiadinar = 1|119.86551198234 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"russiarouble = 1|71.9750 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"rwandafranc = 1|850.31 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"saudiarabiariyal = 1|4.27875 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"solomonislandsdollar = 1|0.10707708972739 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"seychellesrupee = 1|14.633 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"sudanpound = 1|7.0481 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"swedenkrona = 1|9.2716 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"singaporedollar = 1|1.5815 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"sainthelenapound = 1|0.74180 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"sierraleoneleone = 1|5395.9 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"somaliaschilling = 1|722.71 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"surinamedollar = 1|3.697 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"saotomeandprincipedobra = 1|24504 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"elsalvadorcolon = 1|9.8137 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"syriapound = 1|247.23 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"swazilandlilangeni = 1|15.3094 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"thailandbaht = 1|40.533 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"tajikistansomoni = 1|6.9076147042565 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"turkmenistanmanat = 1|3.9790232072366 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"tunisiadinar = 1|2.2257871064468 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"tongapa'anga = 1|0.40393652523326 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"turkeylira = 1|3.3500 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"trinidadandtobagodollar = 1|7.1318205 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"tuvaludollar = 1|1.5722 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"taiwandollar = 1|37.087184611541 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"tanzaniashilling = 1|2431.1 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"ukrainehryvnia = 1|19.241014210086 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"ugandaschilling = 1|4136.7 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"uruguaypeso = 1|32.337 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"uzbekistansum = 1|3011.9120996918 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"venezuelabolivar = 1|7.2032993692382 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"vietnamdong = 1|25596.551724138 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"vanuatuvatu = 1|0.008155099515314 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"samoatala = 1|0.33965181537052 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"centralafricancfafranc = 1|655.957 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"eastcaribbeandollar = 1|3.0807 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"specialdrawingrights = 1|1.9241014210086 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"westafricanfranc = 1|655.957 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"cfpfranc = 1|119.33 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"yemenrial = 1|240.74 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"southafricarand = 1|15.3094 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"zambiakwacha = 1|13.544 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"zimbabwedollar = 1|353.62 euro\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"goldprice = 1184.00 US$/troyounce\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"platinumprice = 1002.00 US$/troyounce\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"silverprice = 16.15 US$/troyounce\",\"info\":{\"headings\":[],\"comment\":\"\"}},{\"line\":\"olddollargold = 23.22 grains goldprice\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.2. Money on the gold standard, used in the late 19th century and early\\n20th century.\"],\"comment\":\"Used until 1934\"}},{\"line\":\"newdollargold = 96|7 grains goldprice\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.2. Money on the gold standard, used in the late 19th century and early\\n20th century.\"],\"comment\":\"After Jan 31, 1934\"}},{\"line\":\"dollargold = newdollargold\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.2. Money on the gold standard, used in the late 19th century and early\\n20th century.\"],\"comment\":\"After Jan 31, 1934\"}},{\"line\":\"poundgold = 113 grains goldprice\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.2. Money on the gold standard, used in the late 19th century and early\\n20th century.\"],\"comment\":\"\"}},{\"line\":\"goldounce = goldprice troyounce\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.2. Money on the gold standard, used in the late 19th century and early\\n20th century.\"],\"comment\":\"\"}},{\"line\":\"silverounce = silverprice troyounce\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.2. Money on the gold standard, used in the late 19th century and early\\n20th century.\"],\"comment\":\"\"}},{\"line\":\"platinumounce = platinumprice troyounce\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.2. Money on the gold standard, used in the late 19th century and early\\n20th century.\"],\"comment\":\"\"}},{\"line\":\"XAU = goldounce\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.2. Money on the gold standard, used in the late 19th century and early\\n20th century.\"],\"comment\":\"\"}},{\"line\":\"XPT = platinumounce\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.2. Money on the gold standard, used in the late 19th century and early\\n20th century.\"],\"comment\":\"\"}},{\"line\":\"XAG = silverounce\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.2. Money on the gold standard, used in the late 19th century and early\\n20th century.\"],\"comment\":\"\"}},{\"line\":\"USpennyweight = 2.5 grams\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.3. Nominal masses of US coins. Note that dimes, quarters and half dollars\\nhave weight proportional to value. Before 1965 it was $40 / kg.\"],\"comment\":\"Since 1982, 48 grains before\"}},{\"line\":\"USnickelweight = 5 grams\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.3. Nominal masses of US coins. Note that dimes, quarters and half dollars\\nhave weight proportional to value. Before 1965 it was $40 / kg.\"],\"comment\":\"\"}},{\"line\":\"USdimeweight = US$ 0.10 / (20 US$ / lb)\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.3. Nominal masses of US coins. Note that dimes, quarters and half dollars\\nhave weight proportional to value. Before 1965 it was $40 / kg.\"],\"comment\":\"Since 1965\"}},{\"line\":\"USquarterweight = US$ 0.25 / (20 US$ / lb)\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.3. Nominal masses of US coins. Note that dimes, quarters and half dollars\\nhave weight proportional to value. Before 1965 it was $40 / kg.\"],\"comment\":\"Since 1965\"}},{\"line\":\"UShalfdollarweight = US$ 0.50 / (20 US$ / lb)\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.3. Nominal masses of US coins. Note that dimes, quarters and half dollars\\nhave weight proportional to value. Before 1965 it was $40 / kg.\"],\"comment\":\"Since 1971\"}},{\"line\":\"USdollarmass = 8.1 grams\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.3. Nominal masses of US coins. Note that dimes, quarters and half dollars\\nhave weight proportional to value. Before 1965 it was $40 / kg.\"],\"comment\":\"\"}},{\"line\":\"quid = britainpound\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"Slang names\"}},{\"line\":\"fiver = 5 quid\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"\"}},{\"line\":\"tenner = 10 quid\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"\"}},{\"line\":\"monkey = 500 quid\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"\"}},{\"line\":\"brgrand = 1000 quid\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"\"}},{\"line\":\"bob = shilling\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"\"}},{\"line\":\"shilling = 1|20 britainpound\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"Before decimalisation, there\\nwere 20 shillings to a pound,\\neach of twelve old pence\"}},{\"line\":\"oldpence = 1|12 shilling\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"Before decimalisation, there\\nwere 20 shillings to a pound,\\neach of twelve old pence\"}},{\"line\":\"farthing = 1|4 oldpence\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"Before decimalisation, there\\nwere 20 shillings to a pound,\\neach of twelve old pence\"}},{\"line\":\"guinea = 21 shilling\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"Still used in horse racing\"}},{\"line\":\"crown = 5 shilling\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"\"}},{\"line\":\"florin = 2 shilling\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"\"}},{\"line\":\"groat = 4 oldpence\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"\"}},{\"line\":\"tanner = 6 oldpence\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"\"}},{\"line\":\"brpenny = 0.01 britainpound\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"\"}},{\"line\":\"pence = brpenny\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"\"}},{\"line\":\"tuppence = 2 pence\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"\"}},{\"line\":\"tuppenny = tuppence\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"\"}},{\"line\":\"ha'penny = halfbrpenny\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"\"}},{\"line\":\"hapenny = ha'penny\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"\"}},{\"line\":\"oldpenny = oldpence\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"\"}},{\"line\":\"oldtuppence = 2 oldpence\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"\"}},{\"line\":\"oldtuppenny = oldtuppence\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"\"}},{\"line\":\"threepence = 3 oldpence\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"threepence never refers to new money\"}},{\"line\":\"threepenny = threepence\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"threepence never refers to new money\"}},{\"line\":\"oldthreepence = threepence\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"threepence never refers to new money\"}},{\"line\":\"oldthreepenny = threepence\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"threepence never refers to new money\"}},{\"line\":\"oldhalfpenny = halfoldpenny\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"\"}},{\"line\":\"oldha'penny = oldhalfpenny\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"\"}},{\"line\":\"oldhapenny = oldha'penny\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"\"}},{\"line\":\"brpony = 25 britainpound\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.4. British currency\"],\"comment\":\"\"}},{\"line\":\"loony = 1 canadadollar\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.5. Canadian currency\"],\"comment\":\"This coin depicts a loon\"}},{\"line\":\"toony = 2 canadadollar\",\"info\":{\"headings\":[\"42. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"42.5. Canadian currency\"],\"comment\":\"\"}},{\"line\":\"cord = 4*4*8 ft^3\",\"info\":{\"headings\":[\"43. Units used for measuring volume of wood\"],\"comment\":\"4 ft by 4 ft by 8 ft bundle of wood\"}},{\"line\":\"facecord = 1|2 cord\",\"info\":{\"headings\":[\"43. Units used for measuring volume of wood\"],\"comment\":\"\"}},{\"line\":\"cordfoot = 1|8 cord\",\"info\":{\"headings\":[\"43. Units used for measuring volume of wood\"],\"comment\":\"One foot long section of a cord\"}},{\"line\":\"cordfeet = cordfoot\",\"info\":{\"headings\":[\"43. Units used for measuring volume of wood\"],\"comment\":\"One foot long section of a cord\"}},{\"line\":\"housecord = 1|3 cord\",\"info\":{\"headings\":[\"43. Units used for measuring volume of wood\"],\"comment\":\"Used to sell firewood for residences,\\noften confusingly called a \\\"cord\\\"\"}},{\"line\":\"boardfoot = ft^2 inch\",\"info\":{\"headings\":[\"43. Units used for measuring volume of wood\"],\"comment\":\"Usually 1 inch thick wood\"}},{\"line\":\"boardfeet = boardfoot\",\"info\":{\"headings\":[\"43. Units used for measuring volume of wood\"],\"comment\":\"\"}},{\"line\":\"fbm = boardfoot\",\"info\":{\"headings\":[\"43. Units used for measuring volume of wood\"],\"comment\":\"feet board measure\"}},{\"line\":\"stack = 4 yard^3\",\"info\":{\"headings\":[\"43. Units used for measuring volume of wood\"],\"comment\":\"British, used for firewood and coal [18]\"}},{\"line\":\"rick = 4 ft 8 ft 16 inches\",\"info\":{\"headings\":[\"43. Units used for measuring volume of wood\"],\"comment\":\"Stack of firewood, supposedly\\nsometimes called a face cord, but this\\nvalue is equal to 1|3 cord.  Name\\ncomes from an old Norse word for a\\nstack of wood.\"}},{\"line\":\"stere = m^3\",\"info\":{\"headings\":[\"43. Units used for measuring volume of wood\"],\"comment\":\"\"}},{\"line\":\"timberfoot = ft^3\",\"info\":{\"headings\":[\"43. Units used for measuring volume of wood\"],\"comment\":\"Used for measuring solid blocks of wood\"}},{\"line\":\"standard = 120 12 ft 11 in 1.5 in\",\"info\":{\"headings\":[\"43. Units used for measuring volume of wood\"],\"comment\":\"This is the St Petersburg or\\nPittsburg standard.  Apparently the\\nterm is short for \\\"standard hundred\\\"\\nwhich was meant to refer to 100 pieces\\nof wood (deals).  However, this\\nparticular standard is equal to 120\\ndeals which are 12 ft by 11 in by 1.5\\ninches (not the standard deal).\"}},{\"line\":\"hoppusfoot = (4/pi) ft^3\",\"info\":{\"headings\":[\"43. Units used for measuring volume of wood\"],\"comment\":\"Volume calculation suggested in 1736\\nforestry manual by Edward Hoppus, for\\nestimating the usable volume of a log.\\nIt results from computing the volume\\nof a cylindrical log of length, L, and\\ngirth (circumference), G, by V=L(G/4)^2.\\nThe hoppus ton is apparently still in\\nuse for shipments from Southeast Asia.\"}},{\"line\":\"hoppusboardfoot = 1|12 hoppusfoot\",\"info\":{\"headings\":[\"43. Units used for measuring volume of wood\"],\"comment\":\"Volume calculation suggested in 1736\\nforestry manual by Edward Hoppus, for\\nestimating the usable volume of a log.\\nIt results from computing the volume\\nof a cylindrical log of length, L, and\\ngirth (circumference), G, by V=L(G/4)^2.\\nThe hoppus ton is apparently still in\\nuse for shipments from Southeast Asia.\"}},{\"line\":\"hoppuston = 50 hoppusfoot\",\"info\":{\"headings\":[\"43. Units used for measuring volume of wood\"],\"comment\":\"Volume calculation suggested in 1736\\nforestry manual by Edward Hoppus, for\\nestimating the usable volume of a log.\\nIt results from computing the volume\\nof a cylindrical log of length, L, and\\ngirth (circumference), G, by V=L(G/4)^2.\\nThe hoppus ton is apparently still in\\nuse for shipments from Southeast Asia.\"}},{\"line\":\"deal = 12 ft 11 in 2.5 in\",\"info\":{\"headings\":[\"43. Units used for measuring volume of wood\",\"43.1. In Britain, the deal is apparently any piece of wood over 6 feet long, over\\n7 wide and 2.5 inches thick. The OED doesn't give a standard size. A piece\\nof wood less than 7 inches wide is called a \\\"batten\\\". This unit is now used\\nexclusively for fir and pine.\"],\"comment\":\"The standard North American deal [OED]\\nIf it's half as thick as the standard\\ndeal it's called a \\\"whole deal\\\"!\\nAnd half again as thick is a split deal.\"}},{\"line\":\"wholedeal = 12 ft 11 in 1.25 in\",\"info\":{\"headings\":[\"43. Units used for measuring volume of wood\",\"43.1. In Britain, the deal is apparently any piece of wood over 6 feet long, over\\n7 wide and 2.5 inches thick. The OED doesn't give a standard size. A piece\\nof wood less than 7 inches wide is called a \\\"batten\\\". This unit is now used\\nexclusively for fir and pine.\"],\"comment\":\"The standard North American deal [OED]\\nIf it's half as thick as the standard\\ndeal it's called a \\\"whole deal\\\"!\\nAnd half again as thick is a split deal.\"}},{\"line\":\"splitdeal = 12 ft 11 in 5|8 in\",\"info\":{\"headings\":[\"43. Units used for measuring volume of wood\",\"43.1. In Britain, the deal is apparently any piece of wood over 6 feet long, over\\n7 wide and 2.5 inches thick. The OED doesn't give a standard size. A piece\\nof wood less than 7 inches wide is called a \\\"batten\\\". This unit is now used\\nexclusively for fir and pine.\"],\"comment\":\"The standard North American deal [OED]\\nIf it's half as thick as the standard\\ndeal it's called a \\\"whole deal\\\"!\\nAnd half again as thick is a split deal.\"}},{\"line\":\"poundcut = pound / gallon\",\"info\":{\"headings\":[\"44. Used for shellac mixing rate\"],\"comment\":\"\"}},{\"line\":\"lbcut = poundcut\",\"info\":{\"headings\":[\"44. Used for shellac mixing rate\"],\"comment\":\"\"}},{\"line\":\"FLUID_FLOW = VOLUME / TIME\",\"info\":{\"headings\":[\"45. Gas and Liquid flow units\"],\"comment\":\"\"}},{\"line\":\"cumec = m^3/s\",\"info\":{\"headings\":[\"45. Gas and Liquid flow units\",\"45.1. Some obvious volumetric gas flow units (cu is short for cubic)\"],\"comment\":\"\"}},{\"line\":\"cusec = ft^3/s\",\"info\":{\"headings\":[\"45. Gas and Liquid flow units\",\"45.1. Some obvious volumetric gas flow units (cu is short for cubic)\"],\"comment\":\"\"}},{\"line\":\"gph = gal/hr\",\"info\":{\"headings\":[\"45. Gas and Liquid flow units\",\"45.2. Conventional abbreviations for fluid flow units\"],\"comment\":\"\"}},{\"line\":\"gpm = gal/min\",\"info\":{\"headings\":[\"45. Gas and Liquid flow units\",\"45.2. Conventional abbreviations for fluid flow units\"],\"comment\":\"\"}},{\"line\":\"mgd = megagal/day\",\"info\":{\"headings\":[\"45. Gas and Liquid flow units\",\"45.2. Conventional abbreviations for fluid flow units\"],\"comment\":\"\"}},{\"line\":\"cfs = ft^3/s\",\"info\":{\"headings\":[\"45. Gas and Liquid flow units\",\"45.2. Conventional abbreviations for fluid flow units\"],\"comment\":\"\"}},{\"line\":\"cfh = ft^3/hour\",\"info\":{\"headings\":[\"45. Gas and Liquid flow units\",\"45.2. Conventional abbreviations for fluid flow units\"],\"comment\":\"\"}},{\"line\":\"cfm = ft^3/min\",\"info\":{\"headings\":[\"45. Gas and Liquid flow units\",\"45.2. Conventional abbreviations for fluid flow units\"],\"comment\":\"\"}},{\"line\":\"lpm = liter/min\",\"info\":{\"headings\":[\"45. Gas and Liquid flow units\",\"45.2. Conventional abbreviations for fluid flow units\"],\"comment\":\"\"}},{\"line\":\"lfm = ft/min\",\"info\":{\"headings\":[\"45. Gas and Liquid flow units\",\"45.2. Conventional abbreviations for fluid flow units\"],\"comment\":\"Used to report air flow produced by fans.\\nMultiply by cross sectional area to get a\\nflow in cfm.\"}},{\"line\":\"pru = mmHg / (ml/min)\",\"info\":{\"headings\":[\"45. Gas and Liquid flow units\",\"45.2. Conventional abbreviations for fluid flow units\"],\"comment\":\"peripheral resistance unit, used in\\nmedicine to assess blood flow in\\nthe capillaries.\"}},{\"line\":\"minersinchAZ = 1.5 ft^3/min\",\"info\":{\"headings\":[\"46. Miner's inch: This is an old historic unit used in the Western United\\nStates. It is generally defined as the rate of flow through a one square\\ninch hole at a specified depth such as 4 inches. In the late 19th century,\\nvolume of water was sometimes measured in the \\\"24 hour inch\\\". Values for the\\nminer's inch were fixed by state statues. (This information is from a web\\nsite operated by the Nevada Division of Water Planning: The Water Words\\nDictionary at http://www.state.nv.us/cnr/ndwp/dict-1/waterwds.htm.)\"],\"comment\":\"\"}},{\"line\":\"minersinchCA = 1.5 ft^3/min\",\"info\":{\"headings\":[\"46. Miner's inch: This is an old historic unit used in the Western United\\nStates. It is generally defined as the rate of flow through a one square\\ninch hole at a specified depth such as 4 inches. In the late 19th century,\\nvolume of water was sometimes measured in the \\\"24 hour inch\\\". Values for the\\nminer's inch were fixed by state statues. (This information is from a web\\nsite operated by the Nevada Division of Water Planning: The Water Words\\nDictionary at http://www.state.nv.us/cnr/ndwp/dict-1/waterwds.htm.)\"],\"comment\":\"\"}},{\"line\":\"minersinchMT = 1.5 ft^3/min\",\"info\":{\"headings\":[\"46. Miner's inch: This is an old historic unit used in the Western United\\nStates. It is generally defined as the rate of flow through a one square\\ninch hole at a specified depth such as 4 inches. In the late 19th century,\\nvolume of water was sometimes measured in the \\\"24 hour inch\\\". Values for the\\nminer's inch were fixed by state statues. (This information is from a web\\nsite operated by the Nevada Division of Water Planning: The Water Words\\nDictionary at http://www.state.nv.us/cnr/ndwp/dict-1/waterwds.htm.)\"],\"comment\":\"\"}},{\"line\":\"minersinchNV = 1.5 ft^3/min\",\"info\":{\"headings\":[\"46. Miner's inch: This is an old historic unit used in the Western United\\nStates. It is generally defined as the rate of flow through a one square\\ninch hole at a specified depth such as 4 inches. In the late 19th century,\\nvolume of water was sometimes measured in the \\\"24 hour inch\\\". Values for the\\nminer's inch were fixed by state statues. (This information is from a web\\nsite operated by the Nevada Division of Water Planning: The Water Words\\nDictionary at http://www.state.nv.us/cnr/ndwp/dict-1/waterwds.htm.)\"],\"comment\":\"\"}},{\"line\":\"minersinchOR = 1.5 ft^3/min\",\"info\":{\"headings\":[\"46. Miner's inch: This is an old historic unit used in the Western United\\nStates. It is generally defined as the rate of flow through a one square\\ninch hole at a specified depth such as 4 inches. In the late 19th century,\\nvolume of water was sometimes measured in the \\\"24 hour inch\\\". Values for the\\nminer's inch were fixed by state statues. (This information is from a web\\nsite operated by the Nevada Division of Water Planning: The Water Words\\nDictionary at http://www.state.nv.us/cnr/ndwp/dict-1/waterwds.htm.)\"],\"comment\":\"\"}},{\"line\":\"minersinchID = 1.2 ft^3/min\",\"info\":{\"headings\":[\"46. Miner's inch: This is an old historic unit used in the Western United\\nStates. It is generally defined as the rate of flow through a one square\\ninch hole at a specified depth such as 4 inches. In the late 19th century,\\nvolume of water was sometimes measured in the \\\"24 hour inch\\\". Values for the\\nminer's inch were fixed by state statues. (This information is from a web\\nsite operated by the Nevada Division of Water Planning: The Water Words\\nDictionary at http://www.state.nv.us/cnr/ndwp/dict-1/waterwds.htm.)\"],\"comment\":\"\"}},{\"line\":\"minersinchKS = 1.2 ft^3/min\",\"info\":{\"headings\":[\"46. Miner's inch: This is an old historic unit used in the Western United\\nStates. It is generally defined as the rate of flow through a one square\\ninch hole at a specified depth such as 4 inches. In the late 19th century,\\nvolume of water was sometimes measured in the \\\"24 hour inch\\\". Values for the\\nminer's inch were fixed by state statues. (This information is from a web\\nsite operated by the Nevada Division of Water Planning: The Water Words\\nDictionary at http://www.state.nv.us/cnr/ndwp/dict-1/waterwds.htm.)\"],\"comment\":\"\"}},{\"line\":\"minersinchNE = 1.2 ft^3/min\",\"info\":{\"headings\":[\"46. Miner's inch: This is an old historic unit used in the Western United\\nStates. It is generally defined as the rate of flow through a one square\\ninch hole at a specified depth such as 4 inches. In the late 19th century,\\nvolume of water was sometimes measured in the \\\"24 hour inch\\\". Values for the\\nminer's inch were fixed by state statues. (This information is from a web\\nsite operated by the Nevada Division of Water Planning: The Water Words\\nDictionary at http://www.state.nv.us/cnr/ndwp/dict-1/waterwds.htm.)\"],\"comment\":\"\"}},{\"line\":\"minersinchNM = 1.2 ft^3/min\",\"info\":{\"headings\":[\"46. Miner's inch: This is an old historic unit used in the Western United\\nStates. It is generally defined as the rate of flow through a one square\\ninch hole at a specified depth such as 4 inches. In the late 19th century,\\nvolume of water was sometimes measured in the \\\"24 hour inch\\\". Values for the\\nminer's inch were fixed by state statues. (This information is from a web\\nsite operated by the Nevada Division of Water Planning: The Water Words\\nDictionary at http://www.state.nv.us/cnr/ndwp/dict-1/waterwds.htm.)\"],\"comment\":\"\"}},{\"line\":\"minersinchND = 1.2 ft^3/min\",\"info\":{\"headings\":[\"46. Miner's inch: This is an old historic unit used in the Western United\\nStates. It is generally defined as the rate of flow through a one square\\ninch hole at a specified depth such as 4 inches. In the late 19th century,\\nvolume of water was sometimes measured in the \\\"24 hour inch\\\". Values for the\\nminer's inch were fixed by state statues. (This information is from a web\\nsite operated by the Nevada Division of Water Planning: The Water Words\\nDictionary at http://www.state.nv.us/cnr/ndwp/dict-1/waterwds.htm.)\"],\"comment\":\"\"}},{\"line\":\"minersinchSD = 1.2 ft^3/min\",\"info\":{\"headings\":[\"46. Miner's inch: This is an old historic unit used in the Western United\\nStates. It is generally defined as the rate of flow through a one square\\ninch hole at a specified depth such as 4 inches. In the late 19th century,\\nvolume of water was sometimes measured in the \\\"24 hour inch\\\". Values for the\\nminer's inch were fixed by state statues. (This information is from a web\\nsite operated by the Nevada Division of Water Planning: The Water Words\\nDictionary at http://www.state.nv.us/cnr/ndwp/dict-1/waterwds.htm.)\"],\"comment\":\"\"}},{\"line\":\"minersinchUT = 1.2 ft^3/min\",\"info\":{\"headings\":[\"46. Miner's inch: This is an old historic unit used in the Western United\\nStates. It is generally defined as the rate of flow through a one square\\ninch hole at a specified depth such as 4 inches. In the late 19th century,\\nvolume of water was sometimes measured in the \\\"24 hour inch\\\". Values for the\\nminer's inch were fixed by state statues. (This information is from a web\\nsite operated by the Nevada Division of Water Planning: The Water Words\\nDictionary at http://www.state.nv.us/cnr/ndwp/dict-1/waterwds.htm.)\"],\"comment\":\"\"}},{\"line\":\"minersinchCO = 1 ft^3/sec / 38.4\",\"info\":{\"headings\":[\"46. Miner's inch: This is an old historic unit used in the Western United\\nStates. It is generally defined as the rate of flow through a one square\\ninch hole at a specified depth such as 4 inches. In the late 19th century,\\nvolume of water was sometimes measured in the \\\"24 hour inch\\\". Values for the\\nminer's inch were fixed by state statues. (This information is from a web\\nsite operated by the Nevada Division of Water Planning: The Water Words\\nDictionary at http://www.state.nv.us/cnr/ndwp/dict-1/waterwds.htm.)\"],\"comment\":\"38.4 miner's inches = 1 ft^3/sec\"}},{\"line\":\"minersinchBC = 1.68 ft^3/min\",\"info\":{\"headings\":[\"46. Miner's inch: This is an old historic unit used in the Western United\\nStates. It is generally defined as the rate of flow through a one square\\ninch hole at a specified depth such as 4 inches. In the late 19th century,\\nvolume of water was sometimes measured in the \\\"24 hour inch\\\". Values for the\\nminer's inch were fixed by state statues. (This information is from a web\\nsite operated by the Nevada Division of Water Planning: The Water Words\\nDictionary at http://www.state.nv.us/cnr/ndwp/dict-1/waterwds.htm.)\"],\"comment\":\"British Columbia\"}},{\"line\":\"sverdrup = 1e6 m^3 / sec\",\"info\":{\"headings\":[\"47. Oceanographic flow\"],\"comment\":\"Used to express flow of ocean\\ncurrents.  Named after Norwegian\\noceanographer H. Sverdrup.\"}},{\"line\":\"GAS_FLOW = PRESSURE FLUID_FLOW\",\"info\":{\"headings\":[\"48. In vacuum science and some other applications, gas flow is measured\\nas the product of volumetric flow and pressure. This is useful\\nbecause it makes it easy to compare with the flow at standard\\npressure (one atmosphere). It also directly relates to the number\\nof gas molecules per unit time, and hence to the mass flow if the\\nmolecular mass is known.\"],\"comment\":\"\"}},{\"line\":\"sccm = atm cc/min\",\"info\":{\"headings\":[\"48. In vacuum science and some other applications, gas flow is measured\\nas the product of volumetric flow and pressure. This is useful\\nbecause it makes it easy to compare with the flow at standard\\npressure (one atmosphere). It also directly relates to the number\\nof gas molecules per unit time, and hence to the mass flow if the\\nmolecular mass is known.\"],\"comment\":\"'s' is for \\\"standard\\\" to indicate\\nflow at standard pressure\"}},{\"line\":\"sccs = atm cc/sec\",\"info\":{\"headings\":[\"48. In vacuum science and some other applications, gas flow is measured\\nas the product of volumetric flow and pressure. This is useful\\nbecause it makes it easy to compare with the flow at standard\\npressure (one atmosphere). It also directly relates to the number\\nof gas molecules per unit time, and hence to the mass flow if the\\nmolecular mass is known.\"],\"comment\":\"'s' is for \\\"standard\\\" to indicate\\nflow at standard pressure\"}},{\"line\":\"scfh = atm ft^3/hour\",\"info\":{\"headings\":[\"48. In vacuum science and some other applications, gas flow is measured\\nas the product of volumetric flow and pressure. This is useful\\nbecause it makes it easy to compare with the flow at standard\\npressure (one atmosphere). It also directly relates to the number\\nof gas molecules per unit time, and hence to the mass flow if the\\nmolecular mass is known.\"],\"comment\":\"'s' is for \\\"standard\\\" to indicate\\nflow at standard pressure\"}},{\"line\":\"scfm = atm ft^3/min\",\"info\":{\"headings\":[\"48. In vacuum science and some other applications, gas flow is measured\\nas the product of volumetric flow and pressure. This is useful\\nbecause it makes it easy to compare with the flow at standard\\npressure (one atmosphere). It also directly relates to the number\\nof gas molecules per unit time, and hence to the mass flow if the\\nmolecular mass is known.\"],\"comment\":\"'s' is for \\\"standard\\\" to indicate\\nflow at standard pressure\"}},{\"line\":\"slpm = atm liter/min\",\"info\":{\"headings\":[\"48. In vacuum science and some other applications, gas flow is measured\\nas the product of volumetric flow and pressure. This is useful\\nbecause it makes it easy to compare with the flow at standard\\npressure (one atmosphere). It also directly relates to the number\\nof gas molecules per unit time, and hence to the mass flow if the\\nmolecular mass is known.\"],\"comment\":\"'s' is for \\\"standard\\\" to indicate\\nflow at standard pressure\"}},{\"line\":\"slph = atm liter/hour\",\"info\":{\"headings\":[\"48. In vacuum science and some other applications, gas flow is measured\\nas the product of volumetric flow and pressure. This is useful\\nbecause it makes it easy to compare with the flow at standard\\npressure (one atmosphere). It also directly relates to the number\\nof gas molecules per unit time, and hence to the mass flow if the\\nmolecular mass is known.\"],\"comment\":\"'s' is for \\\"standard\\\" to indicate\\nflow at standard pressure\"}},{\"line\":\"lusec = liter micron Hg / s\",\"info\":{\"headings\":[\"48. In vacuum science and some other applications, gas flow is measured\\nas the product of volumetric flow and pressure. This is useful\\nbecause it makes it easy to compare with the flow at standard\\npressure (one atmosphere). It also directly relates to the number\\nof gas molecules per unit time, and hence to the mass flow if the\\nmolecular mass is known.\"],\"comment\":\"Used in vacuum science\"}},{\"line\":\"lapserate = 6.5 K/km\",\"info\":{\"headings\":[\"49. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"temperature lapse rate, -dT/dz, in troposphere\\n\\nUS Std Atm (1976)\"}},{\"line\":\"air_1976 = 78.084   %    28.0134 \\t      + 20.9476  %    31.9988 \\t      + 9340     ppm  39.948 \\t      +  314     ppm  44.00995 \\t      +   18.18  ppm  20.183 \\t      +    5.24  ppm   4.0026 \\t      +    2     ppm  16.04303 \\t      +    1.14  ppm  83.80 \\t      +    0.55  ppm   2.01594 \\t      +    0.087 ppm 131.30\",\"info\":{\"headings\":[\"49. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"air molecular weight, including constituent mol wt, given\\nin Table 3, p. 3\"}},{\"line\":\"R_1976 = 8.31432e3 N m/(kmol K)\",\"info\":{\"headings\":[\"49. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"universal gas constant\"}},{\"line\":\"polyndx_1976 = air_1976 (kg/kmol) gravity/(R_1976 lapserate) - 1\",\"info\":{\"headings\":[\"49. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"polytropic index n\\n\\n\\nIf desired, redefine using current values for air mol wt and R\"}},{\"line\":\"polyndx = polyndx_1976\",\"info\":{\"headings\":[\"49. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"\"}},{\"line\":\"polyexpnt = (polyndx + 1) / polyndx\",\"info\":{\"headings\":[\"49. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"for comparison with various references\"}},{\"line\":\"stdatmT0 = 288.15 K\",\"info\":{\"headings\":[\"49. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"The model assumes the following reference values:\\nsea-level temperature and pressure\"}},{\"line\":\"stdatmP0 = atm\",\"info\":{\"headings\":[\"49. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"The model assumes the following reference values:\\nsea-level temperature and pressure\"}},{\"line\":\"earthradUSAtm = 6356766 m\",\"info\":{\"headings\":[\"49. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"\\\"effective radius\\\" for relation of geometric to geopotential height,\\nat a latitude at which g = 9.80665 m/s (approximately 45.543 deg); no\\nrelation to actual radius\"}},{\"line\":\"stdatmTH = h => stdatmT0+(-lapserate h) \",\"info\":{\"headings\":[\"49. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"Temperature vs. geopotential height h\\nAssumes 15 degC at sea level\\nBased on approx 45 deg latitude\\nLower limits of domain and upper limits of range are those of the\\ntables in US Standard Atmosphere (NASA 1976)\"}},{\"line\":\"stdatmTH^-1 = stdatmTH => (stdatmT0+(-stdatmTH))/lapserate\",\"info\":{\"headings\":[\"49. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"Temperature vs. geopotential height h\\nAssumes 15 degC at sea level\\nBased on approx 45 deg latitude\\nLower limits of domain and upper limits of range are those of the\\ntables in US Standard Atmosphere (NASA 1976)\"}},{\"line\":\"stdatmT = z => stdatmTH(geop_ht(z)) \",\"info\":{\"headings\":[\"49. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"Temperature vs. geometric height z; based on approx 45 deg latitude\"}},{\"line\":\"stdatmT^-1 = stdatmT => ~geop_ht(~stdatmTH(stdatmT))\",\"info\":{\"headings\":[\"49. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"Temperature vs. geometric height z; based on approx 45 deg latitude\"}},{\"line\":\"stdatmPH = h => atm (1 - (lapserate/stdatmT0) h)^(polyndx + 1) \",\"info\":{\"headings\":[\"49. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"Pressure vs. geopotential height h\\nAssumes 15 degC and 101325 Pa at sea level\\nBased on approx 45 deg latitude\\nLower limits of domain and upper limits of range are those of the\\ntables in US Standard Atmosphere (NASA 1976)\"}},{\"line\":\"stdatmPH^-1 = stdatmPH => (stdatmT0/lapserate) (1+(-(stdatmPH/stdatmP0)^(1/(polyndx + 1))))\",\"info\":{\"headings\":[\"49. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"Pressure vs. geopotential height h\\nAssumes 15 degC and 101325 Pa at sea level\\nBased on approx 45 deg latitude\\nLower limits of domain and upper limits of range are those of the\\ntables in US Standard Atmosphere (NASA 1976)\"}},{\"line\":\"stdatmP = z => stdatmPH(geop_ht(z))\",\"info\":{\"headings\":[\"49. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"Pressure vs. geometric height z; based on approx 45 deg latitude\"}},{\"line\":\"stdatmP^-1 = stdatmP => ~geop_ht(~stdatmPH(stdatmP))\",\"info\":{\"headings\":[\"49. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"Pressure vs. geometric height z; based on approx 45 deg latitude\"}},{\"line\":\"geop_ht = z => (earthradUSAtm z) / (earthradUSAtm + z) \",\"info\":{\"headings\":[\"49. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"Geopotential height from geometric height\\nBased on approx 45 deg latitude\\nLower limits of domain and range are somewhat arbitrary; they\\ncorrespond to the limits in the US Std Atm tables\"}},{\"line\":\"geop_ht^-1 = geop_ht => (earthradUSAtm geop_ht) / (earthradUSAtm + (-geop_ht))\",\"info\":{\"headings\":[\"49. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"Geopotential height from geometric height\\nBased on approx 45 deg latitude\\nLower limits of domain and range are somewhat arbitrary; they\\ncorrespond to the limits in the US Std Atm tables\"}},{\"line\":\"g_phi = lat => noerror      980.6160e-2 (1+(-0.0026373) cos(2 lat)+0.0000059 cos(2 lat)^2) m/s^2\",\"info\":{\"headings\":[\"49. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"The standard value for the sea-level acceleration due to gravity is\\n9.80665 m/s^2, but the actual value varies with latitude (Harrison 1949)\\nR_eff = 2 g_phi / denom\\ng_phi = 978.0356e-2 (1+0.0052885 sin(lat)^2+(-0.0000059) sin(2 lat)^2)\\nor\\ng_phi = 980.6160e-2 (1+(-0.0026373) cos(2 lat)+0.0000059 cos(2 lat)^2)\\ndenom = 3.085462e-6+2.27e-9 cos(2 lat)+(-2e-12) cos(4 lat) (minutes?)\\nThere is no inverse function; the standard value applies at a latitude\\nof about 45.543 deg\"}},{\"line\":\"earthradius_eff = lat => noerror     m 2 9.780356 (1+0.0052885 sin(lat)^2+(-0.0000059) sin(2 lat)^2) /     (3.085462e-6 + 2.27e-9 cos(2 lat) + (-2e-12) cos(4 lat))\",\"info\":{\"headings\":[\"49. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"effective Earth radius for relation of geometric height to\\ngeopotential height, as function of latitude (Harrison 1949)\"}},{\"line\":\"Patm = atm\",\"info\":{\"headings\":[\"50. Gauge pressure functions\\n\\nGauge pressure is measured relative to atmospheric pressure. In the English\\nsystem, where pressure is often given in pounds per square inch, gauge\\npressure is often indicated by 'psig' to distinguish it from absolute\\npressure, often indicated by 'psia'. At the standard atmospheric pressure\\nof 14.696 psia, a gauge pressure of 0 psig is an absolute pressure of 14.696\\npsia; an automobile tire inflated to 31 psig has an absolute pressure of\\n45.696 psia.\\n\\nWith gaugepressure(), the units must be specified (e.g., gaugepressure(1.5\\nbar)); with psig(), the units are taken as psi, so the example above of tire\\npressure could be given as psig(31).\\n\\nIf the normal elevation is significantly different from sea level, change\\nPatm appropriately, and adjust the lower domain limit on the gaugepressure\\ndefinition.\"],\"comment\":\"\"}},{\"line\":\"gaugepressure = x => x + Patm \",\"info\":{\"headings\":[\"50. Gauge pressure functions\\n\\nGauge pressure is measured relative to atmospheric pressure. In the English\\nsystem, where pressure is often given in pounds per square inch, gauge\\npressure is often indicated by 'psig' to distinguish it from absolute\\npressure, often indicated by 'psia'. At the standard atmospheric pressure\\nof 14.696 psia, a gauge pressure of 0 psig is an absolute pressure of 14.696\\npsia; an automobile tire inflated to 31 psig has an absolute pressure of\\n45.696 psia.\\n\\nWith gaugepressure(), the units must be specified (e.g., gaugepressure(1.5\\nbar)); with psig(), the units are taken as psi, so the example above of tire\\npressure could be given as psig(31).\\n\\nIf the normal elevation is significantly different from sea level, change\\nPatm appropriately, and adjust the lower domain limit on the gaugepressure\\ndefinition.\"],\"comment\":\"\"}},{\"line\":\"gaugepressure^-1 = gaugepressure => gaugepressure+(-Patm)\",\"info\":{\"headings\":[\"50. Gauge pressure functions\\n\\nGauge pressure is measured relative to atmospheric pressure. In the English\\nsystem, where pressure is often given in pounds per square inch, gauge\\npressure is often indicated by 'psig' to distinguish it from absolute\\npressure, often indicated by 'psia'. At the standard atmospheric pressure\\nof 14.696 psia, a gauge pressure of 0 psig is an absolute pressure of 14.696\\npsia; an automobile tire inflated to 31 psig has an absolute pressure of\\n45.696 psia.\\n\\nWith gaugepressure(), the units must be specified (e.g., gaugepressure(1.5\\nbar)); with psig(), the units are taken as psi, so the example above of tire\\npressure could be given as psig(31).\\n\\nIf the normal elevation is significantly different from sea level, change\\nPatm appropriately, and adjust the lower domain limit on the gaugepressure\\ndefinition.\"],\"comment\":\"\"}},{\"line\":\"psig = x => gaugepressure(x psi) \",\"info\":{\"headings\":[\"50. Gauge pressure functions\\n\\nGauge pressure is measured relative to atmospheric pressure. In the English\\nsystem, where pressure is often given in pounds per square inch, gauge\\npressure is often indicated by 'psig' to distinguish it from absolute\\npressure, often indicated by 'psia'. At the standard atmospheric pressure\\nof 14.696 psia, a gauge pressure of 0 psig is an absolute pressure of 14.696\\npsia; an automobile tire inflated to 31 psig has an absolute pressure of\\n45.696 psia.\\n\\nWith gaugepressure(), the units must be specified (e.g., gaugepressure(1.5\\nbar)); with psig(), the units are taken as psi, so the example above of tire\\npressure could be given as psig(31).\\n\\nIf the normal elevation is significantly different from sea level, change\\nPatm appropriately, and adjust the lower domain limit on the gaugepressure\\ndefinition.\"],\"comment\":\"\"}},{\"line\":\"psig^-1 = psig => ~gaugepressure(psig) / psi\",\"info\":{\"headings\":[\"50. Gauge pressure functions\\n\\nGauge pressure is measured relative to atmospheric pressure. In the English\\nsystem, where pressure is often given in pounds per square inch, gauge\\npressure is often indicated by 'psig' to distinguish it from absolute\\npressure, often indicated by 'psia'. At the standard atmospheric pressure\\nof 14.696 psia, a gauge pressure of 0 psig is an absolute pressure of 14.696\\npsia; an automobile tire inflated to 31 psig has an absolute pressure of\\n45.696 psia.\\n\\nWith gaugepressure(), the units must be specified (e.g., gaugepressure(1.5\\nbar)); with psig(), the units are taken as psi, so the example above of tire\\npressure could be given as psig(31).\\n\\nIf the normal elevation is significantly different from sea level, change\\nPatm appropriately, and adjust the lower domain limit on the gaugepressure\\ndefinition.\"],\"comment\":\"\"}},{\"line\":\"g00 = (-1)\",\"info\":{\"headings\":[\"51. Wire Gauge\\n\\nThis area is a nightmare with huge charts of wire gauge diameters\\nthat usually have no clear origin. There are at least 5 competing wire gauge\\nsystems to add to the confusion. The use of wire gauge is related to the\\nmanufacturing method: a metal rod is heated and drawn through a hole. The\\nsize change can't be too big. To get smaller wires, the process is repeated\\nwith a series of smaller holes. Generally larger gauges mean smaller wires.\\nThe gauges often have values such as \\\"00\\\" and \\\"000\\\" which are larger sizes\\nthan simply \\\"0\\\" gauge. In the tables that appear below, these gauges must be\\nspecified as negative numbers (e.g. \\\"00\\\" is -1, \\\"000\\\" is -2, etc).\\nAlternatively, you can use the following units:\"],\"comment\":\"\"}},{\"line\":\"g000 = (-2)\",\"info\":{\"headings\":[\"51. Wire Gauge\\n\\nThis area is a nightmare with huge charts of wire gauge diameters\\nthat usually have no clear origin. There are at least 5 competing wire gauge\\nsystems to add to the confusion. The use of wire gauge is related to the\\nmanufacturing method: a metal rod is heated and drawn through a hole. The\\nsize change can't be too big. To get smaller wires, the process is repeated\\nwith a series of smaller holes. Generally larger gauges mean smaller wires.\\nThe gauges often have values such as \\\"00\\\" and \\\"000\\\" which are larger sizes\\nthan simply \\\"0\\\" gauge. In the tables that appear below, these gauges must be\\nspecified as negative numbers (e.g. \\\"00\\\" is -1, \\\"000\\\" is -2, etc).\\nAlternatively, you can use the following units:\"],\"comment\":\"\"}},{\"line\":\"g0000 = (-3)\",\"info\":{\"headings\":[\"51. Wire Gauge\\n\\nThis area is a nightmare with huge charts of wire gauge diameters\\nthat usually have no clear origin. There are at least 5 competing wire gauge\\nsystems to add to the confusion. The use of wire gauge is related to the\\nmanufacturing method: a metal rod is heated and drawn through a hole. The\\nsize change can't be too big. To get smaller wires, the process is repeated\\nwith a series of smaller holes. Generally larger gauges mean smaller wires.\\nThe gauges often have values such as \\\"00\\\" and \\\"000\\\" which are larger sizes\\nthan simply \\\"0\\\" gauge. In the tables that appear below, these gauges must be\\nspecified as negative numbers (e.g. \\\"00\\\" is -1, \\\"000\\\" is -2, etc).\\nAlternatively, you can use the following units:\"],\"comment\":\"\"}},{\"line\":\"g00000 = (-4)\",\"info\":{\"headings\":[\"51. Wire Gauge\\n\\nThis area is a nightmare with huge charts of wire gauge diameters\\nthat usually have no clear origin. There are at least 5 competing wire gauge\\nsystems to add to the confusion. The use of wire gauge is related to the\\nmanufacturing method: a metal rod is heated and drawn through a hole. The\\nsize change can't be too big. To get smaller wires, the process is repeated\\nwith a series of smaller holes. Generally larger gauges mean smaller wires.\\nThe gauges often have values such as \\\"00\\\" and \\\"000\\\" which are larger sizes\\nthan simply \\\"0\\\" gauge. In the tables that appear below, these gauges must be\\nspecified as negative numbers (e.g. \\\"00\\\" is -1, \\\"000\\\" is -2, etc).\\nAlternatively, you can use the following units:\"],\"comment\":\"\"}},{\"line\":\"g000000 = (-5)\",\"info\":{\"headings\":[\"51. Wire Gauge\\n\\nThis area is a nightmare with huge charts of wire gauge diameters\\nthat usually have no clear origin. There are at least 5 competing wire gauge\\nsystems to add to the confusion. The use of wire gauge is related to the\\nmanufacturing method: a metal rod is heated and drawn through a hole. The\\nsize change can't be too big. To get smaller wires, the process is repeated\\nwith a series of smaller holes. Generally larger gauges mean smaller wires.\\nThe gauges often have values such as \\\"00\\\" and \\\"000\\\" which are larger sizes\\nthan simply \\\"0\\\" gauge. In the tables that appear below, these gauges must be\\nspecified as negative numbers (e.g. \\\"00\\\" is -1, \\\"000\\\" is -2, etc).\\nAlternatively, you can use the following units:\"],\"comment\":\"\"}},{\"line\":\"g0000000 = (-6)\",\"info\":{\"headings\":[\"51. Wire Gauge\\n\\nThis area is a nightmare with huge charts of wire gauge diameters\\nthat usually have no clear origin. There are at least 5 competing wire gauge\\nsystems to add to the confusion. The use of wire gauge is related to the\\nmanufacturing method: a metal rod is heated and drawn through a hole. The\\nsize change can't be too big. To get smaller wires, the process is repeated\\nwith a series of smaller holes. Generally larger gauges mean smaller wires.\\nThe gauges often have values such as \\\"00\\\" and \\\"000\\\" which are larger sizes\\nthan simply \\\"0\\\" gauge. In the tables that appear below, these gauges must be\\nspecified as negative numbers (e.g. \\\"00\\\" is -1, \\\"000\\\" is -2, etc).\\nAlternatively, you can use the following units:\"],\"comment\":\"\"}},{\"line\":\"wiregauge = g => 1|200 92^((36+(-g))/39) in\",\"info\":{\"headings\":[\"51. Wire Gauge\\n\\nThis area is a nightmare with huge charts of wire gauge diameters\\nthat usually have no clear origin. There are at least 5 competing wire gauge\\nsystems to add to the confusion. The use of wire gauge is related to the\\nmanufacturing method: a metal rod is heated and drawn through a hole. The\\nsize change can't be too big. To get smaller wires, the process is repeated\\nwith a series of smaller holes. Generally larger gauges mean smaller wires.\\nThe gauges often have values such as \\\"00\\\" and \\\"000\\\" which are larger sizes\\nthan simply \\\"0\\\" gauge. In the tables that appear below, these gauges must be\\nspecified as negative numbers (e.g. \\\"00\\\" is -1, \\\"000\\\" is -2, etc).\\nAlternatively, you can use the following units:\",\"51.1. American Wire Gauge (AWG) or Brown & Sharpe Gauge appears to be the most\\nimportant gauge. ASTM B-258 specifies that this gauge is based on geometric\\ninterpolation between gauge 0000, which is 0.46 inches exactly, and gauge 36\\nwhich is 0.005 inches exactly. Therefore, the diameter in inches of a wire\\nis given by the formula 1|200 92^((36-g)/39). Note that 92^(1/39) is close\\nto 2^(1/6), so diameter is approximately halved for every 6 gauges. For the\\nrepeated zero values, use negative numbers in the formula. The same document\\nalso specifies rounding rules which seem to be ignored by makers of tables.\\nGauges up to 44 are to be specified with up to 4 significant figures, but no\\ncloser than 0.0001 inch. Gauges from 44 to 56 are to be rounded to the\\nnearest 0.00001 inch.\\n\\nIn addition to being used to measure wire thickness, this gauge is used to\\nmeasure the thickness of sheets of aluminum, copper, and most metals other\\nthan steel, iron and zinc.\"],\"comment\":\"\"}},{\"line\":\"wiregauge^-1 = wiregauge => 36+(-39)ln(200 wiregauge/in)/ln(92)\",\"info\":{\"headings\":[\"51. Wire Gauge\\n\\nThis area is a nightmare with huge charts of wire gauge diameters\\nthat usually have no clear origin. There are at least 5 competing wire gauge\\nsystems to add to the confusion. The use of wire gauge is related to the\\nmanufacturing method: a metal rod is heated and drawn through a hole. The\\nsize change can't be too big. To get smaller wires, the process is repeated\\nwith a series of smaller holes. Generally larger gauges mean smaller wires.\\nThe gauges often have values such as \\\"00\\\" and \\\"000\\\" which are larger sizes\\nthan simply \\\"0\\\" gauge. In the tables that appear below, these gauges must be\\nspecified as negative numbers (e.g. \\\"00\\\" is -1, \\\"000\\\" is -2, etc).\\nAlternatively, you can use the following units:\",\"51.1. American Wire Gauge (AWG) or Brown & Sharpe Gauge appears to be the most\\nimportant gauge. ASTM B-258 specifies that this gauge is based on geometric\\ninterpolation between gauge 0000, which is 0.46 inches exactly, and gauge 36\\nwhich is 0.005 inches exactly. Therefore, the diameter in inches of a wire\\nis given by the formula 1|200 92^((36-g)/39). Note that 92^(1/39) is close\\nto 2^(1/6), so diameter is approximately halved for every 6 gauges. For the\\nrepeated zero values, use negative numbers in the formula. The same document\\nalso specifies rounding rules which seem to be ignored by makers of tables.\\nGauges up to 44 are to be specified with up to 4 significant figures, but no\\ncloser than 0.0001 inch. Gauges from 44 to 56 are to be rounded to the\\nnearest 0.00001 inch.\\n\\nIn addition to being used to measure wire thickness, this gauge is used to\\nmeasure the thickness of sheets of aluminum, copper, and most metals other\\nthan steel, iron and zinc.\"],\"comment\":\"\"}},{\"line\":\"awg = wiregauge\",\"info\":{\"headings\":[\"51. Wire Gauge\\n\\nThis area is a nightmare with huge charts of wire gauge diameters\\nthat usually have no clear origin. There are at least 5 competing wire gauge\\nsystems to add to the confusion. The use of wire gauge is related to the\\nmanufacturing method: a metal rod is heated and drawn through a hole. The\\nsize change can't be too big. To get smaller wires, the process is repeated\\nwith a series of smaller holes. Generally larger gauges mean smaller wires.\\nThe gauges often have values such as \\\"00\\\" and \\\"000\\\" which are larger sizes\\nthan simply \\\"0\\\" gauge. In the tables that appear below, these gauges must be\\nspecified as negative numbers (e.g. \\\"00\\\" is -1, \\\"000\\\" is -2, etc).\\nAlternatively, you can use the following units:\",\"51.1. American Wire Gauge (AWG) or Brown & Sharpe Gauge appears to be the most\\nimportant gauge. ASTM B-258 specifies that this gauge is based on geometric\\ninterpolation between gauge 0000, which is 0.46 inches exactly, and gauge 36\\nwhich is 0.005 inches exactly. Therefore, the diameter in inches of a wire\\nis given by the formula 1|200 92^((36-g)/39). Note that 92^(1/39) is close\\nto 2^(1/6), so diameter is approximately halved for every 6 gauges. For the\\nrepeated zero values, use negative numbers in the formula. The same document\\nalso specifies rounding rules which seem to be ignored by makers of tables.\\nGauges up to 44 are to be specified with up to 4 significant figures, but no\\ncloser than 0.0001 inch. Gauges from 44 to 56 are to be rounded to the\\nnearest 0.00001 inch.\\n\\nIn addition to being used to measure wire thickness, this gauge is used to\\nmeasure the thickness of sheets of aluminum, copper, and most metals other\\nthan steel, iron and zinc.\"],\"comment\":\"\"}},{\"line\":\"screwgauge = g => (.06 + .013 g) in \",\"info\":{\"headings\":[\"52. Screw sizes\\n\\nIn the USA, screw diameters are reported using a gauge number.\\nMetric screws are reported as Mxx where xx is the diameter in mm.\"],\"comment\":\"\"}},{\"line\":\"screwgauge^-1 = screwgauge => (screwgauge/in + (-.06)) / .013\",\"info\":{\"headings\":[\"52. Screw sizes\\n\\nIn the USA, screw diameters are reported using a gauge number.\\nMetric screws are reported as Mxx where xx is the diameter in mm.\"],\"comment\":\"\"}},{\"line\":\"dmtxxcoarse = 120 micron\",\"info\":{\"headings\":[\"53. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtsilver = dmtxxcoarse\",\"info\":{\"headings\":[\"53. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtxx = dmtxxcoarse\",\"info\":{\"headings\":[\"53. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtxcoarse = 60 micron\",\"info\":{\"headings\":[\"53. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtx = dmtxcoarse\",\"info\":{\"headings\":[\"53. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtblack = dmtxcoarse\",\"info\":{\"headings\":[\"53. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtcoarse = 45 micron\",\"info\":{\"headings\":[\"53. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtc = dmtcoarse\",\"info\":{\"headings\":[\"53. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtblue = dmtcoarse\",\"info\":{\"headings\":[\"53. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtfine = 25 micron\",\"info\":{\"headings\":[\"53. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtred = dmtfine\",\"info\":{\"headings\":[\"53. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtf = dmtfine\",\"info\":{\"headings\":[\"53. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtefine = 9 micron\",\"info\":{\"headings\":[\"53. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmte = dmtefine\",\"info\":{\"headings\":[\"53. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtgreen = dmtefine\",\"info\":{\"headings\":[\"53. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtceramic = 7 micron\",\"info\":{\"headings\":[\"53. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtcer = dmtceramic\",\"info\":{\"headings\":[\"53. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtwhite = dmtceramic\",\"info\":{\"headings\":[\"53. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmteefine = 3 micron\",\"info\":{\"headings\":[\"53. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmttan = dmteefine\",\"info\":{\"headings\":[\"53. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtee = dmteefine\",\"info\":{\"headings\":[\"53. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"hardtranslucentarkansas = 6 micron\",\"info\":{\"headings\":[\"54. The following values come from a page in the Norton Stones catalog,\\navailable at their web page, http://www.nortonstones.com.\"],\"comment\":\"Natural novaculite (silicon quartz)\\nstones\"}},{\"line\":\"softarkansas = 22 micron\",\"info\":{\"headings\":[\"54. The following values come from a page in the Norton Stones catalog,\\navailable at their web page, http://www.nortonstones.com.\"],\"comment\":\"Natural novaculite (silicon quartz)\\nstones\"}},{\"line\":\"extrafineindia = 22 micron\",\"info\":{\"headings\":[\"54. The following values come from a page in the Norton Stones catalog,\\navailable at their web page, http://www.nortonstones.com.\"],\"comment\":\"India stones are Norton's manufactured\\naluminum oxide product\"}},{\"line\":\"fineindia = 35 micron\",\"info\":{\"headings\":[\"54. The following values come from a page in the Norton Stones catalog,\\navailable at their web page, http://www.nortonstones.com.\"],\"comment\":\"India stones are Norton's manufactured\\naluminum oxide product\"}},{\"line\":\"mediumindia = 53.5 micron\",\"info\":{\"headings\":[\"54. The following values come from a page in the Norton Stones catalog,\\navailable at their web page, http://www.nortonstones.com.\"],\"comment\":\"India stones are Norton's manufactured\\naluminum oxide product\"}},{\"line\":\"coarseindia = 97 micron\",\"info\":{\"headings\":[\"54. The following values come from a page in the Norton Stones catalog,\\navailable at their web page, http://www.nortonstones.com.\"],\"comment\":\"India stones are Norton's manufactured\\naluminum oxide product\"}},{\"line\":\"finecrystolon = 45 micron\",\"info\":{\"headings\":[\"54. The following values come from a page in the Norton Stones catalog,\\navailable at their web page, http://www.nortonstones.com.\"],\"comment\":\"Crystolon stones are Norton's\\nmanufactured silicon carbide product\"}},{\"line\":\"mediumcrystalon = 78 micron\",\"info\":{\"headings\":[\"54. The following values come from a page in the Norton Stones catalog,\\navailable at their web page, http://www.nortonstones.com.\"],\"comment\":\"Crystolon stones are Norton's\\nmanufactured silicon carbide product\"}},{\"line\":\"coarsecrystalon = 127 micron\",\"info\":{\"headings\":[\"54. The following values come from a page in the Norton Stones catalog,\\navailable at their web page, http://www.nortonstones.com.\"],\"comment\":\"Crystolon stones are Norton's\\nmanufactured silicon carbide product\"}},{\"line\":\"hardblackarkansas = 6 micron\",\"info\":{\"headings\":[\"54. The following values come from a page in the Norton Stones catalog,\\navailable at their web page, http://www.nortonstones.com.\",\"54.1. The following are not from the Norton catalog\"],\"comment\":\"\"}},{\"line\":\"hardwhitearkansas = 11 micron\",\"info\":{\"headings\":[\"54. The following values come from a page in the Norton Stones catalog,\\navailable at their web page, http://www.nortonstones.com.\",\"54.1. The following are not from the Norton catalog\"],\"comment\":\"\"}},{\"line\":\"washita = 35 micron\",\"info\":{\"headings\":[\"54. The following values come from a page in the Norton Stones catalog,\\navailable at their web page, http://www.nortonstones.com.\",\"54.1. The following are not from the Norton catalog\"],\"comment\":\"\"}},{\"line\":\"ringsize = n => (1.4216+.1018 n) in \",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"USA ring sizes.  Several slightly different definitions seem to be in\\ncirculation.  According to [15], the interior diameter of size n ring in\\ninches is 0.32 n + 0.458 for n ranging from 3 to 13.5 by steps of 0.5.  The\\nsize 2 ring is inconsistently 0.538in and no 2.5 size is listed.\\n\\nHowever, other sources list 0.455 + 0.0326 n and 0.4525 + 0.0324 n as the\\ndiameter and list no special case for size 2.  (Or alternatively they are\\n1.43 + .102 n and 1.4216+.1018 n for measuring circumference in inches.)  One\\nreference claimed that the original system was that each size was 1|10 inch\\ncircumference, but that source doesn't have an explanation for the modern\\nsystem which is somewhat different.\"}},{\"line\":\"ringsize^-1 = ringsize => (ringsize/in + (-1.4216))/.1018\",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"USA ring sizes.  Several slightly different definitions seem to be in\\ncirculation.  According to [15], the interior diameter of size n ring in\\ninches is 0.32 n + 0.458 for n ranging from 3 to 13.5 by steps of 0.5.  The\\nsize 2 ring is inconsistently 0.538in and no 2.5 size is listed.\\n\\nHowever, other sources list 0.455 + 0.0326 n and 0.4525 + 0.0324 n as the\\ndiameter and list no special case for size 2.  (Or alternatively they are\\n1.43 + .102 n and 1.4216+.1018 n for measuring circumference in inches.)  One\\nreference claimed that the original system was that each size was 1|10 inch\\ncircumference, but that source doesn't have an explanation for the modern\\nsystem which is somewhat different.\"}},{\"line\":\"sizeAring = 37.50 mm\",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeBring = 38.75 mm\",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeCring = 40.00 mm\",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeDring = 41.25 mm\",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeEring = 42.50 mm\",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeFring = 43.75 mm\",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeGring = 45.00 mm\",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeHring = 46.25 mm\",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeIring = 47.50 mm\",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeJring = 48.75 mm\",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeKring = 50.00 mm\",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeLring = 51.25 mm\",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeMring = 52.50 mm\",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeNring = 53.75 mm\",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeOring = 55.00 mm\",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizePring = 56.25 mm\",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeQring = 57.50 mm\",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeRring = 58.75 mm\",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeSring = 60.00 mm\",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeTring = 61.25 mm\",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeUring = 62.50 mm\",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeVring = 63.75 mm\",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeWring = 65.00 mm\",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeXring = 66.25 mm\",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeYring = 67.50 mm\",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeZring = 68.75 mm\",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"jpringsize = n => (38|3 + n/3) pi mm \",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Japanese sizes start with size 1 at a 13mm inside diameter and each size is\\n1|3 mm larger in diameter than the previous one.  They are multiplied by pi\\nto give circumference.\"}},{\"line\":\"jpringsize^-1 = jpringsize => 3 jpringsize/ pi mm + (-38)\",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Japanese sizes start with size 1 at a 13mm inside diameter and each size is\\n1|3 mm larger in diameter than the previous one.  They are multiplied by pi\\nto give circumference.\"}},{\"line\":\"euringsize = n => (n+40) mm \",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"The European ring sizes are the length of the circumference in mm minus 40.\"}},{\"line\":\"euringsize^-1 = euringsize => euringsize/mm + (-40)\",\"info\":{\"headings\":[\"55. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"The European ring sizes are the length of the circumference in mm minus 40.\"}},{\"line\":\"mph = mile/hr\",\"info\":{\"headings\":[\"56. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"mpg = mile/gal\",\"info\":{\"headings\":[\"56. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"kph = km/hr\",\"info\":{\"headings\":[\"56. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"fL = footlambert\",\"info\":{\"headings\":[\"56. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"fpm = ft/min\",\"info\":{\"headings\":[\"56. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"fps = ft/s\",\"info\":{\"headings\":[\"56. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"rpm = rev/min\",\"info\":{\"headings\":[\"56. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"rps = rev/sec\",\"info\":{\"headings\":[\"56. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"mi = mile\",\"info\":{\"headings\":[\"56. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"smi = mile\",\"info\":{\"headings\":[\"56. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"nmi = nauticalmile\",\"info\":{\"headings\":[\"56. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"mbh = 1e3 btu/hour\",\"info\":{\"headings\":[\"56. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"mcm = 1e3 circularmil\",\"info\":{\"headings\":[\"56. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"ipy = inch/year\",\"info\":{\"headings\":[\"56. Abbreviations\"],\"comment\":\"used for corrosion rates\"}},{\"line\":\"ccf = 100 ft^3\",\"info\":{\"headings\":[\"56. Abbreviations\"],\"comment\":\"used for selling water [18]\"}},{\"line\":\"Mcf = 1000 ft^3\",\"info\":{\"headings\":[\"56. Abbreviations\"],\"comment\":\"not million cubic feet [18]\"}},{\"line\":\"kp = kilopond\",\"info\":{\"headings\":[\"56. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"kpm = kp meter\",\"info\":{\"headings\":[\"56. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"Wh = W hour\",\"info\":{\"headings\":[\"56. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"hph = hp hour\",\"info\":{\"headings\":[\"56. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"plf = lb / foot\",\"info\":{\"headings\":[\"56. Abbreviations\"],\"comment\":\"pounds per linear foot\"}},{\"line\":\"pa = Pa\",\"info\":{\"headings\":[\"57. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"ev = eV\",\"info\":{\"headings\":[\"57. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"hg = Hg\",\"info\":{\"headings\":[\"57. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"oe = Oe\",\"info\":{\"headings\":[\"57. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"mh = mH\",\"info\":{\"headings\":[\"57. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"rd = rod\",\"info\":{\"headings\":[\"57. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"pf = pF\",\"info\":{\"headings\":[\"57. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"gr = grain\",\"info\":{\"headings\":[\"57. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"nt = N\",\"info\":{\"headings\":[\"57. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"hz = Hz\",\"info\":{\"headings\":[\"57. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"hd = hogshead\",\"info\":{\"headings\":[\"57. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"dry = drygallon/gallon\",\"info\":{\"headings\":[\"57. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"nmile = nauticalmile\",\"info\":{\"headings\":[\"57. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"beV = GeV\",\"info\":{\"headings\":[\"57. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"bev = beV\",\"info\":{\"headings\":[\"57. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"coul = C\",\"info\":{\"headings\":[\"57. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"becquerel = /s\",\"info\":{\"headings\":[\"58. Radioactivity units\"],\"comment\":\"Activity of radioactive source\"}},{\"line\":\"Bq = becquerel\",\"info\":{\"headings\":[\"58. Radioactivity units\"],\"comment\":\"Activity of radioactive source\"}},{\"line\":\"curie = 3.7e10 Bq\",\"info\":{\"headings\":[\"58. Radioactivity units\"],\"comment\":\"Defined in 1910 as the radioactivity\\nemitted by the amount of radon that is\\nin equilibrium with 1 gram of radium.\"}},{\"line\":\"Ci = curie\",\"info\":{\"headings\":[\"58. Radioactivity units\"],\"comment\":\"Defined in 1910 as the radioactivity\\nemitted by the amount of radon that is\\nin equilibrium with 1 gram of radium.\"}},{\"line\":\"rutherford = 1e6 Bq\",\"info\":{\"headings\":[\"58. Radioactivity units\"],\"comment\":\"\"}},{\"line\":\"RADIATION_DOSE = gray\",\"info\":{\"headings\":[\"58. Radioactivity units\"],\"comment\":\"\"}},{\"line\":\"gray = J/kg\",\"info\":{\"headings\":[\"58. Radioactivity units\"],\"comment\":\"Absorbed dose of radiation\"}},{\"line\":\"Gy = gray\",\"info\":{\"headings\":[\"58. Radioactivity units\"],\"comment\":\"Absorbed dose of radiation\"}},{\"line\":\"rad = 1e-2 Gy\",\"info\":{\"headings\":[\"58. Radioactivity units\"],\"comment\":\"From Radiation Absorbed Dose\"}},{\"line\":\"rep = 8.38 mGy\",\"info\":{\"headings\":[\"58. Radioactivity units\"],\"comment\":\"Roentgen Equivalent Physical, the amount\\nof radiation which , absorbed in the\\nbody, would liberate the same amount\\nof energy as 1 roentgen of X rays\\nwould, or 97 ergs.\"}},{\"line\":\"sievert = J/kg\",\"info\":{\"headings\":[\"58. Radioactivity units\"],\"comment\":\"Dose equivalent:  dosage that has the\\nsame effect on human tissues as 200\\nkeV X-rays.  Different types of\\nradiation are weighted by the\\nRelative Biological Effectiveness\\n(RBE).\\n\\nRadiation type       RBE\\nX-ray, gamma ray     1\\nbeta rays, > 1 MeV   1\\nbeta rays, < 1 MeV  1.08\\nneutrons, < 1 MeV   4-5\\nneutrons, 1-10 MeV   10\\nprotons, 1 MeV      8.5\\nprotons, .1 MeV      10\\nalpha, 5 MeV         15\\nalpha, 1 MeV         20\\n\\nThe energies are the kinetic energy\\nof the particles.  Slower particles\\ninteract more, so they are more\\neffective ionizers, and hence have\\nhigher RBE values.\\n\\nrem stands for Roentgen Equivalent\\nMammal\"}},{\"line\":\"Sv = sievert\",\"info\":{\"headings\":[\"58. Radioactivity units\"],\"comment\":\"Dose equivalent:  dosage that has the\\nsame effect on human tissues as 200\\nkeV X-rays.  Different types of\\nradiation are weighted by the\\nRelative Biological Effectiveness\\n(RBE).\\n\\nRadiation type       RBE\\nX-ray, gamma ray     1\\nbeta rays, > 1 MeV   1\\nbeta rays, < 1 MeV  1.08\\nneutrons, < 1 MeV   4-5\\nneutrons, 1-10 MeV   10\\nprotons, 1 MeV      8.5\\nprotons, .1 MeV      10\\nalpha, 5 MeV         15\\nalpha, 1 MeV         20\\n\\nThe energies are the kinetic energy\\nof the particles.  Slower particles\\ninteract more, so they are more\\neffective ionizers, and hence have\\nhigher RBE values.\\n\\nrem stands for Roentgen Equivalent\\nMammal\"}},{\"line\":\"rem = 1e-2 Sv\",\"info\":{\"headings\":[\"58. Radioactivity units\"],\"comment\":\"Dose equivalent:  dosage that has the\\nsame effect on human tissues as 200\\nkeV X-rays.  Different types of\\nradiation are weighted by the\\nRelative Biological Effectiveness\\n(RBE).\\n\\nRadiation type       RBE\\nX-ray, gamma ray     1\\nbeta rays, > 1 MeV   1\\nbeta rays, < 1 MeV  1.08\\nneutrons, < 1 MeV   4-5\\nneutrons, 1-10 MeV   10\\nprotons, 1 MeV      8.5\\nprotons, .1 MeV      10\\nalpha, 5 MeV         15\\nalpha, 1 MeV         20\\n\\nThe energies are the kinetic energy\\nof the particles.  Slower particles\\ninteract more, so they are more\\neffective ionizers, and hence have\\nhigher RBE values.\\n\\nrem stands for Roentgen Equivalent\\nMammal\"}},{\"line\":\"roentgen = 2.58e-4 C / kg\",\"info\":{\"headings\":[\"58. Radioactivity units\"],\"comment\":\"Ionizing radiation that produces\\n1 statcoulomb of charge in 1 cc of\\ndry air at stp.\\nSometimes it appears spelled this way\"}},{\"line\":\"rontgen = roentgen\",\"info\":{\"headings\":[\"58. Radioactivity units\"],\"comment\":\"Ionizing radiation that produces\\n1 statcoulomb of charge in 1 cc of\\ndry air at stp.\\nSometimes it appears spelled this way\"}},{\"line\":\"sievertunit = 8.38 rontgen\",\"info\":{\"headings\":[\"58. Radioactivity units\"],\"comment\":\"Unit of gamma ray dose delivered in one\\nhour at a distance of 1 cm from a\\npoint source of 1 mg of radium\\nenclosed in platinum .5 mm thick.\"}},{\"line\":\"eman = 1e-7 Ci/m^3\",\"info\":{\"headings\":[\"58. Radioactivity units\"],\"comment\":\"radioactive concentration\"}},{\"line\":\"mache = 3.7e-7 Ci/m^3\",\"info\":{\"headings\":[\"58. Radioactivity units\"],\"comment\":\"\"}},{\"line\":\"actinium = 227.0278\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"aluminum = 26.981539\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"americium = 243.0614\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"Longest lived. 241.06\"}},{\"line\":\"antimony = 121.760\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"argon = 39.948\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"arsenic = 74.92159\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"astatine = 209.9871\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"Longest lived\"}},{\"line\":\"barium = 137.327\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"berkelium = 247.0703\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"Longest lived. 249.08\"}},{\"line\":\"beryllium = 9.012182\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"bismuth = 208.98037\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"boron = 10.811\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"bromine = 79.904\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"cadmium = 112.411\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"calcium = 40.078\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"californium = 251.0796\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"Longest lived.  252.08\"}},{\"line\":\"carbon = 12.011\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"cerium = 140.115\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"cesium = 132.90543\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"chlorine = 35.4527\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"chromium = 51.9961\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"cobalt = 58.93320\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"copper = 63.546\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"curium = 247.0703\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"deuterium = 2.0141017778\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"dysprosium = 162.50\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"einsteinium = 252.083\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"Longest lived\"}},{\"line\":\"erbium = 167.26\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"europium = 151.965\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"fermium = 257.0951\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"Longest lived\"}},{\"line\":\"fluorine = 18.9984032\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"francium = 223.0197\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"Longest lived\"}},{\"line\":\"gadolinium = 157.25\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"gallium = 69.723\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"germanium = 72.61\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"gold = 196.96654\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"hafnium = 178.49\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"helium = 4.002602\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"holmium = 164.93032\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"hydrogen = 1.00794\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"indium = 114.818\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"iodine = 126.90447\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"iridium = 192.217\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"iron = 55.845\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"krypton = 83.80\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"lanthanum = 138.9055\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"lawrencium = 262.11\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"Longest lived\"}},{\"line\":\"lead = 207.2\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"lithium = 6.941\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"lutetium = 174.967\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"magnesium = 24.3050\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"manganese = 54.93805\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"mendelevium = 258.10\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"Longest lived\"}},{\"line\":\"mercury = 200.59\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"molybdenum = 95.94\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"neodymium = 144.24\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"neon = 20.1797\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"neptunium = 237.0482\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"nickel = 58.6934\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"niobium = 92.90638\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"nitrogen = 14.00674\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"nobelium = 259.1009\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"Longest lived\"}},{\"line\":\"osmium = 190.23\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"oxygen = 15.9994\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"palladium = 106.42\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"phosphorus = 30.973762\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"platinum = 195.08\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"plutonium = 244.0642\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"Longest lived.  239.05\"}},{\"line\":\"polonium = 208.9824\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"Longest lived.  209.98\"}},{\"line\":\"potassium = 39.0983\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"praseodymium = 140.90765\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"promethium = 144.9127\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"Longest lived.  146.92\"}},{\"line\":\"protactinium = 231.03588\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"radium = 226.0254\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"radon = 222.0176\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"Longest lived\"}},{\"line\":\"rhenium = 186.207\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"rhodium = 102.90550\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"rubidium = 85.4678\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"ruthenium = 101.07\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"samarium = 150.36\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"scandium = 44.955910\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"selenium = 78.96\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"silicon = 28.0855\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"silver = 107.8682\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"sodium = 22.989768\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"strontium = 87.62\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"sulfur = 32.066\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"tantalum = 180.9479\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"technetium = 97.9072\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"Longest lived.  98.906\"}},{\"line\":\"tellurium = 127.60\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"terbium = 158.92534\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"thallium = 204.3833\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"thorium = 232.0381\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"thullium = 168.93421\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"tin = 118.710\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"titanium = 47.867\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"tungsten = 183.84\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"uranium = 238.0289\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"vanadium = 50.9415\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"xenon = 131.29\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"ytterbium = 173.04\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"yttrium = 88.90585\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"zinc = 65.39\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"zirconium = 91.224\",\"info\":{\"headings\":[\"59. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"air = 78.08% nitrogen 2               + 20.95% oxygen 2               + 9340 ppm argon               +  400 ppm (carbon + oxygen 2)               +   18.18 ppm neon               +    5.24 ppm helium               +    1.7  ppm (carbon + 4 hydrogen)               +    1.14 ppm krypton               +    0.55 ppm hydrogen 2\",\"info\":{\"headings\":[\"60. Average molecular weight of air\"],\"comment\":\"The atmospheric composition listed is from NASA Earth Fact Sheet (accessed\\n28 August 2015)\\nhttp://nssdc.gsfc.nasa.gov/planetary/factsheet/earthfact.html\\nNumbers do not add up to exactly 100% due to roundoff and uncertainty Water\\nis highly variable, typically makes up about 1%\"}},{\"line\":\"people = 1\",\"info\":{\"headings\":[\"61. population units\"],\"comment\":\"\"}},{\"line\":\"person = people\",\"info\":{\"headings\":[\"61. population units\"],\"comment\":\"\"}},{\"line\":\"death = people\",\"info\":{\"headings\":[\"61. population units\"],\"comment\":\"\"}},{\"line\":\"capita = people\",\"info\":{\"headings\":[\"61. population units\"],\"comment\":\"\"}},{\"line\":\"percapita = / capita\",\"info\":{\"headings\":[\"61. population units\"],\"comment\":\"\"}},{\"line\":\"Tim = 12^-4 hour\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\"],\"comment\":\"Time\"}},{\"line\":\"Grafut = gravity Tim^2\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\"],\"comment\":\"Length based on gravity\"}},{\"line\":\"Surf = Grafut^2\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\"],\"comment\":\"area\"}},{\"line\":\"Volm = Grafut^3\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\"],\"comment\":\"volume\"}},{\"line\":\"Vlos = Grafut/Tim\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\"],\"comment\":\"speed\"}},{\"line\":\"Denz = Maz/Volm\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\"],\"comment\":\"density\"}},{\"line\":\"Mag = Maz gravity\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\"],\"comment\":\"force\"}},{\"line\":\"Maz = Volm kg / oldliter\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\"],\"comment\":\"mass based on water\"}},{\"line\":\"Tm = Tim\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\"],\"comment\":\"Abbreviations\"}},{\"line\":\"Gf = Grafut\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\"],\"comment\":\"Abbreviations\"}},{\"line\":\"Sf = Surf\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\"],\"comment\":\"Abbreviations\"}},{\"line\":\"Vm = Volm\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\"],\"comment\":\"Abbreviations\"}},{\"line\":\"Vl = Vlos\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\"],\"comment\":\"Abbreviations\"}},{\"line\":\"Mz = Maz\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\"],\"comment\":\"Abbreviations\"}},{\"line\":\"Dz = Denz\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\"],\"comment\":\"Abbreviations\"}},{\"line\":\"Zena_ = 12\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"62.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Duna_ = 12^2\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"62.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Trina_ = 12^3\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"62.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Quedra_ = 12^4\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"62.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Quena_ = 12^5\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"62.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Hesa_ = 12^6\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"62.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Seva_ = 12^7\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"62.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Aka_ = 12^8\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"62.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Neena_ = 12^9\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"62.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Dexa_ = 12^10\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"62.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Lefa_ = 12^11\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"62.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Zennila_ = 12^12\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"62.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Zeni_ = 12^-1\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"62.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Duni_ = 12^-2\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"62.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Trini_ = 12^-3\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"62.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Quedri_ = 12^-4\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"62.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Queni_ = 12^-5\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"62.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Hesi_ = 12^-6\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"62.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Sevi_ = 12^-7\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"62.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Aki_ = 12^-8\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"62.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Neeni_ = 12^-9\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"62.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Dexi_ = 12^-10\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"62.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Lefi_ = 12^-11\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"62.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Zennili_ = 12^-12\",\"info\":{\"headings\":[\"62. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"62.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"wari_proportion = 1|10\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.1. Japanese Proportions. These are still in everyday use. They also\\nget used as units to represent the proportion of the standard unit.\"],\"comment\":\"\"}},{\"line\":\"wari = wari_proportion\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.1. Japanese Proportions. These are still in everyday use. They also\\nget used as units to represent the proportion of the standard unit.\"],\"comment\":\"\"}},{\"line\":\"bu_proportion = 1|100\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.1. Japanese Proportions. These are still in everyday use. They also\\nget used as units to represent the proportion of the standard unit.\"],\"comment\":\"The character bu can also be read fun or bun\\nbut usually \\\"bu\\\" is used for units.\"}},{\"line\":\"rin_proportion = 1|1000\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.1. Japanese Proportions. These are still in everyday use. They also\\nget used as units to represent the proportion of the standard unit.\"],\"comment\":\"\"}},{\"line\":\"mou_proportion = 1|10000\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.1. Japanese Proportions. These are still in everyday use. They also\\nget used as units to represent the proportion of the standard unit.\"],\"comment\":\"\"}},{\"line\":\"shaku = 1|3.3 m\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\"],\"comment\":\"\"}},{\"line\":\"mou = 1|10000 shaku\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\"],\"comment\":\"\"}},{\"line\":\"rin = 1|1000 shaku\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\"],\"comment\":\"\"}},{\"line\":\"bu_distance = 1|100 shaku\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\"],\"comment\":\"\"}},{\"line\":\"sun = 1|10 shaku\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\"],\"comment\":\"\"}},{\"line\":\"jou_distance = 10 shaku\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\"],\"comment\":\"\"}},{\"line\":\"jou = jou_distance\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\"],\"comment\":\"\"}},{\"line\":\"kanejakusun = sun\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\"],\"comment\":\"Alias to emphasize architectural name\"}},{\"line\":\"kanejaku = shaku\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\"],\"comment\":\"\"}},{\"line\":\"kanejakujou = jou\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\"],\"comment\":\"\"}},{\"line\":\"taichi = shaku\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\",\"63.2.1. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\"],\"comment\":\"http://zh.wikipedia.org/wiki/台尺\"}},{\"line\":\"taicun = sun\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\",\"63.2.1. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\"],\"comment\":\"http://zh.wikipedia.org/wiki/台制\"}},{\"line\":\"台尺 = taichi\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\",\"63.2.1. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\"],\"comment\":\"via Hanyu Pinyin romanizations\"}},{\"line\":\"台寸 = taicun\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\",\"63.2.1. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\"],\"comment\":\"\"}},{\"line\":\"kujirajaku = 10|8 shaku\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\",\"63.2.2. In context of clothing, shaku is different from architecture\\nhttp://www.scinet.co.jp/sci/sanwa/kakizaki-essay54.html\"],\"comment\":\"\"}},{\"line\":\"kujirajakusun = 1|10 kujirajaku\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\",\"63.2.2. In context of clothing, shaku is different from architecture\\nhttp://www.scinet.co.jp/sci/sanwa/kakizaki-essay54.html\"],\"comment\":\"\"}},{\"line\":\"kujirajakubu = 1|100 kujirajaku\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\",\"63.2.2. In context of clothing, shaku is different from architecture\\nhttp://www.scinet.co.jp/sci/sanwa/kakizaki-essay54.html\"],\"comment\":\"\"}},{\"line\":\"kujirajakujou = 10 kujirajaku\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\",\"63.2.2. In context of clothing, shaku is different from architecture\\nhttp://www.scinet.co.jp/sci/sanwa/kakizaki-essay54.html\"],\"comment\":\"\"}},{\"line\":\"tan_distance = 3 kujirajakujou\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\",\"63.2.2. In context of clothing, shaku is different from architecture\\nhttp://www.scinet.co.jp/sci/sanwa/kakizaki-essay54.html\"],\"comment\":\"\"}},{\"line\":\"ken = 6 shaku\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\",\"63.2.2. In context of clothing, shaku is different from architecture\\nhttp://www.scinet.co.jp/sci/sanwa/kakizaki-essay54.html\"],\"comment\":\"Also sometimes 6.3, 6.5, or 6.6\\nhttp://www.homarewood.co.jp/syakusun.htm\"}},{\"line\":\"chou_distance = 60 ken\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\",\"63.2.2. In context of clothing, shaku is different from architecture\\nhttp://www.scinet.co.jp/sci/sanwa/kakizaki-essay54.html\"],\"comment\":\"\"}},{\"line\":\"chou = chou_distance\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\",\"63.2.2. In context of clothing, shaku is different from architecture\\nhttp://www.scinet.co.jp/sci/sanwa/kakizaki-essay54.html\"],\"comment\":\"\"}},{\"line\":\"ri = 36 chou\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\",\"63.2.2. In context of clothing, shaku is different from architecture\\nhttp://www.scinet.co.jp/sci/sanwa/kakizaki-essay54.html\"],\"comment\":\"\"}},{\"line\":\"gou_area = 1|10 tsubo\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.3. Japanese Area Measures\",\"63.3.1. Tsubo is still used for land size, though the others are more\\nrecognized by their homonyms in the other measurements.\"],\"comment\":\"\"}},{\"line\":\"tsubo = 36 shaku^2\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.3. Japanese Area Measures\",\"63.3.1. Tsubo is still used for land size, though the others are more\\nrecognized by their homonyms in the other measurements.\"],\"comment\":\"Size of two tatami = ken^2 ??\"}},{\"line\":\"se = 30 tsubo\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.3. Japanese Area Measures\",\"63.3.1. Tsubo is still used for land size, though the others are more\\nrecognized by their homonyms in the other measurements.\"],\"comment\":\"\"}},{\"line\":\"tan_area = 10 se\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.3. Japanese Area Measures\",\"63.3.1. Tsubo is still used for land size, though the others are more\\nrecognized by their homonyms in the other measurements.\"],\"comment\":\"\"}},{\"line\":\"chou_area = 10 tan_area\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.3. Japanese Area Measures\",\"63.3.1. Tsubo is still used for land size, though the others are more\\nrecognized by their homonyms in the other measurements.\"],\"comment\":\"\"}},{\"line\":\"ping = tsubo\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.3. Japanese Area Measures\",\"63.3.2. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\"],\"comment\":\"http://zh.wikipedia.org/wiki/坪\"}},{\"line\":\"jia = 2934 ping\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.3. Japanese Area Measures\",\"63.3.2. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\"],\"comment\":\"http://zh.wikipedia.org/wiki/甲_(单位)\"}},{\"line\":\"fen = 1|10 jia\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.3. Japanese Area Measures\",\"63.3.2. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\"],\"comment\":\"http://zh.wikipedia.org/wiki/分\\nProtection against future collisions\"}},{\"line\":\"fen_area = 1|10 jia\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.3. Japanese Area Measures\",\"63.3.2. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\"],\"comment\":\"http://zh.wikipedia.org/wiki/分\\nProtection against future collisions\"}},{\"line\":\"坪 = ping\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.3. Japanese Area Measures\",\"63.3.2. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\"],\"comment\":\"via Hanyu Pinyin romanizations\"}},{\"line\":\"甲 = jia\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.3. Japanese Area Measures\",\"63.3.2. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\"],\"comment\":\"\"}},{\"line\":\"分 = fen\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.3. Japanese Area Measures\",\"63.3.2. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\"],\"comment\":\"\"}},{\"line\":\"分地 = fen_area\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.3. Japanese Area Measures\",\"63.3.2. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\"],\"comment\":\"Protection against future collisions\"}},{\"line\":\"edoma = (5.8*2.9) shaku^2\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.3. Japanese Area Measures\",\"63.3.3. Japanese architecture is based on a \\\"standard\\\" size of tatami mat.\\nRoom sizes today are given in number of tatami, and this number\\ndetermines the spacing between colums and hence sizes of sliding\\ndoors and paper screens. However, every region has its own slightly\\ndifferent tatami size. Edoma, used in and around Tokyo and\\nHokkaido, is becoming a nationwide standard. Kyouma is used around\\nKyoto, Osaka and Kyuushu, and Chuukyouma is used around Nagoya.\\nNote that the tatami all have the aspect ratio 2:1 so that the mats\\ncan tile the room with some of them turned 90 degrees.\\n\\nhttp://www.moon2.net/tatami/infotatami/structure.html\"],\"comment\":\"\"}},{\"line\":\"kyouma = (6.3*3.15) shaku^2\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.3. Japanese Area Measures\",\"63.3.3. Japanese architecture is based on a \\\"standard\\\" size of tatami mat.\\nRoom sizes today are given in number of tatami, and this number\\ndetermines the spacing between colums and hence sizes of sliding\\ndoors and paper screens. However, every region has its own slightly\\ndifferent tatami size. Edoma, used in and around Tokyo and\\nHokkaido, is becoming a nationwide standard. Kyouma is used around\\nKyoto, Osaka and Kyuushu, and Chuukyouma is used around Nagoya.\\nNote that the tatami all have the aspect ratio 2:1 so that the mats\\ncan tile the room with some of them turned 90 degrees.\\n\\nhttp://www.moon2.net/tatami/infotatami/structure.html\"],\"comment\":\"\"}},{\"line\":\"chuukyouma = (6*3) shaku^2\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.3. Japanese Area Measures\",\"63.3.3. Japanese architecture is based on a \\\"standard\\\" size of tatami mat.\\nRoom sizes today are given in number of tatami, and this number\\ndetermines the spacing between colums and hence sizes of sliding\\ndoors and paper screens. However, every region has its own slightly\\ndifferent tatami size. Edoma, used in and around Tokyo and\\nHokkaido, is becoming a nationwide standard. Kyouma is used around\\nKyoto, Osaka and Kyuushu, and Chuukyouma is used around Nagoya.\\nNote that the tatami all have the aspect ratio 2:1 so that the mats\\ncan tile the room with some of them turned 90 degrees.\\n\\nhttp://www.moon2.net/tatami/infotatami/structure.html\"],\"comment\":\"\"}},{\"line\":\"jou_area = edoma\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.3. Japanese Area Measures\",\"63.3.3. Japanese architecture is based on a \\\"standard\\\" size of tatami mat.\\nRoom sizes today are given in number of tatami, and this number\\ndetermines the spacing between colums and hence sizes of sliding\\ndoors and paper screens. However, every region has its own slightly\\ndifferent tatami size. Edoma, used in and around Tokyo and\\nHokkaido, is becoming a nationwide standard. Kyouma is used around\\nKyoto, Osaka and Kyuushu, and Chuukyouma is used around Nagoya.\\nNote that the tatami all have the aspect ratio 2:1 so that the mats\\ncan tile the room with some of them turned 90 degrees.\\n\\nhttp://www.moon2.net/tatami/infotatami/structure.html\"],\"comment\":\"\"}},{\"line\":\"tatami = jou_area\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.3. Japanese Area Measures\",\"63.3.3. Japanese architecture is based on a \\\"standard\\\" size of tatami mat.\\nRoom sizes today are given in number of tatami, and this number\\ndetermines the spacing between colums and hence sizes of sliding\\ndoors and paper screens. However, every region has its own slightly\\ndifferent tatami size. Edoma, used in and around Tokyo and\\nHokkaido, is becoming a nationwide standard. Kyouma is used around\\nKyoto, Osaka and Kyuushu, and Chuukyouma is used around Nagoya.\\nNote that the tatami all have the aspect ratio 2:1 so that the mats\\ncan tile the room with some of them turned 90 degrees.\\n\\nhttp://www.moon2.net/tatami/infotatami/structure.html\"],\"comment\":\"\"}},{\"line\":\"shaku_volume = 1|10 gou_volume\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.4. Japanese Volume Measures\\n\\nThe \\\"shou\\\" is still used for such things as alcohol and seasonings.\\nLarge quantities of paint are still purchased in terms of \\\"to\\\".\"],\"comment\":\"\"}},{\"line\":\"gou_volume = 1|10 shou\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.4. Japanese Volume Measures\\n\\nThe \\\"shou\\\" is still used for such things as alcohol and seasonings.\\nLarge quantities of paint are still purchased in terms of \\\"to\\\".\"],\"comment\":\"\"}},{\"line\":\"gou = gou_volume\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.4. Japanese Volume Measures\\n\\nThe \\\"shou\\\" is still used for such things as alcohol and seasonings.\\nLarge quantities of paint are still purchased in terms of \\\"to\\\".\"],\"comment\":\"\"}},{\"line\":\"shou = (4.9*4.9*2.7) sun^3\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.4. Japanese Volume Measures\\n\\nThe \\\"shou\\\" is still used for such things as alcohol and seasonings.\\nLarge quantities of paint are still purchased in terms of \\\"to\\\".\"],\"comment\":\"The character shou which is\\nthe same as masu refers to a\\nrectangular wooden cup used to\\nmeasure liquids and cereal.\\nSake is sometimes served in a masu\\nNote that it happens to be\\nEXACTLY 7^4/11^3 liters.\"}},{\"line\":\"rin_weight = 1|10 bu_weight\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.5. Japanese Weight Measures\\n\\nhttp://wyoming.hp.infoseek.co.jp/zatugaku/zamoney.html\\n\\nNot really used anymore.\"],\"comment\":\"\"}},{\"line\":\"bu_weight = 1|10 monme\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.5. Japanese Weight Measures\\n\\nhttp://wyoming.hp.infoseek.co.jp/zatugaku/zamoney.html\\n\\nNot really used anymore.\"],\"comment\":\"\"}},{\"line\":\"fun = 1|10 monme\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.5. Japanese Weight Measures\\n\\nhttp://wyoming.hp.infoseek.co.jp/zatugaku/zamoney.html\\n\\nNot really used anymore.\"],\"comment\":\"\"}},{\"line\":\"monme = momme\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.5. Japanese Weight Measures\\n\\nhttp://wyoming.hp.infoseek.co.jp/zatugaku/zamoney.html\\n\\nNot really used anymore.\"],\"comment\":\"\"}},{\"line\":\"kin = 160 monme\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.5. Japanese Weight Measures\\n\\nhttp://wyoming.hp.infoseek.co.jp/zatugaku/zamoney.html\\n\\nNot really used anymore.\"],\"comment\":\"\"}},{\"line\":\"kan = 1000 monme\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.5. Japanese Weight Measures\\n\\nhttp://wyoming.hp.infoseek.co.jp/zatugaku/zamoney.html\\n\\nNot really used anymore.\"],\"comment\":\"This was the old pronounciation of the unit.\\nThe old spelling persisted a few centuries\\nlonger and was not changed until around\\n1950.\"}},{\"line\":\"kwan = kan\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.5. Japanese Weight Measures\\n\\nhttp://wyoming.hp.infoseek.co.jp/zatugaku/zamoney.html\\n\\nNot really used anymore.\"],\"comment\":\"This was the old pronounciation of the unit.\\nThe old spelling persisted a few centuries\\nlonger and was not changed until around\\n1950.\"}},{\"line\":\"taijin = kin\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.6. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\\nsays: \\\"Volume measure in Taiwan is largely metric\\\".\"],\"comment\":\"http://zh.wikipedia.org/wiki/台斤\"}},{\"line\":\"tailiang = 10 monme\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.6. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\\nsays: \\\"Volume measure in Taiwan is largely metric\\\".\"],\"comment\":\"http://zh.wikipedia.org/wiki/台斤\"}},{\"line\":\"taiqian = monme\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.6. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\\nsays: \\\"Volume measure in Taiwan is largely metric\\\".\"],\"comment\":\"http://zh.wikipedia.org/wiki/台制\"}},{\"line\":\"台斤 = taijin\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.6. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\\nsays: \\\"Volume measure in Taiwan is largely metric\\\".\"],\"comment\":\"via Hanyu Pinyin romanizations\"}},{\"line\":\"台兩 = tailiang\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.6. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\\nsays: \\\"Volume measure in Taiwan is largely metric\\\".\"],\"comment\":\"\"}},{\"line\":\"台錢 = taiqian\",\"info\":{\"headings\":[\"63. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"63.6. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\\nsays: \\\"Volume measure in Taiwan is largely metric\\\".\"],\"comment\":\"\"}},{\"line\":\"australiasquare = (10 ft)^2\",\"info\":{\"headings\":[\"64. Australian unit\"],\"comment\":\"Used for house area\"}},{\"line\":\"zentner = 50 kg\",\"info\":{\"headings\":[\"65. A few German units as currently in use.\"],\"comment\":\"\"}},{\"line\":\"doppelzentner = 2 zentner\",\"info\":{\"headings\":[\"65. A few German units as currently in use.\"],\"comment\":\"\"}},{\"line\":\"pfund = 500 g\",\"info\":{\"headings\":[\"65. A few German units as currently in use.\"],\"comment\":\"\"}},{\"line\":\"dessiatine = 2400 sazhen^2\",\"info\":{\"headings\":[\"66. Some traditional Russian measures\\n\\nIf you would like to help expand this section and understand\\ncyrillic transliteration, let me know. These measures are meant to\\nreflect common usage, e.g. in translated literature.\"],\"comment\":\"Land measure\"}},{\"line\":\"dessjatine = dessiatine\",\"info\":{\"headings\":[\"66. Some traditional Russian measures\\n\\nIf you would like to help expand this section and understand\\ncyrillic transliteration, let me know. These measures are meant to\\nreflect common usage, e.g. in translated literature.\"],\"comment\":\"Land measure\"}},{\"line\":\"funt = 409.51718 grams\",\"info\":{\"headings\":[\"66. Some traditional Russian measures\\n\\nIf you would like to help expand this section and understand\\ncyrillic transliteration, let me know. These measures are meant to\\nreflect common usage, e.g. in translated literature.\"],\"comment\":\"similar to pound\"}},{\"line\":\"zolotnik = 1|96 funt\",\"info\":{\"headings\":[\"66. Some traditional Russian measures\\n\\nIf you would like to help expand this section and understand\\ncyrillic transliteration, let me know. These measures are meant to\\nreflect common usage, e.g. in translated literature.\"],\"comment\":\"used for precious metal measure\"}},{\"line\":\"pood = 40 funt\",\"info\":{\"headings\":[\"66. Some traditional Russian measures\\n\\nIf you would like to help expand this section and understand\\ncyrillic transliteration, let me know. These measures are meant to\\nreflect common usage, e.g. in translated literature.\"],\"comment\":\"common in agricultural measure\"}},{\"line\":\"arshin = (2 + 1|3) feet\",\"info\":{\"headings\":[\"66. Some traditional Russian measures\\n\\nIf you would like to help expand this section and understand\\ncyrillic transliteration, let me know. These measures are meant to\\nreflect common usage, e.g. in translated literature.\"],\"comment\":\"\"}},{\"line\":\"sazhen = 3 arshin\",\"info\":{\"headings\":[\"66. Some traditional Russian measures\\n\\nIf you would like to help expand this section and understand\\ncyrillic transliteration, let me know. These measures are meant to\\nreflect common usage, e.g. in translated literature.\"],\"comment\":\"analogous to fathom\"}},{\"line\":\"verst = 500 sazhen\",\"info\":{\"headings\":[\"66. Some traditional Russian measures\\n\\nIf you would like to help expand this section and understand\\ncyrillic transliteration, let me know. These measures are meant to\\nreflect common usage, e.g. in translated literature.\"],\"comment\":\"of similar use to mile\"}},{\"line\":\"versta = verst\",\"info\":{\"headings\":[\"66. Some traditional Russian measures\\n\\nIf you would like to help expand this section and understand\\ncyrillic transliteration, let me know. These measures are meant to\\nreflect common usage, e.g. in translated literature.\"],\"comment\":\"of similar use to mile\"}},{\"line\":\"borderverst = 1000 sazhen\",\"info\":{\"headings\":[\"66. Some traditional Russian measures\\n\\nIf you would like to help expand this section and understand\\ncyrillic transliteration, let me know. These measures are meant to\\nreflect common usage, e.g. in translated literature.\"],\"comment\":\"\"}},{\"line\":\"russianmile = 7 verst\",\"info\":{\"headings\":[\"66. Some traditional Russian measures\\n\\nIf you would like to help expand this section and understand\\ncyrillic transliteration, let me know. These measures are meant to\\nreflect common usage, e.g. in translated literature.\"],\"comment\":\"\"}},{\"line\":\"frenchfoot = 144|443.296 m\",\"info\":{\"headings\":[\"67. Old French distance measures, from French Weights and Measures\\nBefore the Revolution by Zupko\"],\"comment\":\"pied de roi, the standard of Paris.\\nHalf of the hashimicubit,\\ninstituted by Charlemagne.\\nThis exact definition comes from\\na law passed on 10 Dec 1799 which\\nfixed the meter at\\n3 frenchfeet + 11.296 lignes.\"}},{\"line\":\"pied = frenchfoot\",\"info\":{\"headings\":[\"67. Old French distance measures, from French Weights and Measures\\nBefore the Revolution by Zupko\"],\"comment\":\"pied de roi, the standard of Paris.\\nHalf of the hashimicubit,\\ninstituted by Charlemagne.\\nThis exact definition comes from\\na law passed on 10 Dec 1799 which\\nfixed the meter at\\n3 frenchfeet + 11.296 lignes.\"}},{\"line\":\"frenchfeet = frenchfoot\",\"info\":{\"headings\":[\"67. Old French distance measures, from French Weights and Measures\\nBefore the Revolution by Zupko\"],\"comment\":\"pied de roi, the standard of Paris.\\nHalf of the hashimicubit,\\ninstituted by Charlemagne.\\nThis exact definition comes from\\na law passed on 10 Dec 1799 which\\nfixed the meter at\\n3 frenchfeet + 11.296 lignes.\"}},{\"line\":\"frenchinch = 1|12 frenchfoot\",\"info\":{\"headings\":[\"67. Old French distance measures, from French Weights and Measures\\nBefore the Revolution by Zupko\"],\"comment\":\"pied de roi, the standard of Paris.\\nHalf of the hashimicubit,\\ninstituted by Charlemagne.\\nThis exact definition comes from\\na law passed on 10 Dec 1799 which\\nfixed the meter at\\n3 frenchfeet + 11.296 lignes.\"}},{\"line\":\"frenchthumb = frenchinch\",\"info\":{\"headings\":[\"67. Old French distance measures, from French Weights and Measures\\nBefore the Revolution by Zupko\"],\"comment\":\"pied de roi, the standard of Paris.\\nHalf of the hashimicubit,\\ninstituted by Charlemagne.\\nThis exact definition comes from\\na law passed on 10 Dec 1799 which\\nfixed the meter at\\n3 frenchfeet + 11.296 lignes.\"}},{\"line\":\"pouce = frenchthumb\",\"info\":{\"headings\":[\"67. Old French distance measures, from French Weights and Measures\\nBefore the Revolution by Zupko\"],\"comment\":\"pied de roi, the standard of Paris.\\nHalf of the hashimicubit,\\ninstituted by Charlemagne.\\nThis exact definition comes from\\na law passed on 10 Dec 1799 which\\nfixed the meter at\\n3 frenchfeet + 11.296 lignes.\"}},{\"line\":\"frenchline = 1|12 frenchinch\",\"info\":{\"headings\":[\"67. Old French distance measures, from French Weights and Measures\\nBefore the Revolution by Zupko\"],\"comment\":\"This is supposed to be the size\\nof the average barleycorn\"}},{\"line\":\"ligne = frenchline\",\"info\":{\"headings\":[\"67. Old French distance measures, from French Weights and Measures\\nBefore the Revolution by Zupko\"],\"comment\":\"This is supposed to be the size\\nof the average barleycorn\"}},{\"line\":\"frenchpoint = 1|12 frenchline\",\"info\":{\"headings\":[\"67. Old French distance measures, from French Weights and Measures\\nBefore the Revolution by Zupko\"],\"comment\":\"\"}},{\"line\":\"toise = 6 frenchfeet\",\"info\":{\"headings\":[\"67. Old French distance measures, from French Weights and Measures\\nBefore the Revolution by Zupko\"],\"comment\":\"\"}},{\"line\":\"arpent = 180^2 pied^2\",\"info\":{\"headings\":[\"67. Old French distance measures, from French Weights and Measures\\nBefore the Revolution by Zupko\"],\"comment\":\"The arpent is 100 square perches,\\nbut the perche seems to vary a lot\\nand can be 18 feet, 20 feet, or 22\\nfeet.  This measure was described\\nas being in common use in Canada in\\n1934 (Websters 2nd).  The value\\ngiven here is the Paris standard\\narpent.\"}},{\"line\":\"frenchgrain = 1|18827.15 kg\",\"info\":{\"headings\":[\"67. Old French distance measures, from French Weights and Measures\\nBefore the Revolution by Zupko\"],\"comment\":\"Weight of a wheat grain, hence\\nsmaller than the British grain.\"}},{\"line\":\"frenchpound = 9216 frenchgrain\",\"info\":{\"headings\":[\"67. Old French distance measures, from French Weights and Measures\\nBefore the Revolution by Zupko\"],\"comment\":\"\"}},{\"line\":\"scotsinch = 1.00540054 UKinch\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.1. Scots linear measure\"],\"comment\":\"\"}},{\"line\":\"scotslink = 1|100 scotschain\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.1. Scots linear measure\"],\"comment\":\"\"}},{\"line\":\"scotsfoot = 12 scotsinch\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.1. Scots linear measure\"],\"comment\":\"\"}},{\"line\":\"scotsfeet = scotsfoot\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.1. Scots linear measure\"],\"comment\":\"\"}},{\"line\":\"scotsell = 37 scotsinch\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.1. Scots linear measure\"],\"comment\":\"\"}},{\"line\":\"scotsfall = 6 scotsell\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.1. Scots linear measure\"],\"comment\":\"\"}},{\"line\":\"scotschain = 4 scotsfall\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.1. Scots linear measure\"],\"comment\":\"\"}},{\"line\":\"scotsfurlong = 10 scotschain\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.1. Scots linear measure\"],\"comment\":\"\"}},{\"line\":\"scotsmile = 8 scotsfurlong\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.1. Scots linear measure\"],\"comment\":\"\"}},{\"line\":\"scotsrood = 40 scotsfall^2\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.2. Scots area measure\"],\"comment\":\"\"}},{\"line\":\"scotsacre = 4 scotsrood\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.2. Scots area measure\"],\"comment\":\"\"}},{\"line\":\"irishinch = UKinch\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.3. Irish linear measure\"],\"comment\":\"\"}},{\"line\":\"irishpalm = 3 irishinch\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.3. Irish linear measure\"],\"comment\":\"\"}},{\"line\":\"irishspan = 3 irishpalm\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.3. Irish linear measure\"],\"comment\":\"\"}},{\"line\":\"irishfoot = 12 irishinch\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.3. Irish linear measure\"],\"comment\":\"\"}},{\"line\":\"irishfeet = irishfoot\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.3. Irish linear measure\"],\"comment\":\"\"}},{\"line\":\"irishcubit = 18 irishinch\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.3. Irish linear measure\"],\"comment\":\"\"}},{\"line\":\"irishyard = 3 irishfeet\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.3. Irish linear measure\"],\"comment\":\"\"}},{\"line\":\"irishpace = 5 irishfeet\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.3. Irish linear measure\"],\"comment\":\"\"}},{\"line\":\"irishfathom = 6 irishfeet\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.3. Irish linear measure\"],\"comment\":\"\"}},{\"line\":\"irishpole = 7 irishyard\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.3. Irish linear measure\"],\"comment\":\"Only these values\\nare different from\\nthe British Imperial\\nor English values for\\nthese lengths.\"}},{\"line\":\"irishperch = irishpole\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.3. Irish linear measure\"],\"comment\":\"Only these values\\nare different from\\nthe British Imperial\\nor English values for\\nthese lengths.\"}},{\"line\":\"irishchain = 4 irishperch\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.3. Irish linear measure\"],\"comment\":\"Only these values\\nare different from\\nthe British Imperial\\nor English values for\\nthese lengths.\"}},{\"line\":\"irishlink = 1|100 irishchain\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.3. Irish linear measure\"],\"comment\":\"Only these values\\nare different from\\nthe British Imperial\\nor English values for\\nthese lengths.\"}},{\"line\":\"irishfurlong = 10 irishchain\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.3. Irish linear measure\"],\"comment\":\"Only these values\\nare different from\\nthe British Imperial\\nor English values for\\nthese lengths.\"}},{\"line\":\"irishmile = 8 irishfurlong\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.3. Irish linear measure\"],\"comment\":\"Only these values\\nare different from\\nthe British Imperial\\nor English values for\\nthese lengths.\"}},{\"line\":\"irishrood = 40 irishpole^2\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.4. Irish area measure\"],\"comment\":\"\"}},{\"line\":\"irishacre = 4 irishrood\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.4. Irish area measure\"],\"comment\":\"\"}},{\"line\":\"winepint = 1|2 winequart\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.5. English wine capacity measures (Winchester measures)\"],\"comment\":\"\"}},{\"line\":\"winequart = 1|4 winegallon\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.5. English wine capacity measures (Winchester measures)\"],\"comment\":\"\"}},{\"line\":\"winegallon = 231 UKinch^3\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.5. English wine capacity measures (Winchester measures)\"],\"comment\":\"Sometimes called the Winchester Wine Gallon,\\nit was legalized in 1707 by Queen Anne, and\\ngiven the definition of 231 cubic inches.  It\\nhad been in use for a while as 8 pounds of wine\\nusing a merchant's pound, but the definition of\\nthe merchant's pound had become uncertain.  A\\npound of 15 tower ounces (6750 grains) had been\\ncommon, but then a pound of 15 troy ounces\\n(7200 grains) gained popularity.  Because of\\nthe switch in the value of the merchants pound,\\nthe size of the wine gallon was uncertain in\\nthe market, hence the official act in 1707.\\nThe act allowed that a six inch tall cylinder\\nwith a 7 inch diameter was a lawful wine\\ngallon.  (This comes out to 230.9 in^3.)\\nNote also that in Britain a legal conversion\\nwas established to the 1824 Imperial gallon\\nthen taken as 277.274 in^3 so that the wine\\ngallon was 0.8331 imperial gallons.  This is\\n231.1 cubic inches (using the international\\ninch).\"}},{\"line\":\"winerundlet = 18 winegallon\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.5. English wine capacity measures (Winchester measures)\"],\"comment\":\"\"}},{\"line\":\"winebarrel = 31.5 winegallon\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.5. English wine capacity measures (Winchester measures)\"],\"comment\":\"\"}},{\"line\":\"winetierce = 42 winegallon\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.5. English wine capacity measures (Winchester measures)\"],\"comment\":\"\"}},{\"line\":\"winehogshead = 2 winebarrel\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.5. English wine capacity measures (Winchester measures)\"],\"comment\":\"\"}},{\"line\":\"winepuncheon = 2 winetierce\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.5. English wine capacity measures (Winchester measures)\"],\"comment\":\"\"}},{\"line\":\"winebutt = 2 winehogshead\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.5. English wine capacity measures (Winchester measures)\"],\"comment\":\"\"}},{\"line\":\"winepipe = winebutt\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.5. English wine capacity measures (Winchester measures)\"],\"comment\":\"\"}},{\"line\":\"winetun = 2 winebutt\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.5. English wine capacity measures (Winchester measures)\"],\"comment\":\"\"}},{\"line\":\"beerpint = 1|2 beerquart\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.6. English beer and ale measures used 1803-1824 and used for beer before 1688\"],\"comment\":\"\"}},{\"line\":\"beerquart = 1|4 beergallon\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.6. English beer and ale measures used 1803-1824 and used for beer before 1688\"],\"comment\":\"\"}},{\"line\":\"beergallon = 282 UKinch^3\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.6. English beer and ale measures used 1803-1824 and used for beer before 1688\"],\"comment\":\"\"}},{\"line\":\"beerbarrel = 36 beergallon\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.6. English beer and ale measures used 1803-1824 and used for beer before 1688\"],\"comment\":\"\"}},{\"line\":\"beerhogshead = 1.5 beerbarrel\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.6. English beer and ale measures used 1803-1824 and used for beer before 1688\"],\"comment\":\"\"}},{\"line\":\"alepint = 1|2 alequart\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.7. English ale measures used from 1688-1803 for both ale and beer\"],\"comment\":\"\"}},{\"line\":\"alequart = 1|4 alegallon\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.7. English ale measures used from 1688-1803 for both ale and beer\"],\"comment\":\"\"}},{\"line\":\"alegallon = beergallon\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.7. English ale measures used from 1688-1803 for both ale and beer\"],\"comment\":\"\"}},{\"line\":\"alebarrel = 34 alegallon\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.7. English ale measures used from 1688-1803 for both ale and beer\"],\"comment\":\"\"}},{\"line\":\"alehogshead = 1.5 alebarrel\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.7. English ale measures used from 1688-1803 for both ale and beer\"],\"comment\":\"\"}},{\"line\":\"scotsgill = 1|4 mutchkin\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.8. Scots capacity measure\"],\"comment\":\"\"}},{\"line\":\"mutchkin = 1|2 choppin\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.8. Scots capacity measure\"],\"comment\":\"\"}},{\"line\":\"choppin = 1|2 scotspint\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.8. Scots capacity measure\"],\"comment\":\"\"}},{\"line\":\"scotspint = 1|2 scotsquart\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.8. Scots capacity measure\"],\"comment\":\"\"}},{\"line\":\"scotsquart = 1|4 scotsgallon\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.8. Scots capacity measure\"],\"comment\":\"\"}},{\"line\":\"scotsgallon = 827.232 UKinch^3\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.8. Scots capacity measure\"],\"comment\":\"\"}},{\"line\":\"scotsbarrel = 8 scotsgallon\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.8. Scots capacity measure\"],\"comment\":\"\"}},{\"line\":\"jug = scotspint\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.8. Scots capacity measure\"],\"comment\":\"\"}},{\"line\":\"scotswheatlippy = 137.333 UKinch^3\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.9. Scots dry capacity measure\"],\"comment\":\"Also used for peas, beans, rye, salt\"}},{\"line\":\"scotswheatlippies = scotswheatlippy\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.9. Scots dry capacity measure\"],\"comment\":\"Also used for peas, beans, rye, salt\"}},{\"line\":\"scotswheatpeck = 4 scotswheatlippy\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.9. Scots dry capacity measure\"],\"comment\":\"\"}},{\"line\":\"scotswheatfirlot = 4 scotswheatpeck\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.9. Scots dry capacity measure\"],\"comment\":\"\"}},{\"line\":\"scotswheatboll = 4 scotswheatfirlot\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.9. Scots dry capacity measure\"],\"comment\":\"\"}},{\"line\":\"scotswheatchalder = 16 scotswheatboll\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.9. Scots dry capacity measure\"],\"comment\":\"\"}},{\"line\":\"scotsoatlippy = 200.345 UKinch^3\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.9. Scots dry capacity measure\"],\"comment\":\"Also used for barley and malt\"}},{\"line\":\"scotsoatlippies = scotsoatlippy\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.9. Scots dry capacity measure\"],\"comment\":\"Also used for barley and malt\"}},{\"line\":\"scotsoatpeck = 4 scotsoatlippy\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.9. Scots dry capacity measure\"],\"comment\":\"\"}},{\"line\":\"scotsoatfirlot = 4 scotsoatpeck\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.9. Scots dry capacity measure\"],\"comment\":\"\"}},{\"line\":\"scotsoatboll = 4 scotsoatfirlot\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.9. Scots dry capacity measure\"],\"comment\":\"\"}},{\"line\":\"scotsoatchalder = 16 scotsoatboll\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.9. Scots dry capacity measure\"],\"comment\":\"\"}},{\"line\":\"trondrop = 1|16 tronounce\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.10. Scots Tron weight\"],\"comment\":\"\"}},{\"line\":\"tronounce = 1|20 tronpound\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.10. Scots Tron weight\"],\"comment\":\"\"}},{\"line\":\"tronpound = 9520 grain\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.10. Scots Tron weight\"],\"comment\":\"\"}},{\"line\":\"tronstone = 16 tronpound\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.10. Scots Tron weight\"],\"comment\":\"\"}},{\"line\":\"irishnoggin = 1|4 irishpint\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.11. Irish liquid capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishpint = 1|2 irishquart\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.11. Irish liquid capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishquart = 1|2 irishpottle\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.11. Irish liquid capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishpottle = 1|2 irishgallon\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.11. Irish liquid capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishgallon = 217.6 UKinch^3\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.11. Irish liquid capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishrundlet = 18 irishgallon\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.11. Irish liquid capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishbarrel = 31.5 irishgallon\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.11. Irish liquid capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishtierce = 42 irishgallon\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.11. Irish liquid capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishhogshead = 2 irishbarrel\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.11. Irish liquid capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishpuncheon = 2 irishtierce\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.11. Irish liquid capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishpipe = 2 irishhogshead\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.11. Irish liquid capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishtun = 2 irishpipe\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.11. Irish liquid capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishpeck = 2 irishgallon\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.12. Irish dry capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishbushel = 4 irishpeck\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.12. Irish dry capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishstrike = 2 irishbushel\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.12. Irish dry capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishdrybarrel = 2 irishstrike\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.12. Irish dry capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishquarter = 2 irishbarrel\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.12. Irish dry capacity measure\"],\"comment\":\"\"}},{\"line\":\"towerpound = 5400 grain\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.13. English Tower weights, abolished in 1528\"],\"comment\":\"\"}},{\"line\":\"towerounce = 1|12 towerpound\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.13. English Tower weights, abolished in 1528\"],\"comment\":\"\"}},{\"line\":\"towerpennyweight = 1|20 towerounce\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.13. English Tower weights, abolished in 1528\"],\"comment\":\"\"}},{\"line\":\"towergrain = 1|32 towerpennyweight\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.13. English Tower weights, abolished in 1528\"],\"comment\":\"\"}},{\"line\":\"mercpound = 6750 grain\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.14. English Mercantile weights, used since the late 12th century\"],\"comment\":\"\"}},{\"line\":\"mercounce = 1|15 mercpound\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.14. English Mercantile weights, used since the late 12th century\"],\"comment\":\"\"}},{\"line\":\"mercpennyweight = 1|20 mercounce\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.14. English Mercantile weights, used since the late 12th century\"],\"comment\":\"\"}},{\"line\":\"leadstone = 12.5 lb\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.15. English weights for lead\"],\"comment\":\"\"}},{\"line\":\"fotmal = 70 lb\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.15. English weights for lead\"],\"comment\":\"\"}},{\"line\":\"leadwey = 14 leadstone\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.15. English weights for lead\"],\"comment\":\"\"}},{\"line\":\"fothers = 12 leadwey\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.15. English weights for lead\"],\"comment\":\"\"}},{\"line\":\"newhaytruss = 60 lb\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.16. English Hay measure\"],\"comment\":\"New and old here seem to refer to \\\"new\\\"\\nhay and \\\"old\\\" hay rather than a new unit\\nand an old unit.\"}},{\"line\":\"newhayload = 36 newhaytruss\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.16. English Hay measure\"],\"comment\":\"New and old here seem to refer to \\\"new\\\"\\nhay and \\\"old\\\" hay rather than a new unit\\nand an old unit.\"}},{\"line\":\"oldhaytruss = 56 lb\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.16. English Hay measure\"],\"comment\":\"New and old here seem to refer to \\\"new\\\"\\nhay and \\\"old\\\" hay rather than a new unit\\nand an old unit.\"}},{\"line\":\"oldhayload = 36 oldhaytruss\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.16. English Hay measure\"],\"comment\":\"New and old here seem to refer to \\\"new\\\"\\nhay and \\\"old\\\" hay rather than a new unit\\nand an old unit.\"}},{\"line\":\"woolclove = 7 lb\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.17. English wool measure\"],\"comment\":\"\"}},{\"line\":\"woolstone = 2 woolclove\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.17. English wool measure\"],\"comment\":\"\"}},{\"line\":\"wooltod = 2 woolstone\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.17. English wool measure\"],\"comment\":\"\"}},{\"line\":\"woolwey = 13 woolstone\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.17. English wool measure\"],\"comment\":\"\"}},{\"line\":\"woolsack = 2 woolwey\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.17. English wool measure\"],\"comment\":\"\"}},{\"line\":\"woolsarpler = 2 woolsack\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.17. English wool measure\"],\"comment\":\"\"}},{\"line\":\"woollast = 6 woolsarpler\",\"info\":{\"headings\":[\"68. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"68.17. English wool measure\"],\"comment\":\"\"}},{\"line\":\"romanfoot = 296 mm\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"There is some uncertainty in this definition\\nfrom which all the other units are derived.\\nThis value appears in numerous sources. In \\\"The\\nRoman Land Surveyors\\\", Dilke gives 295.7 mm.\"}},{\"line\":\"romanfeet = romanfoot\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"There is some uncertainty in this definition\\nfrom which all the other units are derived.\\nThis value appears in numerous sources. In \\\"The\\nRoman Land Surveyors\\\", Dilke gives 295.7 mm.\"}},{\"line\":\"pes = romanfoot\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"There is some uncertainty in this definition\\nfrom which all the other units are derived.\\nThis value appears in numerous sources. In \\\"The\\nRoman Land Surveyors\\\", Dilke gives 295.7 mm.\"}},{\"line\":\"pedes = romanfoot\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"There is some uncertainty in this definition\\nfrom which all the other units are derived.\\nThis value appears in numerous sources. In \\\"The\\nRoman Land Surveyors\\\", Dilke gives 295.7 mm.\"}},{\"line\":\"romaninch = 1|12 romanfoot\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"The subdivisions of the Roman foot have the\\nsame names as the subdivisions of the pound,\\nbut we can't have the names for different\\nunits.\"}},{\"line\":\"romandigit = 1|16 romanfoot\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"The subdivisions of the Roman foot have the\\nsame names as the subdivisions of the pound,\\nbut we can't have the names for different\\nunits.\"}},{\"line\":\"romanpalm = 1|4 romanfoot\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"The subdivisions of the Roman foot have the\\nsame names as the subdivisions of the pound,\\nbut we can't have the names for different\\nunits.\"}},{\"line\":\"romancubit = 18 romaninch\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"The subdivisions of the Roman foot have the\\nsame names as the subdivisions of the pound,\\nbut we can't have the names for different\\nunits.\"}},{\"line\":\"romanpace = 5 romanfeet\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"Roman double pace (basic military unit)\"}},{\"line\":\"passus = romanpace\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"Roman double pace (basic military unit)\"}},{\"line\":\"romanperch = 10 romanfeet\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"\"}},{\"line\":\"stade = 125 romanpaces\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"\"}},{\"line\":\"stadia = stade\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"\"}},{\"line\":\"stadium = stade\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"\"}},{\"line\":\"romanmile = 8 stadia\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"1000 paces\"}},{\"line\":\"romanleague = 1.5 romanmile\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"\"}},{\"line\":\"schoenus = 4 romanmile\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"\"}},{\"line\":\"earlyromanfoot = 29.73 cm\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.1. Other values for the Roman foot (from Dilke)\"],\"comment\":\"\"}},{\"line\":\"pesdrusianus = 33.3 cm\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.1. Other values for the Roman foot (from Dilke)\"],\"comment\":\"or 33.35 cm, used in Gaul & Germany in 1st c BC\"}},{\"line\":\"lateromanfoot = 29.42 cm\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.1. Other values for the Roman foot (from Dilke)\"],\"comment\":\"\"}},{\"line\":\"actuslength = 120 romanfeet\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.2. Roman areas\"],\"comment\":\"length of a Roman furrow\"}},{\"line\":\"actus = 120*4 romanfeet^2\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.2. Roman areas\"],\"comment\":\"area of the furrow\"}},{\"line\":\"squareactus = 120^2 romanfeet^2\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.2. Roman areas\"],\"comment\":\"actus quadratus\"}},{\"line\":\"acnua = squareactus\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.2. Roman areas\"],\"comment\":\"actus quadratus\"}},{\"line\":\"iugerum = 2 squareactus\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.2. Roman areas\"],\"comment\":\"\"}},{\"line\":\"iugera = iugerum\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.2. Roman areas\"],\"comment\":\"\"}},{\"line\":\"jugerum = iugerum\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.2. Roman areas\"],\"comment\":\"\"}},{\"line\":\"jugera = iugerum\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.2. Roman areas\"],\"comment\":\"\"}},{\"line\":\"heredium = 2 iugera\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.2. Roman areas\"],\"comment\":\"heritable plot\"}},{\"line\":\"heredia = heredium\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.2. Roman areas\"],\"comment\":\"heritable plot\"}},{\"line\":\"centuria = 100 heredia\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.2. Roman areas\"],\"comment\":\"\"}},{\"line\":\"centurium = centuria\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.2. Roman areas\"],\"comment\":\"\"}},{\"line\":\"sextarius = 35.4 in^3\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.3. Roman volumes\"],\"comment\":\"Basic unit of Roman volume.  As always,\\nthere is uncertainty.  Six large Roman\\nmeasures survive with volumes ranging from\\n34.4 in^3 to 39.55 in^3.  Three of them\\ncluster around the size given here.\\n\\nBut the values for this unit vary wildly\\nin other sources.  One reference  gives 0.547\\nliters, but then says the amphora is a\\ncubic Roman foot.  This gives a value for the\\nsextarius of 0.540 liters.  And the\\nencyclopedia Brittanica lists 0.53 liters for\\nthis unit.  Both [7] and [11], which were\\nwritten by scholars of weights and measures,\\ngive the value of 35.4 cubic inches.\"}},{\"line\":\"sextarii = sextarius\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.3. Roman volumes\"],\"comment\":\"Basic unit of Roman volume.  As always,\\nthere is uncertainty.  Six large Roman\\nmeasures survive with volumes ranging from\\n34.4 in^3 to 39.55 in^3.  Three of them\\ncluster around the size given here.\\n\\nBut the values for this unit vary wildly\\nin other sources.  One reference  gives 0.547\\nliters, but then says the amphora is a\\ncubic Roman foot.  This gives a value for the\\nsextarius of 0.540 liters.  And the\\nencyclopedia Brittanica lists 0.53 liters for\\nthis unit.  Both [7] and [11], which were\\nwritten by scholars of weights and measures,\\ngive the value of 35.4 cubic inches.\"}},{\"line\":\"cochlearia = 1|48 sextarius\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.3. Roman volumes\"],\"comment\":\"\"}},{\"line\":\"cyathi = 1|12 sextarius\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.3. Roman volumes\"],\"comment\":\"\"}},{\"line\":\"acetabula = 1|8 sextarius\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.3. Roman volumes\"],\"comment\":\"\"}},{\"line\":\"quartaria = 1|4 sextarius\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.3. Roman volumes\"],\"comment\":\"\"}},{\"line\":\"quartarius = quartaria\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.3. Roman volumes\"],\"comment\":\"\"}},{\"line\":\"heminae = 1|2 sextarius\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.3. Roman volumes\"],\"comment\":\"\"}},{\"line\":\"hemina = heminae\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.3. Roman volumes\"],\"comment\":\"\"}},{\"line\":\"cheonix = 1.5 sextarii\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.3. Roman volumes\"],\"comment\":\"\"}},{\"line\":\"semodius = 8 sextarius\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.4. Dry volume measures (usually)\"],\"comment\":\"\"}},{\"line\":\"semodii = semodius\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.4. Dry volume measures (usually)\"],\"comment\":\"\"}},{\"line\":\"modius = 16 sextarius\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.4. Dry volume measures (usually)\"],\"comment\":\"\"}},{\"line\":\"modii = modius\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.4. Dry volume measures (usually)\"],\"comment\":\"\"}},{\"line\":\"congius = 12 heminae\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.5. Liquid volume measures (usually)\"],\"comment\":\"\"}},{\"line\":\"congii = congius\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.5. Liquid volume measures (usually)\"],\"comment\":\"\"}},{\"line\":\"amphora = 8 congii\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.5. Liquid volume measures (usually)\"],\"comment\":\"Also a dry volume measure\"}},{\"line\":\"amphorae = amphora\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.5. Liquid volume measures (usually)\"],\"comment\":\"Also a dry volume measure\"}},{\"line\":\"culleus = 20 amphorae\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.5. Liquid volume measures (usually)\"],\"comment\":\"\"}},{\"line\":\"quadrantal = amphora\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.5. Liquid volume measures (usually)\"],\"comment\":\"\"}},{\"line\":\"libra = 5052 grain\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.6. Roman weights\"],\"comment\":\"The Roman pound varied significantly\\nfrom 4210 grains to 5232 grains.  Most of\\nthe standards were obtained from the weight\\nof particular coins.  The one given here is\\nbased on the Gold Aureus of Augustus which\\nwas in use from BC 27 to AD 296.\"}},{\"line\":\"librae = libra\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.6. Roman weights\"],\"comment\":\"The Roman pound varied significantly\\nfrom 4210 grains to 5232 grains.  Most of\\nthe standards were obtained from the weight\\nof particular coins.  The one given here is\\nbased on the Gold Aureus of Augustus which\\nwas in use from BC 27 to AD 296.\"}},{\"line\":\"romanpound = libra\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.6. Roman weights\"],\"comment\":\"The Roman pound varied significantly\\nfrom 4210 grains to 5232 grains.  Most of\\nthe standards were obtained from the weight\\nof particular coins.  The one given here is\\nbased on the Gold Aureus of Augustus which\\nwas in use from BC 27 to AD 296.\"}},{\"line\":\"uncia = 1|12 libra\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.6. Roman weights\"],\"comment\":\"The Roman pound varied significantly\\nfrom 4210 grains to 5232 grains.  Most of\\nthe standards were obtained from the weight\\nof particular coins.  The one given here is\\nbased on the Gold Aureus of Augustus which\\nwas in use from BC 27 to AD 296.\"}},{\"line\":\"unciae = uncia\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.6. Roman weights\"],\"comment\":\"The Roman pound varied significantly\\nfrom 4210 grains to 5232 grains.  Most of\\nthe standards were obtained from the weight\\nof particular coins.  The one given here is\\nbased on the Gold Aureus of Augustus which\\nwas in use from BC 27 to AD 296.\"}},{\"line\":\"romanounce = uncia\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.6. Roman weights\"],\"comment\":\"The Roman pound varied significantly\\nfrom 4210 grains to 5232 grains.  Most of\\nthe standards were obtained from the weight\\nof particular coins.  The one given here is\\nbased on the Gold Aureus of Augustus which\\nwas in use from BC 27 to AD 296.\"}},{\"line\":\"deunx = 11 uncia\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"dextans = 10 uncia\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"dodrans = 9 uncia\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"bes = 8 uncia\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"seprunx = 7 uncia\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"semis = 6 uncia\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"quincunx = 5 uncia\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"triens = 4 uncia\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"quadrans = 3 uncia\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"sextans = 2 uncia\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"sescuncia = 1.5 uncia\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"semuncia = 1|2 uncia\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"siscilius = 1|4 uncia\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"sextula = 1|6 uncia\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"semisextula = 1|12 uncia\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"scriptulum = 1|24 uncia\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"scrupula = scriptulum\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"romanobol = 1|2 scrupula\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"romanaspound = 4210 grain\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"69.1.6. Roman weights\"],\"comment\":\"Old pound based on bronze coinage, the\\nearliest money of Rome BC 338 to BC 268.\"}},{\"line\":\"egyptianroyalcubit = 20.63 in\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.2. Egyptian length measure\"],\"comment\":\"plus or minus .2 in\"}},{\"line\":\"egyptianpalm = 1|7 egyptianroyalcubit\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.2. Egyptian length measure\"],\"comment\":\"\"}},{\"line\":\"egyptiandigit = 1|4 egyptianpalm\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.2. Egyptian length measure\"],\"comment\":\"\"}},{\"line\":\"egyptianshortcubit = 6 egyptianpalm\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.2. Egyptian length measure\"],\"comment\":\"\"}},{\"line\":\"doubleremen = 29.16 in\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.2. Egyptian length measure\"],\"comment\":\"Length of the diagonal of a square with\\nside length of 1 royal egyptian cubit.\\nThis is divided into 40 digits which are\\nnot the same size as the digits based on\\nthe royal cubit.\"}},{\"line\":\"remendigit = 1|40 doubleremen\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.2. Egyptian length measure\"],\"comment\":\"Length of the diagonal of a square with\\nside length of 1 royal egyptian cubit.\\nThis is divided into 40 digits which are\\nnot the same size as the digits based on\\nthe royal cubit.\"}},{\"line\":\"greekfoot = 12.45 in\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"Listed as being derived from the\\nEgyptian Royal cubit in [11].  It is\\nsaid to be 3|5 of a 20.75 in cubit.\"}},{\"line\":\"greekfeet = greekfoot\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"Listed as being derived from the\\nEgyptian Royal cubit in [11].  It is\\nsaid to be 3|5 of a 20.75 in cubit.\"}},{\"line\":\"greekcubit = 1.5 greekfoot\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"Listed as being derived from the\\nEgyptian Royal cubit in [11].  It is\\nsaid to be 3|5 of a 20.75 in cubit.\"}},{\"line\":\"pous = greekfoot\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"\"}},{\"line\":\"podes = greekfoot\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"\"}},{\"line\":\"orguia = 6 greekfoot\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"\"}},{\"line\":\"greekfathom = orguia\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"\"}},{\"line\":\"stadion = 100 orguia\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"\"}},{\"line\":\"akaina = 10 greekfeet\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"\"}},{\"line\":\"plethron = 10 akaina\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"\"}},{\"line\":\"greekfinger = 1|16 greekfoot\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"\"}},{\"line\":\"homericcubit = 20 greekfingers\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"Elbow to end of knuckles.\"}},{\"line\":\"shortgreekcubit = 18 greekfingers\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"Elbow to start of fingers.\"}},{\"line\":\"ionicfoot = 296 mm\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"\"}},{\"line\":\"doricfoot = 326 mm\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"\"}},{\"line\":\"olympiccubit = 25 remendigit\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympicfoot = 2|3 olympiccubit\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympicfinger = 1|16 olympicfoot\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympicfeet = olympicfoot\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympicdakylos = olympicfinger\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympicpalm = 1|4 olympicfoot\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympicpalestra = olympicpalm\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympicspithame = 3|4 foot\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympicspan = olympicspithame\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympicbema = 2.5 olympicfeet\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympicpace = olympicbema\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympicorguia = 6 olympicfeet\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympicfathom = olympicorguia\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympiccord = 60 olympicfeet\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympicamma = olympiccord\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympicplethron = 100 olympicfeet\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympicstadion = 600 olympicfeet\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"greekkotyle = 270 ml\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\",\"69.3.1. Greek capacity measure\"],\"comment\":\"This approximate value is obtained\\nfrom two earthenware vessels that\\nwere reconstructed from fragments.\\nThe kotyle is a day's corn ration\\nfor one man.\"}},{\"line\":\"xestes = 2 greekkotyle\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\",\"69.3.1. Greek capacity measure\"],\"comment\":\"This approximate value is obtained\\nfrom two earthenware vessels that\\nwere reconstructed from fragments.\\nThe kotyle is a day's corn ration\\nfor one man.\"}},{\"line\":\"khous = 12 greekkotyle\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\",\"69.3.1. Greek capacity measure\"],\"comment\":\"This approximate value is obtained\\nfrom two earthenware vessels that\\nwere reconstructed from fragments.\\nThe kotyle is a day's corn ration\\nfor one man.\"}},{\"line\":\"metretes = 12 khous\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\",\"69.3.1. Greek capacity measure\"],\"comment\":\"This approximate value is obtained\\nfrom two earthenware vessels that\\nwere reconstructed from fragments.\\nThe kotyle is a day's corn ration\\nfor one man.\"}},{\"line\":\"choinix = 4 greekkotyle\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\",\"69.3.1. Greek capacity measure\"],\"comment\":\"This approximate value is obtained\\nfrom two earthenware vessels that\\nwere reconstructed from fragments.\\nThe kotyle is a day's corn ration\\nfor one man.\"}},{\"line\":\"hekteos = 8 choinix\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\",\"69.3.1. Greek capacity measure\"],\"comment\":\"This approximate value is obtained\\nfrom two earthenware vessels that\\nwere reconstructed from fragments.\\nThe kotyle is a day's corn ration\\nfor one man.\"}},{\"line\":\"medimnos = 6 hekteos\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\",\"69.3.1. Greek capacity measure\"],\"comment\":\"This approximate value is obtained\\nfrom two earthenware vessels that\\nwere reconstructed from fragments.\\nThe kotyle is a day's corn ration\\nfor one man.\"}},{\"line\":\"aeginastater = 192 grain\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\",\"69.3.2. Greek weight. Two weight standards were used, an Aegina standard based\\non the Beqa shekel and an Athens (attic) standard.\"],\"comment\":\"Varies up to 199 grain\"}},{\"line\":\"aeginadrachmae = 1|2 aeginastater\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\",\"69.3.2. Greek weight. Two weight standards were used, an Aegina standard based\\non the Beqa shekel and an Athens (attic) standard.\"],\"comment\":\"\"}},{\"line\":\"aeginaobol = 1|6 aeginadrachmae\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\",\"69.3.2. Greek weight. Two weight standards were used, an Aegina standard based\\non the Beqa shekel and an Athens (attic) standard.\"],\"comment\":\"\"}},{\"line\":\"aeginamina = 50 aeginastaters\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\",\"69.3.2. Greek weight. Two weight standards were used, an Aegina standard based\\non the Beqa shekel and an Athens (attic) standard.\"],\"comment\":\"\"}},{\"line\":\"aeginatalent = 60 aeginamina\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\",\"69.3.2. Greek weight. Two weight standards were used, an Aegina standard based\\non the Beqa shekel and an Athens (attic) standard.\"],\"comment\":\"Supposedly the mass of a cubic foot\\nof water (whichever foot was in use)\"}},{\"line\":\"atticstater = 135 grain\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\",\"69.3.2. Greek weight. Two weight standards were used, an Aegina standard based\\non the Beqa shekel and an Athens (attic) standard.\"],\"comment\":\"Varies 134-138 grain\"}},{\"line\":\"atticdrachmae = 1|2 atticstater\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\",\"69.3.2. Greek weight. Two weight standards were used, an Aegina standard based\\non the Beqa shekel and an Athens (attic) standard.\"],\"comment\":\"\"}},{\"line\":\"atticobol = 1|6 atticdrachmae\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\",\"69.3.2. Greek weight. Two weight standards were used, an Aegina standard based\\non the Beqa shekel and an Athens (attic) standard.\"],\"comment\":\"\"}},{\"line\":\"atticmina = 50 atticstaters\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\",\"69.3.2. Greek weight. Two weight standards were used, an Aegina standard based\\non the Beqa shekel and an Athens (attic) standard.\"],\"comment\":\"\"}},{\"line\":\"attictalent = 60 atticmina\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.3. Greek length measures\",\"69.3.2. Greek weight. Two weight standards were used, an Aegina standard based\\non the Beqa shekel and an Athens (attic) standard.\"],\"comment\":\"Supposedly the mass of a cubic foot\\nof water (whichever foot was in use)\"}},{\"line\":\"northerncubit = 26.6 in\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.4. \\\"Northern\\\" cubit and foot. This was used by the pre-Aryan civilization in\\nthe Indus valley. It was used in Mesopotamia, Egypt, North Africa, China,\\ncentral and Western Europe until modern times when it was displaced by\\nthe metric system.\"],\"comment\":\"plus/minus .2 in\"}},{\"line\":\"northernfoot = 1|2 northerncubit\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.4. \\\"Northern\\\" cubit and foot. This was used by the pre-Aryan civilization in\\nthe Indus valley. It was used in Mesopotamia, Egypt, North Africa, China,\\ncentral and Western Europe until modern times when it was displaced by\\nthe metric system.\"],\"comment\":\"\"}},{\"line\":\"sumeriancubit = 495 mm\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.4. \\\"Northern\\\" cubit and foot. This was used by the pre-Aryan civilization in\\nthe Indus valley. It was used in Mesopotamia, Egypt, North Africa, China,\\ncentral and Western Europe until modern times when it was displaced by\\nthe metric system.\"],\"comment\":\"\"}},{\"line\":\"kus = sumeriancubit\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.4. \\\"Northern\\\" cubit and foot. This was used by the pre-Aryan civilization in\\nthe Indus valley. It was used in Mesopotamia, Egypt, North Africa, China,\\ncentral and Western Europe until modern times when it was displaced by\\nthe metric system.\"],\"comment\":\"\"}},{\"line\":\"sumerianfoot = 2|3 sumeriancubit\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.4. \\\"Northern\\\" cubit and foot. This was used by the pre-Aryan civilization in\\nthe Indus valley. It was used in Mesopotamia, Egypt, North Africa, China,\\ncentral and Western Europe until modern times when it was displaced by\\nthe metric system.\"],\"comment\":\"\"}},{\"line\":\"assyriancubit = 21.6 in\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.4. \\\"Northern\\\" cubit and foot. This was used by the pre-Aryan civilization in\\nthe Indus valley. It was used in Mesopotamia, Egypt, North Africa, China,\\ncentral and Western Europe until modern times when it was displaced by\\nthe metric system.\"],\"comment\":\"\"}},{\"line\":\"assyrianfoot = 1|2 assyriancubit\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.4. \\\"Northern\\\" cubit and foot. This was used by the pre-Aryan civilization in\\nthe Indus valley. It was used in Mesopotamia, Egypt, North Africa, China,\\ncentral and Western Europe until modern times when it was displaced by\\nthe metric system.\"],\"comment\":\"\"}},{\"line\":\"assyrianpalm = 1|3 assyrianfoot\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.4. \\\"Northern\\\" cubit and foot. This was used by the pre-Aryan civilization in\\nthe Indus valley. It was used in Mesopotamia, Egypt, North Africa, China,\\ncentral and Western Europe until modern times when it was displaced by\\nthe metric system.\"],\"comment\":\"\"}},{\"line\":\"assyriansusi = 1|20 assyrianpalm\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.4. \\\"Northern\\\" cubit and foot. This was used by the pre-Aryan civilization in\\nthe Indus valley. It was used in Mesopotamia, Egypt, North Africa, China,\\ncentral and Western Europe until modern times when it was displaced by\\nthe metric system.\"],\"comment\":\"\"}},{\"line\":\"susi = assyriansusi\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.4. \\\"Northern\\\" cubit and foot. This was used by the pre-Aryan civilization in\\nthe Indus valley. It was used in Mesopotamia, Egypt, North Africa, China,\\ncentral and Western Europe until modern times when it was displaced by\\nthe metric system.\"],\"comment\":\"\"}},{\"line\":\"persianroyalcubit = 7 assyrianpalm\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.4. \\\"Northern\\\" cubit and foot. This was used by the pre-Aryan civilization in\\nthe Indus valley. It was used in Mesopotamia, Egypt, North Africa, China,\\ncentral and Western Europe until modern times when it was displaced by\\nthe metric system.\"],\"comment\":\"\"}},{\"line\":\"hashimicubit = 25.56 in\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"Standard of linear measure used\\nin Persian dominions of the Arabic\\nempire 7-8th cent.  Is equal to two\\nFrench feet.\"}},{\"line\":\"blackcubit = 21.28 in\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"\"}},{\"line\":\"arabicfeet = 1|2 blackcubit\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"\"}},{\"line\":\"arabicfoot = arabicfeet\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"\"}},{\"line\":\"arabicinch = 1|12 arabicfoot\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"\"}},{\"line\":\"arabicmile = 4000 blackcubit\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"\"}},{\"line\":\"silverdirhem = 45 grain\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"The weights were derived from these two\\nunits with two identically named systems\\nused for silver and used for trade purposes\"}},{\"line\":\"tradedirhem = 48 grain\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"The weights were derived from these two\\nunits with two identically named systems\\nused for silver and used for trade purposes\"}},{\"line\":\"silverkirat = 1|16 silverdirhem\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"\"}},{\"line\":\"silverwukiyeh = 10 silverdirhem\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"\"}},{\"line\":\"silverrotl = 12 silverwukiyeh\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"\"}},{\"line\":\"arabicsilverpound = silverrotl\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"\"}},{\"line\":\"tradekirat = 1|16 tradedirhem\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"\"}},{\"line\":\"tradewukiyeh = 10 tradedirhem\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"\"}},{\"line\":\"traderotl = 12 tradewukiyeh\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"\"}},{\"line\":\"arabictradepound = traderotl\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"\"}},{\"line\":\"parasang = 3.5 mile\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.6. Miscellaneous ancient units\"],\"comment\":\"Persian unit of length usually thought\\nto be between 3 and 3.5 miles\"}},{\"line\":\"biblicalcubit = 21.8 in\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.6. Miscellaneous ancient units\"],\"comment\":\"\"}},{\"line\":\"hebrewcubit = 17.58 in\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.6. Miscellaneous ancient units\"],\"comment\":\"\"}},{\"line\":\"li = 10|27.8 mile\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.6. Miscellaneous ancient units\"],\"comment\":\"Chinese unit of length\\n100 li is considered a day's march\"}},{\"line\":\"liang = 11|3 oz\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.6. Miscellaneous ancient units\"],\"comment\":\"Chinese weight unit\"}},{\"line\":\"timepoint = 1|5 hour\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.7. Medieval time units. According to the OED, these appear in Du Cange\\nby Papias.\"],\"comment\":\"also given as 1|4\"}},{\"line\":\"timeminute = 1|10 hour\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.7. Medieval time units. According to the OED, these appear in Du Cange\\nby Papias.\"],\"comment\":\"\"}},{\"line\":\"timeostent = 1|60 hour\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.7. Medieval time units. According to the OED, these appear in Du Cange\\nby Papias.\"],\"comment\":\"\"}},{\"line\":\"timeounce = 1|8 timeostent\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.7. Medieval time units. According to the OED, these appear in Du Cange\\nby Papias.\"],\"comment\":\"\"}},{\"line\":\"timeatom = 1|47 timeounce\",\"info\":{\"headings\":[\"69. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"69.7. Medieval time units. According to the OED, these appear in Du Cange\\nby Papias.\"],\"comment\":\"\"}},{\"line\":\"mite = 1|20 grain\",\"info\":{\"headings\":[\"70. Given in [15], these subdivisions of the grain were supposedly used\\nby jewelers. The mite may have been used but the blanc could not\\nhave been accurately measured.\"],\"comment\":\"\"}},{\"line\":\"droit = 1|24 mite\",\"info\":{\"headings\":[\"70. Given in [15], these subdivisions of the grain were supposedly used\\nby jewelers. The mite may have been used but the blanc could not\\nhave been accurately measured.\"],\"comment\":\"\"}},{\"line\":\"periot = 1|20 droit\",\"info\":{\"headings\":[\"70. Given in [15], these subdivisions of the grain were supposedly used\\nby jewelers. The mite may have been used but the blanc could not\\nhave been accurately measured.\"],\"comment\":\"\"}},{\"line\":\"blanc = 1|24 periot\",\"info\":{\"headings\":[\"70. Given in [15], these subdivisions of the grain were supposedly used\\nby jewelers. The mite may have been used but the blanc could not\\nhave been accurately measured.\"],\"comment\":\"\"}},{\"line\":\"hundredweight = ushundredweight\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"ton = uston\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"scruple = apscruple\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"fluidounce = usfluidounce\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"gallon = usgallon\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"bushel = usbushel\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"quarter = quarterweight\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"cup = uscup\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"tablespoon = ustablespoon\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"teaspoon = usteaspoon\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"dollar = US$\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"cent = $ 0.01\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"penny = cent\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"minim = minimvolume\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"pony = ponyvolume\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"grand = usgrand\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"firkin = usfirkin\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"hogshead = ushogshead\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"⅛_ = 1|8\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"¼_ = 1|4\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"⅜_ = 3|8\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"½_ = 1|2\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"⅝_ = 5|8\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"¾_ = 3|4\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"⅞_ = 7|8\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"⅙_ = 1|6\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"⅓_ = 1|3\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"⅔_ = 2|3\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"⅚_ = 5|6\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"⅕_ = 1|5\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"⅖_ = 2|5\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"⅗_ = 3|5\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"⅘_ = 4|5\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"U+2150-               1|7  For some reason these characters are getting\\nU+2151-               1|9  flagged as invalid UTF8.\\nU+2152-               1|10\"}},{\"line\":\"ℯ = exp(1)\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"U+212F, base of natural log\"}},{\"line\":\"µ_ = micro\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"micro sign U+00B5\\nsmall mu U+03BC\"}},{\"line\":\"μ_ = micro\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"micro sign U+00B5\\nsmall mu U+03BC\"}},{\"line\":\"ångström = angstrom\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"angstrom symbol U+212B\\nA with ring U+00C5\"}},{\"line\":\"Å = angstrom\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"angstrom symbol U+212B\\nA with ring U+00C5\"}},{\"line\":\"Å = angstrom\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"angstrom symbol U+212B\\nA with ring U+00C5\"}},{\"line\":\"röntgen = roentgen\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"°C = degC\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"°F = degF\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"°K = K\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"°K is incorrect notation\"}},{\"line\":\"°R = degR\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"° = degree\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"℃ = degC\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"℉ = degF\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"K = K\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"Kelvin symbol, U+212A\"}},{\"line\":\"ℓ = liter\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"unofficial abbreviation used in some places\"}},{\"line\":\"¢ = cent\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"£ = britainpound\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"¥ = japanyen\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"€ = euro\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"₩ = southkoreawon\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"₪ = israelnewshekel\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"₤ = lira\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"₨ = rupee\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"Ω = ohm\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"Ohm symbol U+2126\\nGreek capital omega U+03A9\"}},{\"line\":\"Ω = ohm\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"Ohm symbol U+2126\\nGreek capital omega U+03A9\"}},{\"line\":\"℧ = mho\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"ʒ = dram\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"U+0292\"}},{\"line\":\"℈ = scruple\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"℥ = ounce\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"℔ = lb\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"ℎ = h\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"ℏ = hbar\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"‰ = 1|1000\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"‱ = 1|10000\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"\"}},{\"line\":\"′ = '\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"U+2032\"}},{\"line\":\"″ = \\\"\",\"info\":{\"headings\":[\"71. Localization\"],\"comment\":\"U+2033\"}},{\"line\":\"㍱ = hPa\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㍲ = da\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㍳ = au\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㍴ = bar\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㍶ = pc\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"㍷                      dm      invalid on Mac\\n㍸                      dm^2    invalid on Mac\\n㍹                      dm^3    invalid on Mac\"}},{\"line\":\"㎀ = pA\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎁ = nA\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎂ = µA\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎃ = mA\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎄ = kA\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎅ = kB\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎆ = MB\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎇ = GB\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎈ = cal\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎉ = kcal\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎊ = pF\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎋ = nF\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎌ = µF\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎍ = µg\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎎ = mg\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎏ = kg\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎐ = Hz\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎑ = kHz\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎒ = MHz\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎓ = GHz\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎔ = THz\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎕ = µL\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎖ = mL\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎗ = dL\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎘ = kL\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎙ = fm\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎚ = nm\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎛ = µm\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎜ = mm\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎝ = cm\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎞ = km\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎟ = mm^2\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎠ = cm^2\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎡ = m^2\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎢ = km^2\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎣ = mm^3\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎤ = cm^3\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎥ = m^3\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎦ = km^3\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎧ = m/s\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎨ = m/s^2\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎩ = Pa\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎪ = kPa\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎫ = MPa\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎬ = GPa\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎭ = rad\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎮ = rad/s\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎯ = rad/s^2\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎰ = ps\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎱ = ns\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎲ = µs\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎳ = ms\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎴ = pV\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎵ = nV\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎶ = µV\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎷ = mV\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎸ = kV\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎹ = MV\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎺ = pW\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎻ = nW\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎼ = µW\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎽ = mW\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎾ = kW\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎿ = MW\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏀ = kΩ\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏁ = MΩ\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏃ = Bq\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏄ = cc\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏅ = cd\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏆ = C/kg\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏈ = dB\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏉ = Gy\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏊ = ha\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"㏋  HP??\"}},{\"line\":\"㏌ = in\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏏ = kt\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏐ = lm\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏓ = lx\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏔ = mb\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏕ = mil\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏖ = mol\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏗ = pH\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏙ = ppm\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏛ = sr\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏜ = Sv\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏝ = Wb\",\"info\":{\"headings\":[\"72. Square unicode symbols starting at U+3371\"],\"comment\":\"㏞                      V/m     Invalid on Mac\\n㏟                      A/m     Invalid on Mac\\n㏿                      gal     Invalid on Mac\"}}]\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./data/gnu-units.json\n// module id = 103\n// module chunks = 0","module.exports = \"\\n# I use hours far more often than the planck_constant\\nplanck_constant = h\\ndelete h\\nh = hour \\n\\nAh = A h\\n\\nE = energy\\n\\ndelete °C\\n°C = tempC\\ndelete °F\\n°F = tempF\\n\\nfibonacci = x => x >= 2 && fibonacci(x-1) + fibonacci(x-2) || x\\n\\nspheresurface = r => 4 pi r^2\\n\\n\\n# people might try to write either `10 in to cm` (inches to cm) or `10 kg in pounds`, which would be syntactically different.\\n# to avoid confusion, disallow both of these\\ndelete(in)\\n\\n#\\n# computing power\\n#\\n\\nflo! # one floating point operation\\n\\nfloating_point_operation = flo\\n\\nflops = flo/s\\n\\n\\n# cryptocurrency\\n\\nbitcoin!\\nBTC = bitcoin\\nsatoshi = (1/100million) bitcoin\\n\\n\\n# logic\\n\\nok = 1\\nerror = 0\\ntrue = 1\\nfalse = 0\\n\\n# buggy if a = 0\\nif = bool => then => else => (bool && then || else)\\n\\n\\n# screen ratio calculation, i.e. how wide is a 27\\\" screen with a ratio of 16:9\\n#\\n# (1) width^2 + height^2 = (diagonal^2)\\n# (2) width = ratio height\\n# \\n# => w^2 + (w/ratio)^2 = d^2\\n# => 1 w^2 + (1/ratio^2) w^2 = d^2\\n# => (1 + 1/ratio^2) w^2 = d^2\\n# => w = d / sqrt(1 + 1/ratio^2)\\n# \\n# Example:\\n# screenwidth (27inch) (16|9) to cm ≅ 60 cm\\n\\nscreenwidth = diagonal => ratio => diagonal / sqrt (1 + 1 / ratio ^ 2)\\nscreenheight = diagonal => ratio => screenwidth diagonal (1/ratio)\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./data/custom_data.txt\n// module id = 104\n// module chunks = 0","// https://www.grammarly.com/blog/spelling-plurals-with-s-es/\nconst esSuffixes = [\"s\", \"sh\", \"ch\", \"x\", \"z\"];\n\n/**\n * test -> null\n * inches -> inch\n * kilometers -> kilometer\n */\nexport function tryRemovePluralSuffix(x: string) {\n\tif (x.slice(-2) === \"es\") {\n\t\tconst wop = x.slice(0, -2);\n\t\tfor (const suff of esSuffixes) if (wop.endsWith(suff)) return wop;\n\t}\n\tif (x.slice(-1) === \"s\") {\n\t\tconst wop = x.slice(0, -1);\n\t\treturn wop;\n\t}\n\treturn null;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/libqalc/util.ts","'use strict';\nvar strictUriEncode = require('strict-uri-encode');\nvar objectAssign = require('object-assign');\nvar decodeComponent = require('decode-uri-component');\n\nfunction encoderForArrayFormat(opts) {\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, index) {\n\t\t\t\treturn value === null ? [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[',\n\t\t\t\t\tindex,\n\t\t\t\t\t']'\n\t\t\t\t].join('') : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[',\n\t\t\t\t\tencode(index, opts),\n\t\t\t\t\t']=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[]=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(opts) {\n\tvar result;\n\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t} else if (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction encode(value, opts) {\n\tif (opts.encode) {\n\t\treturn opts.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t} else if (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input)).sort(function (a, b) {\n\t\t\treturn Number(a) - Number(b);\n\t\t}).map(function (key) {\n\t\t\treturn input[key];\n\t\t});\n\t}\n\n\treturn input;\n}\n\nexports.extract = function (str) {\n\tvar queryStart = str.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\treturn str.slice(queryStart + 1);\n};\n\nexports.parse = function (str, opts) {\n\topts = objectAssign({arrayFormat: 'none'}, opts);\n\n\tvar formatter = parserForArrayFormat(opts);\n\n\t// Create an object with no prototype\n\t// https://github.com/sindresorhus/query-string/issues/47\n\tvar ret = Object.create(null);\n\n\tif (typeof str !== 'string') {\n\t\treturn ret;\n\t}\n\n\tstr = str.trim().replace(/^[?#&]/, '');\n\n\tif (!str) {\n\t\treturn ret;\n\t}\n\n\tstr.split('&').forEach(function (param) {\n\t\tvar parts = param.replace(/\\+/g, ' ').split('=');\n\t\t// Firefox (pre 40) decodes `%3D` to `=`\n\t\t// https://github.com/sindresorhus/query-string/pull/37\n\t\tvar key = parts.shift();\n\t\tvar val = parts.length > 0 ? parts.join('=') : undefined;\n\n\t\t// missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tval = val === undefined ? null : decodeComponent(val);\n\n\t\tformatter(decodeComponent(key), val, ret);\n\t});\n\n\treturn Object.keys(ret).sort().reduce(function (result, key) {\n\t\tvar val = ret[key];\n\t\tif (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(val);\n\t\t} else {\n\t\t\tresult[key] = val;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n};\n\nexports.stringify = function (obj, opts) {\n\tvar defaults = {\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none'\n\t};\n\n\topts = objectAssign(defaults, opts);\n\n\tvar formatter = encoderForArrayFormat(opts);\n\n\treturn obj ? Object.keys(obj).sort().map(function (key) {\n\t\tvar val = obj[key];\n\n\t\tif (val === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (val === null) {\n\t\t\treturn encode(key, opts);\n\t\t}\n\n\t\tif (Array.isArray(val)) {\n\t\t\tvar result = [];\n\n\t\t\tval.slice().forEach(function (val2) {\n\t\t\t\tif (val2 === undefined) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresult.push(formatter(key, val2, result.length));\n\t\t\t});\n\n\t\t\treturn result.join('&');\n\t\t}\n\n\t\treturn encode(key, opts) + '=' + encode(val, opts);\n\t}).filter(function (x) {\n\t\treturn x.length > 0;\n\t}).join('&') : '';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/query-string/index.js\n// module id = 106\n// module chunks = 0","'use strict';\nmodule.exports = function (str) {\n\treturn encodeURIComponent(str).replace(/[!'()*]/g, function (c) {\n\t\treturn '%' + c.charCodeAt(0).toString(16).toUpperCase();\n\t});\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/strict-uri-encode/index.js\n// module id = 107\n// module chunks = 0","'use strict';\nvar token = '%[a-f0-9]{2}';\nvar singleMatcher = new RegExp(token, 'gi');\nvar multiMatcher = new RegExp('(' + token + ')+', 'gi');\n\nfunction decodeComponents(components, split) {\n\ttry {\n\t\t// Try to decode the entire string first\n\t\treturn decodeURIComponent(components.join(''));\n\t} catch (err) {\n\t\t// Do nothing\n\t}\n\n\tif (components.length === 1) {\n\t\treturn components;\n\t}\n\n\tsplit = split || 1;\n\n\t// Split the array in 2 parts\n\tvar left = components.slice(0, split);\n\tvar right = components.slice(split);\n\n\treturn Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\n\nfunction decode(input) {\n\ttry {\n\t\treturn decodeURIComponent(input);\n\t} catch (err) {\n\t\tvar tokens = input.match(singleMatcher);\n\n\t\tfor (var i = 1; i < tokens.length; i++) {\n\t\t\tinput = decodeComponents(tokens, i).join('');\n\n\t\t\ttokens = input.match(singleMatcher);\n\t\t}\n\n\t\treturn input;\n\t}\n}\n\nfunction customDecodeURIComponent(input) {\n\t// Keep track of all the replacements and prefill the map with the `BOM`\n\tvar replaceMap = {\n\t\t'%FE%FF': '\\uFFFD\\uFFFD',\n\t\t'%FF%FE': '\\uFFFD\\uFFFD'\n\t};\n\n\tvar match = multiMatcher.exec(input);\n\twhile (match) {\n\t\ttry {\n\t\t\t// Decode as big chunks as possible\n\t\t\treplaceMap[match[0]] = decodeURIComponent(match[0]);\n\t\t} catch (err) {\n\t\t\tvar result = decode(match[0]);\n\n\t\t\tif (result !== match[0]) {\n\t\t\t\treplaceMap[match[0]] = result;\n\t\t\t}\n\t\t}\n\n\t\tmatch = multiMatcher.exec(input);\n\t}\n\n\t// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n\treplaceMap['%C2'] = '\\uFFFD';\n\n\tvar entries = Object.keys(replaceMap);\n\n\tfor (var i = 0; i < entries.length; i++) {\n\t\t// Replace all decoded components\n\t\tvar key = entries[i];\n\t\tinput = input.replace(new RegExp(key, 'g'), replaceMap[key]);\n\t}\n\n\treturn input;\n}\n\nmodule.exports = function (encodedURI) {\n\tif (typeof encodedURI !== 'string') {\n\t\tthrow new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');\n\t}\n\n\ttry {\n\t\tencodedURI = encodedURI.replace(/\\+/g, ' ');\n\n\t\t// Try the built in decoder first\n\t\treturn decodeURIComponent(encodedURI);\n\t} catch (err) {\n\t\t// Fallback to a more advanced decoder\n\t\treturn customDecodeURIComponent(encodedURI);\n\t}\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/decode-uri-component/index.js\n// module id = 108\n// module chunks = 0","import Tooltip from './Tooltip';\n\nexport default Tooltip;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rc-tooltip/es/index.js\n// module id = 109\n// module chunks = 0","import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Trigger from 'rc-trigger';\nimport { placements } from './placements';\n\nvar Tooltip = function (_Component) {\n  _inherits(Tooltip, _Component);\n\n  function Tooltip() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Tooltip);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.getPopupElement = function () {\n      var _this$props = _this.props,\n          arrowContent = _this$props.arrowContent,\n          overlay = _this$props.overlay,\n          prefixCls = _this$props.prefixCls,\n          id = _this$props.id;\n\n      return [React.createElement(\n        'div',\n        { className: prefixCls + '-arrow', key: 'arrow' },\n        arrowContent\n      ), React.createElement(\n        'div',\n        { className: prefixCls + '-inner', key: 'content', id: id },\n        typeof overlay === 'function' ? overlay() : overlay\n      )];\n    }, _this.saveTrigger = function (node) {\n      _this.trigger = node;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  Tooltip.prototype.getPopupDomNode = function getPopupDomNode() {\n    return this.trigger.getPopupDomNode();\n  };\n\n  Tooltip.prototype.render = function render() {\n    var _props = this.props,\n        overlayClassName = _props.overlayClassName,\n        trigger = _props.trigger,\n        mouseEnterDelay = _props.mouseEnterDelay,\n        mouseLeaveDelay = _props.mouseLeaveDelay,\n        overlayStyle = _props.overlayStyle,\n        prefixCls = _props.prefixCls,\n        children = _props.children,\n        onVisibleChange = _props.onVisibleChange,\n        afterVisibleChange = _props.afterVisibleChange,\n        transitionName = _props.transitionName,\n        animation = _props.animation,\n        placement = _props.placement,\n        align = _props.align,\n        destroyTooltipOnHide = _props.destroyTooltipOnHide,\n        defaultVisible = _props.defaultVisible,\n        getTooltipContainer = _props.getTooltipContainer,\n        restProps = _objectWithoutProperties(_props, ['overlayClassName', 'trigger', 'mouseEnterDelay', 'mouseLeaveDelay', 'overlayStyle', 'prefixCls', 'children', 'onVisibleChange', 'afterVisibleChange', 'transitionName', 'animation', 'placement', 'align', 'destroyTooltipOnHide', 'defaultVisible', 'getTooltipContainer']);\n\n    var extraProps = _extends({}, restProps);\n    if ('visible' in this.props) {\n      extraProps.popupVisible = this.props.visible;\n    }\n    return React.createElement(\n      Trigger,\n      _extends({\n        popupClassName: overlayClassName,\n        ref: this.saveTrigger,\n        prefixCls: prefixCls,\n        popup: this.getPopupElement,\n        action: trigger,\n        builtinPlacements: placements,\n        popupPlacement: placement,\n        popupAlign: align,\n        getPopupContainer: getTooltipContainer,\n        onPopupVisibleChange: onVisibleChange,\n        afterPopupVisibleChange: afterVisibleChange,\n        popupTransitionName: transitionName,\n        popupAnimation: animation,\n        defaultPopupVisible: defaultVisible,\n        destroyPopupOnHide: destroyTooltipOnHide,\n        mouseLeaveDelay: mouseLeaveDelay,\n        popupStyle: overlayStyle,\n        mouseEnterDelay: mouseEnterDelay\n      }, extraProps),\n      children\n    );\n  };\n\n  return Tooltip;\n}(Component);\n\nTooltip.propTypes = {\n  trigger: PropTypes.any,\n  children: PropTypes.any,\n  defaultVisible: PropTypes.bool,\n  visible: PropTypes.bool,\n  placement: PropTypes.string,\n  transitionName: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  animation: PropTypes.any,\n  onVisibleChange: PropTypes.func,\n  afterVisibleChange: PropTypes.func,\n  overlay: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n  overlayStyle: PropTypes.object,\n  overlayClassName: PropTypes.string,\n  prefixCls: PropTypes.string,\n  mouseEnterDelay: PropTypes.number,\n  mouseLeaveDelay: PropTypes.number,\n  getTooltipContainer: PropTypes.func,\n  destroyTooltipOnHide: PropTypes.bool,\n  align: PropTypes.object,\n  arrowContent: PropTypes.any,\n  id: PropTypes.string\n};\nTooltip.defaultProps = {\n  prefixCls: 'rc-tooltip',\n  mouseEnterDelay: 0,\n  destroyTooltipOnHide: false,\n  mouseLeaveDelay: 0.1,\n  align: {},\n  placement: 'right',\n  trigger: ['hover'],\n  arrowContent: null\n};\n\n\nexport default Tooltip;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rc-tooltip/es/Tooltip.js\n// module id = 110\n// module chunks = 0","module.exports = { \"default\": require(\"core-js/library/fn/object/assign\"), __esModule: true };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/core-js/object/assign.js\n// module id = 111\n// module chunks = 0","require('../../modules/es6.object.assign');\nmodule.exports = require('../../modules/_core').Object.assign;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/fn/object/assign.js\n// module id = 112\n// module chunks = 0","// 19.1.3.1 Object.assign(target, source)\nvar $export = require('./_export');\n\n$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/es6.object.assign.js\n// module id = 113\n// module chunks = 0","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_a-function.js\n// module id = 114\n// module chunks = 0","'use strict';\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nvar toObject = require('./_to-object');\nvar IObject = require('./_iobject');\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || require('./_fails')(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = gOPS.f;\n  var isEnum = pIE.f;\n  while (aLen > index) {\n    var S = IObject(arguments[index++]);\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n  } return T;\n} : $assign;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_object-assign.js\n// module id = 115\n// module chunks = 0","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_array-includes.js\n// module id = 116\n// module chunks = 0","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_to-length.js\n// module id = 117\n// module chunks = 0","var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_to-absolute-index.js\n// module id = 118\n// module chunks = 0","module.exports = { \"default\": require(\"core-js/library/fn/symbol/iterator\"), __esModule: true };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/core-js/symbol/iterator.js\n// module id = 119\n// module chunks = 0","require('../../modules/es6.string.iterator');\nrequire('../../modules/web.dom.iterable');\nmodule.exports = require('../../modules/_wks-ext').f('iterator');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/fn/symbol/iterator.js\n// module id = 120\n// module chunks = 0","'use strict';\nvar $at = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/es6.string.iterator.js\n// module id = 121\n// module chunks = 0","var toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_string-at.js\n// module id = 122\n// module chunks = 0","'use strict';\nvar create = require('./_object-create');\nvar descriptor = require('./_property-desc');\nvar setToStringTag = require('./_set-to-string-tag');\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_iter-create.js\n// module id = 123\n// module chunks = 0","var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_object-dps.js\n// module id = 124\n// module chunks = 0","var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_html.js\n// module id = 125\n// module chunks = 0","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('./_has');\nvar toObject = require('./_to-object');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_object-gpo.js\n// module id = 126\n// module chunks = 0","require('./es6.array.iterator');\nvar global = require('./_global');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar TO_STRING_TAG = require('./_wks')('toStringTag');\n\nvar DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +\n  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +\n  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +\n  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +\n  'TextTrackList,TouchList').split(',');\n\nfor (var i = 0; i < DOMIterables.length; i++) {\n  var NAME = DOMIterables[i];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n  Iterators[NAME] = Iterators.Array;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/web.dom.iterable.js\n// module id = 127\n// module chunks = 0","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables');\nvar step = require('./_iter-step');\nvar Iterators = require('./_iterators');\nvar toIObject = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/es6.array.iterator.js\n// module id = 128\n// module chunks = 0","module.exports = function () { /* empty */ };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_add-to-unscopables.js\n// module id = 129\n// module chunks = 0","module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_iter-step.js\n// module id = 130\n// module chunks = 0","module.exports = { \"default\": require(\"core-js/library/fn/symbol\"), __esModule: true };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/core-js/symbol.js\n// module id = 131\n// module chunks = 0","require('../../modules/es6.symbol');\nrequire('../../modules/es6.object.to-string');\nrequire('../../modules/es7.symbol.async-iterator');\nrequire('../../modules/es7.symbol.observable');\nmodule.exports = require('../../modules/_core').Symbol;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/fn/symbol/index.js\n// module id = 132\n// module chunks = 0","'use strict';\n// ECMAScript 6 symbols shim\nvar global = require('./_global');\nvar has = require('./_has');\nvar DESCRIPTORS = require('./_descriptors');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar META = require('./_meta').KEY;\nvar $fails = require('./_fails');\nvar shared = require('./_shared');\nvar setToStringTag = require('./_set-to-string-tag');\nvar uid = require('./_uid');\nvar wks = require('./_wks');\nvar wksExt = require('./_wks-ext');\nvar wksDefine = require('./_wks-define');\nvar enumKeys = require('./_enum-keys');\nvar isArray = require('./_is-array');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar createDesc = require('./_property-desc');\nvar _create = require('./_object-create');\nvar gOPNExt = require('./_object-gopn-ext');\nvar $GOPD = require('./_object-gopd');\nvar $DP = require('./_object-dp');\nvar $keys = require('./_object-keys');\nvar gOPD = $GOPD.f;\nvar dP = $DP.f;\nvar gOPN = gOPNExt.f;\nvar $Symbol = global.Symbol;\nvar $JSON = global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE = 'prototype';\nvar HIDDEN = wks('_hidden');\nvar TO_PRIMITIVE = wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = shared('symbol-registry');\nvar AllSymbols = shared('symbols');\nvar OPSymbols = shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE];\nvar USE_NATIVE = typeof $Symbol == 'function';\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n  return _create(dP({}, 'a', {\n    get: function () { return dP(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if (has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _create(D, { enumerable: createDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = toIObject(it);\n  key = toPrimitive(key, true);\n  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n  var D = gOPD(it, key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN(toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f = $defineProperty;\n  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;\n  require('./_object-pie').f = $propertyIsEnumerable;\n  require('./_object-gops').f = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS && !require('./_library')) {\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function (name) {\n    return wrap(wks(name));\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    $replacer = replacer = args[1];\n    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    if (!isArray(replacer)) replacer = function (key, value) {\n      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/es6.symbol.js\n// module id = 133\n// module chunks = 0","var META = require('./_uid')('meta');\nvar isObject = require('./_is-object');\nvar has = require('./_has');\nvar setDesc = require('./_object-dp').f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !require('./_fails')(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_meta.js\n// module id = 134\n// module chunks = 0","// all enumerable object keys, includes symbols\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nmodule.exports = function (it) {\n  var result = getKeys(it);\n  var getSymbols = gOPS.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = pIE.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_enum-keys.js\n// module id = 135\n// module chunks = 0","// 7.2.2 IsArray(argument)\nvar cof = require('./_cof');\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_is-array.js\n// module id = 136\n// module chunks = 0","// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = require('./_to-iobject');\nvar gOPN = require('./_object-gopn').f;\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_object-gopn-ext.js\n// module id = 137\n// module chunks = 0","require('./_wks-define')('asyncIterator');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/es7.symbol.async-iterator.js\n// module id = 139\n// module chunks = 0","require('./_wks-define')('observable');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/es7.symbol.observable.js\n// module id = 140\n// module chunks = 0","module.exports = { \"default\": require(\"core-js/library/fn/object/set-prototype-of\"), __esModule: true };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/core-js/object/set-prototype-of.js\n// module id = 141\n// module chunks = 0","require('../../modules/es6.object.set-prototype-of');\nmodule.exports = require('../../modules/_core').Object.setPrototypeOf;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/fn/object/set-prototype-of.js\n// module id = 142\n// module chunks = 0","// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = require('./_export');\n$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/es6.object.set-prototype-of.js\n// module id = 143\n// module chunks = 0","// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_set-proto.js\n// module id = 144\n// module chunks = 0","module.exports = { \"default\": require(\"core-js/library/fn/object/create\"), __esModule: true };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/core-js/object/create.js\n// module id = 145\n// module chunks = 0","require('../../modules/es6.object.create');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function create(P, D) {\n  return $Object.create(P, D);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/fn/object/create.js\n// module id = 146\n// module chunks = 0","var $export = require('./_export');\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n$export($export.S, 'Object', { create: require('./_object-create') });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/es6.object.create.js\n// module id = 147\n// module chunks = 0","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar invariant = require('fbjs/lib/invariant');\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    invariant(\n      false,\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim\n  };\n\n  ReactPropTypes.checkPropTypes = emptyFunction;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/prop-types/factoryWithThrowingShims.js\n// module id = 148\n// module chunks = 0","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/prop-types/lib/ReactPropTypesSecret.js\n// module id = 149\n// module chunks = 0","import _extends from 'babel-runtime/helpers/extends';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { findDOMNode, createPortal } from 'react-dom';\nimport createReactClass from 'create-react-class';\nimport contains from 'rc-util/es/Dom/contains';\nimport addEventListener from 'rc-util/es/Dom/addEventListener';\nimport Popup from './Popup';\nimport { getAlignFromPlacement, getPopupClassNameFromAlign as _getPopupClassNameFromAlign } from './utils';\nimport getContainerRenderMixin from 'rc-util/es/getContainerRenderMixin';\nimport Portal from 'rc-util/es/Portal';\n\nfunction noop() {}\n\nfunction returnEmptyString() {\n  return '';\n}\n\nfunction returnDocument() {\n  return window.document;\n}\n\nvar ALL_HANDLERS = ['onClick', 'onMouseDown', 'onTouchStart', 'onMouseEnter', 'onMouseLeave', 'onFocus', 'onBlur', 'onContextMenu'];\n\nvar IS_REACT_16 = !!createPortal;\n\nvar mixins = [];\n\nif (!IS_REACT_16) {\n  mixins.push(getContainerRenderMixin({\n    autoMount: false,\n\n    isVisible: function isVisible(instance) {\n      return instance.state.popupVisible;\n    },\n    isForceRender: function isForceRender(instance) {\n      return instance.props.forceRender;\n    },\n    getContainer: function getContainer(instance) {\n      return instance.getContainer();\n    }\n  }));\n}\n\nvar Trigger = createReactClass({\n  displayName: 'Trigger',\n  propTypes: {\n    children: PropTypes.any,\n    action: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n    showAction: PropTypes.any,\n    hideAction: PropTypes.any,\n    getPopupClassNameFromAlign: PropTypes.any,\n    onPopupVisibleChange: PropTypes.func,\n    afterPopupVisibleChange: PropTypes.func,\n    popup: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n    popupStyle: PropTypes.object,\n    prefixCls: PropTypes.string,\n    popupClassName: PropTypes.string,\n    popupPlacement: PropTypes.string,\n    builtinPlacements: PropTypes.object,\n    popupTransitionName: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    popupAnimation: PropTypes.any,\n    mouseEnterDelay: PropTypes.number,\n    mouseLeaveDelay: PropTypes.number,\n    zIndex: PropTypes.number,\n    focusDelay: PropTypes.number,\n    blurDelay: PropTypes.number,\n    getPopupContainer: PropTypes.func,\n    getDocument: PropTypes.func,\n    forceRender: PropTypes.bool,\n    destroyPopupOnHide: PropTypes.bool,\n    mask: PropTypes.bool,\n    maskClosable: PropTypes.bool,\n    onPopupAlign: PropTypes.func,\n    popupAlign: PropTypes.object,\n    popupVisible: PropTypes.bool,\n    maskTransitionName: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    maskAnimation: PropTypes.string\n  },\n\n  mixins: mixins,\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      prefixCls: 'rc-trigger-popup',\n      getPopupClassNameFromAlign: returnEmptyString,\n      getDocument: returnDocument,\n      onPopupVisibleChange: noop,\n      afterPopupVisibleChange: noop,\n      onPopupAlign: noop,\n      popupClassName: '',\n      mouseEnterDelay: 0,\n      mouseLeaveDelay: 0.1,\n      focusDelay: 0,\n      blurDelay: 0.15,\n      popupStyle: {},\n      destroyPopupOnHide: false,\n      popupAlign: {},\n      defaultPopupVisible: false,\n      mask: false,\n      maskClosable: true,\n      action: [],\n      showAction: [],\n      hideAction: []\n    };\n  },\n  getInitialState: function getInitialState() {\n    var props = this.props;\n    var popupVisible = void 0;\n    if ('popupVisible' in props) {\n      popupVisible = !!props.popupVisible;\n    } else {\n      popupVisible = !!props.defaultPopupVisible;\n    }\n\n    this.prevPopupVisible = popupVisible;\n\n    return {\n      popupVisible: popupVisible\n    };\n  },\n  componentWillMount: function componentWillMount() {\n    var _this = this;\n\n    ALL_HANDLERS.forEach(function (h) {\n      _this['fire' + h] = function (e) {\n        _this.fireEvents(h, e);\n      };\n    });\n  },\n  componentDidMount: function componentDidMount() {\n    this.componentDidUpdate({}, {\n      popupVisible: this.state.popupVisible\n    });\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(_ref) {\n    var popupVisible = _ref.popupVisible;\n\n    if (popupVisible !== undefined) {\n      this.setState({\n        popupVisible: popupVisible\n      });\n    }\n  },\n  componentDidUpdate: function componentDidUpdate(_, prevState) {\n    var props = this.props;\n    var state = this.state;\n    var triggerAfterPopupVisibleChange = function triggerAfterPopupVisibleChange() {\n      if (prevState.popupVisible !== state.popupVisible) {\n        props.afterPopupVisibleChange(state.popupVisible);\n      }\n    };\n    if (!IS_REACT_16) {\n      this.renderComponent(null, triggerAfterPopupVisibleChange);\n    }\n\n    this.prevPopupVisible = prevState.popupVisible;\n\n    // We must listen to `mousedown` or `touchstart`, edge case:\n    // https://github.com/ant-design/ant-design/issues/5804\n    // https://github.com/react-component/calendar/issues/250\n    // https://github.com/react-component/trigger/issues/50\n    if (state.popupVisible) {\n      var currentDocument = void 0;\n      if (!this.clickOutsideHandler && (this.isClickToHide() || this.isContextMenuToShow())) {\n        currentDocument = props.getDocument();\n        this.clickOutsideHandler = addEventListener(currentDocument, 'mousedown', this.onDocumentClick);\n      }\n      // always hide on mobile\n      if (!this.touchOutsideHandler) {\n        currentDocument = currentDocument || props.getDocument();\n        this.touchOutsideHandler = addEventListener(currentDocument, 'touchstart', this.onDocumentClick);\n      }\n      // close popup when trigger type contains 'onContextMenu' and document is scrolling.\n      if (!this.contextMenuOutsideHandler1 && this.isContextMenuToShow()) {\n        currentDocument = currentDocument || props.getDocument();\n        this.contextMenuOutsideHandler1 = addEventListener(currentDocument, 'scroll', this.onContextMenuClose);\n      }\n      // close popup when trigger type contains 'onContextMenu' and window is blur.\n      if (!this.contextMenuOutsideHandler2 && this.isContextMenuToShow()) {\n        this.contextMenuOutsideHandler2 = addEventListener(window, 'blur', this.onContextMenuClose);\n      }\n      return;\n    }\n\n    this.clearOutsideHandler();\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    this.clearDelayTimer();\n    this.clearOutsideHandler();\n  },\n  onMouseEnter: function onMouseEnter(e) {\n    this.fireEvents('onMouseEnter', e);\n    this.delaySetPopupVisible(true, this.props.mouseEnterDelay);\n  },\n  onMouseLeave: function onMouseLeave(e) {\n    this.fireEvents('onMouseLeave', e);\n    this.delaySetPopupVisible(false, this.props.mouseLeaveDelay);\n  },\n  onPopupMouseEnter: function onPopupMouseEnter() {\n    this.clearDelayTimer();\n  },\n  onPopupMouseLeave: function onPopupMouseLeave(e) {\n    // https://github.com/react-component/trigger/pull/13\n    // react bug?\n    if (e.relatedTarget && !e.relatedTarget.setTimeout && this._component && this._component.getPopupDomNode && contains(this._component.getPopupDomNode(), e.relatedTarget)) {\n      return;\n    }\n    this.delaySetPopupVisible(false, this.props.mouseLeaveDelay);\n  },\n  onFocus: function onFocus(e) {\n    this.fireEvents('onFocus', e);\n    // incase focusin and focusout\n    this.clearDelayTimer();\n    if (this.isFocusToShow()) {\n      this.focusTime = Date.now();\n      this.delaySetPopupVisible(true, this.props.focusDelay);\n    }\n  },\n  onMouseDown: function onMouseDown(e) {\n    this.fireEvents('onMouseDown', e);\n    this.preClickTime = Date.now();\n  },\n  onTouchStart: function onTouchStart(e) {\n    this.fireEvents('onTouchStart', e);\n    this.preTouchTime = Date.now();\n  },\n  onBlur: function onBlur(e) {\n    this.fireEvents('onBlur', e);\n    this.clearDelayTimer();\n    if (this.isBlurToHide()) {\n      this.delaySetPopupVisible(false, this.props.blurDelay);\n    }\n  },\n  onContextMenu: function onContextMenu(e) {\n    e.preventDefault();\n    this.fireEvents('onContextMenu', e);\n    this.setPopupVisible(true);\n  },\n  onContextMenuClose: function onContextMenuClose() {\n    if (this.isContextMenuToShow()) {\n      this.close();\n    }\n  },\n  onClick: function onClick(event) {\n    this.fireEvents('onClick', event);\n    // focus will trigger click\n    if (this.focusTime) {\n      var preTime = void 0;\n      if (this.preClickTime && this.preTouchTime) {\n        preTime = Math.min(this.preClickTime, this.preTouchTime);\n      } else if (this.preClickTime) {\n        preTime = this.preClickTime;\n      } else if (this.preTouchTime) {\n        preTime = this.preTouchTime;\n      }\n      if (Math.abs(preTime - this.focusTime) < 20) {\n        return;\n      }\n      this.focusTime = 0;\n    }\n    this.preClickTime = 0;\n    this.preTouchTime = 0;\n    event.preventDefault();\n    var nextVisible = !this.state.popupVisible;\n    if (this.isClickToHide() && !nextVisible || nextVisible && this.isClickToShow()) {\n      this.setPopupVisible(!this.state.popupVisible);\n    }\n  },\n  onDocumentClick: function onDocumentClick(event) {\n    if (this.props.mask && !this.props.maskClosable) {\n      return;\n    }\n    var target = event.target;\n    var root = findDOMNode(this);\n    var popupNode = this.getPopupDomNode();\n    if (!contains(root, target) && !contains(popupNode, target)) {\n      this.close();\n    }\n  },\n  handlePortalUpdate: function handlePortalUpdate() {\n    if (this.prevPopupVisible !== this.state.popupVisible) {\n      this.props.afterPopupVisibleChange(this.state.popupVisible);\n    }\n  },\n  getPopupDomNode: function getPopupDomNode() {\n    // for test\n    if (this._component && this._component.getPopupDomNode) {\n      return this._component.getPopupDomNode();\n    }\n    return null;\n  },\n  getRootDomNode: function getRootDomNode() {\n    return findDOMNode(this);\n  },\n  getPopupClassNameFromAlign: function getPopupClassNameFromAlign(align) {\n    var className = [];\n    var props = this.props;\n    var popupPlacement = props.popupPlacement,\n        builtinPlacements = props.builtinPlacements,\n        prefixCls = props.prefixCls;\n\n    if (popupPlacement && builtinPlacements) {\n      className.push(_getPopupClassNameFromAlign(builtinPlacements, prefixCls, align));\n    }\n    if (props.getPopupClassNameFromAlign) {\n      className.push(props.getPopupClassNameFromAlign(align));\n    }\n    return className.join(' ');\n  },\n  getPopupAlign: function getPopupAlign() {\n    var props = this.props;\n    var popupPlacement = props.popupPlacement,\n        popupAlign = props.popupAlign,\n        builtinPlacements = props.builtinPlacements;\n\n    if (popupPlacement && builtinPlacements) {\n      return getAlignFromPlacement(builtinPlacements, popupPlacement, popupAlign);\n    }\n    return popupAlign;\n  },\n  getComponent: function getComponent() {\n    var props = this.props,\n        state = this.state;\n\n    var mouseProps = {};\n    if (this.isMouseEnterToShow()) {\n      mouseProps.onMouseEnter = this.onPopupMouseEnter;\n    }\n    if (this.isMouseLeaveToHide()) {\n      mouseProps.onMouseLeave = this.onPopupMouseLeave;\n    }\n    return React.createElement(\n      Popup,\n      _extends({\n        prefixCls: props.prefixCls,\n        destroyPopupOnHide: props.destroyPopupOnHide,\n        visible: state.popupVisible,\n        className: props.popupClassName,\n        action: props.action,\n        align: this.getPopupAlign(),\n        onAlign: props.onPopupAlign,\n        animation: props.popupAnimation,\n        getClassNameFromAlign: this.getPopupClassNameFromAlign\n      }, mouseProps, {\n        getRootDomNode: this.getRootDomNode,\n        style: props.popupStyle,\n        mask: props.mask,\n        zIndex: props.zIndex,\n        transitionName: props.popupTransitionName,\n        maskAnimation: props.maskAnimation,\n        maskTransitionName: props.maskTransitionName,\n        ref: this.savePopup\n      }),\n      typeof props.popup === 'function' ? props.popup() : props.popup\n    );\n  },\n  getContainer: function getContainer() {\n    var props = this.props;\n\n    var popupContainer = document.createElement('div');\n    // Make sure default popup container will never cause scrollbar appearing\n    // https://github.com/react-component/trigger/issues/41\n    popupContainer.style.position = 'absolute';\n    popupContainer.style.top = '0';\n    popupContainer.style.left = '0';\n    popupContainer.style.width = '100%';\n    var mountNode = props.getPopupContainer ? props.getPopupContainer(findDOMNode(this)) : props.getDocument().body;\n    mountNode.appendChild(popupContainer);\n    return popupContainer;\n  },\n  setPopupVisible: function setPopupVisible(popupVisible) {\n    this.clearDelayTimer();\n    if (this.state.popupVisible !== popupVisible) {\n      if (!('popupVisible' in this.props)) {\n        this.setState({\n          popupVisible: popupVisible\n        });\n      }\n      this.props.onPopupVisibleChange(popupVisible);\n    }\n  },\n  delaySetPopupVisible: function delaySetPopupVisible(visible, delayS) {\n    var _this2 = this;\n\n    var delay = delayS * 1000;\n    this.clearDelayTimer();\n    if (delay) {\n      this.delayTimer = setTimeout(function () {\n        _this2.setPopupVisible(visible);\n        _this2.clearDelayTimer();\n      }, delay);\n    } else {\n      this.setPopupVisible(visible);\n    }\n  },\n  clearDelayTimer: function clearDelayTimer() {\n    if (this.delayTimer) {\n      clearTimeout(this.delayTimer);\n      this.delayTimer = null;\n    }\n  },\n  clearOutsideHandler: function clearOutsideHandler() {\n    if (this.clickOutsideHandler) {\n      this.clickOutsideHandler.remove();\n      this.clickOutsideHandler = null;\n    }\n\n    if (this.contextMenuOutsideHandler1) {\n      this.contextMenuOutsideHandler1.remove();\n      this.contextMenuOutsideHandler1 = null;\n    }\n\n    if (this.contextMenuOutsideHandler2) {\n      this.contextMenuOutsideHandler2.remove();\n      this.contextMenuOutsideHandler2 = null;\n    }\n\n    if (this.touchOutsideHandler) {\n      this.touchOutsideHandler.remove();\n      this.touchOutsideHandler = null;\n    }\n  },\n  createTwoChains: function createTwoChains(event) {\n    var childPros = this.props.children.props;\n    var props = this.props;\n    if (childPros[event] && props[event]) {\n      return this['fire' + event];\n    }\n    return childPros[event] || props[event];\n  },\n  isClickToShow: function isClickToShow() {\n    var _props = this.props,\n        action = _props.action,\n        showAction = _props.showAction;\n\n    return action.indexOf('click') !== -1 || showAction.indexOf('click') !== -1;\n  },\n  isContextMenuToShow: function isContextMenuToShow() {\n    var _props2 = this.props,\n        action = _props2.action,\n        showAction = _props2.showAction;\n\n    return action.indexOf('contextMenu') !== -1 || showAction.indexOf('contextMenu') !== -1;\n  },\n  isClickToHide: function isClickToHide() {\n    var _props3 = this.props,\n        action = _props3.action,\n        hideAction = _props3.hideAction;\n\n    return action.indexOf('click') !== -1 || hideAction.indexOf('click') !== -1;\n  },\n  isMouseEnterToShow: function isMouseEnterToShow() {\n    var _props4 = this.props,\n        action = _props4.action,\n        showAction = _props4.showAction;\n\n    return action.indexOf('hover') !== -1 || showAction.indexOf('mouseEnter') !== -1;\n  },\n  isMouseLeaveToHide: function isMouseLeaveToHide() {\n    var _props5 = this.props,\n        action = _props5.action,\n        hideAction = _props5.hideAction;\n\n    return action.indexOf('hover') !== -1 || hideAction.indexOf('mouseLeave') !== -1;\n  },\n  isFocusToShow: function isFocusToShow() {\n    var _props6 = this.props,\n        action = _props6.action,\n        showAction = _props6.showAction;\n\n    return action.indexOf('focus') !== -1 || showAction.indexOf('focus') !== -1;\n  },\n  isBlurToHide: function isBlurToHide() {\n    var _props7 = this.props,\n        action = _props7.action,\n        hideAction = _props7.hideAction;\n\n    return action.indexOf('focus') !== -1 || hideAction.indexOf('blur') !== -1;\n  },\n  forcePopupAlign: function forcePopupAlign() {\n    if (this.state.popupVisible && this._component && this._component.alignInstance) {\n      this._component.alignInstance.forceAlign();\n    }\n  },\n  fireEvents: function fireEvents(type, e) {\n    var childCallback = this.props.children.props[type];\n    if (childCallback) {\n      childCallback(e);\n    }\n    var callback = this.props[type];\n    if (callback) {\n      callback(e);\n    }\n  },\n  close: function close() {\n    this.setPopupVisible(false);\n  },\n  savePopup: function savePopup(node) {\n    if (IS_REACT_16) {\n      this._component = node;\n    }\n  },\n  render: function render() {\n    var popupVisible = this.state.popupVisible;\n\n    var props = this.props;\n    var children = props.children;\n    var child = React.Children.only(children);\n    var newChildProps = { key: 'trigger' };\n\n    if (this.isContextMenuToShow()) {\n      newChildProps.onContextMenu = this.onContextMenu;\n    } else {\n      newChildProps.onContextMenu = this.createTwoChains('onContextMenu');\n    }\n\n    if (this.isClickToHide() || this.isClickToShow()) {\n      newChildProps.onClick = this.onClick;\n      newChildProps.onMouseDown = this.onMouseDown;\n      newChildProps.onTouchStart = this.onTouchStart;\n    } else {\n      newChildProps.onClick = this.createTwoChains('onClick');\n      newChildProps.onMouseDown = this.createTwoChains('onMouseDown');\n      newChildProps.onTouchStart = this.createTwoChains('onTouchStart');\n    }\n    if (this.isMouseEnterToShow()) {\n      newChildProps.onMouseEnter = this.onMouseEnter;\n    } else {\n      newChildProps.onMouseEnter = this.createTwoChains('onMouseEnter');\n    }\n    if (this.isMouseLeaveToHide()) {\n      newChildProps.onMouseLeave = this.onMouseLeave;\n    } else {\n      newChildProps.onMouseLeave = this.createTwoChains('onMouseLeave');\n    }\n    if (this.isFocusToShow() || this.isBlurToHide()) {\n      newChildProps.onFocus = this.onFocus;\n      newChildProps.onBlur = this.onBlur;\n    } else {\n      newChildProps.onFocus = this.createTwoChains('onFocus');\n      newChildProps.onBlur = this.createTwoChains('onBlur');\n    }\n\n    var trigger = React.cloneElement(child, newChildProps);\n\n    if (!IS_REACT_16) {\n      return trigger;\n    }\n\n    var portal = void 0;\n    // prevent unmounting after it's rendered\n    if (popupVisible || this._component || props.forceRender) {\n      portal = React.createElement(\n        Portal,\n        {\n          key: 'portal',\n          getContainer: this.getContainer,\n          didUpdate: this.handlePortalUpdate\n        },\n        this.getComponent()\n      );\n    }\n\n    return [trigger, portal];\n  }\n});\n\nexport default Trigger;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rc-trigger/es/index.js\n// module id = 150\n// module chunks = 0","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar React = require('react');\nvar factory = require('./factory');\n\nif (typeof React === 'undefined') {\n  throw Error(\n    'create-react-class could not find the React object. If you are using script tags, ' +\n      'make sure that React is being loaded before create-react-class.'\n  );\n}\n\n// Hack to grab NoopUpdateQueue from isomorphic React\nvar ReactNoopUpdateQueue = new React.Component().updater;\n\nmodule.exports = factory(\n  React.Component,\n  React.isValidElement,\n  ReactNoopUpdateQueue\n);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/create-react-class/index.js\n// module id = 151\n// module chunks = 0","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar _invariant = require('fbjs/lib/invariant');\n\nif (process.env.NODE_ENV !== 'production') {\n  var warning = require('fbjs/lib/warning');\n}\n\nvar MIXINS_KEY = 'mixins';\n\n// Helper function to allow the creation of anonymous functions which do not\n// have .name set to the name of the variable being assigned to.\nfunction identity(fn) {\n  return fn;\n}\n\nvar ReactPropTypeLocationNames;\nif (process.env.NODE_ENV !== 'production') {\n  ReactPropTypeLocationNames = {\n    prop: 'prop',\n    context: 'context',\n    childContext: 'child context'\n  };\n} else {\n  ReactPropTypeLocationNames = {};\n}\n\nfunction factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {\n  /**\n   * Policies that describe methods in `ReactClassInterface`.\n   */\n\n  var injectedMixins = [];\n\n  /**\n   * Composite components are higher-level components that compose other composite\n   * or host components.\n   *\n   * To create a new type of `ReactClass`, pass a specification of\n   * your new class to `React.createClass`. The only requirement of your class\n   * specification is that you implement a `render` method.\n   *\n   *   var MyComponent = React.createClass({\n   *     render: function() {\n   *       return <div>Hello World</div>;\n   *     }\n   *   });\n   *\n   * The class specification supports a specific protocol of methods that have\n   * special meaning (e.g. `render`). See `ReactClassInterface` for\n   * more the comprehensive protocol. Any other properties and methods in the\n   * class specification will be available on the prototype.\n   *\n   * @interface ReactClassInterface\n   * @internal\n   */\n  var ReactClassInterface = {\n    /**\n     * An array of Mixin objects to include when defining your component.\n     *\n     * @type {array}\n     * @optional\n     */\n    mixins: 'DEFINE_MANY',\n\n    /**\n     * An object containing properties and methods that should be defined on\n     * the component's constructor instead of its prototype (static methods).\n     *\n     * @type {object}\n     * @optional\n     */\n    statics: 'DEFINE_MANY',\n\n    /**\n     * Definition of prop types for this component.\n     *\n     * @type {object}\n     * @optional\n     */\n    propTypes: 'DEFINE_MANY',\n\n    /**\n     * Definition of context types for this component.\n     *\n     * @type {object}\n     * @optional\n     */\n    contextTypes: 'DEFINE_MANY',\n\n    /**\n     * Definition of context types this component sets for its children.\n     *\n     * @type {object}\n     * @optional\n     */\n    childContextTypes: 'DEFINE_MANY',\n\n    // ==== Definition methods ====\n\n    /**\n     * Invoked when the component is mounted. Values in the mapping will be set on\n     * `this.props` if that prop is not specified (i.e. using an `in` check).\n     *\n     * This method is invoked before `getInitialState` and therefore cannot rely\n     * on `this.state` or use `this.setState`.\n     *\n     * @return {object}\n     * @optional\n     */\n    getDefaultProps: 'DEFINE_MANY_MERGED',\n\n    /**\n     * Invoked once before the component is mounted. The return value will be used\n     * as the initial value of `this.state`.\n     *\n     *   getInitialState: function() {\n     *     return {\n     *       isOn: false,\n     *       fooBaz: new BazFoo()\n     *     }\n     *   }\n     *\n     * @return {object}\n     * @optional\n     */\n    getInitialState: 'DEFINE_MANY_MERGED',\n\n    /**\n     * @return {object}\n     * @optional\n     */\n    getChildContext: 'DEFINE_MANY_MERGED',\n\n    /**\n     * Uses props from `this.props` and state from `this.state` to render the\n     * structure of the component.\n     *\n     * No guarantees are made about when or how often this method is invoked, so\n     * it must not have side effects.\n     *\n     *   render: function() {\n     *     var name = this.props.name;\n     *     return <div>Hello, {name}!</div>;\n     *   }\n     *\n     * @return {ReactComponent}\n     * @required\n     */\n    render: 'DEFINE_ONCE',\n\n    // ==== Delegate methods ====\n\n    /**\n     * Invoked when the component is initially created and about to be mounted.\n     * This may have side effects, but any external subscriptions or data created\n     * by this method must be cleaned up in `componentWillUnmount`.\n     *\n     * @optional\n     */\n    componentWillMount: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component has been mounted and has a DOM representation.\n     * However, there is no guarantee that the DOM node is in the document.\n     *\n     * Use this as an opportunity to operate on the DOM when the component has\n     * been mounted (initialized and rendered) for the first time.\n     *\n     * @param {DOMElement} rootNode DOM element representing the component.\n     * @optional\n     */\n    componentDidMount: 'DEFINE_MANY',\n\n    /**\n     * Invoked before the component receives new props.\n     *\n     * Use this as an opportunity to react to a prop transition by updating the\n     * state using `this.setState`. Current props are accessed via `this.props`.\n     *\n     *   componentWillReceiveProps: function(nextProps, nextContext) {\n     *     this.setState({\n     *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n     *     });\n     *   }\n     *\n     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n     * transition may cause a state change, but the opposite is not true. If you\n     * need it, you are probably looking for `componentWillUpdate`.\n     *\n     * @param {object} nextProps\n     * @optional\n     */\n    componentWillReceiveProps: 'DEFINE_MANY',\n\n    /**\n     * Invoked while deciding if the component should be updated as a result of\n     * receiving new props, state and/or context.\n     *\n     * Use this as an opportunity to `return false` when you're certain that the\n     * transition to the new props/state/context will not require a component\n     * update.\n     *\n     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n     *     return !equal(nextProps, this.props) ||\n     *       !equal(nextState, this.state) ||\n     *       !equal(nextContext, this.context);\n     *   }\n     *\n     * @param {object} nextProps\n     * @param {?object} nextState\n     * @param {?object} nextContext\n     * @return {boolean} True if the component should update.\n     * @optional\n     */\n    shouldComponentUpdate: 'DEFINE_ONCE',\n\n    /**\n     * Invoked when the component is about to update due to a transition from\n     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n     * and `nextContext`.\n     *\n     * Use this as an opportunity to perform preparation before an update occurs.\n     *\n     * NOTE: You **cannot** use `this.setState()` in this method.\n     *\n     * @param {object} nextProps\n     * @param {?object} nextState\n     * @param {?object} nextContext\n     * @param {ReactReconcileTransaction} transaction\n     * @optional\n     */\n    componentWillUpdate: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component's DOM representation has been updated.\n     *\n     * Use this as an opportunity to operate on the DOM when the component has\n     * been updated.\n     *\n     * @param {object} prevProps\n     * @param {?object} prevState\n     * @param {?object} prevContext\n     * @param {DOMElement} rootNode DOM element representing the component.\n     * @optional\n     */\n    componentDidUpdate: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component is about to be removed from its parent and have\n     * its DOM representation destroyed.\n     *\n     * Use this as an opportunity to deallocate any external resources.\n     *\n     * NOTE: There is no `componentDidUnmount` since your component will have been\n     * destroyed by that point.\n     *\n     * @optional\n     */\n    componentWillUnmount: 'DEFINE_MANY',\n\n    // ==== Advanced methods ====\n\n    /**\n     * Updates the component's currently mounted DOM representation.\n     *\n     * By default, this implements React's rendering and reconciliation algorithm.\n     * Sophisticated clients may wish to override this.\n     *\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     * @overridable\n     */\n    updateComponent: 'OVERRIDE_BASE'\n  };\n\n  /**\n   * Mapping from class specification keys to special processing functions.\n   *\n   * Although these are declared like instance properties in the specification\n   * when defining classes using `React.createClass`, they are actually static\n   * and are accessible on the constructor instead of the prototype. Despite\n   * being static, they must be defined outside of the \"statics\" key under\n   * which all other static methods are defined.\n   */\n  var RESERVED_SPEC_KEYS = {\n    displayName: function(Constructor, displayName) {\n      Constructor.displayName = displayName;\n    },\n    mixins: function(Constructor, mixins) {\n      if (mixins) {\n        for (var i = 0; i < mixins.length; i++) {\n          mixSpecIntoComponent(Constructor, mixins[i]);\n        }\n      }\n    },\n    childContextTypes: function(Constructor, childContextTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, childContextTypes, 'childContext');\n      }\n      Constructor.childContextTypes = _assign(\n        {},\n        Constructor.childContextTypes,\n        childContextTypes\n      );\n    },\n    contextTypes: function(Constructor, contextTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, contextTypes, 'context');\n      }\n      Constructor.contextTypes = _assign(\n        {},\n        Constructor.contextTypes,\n        contextTypes\n      );\n    },\n    /**\n     * Special case getDefaultProps which should move into statics but requires\n     * automatic merging.\n     */\n    getDefaultProps: function(Constructor, getDefaultProps) {\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps = createMergedResultFunction(\n          Constructor.getDefaultProps,\n          getDefaultProps\n        );\n      } else {\n        Constructor.getDefaultProps = getDefaultProps;\n      }\n    },\n    propTypes: function(Constructor, propTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, propTypes, 'prop');\n      }\n      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);\n    },\n    statics: function(Constructor, statics) {\n      mixStaticSpecIntoComponent(Constructor, statics);\n    },\n    autobind: function() {}\n  };\n\n  function validateTypeDef(Constructor, typeDef, location) {\n    for (var propName in typeDef) {\n      if (typeDef.hasOwnProperty(propName)) {\n        // use a warning instead of an _invariant so components\n        // don't show up in prod but only in __DEV__\n        if (process.env.NODE_ENV !== 'production') {\n          warning(\n            typeof typeDef[propName] === 'function',\n            '%s: %s type `%s` is invalid; it must be a function, usually from ' +\n              'React.PropTypes.',\n            Constructor.displayName || 'ReactClass',\n            ReactPropTypeLocationNames[location],\n            propName\n          );\n        }\n      }\n    }\n  }\n\n  function validateMethodOverride(isAlreadyDefined, name) {\n    var specPolicy = ReactClassInterface.hasOwnProperty(name)\n      ? ReactClassInterface[name]\n      : null;\n\n    // Disallow overriding of base class methods unless explicitly allowed.\n    if (ReactClassMixin.hasOwnProperty(name)) {\n      _invariant(\n        specPolicy === 'OVERRIDE_BASE',\n        'ReactClassInterface: You are attempting to override ' +\n          '`%s` from your class specification. Ensure that your method names ' +\n          'do not overlap with React methods.',\n        name\n      );\n    }\n\n    // Disallow defining methods more than once unless explicitly allowed.\n    if (isAlreadyDefined) {\n      _invariant(\n        specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',\n        'ReactClassInterface: You are attempting to define ' +\n          '`%s` on your component more than once. This conflict may be due ' +\n          'to a mixin.',\n        name\n      );\n    }\n  }\n\n  /**\n   * Mixin helper which handles policy validation and reserved\n   * specification keys when building React classes.\n   */\n  function mixSpecIntoComponent(Constructor, spec) {\n    if (!spec) {\n      if (process.env.NODE_ENV !== 'production') {\n        var typeofSpec = typeof spec;\n        var isMixinValid = typeofSpec === 'object' && spec !== null;\n\n        if (process.env.NODE_ENV !== 'production') {\n          warning(\n            isMixinValid,\n            \"%s: You're attempting to include a mixin that is either null \" +\n              'or not an object. Check the mixins included by the component, ' +\n              'as well as any mixins they include themselves. ' +\n              'Expected object but got %s.',\n            Constructor.displayName || 'ReactClass',\n            spec === null ? null : typeofSpec\n          );\n        }\n      }\n\n      return;\n    }\n\n    _invariant(\n      typeof spec !== 'function',\n      \"ReactClass: You're attempting to \" +\n        'use a component class or function as a mixin. Instead, just use a ' +\n        'regular object.'\n    );\n    _invariant(\n      !isValidElement(spec),\n      \"ReactClass: You're attempting to \" +\n        'use a component as a mixin. Instead, just use a regular object.'\n    );\n\n    var proto = Constructor.prototype;\n    var autoBindPairs = proto.__reactAutoBindPairs;\n\n    // By handling mixins before any other properties, we ensure the same\n    // chaining order is applied to methods with DEFINE_MANY policy, whether\n    // mixins are listed before or after these methods in the spec.\n    if (spec.hasOwnProperty(MIXINS_KEY)) {\n      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n    }\n\n    for (var name in spec) {\n      if (!spec.hasOwnProperty(name)) {\n        continue;\n      }\n\n      if (name === MIXINS_KEY) {\n        // We have already handled mixins in a special case above.\n        continue;\n      }\n\n      var property = spec[name];\n      var isAlreadyDefined = proto.hasOwnProperty(name);\n      validateMethodOverride(isAlreadyDefined, name);\n\n      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n        RESERVED_SPEC_KEYS[name](Constructor, property);\n      } else {\n        // Setup methods on prototype:\n        // The following member methods should not be automatically bound:\n        // 1. Expected ReactClass methods (in the \"interface\").\n        // 2. Overridden methods (that were mixed in).\n        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);\n        var isFunction = typeof property === 'function';\n        var shouldAutoBind =\n          isFunction &&\n          !isReactClassMethod &&\n          !isAlreadyDefined &&\n          spec.autobind !== false;\n\n        if (shouldAutoBind) {\n          autoBindPairs.push(name, property);\n          proto[name] = property;\n        } else {\n          if (isAlreadyDefined) {\n            var specPolicy = ReactClassInterface[name];\n\n            // These cases should already be caught by validateMethodOverride.\n            _invariant(\n              isReactClassMethod &&\n                (specPolicy === 'DEFINE_MANY_MERGED' ||\n                  specPolicy === 'DEFINE_MANY'),\n              'ReactClass: Unexpected spec policy %s for key %s ' +\n                'when mixing in component specs.',\n              specPolicy,\n              name\n            );\n\n            // For methods which are defined more than once, call the existing\n            // methods before calling the new property, merging if appropriate.\n            if (specPolicy === 'DEFINE_MANY_MERGED') {\n              proto[name] = createMergedResultFunction(proto[name], property);\n            } else if (specPolicy === 'DEFINE_MANY') {\n              proto[name] = createChainedFunction(proto[name], property);\n            }\n          } else {\n            proto[name] = property;\n            if (process.env.NODE_ENV !== 'production') {\n              // Add verbose displayName to the function, which helps when looking\n              // at profiling tools.\n              if (typeof property === 'function' && spec.displayName) {\n                proto[name].displayName = spec.displayName + '_' + name;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  function mixStaticSpecIntoComponent(Constructor, statics) {\n    if (!statics) {\n      return;\n    }\n    for (var name in statics) {\n      var property = statics[name];\n      if (!statics.hasOwnProperty(name)) {\n        continue;\n      }\n\n      var isReserved = name in RESERVED_SPEC_KEYS;\n      _invariant(\n        !isReserved,\n        'ReactClass: You are attempting to define a reserved ' +\n          'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' +\n          'as an instance property instead; it will still be accessible on the ' +\n          'constructor.',\n        name\n      );\n\n      var isInherited = name in Constructor;\n      _invariant(\n        !isInherited,\n        'ReactClass: You are attempting to define ' +\n          '`%s` on your component more than once. This conflict may be ' +\n          'due to a mixin.',\n        name\n      );\n      Constructor[name] = property;\n    }\n  }\n\n  /**\n   * Merge two objects, but throw if both contain the same key.\n   *\n   * @param {object} one The first object, which is mutated.\n   * @param {object} two The second object\n   * @return {object} one after it has been mutated to contain everything in two.\n   */\n  function mergeIntoWithNoDuplicateKeys(one, two) {\n    _invariant(\n      one && two && typeof one === 'object' && typeof two === 'object',\n      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'\n    );\n\n    for (var key in two) {\n      if (two.hasOwnProperty(key)) {\n        _invariant(\n          one[key] === undefined,\n          'mergeIntoWithNoDuplicateKeys(): ' +\n            'Tried to merge two objects with the same key: `%s`. This conflict ' +\n            'may be due to a mixin; in particular, this may be caused by two ' +\n            'getInitialState() or getDefaultProps() methods returning objects ' +\n            'with clashing keys.',\n          key\n        );\n        one[key] = two[key];\n      }\n    }\n    return one;\n  }\n\n  /**\n   * Creates a function that invokes two functions and merges their return values.\n   *\n   * @param {function} one Function to invoke first.\n   * @param {function} two Function to invoke second.\n   * @return {function} Function that invokes the two argument functions.\n   * @private\n   */\n  function createMergedResultFunction(one, two) {\n    return function mergedResult() {\n      var a = one.apply(this, arguments);\n      var b = two.apply(this, arguments);\n      if (a == null) {\n        return b;\n      } else if (b == null) {\n        return a;\n      }\n      var c = {};\n      mergeIntoWithNoDuplicateKeys(c, a);\n      mergeIntoWithNoDuplicateKeys(c, b);\n      return c;\n    };\n  }\n\n  /**\n   * Creates a function that invokes two functions and ignores their return vales.\n   *\n   * @param {function} one Function to invoke first.\n   * @param {function} two Function to invoke second.\n   * @return {function} Function that invokes the two argument functions.\n   * @private\n   */\n  function createChainedFunction(one, two) {\n    return function chainedFunction() {\n      one.apply(this, arguments);\n      two.apply(this, arguments);\n    };\n  }\n\n  /**\n   * Binds a method to the component.\n   *\n   * @param {object} component Component whose method is going to be bound.\n   * @param {function} method Method to be bound.\n   * @return {function} The bound method.\n   */\n  function bindAutoBindMethod(component, method) {\n    var boundMethod = method.bind(component);\n    if (process.env.NODE_ENV !== 'production') {\n      boundMethod.__reactBoundContext = component;\n      boundMethod.__reactBoundMethod = method;\n      boundMethod.__reactBoundArguments = null;\n      var componentName = component.constructor.displayName;\n      var _bind = boundMethod.bind;\n      boundMethod.bind = function(newThis) {\n        for (\n          var _len = arguments.length,\n            args = Array(_len > 1 ? _len - 1 : 0),\n            _key = 1;\n          _key < _len;\n          _key++\n        ) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        // User is trying to bind() an autobound method; we effectively will\n        // ignore the value of \"this\" that the user is trying to use, so\n        // let's warn.\n        if (newThis !== component && newThis !== null) {\n          if (process.env.NODE_ENV !== 'production') {\n            warning(\n              false,\n              'bind(): React component methods may only be bound to the ' +\n                'component instance. See %s',\n              componentName\n            );\n          }\n        } else if (!args.length) {\n          if (process.env.NODE_ENV !== 'production') {\n            warning(\n              false,\n              'bind(): You are binding a component method to the component. ' +\n                'React does this for you automatically in a high-performance ' +\n                'way, so you can safely remove this call. See %s',\n              componentName\n            );\n          }\n          return boundMethod;\n        }\n        var reboundMethod = _bind.apply(boundMethod, arguments);\n        reboundMethod.__reactBoundContext = component;\n        reboundMethod.__reactBoundMethod = method;\n        reboundMethod.__reactBoundArguments = args;\n        return reboundMethod;\n      };\n    }\n    return boundMethod;\n  }\n\n  /**\n   * Binds all auto-bound methods in a component.\n   *\n   * @param {object} component Component whose method is going to be bound.\n   */\n  function bindAutoBindMethods(component) {\n    var pairs = component.__reactAutoBindPairs;\n    for (var i = 0; i < pairs.length; i += 2) {\n      var autoBindKey = pairs[i];\n      var method = pairs[i + 1];\n      component[autoBindKey] = bindAutoBindMethod(component, method);\n    }\n  }\n\n  var IsMountedPreMixin = {\n    componentDidMount: function() {\n      this.__isMounted = true;\n    }\n  };\n\n  var IsMountedPostMixin = {\n    componentWillUnmount: function() {\n      this.__isMounted = false;\n    }\n  };\n\n  /**\n   * Add more to the ReactClass base class. These are all legacy features and\n   * therefore not already part of the modern ReactComponent.\n   */\n  var ReactClassMixin = {\n    /**\n     * TODO: This will be deprecated because state should always keep a consistent\n     * type signature and the only use case for this, is to avoid that.\n     */\n    replaceState: function(newState, callback) {\n      this.updater.enqueueReplaceState(this, newState, callback);\n    },\n\n    /**\n     * Checks whether or not this composite component is mounted.\n     * @return {boolean} True if mounted, false otherwise.\n     * @protected\n     * @final\n     */\n    isMounted: function() {\n      if (process.env.NODE_ENV !== 'production') {\n        warning(\n          this.__didWarnIsMounted,\n          '%s: isMounted is deprecated. Instead, make sure to clean up ' +\n            'subscriptions and pending requests in componentWillUnmount to ' +\n            'prevent memory leaks.',\n          (this.constructor && this.constructor.displayName) ||\n            this.name ||\n            'Component'\n        );\n        this.__didWarnIsMounted = true;\n      }\n      return !!this.__isMounted;\n    }\n  };\n\n  var ReactClassComponent = function() {};\n  _assign(\n    ReactClassComponent.prototype,\n    ReactComponent.prototype,\n    ReactClassMixin\n  );\n\n  /**\n   * Creates a composite component class given a class specification.\n   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n  function createClass(spec) {\n    // To keep our warnings more understandable, we'll use a little hack here to\n    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't\n    // unnecessarily identify a class without displayName as 'Constructor'.\n    var Constructor = identity(function(props, context, updater) {\n      // This constructor gets overridden by mocks. The argument is used\n      // by mocks to assert on what gets mounted.\n\n      if (process.env.NODE_ENV !== 'production') {\n        warning(\n          this instanceof Constructor,\n          'Something is calling a React component directly. Use a factory or ' +\n            'JSX instead. See: https://fb.me/react-legacyfactory'\n        );\n      }\n\n      // Wire up auto-binding\n      if (this.__reactAutoBindPairs.length) {\n        bindAutoBindMethods(this);\n      }\n\n      this.props = props;\n      this.context = context;\n      this.refs = emptyObject;\n      this.updater = updater || ReactNoopUpdateQueue;\n\n      this.state = null;\n\n      // ReactClasses doesn't have constructors. Instead, they use the\n      // getInitialState and componentWillMount methods for initialization.\n\n      var initialState = this.getInitialState ? this.getInitialState() : null;\n      if (process.env.NODE_ENV !== 'production') {\n        // We allow auto-mocks to proceed as if they're returning null.\n        if (\n          initialState === undefined &&\n          this.getInitialState._isMockFunction\n        ) {\n          // This is probably bad practice. Consider warning here and\n          // deprecating this convenience.\n          initialState = null;\n        }\n      }\n      _invariant(\n        typeof initialState === 'object' && !Array.isArray(initialState),\n        '%s.getInitialState(): must return an object or null',\n        Constructor.displayName || 'ReactCompositeComponent'\n      );\n\n      this.state = initialState;\n    });\n    Constructor.prototype = new ReactClassComponent();\n    Constructor.prototype.constructor = Constructor;\n    Constructor.prototype.__reactAutoBindPairs = [];\n\n    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\n\n    mixSpecIntoComponent(Constructor, IsMountedPreMixin);\n    mixSpecIntoComponent(Constructor, spec);\n    mixSpecIntoComponent(Constructor, IsMountedPostMixin);\n\n    // Initialize the defaultProps property after all mixins have been merged.\n    if (Constructor.getDefaultProps) {\n      Constructor.defaultProps = Constructor.getDefaultProps();\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // This is a tag to indicate that the use of these method names is ok,\n      // since it's used with createClass. If it's not, then it's likely a\n      // mistake so we'll warn you to use the static property, property\n      // initializer or constructor respectively.\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps.isReactClassApproved = {};\n      }\n      if (Constructor.prototype.getInitialState) {\n        Constructor.prototype.getInitialState.isReactClassApproved = {};\n      }\n    }\n\n    _invariant(\n      Constructor.prototype.render,\n      'createClass(...): Class specification must implement a `render` method.'\n    );\n\n    if (process.env.NODE_ENV !== 'production') {\n      warning(\n        !Constructor.prototype.componentShouldUpdate,\n        '%s has a method called ' +\n          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n          'The name is phrased as a question because the function is ' +\n          'expected to return a value.',\n        spec.displayName || 'A component'\n      );\n      warning(\n        !Constructor.prototype.componentWillRecieveProps,\n        '%s has a method called ' +\n          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',\n        spec.displayName || 'A component'\n      );\n    }\n\n    // Reduce time spent doing lookups by setting these on the prototype.\n    for (var methodName in ReactClassInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    }\n\n    return Constructor;\n  }\n\n  return createClass;\n}\n\nmodule.exports = factory;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/create-react-class/factory.js\n// module id = 152\n// module chunks = 0","export default function contains(root, n) {\n  var node = n;\n  while (node) {\n    if (node === root) {\n      return true;\n    }\n    node = node.parentNode;\n  }\n\n  return false;\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rc-util/es/Dom/contains.js\n// module id = 153\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = addEventListener;\n\nvar _EventObject = require('./EventObject');\n\nvar _EventObject2 = _interopRequireDefault(_EventObject);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction addEventListener(target, eventType, callback) {\n  function wrapCallback(e) {\n    var ne = new _EventObject2[\"default\"](e);\n    callback.call(target, ne);\n  }\n\n  if (target.addEventListener) {\n    target.addEventListener(eventType, wrapCallback, false);\n    return {\n      remove: function remove() {\n        target.removeEventListener(eventType, wrapCallback, false);\n      }\n    };\n  } else if (target.attachEvent) {\n    target.attachEvent('on' + eventType, wrapCallback);\n    return {\n      remove: function remove() {\n        target.detachEvent('on' + eventType, wrapCallback);\n      }\n    };\n  }\n}\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/add-dom-event-listener/lib/index.js\n// module id = 154\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _EventBaseObject = require('./EventBaseObject');\n\nvar _EventBaseObject2 = _interopRequireDefault(_EventBaseObject);\n\nvar _objectAssign = require('object-assign');\n\nvar _objectAssign2 = _interopRequireDefault(_objectAssign);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * @ignore\n * event object for dom\n * @author yiminghe@gmail.com\n */\n\nvar TRUE = true;\nvar FALSE = false;\nvar commonProps = ['altKey', 'bubbles', 'cancelable', 'ctrlKey', 'currentTarget', 'eventPhase', 'metaKey', 'shiftKey', 'target', 'timeStamp', 'view', 'type'];\n\nfunction isNullOrUndefined(w) {\n  return w === null || w === undefined;\n}\n\nvar eventNormalizers = [{\n  reg: /^key/,\n  props: ['char', 'charCode', 'key', 'keyCode', 'which'],\n  fix: function fix(event, nativeEvent) {\n    if (isNullOrUndefined(event.which)) {\n      event.which = !isNullOrUndefined(nativeEvent.charCode) ? nativeEvent.charCode : nativeEvent.keyCode;\n    }\n\n    // add metaKey to non-Mac browsers (use ctrl for PC 's and Meta for Macs)\n    if (event.metaKey === undefined) {\n      event.metaKey = event.ctrlKey;\n    }\n  }\n}, {\n  reg: /^touch/,\n  props: ['touches', 'changedTouches', 'targetTouches']\n}, {\n  reg: /^hashchange$/,\n  props: ['newURL', 'oldURL']\n}, {\n  reg: /^gesturechange$/i,\n  props: ['rotation', 'scale']\n}, {\n  reg: /^(mousewheel|DOMMouseScroll)$/,\n  props: [],\n  fix: function fix(event, nativeEvent) {\n    var deltaX = void 0;\n    var deltaY = void 0;\n    var delta = void 0;\n    var wheelDelta = nativeEvent.wheelDelta;\n    var axis = nativeEvent.axis;\n    var wheelDeltaY = nativeEvent.wheelDeltaY;\n    var wheelDeltaX = nativeEvent.wheelDeltaX;\n    var detail = nativeEvent.detail;\n\n    // ie/webkit\n    if (wheelDelta) {\n      delta = wheelDelta / 120;\n    }\n\n    // gecko\n    if (detail) {\n      // press control e.detail == 1 else e.detail == 3\n      delta = 0 - (detail % 3 === 0 ? detail / 3 : detail);\n    }\n\n    // Gecko\n    if (axis !== undefined) {\n      if (axis === event.HORIZONTAL_AXIS) {\n        deltaY = 0;\n        deltaX = 0 - delta;\n      } else if (axis === event.VERTICAL_AXIS) {\n        deltaX = 0;\n        deltaY = delta;\n      }\n    }\n\n    // Webkit\n    if (wheelDeltaY !== undefined) {\n      deltaY = wheelDeltaY / 120;\n    }\n    if (wheelDeltaX !== undefined) {\n      deltaX = -1 * wheelDeltaX / 120;\n    }\n\n    // 默认 deltaY (ie)\n    if (!deltaX && !deltaY) {\n      deltaY = delta;\n    }\n\n    if (deltaX !== undefined) {\n      /**\n       * deltaX of mousewheel event\n       * @property deltaX\n       * @member Event.DomEvent.Object\n       */\n      event.deltaX = deltaX;\n    }\n\n    if (deltaY !== undefined) {\n      /**\n       * deltaY of mousewheel event\n       * @property deltaY\n       * @member Event.DomEvent.Object\n       */\n      event.deltaY = deltaY;\n    }\n\n    if (delta !== undefined) {\n      /**\n       * delta of mousewheel event\n       * @property delta\n       * @member Event.DomEvent.Object\n       */\n      event.delta = delta;\n    }\n  }\n}, {\n  reg: /^mouse|contextmenu|click|mspointer|(^DOMMouseScroll$)/i,\n  props: ['buttons', 'clientX', 'clientY', 'button', 'offsetX', 'relatedTarget', 'which', 'fromElement', 'toElement', 'offsetY', 'pageX', 'pageY', 'screenX', 'screenY'],\n  fix: function fix(event, nativeEvent) {\n    var eventDoc = void 0;\n    var doc = void 0;\n    var body = void 0;\n    var target = event.target;\n    var button = nativeEvent.button;\n\n    // Calculate pageX/Y if missing and clientX/Y available\n    if (target && isNullOrUndefined(event.pageX) && !isNullOrUndefined(nativeEvent.clientX)) {\n      eventDoc = target.ownerDocument || document;\n      doc = eventDoc.documentElement;\n      body = eventDoc.body;\n      event.pageX = nativeEvent.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);\n      event.pageY = nativeEvent.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);\n    }\n\n    // which for click: 1 === left; 2 === middle; 3 === right\n    // do not use button\n    if (!event.which && button !== undefined) {\n      if (button & 1) {\n        event.which = 1;\n      } else if (button & 2) {\n        event.which = 3;\n      } else if (button & 4) {\n        event.which = 2;\n      } else {\n        event.which = 0;\n      }\n    }\n\n    // add relatedTarget, if necessary\n    if (!event.relatedTarget && event.fromElement) {\n      event.relatedTarget = event.fromElement === target ? event.toElement : event.fromElement;\n    }\n\n    return event;\n  }\n}];\n\nfunction retTrue() {\n  return TRUE;\n}\n\nfunction retFalse() {\n  return FALSE;\n}\n\nfunction DomEventObject(nativeEvent) {\n  var type = nativeEvent.type;\n\n  var isNative = typeof nativeEvent.stopPropagation === 'function' || typeof nativeEvent.cancelBubble === 'boolean';\n\n  _EventBaseObject2[\"default\"].call(this);\n\n  this.nativeEvent = nativeEvent;\n\n  // in case dom event has been mark as default prevented by lower dom node\n  var isDefaultPrevented = retFalse;\n  if ('defaultPrevented' in nativeEvent) {\n    isDefaultPrevented = nativeEvent.defaultPrevented ? retTrue : retFalse;\n  } else if ('getPreventDefault' in nativeEvent) {\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=691151\n    isDefaultPrevented = nativeEvent.getPreventDefault() ? retTrue : retFalse;\n  } else if ('returnValue' in nativeEvent) {\n    isDefaultPrevented = nativeEvent.returnValue === FALSE ? retTrue : retFalse;\n  }\n\n  this.isDefaultPrevented = isDefaultPrevented;\n\n  var fixFns = [];\n  var fixFn = void 0;\n  var l = void 0;\n  var prop = void 0;\n  var props = commonProps.concat();\n\n  eventNormalizers.forEach(function (normalizer) {\n    if (type.match(normalizer.reg)) {\n      props = props.concat(normalizer.props);\n      if (normalizer.fix) {\n        fixFns.push(normalizer.fix);\n      }\n    }\n  });\n\n  l = props.length;\n\n  // clone properties of the original event object\n  while (l) {\n    prop = props[--l];\n    this[prop] = nativeEvent[prop];\n  }\n\n  // fix target property, if necessary\n  if (!this.target && isNative) {\n    this.target = nativeEvent.srcElement || document; // srcElement might not be defined either\n  }\n\n  // check if target is a text node (safari)\n  if (this.target && this.target.nodeType === 3) {\n    this.target = this.target.parentNode;\n  }\n\n  l = fixFns.length;\n\n  while (l) {\n    fixFn = fixFns[--l];\n    fixFn(this, nativeEvent);\n  }\n\n  this.timeStamp = nativeEvent.timeStamp || Date.now();\n}\n\nvar EventBaseObjectProto = _EventBaseObject2[\"default\"].prototype;\n\n(0, _objectAssign2[\"default\"])(DomEventObject.prototype, EventBaseObjectProto, {\n  constructor: DomEventObject,\n\n  preventDefault: function preventDefault() {\n    var e = this.nativeEvent;\n\n    // if preventDefault exists run it on the original event\n    if (e.preventDefault) {\n      e.preventDefault();\n    } else {\n      // otherwise set the returnValue property of the original event to FALSE (IE)\n      e.returnValue = FALSE;\n    }\n\n    EventBaseObjectProto.preventDefault.call(this);\n  },\n  stopPropagation: function stopPropagation() {\n    var e = this.nativeEvent;\n\n    // if stopPropagation exists run it on the original event\n    if (e.stopPropagation) {\n      e.stopPropagation();\n    } else {\n      // otherwise set the cancelBubble property of the original event to TRUE (IE)\n      e.cancelBubble = TRUE;\n    }\n\n    EventBaseObjectProto.stopPropagation.call(this);\n  }\n});\n\nexports[\"default\"] = DomEventObject;\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/add-dom-event-listener/lib/EventObject.js\n// module id = 155\n// module chunks = 0","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @ignore\n * base event object for custom and dom event.\n * @author yiminghe@gmail.com\n */\n\nfunction returnFalse() {\n  return false;\n}\n\nfunction returnTrue() {\n  return true;\n}\n\nfunction EventBaseObject() {\n  this.timeStamp = Date.now();\n  this.target = undefined;\n  this.currentTarget = undefined;\n}\n\nEventBaseObject.prototype = {\n  isEventObject: 1,\n\n  constructor: EventBaseObject,\n\n  isDefaultPrevented: returnFalse,\n\n  isPropagationStopped: returnFalse,\n\n  isImmediatePropagationStopped: returnFalse,\n\n  preventDefault: function preventDefault() {\n    this.isDefaultPrevented = returnTrue;\n  },\n  stopPropagation: function stopPropagation() {\n    this.isPropagationStopped = returnTrue;\n  },\n  stopImmediatePropagation: function stopImmediatePropagation() {\n    this.isImmediatePropagationStopped = returnTrue;\n    // fixed 1.2\n    // call stopPropagation implicitly\n    this.stopPropagation();\n  },\n  halt: function halt(immediate) {\n    if (immediate) {\n      this.stopImmediatePropagation();\n    } else {\n      this.stopPropagation();\n    }\n    this.preventDefault();\n  }\n};\n\nexports[\"default\"] = EventBaseObject;\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/add-dom-event-listener/lib/EventBaseObject.js\n// module id = 156\n// module chunks = 0","import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport Align from 'rc-align';\nimport Animate from 'rc-animate';\nimport PopupInner from './PopupInner';\nimport LazyRenderBox from './LazyRenderBox';\nimport { saveRef } from './utils';\n\nvar Popup = function (_Component) {\n  _inherits(Popup, _Component);\n\n  function Popup(props) {\n    _classCallCheck(this, Popup);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    _this.savePopupRef = saveRef.bind(_this, 'popupInstance');\n    _this.saveAlignRef = saveRef.bind(_this, 'alignInstance');\n    return _this;\n  }\n\n  Popup.prototype.componentDidMount = function componentDidMount() {\n    this.rootNode = this.getPopupDomNode();\n  };\n\n  Popup.prototype.getPopupDomNode = function getPopupDomNode() {\n    return ReactDOM.findDOMNode(this.popupInstance);\n  };\n\n  Popup.prototype.getMaskTransitionName = function getMaskTransitionName() {\n    var props = this.props;\n    var transitionName = props.maskTransitionName;\n    var animation = props.maskAnimation;\n    if (!transitionName && animation) {\n      transitionName = props.prefixCls + '-' + animation;\n    }\n    return transitionName;\n  };\n\n  Popup.prototype.getTransitionName = function getTransitionName() {\n    var props = this.props;\n    var transitionName = props.transitionName;\n    if (!transitionName && props.animation) {\n      transitionName = props.prefixCls + '-' + props.animation;\n    }\n    return transitionName;\n  };\n\n  Popup.prototype.getClassName = function getClassName(currentAlignClassName) {\n    return this.props.prefixCls + ' ' + this.props.className + ' ' + currentAlignClassName;\n  };\n\n  Popup.prototype.getPopupElement = function getPopupElement() {\n    var savePopupRef = this.savePopupRef,\n        props = this.props;\n    var align = props.align,\n        style = props.style,\n        visible = props.visible,\n        prefixCls = props.prefixCls,\n        destroyPopupOnHide = props.destroyPopupOnHide;\n\n    var className = this.getClassName(this.currentAlignClassName || props.getClassNameFromAlign(align));\n    var hiddenClassName = prefixCls + '-hidden';\n    if (!visible) {\n      this.currentAlignClassName = null;\n    }\n    var newStyle = _extends({}, style, this.getZIndexStyle());\n    var popupInnerProps = {\n      className: className,\n      prefixCls: prefixCls,\n      ref: savePopupRef,\n      onMouseEnter: props.onMouseEnter,\n      onMouseLeave: props.onMouseLeave,\n      style: newStyle\n    };\n    if (destroyPopupOnHide) {\n      return React.createElement(\n        Animate,\n        {\n          component: '',\n          exclusive: true,\n          transitionAppear: true,\n          transitionName: this.getTransitionName()\n        },\n        visible ? React.createElement(\n          Align,\n          {\n            target: this.getTarget,\n            key: 'popup',\n            ref: this.saveAlignRef,\n            monitorWindowResize: true,\n            align: align,\n            onAlign: this.onAlign\n          },\n          React.createElement(\n            PopupInner,\n            _extends({\n              visible: true\n            }, popupInnerProps),\n            props.children\n          )\n        ) : null\n      );\n    }\n    return React.createElement(\n      Animate,\n      {\n        component: '',\n        exclusive: true,\n        transitionAppear: true,\n        transitionName: this.getTransitionName(),\n        showProp: 'xVisible'\n      },\n      React.createElement(\n        Align,\n        {\n          target: this.getTarget,\n          key: 'popup',\n          ref: this.saveAlignRef,\n          monitorWindowResize: true,\n          xVisible: visible,\n          childrenProps: { visible: 'xVisible' },\n          disabled: !visible,\n          align: align,\n          onAlign: this.onAlign\n        },\n        React.createElement(\n          PopupInner,\n          _extends({\n            hiddenClassName: hiddenClassName\n          }, popupInnerProps),\n          props.children\n        )\n      )\n    );\n  };\n\n  Popup.prototype.getZIndexStyle = function getZIndexStyle() {\n    var style = {};\n    var props = this.props;\n    if (props.zIndex !== undefined) {\n      style.zIndex = props.zIndex;\n    }\n    return style;\n  };\n\n  Popup.prototype.getMaskElement = function getMaskElement() {\n    var props = this.props;\n    var maskElement = void 0;\n    if (props.mask) {\n      var maskTransition = this.getMaskTransitionName();\n      maskElement = React.createElement(LazyRenderBox, {\n        style: this.getZIndexStyle(),\n        key: 'mask',\n        className: props.prefixCls + '-mask',\n        hiddenClassName: props.prefixCls + '-mask-hidden',\n        visible: props.visible\n      });\n      if (maskTransition) {\n        maskElement = React.createElement(\n          Animate,\n          {\n            key: 'mask',\n            showProp: 'visible',\n            transitionAppear: true,\n            component: '',\n            transitionName: maskTransition\n          },\n          maskElement\n        );\n      }\n    }\n    return maskElement;\n  };\n\n  Popup.prototype.render = function render() {\n    return React.createElement(\n      'div',\n      null,\n      this.getMaskElement(),\n      this.getPopupElement()\n    );\n  };\n\n  return Popup;\n}(Component);\n\nPopup.propTypes = {\n  visible: PropTypes.bool,\n  style: PropTypes.object,\n  getClassNameFromAlign: PropTypes.func,\n  onAlign: PropTypes.func,\n  getRootDomNode: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  align: PropTypes.any,\n  destroyPopupOnHide: PropTypes.bool,\n  className: PropTypes.string,\n  prefixCls: PropTypes.string,\n  onMouseLeave: PropTypes.func\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this2 = this;\n\n  this.onAlign = function (popupDomNode, align) {\n    var props = _this2.props;\n    var currentAlignClassName = props.getClassNameFromAlign(align);\n    // FIX: https://github.com/react-component/trigger/issues/56\n    // FIX: https://github.com/react-component/tooltip/issues/79\n    if (_this2.currentAlignClassName !== currentAlignClassName) {\n      _this2.currentAlignClassName = currentAlignClassName;\n      popupDomNode.className = _this2.getClassName(currentAlignClassName);\n    }\n    props.onAlign(popupDomNode, align);\n  };\n\n  this.getTarget = function () {\n    return _this2.props.getRootDomNode();\n  };\n};\n\nexport default Popup;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rc-trigger/es/Popup.js\n// module id = 157\n// module chunks = 0","// export this package's api\nimport Align from './Align';\nexport default Align;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rc-align/es/index.js\n// module id = 158\n// module chunks = 0","import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport align from 'dom-align';\nimport addEventListener from 'rc-util/es/Dom/addEventListener';\nimport isWindow from './isWindow';\n\nfunction buffer(fn, ms) {\n  var timer = void 0;\n\n  function clear() {\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n  }\n\n  function bufferFn() {\n    clear();\n    timer = setTimeout(fn, ms);\n  }\n\n  bufferFn.clear = clear;\n\n  return bufferFn;\n}\n\nvar Align = function (_Component) {\n  _inherits(Align, _Component);\n\n  function Align() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Align);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.forceAlign = function () {\n      var props = _this.props;\n      if (!props.disabled) {\n        var source = ReactDOM.findDOMNode(_this);\n        props.onAlign(source, align(source, props.target(), props.align));\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  Align.prototype.componentDidMount = function componentDidMount() {\n    var props = this.props;\n    // if parent ref not attached .... use document.getElementById\n    this.forceAlign();\n    if (!props.disabled && props.monitorWindowResize) {\n      this.startMonitorWindowResize();\n    }\n  };\n\n  Align.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var reAlign = false;\n    var props = this.props;\n\n    if (!props.disabled) {\n      if (prevProps.disabled || prevProps.align !== props.align) {\n        reAlign = true;\n      } else {\n        var lastTarget = prevProps.target();\n        var currentTarget = props.target();\n        if (isWindow(lastTarget) && isWindow(currentTarget)) {\n          reAlign = false;\n        } else if (lastTarget !== currentTarget) {\n          reAlign = true;\n        }\n      }\n    }\n\n    if (reAlign) {\n      this.forceAlign();\n    }\n\n    if (props.monitorWindowResize && !props.disabled) {\n      this.startMonitorWindowResize();\n    } else {\n      this.stopMonitorWindowResize();\n    }\n  };\n\n  Align.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.stopMonitorWindowResize();\n  };\n\n  Align.prototype.startMonitorWindowResize = function startMonitorWindowResize() {\n    if (!this.resizeHandler) {\n      this.bufferMonitor = buffer(this.forceAlign, this.props.monitorBufferTime);\n      this.resizeHandler = addEventListener(window, 'resize', this.bufferMonitor);\n    }\n  };\n\n  Align.prototype.stopMonitorWindowResize = function stopMonitorWindowResize() {\n    if (this.resizeHandler) {\n      this.bufferMonitor.clear();\n      this.resizeHandler.remove();\n      this.resizeHandler = null;\n    }\n  };\n\n  Align.prototype.render = function render() {\n    var _props = this.props,\n        childrenProps = _props.childrenProps,\n        children = _props.children;\n\n    var child = React.Children.only(children);\n    if (childrenProps) {\n      var newProps = {};\n      for (var prop in childrenProps) {\n        if (childrenProps.hasOwnProperty(prop)) {\n          newProps[prop] = this.props[childrenProps[prop]];\n        }\n      }\n      return React.cloneElement(child, newProps);\n    }\n    return child;\n  };\n\n  return Align;\n}(Component);\n\nAlign.propTypes = {\n  childrenProps: PropTypes.object,\n  align: PropTypes.object.isRequired,\n  target: PropTypes.func,\n  onAlign: PropTypes.func,\n  monitorBufferTime: PropTypes.number,\n  monitorWindowResize: PropTypes.bool,\n  disabled: PropTypes.bool,\n  children: PropTypes.any\n};\nAlign.defaultProps = {\n  target: function target() {\n    return window;\n  },\n  onAlign: function onAlign() {},\n  monitorBufferTime: 50,\n  monitorWindowResize: false,\n  disabled: false\n};\n\n\nexport default Align;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rc-align/es/Align.js\n// module id = 159\n// module chunks = 0","/**\n * align dom node flexibly\n * @author yiminghe@gmail.com\n */\n\nimport utils from './utils';\nimport getOffsetParent from './getOffsetParent';\nimport getVisibleRectForElement from './getVisibleRectForElement';\nimport adjustForViewport from './adjustForViewport';\nimport getRegion from './getRegion';\nimport getElFuturePos from './getElFuturePos';\n\n// http://yiminghe.iteye.com/blog/1124720\n\nfunction isFailX(elFuturePos, elRegion, visibleRect) {\n  return elFuturePos.left < visibleRect.left || elFuturePos.left + elRegion.width > visibleRect.right;\n}\n\nfunction isFailY(elFuturePos, elRegion, visibleRect) {\n  return elFuturePos.top < visibleRect.top || elFuturePos.top + elRegion.height > visibleRect.bottom;\n}\n\nfunction isCompleteFailX(elFuturePos, elRegion, visibleRect) {\n  return elFuturePos.left > visibleRect.right || elFuturePos.left + elRegion.width < visibleRect.left;\n}\n\nfunction isCompleteFailY(elFuturePos, elRegion, visibleRect) {\n  return elFuturePos.top > visibleRect.bottom || elFuturePos.top + elRegion.height < visibleRect.top;\n}\n\nfunction isOutOfVisibleRect(target) {\n  var visibleRect = getVisibleRectForElement(target);\n  var targetRegion = getRegion(target);\n\n  return !visibleRect || targetRegion.left + targetRegion.width <= visibleRect.left || targetRegion.top + targetRegion.height <= visibleRect.top || targetRegion.left >= visibleRect.right || targetRegion.top >= visibleRect.bottom;\n}\n\nfunction flip(points, reg, map) {\n  var ret = [];\n  utils.each(points, function (p) {\n    ret.push(p.replace(reg, function (m) {\n      return map[m];\n    }));\n  });\n  return ret;\n}\n\nfunction flipOffset(offset, index) {\n  offset[index] = -offset[index];\n  return offset;\n}\n\nfunction convertOffset(str, offsetLen) {\n  var n = void 0;\n  if (/%$/.test(str)) {\n    n = parseInt(str.substring(0, str.length - 1), 10) / 100 * offsetLen;\n  } else {\n    n = parseInt(str, 10);\n  }\n  return n || 0;\n}\n\nfunction normalizeOffset(offset, el) {\n  offset[0] = convertOffset(offset[0], el.width);\n  offset[1] = convertOffset(offset[1], el.height);\n}\n\nfunction domAlign(el, refNode, align) {\n  var points = align.points;\n  var offset = align.offset || [0, 0];\n  var targetOffset = align.targetOffset || [0, 0];\n  var overflow = align.overflow;\n  var target = align.target || refNode;\n  var source = align.source || el;\n  offset = [].concat(offset);\n  targetOffset = [].concat(targetOffset);\n  overflow = overflow || {};\n  var newOverflowCfg = {};\n  var fail = 0;\n  // 当前节点可以被放置的显示区域\n  var visibleRect = getVisibleRectForElement(source);\n  // 当前节点所占的区域, left/top/width/height\n  var elRegion = getRegion(source);\n  // 参照节点所占的区域, left/top/width/height\n  var refNodeRegion = getRegion(target);\n  // 将 offset 转换成数值，支持百分比\n  normalizeOffset(offset, elRegion);\n  normalizeOffset(targetOffset, refNodeRegion);\n  // 当前节点将要被放置的位置\n  var elFuturePos = getElFuturePos(elRegion, refNodeRegion, points, offset, targetOffset);\n  // 当前节点将要所处的区域\n  var newElRegion = utils.merge(elRegion, elFuturePos);\n\n  var isTargetNotOutOfVisible = !isOutOfVisibleRect(target);\n\n  // 如果可视区域不能完全放置当前节点时允许调整\n  if (visibleRect && (overflow.adjustX || overflow.adjustY) && isTargetNotOutOfVisible) {\n    if (overflow.adjustX) {\n      // 如果横向不能放下\n      if (isFailX(elFuturePos, elRegion, visibleRect)) {\n        // 对齐位置反下\n        var newPoints = flip(points, /[lr]/ig, {\n          l: 'r',\n          r: 'l'\n        });\n        // 偏移量也反下\n        var newOffset = flipOffset(offset, 0);\n        var newTargetOffset = flipOffset(targetOffset, 0);\n        var newElFuturePos = getElFuturePos(elRegion, refNodeRegion, newPoints, newOffset, newTargetOffset);\n\n        if (!isCompleteFailX(newElFuturePos, elRegion, visibleRect)) {\n          fail = 1;\n          points = newPoints;\n          offset = newOffset;\n          targetOffset = newTargetOffset;\n        }\n      }\n    }\n\n    if (overflow.adjustY) {\n      // 如果纵向不能放下\n      if (isFailY(elFuturePos, elRegion, visibleRect)) {\n        // 对齐位置反下\n        var _newPoints = flip(points, /[tb]/ig, {\n          t: 'b',\n          b: 't'\n        });\n        // 偏移量也反下\n        var _newOffset = flipOffset(offset, 1);\n        var _newTargetOffset = flipOffset(targetOffset, 1);\n        var _newElFuturePos = getElFuturePos(elRegion, refNodeRegion, _newPoints, _newOffset, _newTargetOffset);\n\n        if (!isCompleteFailY(_newElFuturePos, elRegion, visibleRect)) {\n          fail = 1;\n          points = _newPoints;\n          offset = _newOffset;\n          targetOffset = _newTargetOffset;\n        }\n      }\n    }\n\n    // 如果失败，重新计算当前节点将要被放置的位置\n    if (fail) {\n      elFuturePos = getElFuturePos(elRegion, refNodeRegion, points, offset, targetOffset);\n      utils.mix(newElRegion, elFuturePos);\n    }\n\n    // 检查反下后的位置是否可以放下了\n    // 如果仍然放不下只有指定了可以调整当前方向才调整\n    newOverflowCfg.adjustX = overflow.adjustX && isFailX(elFuturePos, elRegion, visibleRect);\n\n    newOverflowCfg.adjustY = overflow.adjustY && isFailY(elFuturePos, elRegion, visibleRect);\n\n    // 确实要调整，甚至可能会调整高度宽度\n    if (newOverflowCfg.adjustX || newOverflowCfg.adjustY) {\n      newElRegion = adjustForViewport(elFuturePos, elRegion, visibleRect, newOverflowCfg);\n    }\n  }\n\n  // need judge to in case set fixed with in css on height auto element\n  if (newElRegion.width !== elRegion.width) {\n    utils.css(source, 'width', utils.width(source) + newElRegion.width - elRegion.width);\n  }\n\n  if (newElRegion.height !== elRegion.height) {\n    utils.css(source, 'height', utils.height(source) + newElRegion.height - elRegion.height);\n  }\n\n  // https://github.com/kissyteam/kissy/issues/190\n  // 相对于屏幕位置没变，而 left/top 变了\n  // 例如 <div 'relative'><el absolute></div>\n  utils.offset(source, {\n    left: newElRegion.left,\n    top: newElRegion.top\n  }, {\n    useCssRight: align.useCssRight,\n    useCssBottom: align.useCssBottom,\n    useCssTransform: align.useCssTransform\n  });\n\n  return {\n    points: points,\n    offset: offset,\n    targetOffset: targetOffset,\n    overflow: newOverflowCfg\n  };\n}\n\ndomAlign.__getOffsetParent = getOffsetParent;\n\ndomAlign.__getVisibleRectForElement = getVisibleRectForElement;\n\nexport default domAlign;\n/**\n *  2012-04-26 yiminghe@gmail.com\n *   - 优化智能对齐算法\n *   - 慎用 resizeXX\n *\n *  2011-07-13 yiminghe@gmail.com note:\n *   - 增加智能对齐，以及大小调整选项\n **/\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dom-align/es/index.js\n// module id = 160\n// module chunks = 0","var vendorPrefix = void 0;\n\nvar jsCssMap = {\n  Webkit: '-webkit-',\n  Moz: '-moz-',\n  // IE did it wrong again ...\n  ms: '-ms-',\n  O: '-o-'\n};\n\nfunction getVendorPrefix() {\n  if (vendorPrefix !== undefined) {\n    return vendorPrefix;\n  }\n  vendorPrefix = '';\n  var style = document.createElement('p').style;\n  var testProp = 'Transform';\n  for (var key in jsCssMap) {\n    if (key + testProp in style) {\n      vendorPrefix = key;\n    }\n  }\n  return vendorPrefix;\n}\n\nfunction getTransitionName() {\n  return getVendorPrefix() ? getVendorPrefix() + 'TransitionProperty' : 'transitionProperty';\n}\n\nexport function getTransformName() {\n  return getVendorPrefix() ? getVendorPrefix() + 'Transform' : 'transform';\n}\n\nexport function setTransitionProperty(node, value) {\n  var name = getTransitionName();\n  if (name) {\n    node.style[name] = value;\n    if (name !== 'transitionProperty') {\n      node.style.transitionProperty = value;\n    }\n  }\n}\n\nfunction setTransform(node, value) {\n  var name = getTransformName();\n  if (name) {\n    node.style[name] = value;\n    if (name !== 'transform') {\n      node.style.transform = value;\n    }\n  }\n}\n\nexport function getTransitionProperty(node) {\n  return node.style.transitionProperty || node.style[getTransitionName()];\n}\n\nexport function getTransformXY(node) {\n  var style = window.getComputedStyle(node, null);\n  var transform = style.getPropertyValue('transform') || style.getPropertyValue(getTransformName());\n  if (transform && transform !== 'none') {\n    var matrix = transform.replace(/[^0-9\\-.,]/g, '').split(',');\n    return { x: parseFloat(matrix[12] || matrix[4], 0), y: parseFloat(matrix[13] || matrix[5], 0) };\n  }\n  return {\n    x: 0,\n    y: 0\n  };\n}\n\nvar matrix2d = /matrix\\((.*)\\)/;\nvar matrix3d = /matrix3d\\((.*)\\)/;\n\nexport function setTransformXY(node, xy) {\n  var style = window.getComputedStyle(node, null);\n  var transform = style.getPropertyValue('transform') || style.getPropertyValue(getTransformName());\n  if (transform && transform !== 'none') {\n    var arr = void 0;\n    var match2d = transform.match(matrix2d);\n    if (match2d) {\n      match2d = match2d[1];\n      arr = match2d.split(',').map(function (item) {\n        return parseFloat(item, 10);\n      });\n      arr[4] = xy.x;\n      arr[5] = xy.y;\n      setTransform(node, 'matrix(' + arr.join(',') + ')');\n    } else {\n      var match3d = transform.match(matrix3d)[1];\n      arr = match3d.split(',').map(function (item) {\n        return parseFloat(item, 10);\n      });\n      arr[12] = xy.x;\n      arr[13] = xy.y;\n      setTransform(node, 'matrix3d(' + arr.join(',') + ')');\n    }\n  } else {\n    setTransform(node, 'translateX(' + xy.x + 'px) translateY(' + xy.y + 'px) translateZ(0)');\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dom-align/es/propertyUtils.js\n// module id = 161\n// module chunks = 0","import utils from './utils';\nimport getOffsetParent from './getOffsetParent';\nimport isAncestorFixed from './isAncestorFixed';\n\n/**\n * 获得元素的显示部分的区域\n */\nfunction getVisibleRectForElement(element) {\n  var visibleRect = {\n    left: 0,\n    right: Infinity,\n    top: 0,\n    bottom: Infinity\n  };\n  var el = getOffsetParent(element);\n  var doc = utils.getDocument(element);\n  var win = doc.defaultView || doc.parentWindow;\n  var body = doc.body;\n  var documentElement = doc.documentElement;\n\n  // Determine the size of the visible rect by climbing the dom accounting for\n  // all scrollable containers.\n  while (el) {\n    // clientWidth is zero for inline block elements in ie.\n    if ((navigator.userAgent.indexOf('MSIE') === -1 || el.clientWidth !== 0) &&\n    // body may have overflow set on it, yet we still get the entire\n    // viewport. In some browsers, el.offsetParent may be\n    // document.documentElement, so check for that too.\n    el !== body && el !== documentElement && utils.css(el, 'overflow') !== 'visible') {\n      var pos = utils.offset(el);\n      // add border\n      pos.left += el.clientLeft;\n      pos.top += el.clientTop;\n      visibleRect.top = Math.max(visibleRect.top, pos.top);\n      visibleRect.right = Math.min(visibleRect.right,\n      // consider area without scrollBar\n      pos.left + el.clientWidth);\n      visibleRect.bottom = Math.min(visibleRect.bottom, pos.top + el.clientHeight);\n      visibleRect.left = Math.max(visibleRect.left, pos.left);\n    } else if (el === body || el === documentElement) {\n      break;\n    }\n    el = getOffsetParent(el);\n  }\n\n  // Set element position to fixed\n  // make sure absolute element itself don't affect it's visible area\n  // https://github.com/ant-design/ant-design/issues/7601\n  var originalPosition = null;\n  if (!utils.isWindow(element) && element.nodeType !== 9) {\n    originalPosition = element.style.position;\n    var position = utils.css(element, 'position');\n    if (position === 'absolute') {\n      element.style.position = 'fixed';\n    }\n  }\n\n  var scrollX = utils.getWindowScrollLeft(win);\n  var scrollY = utils.getWindowScrollTop(win);\n  var viewportWidth = utils.viewportWidth(win);\n  var viewportHeight = utils.viewportHeight(win);\n  var documentWidth = documentElement.scrollWidth;\n  var documentHeight = documentElement.scrollHeight;\n\n  // Reset element position after calculate the visible area\n  if (element.style) {\n    element.style.position = originalPosition;\n  }\n\n  if (isAncestorFixed(element)) {\n    // Clip by viewport's size.\n    visibleRect.left = Math.max(visibleRect.left, scrollX);\n    visibleRect.top = Math.max(visibleRect.top, scrollY);\n    visibleRect.right = Math.min(visibleRect.right, scrollX + viewportWidth);\n    visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + viewportHeight);\n  } else {\n    // Clip by document's size.\n    var maxVisibleWidth = Math.max(documentWidth, scrollX + viewportWidth);\n    visibleRect.right = Math.min(visibleRect.right, maxVisibleWidth);\n\n    var maxVisibleHeight = Math.max(documentHeight, scrollY + viewportHeight);\n    visibleRect.bottom = Math.min(visibleRect.bottom, maxVisibleHeight);\n  }\n\n  return visibleRect.top >= 0 && visibleRect.left >= 0 && visibleRect.bottom > visibleRect.top && visibleRect.right > visibleRect.left ? visibleRect : null;\n}\n\nexport default getVisibleRectForElement;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dom-align/es/getVisibleRectForElement.js\n// module id = 162\n// module chunks = 0","import utils from './utils';\n\nexport default function isAncestorFixed(element) {\n  if (utils.isWindow(element) || element.nodeType === 9) {\n    return false;\n  }\n\n  var doc = utils.getDocument(element);\n  var body = doc.body;\n  var parent = null;\n  for (parent = element.parentNode; parent && parent !== body; parent = parent.parentNode) {\n    var positionStyle = utils.css(parent, 'position');\n    if (positionStyle === 'fixed') {\n      return true;\n    }\n  }\n  return false;\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dom-align/es/isAncestorFixed.js\n// module id = 163\n// module chunks = 0","import utils from './utils';\n\nfunction adjustForViewport(elFuturePos, elRegion, visibleRect, overflow) {\n  var pos = utils.clone(elFuturePos);\n  var size = {\n    width: elRegion.width,\n    height: elRegion.height\n  };\n\n  if (overflow.adjustX && pos.left < visibleRect.left) {\n    pos.left = visibleRect.left;\n  }\n\n  // Left edge inside and right edge outside viewport, try to resize it.\n  if (overflow.resizeWidth && pos.left >= visibleRect.left && pos.left + size.width > visibleRect.right) {\n    size.width -= pos.left + size.width - visibleRect.right;\n  }\n\n  // Right edge outside viewport, try to move it.\n  if (overflow.adjustX && pos.left + size.width > visibleRect.right) {\n    // 保证左边界和可视区域左边界对齐\n    pos.left = Math.max(visibleRect.right - size.width, visibleRect.left);\n  }\n\n  // Top edge outside viewport, try to move it.\n  if (overflow.adjustY && pos.top < visibleRect.top) {\n    pos.top = visibleRect.top;\n  }\n\n  // Top edge inside and bottom edge outside viewport, try to resize it.\n  if (overflow.resizeHeight && pos.top >= visibleRect.top && pos.top + size.height > visibleRect.bottom) {\n    size.height -= pos.top + size.height - visibleRect.bottom;\n  }\n\n  // Bottom edge outside viewport, try to move it.\n  if (overflow.adjustY && pos.top + size.height > visibleRect.bottom) {\n    // 保证上边界和可视区域上边界对齐\n    pos.top = Math.max(visibleRect.bottom - size.height, visibleRect.top);\n  }\n\n  return utils.mix(pos, size);\n}\n\nexport default adjustForViewport;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dom-align/es/adjustForViewport.js\n// module id = 164\n// module chunks = 0","import utils from './utils';\n\nfunction getRegion(node) {\n  var offset = void 0;\n  var w = void 0;\n  var h = void 0;\n  if (!utils.isWindow(node) && node.nodeType !== 9) {\n    offset = utils.offset(node);\n    w = utils.outerWidth(node);\n    h = utils.outerHeight(node);\n  } else {\n    var win = utils.getWindow(node);\n    offset = {\n      left: utils.getWindowScrollLeft(win),\n      top: utils.getWindowScrollTop(win)\n    };\n    w = utils.viewportWidth(win);\n    h = utils.viewportHeight(win);\n  }\n  offset.width = w;\n  offset.height = h;\n  return offset;\n}\n\nexport default getRegion;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dom-align/es/getRegion.js\n// module id = 165\n// module chunks = 0","import getAlignOffset from './getAlignOffset';\n\nfunction getElFuturePos(elRegion, refNodeRegion, points, offset, targetOffset) {\n  var p1 = getAlignOffset(refNodeRegion, points[1]);\n  var p2 = getAlignOffset(elRegion, points[0]);\n  var diff = [p2.left - p1.left, p2.top - p1.top];\n\n  return {\n    left: elRegion.left - diff[0] + offset[0] - targetOffset[0],\n    top: elRegion.top - diff[1] + offset[1] - targetOffset[1]\n  };\n}\n\nexport default getElFuturePos;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dom-align/es/getElFuturePos.js\n// module id = 166\n// module chunks = 0","/**\n * 获取 node 上的 align 对齐点 相对于页面的坐标\n */\n\nfunction getAlignOffset(region, align) {\n  var V = align.charAt(0);\n  var H = align.charAt(1);\n  var w = region.width;\n  var h = region.height;\n\n  var x = region.left;\n  var y = region.top;\n\n  if (V === 'c') {\n    y += h / 2;\n  } else if (V === 'b') {\n    y += h;\n  }\n\n  if (H === 'c') {\n    x += w / 2;\n  } else if (H === 'r') {\n    x += w;\n  }\n\n  return {\n    left: x,\n    top: y\n  };\n}\n\nexport default getAlignOffset;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dom-align/es/getAlignOffset.js\n// module id = 167\n// module chunks = 0","export default function isWindow(obj) {\n  /* eslint no-eq-null: 0 */\n  /* eslint eqeqeq: 0 */\n  return obj != null && obj == obj.window;\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rc-align/es/isWindow.js\n// module id = 168\n// module chunks = 0","import _extends from 'babel-runtime/helpers/extends';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { toArrayChildren, mergeChildren, findShownChildInChildrenByKey, findChildInChildrenByKey, isSameChildren } from './ChildrenUtils';\nimport AnimateChild from './AnimateChild';\nvar defaultKey = 'rc_animate_' + Date.now();\nimport animUtil from './util';\n\nfunction getChildrenFromProps(props) {\n  var children = props.children;\n  if (React.isValidElement(children)) {\n    if (!children.key) {\n      return React.cloneElement(children, {\n        key: defaultKey\n      });\n    }\n  }\n  return children;\n}\n\nfunction noop() {}\n\nvar Animate = function (_React$Component) {\n  _inherits(Animate, _React$Component);\n\n  // eslint-disable-line\n\n  function Animate(props) {\n    _classCallCheck(this, Animate);\n\n    var _this = _possibleConstructorReturn(this, (Animate.__proto__ || Object.getPrototypeOf(Animate)).call(this, props));\n\n    _initialiseProps.call(_this);\n\n    _this.currentlyAnimatingKeys = {};\n    _this.keysToEnter = [];\n    _this.keysToLeave = [];\n\n    _this.state = {\n      children: toArrayChildren(getChildrenFromProps(props))\n    };\n\n    _this.childrenRefs = {};\n    return _this;\n  }\n\n  _createClass(Animate, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var showProp = this.props.showProp;\n      var children = this.state.children;\n      if (showProp) {\n        children = children.filter(function (child) {\n          return !!child.props[showProp];\n        });\n      }\n      children.forEach(function (child) {\n        if (child) {\n          _this2.performAppear(child.key);\n        }\n      });\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var _this3 = this;\n\n      this.nextProps = nextProps;\n      var nextChildren = toArrayChildren(getChildrenFromProps(nextProps));\n      var props = this.props;\n      // exclusive needs immediate response\n      if (props.exclusive) {\n        Object.keys(this.currentlyAnimatingKeys).forEach(function (key) {\n          _this3.stop(key);\n        });\n      }\n      var showProp = props.showProp;\n      var currentlyAnimatingKeys = this.currentlyAnimatingKeys;\n      // last props children if exclusive\n      var currentChildren = props.exclusive ? toArrayChildren(getChildrenFromProps(props)) : this.state.children;\n      // in case destroy in showProp mode\n      var newChildren = [];\n      if (showProp) {\n        currentChildren.forEach(function (currentChild) {\n          var nextChild = currentChild && findChildInChildrenByKey(nextChildren, currentChild.key);\n          var newChild = void 0;\n          if ((!nextChild || !nextChild.props[showProp]) && currentChild.props[showProp]) {\n            newChild = React.cloneElement(nextChild || currentChild, _defineProperty({}, showProp, true));\n          } else {\n            newChild = nextChild;\n          }\n          if (newChild) {\n            newChildren.push(newChild);\n          }\n        });\n        nextChildren.forEach(function (nextChild) {\n          if (!nextChild || !findChildInChildrenByKey(currentChildren, nextChild.key)) {\n            newChildren.push(nextChild);\n          }\n        });\n      } else {\n        newChildren = mergeChildren(currentChildren, nextChildren);\n      }\n\n      // need render to avoid update\n      this.setState({\n        children: newChildren\n      });\n\n      nextChildren.forEach(function (child) {\n        var key = child && child.key;\n        if (child && currentlyAnimatingKeys[key]) {\n          return;\n        }\n        var hasPrev = child && findChildInChildrenByKey(currentChildren, key);\n        if (showProp) {\n          var showInNext = child.props[showProp];\n          if (hasPrev) {\n            var showInNow = findShownChildInChildrenByKey(currentChildren, key, showProp);\n            if (!showInNow && showInNext) {\n              _this3.keysToEnter.push(key);\n            }\n          } else if (showInNext) {\n            _this3.keysToEnter.push(key);\n          }\n        } else if (!hasPrev) {\n          _this3.keysToEnter.push(key);\n        }\n      });\n\n      currentChildren.forEach(function (child) {\n        var key = child && child.key;\n        if (child && currentlyAnimatingKeys[key]) {\n          return;\n        }\n        var hasNext = child && findChildInChildrenByKey(nextChildren, key);\n        if (showProp) {\n          var showInNow = child.props[showProp];\n          if (hasNext) {\n            var showInNext = findShownChildInChildrenByKey(nextChildren, key, showProp);\n            if (!showInNext && showInNow) {\n              _this3.keysToLeave.push(key);\n            }\n          } else if (showInNow) {\n            _this3.keysToLeave.push(key);\n          }\n        } else if (!hasNext) {\n          _this3.keysToLeave.push(key);\n        }\n      });\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      var keysToEnter = this.keysToEnter;\n      this.keysToEnter = [];\n      keysToEnter.forEach(this.performEnter);\n      var keysToLeave = this.keysToLeave;\n      this.keysToLeave = [];\n      keysToLeave.forEach(this.performLeave);\n    }\n  }, {\n    key: 'isValidChildByKey',\n    value: function isValidChildByKey(currentChildren, key) {\n      var showProp = this.props.showProp;\n      if (showProp) {\n        return findShownChildInChildrenByKey(currentChildren, key, showProp);\n      }\n      return findChildInChildrenByKey(currentChildren, key);\n    }\n  }, {\n    key: 'stop',\n    value: function stop(key) {\n      delete this.currentlyAnimatingKeys[key];\n      var component = this.childrenRefs[key];\n      if (component) {\n        component.stop();\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this4 = this;\n\n      var props = this.props;\n      this.nextProps = props;\n      var stateChildren = this.state.children;\n      var children = null;\n      if (stateChildren) {\n        children = stateChildren.map(function (child) {\n          if (child === null || child === undefined) {\n            return child;\n          }\n          if (!child.key) {\n            throw new Error('must set key for <rc-animate> children');\n          }\n          return React.createElement(\n            AnimateChild,\n            {\n              key: child.key,\n              ref: function ref(node) {\n                return _this4.childrenRefs[child.key] = node;\n              },\n              animation: props.animation,\n              transitionName: props.transitionName,\n              transitionEnter: props.transitionEnter,\n              transitionAppear: props.transitionAppear,\n              transitionLeave: props.transitionLeave\n            },\n            child\n          );\n        });\n      }\n      var Component = props.component;\n      if (Component) {\n        var passedProps = props;\n        if (typeof Component === 'string') {\n          passedProps = _extends({\n            className: props.className,\n            style: props.style\n          }, props.componentProps);\n        }\n        return React.createElement(\n          Component,\n          passedProps,\n          children\n        );\n      }\n      return children[0] || null;\n    }\n  }]);\n\n  return Animate;\n}(React.Component);\n\nAnimate.isAnimate = true;\nAnimate.propTypes = {\n  component: PropTypes.any,\n  componentProps: PropTypes.object,\n  animation: PropTypes.object,\n  transitionName: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  transitionEnter: PropTypes.bool,\n  transitionAppear: PropTypes.bool,\n  exclusive: PropTypes.bool,\n  transitionLeave: PropTypes.bool,\n  onEnd: PropTypes.func,\n  onEnter: PropTypes.func,\n  onLeave: PropTypes.func,\n  onAppear: PropTypes.func,\n  showProp: PropTypes.string\n};\nAnimate.defaultProps = {\n  animation: {},\n  component: 'span',\n  componentProps: {},\n  transitionEnter: true,\n  transitionLeave: true,\n  transitionAppear: false,\n  onEnd: noop,\n  onEnter: noop,\n  onLeave: noop,\n  onAppear: noop\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this5 = this;\n\n  this.performEnter = function (key) {\n    // may already remove by exclusive\n    if (_this5.childrenRefs[key]) {\n      _this5.currentlyAnimatingKeys[key] = true;\n      _this5.childrenRefs[key].componentWillEnter(_this5.handleDoneAdding.bind(_this5, key, 'enter'));\n    }\n  };\n\n  this.performAppear = function (key) {\n    if (_this5.childrenRefs[key]) {\n      _this5.currentlyAnimatingKeys[key] = true;\n      _this5.childrenRefs[key].componentWillAppear(_this5.handleDoneAdding.bind(_this5, key, 'appear'));\n    }\n  };\n\n  this.handleDoneAdding = function (key, type) {\n    var props = _this5.props;\n    delete _this5.currentlyAnimatingKeys[key];\n    // if update on exclusive mode, skip check\n    if (props.exclusive && props !== _this5.nextProps) {\n      return;\n    }\n    var currentChildren = toArrayChildren(getChildrenFromProps(props));\n    if (!_this5.isValidChildByKey(currentChildren, key)) {\n      // exclusive will not need this\n      _this5.performLeave(key);\n    } else {\n      if (type === 'appear') {\n        if (animUtil.allowAppearCallback(props)) {\n          props.onAppear(key);\n          props.onEnd(key, true);\n        }\n      } else {\n        if (animUtil.allowEnterCallback(props)) {\n          props.onEnter(key);\n          props.onEnd(key, true);\n        }\n      }\n    }\n  };\n\n  this.performLeave = function (key) {\n    // may already remove by exclusive\n    if (_this5.childrenRefs[key]) {\n      _this5.currentlyAnimatingKeys[key] = true;\n      _this5.childrenRefs[key].componentWillLeave(_this5.handleDoneLeaving.bind(_this5, key));\n    }\n  };\n\n  this.handleDoneLeaving = function (key) {\n    var props = _this5.props;\n    delete _this5.currentlyAnimatingKeys[key];\n    // if update on exclusive mode, skip check\n    if (props.exclusive && props !== _this5.nextProps) {\n      return;\n    }\n    var currentChildren = toArrayChildren(getChildrenFromProps(props));\n    // in case state change is too fast\n    if (_this5.isValidChildByKey(currentChildren, key)) {\n      _this5.performEnter(key);\n    } else {\n      var end = function end() {\n        if (animUtil.allowLeaveCallback(props)) {\n          props.onLeave(key);\n          props.onEnd(key, false);\n        }\n      };\n      if (!isSameChildren(_this5.state.children, currentChildren, props.showProp)) {\n        _this5.setState({\n          children: currentChildren\n        }, end);\n      } else {\n        end();\n      }\n    }\n  };\n};\n\nexport default Animate;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rc-animate/es/Animate.js\n// module id = 169\n// module chunks = 0","\"use strict\";\n\nexports.__esModule = true;\n\nvar _defineProperty = require(\"../core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (obj, key, value) {\n  if (key in obj) {\n    (0, _defineProperty2.default)(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/helpers/defineProperty.js\n// module id = 170\n// module chunks = 0","require('../../modules/es6.object.define-property');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function defineProperty(it, key, desc) {\n  return $Object.defineProperty(it, key, desc);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/fn/object/define-property.js\n// module id = 171\n// module chunks = 0","var $export = require('./_export');\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/es6.object.define-property.js\n// module id = 172\n// module chunks = 0","import React from 'react';\n\nexport function toArrayChildren(children) {\n  var ret = [];\n  React.Children.forEach(children, function (child) {\n    ret.push(child);\n  });\n  return ret;\n}\n\nexport function findChildInChildrenByKey(children, key) {\n  var ret = null;\n  if (children) {\n    children.forEach(function (child) {\n      if (ret) {\n        return;\n      }\n      if (child && child.key === key) {\n        ret = child;\n      }\n    });\n  }\n  return ret;\n}\n\nexport function findShownChildInChildrenByKey(children, key, showProp) {\n  var ret = null;\n  if (children) {\n    children.forEach(function (child) {\n      if (child && child.key === key && child.props[showProp]) {\n        if (ret) {\n          throw new Error('two child with same key for <rc-animate> children');\n        }\n        ret = child;\n      }\n    });\n  }\n  return ret;\n}\n\nexport function findHiddenChildInChildrenByKey(children, key, showProp) {\n  var found = 0;\n  if (children) {\n    children.forEach(function (child) {\n      if (found) {\n        return;\n      }\n      found = child && child.key === key && !child.props[showProp];\n    });\n  }\n  return found;\n}\n\nexport function isSameChildren(c1, c2, showProp) {\n  var same = c1.length === c2.length;\n  if (same) {\n    c1.forEach(function (child, index) {\n      var child2 = c2[index];\n      if (child && child2) {\n        if (child && !child2 || !child && child2) {\n          same = false;\n        } else if (child.key !== child2.key) {\n          same = false;\n        } else if (showProp && child.props[showProp] !== child2.props[showProp]) {\n          same = false;\n        }\n      }\n    });\n  }\n  return same;\n}\n\nexport function mergeChildren(prev, next) {\n  var ret = [];\n\n  // For each key of `next`, the list of keys to insert before that key in\n  // the combined list\n  var nextChildrenPending = {};\n  var pendingChildren = [];\n  prev.forEach(function (child) {\n    if (child && findChildInChildrenByKey(next, child.key)) {\n      if (pendingChildren.length) {\n        nextChildrenPending[child.key] = pendingChildren;\n        pendingChildren = [];\n      }\n    } else {\n      pendingChildren.push(child);\n    }\n  });\n\n  next.forEach(function (child) {\n    if (child && nextChildrenPending.hasOwnProperty(child.key)) {\n      ret = ret.concat(nextChildrenPending[child.key]);\n    }\n    ret.push(child);\n  });\n\n  ret = ret.concat(pendingChildren);\n\n  return ret;\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rc-animate/es/ChildrenUtils.js\n// module id = 173\n// module chunks = 0","import _typeof from 'babel-runtime/helpers/typeof';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport cssAnimate, { isCssAnimationSupported } from 'css-animation';\nimport animUtil from './util';\n\nvar transitionMap = {\n  enter: 'transitionEnter',\n  appear: 'transitionAppear',\n  leave: 'transitionLeave'\n};\n\nvar AnimateChild = function (_React$Component) {\n  _inherits(AnimateChild, _React$Component);\n\n  function AnimateChild() {\n    _classCallCheck(this, AnimateChild);\n\n    return _possibleConstructorReturn(this, (AnimateChild.__proto__ || Object.getPrototypeOf(AnimateChild)).apply(this, arguments));\n  }\n\n  _createClass(AnimateChild, [{\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.stop();\n    }\n  }, {\n    key: 'componentWillEnter',\n    value: function componentWillEnter(done) {\n      if (animUtil.isEnterSupported(this.props)) {\n        this.transition('enter', done);\n      } else {\n        done();\n      }\n    }\n  }, {\n    key: 'componentWillAppear',\n    value: function componentWillAppear(done) {\n      if (animUtil.isAppearSupported(this.props)) {\n        this.transition('appear', done);\n      } else {\n        done();\n      }\n    }\n  }, {\n    key: 'componentWillLeave',\n    value: function componentWillLeave(done) {\n      if (animUtil.isLeaveSupported(this.props)) {\n        this.transition('leave', done);\n      } else {\n        // always sync, do not interupt with react component life cycle\n        // update hidden -> animate hidden ->\n        // didUpdate -> animate leave -> unmount (if animate is none)\n        done();\n      }\n    }\n  }, {\n    key: 'transition',\n    value: function transition(animationType, finishCallback) {\n      var _this2 = this;\n\n      var node = ReactDOM.findDOMNode(this);\n      var props = this.props;\n      var transitionName = props.transitionName;\n      var nameIsObj = (typeof transitionName === 'undefined' ? 'undefined' : _typeof(transitionName)) === 'object';\n      this.stop();\n      var end = function end() {\n        _this2.stopper = null;\n        finishCallback();\n      };\n      if ((isCssAnimationSupported || !props.animation[animationType]) && transitionName && props[transitionMap[animationType]]) {\n        var name = nameIsObj ? transitionName[animationType] : transitionName + '-' + animationType;\n        var activeName = name + '-active';\n        if (nameIsObj && transitionName[animationType + 'Active']) {\n          activeName = transitionName[animationType + 'Active'];\n        }\n        this.stopper = cssAnimate(node, {\n          name: name,\n          active: activeName\n        }, end);\n      } else {\n        this.stopper = props.animation[animationType](node, end);\n      }\n    }\n  }, {\n    key: 'stop',\n    value: function stop() {\n      var stopper = this.stopper;\n      if (stopper) {\n        this.stopper = null;\n        stopper.stop();\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return this.props.children;\n    }\n  }]);\n\n  return AnimateChild;\n}(React.Component);\n\nAnimateChild.propTypes = {\n  children: PropTypes.any\n};\nexport default AnimateChild;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rc-animate/es/AnimateChild.js\n// module id = 174\n// module chunks = 0","import _typeof from 'babel-runtime/helpers/typeof';\nimport Event from './Event';\nimport classes from 'component-classes';\n\nvar isCssAnimationSupported = Event.endEvents.length !== 0;\nvar capitalPrefixes = ['Webkit', 'Moz', 'O',\n// ms is special .... !\n'ms'];\nvar prefixes = ['-webkit-', '-moz-', '-o-', 'ms-', ''];\n\nfunction getStyleProperty(node, name) {\n  // old ff need null, https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle\n  var style = window.getComputedStyle(node, null);\n  var ret = '';\n  for (var i = 0; i < prefixes.length; i++) {\n    ret = style.getPropertyValue(prefixes[i] + name);\n    if (ret) {\n      break;\n    }\n  }\n  return ret;\n}\n\nfunction fixBrowserByTimeout(node) {\n  if (isCssAnimationSupported) {\n    var transitionDelay = parseFloat(getStyleProperty(node, 'transition-delay')) || 0;\n    var transitionDuration = parseFloat(getStyleProperty(node, 'transition-duration')) || 0;\n    var animationDelay = parseFloat(getStyleProperty(node, 'animation-delay')) || 0;\n    var animationDuration = parseFloat(getStyleProperty(node, 'animation-duration')) || 0;\n    var time = Math.max(transitionDuration + transitionDelay, animationDuration + animationDelay);\n    // sometimes, browser bug\n    node.rcEndAnimTimeout = setTimeout(function () {\n      node.rcEndAnimTimeout = null;\n      if (node.rcEndListener) {\n        node.rcEndListener();\n      }\n    }, time * 1000 + 200);\n  }\n}\n\nfunction clearBrowserBugTimeout(node) {\n  if (node.rcEndAnimTimeout) {\n    clearTimeout(node.rcEndAnimTimeout);\n    node.rcEndAnimTimeout = null;\n  }\n}\n\nvar cssAnimation = function cssAnimation(node, transitionName, endCallback) {\n  var nameIsObj = (typeof transitionName === 'undefined' ? 'undefined' : _typeof(transitionName)) === 'object';\n  var className = nameIsObj ? transitionName.name : transitionName;\n  var activeClassName = nameIsObj ? transitionName.active : transitionName + '-active';\n  var end = endCallback;\n  var start = void 0;\n  var active = void 0;\n  var nodeClasses = classes(node);\n\n  if (endCallback && Object.prototype.toString.call(endCallback) === '[object Object]') {\n    end = endCallback.end;\n    start = endCallback.start;\n    active = endCallback.active;\n  }\n\n  if (node.rcEndListener) {\n    node.rcEndListener();\n  }\n\n  node.rcEndListener = function (e) {\n    if (e && e.target !== node) {\n      return;\n    }\n\n    if (node.rcAnimTimeout) {\n      clearTimeout(node.rcAnimTimeout);\n      node.rcAnimTimeout = null;\n    }\n\n    clearBrowserBugTimeout(node);\n\n    nodeClasses.remove(className);\n    nodeClasses.remove(activeClassName);\n\n    Event.removeEndEventListener(node, node.rcEndListener);\n    node.rcEndListener = null;\n\n    // Usually this optional end is used for informing an owner of\n    // a leave animation and telling it to remove the child.\n    if (end) {\n      end();\n    }\n  };\n\n  Event.addEndEventListener(node, node.rcEndListener);\n\n  if (start) {\n    start();\n  }\n  nodeClasses.add(className);\n\n  node.rcAnimTimeout = setTimeout(function () {\n    node.rcAnimTimeout = null;\n    nodeClasses.add(activeClassName);\n    if (active) {\n      setTimeout(active, 0);\n    }\n    fixBrowserByTimeout(node);\n    // 30ms for firefox\n  }, 30);\n\n  return {\n    stop: function stop() {\n      if (node.rcEndListener) {\n        node.rcEndListener();\n      }\n    }\n  };\n};\n\ncssAnimation.style = function (node, style, callback) {\n  if (node.rcEndListener) {\n    node.rcEndListener();\n  }\n\n  node.rcEndListener = function (e) {\n    if (e && e.target !== node) {\n      return;\n    }\n\n    if (node.rcAnimTimeout) {\n      clearTimeout(node.rcAnimTimeout);\n      node.rcAnimTimeout = null;\n    }\n\n    clearBrowserBugTimeout(node);\n\n    Event.removeEndEventListener(node, node.rcEndListener);\n    node.rcEndListener = null;\n\n    // Usually this optional callback is used for informing an owner of\n    // a leave animation and telling it to remove the child.\n    if (callback) {\n      callback();\n    }\n  };\n\n  Event.addEndEventListener(node, node.rcEndListener);\n\n  node.rcAnimTimeout = setTimeout(function () {\n    for (var s in style) {\n      if (style.hasOwnProperty(s)) {\n        node.style[s] = style[s];\n      }\n    }\n    node.rcAnimTimeout = null;\n    fixBrowserByTimeout(node);\n  }, 0);\n};\n\ncssAnimation.setTransition = function (node, p, value) {\n  var property = p;\n  var v = value;\n  if (value === undefined) {\n    v = property;\n    property = '';\n  }\n  property = property || '';\n  capitalPrefixes.forEach(function (prefix) {\n    node.style[prefix + 'Transition' + property] = v;\n  });\n};\n\ncssAnimation.isCssAnimationSupported = isCssAnimationSupported;\n\nexport { isCssAnimationSupported };\n\nexport default cssAnimation;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-animation/es/index.js\n// module id = 175\n// module chunks = 0","var EVENT_NAME_MAP = {\n  transitionend: {\n    transition: 'transitionend',\n    WebkitTransition: 'webkitTransitionEnd',\n    MozTransition: 'mozTransitionEnd',\n    OTransition: 'oTransitionEnd',\n    msTransition: 'MSTransitionEnd'\n  },\n\n  animationend: {\n    animation: 'animationend',\n    WebkitAnimation: 'webkitAnimationEnd',\n    MozAnimation: 'mozAnimationEnd',\n    OAnimation: 'oAnimationEnd',\n    msAnimation: 'MSAnimationEnd'\n  }\n};\n\nvar endEvents = [];\n\nfunction detectEvents() {\n  var testEl = document.createElement('div');\n  var style = testEl.style;\n\n  if (!('AnimationEvent' in window)) {\n    delete EVENT_NAME_MAP.animationend.animation;\n  }\n\n  if (!('TransitionEvent' in window)) {\n    delete EVENT_NAME_MAP.transitionend.transition;\n  }\n\n  for (var baseEventName in EVENT_NAME_MAP) {\n    if (EVENT_NAME_MAP.hasOwnProperty(baseEventName)) {\n      var baseEvents = EVENT_NAME_MAP[baseEventName];\n      for (var styleName in baseEvents) {\n        if (styleName in style) {\n          endEvents.push(baseEvents[styleName]);\n          break;\n        }\n      }\n    }\n  }\n}\n\nif (typeof window !== 'undefined' && typeof document !== 'undefined') {\n  detectEvents();\n}\n\nfunction addEventListener(node, eventName, eventListener) {\n  node.addEventListener(eventName, eventListener, false);\n}\n\nfunction removeEventListener(node, eventName, eventListener) {\n  node.removeEventListener(eventName, eventListener, false);\n}\n\nvar TransitionEvents = {\n  addEndEventListener: function addEndEventListener(node, eventListener) {\n    if (endEvents.length === 0) {\n      window.setTimeout(eventListener, 0);\n      return;\n    }\n    endEvents.forEach(function (endEvent) {\n      addEventListener(node, endEvent, eventListener);\n    });\n  },\n\n\n  endEvents: endEvents,\n\n  removeEndEventListener: function removeEndEventListener(node, eventListener) {\n    if (endEvents.length === 0) {\n      return;\n    }\n    endEvents.forEach(function (endEvent) {\n      removeEventListener(node, endEvent, eventListener);\n    });\n  }\n};\n\nexport default TransitionEvents;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-animation/es/Event.js\n// module id = 176\n// module chunks = 0","/**\n * Module dependencies.\n */\n\ntry {\n  var index = require('indexof');\n} catch (err) {\n  var index = require('component-indexof');\n}\n\n/**\n * Whitespace regexp.\n */\n\nvar re = /\\s+/;\n\n/**\n * toString reference.\n */\n\nvar toString = Object.prototype.toString;\n\n/**\n * Wrap `el` in a `ClassList`.\n *\n * @param {Element} el\n * @return {ClassList}\n * @api public\n */\n\nmodule.exports = function(el){\n  return new ClassList(el);\n};\n\n/**\n * Initialize a new ClassList for `el`.\n *\n * @param {Element} el\n * @api private\n */\n\nfunction ClassList(el) {\n  if (!el || !el.nodeType) {\n    throw new Error('A DOM element reference is required');\n  }\n  this.el = el;\n  this.list = el.classList;\n}\n\n/**\n * Add class `name` if not already present.\n *\n * @param {String} name\n * @return {ClassList}\n * @api public\n */\n\nClassList.prototype.add = function(name){\n  // classList\n  if (this.list) {\n    this.list.add(name);\n    return this;\n  }\n\n  // fallback\n  var arr = this.array();\n  var i = index(arr, name);\n  if (!~i) arr.push(name);\n  this.el.className = arr.join(' ');\n  return this;\n};\n\n/**\n * Remove class `name` when present, or\n * pass a regular expression to remove\n * any which match.\n *\n * @param {String|RegExp} name\n * @return {ClassList}\n * @api public\n */\n\nClassList.prototype.remove = function(name){\n  if ('[object RegExp]' == toString.call(name)) {\n    return this.removeMatching(name);\n  }\n\n  // classList\n  if (this.list) {\n    this.list.remove(name);\n    return this;\n  }\n\n  // fallback\n  var arr = this.array();\n  var i = index(arr, name);\n  if (~i) arr.splice(i, 1);\n  this.el.className = arr.join(' ');\n  return this;\n};\n\n/**\n * Remove all classes matching `re`.\n *\n * @param {RegExp} re\n * @return {ClassList}\n * @api private\n */\n\nClassList.prototype.removeMatching = function(re){\n  var arr = this.array();\n  for (var i = 0; i < arr.length; i++) {\n    if (re.test(arr[i])) {\n      this.remove(arr[i]);\n    }\n  }\n  return this;\n};\n\n/**\n * Toggle class `name`, can force state via `force`.\n *\n * For browsers that support classList, but do not support `force` yet,\n * the mistake will be detected and corrected.\n *\n * @param {String} name\n * @param {Boolean} force\n * @return {ClassList}\n * @api public\n */\n\nClassList.prototype.toggle = function(name, force){\n  // classList\n  if (this.list) {\n    if (\"undefined\" !== typeof force) {\n      if (force !== this.list.toggle(name, force)) {\n        this.list.toggle(name); // toggle again to correct\n      }\n    } else {\n      this.list.toggle(name);\n    }\n    return this;\n  }\n\n  // fallback\n  if (\"undefined\" !== typeof force) {\n    if (!force) {\n      this.remove(name);\n    } else {\n      this.add(name);\n    }\n  } else {\n    if (this.has(name)) {\n      this.remove(name);\n    } else {\n      this.add(name);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Return an array of classes.\n *\n * @return {Array}\n * @api public\n */\n\nClassList.prototype.array = function(){\n  var className = this.el.getAttribute('class') || '';\n  var str = className.replace(/^\\s+|\\s+$/g, '');\n  var arr = str.split(re);\n  if ('' === arr[0]) arr.shift();\n  return arr;\n};\n\n/**\n * Check if class `name` is present.\n *\n * @param {String} name\n * @return {ClassList}\n * @api public\n */\n\nClassList.prototype.has =\nClassList.prototype.contains = function(name){\n  return this.list\n    ? this.list.contains(name)\n    : !! ~index(this.array(), name);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/component-classes/index.js\n// module id = 177\n// module chunks = 0","import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LazyRenderBox from './LazyRenderBox';\n\nvar PopupInner = function (_Component) {\n  _inherits(PopupInner, _Component);\n\n  function PopupInner() {\n    _classCallCheck(this, PopupInner);\n\n    return _possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  PopupInner.prototype.render = function render() {\n    var props = this.props;\n    var className = props.className;\n    if (!props.visible) {\n      className += ' ' + props.hiddenClassName;\n    }\n    return React.createElement(\n      'div',\n      {\n        className: className,\n        onMouseEnter: props.onMouseEnter,\n        onMouseLeave: props.onMouseLeave,\n        style: props.style\n      },\n      React.createElement(\n        LazyRenderBox,\n        { className: props.prefixCls + '-content', visible: props.visible },\n        props.children\n      )\n    );\n  };\n\n  return PopupInner;\n}(Component);\n\nPopupInner.propTypes = {\n  hiddenClassName: PropTypes.string,\n  className: PropTypes.string,\n  prefixCls: PropTypes.string,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  children: PropTypes.any\n};\n\n\nexport default PopupInner;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rc-trigger/es/PopupInner.js\n// module id = 178\n// module chunks = 0","import _extends from 'babel-runtime/helpers/extends';\nimport ReactDOM from 'react-dom';\n\nfunction defaultGetContainer() {\n  var container = document.createElement('div');\n  document.body.appendChild(container);\n  return container;\n}\n\nexport default function getContainerRenderMixin(config) {\n  var _config$autoMount = config.autoMount,\n      autoMount = _config$autoMount === undefined ? true : _config$autoMount,\n      _config$autoDestroy = config.autoDestroy,\n      autoDestroy = _config$autoDestroy === undefined ? true : _config$autoDestroy,\n      isVisible = config.isVisible,\n      isForceRender = config.isForceRender,\n      getComponent = config.getComponent,\n      _config$getContainer = config.getContainer,\n      getContainer = _config$getContainer === undefined ? defaultGetContainer : _config$getContainer;\n\n\n  var mixin = void 0;\n\n  function _renderComponent(instance, componentArg, ready) {\n    if (!isVisible || instance._component || isVisible(instance) || isForceRender && isForceRender(instance)) {\n      if (!instance._container) {\n        instance._container = getContainer(instance);\n      }\n      var component = void 0;\n      if (instance.getComponent) {\n        component = instance.getComponent(componentArg);\n      } else {\n        component = getComponent(instance, componentArg);\n      }\n      ReactDOM.unstable_renderSubtreeIntoContainer(instance, component, instance._container, function callback() {\n        instance._component = this;\n        if (ready) {\n          ready.call(this);\n        }\n      });\n    }\n  }\n\n  if (autoMount) {\n    mixin = _extends({}, mixin, {\n      componentDidMount: function componentDidMount() {\n        _renderComponent(this);\n      },\n      componentDidUpdate: function componentDidUpdate() {\n        _renderComponent(this);\n      }\n    });\n  }\n\n  if (!autoMount || !autoDestroy) {\n    mixin = _extends({}, mixin, {\n      renderComponent: function renderComponent(componentArg, ready) {\n        _renderComponent(this, componentArg, ready);\n      }\n    });\n  }\n\n  function _removeContainer(instance) {\n    if (instance._container) {\n      var container = instance._container;\n      ReactDOM.unmountComponentAtNode(container);\n      container.parentNode.removeChild(container);\n      instance._container = null;\n    }\n  }\n\n  if (autoDestroy) {\n    mixin = _extends({}, mixin, {\n      componentWillUnmount: function componentWillUnmount() {\n        _removeContainer(this);\n      }\n    });\n  } else {\n    mixin = _extends({}, mixin, {\n      removeContainer: function removeContainer() {\n        _removeContainer(this);\n      }\n    });\n  }\n\n  return mixin;\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rc-util/es/getContainerRenderMixin.js\n// module id = 179\n// module chunks = 0","import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\n\nvar Portal = function (_React$Component) {\n  _inherits(Portal, _React$Component);\n\n  function Portal() {\n    _classCallCheck(this, Portal);\n\n    return _possibleConstructorReturn(this, (Portal.__proto__ || Object.getPrototypeOf(Portal)).apply(this, arguments));\n  }\n\n  _createClass(Portal, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.createContainer();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var didUpdate = this.props.didUpdate;\n\n      if (didUpdate) {\n        didUpdate(prevProps);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.removeContainer();\n    }\n  }, {\n    key: 'createContainer',\n    value: function createContainer() {\n      this._container = this.props.getContainer();\n      this.forceUpdate();\n    }\n  }, {\n    key: 'removeContainer',\n    value: function removeContainer() {\n      if (this._container) {\n        this._container.parentNode.removeChild(this._container);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      if (this._container) {\n        return ReactDOM.createPortal(this.props.children, this._container);\n      }\n      return null;\n    }\n  }]);\n\n  return Portal;\n}(React.Component);\n\nPortal.propTypes = {\n  getContainer: PropTypes.func.isRequired,\n  children: PropTypes.node.isRequired,\n  didUpdate: PropTypes.func\n};\nexport default Portal;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rc-util/es/Portal.js\n// module id = 180\n// module chunks = 0","var autoAdjustOverflow = {\n  adjustX: 1,\n  adjustY: 1\n};\n\nvar targetOffset = [0, 0];\n\nexport var placements = {\n  left: {\n    points: ['cr', 'cl'],\n    overflow: autoAdjustOverflow,\n    offset: [-4, 0],\n    targetOffset: targetOffset\n  },\n  right: {\n    points: ['cl', 'cr'],\n    overflow: autoAdjustOverflow,\n    offset: [4, 0],\n    targetOffset: targetOffset\n  },\n  top: {\n    points: ['bc', 'tc'],\n    overflow: autoAdjustOverflow,\n    offset: [0, -4],\n    targetOffset: targetOffset\n  },\n  bottom: {\n    points: ['tc', 'bc'],\n    overflow: autoAdjustOverflow,\n    offset: [0, 4],\n    targetOffset: targetOffset\n  },\n  topLeft: {\n    points: ['bl', 'tl'],\n    overflow: autoAdjustOverflow,\n    offset: [0, -4],\n    targetOffset: targetOffset\n  },\n  leftTop: {\n    points: ['tr', 'tl'],\n    overflow: autoAdjustOverflow,\n    offset: [-4, 0],\n    targetOffset: targetOffset\n  },\n  topRight: {\n    points: ['br', 'tr'],\n    overflow: autoAdjustOverflow,\n    offset: [0, -4],\n    targetOffset: targetOffset\n  },\n  rightTop: {\n    points: ['tl', 'tr'],\n    overflow: autoAdjustOverflow,\n    offset: [4, 0],\n    targetOffset: targetOffset\n  },\n  bottomRight: {\n    points: ['tr', 'br'],\n    overflow: autoAdjustOverflow,\n    offset: [0, 4],\n    targetOffset: targetOffset\n  },\n  rightBottom: {\n    points: ['bl', 'br'],\n    overflow: autoAdjustOverflow,\n    offset: [4, 0],\n    targetOffset: targetOffset\n  },\n  bottomLeft: {\n    points: ['tl', 'bl'],\n    overflow: autoAdjustOverflow,\n    offset: [0, 4],\n    targetOffset: targetOffset\n  },\n  leftBottom: {\n    points: ['br', 'bl'],\n    overflow: autoAdjustOverflow,\n    offset: [-4, 0],\n    targetOffset: targetOffset\n  }\n};\n\nexport default placements;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rc-tooltip/es/placements.js\n// module id = 181\n// module chunks = 0","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../css-loader/index.js!./bootstrap_white.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {\"hmr\":true}\noptions.transform = transform\n// add the styles to the DOM\nvar update = require(\"!../../style-loader/lib/addStyles.js\")(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../css-loader/index.js!./bootstrap_white.css\", function() {\n\t\t\tvar newContent = require(\"!!../../css-loader/index.js!./bootstrap_white.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rc-tooltip/assets/bootstrap_white.css\n// module id = 182\n// module chunks = 0","exports = module.exports = require(\"../../css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \".rc-tooltip.rc-tooltip-zoom-enter,\\n.rc-tooltip.rc-tooltip-zoom-leave {\\n  display: block;\\n}\\n.rc-tooltip-zoom-enter,\\n.rc-tooltip-zoom-appear {\\n  opacity: 0;\\n  -webkit-animation-duration: 0.3s;\\n          animation-duration: 0.3s;\\n  -webkit-animation-fill-mode: both;\\n          animation-fill-mode: both;\\n  -webkit-animation-timing-function: cubic-bezier(0.18, 0.89, 0.32, 1.28);\\n          animation-timing-function: cubic-bezier(0.18, 0.89, 0.32, 1.28);\\n  -webkit-animation-play-state: paused;\\n          animation-play-state: paused;\\n}\\n.rc-tooltip-zoom-leave {\\n  -webkit-animation-duration: 0.3s;\\n          animation-duration: 0.3s;\\n  -webkit-animation-fill-mode: both;\\n          animation-fill-mode: both;\\n  -webkit-animation-timing-function: cubic-bezier(0.6, -0.3, 0.74, 0.05);\\n          animation-timing-function: cubic-bezier(0.6, -0.3, 0.74, 0.05);\\n  -webkit-animation-play-state: paused;\\n          animation-play-state: paused;\\n}\\n.rc-tooltip-zoom-enter.rc-tooltip-zoom-enter-active,\\n.rc-tooltip-zoom-appear.rc-tooltip-zoom-appear-active {\\n  -webkit-animation-name: rcToolTipZoomIn;\\n          animation-name: rcToolTipZoomIn;\\n  -webkit-animation-play-state: running;\\n          animation-play-state: running;\\n}\\n.rc-tooltip-zoom-leave.rc-tooltip-zoom-leave-active {\\n  -webkit-animation-name: rcToolTipZoomOut;\\n          animation-name: rcToolTipZoomOut;\\n  -webkit-animation-play-state: running;\\n          animation-play-state: running;\\n}\\n@-webkit-keyframes rcToolTipZoomIn {\\n  0% {\\n    opacity: 0;\\n    -webkit-transform-origin: 50% 50%;\\n            transform-origin: 50% 50%;\\n    -webkit-transform: scale(0, 0);\\n            transform: scale(0, 0);\\n  }\\n  100% {\\n    opacity: 1;\\n    -webkit-transform-origin: 50% 50%;\\n            transform-origin: 50% 50%;\\n    -webkit-transform: scale(1, 1);\\n            transform: scale(1, 1);\\n  }\\n}\\n@keyframes rcToolTipZoomIn {\\n  0% {\\n    opacity: 0;\\n    -webkit-transform-origin: 50% 50%;\\n            transform-origin: 50% 50%;\\n    -webkit-transform: scale(0, 0);\\n            transform: scale(0, 0);\\n  }\\n  100% {\\n    opacity: 1;\\n    -webkit-transform-origin: 50% 50%;\\n            transform-origin: 50% 50%;\\n    -webkit-transform: scale(1, 1);\\n            transform: scale(1, 1);\\n  }\\n}\\n@-webkit-keyframes rcToolTipZoomOut {\\n  0% {\\n    opacity: 1;\\n    -webkit-transform-origin: 50% 50%;\\n            transform-origin: 50% 50%;\\n    -webkit-transform: scale(1, 1);\\n            transform: scale(1, 1);\\n  }\\n  100% {\\n    opacity: 0;\\n    -webkit-transform-origin: 50% 50%;\\n            transform-origin: 50% 50%;\\n    -webkit-transform: scale(0, 0);\\n            transform: scale(0, 0);\\n  }\\n}\\n@keyframes rcToolTipZoomOut {\\n  0% {\\n    opacity: 1;\\n    -webkit-transform-origin: 50% 50%;\\n            transform-origin: 50% 50%;\\n    -webkit-transform: scale(1, 1);\\n            transform: scale(1, 1);\\n  }\\n  100% {\\n    opacity: 0;\\n    -webkit-transform-origin: 50% 50%;\\n            transform-origin: 50% 50%;\\n    -webkit-transform: scale(0, 0);\\n            transform: scale(0, 0);\\n  }\\n}\\n.rc-tooltip {\\n  position: absolute;\\n  z-index: 1070;\\n  display: block;\\n  visibility: visible;\\n  line-height: 1.5;\\n  font-size: 12px;\\n  background-color: rgba(0, 0, 0, 0.05);\\n  padding: 1px;\\n  opacity: 0.9;\\n}\\n.rc-tooltip-hidden {\\n  display: none;\\n}\\n.rc-tooltip-inner {\\n  padding: 8px 10px;\\n  color: #333333;\\n  text-align: left;\\n  text-decoration: none;\\n  background-color: #ffffff;\\n  border-radius: 3px;\\n  min-height: 34px;\\n  border: 1px solid #b1b1b1;\\n}\\n.rc-tooltip-arrow,\\n.rc-tooltip-arrow-inner {\\n  position: absolute;\\n  width: 0;\\n  height: 0;\\n  border-color: transparent;\\n  border-style: solid;\\n}\\n.rc-tooltip-placement-top .rc-tooltip-arrow,\\n.rc-tooltip-placement-topLeft .rc-tooltip-arrow,\\n.rc-tooltip-placement-topRight .rc-tooltip-arrow {\\n  bottom: -5px;\\n  margin-left: -6px;\\n  border-width: 6px 6px 0;\\n  border-top-color: #b1b1b1;\\n}\\n.rc-tooltip-placement-top .rc-tooltip-arrow-inner,\\n.rc-tooltip-placement-topLeft .rc-tooltip-arrow-inner,\\n.rc-tooltip-placement-topRight .rc-tooltip-arrow-inner {\\n  bottom: 1px;\\n  margin-left: -6px;\\n  border-width: 6px 6px 0;\\n  border-top-color: #ffffff;\\n}\\n.rc-tooltip-placement-top .rc-tooltip-arrow {\\n  left: 50%;\\n}\\n.rc-tooltip-placement-topLeft .rc-tooltip-arrow {\\n  left: 15%;\\n}\\n.rc-tooltip-placement-topRight .rc-tooltip-arrow {\\n  right: 15%;\\n}\\n.rc-tooltip-placement-right .rc-tooltip-arrow,\\n.rc-tooltip-placement-rightTop .rc-tooltip-arrow,\\n.rc-tooltip-placement-rightBottom .rc-tooltip-arrow {\\n  left: -5px;\\n  margin-top: -6px;\\n  border-width: 6px 6px 6px 0;\\n  border-right-color: #b1b1b1;\\n}\\n.rc-tooltip-placement-right .rc-tooltip-arrow-inner,\\n.rc-tooltip-placement-rightTop .rc-tooltip-arrow-inner,\\n.rc-tooltip-placement-rightBottom .rc-tooltip-arrow-inner {\\n  left: 1px;\\n  margin-top: -6px;\\n  border-width: 6px 6px 6px 0;\\n  border-right-color: #ffffff;\\n}\\n.rc-tooltip-placement-right .rc-tooltip-arrow {\\n  top: 50%;\\n}\\n.rc-tooltip-placement-rightTop .rc-tooltip-arrow {\\n  top: 15%;\\n  margin-top: 0;\\n}\\n.rc-tooltip-placement-rightBottom .rc-tooltip-arrow {\\n  bottom: 15%;\\n}\\n.rc-tooltip-placement-left .rc-tooltip-arrow,\\n.rc-tooltip-placement-leftTop .rc-tooltip-arrow,\\n.rc-tooltip-placement-leftBottom .rc-tooltip-arrow {\\n  right: -5px;\\n  margin-top: -6px;\\n  border-width: 6px 0 6px 6px;\\n  border-left-color: #b1b1b1;\\n}\\n.rc-tooltip-placement-left .rc-tooltip-arrow-inner,\\n.rc-tooltip-placement-leftTop .rc-tooltip-arrow-inner,\\n.rc-tooltip-placement-leftBottom .rc-tooltip-arrow-inner {\\n  right: 1px;\\n  margin-top: -6px;\\n  border-width: 6px 0 6px 6px;\\n  border-left-color: #ffffff;\\n}\\n.rc-tooltip-placement-left .rc-tooltip-arrow {\\n  top: 50%;\\n}\\n.rc-tooltip-placement-leftTop .rc-tooltip-arrow {\\n  top: 15%;\\n  margin-top: 0;\\n}\\n.rc-tooltip-placement-leftBottom .rc-tooltip-arrow {\\n  bottom: 15%;\\n}\\n.rc-tooltip-placement-bottom .rc-tooltip-arrow,\\n.rc-tooltip-placement-bottomLeft .rc-tooltip-arrow,\\n.rc-tooltip-placement-bottomRight .rc-tooltip-arrow {\\n  top: -5px;\\n  margin-left: -6px;\\n  border-width: 0 6px 6px;\\n  border-bottom-color: #b1b1b1;\\n}\\n.rc-tooltip-placement-bottom .rc-tooltip-arrow-inner,\\n.rc-tooltip-placement-bottomLeft .rc-tooltip-arrow-inner,\\n.rc-tooltip-placement-bottomRight .rc-tooltip-arrow-inner {\\n  top: 1px;\\n  margin-left: -6px;\\n  border-width: 0 6px 6px;\\n  border-bottom-color: #ffffff;\\n}\\n.rc-tooltip-placement-bottom .rc-tooltip-arrow {\\n  left: 50%;\\n}\\n.rc-tooltip-placement-bottomLeft .rc-tooltip-arrow {\\n  left: 15%;\\n}\\n.rc-tooltip-placement-bottomRight .rc-tooltip-arrow {\\n  right: 15%;\\n}\\n\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader!./node_modules/rc-tooltip/assets/bootstrap_white.css\n// module id = 183\n// module chunks = 0"],"sourceRoot":""}