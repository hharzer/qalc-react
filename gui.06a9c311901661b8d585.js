/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 142);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (true) {
  module.exports = __webpack_require__(32);
} else {}


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(process, global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "$mobx", function() { return $mobx; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlowCancellationError", function() { return FlowCancellationError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IDerivationState", function() { return IDerivationState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObservableMap", function() { return ObservableMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObservableSet", function() { return ObservableSet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Reaction", function() { return Reaction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_allowStateChanges", function() { return allowStateChanges; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_allowStateChangesInsideComputed", function() { return allowStateChangesInsideComputed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_allowStateReadsEnd", function() { return allowStateReadsEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_allowStateReadsStart", function() { return allowStateReadsStart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_endAction", function() { return _endAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_getAdministration", function() { return getAdministration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_getGlobalState", function() { return getGlobalState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_interceptReads", function() { return interceptReads; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_isComputingDerivation", function() { return isComputingDerivation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_resetGlobalState", function() { return resetGlobalState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_startAction", function() { return _startAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "action", function() { return action; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "autorun", function() { return autorun; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comparer", function() { return comparer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computed", function() { return computed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "configure", function() { return configure; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createAtom", function() { return createAtom; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decorate", function() { return decorate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "entries", function() { return entries; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extendObservable", function() { return extendObservable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flow", function() { return flow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "get", function() { return get; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getAtom", function() { return getAtom; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDebugName", function() { return getDebugName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDependencyTree", function() { return getDependencyTree; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getObserverTree", function() { return getObserverTree; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "has", function() { return has; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intercept", function() { return intercept; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isAction", function() { return isAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isArrayLike", function() { return isArrayLike; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isBoxedObservable", function() { return isObservableValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isComputed", function() { return isComputed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isComputedProp", function() { return isComputedProp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFlowCancellationError", function() { return isFlowCancellationError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObservable", function() { return isObservable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObservableArray", function() { return isObservableArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObservableMap", function() { return isObservableMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObservableObject", function() { return isObservableObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObservableProp", function() { return isObservableProp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObservableSet", function() { return isObservableSet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keys", function() { return keys; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "observable", function() { return observable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "observe", function() { return observe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onBecomeObserved", function() { return onBecomeObserved; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onBecomeUnobserved", function() { return onBecomeUnobserved; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onReactionError", function() { return onReactionError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reaction", function() { return reaction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "remove", function() { return remove; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "runInAction", function() { return runInAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "spy", function() { return spy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toJS", function() { return toJS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trace", function() { return trace; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transaction", function() { return transaction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "untracked", function() { return untracked; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "values", function() { return values; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "when", function() { return when; });
/** MobX - (c) Michel Weststrate 2015 - 2020 - MIT Licensed */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __values(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

var OBFUSCATED_ERROR = "An invariant failed, however the error is obfuscated because this is a production build.";
var EMPTY_ARRAY = [];
Object.freeze(EMPTY_ARRAY);
var EMPTY_OBJECT = {};
Object.freeze(EMPTY_OBJECT);
function getNextId() {
    return ++globalState.mobxGuid;
}
function fail(message) {
    invariant(false, message);
    throw "X"; // unreachable
}
function invariant(check, message) {
    if (!check)
        throw new Error("[mobx] " + (message || OBFUSCATED_ERROR));
}
/**
 * Prints a deprecation message, but only one time.
 * Returns false if the deprecated message was already printed before
 */
var deprecatedMessages = [];
function deprecated(msg, thing) {
    if (true)
        return false;
    if (thing) {
        return deprecated("'" + msg + "', use '" + thing + "' instead.");
    }
    if (deprecatedMessages.indexOf(msg) !== -1)
        return false;
    deprecatedMessages.push(msg);
    console.error("[mobx] Deprecated: " + msg);
    return true;
}
/**
 * Makes sure that the provided function is invoked at most once.
 */
function once(func) {
    var invoked = false;
    return function () {
        if (invoked)
            return;
        invoked = true;
        return func.apply(this, arguments);
    };
}
var noop = function () { };
function unique(list) {
    var res = [];
    list.forEach(function (item) {
        if (res.indexOf(item) === -1)
            res.push(item);
    });
    return res;
}
function isObject(value) {
    return value !== null && typeof value === "object";
}
function isPlainObject(value) {
    if (value === null || typeof value !== "object")
        return false;
    var proto = Object.getPrototypeOf(value);
    return proto === Object.prototype || proto === null;
}
function addHiddenProp(object, propName, value) {
    Object.defineProperty(object, propName, {
        enumerable: false,
        writable: true,
        configurable: true,
        value: value
    });
}
function addHiddenFinalProp(object, propName, value) {
    Object.defineProperty(object, propName, {
        enumerable: false,
        writable: false,
        configurable: true,
        value: value
    });
}
function isPropertyConfigurable(object, prop) {
    var descriptor = Object.getOwnPropertyDescriptor(object, prop);
    return !descriptor || (descriptor.configurable !== false && descriptor.writable !== false);
}
function assertPropertyConfigurable(object, prop) {
    if (false)
        {}
}
function createInstanceofPredicate(name, clazz) {
    var propName = "isMobX" + name;
    clazz.prototype[propName] = true;
    return function (x) {
        return isObject(x) && x[propName] === true;
    };
}
/**
 * Returns whether the argument is an array, disregarding observability.
 */
function isArrayLike(x) {
    return Array.isArray(x) || isObservableArray(x);
}
function isES6Map(thing) {
    return thing instanceof Map;
}
function isES6Set(thing) {
    return thing instanceof Set;
}
/**
 * Returns the following: own keys, prototype keys & own symbol keys, if they are enumerable.
 */
function getPlainObjectKeys(object) {
    var enumerables = new Set();
    for (var key in object)
        enumerables.add(key); // *all* enumerables
    Object.getOwnPropertySymbols(object).forEach(function (k) {
        if (Object.getOwnPropertyDescriptor(object, k).enumerable)
            enumerables.add(k);
    }); // *own* symbols
    // Note: this implementation is missing enumerable, inherited, symbolic property names! That would however pretty expensive to add,
    // as there is no efficient iterator that returns *all* properties
    return Array.from(enumerables);
}
function stringifyKey(key) {
    if (key && key.toString)
        return key.toString();
    else
        return new String(key).toString();
}
function getMapLikeKeys(map) {
    if (isPlainObject(map))
        return Object.keys(map);
    if (Array.isArray(map))
        return map.map(function (_a) {
            var _b = __read(_a, 1), key = _b[0];
            return key;
        });
    if (isES6Map(map) || isObservableMap(map))
        return Array.from(map.keys());
    return fail("Cannot get keys from '" + map + "'");
}
function toPrimitive(value) {
    return value === null ? null : typeof value === "object" ? "" + value : value;
}

var $mobx = Symbol("mobx administration");
var Atom = /** @class */ (function () {
    /**
     * Create a new atom. For debugging purposes it is recommended to give it a name.
     * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.
     */
    function Atom(name) {
        if (name === void 0) { name = "Atom@" + getNextId(); }
        this.name = name;
        this.isPendingUnobservation = false; // for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it's not needed
        this.isBeingObserved = false;
        this.observers = new Set();
        this.diffValue = 0;
        this.lastAccessedBy = 0;
        this.lowestObserverState = IDerivationState.NOT_TRACKING;
    }
    Atom.prototype.onBecomeObserved = function () {
        if (this.onBecomeObservedListeners) {
            this.onBecomeObservedListeners.forEach(function (listener) { return listener(); });
        }
    };
    Atom.prototype.onBecomeUnobserved = function () {
        if (this.onBecomeUnobservedListeners) {
            this.onBecomeUnobservedListeners.forEach(function (listener) { return listener(); });
        }
    };
    /**
     * Invoke this method to notify mobx that your atom has been used somehow.
     * Returns true if there is currently a reactive context.
     */
    Atom.prototype.reportObserved = function () {
        return reportObserved(this);
    };
    /**
     * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.
     */
    Atom.prototype.reportChanged = function () {
        startBatch();
        propagateChanged(this);
        endBatch();
    };
    Atom.prototype.toString = function () {
        return this.name;
    };
    return Atom;
}());
var isAtom = createInstanceofPredicate("Atom", Atom);
function createAtom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {
    if (onBecomeObservedHandler === void 0) { onBecomeObservedHandler = noop; }
    if (onBecomeUnobservedHandler === void 0) { onBecomeUnobservedHandler = noop; }
    var atom = new Atom(name);
    // default `noop` listener will not initialize the hook Set
    if (onBecomeObservedHandler !== noop) {
        onBecomeObserved(atom, onBecomeObservedHandler);
    }
    if (onBecomeUnobservedHandler !== noop) {
        onBecomeUnobserved(atom, onBecomeUnobservedHandler);
    }
    return atom;
}

function identityComparer(a, b) {
    return a === b;
}
function structuralComparer(a, b) {
    return deepEqual(a, b);
}
function shallowComparer(a, b) {
    return deepEqual(a, b, 1);
}
function defaultComparer(a, b) {
    return Object.is(a, b);
}
var comparer = {
    identity: identityComparer,
    structural: structuralComparer,
    default: defaultComparer,
    shallow: shallowComparer
};

var mobxDidRunLazyInitializersSymbol = Symbol("mobx did run lazy initializers");
var mobxPendingDecorators = Symbol("mobx pending decorators");
var enumerableDescriptorCache = {};
var nonEnumerableDescriptorCache = {};
function createPropertyInitializerDescriptor(prop, enumerable) {
    var cache = enumerable ? enumerableDescriptorCache : nonEnumerableDescriptorCache;
    return (cache[prop] ||
        (cache[prop] = {
            configurable: true,
            enumerable: enumerable,
            get: function () {
                initializeInstance(this);
                return this[prop];
            },
            set: function (value) {
                initializeInstance(this);
                this[prop] = value;
            }
        }));
}
function initializeInstance(target) {
    var e_1, _a;
    if (target[mobxDidRunLazyInitializersSymbol] === true)
        return;
    var decorators = target[mobxPendingDecorators];
    if (decorators) {
        addHiddenProp(target, mobxDidRunLazyInitializersSymbol, true);
        // Build property key array from both strings and symbols
        var keys = __spread(Object.getOwnPropertySymbols(decorators), Object.keys(decorators));
        try {
            for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                var key = keys_1_1.value;
                var d = decorators[key];
                d.propertyCreator(target, d.prop, d.descriptor, d.decoratorTarget, d.decoratorArguments);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
}
function createPropDecorator(propertyInitiallyEnumerable, propertyCreator) {
    return function decoratorFactory() {
        var decoratorArguments;
        var decorator = function decorate(target, prop, descriptor, applyImmediately
        // This is a special parameter to signal the direct application of a decorator, allow extendObservable to skip the entire type decoration part,
        // as the instance to apply the decorator to equals the target
        ) {
            if (applyImmediately === true) {
                propertyCreator(target, prop, descriptor, target, decoratorArguments);
                return null;
            }
            if (false)
                {}
            if (!Object.prototype.hasOwnProperty.call(target, mobxPendingDecorators)) {
                var inheritedDecorators = target[mobxPendingDecorators];
                addHiddenProp(target, mobxPendingDecorators, __assign({}, inheritedDecorators));
            }
            target[mobxPendingDecorators][prop] = {
                prop: prop,
                propertyCreator: propertyCreator,
                descriptor: descriptor,
                decoratorTarget: target,
                decoratorArguments: decoratorArguments
            };
            return createPropertyInitializerDescriptor(prop, propertyInitiallyEnumerable);
        };
        if (quacksLikeADecorator(arguments)) {
            // @decorator
            decoratorArguments = EMPTY_ARRAY;
            return decorator.apply(null, arguments);
        }
        else {
            // @decorator(args)
            decoratorArguments = Array.prototype.slice.call(arguments);
            return decorator;
        }
    };
}
function quacksLikeADecorator(args) {
    return (((args.length === 2 || args.length === 3) &&
        (typeof args[1] === "string" || typeof args[1] === "symbol")) ||
        (args.length === 4 && args[3] === true));
}

function deepEnhancer(v, _, name) {
    // it is an observable already, done
    if (isObservable(v))
        return v;
    // something that can be converted and mutated?
    if (Array.isArray(v))
        return observable.array(v, { name: name });
    if (isPlainObject(v))
        return observable.object(v, undefined, { name: name });
    if (isES6Map(v))
        return observable.map(v, { name: name });
    if (isES6Set(v))
        return observable.set(v, { name: name });
    return v;
}
function shallowEnhancer(v, _, name) {
    if (v === undefined || v === null)
        return v;
    if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v) || isObservableSet(v))
        return v;
    if (Array.isArray(v))
        return observable.array(v, { name: name, deep: false });
    if (isPlainObject(v))
        return observable.object(v, undefined, { name: name, deep: false });
    if (isES6Map(v))
        return observable.map(v, { name: name, deep: false });
    if (isES6Set(v))
        return observable.set(v, { name: name, deep: false });
    return fail( false &&
        false);
}
function referenceEnhancer(newValue) {
    // never turn into an observable
    return newValue;
}
function refStructEnhancer(v, oldValue, name) {
    if (false)
        {}
    if (deepEqual(v, oldValue))
        return oldValue;
    return v;
}

function createDecoratorForEnhancer(enhancer) {
    invariant(enhancer);
    var decorator = createPropDecorator(true, function (target, propertyName, descriptor, _decoratorTarget, decoratorArgs) {
        if (false) {}
        var initialValue = descriptor
            ? descriptor.initializer
                ? descriptor.initializer.call(target)
                : descriptor.value
            : undefined;
        asObservableObject(target).addObservableProp(propertyName, initialValue, enhancer);
    });
    var res = 
    // Extra process checks, as this happens during module initialization
    typeof process !== "undefined" && process.env && "production" !== "production"
        ? function observableDecorator() {
            // This wrapper function is just to detect illegal decorator invocations, deprecate in a next version
            // and simply return the created prop decorator
            if (arguments.length < 2)
                return fail("Incorrect decorator invocation. @observable decorator doesn't expect any arguments");
            return decorator.apply(null, arguments);
        }
        : decorator;
    res.enhancer = enhancer;
    return res;
}

// Predefined bags of create observable options, to avoid allocating temporarily option objects
// in the majority of cases
var defaultCreateObservableOptions = {
    deep: true,
    name: undefined,
    defaultDecorator: undefined,
    proxy: true
};
Object.freeze(defaultCreateObservableOptions);
function assertValidOption(key) {
    if (!/^(deep|name|equals|defaultDecorator|proxy)$/.test(key))
        fail("invalid option for (extend)observable: " + key);
}
function asCreateObservableOptions(thing) {
    if (thing === null || thing === undefined)
        return defaultCreateObservableOptions;
    if (typeof thing === "string")
        return { name: thing, deep: true, proxy: true };
    if (false) {}
    return thing;
}
var deepDecorator = createDecoratorForEnhancer(deepEnhancer);
var shallowDecorator = createDecoratorForEnhancer(shallowEnhancer);
var refDecorator = createDecoratorForEnhancer(referenceEnhancer);
var refStructDecorator = createDecoratorForEnhancer(refStructEnhancer);
function getEnhancerFromOptions(options) {
    return options.defaultDecorator
        ? options.defaultDecorator.enhancer
        : options.deep === false
            ? referenceEnhancer
            : deepEnhancer;
}
/**
 * Turns an object, array or function into a reactive structure.
 * @param v the value which should become observable.
 */
function createObservable(v, arg2, arg3) {
    // @observable someProp;
    if (typeof arguments[1] === "string" || typeof arguments[1] === "symbol") {
        return deepDecorator.apply(null, arguments);
    }
    // it is an observable already, done
    if (isObservable(v))
        return v;
    // something that can be converted and mutated?
    var res = isPlainObject(v)
        ? observable.object(v, arg2, arg3)
        : Array.isArray(v)
            ? observable.array(v, arg2)
            : isES6Map(v)
                ? observable.map(v, arg2)
                : isES6Set(v)
                    ? observable.set(v, arg2)
                    : v;
    // this value could be converted to a new observable data structure, return it
    if (res !== v)
        return res;
    // otherwise, just box it
    fail( false &&
        false);
}
var observableFactories = {
    box: function (value, options) {
        if (arguments.length > 2)
            incorrectlyUsedAsDecorator("box");
        var o = asCreateObservableOptions(options);
        return new ObservableValue(value, getEnhancerFromOptions(o), o.name, true, o.equals);
    },
    array: function (initialValues, options) {
        if (arguments.length > 2)
            incorrectlyUsedAsDecorator("array");
        var o = asCreateObservableOptions(options);
        return createObservableArray(initialValues, getEnhancerFromOptions(o), o.name);
    },
    map: function (initialValues, options) {
        if (arguments.length > 2)
            incorrectlyUsedAsDecorator("map");
        var o = asCreateObservableOptions(options);
        return new ObservableMap(initialValues, getEnhancerFromOptions(o), o.name);
    },
    set: function (initialValues, options) {
        if (arguments.length > 2)
            incorrectlyUsedAsDecorator("set");
        var o = asCreateObservableOptions(options);
        return new ObservableSet(initialValues, getEnhancerFromOptions(o), o.name);
    },
    object: function (props, decorators, options) {
        if (typeof arguments[1] === "string")
            incorrectlyUsedAsDecorator("object");
        var o = asCreateObservableOptions(options);
        if (o.proxy === false) {
            return extendObservable({}, props, decorators, o);
        }
        else {
            var defaultDecorator = getDefaultDecoratorFromObjectOptions(o);
            var base = extendObservable({}, undefined, undefined, o);
            var proxy = createDynamicObservableObject(base);
            extendObservableObjectWithProperties(proxy, props, decorators, defaultDecorator);
            return proxy;
        }
    },
    ref: refDecorator,
    shallow: shallowDecorator,
    deep: deepDecorator,
    struct: refStructDecorator
};
var observable = createObservable;
// weird trick to keep our typings nicely with our funcs, and still extend the observable function
Object.keys(observableFactories).forEach(function (name) { return (observable[name] = observableFactories[name]); });
function incorrectlyUsedAsDecorator(methodName) {
    fail(
    // process.env.NODE_ENV !== "production" &&
    "Expected one or two arguments to observable." + methodName + ". Did you accidentally try to use observable." + methodName + " as decorator?");
}

var computedDecorator = createPropDecorator(false, function (instance, propertyName, descriptor, decoratorTarget, decoratorArgs) {
    var get = descriptor.get, set = descriptor.set; // initialValue is the descriptor for get / set props
    // Optimization: faster on decorator target or instance? Assuming target
    // Optimization: find out if declaring on instance isn't just faster. (also makes the property descriptor simpler). But, more memory usage..
    // Forcing instance now, fixes hot reloadig issues on React Native:
    var options = decoratorArgs[0] || {};
    asObservableObject(instance).addComputedProp(instance, propertyName, __assign({ get: get,
        set: set, context: instance }, options));
});
var computedStructDecorator = computedDecorator({ equals: comparer.structural });
/**
 * Decorator for class properties: @computed get value() { return expr; }.
 * For legacy purposes also invokable as ES5 observable created: `computed(() => expr)`;
 */
var computed = function computed(arg1, arg2, arg3) {
    if (typeof arg2 === "string") {
        // @computed
        return computedDecorator.apply(null, arguments);
    }
    if (arg1 !== null && typeof arg1 === "object" && arguments.length === 1) {
        // @computed({ options })
        return computedDecorator.apply(null, arguments);
    }
    // computed(expr, options?)
    if (false) {}
    var opts = typeof arg2 === "object" ? arg2 : {};
    opts.get = arg1;
    opts.set = typeof arg2 === "function" ? arg2 : opts.set;
    opts.name = opts.name || arg1.name || ""; /* for generated name */
    return new ComputedValue(opts);
};
computed.struct = computedStructDecorator;

var IDerivationState;
(function (IDerivationState) {
    // before being run or (outside batch and not being observed)
    // at this point derivation is not holding any data about dependency tree
    IDerivationState[IDerivationState["NOT_TRACKING"] = -1] = "NOT_TRACKING";
    // no shallow dependency changed since last computation
    // won't recalculate derivation
    // this is what makes mobx fast
    IDerivationState[IDerivationState["UP_TO_DATE"] = 0] = "UP_TO_DATE";
    // some deep dependency changed, but don't know if shallow dependency changed
    // will require to check first if UP_TO_DATE or POSSIBLY_STALE
    // currently only ComputedValue will propagate POSSIBLY_STALE
    //
    // having this state is second big optimization:
    // don't have to recompute on every dependency change, but only when it's needed
    IDerivationState[IDerivationState["POSSIBLY_STALE"] = 1] = "POSSIBLY_STALE";
    // A shallow dependency has changed since last computation and the derivation
    // will need to recompute when it's needed next.
    IDerivationState[IDerivationState["STALE"] = 2] = "STALE";
})(IDerivationState || (IDerivationState = {}));
var TraceMode;
(function (TraceMode) {
    TraceMode[TraceMode["NONE"] = 0] = "NONE";
    TraceMode[TraceMode["LOG"] = 1] = "LOG";
    TraceMode[TraceMode["BREAK"] = 2] = "BREAK";
})(TraceMode || (TraceMode = {}));
var CaughtException = /** @class */ (function () {
    function CaughtException(cause) {
        this.cause = cause;
        // Empty
    }
    return CaughtException;
}());
function isCaughtException(e) {
    return e instanceof CaughtException;
}
/**
 * Finds out whether any dependency of the derivation has actually changed.
 * If dependenciesState is 1 then it will recalculate dependencies,
 * if any dependency changed it will propagate it by changing dependenciesState to 2.
 *
 * By iterating over the dependencies in the same order that they were reported and
 * stopping on the first change, all the recalculations are only called for ComputedValues
 * that will be tracked by derivation. That is because we assume that if the first x
 * dependencies of the derivation doesn't change then the derivation should run the same way
 * up until accessing x-th dependency.
 */
function shouldCompute(derivation) {
    switch (derivation.dependenciesState) {
        case IDerivationState.UP_TO_DATE:
            return false;
        case IDerivationState.NOT_TRACKING:
        case IDerivationState.STALE:
            return true;
        case IDerivationState.POSSIBLY_STALE: {
            // state propagation can occur outside of action/reactive context #2195
            var prevAllowStateReads = allowStateReadsStart(true);
            var prevUntracked = untrackedStart(); // no need for those computeds to be reported, they will be picked up in trackDerivedFunction.
            var obs = derivation.observing, l = obs.length;
            for (var i = 0; i < l; i++) {
                var obj = obs[i];
                if (isComputedValue(obj)) {
                    if (globalState.disableErrorBoundaries) {
                        obj.get();
                    }
                    else {
                        try {
                            obj.get();
                        }
                        catch (e) {
                            // we are not interested in the value *or* exception at this moment, but if there is one, notify all
                            untrackedEnd(prevUntracked);
                            allowStateReadsEnd(prevAllowStateReads);
                            return true;
                        }
                    }
                    // if ComputedValue `obj` actually changed it will be computed and propagated to its observers.
                    // and `derivation` is an observer of `obj`
                    // invariantShouldCompute(derivation)
                    if (derivation.dependenciesState === IDerivationState.STALE) {
                        untrackedEnd(prevUntracked);
                        allowStateReadsEnd(prevAllowStateReads);
                        return true;
                    }
                }
            }
            changeDependenciesStateTo0(derivation);
            untrackedEnd(prevUntracked);
            allowStateReadsEnd(prevAllowStateReads);
            return false;
        }
    }
}
// function invariantShouldCompute(derivation: IDerivation) {
//     const newDepState = (derivation as any).dependenciesState
//     if (
//         process.env.NODE_ENV === "production" &&
//         (newDepState === IDerivationState.POSSIBLY_STALE ||
//             newDepState === IDerivationState.NOT_TRACKING)
//     )
//         fail("Illegal dependency state")
// }
function isComputingDerivation() {
    return globalState.trackingDerivation !== null; // filter out actions inside computations
}
function checkIfStateModificationsAreAllowed(atom) {
    var hasObservers = atom.observers.size > 0;
    // Should never be possible to change an observed observable from inside computed, see #798
    if (globalState.computationDepth > 0 && hasObservers)
        fail( false &&
            false);
    // Should not be possible to change observed state outside strict mode, except during initialization, see #563
    if (!globalState.allowStateChanges && (hasObservers || globalState.enforceActions === "strict"))
        fail( false &&
            false);
}
function checkIfStateReadsAreAllowed(observable) {
    if (false) {}
}
/**
 * Executes the provided function `f` and tracks which observables are being accessed.
 * The tracking information is stored on the `derivation` object and the derivation is registered
 * as observer of any of the accessed observables.
 */
function trackDerivedFunction(derivation, f, context) {
    var prevAllowStateReads = allowStateReadsStart(true);
    // pre allocate array allocation + room for variation in deps
    // array will be trimmed by bindDependencies
    changeDependenciesStateTo0(derivation);
    derivation.newObserving = new Array(derivation.observing.length + 100);
    derivation.unboundDepsCount = 0;
    derivation.runId = ++globalState.runId;
    var prevTracking = globalState.trackingDerivation;
    globalState.trackingDerivation = derivation;
    var result;
    if (globalState.disableErrorBoundaries === true) {
        result = f.call(context);
    }
    else {
        try {
            result = f.call(context);
        }
        catch (e) {
            result = new CaughtException(e);
        }
    }
    globalState.trackingDerivation = prevTracking;
    bindDependencies(derivation);
    warnAboutDerivationWithoutDependencies(derivation);
    allowStateReadsEnd(prevAllowStateReads);
    return result;
}
function warnAboutDerivationWithoutDependencies(derivation) {
    if (true)
        return;
    if (derivation.observing.length !== 0)
        return;
    if (globalState.reactionRequiresObservable || derivation.requiresObservable) {
        console.warn("[mobx] Derivation " + derivation.name + " is created/updated without reading any observable value");
    }
}
/**
 * diffs newObserving with observing.
 * update observing to be newObserving with unique observables
 * notify observers that become observed/unobserved
 */
function bindDependencies(derivation) {
    // invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, "INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1");
    var prevObserving = derivation.observing;
    var observing = (derivation.observing = derivation.newObserving);
    var lowestNewObservingDerivationState = IDerivationState.UP_TO_DATE;
    // Go through all new observables and check diffValue: (this list can contain duplicates):
    //   0: first occurrence, change to 1 and keep it
    //   1: extra occurrence, drop it
    var i0 = 0, l = derivation.unboundDepsCount;
    for (var i = 0; i < l; i++) {
        var dep = observing[i];
        if (dep.diffValue === 0) {
            dep.diffValue = 1;
            if (i0 !== i)
                observing[i0] = dep;
            i0++;
        }
        // Upcast is 'safe' here, because if dep is IObservable, `dependenciesState` will be undefined,
        // not hitting the condition
        if (dep.dependenciesState > lowestNewObservingDerivationState) {
            lowestNewObservingDerivationState = dep.dependenciesState;
        }
    }
    observing.length = i0;
    derivation.newObserving = null; // newObserving shouldn't be needed outside tracking (statement moved down to work around FF bug, see #614)
    // Go through all old observables and check diffValue: (it is unique after last bindDependencies)
    //   0: it's not in new observables, unobserve it
    //   1: it keeps being observed, don't want to notify it. change to 0
    l = prevObserving.length;
    while (l--) {
        var dep = prevObserving[l];
        if (dep.diffValue === 0) {
            removeObserver(dep, derivation);
        }
        dep.diffValue = 0;
    }
    // Go through all new observables and check diffValue: (now it should be unique)
    //   0: it was set to 0 in last loop. don't need to do anything.
    //   1: it wasn't observed, let's observe it. set back to 0
    while (i0--) {
        var dep = observing[i0];
        if (dep.diffValue === 1) {
            dep.diffValue = 0;
            addObserver(dep, derivation);
        }
    }
    // Some new observed derivations may become stale during this derivation computation
    // so they have had no chance to propagate staleness (#916)
    if (lowestNewObservingDerivationState !== IDerivationState.UP_TO_DATE) {
        derivation.dependenciesState = lowestNewObservingDerivationState;
        derivation.onBecomeStale();
    }
}
function clearObserving(derivation) {
    // invariant(globalState.inBatch > 0, "INTERNAL ERROR clearObserving should be called only inside batch");
    var obs = derivation.observing;
    derivation.observing = [];
    var i = obs.length;
    while (i--)
        removeObserver(obs[i], derivation);
    derivation.dependenciesState = IDerivationState.NOT_TRACKING;
}
function untracked(action) {
    var prev = untrackedStart();
    try {
        return action();
    }
    finally {
        untrackedEnd(prev);
    }
}
function untrackedStart() {
    var prev = globalState.trackingDerivation;
    globalState.trackingDerivation = null;
    return prev;
}
function untrackedEnd(prev) {
    globalState.trackingDerivation = prev;
}
function allowStateReadsStart(allowStateReads) {
    var prev = globalState.allowStateReads;
    globalState.allowStateReads = allowStateReads;
    return prev;
}
function allowStateReadsEnd(prev) {
    globalState.allowStateReads = prev;
}
/**
 * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0
 *
 */
function changeDependenciesStateTo0(derivation) {
    if (derivation.dependenciesState === IDerivationState.UP_TO_DATE)
        return;
    derivation.dependenciesState = IDerivationState.UP_TO_DATE;
    var obs = derivation.observing;
    var i = obs.length;
    while (i--)
        obs[i].lowestObserverState = IDerivationState.UP_TO_DATE;
}

// we don't use globalState for these in order to avoid possible issues with multiple
// mobx versions
var currentActionId = 0;
var nextActionId = 1;
var functionNameDescriptor = Object.getOwnPropertyDescriptor(function () { }, "name");
var isFunctionNameConfigurable = functionNameDescriptor && functionNameDescriptor.configurable;
function createAction(actionName, fn, ref) {
    if (false) {}
    var res = function () {
        return executeAction(actionName, fn, ref || this, arguments);
    };
    res.isMobxAction = true;
    if (false) {}
    return res;
}
function executeAction(actionName, fn, scope, args) {
    var runInfo = _startAction(actionName, scope, args);
    try {
        return fn.apply(scope, args);
    }
    catch (err) {
        runInfo.error = err;
        throw err;
    }
    finally {
        _endAction(runInfo);
    }
}
function _startAction(actionName, scope, args) {
    var notifySpy = isSpyEnabled() && !!actionName;
    var startTime = 0;
    if (notifySpy && "production" !== "production") {
        startTime = Date.now();
        var l = (args && args.length) || 0;
        var flattendArgs = new Array(l);
        if (l > 0)
            for (var i = 0; i < l; i++)
                flattendArgs[i] = args[i];
        spyReportStart({
            type: "action",
            name: actionName,
            object: scope,
            arguments: flattendArgs
        });
    }
    var prevDerivation = untrackedStart();
    startBatch();
    var prevAllowStateChanges = allowStateChangesStart(true);
    var prevAllowStateReads = allowStateReadsStart(true);
    var runInfo = {
        prevDerivation: prevDerivation,
        prevAllowStateChanges: prevAllowStateChanges,
        prevAllowStateReads: prevAllowStateReads,
        notifySpy: notifySpy,
        startTime: startTime,
        actionId: nextActionId++,
        parentActionId: currentActionId
    };
    currentActionId = runInfo.actionId;
    return runInfo;
}
function _endAction(runInfo) {
    if (currentActionId !== runInfo.actionId) {
        fail("invalid action stack. did you forget to finish an action?");
    }
    currentActionId = runInfo.parentActionId;
    if (runInfo.error !== undefined) {
        globalState.suppressReactionErrors = true;
    }
    allowStateChangesEnd(runInfo.prevAllowStateChanges);
    allowStateReadsEnd(runInfo.prevAllowStateReads);
    endBatch();
    untrackedEnd(runInfo.prevDerivation);
    if (runInfo.notifySpy && "production" !== "production") {
        spyReportEnd({ time: Date.now() - runInfo.startTime });
    }
    globalState.suppressReactionErrors = false;
}
function allowStateChanges(allowStateChanges, func) {
    var prev = allowStateChangesStart(allowStateChanges);
    var res;
    try {
        res = func();
    }
    finally {
        allowStateChangesEnd(prev);
    }
    return res;
}
function allowStateChangesStart(allowStateChanges) {
    var prev = globalState.allowStateChanges;
    globalState.allowStateChanges = allowStateChanges;
    return prev;
}
function allowStateChangesEnd(prev) {
    globalState.allowStateChanges = prev;
}
function allowStateChangesInsideComputed(func) {
    var prev = globalState.computationDepth;
    globalState.computationDepth = 0;
    var res;
    try {
        res = func();
    }
    finally {
        globalState.computationDepth = prev;
    }
    return res;
}

var ObservableValue = /** @class */ (function (_super) {
    __extends(ObservableValue, _super);
    function ObservableValue(value, enhancer, name, notifySpy, equals) {
        if (name === void 0) { name = "ObservableValue@" + getNextId(); }
        if (notifySpy === void 0) { notifySpy = true; }
        if (equals === void 0) { equals = comparer.default; }
        var _this = _super.call(this, name) || this;
        _this.enhancer = enhancer;
        _this.name = name;
        _this.equals = equals;
        _this.hasUnreportedChange = false;
        _this.value = enhancer(value, undefined, name);
        if (notifySpy && isSpyEnabled() && "production" !== "production") {
            // only notify spy if this is a stand-alone observable
            spyReport({ type: "create", name: _this.name, newValue: "" + _this.value });
        }
        return _this;
    }
    ObservableValue.prototype.dehanceValue = function (value) {
        if (this.dehancer !== undefined)
            return this.dehancer(value);
        return value;
    };
    ObservableValue.prototype.set = function (newValue) {
        var oldValue = this.value;
        newValue = this.prepareNewValue(newValue);
        if (newValue !== globalState.UNCHANGED) {
            var notifySpy = isSpyEnabled();
            if (notifySpy && "production" !== "production") {
                spyReportStart({
                    type: "update",
                    name: this.name,
                    newValue: newValue,
                    oldValue: oldValue
                });
            }
            this.setNewValue(newValue);
            if (notifySpy && "production" !== "production")
                spyReportEnd();
        }
    };
    ObservableValue.prototype.prepareNewValue = function (newValue) {
        checkIfStateModificationsAreAllowed(this);
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                object: this,
                type: "update",
                newValue: newValue
            });
            if (!change)
                return globalState.UNCHANGED;
            newValue = change.newValue;
        }
        // apply modifier
        newValue = this.enhancer(newValue, this.value, this.name);
        return this.equals(this.value, newValue) ? globalState.UNCHANGED : newValue;
    };
    ObservableValue.prototype.setNewValue = function (newValue) {
        var oldValue = this.value;
        this.value = newValue;
        this.reportChanged();
        if (hasListeners(this)) {
            notifyListeners(this, {
                type: "update",
                object: this,
                newValue: newValue,
                oldValue: oldValue
            });
        }
    };
    ObservableValue.prototype.get = function () {
        this.reportObserved();
        return this.dehanceValue(this.value);
    };
    ObservableValue.prototype.intercept = function (handler) {
        return registerInterceptor(this, handler);
    };
    ObservableValue.prototype.observe = function (listener, fireImmediately) {
        if (fireImmediately)
            listener({
                object: this,
                type: "update",
                newValue: this.value,
                oldValue: undefined
            });
        return registerListener(this, listener);
    };
    ObservableValue.prototype.toJSON = function () {
        return this.get();
    };
    ObservableValue.prototype.toString = function () {
        return this.name + "[" + this.value + "]";
    };
    ObservableValue.prototype.valueOf = function () {
        return toPrimitive(this.get());
    };
    ObservableValue.prototype[Symbol.toPrimitive] = function () {
        return this.valueOf();
    };
    return ObservableValue;
}(Atom));
var isObservableValue = createInstanceofPredicate("ObservableValue", ObservableValue);

/**
 * A node in the state dependency root that observes other nodes, and can be observed itself.
 *
 * ComputedValue will remember the result of the computation for the duration of the batch, or
 * while being observed.
 *
 * During this time it will recompute only when one of its direct dependencies changed,
 * but only when it is being accessed with `ComputedValue.get()`.
 *
 * Implementation description:
 * 1. First time it's being accessed it will compute and remember result
 *    give back remembered result until 2. happens
 * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.
 * 3. When it's being accessed, recompute if any shallow dependency changed.
 *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.
 *    go to step 2. either way
 *
 * If at any point it's outside batch and it isn't observed: reset everything and go to 1.
 */
var ComputedValue = /** @class */ (function () {
    /**
     * Create a new computed value based on a function expression.
     *
     * The `name` property is for debug purposes only.
     *
     * The `equals` property specifies the comparer function to use to determine if a newly produced
     * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`
     * compares based on identity comparison (===), and `structualComparer` deeply compares the structure.
     * Structural comparison can be convenient if you always produce a new aggregated object and
     * don't want to notify observers if it is structurally the same.
     * This is useful for working with vectors, mouse coordinates etc.
     */
    function ComputedValue(options) {
        this.dependenciesState = IDerivationState.NOT_TRACKING;
        this.observing = []; // nodes we are looking at. Our value depends on these nodes
        this.newObserving = null; // during tracking it's an array with new observed observers
        this.isBeingObserved = false;
        this.isPendingUnobservation = false;
        this.observers = new Set();
        this.diffValue = 0;
        this.runId = 0;
        this.lastAccessedBy = 0;
        this.lowestObserverState = IDerivationState.UP_TO_DATE;
        this.unboundDepsCount = 0;
        this.__mapid = "#" + getNextId();
        this.value = new CaughtException(null);
        this.isComputing = false; // to check for cycles
        this.isRunningSetter = false;
        this.isTracing = TraceMode.NONE;
        invariant(options.get, "missing option for computed: get");
        this.derivation = options.get;
        this.name = options.name || "ComputedValue@" + getNextId();
        if (options.set)
            this.setter = createAction(this.name + "-setter", options.set);
        this.equals =
            options.equals ||
                (options.compareStructural || options.struct
                    ? comparer.structural
                    : comparer.default);
        this.scope = options.context;
        this.requiresReaction = !!options.requiresReaction;
        this.keepAlive = !!options.keepAlive;
    }
    ComputedValue.prototype.onBecomeStale = function () {
        propagateMaybeChanged(this);
    };
    ComputedValue.prototype.onBecomeObserved = function () {
        if (this.onBecomeObservedListeners) {
            this.onBecomeObservedListeners.forEach(function (listener) { return listener(); });
        }
    };
    ComputedValue.prototype.onBecomeUnobserved = function () {
        if (this.onBecomeUnobservedListeners) {
            this.onBecomeUnobservedListeners.forEach(function (listener) { return listener(); });
        }
    };
    /**
     * Returns the current value of this computed value.
     * Will evaluate its computation first if needed.
     */
    ComputedValue.prototype.get = function () {
        if (this.isComputing)
            fail("Cycle detected in computation " + this.name + ": " + this.derivation);
        if (globalState.inBatch === 0 && this.observers.size === 0 && !this.keepAlive) {
            if (shouldCompute(this)) {
                this.warnAboutUntrackedRead();
                startBatch(); // See perf test 'computed memoization'
                this.value = this.computeValue(false);
                endBatch();
            }
        }
        else {
            reportObserved(this);
            if (shouldCompute(this))
                if (this.trackAndCompute())
                    propagateChangeConfirmed(this);
        }
        var result = this.value;
        if (isCaughtException(result))
            throw result.cause;
        return result;
    };
    ComputedValue.prototype.peek = function () {
        var res = this.computeValue(false);
        if (isCaughtException(res))
            throw res.cause;
        return res;
    };
    ComputedValue.prototype.set = function (value) {
        if (this.setter) {
            invariant(!this.isRunningSetter, "The setter of computed value '" + this.name + "' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?");
            this.isRunningSetter = true;
            try {
                this.setter.call(this.scope, value);
            }
            finally {
                this.isRunningSetter = false;
            }
        }
        else
            invariant(false,  false &&
                false);
    };
    ComputedValue.prototype.trackAndCompute = function () {
        if (isSpyEnabled() && "production" !== "production") {
            spyReport({
                object: this.scope,
                type: "compute",
                name: this.name
            });
        }
        var oldValue = this.value;
        var wasSuspended = 
        /* see #1208 */ this.dependenciesState === IDerivationState.NOT_TRACKING;
        var newValue = this.computeValue(true);
        var changed = wasSuspended ||
            isCaughtException(oldValue) ||
            isCaughtException(newValue) ||
            !this.equals(oldValue, newValue);
        if (changed) {
            this.value = newValue;
        }
        return changed;
    };
    ComputedValue.prototype.computeValue = function (track) {
        this.isComputing = true;
        globalState.computationDepth++;
        var res;
        if (track) {
            res = trackDerivedFunction(this, this.derivation, this.scope);
        }
        else {
            if (globalState.disableErrorBoundaries === true) {
                res = this.derivation.call(this.scope);
            }
            else {
                try {
                    res = this.derivation.call(this.scope);
                }
                catch (e) {
                    res = new CaughtException(e);
                }
            }
        }
        globalState.computationDepth--;
        this.isComputing = false;
        return res;
    };
    ComputedValue.prototype.suspend = function () {
        if (!this.keepAlive) {
            clearObserving(this);
            this.value = undefined; // don't hold on to computed value!
        }
    };
    ComputedValue.prototype.observe = function (listener, fireImmediately) {
        var _this = this;
        var firstTime = true;
        var prevValue = undefined;
        return autorun(function () {
            var newValue = _this.get();
            if (!firstTime || fireImmediately) {
                var prevU = untrackedStart();
                listener({
                    type: "update",
                    object: _this,
                    newValue: newValue,
                    oldValue: prevValue
                });
                untrackedEnd(prevU);
            }
            firstTime = false;
            prevValue = newValue;
        });
    };
    ComputedValue.prototype.warnAboutUntrackedRead = function () {
        if (true)
            return;
        if (this.requiresReaction === true) {
            fail("[mobx] Computed value " + this.name + " is read outside a reactive context");
        }
        if (this.isTracing !== TraceMode.NONE) {
            console.log("[mobx.trace] '" + this.name + "' is being read outside a reactive context. Doing a full recompute");
        }
        if (globalState.computedRequiresReaction) {
            console.warn("[mobx] Computed value " + this.name + " is being read outside a reactive context. Doing a full recompute");
        }
    };
    ComputedValue.prototype.toJSON = function () {
        return this.get();
    };
    ComputedValue.prototype.toString = function () {
        return this.name + "[" + this.derivation.toString() + "]";
    };
    ComputedValue.prototype.valueOf = function () {
        return toPrimitive(this.get());
    };
    ComputedValue.prototype[Symbol.toPrimitive] = function () {
        return this.valueOf();
    };
    return ComputedValue;
}());
var isComputedValue = createInstanceofPredicate("ComputedValue", ComputedValue);

/**
 * These values will persist if global state is reset
 */
var persistentKeys = [
    "mobxGuid",
    "spyListeners",
    "enforceActions",
    "computedRequiresReaction",
    "reactionRequiresObservable",
    "observableRequiresReaction",
    "allowStateReads",
    "disableErrorBoundaries",
    "runId",
    "UNCHANGED"
];
var MobXGlobals = /** @class */ (function () {
    function MobXGlobals() {
        /**
         * MobXGlobals version.
         * MobX compatiblity with other versions loaded in memory as long as this version matches.
         * It indicates that the global state still stores similar information
         *
         * N.B: this version is unrelated to the package version of MobX, and is only the version of the
         * internal state storage of MobX, and can be the same across many different package versions
         */
        this.version = 5;
        /**
         * globally unique token to signal unchanged
         */
        this.UNCHANGED = {};
        /**
         * Currently running derivation
         */
        this.trackingDerivation = null;
        /**
         * Are we running a computation currently? (not a reaction)
         */
        this.computationDepth = 0;
        /**
         * Each time a derivation is tracked, it is assigned a unique run-id
         */
        this.runId = 0;
        /**
         * 'guid' for general purpose. Will be persisted amongst resets.
         */
        this.mobxGuid = 0;
        /**
         * Are we in a batch block? (and how many of them)
         */
        this.inBatch = 0;
        /**
         * Observables that don't have observers anymore, and are about to be
         * suspended, unless somebody else accesses it in the same batch
         *
         * @type {IObservable[]}
         */
        this.pendingUnobservations = [];
        /**
         * List of scheduled, not yet executed, reactions.
         */
        this.pendingReactions = [];
        /**
         * Are we currently processing reactions?
         */
        this.isRunningReactions = false;
        /**
         * Is it allowed to change observables at this point?
         * In general, MobX doesn't allow that when running computations and React.render.
         * To ensure that those functions stay pure.
         */
        this.allowStateChanges = true;
        /**
         * Is it allowed to read observables at this point?
         * Used to hold the state needed for `observableRequiresReaction`
         */
        this.allowStateReads = true;
        /**
         * If strict mode is enabled, state changes are by default not allowed
         */
        this.enforceActions = false;
        /**
         * Spy callbacks
         */
        this.spyListeners = [];
        /**
         * Globally attached error handlers that react specifically to errors in reactions
         */
        this.globalReactionErrorHandlers = [];
        /**
         * Warn if computed values are accessed outside a reactive context
         */
        this.computedRequiresReaction = false;
        /**
         * (Experimental)
         * Warn if you try to create to derivation / reactive context without accessing any observable.
         */
        this.reactionRequiresObservable = false;
        /**
         * (Experimental)
         * Warn if observables are accessed outside a reactive context
         */
        this.observableRequiresReaction = false;
        /**
         * Allows overwriting of computed properties, useful in tests but not prod as it can cause
         * memory leaks. See https://github.com/mobxjs/mobx/issues/1867
         */
        this.computedConfigurable = false;
        /*
         * Don't catch and rethrow exceptions. This is useful for inspecting the state of
         * the stack when an exception occurs while debugging.
         */
        this.disableErrorBoundaries = false;
        /*
         * If true, we are already handling an exception in an action. Any errors in reactions should be suppressed, as
         * they are not the cause, see: https://github.com/mobxjs/mobx/issues/1836
         */
        this.suppressReactionErrors = false;
    }
    return MobXGlobals;
}());
var mockGlobal = {};
function getGlobal() {
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    return mockGlobal;
}
var canMergeGlobalState = true;
var isolateCalled = false;
var globalState = (function () {
    var global = getGlobal();
    if (global.__mobxInstanceCount > 0 && !global.__mobxGlobals)
        canMergeGlobalState = false;
    if (global.__mobxGlobals && global.__mobxGlobals.version !== new MobXGlobals().version)
        canMergeGlobalState = false;
    if (!canMergeGlobalState) {
        setTimeout(function () {
            if (!isolateCalled) {
                fail("There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`");
            }
        }, 1);
        return new MobXGlobals();
    }
    else if (global.__mobxGlobals) {
        global.__mobxInstanceCount += 1;
        if (!global.__mobxGlobals.UNCHANGED)
            global.__mobxGlobals.UNCHANGED = {}; // make merge backward compatible
        return global.__mobxGlobals;
    }
    else {
        global.__mobxInstanceCount = 1;
        return (global.__mobxGlobals = new MobXGlobals());
    }
})();
function isolateGlobalState() {
    if (globalState.pendingReactions.length ||
        globalState.inBatch ||
        globalState.isRunningReactions)
        fail("isolateGlobalState should be called before MobX is running any reactions");
    isolateCalled = true;
    if (canMergeGlobalState) {
        if (--getGlobal().__mobxInstanceCount === 0)
            getGlobal().__mobxGlobals = undefined;
        globalState = new MobXGlobals();
    }
}
function getGlobalState() {
    return globalState;
}
/**
 * For testing purposes only; this will break the internal state of existing observables,
 * but can be used to get back at a stable state after throwing errors
 */
function resetGlobalState() {
    var defaultGlobals = new MobXGlobals();
    for (var key in defaultGlobals)
        if (persistentKeys.indexOf(key) === -1)
            globalState[key] = defaultGlobals[key];
    globalState.allowStateChanges = !globalState.enforceActions;
}

function hasObservers(observable) {
    return observable.observers && observable.observers.size > 0;
}
function getObservers(observable) {
    return observable.observers;
}
// function invariantObservers(observable: IObservable) {
//     const list = observable.observers
//     const map = observable.observersIndexes
//     const l = list.length
//     for (let i = 0; i < l; i++) {
//         const id = list[i].__mapid
//         if (i) {
//             invariant(map[id] === i, "INTERNAL ERROR maps derivation.__mapid to index in list") // for performance
//         } else {
//             invariant(!(id in map), "INTERNAL ERROR observer on index 0 shouldn't be held in map.") // for performance
//         }
//     }
//     invariant(
//         list.length === 0 || Object.keys(map).length === list.length - 1,
//         "INTERNAL ERROR there is no junk in map"
//     )
// }
function addObserver(observable, node) {
    // invariant(node.dependenciesState !== -1, "INTERNAL ERROR, can add only dependenciesState !== -1");
    // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR add already added node");
    // invariantObservers(observable);
    observable.observers.add(node);
    if (observable.lowestObserverState > node.dependenciesState)
        observable.lowestObserverState = node.dependenciesState;
    // invariantObservers(observable);
    // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR didn't add node");
}
function removeObserver(observable, node) {
    // invariant(globalState.inBatch > 0, "INTERNAL ERROR, remove should be called only inside batch");
    // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR remove already removed node");
    // invariantObservers(observable);
    observable.observers.delete(node);
    if (observable.observers.size === 0) {
        // deleting last observer
        queueForUnobservation(observable);
    }
    // invariantObservers(observable);
    // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR remove already removed node2");
}
function queueForUnobservation(observable) {
    if (observable.isPendingUnobservation === false) {
        // invariant(observable._observers.length === 0, "INTERNAL ERROR, should only queue for unobservation unobserved observables");
        observable.isPendingUnobservation = true;
        globalState.pendingUnobservations.push(observable);
    }
}
/**
 * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.
 * During a batch `onBecomeUnobserved` will be called at most once per observable.
 * Avoids unnecessary recalculations.
 */
function startBatch() {
    globalState.inBatch++;
}
function endBatch() {
    if (--globalState.inBatch === 0) {
        runReactions();
        // the batch is actually about to finish, all unobserving should happen here.
        var list = globalState.pendingUnobservations;
        for (var i = 0; i < list.length; i++) {
            var observable = list[i];
            observable.isPendingUnobservation = false;
            if (observable.observers.size === 0) {
                if (observable.isBeingObserved) {
                    // if this observable had reactive observers, trigger the hooks
                    observable.isBeingObserved = false;
                    observable.onBecomeUnobserved();
                }
                if (observable instanceof ComputedValue) {
                    // computed values are automatically teared down when the last observer leaves
                    // this process happens recursively, this computed might be the last observabe of another, etc..
                    observable.suspend();
                }
            }
        }
        globalState.pendingUnobservations = [];
    }
}
function reportObserved(observable) {
    checkIfStateReadsAreAllowed(observable);
    var derivation = globalState.trackingDerivation;
    if (derivation !== null) {
        /**
         * Simple optimization, give each derivation run an unique id (runId)
         * Check if last time this observable was accessed the same runId is used
         * if this is the case, the relation is already known
         */
        if (derivation.runId !== observable.lastAccessedBy) {
            observable.lastAccessedBy = derivation.runId;
            // Tried storing newObserving, or observing, or both as Set, but performance didn't come close...
            derivation.newObserving[derivation.unboundDepsCount++] = observable;
            if (!observable.isBeingObserved) {
                observable.isBeingObserved = true;
                observable.onBecomeObserved();
            }
        }
        return true;
    }
    else if (observable.observers.size === 0 && globalState.inBatch > 0) {
        queueForUnobservation(observable);
    }
    return false;
}
// function invariantLOS(observable: IObservable, msg: string) {
//     // it's expensive so better not run it in produciton. but temporarily helpful for testing
//     const min = getObservers(observable).reduce((a, b) => Math.min(a, b.dependenciesState), 2)
//     if (min >= observable.lowestObserverState) return // <- the only assumption about `lowestObserverState`
//     throw new Error(
//         "lowestObserverState is wrong for " +
//             msg +
//             " because " +
//             min +
//             " < " +
//             observable.lowestObserverState
//     )
// }
/**
 * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly
 * It will propagate changes to observers from previous run
 * It's hard or maybe impossible (with reasonable perf) to get it right with current approach
 * Hopefully self reruning autoruns aren't a feature people should depend on
 * Also most basic use cases should be ok
 */
// Called by Atom when its value changes
function propagateChanged(observable) {
    // invariantLOS(observable, "changed start");
    if (observable.lowestObserverState === IDerivationState.STALE)
        return;
    observable.lowestObserverState = IDerivationState.STALE;
    // Ideally we use for..of here, but the downcompiled version is really slow...
    observable.observers.forEach(function (d) {
        if (d.dependenciesState === IDerivationState.UP_TO_DATE) {
            if (d.isTracing !== TraceMode.NONE) {
                logTraceInfo(d, observable);
            }
            d.onBecomeStale();
        }
        d.dependenciesState = IDerivationState.STALE;
    });
    // invariantLOS(observable, "changed end");
}
// Called by ComputedValue when it recalculate and its value changed
function propagateChangeConfirmed(observable) {
    // invariantLOS(observable, "confirmed start");
    if (observable.lowestObserverState === IDerivationState.STALE)
        return;
    observable.lowestObserverState = IDerivationState.STALE;
    observable.observers.forEach(function (d) {
        if (d.dependenciesState === IDerivationState.POSSIBLY_STALE)
            d.dependenciesState = IDerivationState.STALE;
        else if (d.dependenciesState === IDerivationState.UP_TO_DATE // this happens during computing of `d`, just keep lowestObserverState up to date.
        )
            observable.lowestObserverState = IDerivationState.UP_TO_DATE;
    });
    // invariantLOS(observable, "confirmed end");
}
// Used by computed when its dependency changed, but we don't wan't to immediately recompute.
function propagateMaybeChanged(observable) {
    // invariantLOS(observable, "maybe start");
    if (observable.lowestObserverState !== IDerivationState.UP_TO_DATE)
        return;
    observable.lowestObserverState = IDerivationState.POSSIBLY_STALE;
    observable.observers.forEach(function (d) {
        if (d.dependenciesState === IDerivationState.UP_TO_DATE) {
            d.dependenciesState = IDerivationState.POSSIBLY_STALE;
            if (d.isTracing !== TraceMode.NONE) {
                logTraceInfo(d, observable);
            }
            d.onBecomeStale();
        }
    });
    // invariantLOS(observable, "maybe end");
}
function logTraceInfo(derivation, observable) {
    console.log("[mobx.trace] '" + derivation.name + "' is invalidated due to a change in: '" + observable.name + "'");
    if (derivation.isTracing === TraceMode.BREAK) {
        var lines = [];
        printDepTree(getDependencyTree(derivation), lines, 1);
        // prettier-ignore
        new Function("debugger;\n/*\nTracing '" + derivation.name + "'\n\nYou are entering this break point because derivation '" + derivation.name + "' is being traced and '" + observable.name + "' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n" + (derivation instanceof ComputedValue ? derivation.derivation.toString().replace(/[*]\//g, "/") : "") + "\n\nThe dependencies for this derivation are:\n\n" + lines.join("\n") + "\n*/\n    ")();
    }
}
function printDepTree(tree, lines, depth) {
    if (lines.length >= 1000) {
        lines.push("(and many more)");
        return;
    }
    lines.push("" + new Array(depth).join("\t") + tree.name); // MWE: not the fastest, but the easiest way :)
    if (tree.dependencies)
        tree.dependencies.forEach(function (child) { return printDepTree(child, lines, depth + 1); });
}

var Reaction = /** @class */ (function () {
    function Reaction(name, onInvalidate, errorHandler, requiresObservable) {
        if (name === void 0) { name = "Reaction@" + getNextId(); }
        if (requiresObservable === void 0) { requiresObservable = false; }
        this.name = name;
        this.onInvalidate = onInvalidate;
        this.errorHandler = errorHandler;
        this.requiresObservable = requiresObservable;
        this.observing = []; // nodes we are looking at. Our value depends on these nodes
        this.newObserving = [];
        this.dependenciesState = IDerivationState.NOT_TRACKING;
        this.diffValue = 0;
        this.runId = 0;
        this.unboundDepsCount = 0;
        this.__mapid = "#" + getNextId();
        this.isDisposed = false;
        this._isScheduled = false;
        this._isTrackPending = false;
        this._isRunning = false;
        this.isTracing = TraceMode.NONE;
    }
    Reaction.prototype.onBecomeStale = function () {
        this.schedule();
    };
    Reaction.prototype.schedule = function () {
        if (!this._isScheduled) {
            this._isScheduled = true;
            globalState.pendingReactions.push(this);
            runReactions();
        }
    };
    Reaction.prototype.isScheduled = function () {
        return this._isScheduled;
    };
    /**
     * internal, use schedule() if you intend to kick off a reaction
     */
    Reaction.prototype.runReaction = function () {
        if (!this.isDisposed) {
            startBatch();
            this._isScheduled = false;
            if (shouldCompute(this)) {
                this._isTrackPending = true;
                try {
                    this.onInvalidate();
                    if (this._isTrackPending &&
                        isSpyEnabled() &&
                        "production" !== "production") {
                        // onInvalidate didn't trigger track right away..
                        spyReport({
                            name: this.name,
                            type: "scheduled-reaction"
                        });
                    }
                }
                catch (e) {
                    this.reportExceptionInDerivation(e);
                }
            }
            endBatch();
        }
    };
    Reaction.prototype.track = function (fn) {
        if (this.isDisposed) {
            return;
            // console.warn("Reaction already disposed") // Note: Not a warning / error in mobx 4 either
        }
        startBatch();
        var notify = isSpyEnabled();
        var startTime;
        if (notify && "production" !== "production") {
            startTime = Date.now();
            spyReportStart({
                name: this.name,
                type: "reaction"
            });
        }
        this._isRunning = true;
        var result = trackDerivedFunction(this, fn, undefined);
        this._isRunning = false;
        this._isTrackPending = false;
        if (this.isDisposed) {
            // disposed during last run. Clean up everything that was bound after the dispose call.
            clearObserving(this);
        }
        if (isCaughtException(result))
            this.reportExceptionInDerivation(result.cause);
        if (notify && "production" !== "production") {
            spyReportEnd({
                time: Date.now() - startTime
            });
        }
        endBatch();
    };
    Reaction.prototype.reportExceptionInDerivation = function (error) {
        var _this = this;
        if (this.errorHandler) {
            this.errorHandler(error, this);
            return;
        }
        if (globalState.disableErrorBoundaries)
            throw error;
        var message = "[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '" + this + "'";
        if (globalState.suppressReactionErrors) {
            console.warn("[mobx] (error in reaction '" + this.name + "' suppressed, fix error of causing action below)"); // prettier-ignore
        }
        else {
            console.error(message, error);
            /** If debugging brought you here, please, read the above message :-). Tnx! */
        }
        if (isSpyEnabled()) {
            spyReport({
                type: "error",
                name: this.name,
                message: message,
                error: "" + error
            });
        }
        globalState.globalReactionErrorHandlers.forEach(function (f) { return f(error, _this); });
    };
    Reaction.prototype.dispose = function () {
        if (!this.isDisposed) {
            this.isDisposed = true;
            if (!this._isRunning) {
                // if disposed while running, clean up later. Maybe not optimal, but rare case
                startBatch();
                clearObserving(this);
                endBatch();
            }
        }
    };
    Reaction.prototype.getDisposer = function () {
        var r = this.dispose.bind(this);
        r[$mobx] = this;
        return r;
    };
    Reaction.prototype.toString = function () {
        return "Reaction[" + this.name + "]";
    };
    Reaction.prototype.trace = function (enterBreakPoint) {
        if (enterBreakPoint === void 0) { enterBreakPoint = false; }
        trace(this, enterBreakPoint);
    };
    return Reaction;
}());
function onReactionError(handler) {
    globalState.globalReactionErrorHandlers.push(handler);
    return function () {
        var idx = globalState.globalReactionErrorHandlers.indexOf(handler);
        if (idx >= 0)
            globalState.globalReactionErrorHandlers.splice(idx, 1);
    };
}
/**
 * Magic number alert!
 * Defines within how many times a reaction is allowed to re-trigger itself
 * until it is assumed that this is gonna be a never ending loop...
 */
var MAX_REACTION_ITERATIONS = 100;
var reactionScheduler = function (f) { return f(); };
function runReactions() {
    // Trampolining, if runReactions are already running, new reactions will be picked up
    if (globalState.inBatch > 0 || globalState.isRunningReactions)
        return;
    reactionScheduler(runReactionsHelper);
}
function runReactionsHelper() {
    globalState.isRunningReactions = true;
    var allReactions = globalState.pendingReactions;
    var iterations = 0;
    // While running reactions, new reactions might be triggered.
    // Hence we work with two variables and check whether
    // we converge to no remaining reactions after a while.
    while (allReactions.length > 0) {
        if (++iterations === MAX_REACTION_ITERATIONS) {
            console.error("Reaction doesn't converge to a stable state after " + MAX_REACTION_ITERATIONS + " iterations." +
                (" Probably there is a cycle in the reactive function: " + allReactions[0]));
            allReactions.splice(0); // clear reactions
        }
        var remainingReactions = allReactions.splice(0);
        for (var i = 0, l = remainingReactions.length; i < l; i++)
            remainingReactions[i].runReaction();
    }
    globalState.isRunningReactions = false;
}
var isReaction = createInstanceofPredicate("Reaction", Reaction);
function setReactionScheduler(fn) {
    var baseScheduler = reactionScheduler;
    reactionScheduler = function (f) { return fn(function () { return baseScheduler(f); }); };
}

function isSpyEnabled() {
    return  false && false;
}
function spyReport(event) {
    if (true)
        return; // dead code elimination can do the rest
    if (!globalState.spyListeners.length)
        return;
    var listeners = globalState.spyListeners;
    for (var i = 0, l = listeners.length; i < l; i++)
        listeners[i](event);
}
function spyReportStart(event) {
    if (true)
        return;
    var change = __assign(__assign({}, event), { spyReportStart: true });
    spyReport(change);
}
var END_EVENT = { spyReportEnd: true };
function spyReportEnd(change) {
    if (true)
        return;
    if (change)
        spyReport(__assign(__assign({}, change), { spyReportEnd: true }));
    else
        spyReport(END_EVENT);
}
function spy(listener) {
    if (true) {
        console.warn("[mobx.spy] Is a no-op in production builds");
        return function () { };
    }
    else {}
}

function dontReassignFields() {
    fail( false && false);
}
function namedActionDecorator(name) {
    return function (target, prop, descriptor) {
        if (descriptor) {
            if (false) {}
            // babel / typescript
            // @action method() { }
            if (descriptor.value) {
                // typescript
                return {
                    value: createAction(name, descriptor.value),
                    enumerable: false,
                    configurable: true,
                    writable: true // for typescript, this must be writable, otherwise it cannot inherit :/ (see inheritable actions test)
                };
            }
            // babel only: @action method = () => {}
            var initializer_1 = descriptor.initializer;
            return {
                enumerable: false,
                configurable: true,
                writable: true,
                initializer: function () {
                    // N.B: we can't immediately invoke initializer; this would be wrong
                    return createAction(name, initializer_1.call(this));
                }
            };
        }
        // bound instance methods
        return actionFieldDecorator(name).apply(this, arguments);
    };
}
function actionFieldDecorator(name) {
    // Simple property that writes on first invocation to the current instance
    return function (target, prop, descriptor) {
        Object.defineProperty(target, prop, {
            configurable: true,
            enumerable: false,
            get: function () {
                return undefined;
            },
            set: function (value) {
                addHiddenProp(this, prop, action(name, value));
            }
        });
    };
}
function boundActionDecorator(target, propertyName, descriptor, applyToInstance) {
    if (applyToInstance === true) {
        defineBoundAction(target, propertyName, descriptor.value);
        return null;
    }
    if (descriptor) {
        // if (descriptor.value)
        // Typescript / Babel: @action.bound method() { }
        // also: babel @action.bound method = () => {}
        return {
            configurable: true,
            enumerable: false,
            get: function () {
                defineBoundAction(this, propertyName, descriptor.value || descriptor.initializer.call(this));
                return this[propertyName];
            },
            set: dontReassignFields
        };
    }
    // field decorator Typescript @action.bound method = () => {}
    return {
        enumerable: false,
        configurable: true,
        set: function (v) {
            defineBoundAction(this, propertyName, v);
        },
        get: function () {
            return undefined;
        }
    };
}

var action = function action(arg1, arg2, arg3, arg4) {
    // action(fn() {})
    if (arguments.length === 1 && typeof arg1 === "function")
        return createAction(arg1.name || "<unnamed action>", arg1);
    // action("name", fn() {})
    if (arguments.length === 2 && typeof arg2 === "function")
        return createAction(arg1, arg2);
    // @action("name") fn() {}
    if (arguments.length === 1 && typeof arg1 === "string")
        return namedActionDecorator(arg1);
    // @action fn() {}
    if (arg4 === true) {
        // apply to instance immediately
        addHiddenProp(arg1, arg2, createAction(arg1.name || arg2, arg3.value, this));
    }
    else {
        return namedActionDecorator(arg2).apply(null, arguments);
    }
};
action.bound = boundActionDecorator;
function runInAction(arg1, arg2) {
    var actionName = typeof arg1 === "string" ? arg1 : arg1.name || "<unnamed action>";
    var fn = typeof arg1 === "function" ? arg1 : arg2;
    if (false) {}
    return executeAction(actionName, fn, this, undefined);
}
function isAction(thing) {
    return typeof thing === "function" && thing.isMobxAction === true;
}
function defineBoundAction(target, propertyName, fn) {
    addHiddenProp(target, propertyName, createAction(propertyName, fn.bind(target)));
}

/**
 * Creates a named reactive view and keeps it alive, so that the view is always
 * updated if one of the dependencies changes, even when the view is not further used by something else.
 * @param view The reactive view
 * @returns disposer function, which can be used to stop the view from being updated in the future.
 */
function autorun(view, opts) {
    if (opts === void 0) { opts = EMPTY_OBJECT; }
    if (false) {}
    var name = (opts && opts.name) || view.name || "Autorun@" + getNextId();
    var runSync = !opts.scheduler && !opts.delay;
    var reaction;
    if (runSync) {
        // normal autorun
        reaction = new Reaction(name, function () {
            this.track(reactionRunner);
        }, opts.onError, opts.requiresObservable);
    }
    else {
        var scheduler_1 = createSchedulerFromOptions(opts);
        // debounced autorun
        var isScheduled_1 = false;
        reaction = new Reaction(name, function () {
            if (!isScheduled_1) {
                isScheduled_1 = true;
                scheduler_1(function () {
                    isScheduled_1 = false;
                    if (!reaction.isDisposed)
                        reaction.track(reactionRunner);
                });
            }
        }, opts.onError, opts.requiresObservable);
    }
    function reactionRunner() {
        view(reaction);
    }
    reaction.schedule();
    return reaction.getDisposer();
}
var run = function (f) { return f(); };
function createSchedulerFromOptions(opts) {
    return opts.scheduler
        ? opts.scheduler
        : opts.delay
            ? function (f) { return setTimeout(f, opts.delay); }
            : run;
}
function reaction(expression, effect, opts) {
    if (opts === void 0) { opts = EMPTY_OBJECT; }
    if (false) {}
    var name = opts.name || "Reaction@" + getNextId();
    var effectAction = action(name, opts.onError ? wrapErrorHandler(opts.onError, effect) : effect);
    var runSync = !opts.scheduler && !opts.delay;
    var scheduler = createSchedulerFromOptions(opts);
    var firstTime = true;
    var isScheduled = false;
    var value;
    var equals = opts.compareStructural
        ? comparer.structural
        : opts.equals || comparer.default;
    var r = new Reaction(name, function () {
        if (firstTime || runSync) {
            reactionRunner();
        }
        else if (!isScheduled) {
            isScheduled = true;
            scheduler(reactionRunner);
        }
    }, opts.onError, opts.requiresObservable);
    function reactionRunner() {
        isScheduled = false; // Q: move into reaction runner?
        if (r.isDisposed)
            return;
        var changed = false;
        r.track(function () {
            var nextValue = expression(r);
            changed = firstTime || !equals(value, nextValue);
            value = nextValue;
        });
        if (firstTime && opts.fireImmediately)
            effectAction(value, r);
        if (!firstTime && changed === true)
            effectAction(value, r);
        if (firstTime)
            firstTime = false;
    }
    r.schedule();
    return r.getDisposer();
}
function wrapErrorHandler(errorHandler, baseFn) {
    return function () {
        try {
            return baseFn.apply(this, arguments);
        }
        catch (e) {
            errorHandler.call(this, e);
        }
    };
}

function onBecomeObserved(thing, arg2, arg3) {
    return interceptHook("onBecomeObserved", thing, arg2, arg3);
}
function onBecomeUnobserved(thing, arg2, arg3) {
    return interceptHook("onBecomeUnobserved", thing, arg2, arg3);
}
function interceptHook(hook, thing, arg2, arg3) {
    var atom = typeof arg3 === "function" ? getAtom(thing, arg2) : getAtom(thing);
    var cb = typeof arg3 === "function" ? arg3 : arg2;
    var listenersKey = hook + "Listeners";
    if (atom[listenersKey]) {
        atom[listenersKey].add(cb);
    }
    else {
        atom[listenersKey] = new Set([cb]);
    }
    var orig = atom[hook];
    if (typeof orig !== "function")
        return fail( false && false);
    return function () {
        var hookListeners = atom[listenersKey];
        if (hookListeners) {
            hookListeners.delete(cb);
            if (hookListeners.size === 0) {
                delete atom[listenersKey];
            }
        }
    };
}

function configure(options) {
    var enforceActions = options.enforceActions, computedRequiresReaction = options.computedRequiresReaction, computedConfigurable = options.computedConfigurable, disableErrorBoundaries = options.disableErrorBoundaries, reactionScheduler = options.reactionScheduler, reactionRequiresObservable = options.reactionRequiresObservable, observableRequiresReaction = options.observableRequiresReaction;
    if (options.isolateGlobalState === true) {
        isolateGlobalState();
    }
    if (enforceActions !== undefined) {
        if (typeof enforceActions === "boolean" || enforceActions === "strict")
            deprecated("Deprecated value for 'enforceActions', use 'false' => '\"never\"', 'true' => '\"observed\"', '\"strict\"' => \"'always'\" instead");
        var ea = void 0;
        switch (enforceActions) {
            case true:
            case "observed":
                ea = true;
                break;
            case false:
            case "never":
                ea = false;
                break;
            case "strict":
            case "always":
                ea = "strict";
                break;
            default:
                fail("Invalid value for 'enforceActions': '" + enforceActions + "', expected 'never', 'always' or 'observed'");
        }
        globalState.enforceActions = ea;
        globalState.allowStateChanges = ea === true || ea === "strict" ? false : true;
    }
    if (computedRequiresReaction !== undefined) {
        globalState.computedRequiresReaction = !!computedRequiresReaction;
    }
    if (reactionRequiresObservable !== undefined) {
        globalState.reactionRequiresObservable = !!reactionRequiresObservable;
    }
    if (observableRequiresReaction !== undefined) {
        globalState.observableRequiresReaction = !!observableRequiresReaction;
        globalState.allowStateReads = !globalState.observableRequiresReaction;
    }
    if (computedConfigurable !== undefined) {
        globalState.computedConfigurable = !!computedConfigurable;
    }
    if (disableErrorBoundaries !== undefined) {
        if (disableErrorBoundaries === true)
            console.warn("WARNING: Debug feature only. MobX will NOT recover from errors when `disableErrorBoundaries` is enabled.");
        globalState.disableErrorBoundaries = !!disableErrorBoundaries;
    }
    if (reactionScheduler) {
        setReactionScheduler(reactionScheduler);
    }
}

function decorate(thing, decorators) {
     false &&
        false;
    var target = typeof thing === "function" ? thing.prototype : thing;
    var _loop_1 = function (prop) {
        var propertyDecorators = decorators[prop];
        if (!Array.isArray(propertyDecorators)) {
            propertyDecorators = [propertyDecorators];
        }
         false &&
            false;
        var descriptor = Object.getOwnPropertyDescriptor(target, prop);
        var newDescriptor = propertyDecorators.reduce(function (accDescriptor, decorator) { return decorator(target, prop, accDescriptor); }, descriptor);
        if (newDescriptor)
            Object.defineProperty(target, prop, newDescriptor);
    };
    for (var prop in decorators) {
        _loop_1(prop);
    }
    return thing;
}

function extendObservable(target, properties, decorators, options) {
    if (false) {}
    options = asCreateObservableOptions(options);
    var defaultDecorator = getDefaultDecoratorFromObjectOptions(options);
    initializeInstance(target); // Fixes #1740
    asObservableObject(target, options.name, defaultDecorator.enhancer); // make sure object is observable, even without initial props
    if (properties)
        extendObservableObjectWithProperties(target, properties, decorators, defaultDecorator);
    return target;
}
function getDefaultDecoratorFromObjectOptions(options) {
    return options.defaultDecorator || (options.deep === false ? refDecorator : deepDecorator);
}
function extendObservableObjectWithProperties(target, properties, decorators, defaultDecorator) {
    var e_1, _a, e_2, _b;
    if (false) { var key, keys_1, keys_1_1, keys; }
    startBatch();
    try {
        var keys = getPlainObjectKeys(properties);
        try {
            for (var keys_2 = __values(keys), keys_2_1 = keys_2.next(); !keys_2_1.done; keys_2_1 = keys_2.next()) {
                var key = keys_2_1.value;
                var descriptor = Object.getOwnPropertyDescriptor(properties, key);
                if (false) {}
                var decorator = decorators && key in decorators
                    ? decorators[key]
                    : descriptor.get
                        ? computedDecorator
                        : defaultDecorator;
                if (false)
                    {}
                var resultDescriptor = decorator(target, key, descriptor, true);
                if (resultDescriptor // otherwise, assume already applied, due to `applyToInstance`
                )
                    Object.defineProperty(target, key, resultDescriptor);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (keys_2_1 && !keys_2_1.done && (_b = keys_2.return)) _b.call(keys_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
    }
    finally {
        endBatch();
    }
}

function getDependencyTree(thing, property) {
    return nodeToDependencyTree(getAtom(thing, property));
}
function nodeToDependencyTree(node) {
    var result = {
        name: node.name
    };
    if (node.observing && node.observing.length > 0)
        result.dependencies = unique(node.observing).map(nodeToDependencyTree);
    return result;
}
function getObserverTree(thing, property) {
    return nodeToObserverTree(getAtom(thing, property));
}
function nodeToObserverTree(node) {
    var result = {
        name: node.name
    };
    if (hasObservers(node))
        result.observers = Array.from(getObservers(node)).map(nodeToObserverTree);
    return result;
}

var generatorId = 0;
function FlowCancellationError() {
    this.message = "FLOW_CANCELLED";
}
FlowCancellationError.prototype = Object.create(Error.prototype);
function isFlowCancellationError(error) {
    return error instanceof FlowCancellationError;
}
function flow(generator) {
    if (arguments.length !== 1)
        fail( true && "Flow expects 1 argument and cannot be used as decorator");
    var name = generator.name || "<unnamed flow>";
    // Implementation based on https://github.com/tj/co/blob/master/index.js
    return function () {
        var ctx = this;
        var args = arguments;
        var runId = ++generatorId;
        var gen = action(name + " - runid: " + runId + " - init", generator).apply(ctx, args);
        var rejector;
        var pendingPromise = undefined;
        var promise = new Promise(function (resolve, reject) {
            var stepId = 0;
            rejector = reject;
            function onFulfilled(res) {
                pendingPromise = undefined;
                var ret;
                try {
                    ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen.next).call(gen, res);
                }
                catch (e) {
                    return reject(e);
                }
                next(ret);
            }
            function onRejected(err) {
                pendingPromise = undefined;
                var ret;
                try {
                    ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen.throw).call(gen, err);
                }
                catch (e) {
                    return reject(e);
                }
                next(ret);
            }
            function next(ret) {
                if (ret && typeof ret.then === "function") {
                    // an async iterator
                    ret.then(next, reject);
                    return;
                }
                if (ret.done)
                    return resolve(ret.value);
                pendingPromise = Promise.resolve(ret.value);
                return pendingPromise.then(onFulfilled, onRejected);
            }
            onFulfilled(undefined); // kick off the process
        });
        promise.cancel = action(name + " - runid: " + runId + " - cancel", function () {
            try {
                if (pendingPromise)
                    cancelPromise(pendingPromise);
                // Finally block can return (or yield) stuff..
                var res = gen.return(undefined);
                // eat anything that promise would do, it's cancelled!
                var yieldedPromise = Promise.resolve(res.value);
                yieldedPromise.then(noop, noop);
                cancelPromise(yieldedPromise); // maybe it can be cancelled :)
                // reject our original promise
                rejector(new FlowCancellationError());
            }
            catch (e) {
                rejector(e); // there could be a throwing finally block
            }
        });
        return promise;
    };
}
function cancelPromise(promise) {
    if (typeof promise.cancel === "function")
        promise.cancel();
}

function interceptReads(thing, propOrHandler, handler) {
    var target;
    if (isObservableMap(thing) || isObservableArray(thing) || isObservableValue(thing)) {
        target = getAdministration(thing);
    }
    else if (isObservableObject(thing)) {
        if (typeof propOrHandler !== "string")
            return fail( false &&
                false);
        target = getAdministration(thing, propOrHandler);
    }
    else {
        return fail( false &&
            false);
    }
    if (target.dehancer !== undefined)
        return fail( false && false);
    target.dehancer = typeof propOrHandler === "function" ? propOrHandler : handler;
    return function () {
        target.dehancer = undefined;
    };
}

function intercept(thing, propOrHandler, handler) {
    if (typeof handler === "function")
        return interceptProperty(thing, propOrHandler, handler);
    else
        return interceptInterceptable(thing, propOrHandler);
}
function interceptInterceptable(thing, handler) {
    return getAdministration(thing).intercept(handler);
}
function interceptProperty(thing, property, handler) {
    return getAdministration(thing, property).intercept(handler);
}

function _isComputed(value, property) {
    if (value === null || value === undefined)
        return false;
    if (property !== undefined) {
        if (isObservableObject(value) === false)
            return false;
        if (!value[$mobx].values.has(property))
            return false;
        var atom = getAtom(value, property);
        return isComputedValue(atom);
    }
    return isComputedValue(value);
}
function isComputed(value) {
    if (arguments.length > 1)
        return fail( false &&
            false);
    return _isComputed(value);
}
function isComputedProp(value, propName) {
    if (typeof propName !== "string")
        return fail( false &&
            false);
    return _isComputed(value, propName);
}

function _isObservable(value, property) {
    if (value === null || value === undefined)
        return false;
    if (property !== undefined) {
        if (false)
            {}
        if (isObservableObject(value)) {
            return value[$mobx].values.has(property);
        }
        return false;
    }
    // For first check, see #701
    return (isObservableObject(value) ||
        !!value[$mobx] ||
        isAtom(value) ||
        isReaction(value) ||
        isComputedValue(value));
}
function isObservable(value) {
    if (arguments.length !== 1)
        fail( false &&
            false);
    return _isObservable(value);
}
function isObservableProp(value, propName) {
    if (typeof propName !== "string")
        return fail( false && false);
    return _isObservable(value, propName);
}

function keys(obj) {
    if (isObservableObject(obj)) {
        return obj[$mobx].getKeys();
    }
    if (isObservableMap(obj)) {
        return Array.from(obj.keys());
    }
    if (isObservableSet(obj)) {
        return Array.from(obj.keys());
    }
    if (isObservableArray(obj)) {
        return obj.map(function (_, index) { return index; });
    }
    return fail( false &&
        false);
}
function values(obj) {
    if (isObservableObject(obj)) {
        return keys(obj).map(function (key) { return obj[key]; });
    }
    if (isObservableMap(obj)) {
        return keys(obj).map(function (key) { return obj.get(key); });
    }
    if (isObservableSet(obj)) {
        return Array.from(obj.values());
    }
    if (isObservableArray(obj)) {
        return obj.slice();
    }
    return fail( false &&
        false);
}
function entries(obj) {
    if (isObservableObject(obj)) {
        return keys(obj).map(function (key) { return [key, obj[key]]; });
    }
    if (isObservableMap(obj)) {
        return keys(obj).map(function (key) { return [key, obj.get(key)]; });
    }
    if (isObservableSet(obj)) {
        return Array.from(obj.entries());
    }
    if (isObservableArray(obj)) {
        return obj.map(function (key, index) { return [index, key]; });
    }
    return fail( false &&
        false);
}
function set(obj, key, value) {
    if (arguments.length === 2 && !isObservableSet(obj)) {
        startBatch();
        var values_1 = key;
        try {
            for (var key_1 in values_1)
                set(obj, key_1, values_1[key_1]);
        }
        finally {
            endBatch();
        }
        return;
    }
    if (isObservableObject(obj)) {
        var adm = obj[$mobx];
        var existingObservable = adm.values.get(key);
        if (existingObservable) {
            adm.write(key, value);
        }
        else {
            adm.addObservableProp(key, value, adm.defaultEnhancer);
        }
    }
    else if (isObservableMap(obj)) {
        obj.set(key, value);
    }
    else if (isObservableSet(obj)) {
        obj.add(key);
    }
    else if (isObservableArray(obj)) {
        if (typeof key !== "number")
            key = parseInt(key, 10);
        invariant(key >= 0, "Not a valid index: '" + key + "'");
        startBatch();
        if (key >= obj.length)
            obj.length = key + 1;
        obj[key] = value;
        endBatch();
    }
    else {
        return fail( false &&
            false);
    }
}
function remove(obj, key) {
    if (isObservableObject(obj)) {
        obj[$mobx].remove(key);
    }
    else if (isObservableMap(obj)) {
        obj.delete(key);
    }
    else if (isObservableSet(obj)) {
        obj.delete(key);
    }
    else if (isObservableArray(obj)) {
        if (typeof key !== "number")
            key = parseInt(key, 10);
        invariant(key >= 0, "Not a valid index: '" + key + "'");
        obj.splice(key, 1);
    }
    else {
        return fail( false &&
            false);
    }
}
function has(obj, key) {
    if (isObservableObject(obj)) {
        // return keys(obj).indexOf(key) >= 0
        var adm = getAdministration(obj);
        return adm.has(key);
    }
    else if (isObservableMap(obj)) {
        return obj.has(key);
    }
    else if (isObservableSet(obj)) {
        return obj.has(key);
    }
    else if (isObservableArray(obj)) {
        return key >= 0 && key < obj.length;
    }
    else {
        return fail( false &&
            false);
    }
}
function get(obj, key) {
    if (!has(obj, key))
        return undefined;
    if (isObservableObject(obj)) {
        return obj[key];
    }
    else if (isObservableMap(obj)) {
        return obj.get(key);
    }
    else if (isObservableArray(obj)) {
        return obj[key];
    }
    else {
        return fail( false &&
            false);
    }
}

function observe(thing, propOrCb, cbOrFire, fireImmediately) {
    if (typeof cbOrFire === "function")
        return observeObservableProperty(thing, propOrCb, cbOrFire, fireImmediately);
    else
        return observeObservable(thing, propOrCb, cbOrFire);
}
function observeObservable(thing, listener, fireImmediately) {
    return getAdministration(thing).observe(listener, fireImmediately);
}
function observeObservableProperty(thing, property, listener, fireImmediately) {
    return getAdministration(thing, property).observe(listener, fireImmediately);
}

var defaultOptions = {
    detectCycles: true,
    exportMapsAsObjects: true,
    recurseEverything: false
};
function cache(map, key, value, options) {
    if (options.detectCycles)
        map.set(key, value);
    return value;
}
function toJSHelper(source, options, __alreadySeen) {
    if (!options.recurseEverything && !isObservable(source))
        return source;
    if (typeof source !== "object")
        return source;
    // Directly return null if source is null
    if (source === null)
        return null;
    // Directly return the Date object itself if contained in the observable
    if (source instanceof Date)
        return source;
    if (isObservableValue(source))
        return toJSHelper(source.get(), options, __alreadySeen);
    // make sure we track the keys of the object
    if (isObservable(source))
        keys(source);
    var detectCycles = options.detectCycles === true;
    if (detectCycles && source !== null && __alreadySeen.has(source)) {
        return __alreadySeen.get(source);
    }
    if (isObservableArray(source) || Array.isArray(source)) {
        var res_1 = cache(__alreadySeen, source, [], options);
        var toAdd = source.map(function (value) { return toJSHelper(value, options, __alreadySeen); });
        res_1.length = toAdd.length;
        for (var i = 0, l = toAdd.length; i < l; i++)
            res_1[i] = toAdd[i];
        return res_1;
    }
    if (isObservableSet(source) || Object.getPrototypeOf(source) === Set.prototype) {
        if (options.exportMapsAsObjects === false) {
            var res_2 = cache(__alreadySeen, source, new Set(), options);
            source.forEach(function (value) {
                res_2.add(toJSHelper(value, options, __alreadySeen));
            });
            return res_2;
        }
        else {
            var res_3 = cache(__alreadySeen, source, [], options);
            source.forEach(function (value) {
                res_3.push(toJSHelper(value, options, __alreadySeen));
            });
            return res_3;
        }
    }
    if (isObservableMap(source) || Object.getPrototypeOf(source) === Map.prototype) {
        if (options.exportMapsAsObjects === false) {
            var res_4 = cache(__alreadySeen, source, new Map(), options);
            source.forEach(function (value, key) {
                res_4.set(key, toJSHelper(value, options, __alreadySeen));
            });
            return res_4;
        }
        else {
            var res_5 = cache(__alreadySeen, source, {}, options);
            source.forEach(function (value, key) {
                res_5[key] = toJSHelper(value, options, __alreadySeen);
            });
            return res_5;
        }
    }
    // Fallback to the situation that source is an ObservableObject or a plain object
    var res = cache(__alreadySeen, source, {}, options);
    getPlainObjectKeys(source).forEach(function (key) {
        res[key] = toJSHelper(source[key], options, __alreadySeen);
    });
    return res;
}
function toJS(source, options) {
    // backward compatibility
    if (typeof options === "boolean")
        options = { detectCycles: options };
    if (!options)
        options = defaultOptions;
    options.detectCycles =
        options.detectCycles === undefined
            ? options.recurseEverything === true
            : options.detectCycles === true;
    var __alreadySeen;
    if (options.detectCycles)
        __alreadySeen = new Map();
    return toJSHelper(source, options, __alreadySeen);
}

function trace() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var enterBreakPoint = false;
    if (typeof args[args.length - 1] === "boolean")
        enterBreakPoint = args.pop();
    var derivation = getAtomFromArgs(args);
    if (!derivation) {
        return fail( false &&
            false);
    }
    if (derivation.isTracing === TraceMode.NONE) {
        console.log("[mobx.trace] '" + derivation.name + "' tracing enabled");
    }
    derivation.isTracing = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG;
}
function getAtomFromArgs(args) {
    switch (args.length) {
        case 0:
            return globalState.trackingDerivation;
        case 1:
            return getAtom(args[0]);
        case 2:
            return getAtom(args[0], args[1]);
    }
}

/**
 * During a transaction no views are updated until the end of the transaction.
 * The transaction will be run synchronously nonetheless.
 *
 * @param action a function that updates some reactive state
 * @returns any value that was returned by the 'action' parameter.
 */
function transaction(action, thisArg) {
    if (thisArg === void 0) { thisArg = undefined; }
    startBatch();
    try {
        return action.apply(thisArg);
    }
    finally {
        endBatch();
    }
}

function when(predicate, arg1, arg2) {
    if (arguments.length === 1 || (arg1 && typeof arg1 === "object"))
        return whenPromise(predicate, arg1);
    return _when(predicate, arg1, arg2 || {});
}
function _when(predicate, effect, opts) {
    var timeoutHandle;
    if (typeof opts.timeout === "number") {
        timeoutHandle = setTimeout(function () {
            if (!disposer[$mobx].isDisposed) {
                disposer();
                var error = new Error("WHEN_TIMEOUT");
                if (opts.onError)
                    opts.onError(error);
                else
                    throw error;
            }
        }, opts.timeout);
    }
    opts.name = opts.name || "When@" + getNextId();
    var effectAction = createAction(opts.name + "-effect", effect);
    var disposer = autorun(function (r) {
        if (predicate()) {
            r.dispose();
            if (timeoutHandle)
                clearTimeout(timeoutHandle);
            effectAction();
        }
    }, opts);
    return disposer;
}
function whenPromise(predicate, opts) {
    if (false)
        {}
    var cancel;
    var res = new Promise(function (resolve, reject) {
        var disposer = _when(predicate, resolve, __assign(__assign({}, opts), { onError: reject }));
        cancel = function () {
            disposer();
            reject("WHEN_CANCELLED");
        };
    });
    res.cancel = cancel;
    return res;
}

function getAdm(target) {
    return target[$mobx];
}
function isPropertyKey(val) {
    return typeof val === "string" || typeof val === "number" || typeof val === "symbol";
}
// Optimization: we don't need the intermediate objects and could have a completely custom administration for DynamicObjects,
// and skip either the internal values map, or the base object with its property descriptors!
var objectProxyTraps = {
    has: function (target, name) {
        if (name === $mobx || name === "constructor" || name === mobxDidRunLazyInitializersSymbol)
            return true;
        var adm = getAdm(target);
        // MWE: should `in` operator be reactive? If not, below code path will be faster / more memory efficient
        // TODO: check performance stats!
        // if (adm.values.get(name as string)) return true
        if (isPropertyKey(name))
            return adm.has(name);
        return name in target;
    },
    get: function (target, name) {
        if (name === $mobx || name === "constructor" || name === mobxDidRunLazyInitializersSymbol)
            return target[name];
        var adm = getAdm(target);
        var observable = adm.values.get(name);
        if (observable instanceof Atom) {
            var result = observable.get();
            if (result === undefined) {
                // This fixes #1796, because deleting a prop that has an
                // undefined value won't retrigger a observer (no visible effect),
                // the autorun wouldn't subscribe to future key changes (see also next comment)
                adm.has(name);
            }
            return result;
        }
        // make sure we start listening to future keys
        // note that we only do this here for optimization
        if (isPropertyKey(name))
            adm.has(name);
        return target[name];
    },
    set: function (target, name, value) {
        if (!isPropertyKey(name))
            return false;
        set(target, name, value);
        return true;
    },
    deleteProperty: function (target, name) {
        if (!isPropertyKey(name))
            return false;
        var adm = getAdm(target);
        adm.remove(name);
        return true;
    },
    ownKeys: function (target) {
        var adm = getAdm(target);
        adm.keysAtom.reportObserved();
        return Reflect.ownKeys(target);
    },
    preventExtensions: function (target) {
        fail("Dynamic observable objects cannot be frozen");
        return false;
    }
};
function createDynamicObservableObject(base) {
    var proxy = new Proxy(base, objectProxyTraps);
    base[$mobx].proxy = proxy;
    return proxy;
}

function hasInterceptors(interceptable) {
    return interceptable.interceptors !== undefined && interceptable.interceptors.length > 0;
}
function registerInterceptor(interceptable, handler) {
    var interceptors = interceptable.interceptors || (interceptable.interceptors = []);
    interceptors.push(handler);
    return once(function () {
        var idx = interceptors.indexOf(handler);
        if (idx !== -1)
            interceptors.splice(idx, 1);
    });
}
function interceptChange(interceptable, change) {
    var prevU = untrackedStart();
    try {
        // Interceptor can modify the array, copy it to avoid concurrent modification, see #1950
        var interceptors = __spread((interceptable.interceptors || []));
        for (var i = 0, l = interceptors.length; i < l; i++) {
            change = interceptors[i](change);
            invariant(!change || change.type, "Intercept handlers should return nothing or a change object");
            if (!change)
                break;
        }
        return change;
    }
    finally {
        untrackedEnd(prevU);
    }
}

function hasListeners(listenable) {
    return listenable.changeListeners !== undefined && listenable.changeListeners.length > 0;
}
function registerListener(listenable, handler) {
    var listeners = listenable.changeListeners || (listenable.changeListeners = []);
    listeners.push(handler);
    return once(function () {
        var idx = listeners.indexOf(handler);
        if (idx !== -1)
            listeners.splice(idx, 1);
    });
}
function notifyListeners(listenable, change) {
    var prevU = untrackedStart();
    var listeners = listenable.changeListeners;
    if (!listeners)
        return;
    listeners = listeners.slice();
    for (var i = 0, l = listeners.length; i < l; i++) {
        listeners[i](change);
    }
    untrackedEnd(prevU);
}

var MAX_SPLICE_SIZE = 10000; // See e.g. https://github.com/mobxjs/mobx/issues/859
var arrayTraps = {
    get: function (target, name) {
        if (name === $mobx)
            return target[$mobx];
        if (name === "length")
            return target[$mobx].getArrayLength();
        if (typeof name === "number") {
            return arrayExtensions.get.call(target, name);
        }
        if (typeof name === "string" && !isNaN(name)) {
            return arrayExtensions.get.call(target, parseInt(name));
        }
        if (arrayExtensions.hasOwnProperty(name)) {
            return arrayExtensions[name];
        }
        return target[name];
    },
    set: function (target, name, value) {
        if (name === "length") {
            target[$mobx].setArrayLength(value);
        }
        if (typeof name === "number") {
            arrayExtensions.set.call(target, name, value);
        }
        if (typeof name === "symbol" || isNaN(name)) {
            target[name] = value;
        }
        else {
            // numeric string
            arrayExtensions.set.call(target, parseInt(name), value);
        }
        return true;
    },
    preventExtensions: function (target) {
        fail("Observable arrays cannot be frozen");
        return false;
    }
};
function createObservableArray(initialValues, enhancer, name, owned) {
    if (name === void 0) { name = "ObservableArray@" + getNextId(); }
    if (owned === void 0) { owned = false; }
    var adm = new ObservableArrayAdministration(name, enhancer, owned);
    addHiddenFinalProp(adm.values, $mobx, adm);
    var proxy = new Proxy(adm.values, arrayTraps);
    adm.proxy = proxy;
    if (initialValues && initialValues.length) {
        var prev = allowStateChangesStart(true);
        adm.spliceWithArray(0, 0, initialValues);
        allowStateChangesEnd(prev);
    }
    return proxy;
}
var ObservableArrayAdministration = /** @class */ (function () {
    function ObservableArrayAdministration(name, enhancer, owned) {
        this.owned = owned;
        this.values = [];
        this.proxy = undefined;
        this.lastKnownLength = 0;
        this.atom = new Atom(name || "ObservableArray@" + getNextId());
        this.enhancer = function (newV, oldV) { return enhancer(newV, oldV, name + "[..]"); };
    }
    ObservableArrayAdministration.prototype.dehanceValue = function (value) {
        if (this.dehancer !== undefined)
            return this.dehancer(value);
        return value;
    };
    ObservableArrayAdministration.prototype.dehanceValues = function (values) {
        if (this.dehancer !== undefined && values.length > 0)
            return values.map(this.dehancer);
        return values;
    };
    ObservableArrayAdministration.prototype.intercept = function (handler) {
        return registerInterceptor(this, handler);
    };
    ObservableArrayAdministration.prototype.observe = function (listener, fireImmediately) {
        if (fireImmediately === void 0) { fireImmediately = false; }
        if (fireImmediately) {
            listener({
                object: this.proxy,
                type: "splice",
                index: 0,
                added: this.values.slice(),
                addedCount: this.values.length,
                removed: [],
                removedCount: 0
            });
        }
        return registerListener(this, listener);
    };
    ObservableArrayAdministration.prototype.getArrayLength = function () {
        this.atom.reportObserved();
        return this.values.length;
    };
    ObservableArrayAdministration.prototype.setArrayLength = function (newLength) {
        if (typeof newLength !== "number" || newLength < 0)
            throw new Error("[mobx.array] Out of range: " + newLength);
        var currentLength = this.values.length;
        if (newLength === currentLength)
            return;
        else if (newLength > currentLength) {
            var newItems = new Array(newLength - currentLength);
            for (var i = 0; i < newLength - currentLength; i++)
                newItems[i] = undefined; // No Array.fill everywhere...
            this.spliceWithArray(currentLength, 0, newItems);
        }
        else
            this.spliceWithArray(newLength, currentLength - newLength);
    };
    ObservableArrayAdministration.prototype.updateArrayLength = function (oldLength, delta) {
        if (oldLength !== this.lastKnownLength)
            throw new Error("[mobx] Modification exception: the internal structure of an observable array was changed.");
        this.lastKnownLength += delta;
    };
    ObservableArrayAdministration.prototype.spliceWithArray = function (index, deleteCount, newItems) {
        var _this = this;
        checkIfStateModificationsAreAllowed(this.atom);
        var length = this.values.length;
        if (index === undefined)
            index = 0;
        else if (index > length)
            index = length;
        else if (index < 0)
            index = Math.max(0, length + index);
        if (arguments.length === 1)
            deleteCount = length - index;
        else if (deleteCount === undefined || deleteCount === null)
            deleteCount = 0;
        else
            deleteCount = Math.max(0, Math.min(deleteCount, length - index));
        if (newItems === undefined)
            newItems = EMPTY_ARRAY;
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                object: this.proxy,
                type: "splice",
                index: index,
                removedCount: deleteCount,
                added: newItems
            });
            if (!change)
                return EMPTY_ARRAY;
            deleteCount = change.removedCount;
            newItems = change.added;
        }
        newItems = newItems.length === 0 ? newItems : newItems.map(function (v) { return _this.enhancer(v, undefined); });
        if (false) { var lengthDelta; }
        var res = this.spliceItemsIntoValues(index, deleteCount, newItems);
        if (deleteCount !== 0 || newItems.length !== 0)
            this.notifyArraySplice(index, newItems, res);
        return this.dehanceValues(res);
    };
    ObservableArrayAdministration.prototype.spliceItemsIntoValues = function (index, deleteCount, newItems) {
        var _a;
        if (newItems.length < MAX_SPLICE_SIZE) {
            return (_a = this.values).splice.apply(_a, __spread([index, deleteCount], newItems));
        }
        else {
            var res = this.values.slice(index, index + deleteCount);
            this.values = this.values
                .slice(0, index)
                .concat(newItems, this.values.slice(index + deleteCount));
            return res;
        }
    };
    ObservableArrayAdministration.prototype.notifyArrayChildUpdate = function (index, newValue, oldValue) {
        var notifySpy = !this.owned && isSpyEnabled();
        var notify = hasListeners(this);
        var change = notify || notifySpy
            ? {
                object: this.proxy,
                type: "update",
                index: index,
                newValue: newValue,
                oldValue: oldValue
            }
            : null;
        // The reason why this is on right hand side here (and not above), is this way the uglifier will drop it, but it won't
        // cause any runtime overhead in development mode without NODE_ENV set, unless spying is enabled
        if (notifySpy && "production" !== "production")
            spyReportStart(__assign(__assign({}, change), { name: this.atom.name }));
        this.atom.reportChanged();
        if (notify)
            notifyListeners(this, change);
        if (notifySpy && "production" !== "production")
            spyReportEnd();
    };
    ObservableArrayAdministration.prototype.notifyArraySplice = function (index, added, removed) {
        var notifySpy = !this.owned && isSpyEnabled();
        var notify = hasListeners(this);
        var change = notify || notifySpy
            ? {
                object: this.proxy,
                type: "splice",
                index: index,
                removed: removed,
                added: added,
                removedCount: removed.length,
                addedCount: added.length
            }
            : null;
        if (notifySpy && "production" !== "production")
            spyReportStart(__assign(__assign({}, change), { name: this.atom.name }));
        this.atom.reportChanged();
        // conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe
        if (notify)
            notifyListeners(this, change);
        if (notifySpy && "production" !== "production")
            spyReportEnd();
    };
    return ObservableArrayAdministration;
}());
var arrayExtensions = {
    intercept: function (handler) {
        return this[$mobx].intercept(handler);
    },
    observe: function (listener, fireImmediately) {
        if (fireImmediately === void 0) { fireImmediately = false; }
        var adm = this[$mobx];
        return adm.observe(listener, fireImmediately);
    },
    clear: function () {
        return this.splice(0);
    },
    replace: function (newItems) {
        var adm = this[$mobx];
        return adm.spliceWithArray(0, adm.values.length, newItems);
    },
    /**
     * Converts this array back to a (shallow) javascript structure.
     * For a deep clone use mobx.toJS
     */
    toJS: function () {
        return this.slice();
    },
    toJSON: function () {
        // Used by JSON.stringify
        return this.toJS();
    },
    /*
     * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)
     * since these functions alter the inner structure of the array, the have side effects.
     * Because the have side effects, they should not be used in computed function,
     * and for that reason the do not call dependencyState.notifyObserved
     */
    splice: function (index, deleteCount) {
        var newItems = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newItems[_i - 2] = arguments[_i];
        }
        var adm = this[$mobx];
        switch (arguments.length) {
            case 0:
                return [];
            case 1:
                return adm.spliceWithArray(index);
            case 2:
                return adm.spliceWithArray(index, deleteCount);
        }
        return adm.spliceWithArray(index, deleteCount, newItems);
    },
    spliceWithArray: function (index, deleteCount, newItems) {
        var adm = this[$mobx];
        return adm.spliceWithArray(index, deleteCount, newItems);
    },
    push: function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var adm = this[$mobx];
        adm.spliceWithArray(adm.values.length, 0, items);
        return adm.values.length;
    },
    pop: function () {
        return this.splice(Math.max(this[$mobx].values.length - 1, 0), 1)[0];
    },
    shift: function () {
        return this.splice(0, 1)[0];
    },
    unshift: function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var adm = this[$mobx];
        adm.spliceWithArray(0, 0, items);
        return adm.values.length;
    },
    reverse: function () {
        // reverse by default mutates in place before returning the result
        // which makes it both a 'derivation' and a 'mutation'.
        // so we deviate from the default and just make it an dervitation
        if (false) {}
        var clone = this.slice();
        return clone.reverse.apply(clone, arguments);
    },
    sort: function (compareFn) {
        // sort by default mutates in place before returning the result
        // which goes against all good practices. Let's not change the array in place!
        if (false) {}
        var clone = this.slice();
        return clone.sort.apply(clone, arguments);
    },
    remove: function (value) {
        var adm = this[$mobx];
        var idx = adm.dehanceValues(adm.values).indexOf(value);
        if (idx > -1) {
            this.splice(idx, 1);
            return true;
        }
        return false;
    },
    get: function (index) {
        var adm = this[$mobx];
        if (adm) {
            if (index < adm.values.length) {
                adm.atom.reportObserved();
                return adm.dehanceValue(adm.values[index]);
            }
            console.warn("[mobx.array] Attempt to read an array index (" + index + ") that is out of bounds (" + adm.values.length + "). Please check length first. Out of bound indices will not be tracked by MobX");
        }
        return undefined;
    },
    set: function (index, newValue) {
        var adm = this[$mobx];
        var values = adm.values;
        if (index < values.length) {
            // update at index in range
            checkIfStateModificationsAreAllowed(adm.atom);
            var oldValue = values[index];
            if (hasInterceptors(adm)) {
                var change = interceptChange(adm, {
                    type: "update",
                    object: adm.proxy,
                    index: index,
                    newValue: newValue
                });
                if (!change)
                    return;
                newValue = change.newValue;
            }
            newValue = adm.enhancer(newValue, oldValue);
            var changed = newValue !== oldValue;
            if (changed) {
                values[index] = newValue;
                adm.notifyArrayChildUpdate(index, newValue, oldValue);
            }
        }
        else if (index === values.length) {
            // add a new item
            adm.spliceWithArray(index, 0, [newValue]);
        }
        else {
            // out of bounds
            throw new Error("[mobx.array] Index out of bounds, " + index + " is larger than " + values.length);
        }
    }
};
[
    "concat",
    "every",
    "filter",
    "forEach",
    "indexOf",
    "join",
    "lastIndexOf",
    "map",
    "reduce",
    "reduceRight",
    "slice",
    "some",
    "toString",
    "toLocaleString"
].forEach(function (funcName) {
    arrayExtensions[funcName] = function () {
        var adm = this[$mobx];
        adm.atom.reportObserved();
        var res = adm.dehanceValues(adm.values);
        return res[funcName].apply(res, arguments);
    };
});
var isObservableArrayAdministration = createInstanceofPredicate("ObservableArrayAdministration", ObservableArrayAdministration);
function isObservableArray(thing) {
    return isObject(thing) && isObservableArrayAdministration(thing[$mobx]);
}

var _a;
var ObservableMapMarker = {};
// just extend Map? See also https://gist.github.com/nestharus/13b4d74f2ef4a2f4357dbd3fc23c1e54
// But: https://github.com/mobxjs/mobx/issues/1556
var ObservableMap = /** @class */ (function () {
    function ObservableMap(initialData, enhancer, name) {
        if (enhancer === void 0) { enhancer = deepEnhancer; }
        if (name === void 0) { name = "ObservableMap@" + getNextId(); }
        this.enhancer = enhancer;
        this.name = name;
        this[_a] = ObservableMapMarker;
        this._keysAtom = createAtom(this.name + ".keys()");
        this[Symbol.toStringTag] = "Map";
        if (typeof Map !== "function") {
            throw new Error("mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js");
        }
        this._data = new Map();
        this._hasMap = new Map();
        this.merge(initialData);
    }
    ObservableMap.prototype._has = function (key) {
        return this._data.has(key);
    };
    ObservableMap.prototype.has = function (key) {
        var _this = this;
        if (!globalState.trackingDerivation)
            return this._has(key);
        var entry = this._hasMap.get(key);
        if (!entry) {
            // todo: replace with atom (breaking change)
            var newEntry = (entry = new ObservableValue(this._has(key), referenceEnhancer, this.name + "." + stringifyKey(key) + "?", false));
            this._hasMap.set(key, newEntry);
            onBecomeUnobserved(newEntry, function () { return _this._hasMap.delete(key); });
        }
        return entry.get();
    };
    ObservableMap.prototype.set = function (key, value) {
        var hasKey = this._has(key);
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                type: hasKey ? "update" : "add",
                object: this,
                newValue: value,
                name: key
            });
            if (!change)
                return this;
            value = change.newValue;
        }
        if (hasKey) {
            this._updateValue(key, value);
        }
        else {
            this._addValue(key, value);
        }
        return this;
    };
    ObservableMap.prototype.delete = function (key) {
        var _this = this;
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                type: "delete",
                object: this,
                name: key
            });
            if (!change)
                return false;
        }
        if (this._has(key)) {
            var notifySpy = isSpyEnabled();
            var notify = hasListeners(this);
            var change = notify || notifySpy
                ? {
                    type: "delete",
                    object: this,
                    oldValue: this._data.get(key).value,
                    name: key
                }
                : null;
            if (notifySpy && "production" !== "production")
                spyReportStart(__assign(__assign({}, change), { name: this.name, key: key }));
            transaction(function () {
                _this._keysAtom.reportChanged();
                _this._updateHasMapEntry(key, false);
                var observable = _this._data.get(key);
                observable.setNewValue(undefined);
                _this._data.delete(key);
            });
            if (notify)
                notifyListeners(this, change);
            if (notifySpy && "production" !== "production")
                spyReportEnd();
            return true;
        }
        return false;
    };
    ObservableMap.prototype._updateHasMapEntry = function (key, value) {
        var entry = this._hasMap.get(key);
        if (entry) {
            entry.setNewValue(value);
        }
    };
    ObservableMap.prototype._updateValue = function (key, newValue) {
        var observable = this._data.get(key);
        newValue = observable.prepareNewValue(newValue);
        if (newValue !== globalState.UNCHANGED) {
            var notifySpy = isSpyEnabled();
            var notify = hasListeners(this);
            var change = notify || notifySpy
                ? {
                    type: "update",
                    object: this,
                    oldValue: observable.value,
                    name: key,
                    newValue: newValue
                }
                : null;
            if (notifySpy && "production" !== "production")
                spyReportStart(__assign(__assign({}, change), { name: this.name, key: key }));
            observable.setNewValue(newValue);
            if (notify)
                notifyListeners(this, change);
            if (notifySpy && "production" !== "production")
                spyReportEnd();
        }
    };
    ObservableMap.prototype._addValue = function (key, newValue) {
        var _this = this;
        checkIfStateModificationsAreAllowed(this._keysAtom);
        transaction(function () {
            var observable = new ObservableValue(newValue, _this.enhancer, _this.name + "." + stringifyKey(key), false);
            _this._data.set(key, observable);
            newValue = observable.value; // value might have been changed
            _this._updateHasMapEntry(key, true);
            _this._keysAtom.reportChanged();
        });
        var notifySpy = isSpyEnabled();
        var notify = hasListeners(this);
        var change = notify || notifySpy
            ? {
                type: "add",
                object: this,
                name: key,
                newValue: newValue
            }
            : null;
        if (notifySpy && "production" !== "production")
            spyReportStart(__assign(__assign({}, change), { name: this.name, key: key }));
        if (notify)
            notifyListeners(this, change);
        if (notifySpy && "production" !== "production")
            spyReportEnd();
    };
    ObservableMap.prototype.get = function (key) {
        if (this.has(key))
            return this.dehanceValue(this._data.get(key).get());
        return this.dehanceValue(undefined);
    };
    ObservableMap.prototype.dehanceValue = function (value) {
        if (this.dehancer !== undefined) {
            return this.dehancer(value);
        }
        return value;
    };
    ObservableMap.prototype.keys = function () {
        this._keysAtom.reportObserved();
        return this._data.keys();
    };
    ObservableMap.prototype.values = function () {
        var self = this;
        var nextIndex = 0;
        var keys = Array.from(this.keys());
        return makeIterable({
            next: function () {
                return nextIndex < keys.length
                    ? { value: self.get(keys[nextIndex++]), done: false }
                    : { done: true };
            }
        });
    };
    ObservableMap.prototype.entries = function () {
        var self = this;
        var nextIndex = 0;
        var keys = Array.from(this.keys());
        return makeIterable({
            next: function () {
                if (nextIndex < keys.length) {
                    var key = keys[nextIndex++];
                    return {
                        value: [key, self.get(key)],
                        done: false
                    };
                }
                return { done: true };
            }
        });
    };
    ObservableMap.prototype[(_a = $mobx, Symbol.iterator)] = function () {
        return this.entries();
    };
    ObservableMap.prototype.forEach = function (callback, thisArg) {
        var e_1, _b;
        try {
            for (var _c = __values(this), _d = _c.next(); !_d.done; _d = _c.next()) {
                var _e = __read(_d.value, 2), key = _e[0], value = _e[1];
                callback.call(thisArg, value, key, this);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /** Merge another object into this object, returns this. */
    ObservableMap.prototype.merge = function (other) {
        var _this = this;
        if (isObservableMap(other)) {
            other = other.toJS();
        }
        transaction(function () {
            if (isPlainObject(other))
                getPlainObjectKeys(other).forEach(function (key) { return _this.set(key, other[key]); });
            else if (Array.isArray(other))
                other.forEach(function (_b) {
                    var _c = __read(_b, 2), key = _c[0], value = _c[1];
                    return _this.set(key, value);
                });
            else if (isES6Map(other)) {
                if (other.constructor !== Map)
                    fail("Cannot initialize from classes that inherit from Map: " + other.constructor.name); // prettier-ignore
                other.forEach(function (value, key) { return _this.set(key, value); });
            }
            else if (other !== null && other !== undefined)
                fail("Cannot initialize map from " + other);
        });
        return this;
    };
    ObservableMap.prototype.clear = function () {
        var _this = this;
        transaction(function () {
            untracked(function () {
                var e_2, _b;
                try {
                    for (var _c = __values(_this.keys()), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var key = _d.value;
                        _this.delete(key);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            });
        });
    };
    ObservableMap.prototype.replace = function (values) {
        var _this = this;
        transaction(function () {
            // grab all the keys that are present in the new map but not present in the current map
            // and delete them from the map, then merge the new map
            // this will cause reactions only on changed values
            var newKeys = getMapLikeKeys(values);
            var oldKeys = Array.from(_this.keys());
            var missingKeys = oldKeys.filter(function (k) { return newKeys.indexOf(k) === -1; });
            missingKeys.forEach(function (k) { return _this.delete(k); });
            _this.merge(values);
        });
        return this;
    };
    Object.defineProperty(ObservableMap.prototype, "size", {
        get: function () {
            this._keysAtom.reportObserved();
            return this._data.size;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns a plain object that represents this map.
     * Note that all the keys being stringified.
     * If there are duplicating keys after converting them to strings, behaviour is undetermined.
     */
    ObservableMap.prototype.toPOJO = function () {
        var e_3, _b;
        var res = {};
        try {
            for (var _c = __values(this), _d = _c.next(); !_d.done; _d = _c.next()) {
                var _e = __read(_d.value, 2), key = _e[0], value = _e[1];
                // We lie about symbol key types due to https://github.com/Microsoft/TypeScript/issues/1863
                res[typeof key === "symbol" ? key : stringifyKey(key)] = value;
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return res;
    };
    /**
     * Returns a shallow non observable object clone of this map.
     * Note that the values migth still be observable. For a deep clone use mobx.toJS.
     */
    ObservableMap.prototype.toJS = function () {
        return new Map(this);
    };
    ObservableMap.prototype.toJSON = function () {
        // Used by JSON.stringify
        return this.toPOJO();
    };
    ObservableMap.prototype.toString = function () {
        var _this = this;
        return (this.name +
            "[{ " +
            Array.from(this.keys())
                .map(function (key) { return stringifyKey(key) + ": " + ("" + _this.get(key)); })
                .join(", ") +
            " }]");
    };
    /**
     * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
     * for callback details
     */
    ObservableMap.prototype.observe = function (listener, fireImmediately) {
         false &&
            false;
        return registerListener(this, listener);
    };
    ObservableMap.prototype.intercept = function (handler) {
        return registerInterceptor(this, handler);
    };
    return ObservableMap;
}());
/* 'var' fixes small-build issue */
var isObservableMap = createInstanceofPredicate("ObservableMap", ObservableMap);

var _a$1;
var ObservableSetMarker = {};
var ObservableSet = /** @class */ (function () {
    function ObservableSet(initialData, enhancer, name) {
        if (enhancer === void 0) { enhancer = deepEnhancer; }
        if (name === void 0) { name = "ObservableSet@" + getNextId(); }
        this.name = name;
        this[_a$1] = ObservableSetMarker;
        this._data = new Set();
        this._atom = createAtom(this.name);
        this[Symbol.toStringTag] = "Set";
        if (typeof Set !== "function") {
            throw new Error("mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js");
        }
        this.enhancer = function (newV, oldV) { return enhancer(newV, oldV, name); };
        if (initialData) {
            this.replace(initialData);
        }
    }
    ObservableSet.prototype.dehanceValue = function (value) {
        if (this.dehancer !== undefined) {
            return this.dehancer(value);
        }
        return value;
    };
    ObservableSet.prototype.clear = function () {
        var _this = this;
        transaction(function () {
            untracked(function () {
                var e_1, _b;
                try {
                    for (var _c = __values(_this._data.values()), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var value = _d.value;
                        _this.delete(value);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            });
        });
    };
    ObservableSet.prototype.forEach = function (callbackFn, thisArg) {
        var e_2, _b;
        try {
            for (var _c = __values(this), _d = _c.next(); !_d.done; _d = _c.next()) {
                var value = _d.value;
                callbackFn.call(thisArg, value, value, this);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    Object.defineProperty(ObservableSet.prototype, "size", {
        get: function () {
            this._atom.reportObserved();
            return this._data.size;
        },
        enumerable: true,
        configurable: true
    });
    ObservableSet.prototype.add = function (value) {
        var _this = this;
        checkIfStateModificationsAreAllowed(this._atom);
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                type: "add",
                object: this,
                newValue: value
            });
            if (!change)
                return this;
            // TODO: ideally, value = change.value would be done here, so that values can be
            // changed by interceptor. Same applies for other Set and Map api's.
        }
        if (!this.has(value)) {
            transaction(function () {
                _this._data.add(_this.enhancer(value, undefined));
                _this._atom.reportChanged();
            });
            var notifySpy = isSpyEnabled();
            var notify = hasListeners(this);
            var change = notify || notifySpy
                ? {
                    type: "add",
                    object: this,
                    newValue: value
                }
                : null;
            if (notifySpy && "production" !== "production")
                spyReportStart(change);
            if (notify)
                notifyListeners(this, change);
            if (notifySpy && "production" !== "production")
                spyReportEnd();
        }
        return this;
    };
    ObservableSet.prototype.delete = function (value) {
        var _this = this;
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                type: "delete",
                object: this,
                oldValue: value
            });
            if (!change)
                return false;
        }
        if (this.has(value)) {
            var notifySpy = isSpyEnabled();
            var notify = hasListeners(this);
            var change = notify || notifySpy
                ? {
                    type: "delete",
                    object: this,
                    oldValue: value
                }
                : null;
            if (notifySpy && "production" !== "production")
                spyReportStart(__assign(__assign({}, change), { name: this.name }));
            transaction(function () {
                _this._atom.reportChanged();
                _this._data.delete(value);
            });
            if (notify)
                notifyListeners(this, change);
            if (notifySpy && "production" !== "production")
                spyReportEnd();
            return true;
        }
        return false;
    };
    ObservableSet.prototype.has = function (value) {
        this._atom.reportObserved();
        return this._data.has(this.dehanceValue(value));
    };
    ObservableSet.prototype.entries = function () {
        var nextIndex = 0;
        var keys = Array.from(this.keys());
        var values = Array.from(this.values());
        return makeIterable({
            next: function () {
                var index = nextIndex;
                nextIndex += 1;
                return index < values.length
                    ? { value: [keys[index], values[index]], done: false }
                    : { done: true };
            }
        });
    };
    ObservableSet.prototype.keys = function () {
        return this.values();
    };
    ObservableSet.prototype.values = function () {
        this._atom.reportObserved();
        var self = this;
        var nextIndex = 0;
        var observableValues = Array.from(this._data.values());
        return makeIterable({
            next: function () {
                return nextIndex < observableValues.length
                    ? { value: self.dehanceValue(observableValues[nextIndex++]), done: false }
                    : { done: true };
            }
        });
    };
    ObservableSet.prototype.replace = function (other) {
        var _this = this;
        if (isObservableSet(other)) {
            other = other.toJS();
        }
        transaction(function () {
            if (Array.isArray(other)) {
                _this.clear();
                other.forEach(function (value) { return _this.add(value); });
            }
            else if (isES6Set(other)) {
                _this.clear();
                other.forEach(function (value) { return _this.add(value); });
            }
            else if (other !== null && other !== undefined) {
                fail("Cannot initialize set from " + other);
            }
        });
        return this;
    };
    ObservableSet.prototype.observe = function (listener, fireImmediately) {
        // TODO 'fireImmediately' can be true?
         false &&
            false;
        return registerListener(this, listener);
    };
    ObservableSet.prototype.intercept = function (handler) {
        return registerInterceptor(this, handler);
    };
    ObservableSet.prototype.toJS = function () {
        return new Set(this);
    };
    ObservableSet.prototype.toString = function () {
        return this.name + "[ " + Array.from(this).join(", ") + " ]";
    };
    ObservableSet.prototype[(_a$1 = $mobx, Symbol.iterator)] = function () {
        return this.values();
    };
    return ObservableSet;
}());
var isObservableSet = createInstanceofPredicate("ObservableSet", ObservableSet);

var ObservableObjectAdministration = /** @class */ (function () {
    function ObservableObjectAdministration(target, values, name, defaultEnhancer) {
        if (values === void 0) { values = new Map(); }
        this.target = target;
        this.values = values;
        this.name = name;
        this.defaultEnhancer = defaultEnhancer;
        this.keysAtom = new Atom(name + ".keys");
    }
    ObservableObjectAdministration.prototype.read = function (key) {
        return this.values.get(key).get();
    };
    ObservableObjectAdministration.prototype.write = function (key, newValue) {
        var instance = this.target;
        var observable = this.values.get(key);
        if (observable instanceof ComputedValue) {
            observable.set(newValue);
            return;
        }
        // intercept
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                type: "update",
                object: this.proxy || instance,
                name: key,
                newValue: newValue
            });
            if (!change)
                return;
            newValue = change.newValue;
        }
        newValue = observable.prepareNewValue(newValue);
        // notify spy & observers
        if (newValue !== globalState.UNCHANGED) {
            var notify = hasListeners(this);
            var notifySpy = isSpyEnabled();
            var change = notify || notifySpy
                ? {
                    type: "update",
                    object: this.proxy || instance,
                    oldValue: observable.value,
                    name: key,
                    newValue: newValue
                }
                : null;
            if (notifySpy && "production" !== "production")
                spyReportStart(__assign(__assign({}, change), { name: this.name, key: key }));
            observable.setNewValue(newValue);
            if (notify)
                notifyListeners(this, change);
            if (notifySpy && "production" !== "production")
                spyReportEnd();
        }
    };
    ObservableObjectAdministration.prototype.has = function (key) {
        var map = this.pendingKeys || (this.pendingKeys = new Map());
        var entry = map.get(key);
        if (entry)
            return entry.get();
        else {
            var exists = !!this.values.get(key);
            // Possible optimization: Don't have a separate map for non existing keys,
            // but store them in the values map instead, using a special symbol to denote "not existing"
            entry = new ObservableValue(exists, referenceEnhancer, this.name + "." + stringifyKey(key) + "?", false);
            map.set(key, entry);
            return entry.get(); // read to subscribe
        }
    };
    ObservableObjectAdministration.prototype.addObservableProp = function (propName, newValue, enhancer) {
        if (enhancer === void 0) { enhancer = this.defaultEnhancer; }
        var target = this.target;
        assertPropertyConfigurable(target, propName);
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                object: this.proxy || target,
                name: propName,
                type: "add",
                newValue: newValue
            });
            if (!change)
                return;
            newValue = change.newValue;
        }
        var observable = new ObservableValue(newValue, enhancer, this.name + "." + stringifyKey(propName), false);
        this.values.set(propName, observable);
        newValue = observable.value; // observableValue might have changed it
        Object.defineProperty(target, propName, generateObservablePropConfig(propName));
        this.notifyPropertyAddition(propName, newValue);
    };
    ObservableObjectAdministration.prototype.addComputedProp = function (propertyOwner, // where is the property declared?
    propName, options) {
        var target = this.target;
        options.name = options.name || this.name + "." + stringifyKey(propName);
        this.values.set(propName, new ComputedValue(options));
        if (propertyOwner === target || isPropertyConfigurable(propertyOwner, propName))
            Object.defineProperty(propertyOwner, propName, generateComputedPropConfig(propName));
    };
    ObservableObjectAdministration.prototype.remove = function (key) {
        if (!this.values.has(key))
            return;
        var target = this.target;
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                object: this.proxy || target,
                name: key,
                type: "remove"
            });
            if (!change)
                return;
        }
        try {
            startBatch();
            var notify = hasListeners(this);
            var notifySpy = isSpyEnabled();
            var oldObservable = this.values.get(key);
            var oldValue = oldObservable && oldObservable.get();
            oldObservable && oldObservable.set(undefined);
            // notify key and keyset listeners
            this.keysAtom.reportChanged();
            this.values.delete(key);
            if (this.pendingKeys) {
                var entry = this.pendingKeys.get(key);
                if (entry)
                    entry.set(false);
            }
            // delete the prop
            delete this.target[key];
            var change = notify || notifySpy
                ? {
                    type: "remove",
                    object: this.proxy || target,
                    oldValue: oldValue,
                    name: key
                }
                : null;
            if (notifySpy && "production" !== "production")
                spyReportStart(__assign(__assign({}, change), { name: this.name, key: key }));
            if (notify)
                notifyListeners(this, change);
            if (notifySpy && "production" !== "production")
                spyReportEnd();
        }
        finally {
            endBatch();
        }
    };
    ObservableObjectAdministration.prototype.illegalAccess = function (owner, propName) {
        /**
         * This happens if a property is accessed through the prototype chain, but the property was
         * declared directly as own property on the prototype.
         *
         * E.g.:
         * class A {
         * }
         * extendObservable(A.prototype, { x: 1 })
         *
         * classB extens A {
         * }
         * console.log(new B().x)
         *
         * It is unclear whether the property should be considered 'static' or inherited.
         * Either use `console.log(A.x)`
         * or: decorate(A, { x: observable })
         *
         * When using decorate, the property will always be redeclared as own property on the actual instance
         */
        console.warn("Property '" + propName + "' of '" + owner + "' was accessed through the prototype chain. Use 'decorate' instead to declare the prop or access it statically through it's owner");
    };
    /**
     * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
     * for callback details
     */
    ObservableObjectAdministration.prototype.observe = function (callback, fireImmediately) {
         false &&
            false;
        return registerListener(this, callback);
    };
    ObservableObjectAdministration.prototype.intercept = function (handler) {
        return registerInterceptor(this, handler);
    };
    ObservableObjectAdministration.prototype.notifyPropertyAddition = function (key, newValue) {
        var notify = hasListeners(this);
        var notifySpy = isSpyEnabled();
        var change = notify || notifySpy
            ? {
                type: "add",
                object: this.proxy || this.target,
                name: key,
                newValue: newValue
            }
            : null;
        if (notifySpy && "production" !== "production")
            spyReportStart(__assign(__assign({}, change), { name: this.name, key: key }));
        if (notify)
            notifyListeners(this, change);
        if (notifySpy && "production" !== "production")
            spyReportEnd();
        if (this.pendingKeys) {
            var entry = this.pendingKeys.get(key);
            if (entry)
                entry.set(true);
        }
        this.keysAtom.reportChanged();
    };
    ObservableObjectAdministration.prototype.getKeys = function () {
        var e_1, _a;
        this.keysAtom.reportObserved();
        // return Reflect.ownKeys(this.values) as any
        var res = [];
        try {
            for (var _b = __values(this.values), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
                if (value instanceof ObservableValue)
                    res.push(key);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return res;
    };
    return ObservableObjectAdministration;
}());
function asObservableObject(target, name, defaultEnhancer) {
    if (name === void 0) { name = ""; }
    if (defaultEnhancer === void 0) { defaultEnhancer = deepEnhancer; }
    if (Object.prototype.hasOwnProperty.call(target, $mobx))
        return target[$mobx];
     false &&
        false;
    if (!isPlainObject(target))
        name = (target.constructor.name || "ObservableObject") + "@" + getNextId();
    if (!name)
        name = "ObservableObject@" + getNextId();
    var adm = new ObservableObjectAdministration(target, new Map(), stringifyKey(name), defaultEnhancer);
    addHiddenProp(target, $mobx, adm);
    return adm;
}
var observablePropertyConfigs = Object.create(null);
var computedPropertyConfigs = Object.create(null);
function generateObservablePropConfig(propName) {
    return (observablePropertyConfigs[propName] ||
        (observablePropertyConfigs[propName] = {
            configurable: true,
            enumerable: true,
            get: function () {
                return this[$mobx].read(propName);
            },
            set: function (v) {
                this[$mobx].write(propName, v);
            }
        }));
}
function getAdministrationForComputedPropOwner(owner) {
    var adm = owner[$mobx];
    if (!adm) {
        // because computed props are declared on proty,
        // the current instance might not have been initialized yet
        initializeInstance(owner);
        return owner[$mobx];
    }
    return adm;
}
function generateComputedPropConfig(propName) {
    return (computedPropertyConfigs[propName] ||
        (computedPropertyConfigs[propName] = {
            configurable: globalState.computedConfigurable,
            enumerable: false,
            get: function () {
                return getAdministrationForComputedPropOwner(this).read(propName);
            },
            set: function (v) {
                getAdministrationForComputedPropOwner(this).write(propName, v);
            }
        }));
}
var isObservableObjectAdministration = createInstanceofPredicate("ObservableObjectAdministration", ObservableObjectAdministration);
function isObservableObject(thing) {
    if (isObject(thing)) {
        // Initializers run lazily when transpiling to babel, so make sure they are run...
        initializeInstance(thing);
        return isObservableObjectAdministration(thing[$mobx]);
    }
    return false;
}

function getAtom(thing, property) {
    if (typeof thing === "object" && thing !== null) {
        if (isObservableArray(thing)) {
            if (property !== undefined)
                fail( false &&
                    false);
            return thing[$mobx].atom;
        }
        if (isObservableSet(thing)) {
            return thing[$mobx];
        }
        if (isObservableMap(thing)) {
            var anyThing = thing;
            if (property === undefined)
                return anyThing._keysAtom;
            var observable = anyThing._data.get(property) || anyThing._hasMap.get(property);
            if (!observable)
                fail( false &&
                    false);
            return observable;
        }
        // Initializers run lazily when transpiling to babel, so make sure they are run...
        initializeInstance(thing);
        if (property && !thing[$mobx])
            thing[property]; // See #1072
        if (isObservableObject(thing)) {
            if (!property)
                return fail( false && false);
            var observable = thing[$mobx].values.get(property);
            if (!observable)
                fail( false &&
                    false);
            return observable;
        }
        if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
            return thing;
        }
    }
    else if (typeof thing === "function") {
        if (isReaction(thing[$mobx])) {
            // disposer function
            return thing[$mobx];
        }
    }
    return fail( false && false);
}
function getAdministration(thing, property) {
    if (!thing)
        fail("Expecting some object");
    if (property !== undefined)
        return getAdministration(getAtom(thing, property));
    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing))
        return thing;
    if (isObservableMap(thing) || isObservableSet(thing))
        return thing;
    // Initializers run lazily when transpiling to babel, so make sure they are run...
    initializeInstance(thing);
    if (thing[$mobx])
        return thing[$mobx];
    fail( false && false);
}
function getDebugName(thing, property) {
    var named;
    if (property !== undefined)
        named = getAtom(thing, property);
    else if (isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing))
        named = getAdministration(thing);
    else
        named = getAtom(thing); // valid for arrays as well
    return named.name;
}

var toString = Object.prototype.toString;
function deepEqual(a, b, depth) {
    if (depth === void 0) { depth = -1; }
    return eq(a, b, depth);
}
// Copied from https://github.com/jashkenas/underscore/blob/5c237a7c682fb68fd5378203f0bf22dce1624854/underscore.js#L1186-L1289
// Internal recursive comparison function for `isEqual`.
function eq(a, b, depth, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b)
        return a !== 0 || 1 / a === 1 / b;
    // `null` or `undefined` only equal to itself (strict comparison).
    if (a == null || b == null)
        return false;
    // `NaN`s are equivalent, but non-reflexive.
    if (a !== a)
        return b !== b;
    // Exhaust primitive checks
    var type = typeof a;
    if (type !== "function" && type !== "object" && typeof b != "object")
        return false;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b))
        return false;
    switch (className) {
        // Strings, numbers, regular expressions, dates, and booleans are compared by value.
        case "[object RegExp]":
        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
        case "[object String]":
            // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
            // equivalent to `new String("5")`.
            return "" + a === "" + b;
        case "[object Number]":
            // `NaN`s are equivalent, but non-reflexive.
            // Object(NaN) is equivalent to NaN.
            if (+a !== +a)
                return +b !== +b;
            // An `egal` comparison is performed for other numeric values.
            return +a === 0 ? 1 / +a === 1 / b : +a === +b;
        case "[object Date]":
        case "[object Boolean]":
            // Coerce dates and booleans to numeric primitive values. Dates are compared by their
            // millisecond representations. Note that invalid dates with millisecond representations
            // of `NaN` are not equivalent.
            return +a === +b;
        case "[object Symbol]":
            return (typeof Symbol !== "undefined" && Symbol.valueOf.call(a) === Symbol.valueOf.call(b));
        case "[object Map]":
        case "[object Set]":
            // Maps and Sets are unwrapped to arrays of entry-pairs, adding an incidental level.
            // Hide this extra level by increasing the depth.
            if (depth >= 0) {
                depth++;
            }
            break;
    }
    // Unwrap any wrapped objects.
    a = unwrap(a);
    b = unwrap(b);
    var areArrays = className === "[object Array]";
    if (!areArrays) {
        if (typeof a != "object" || typeof b != "object")
            return false;
        // Objects with different constructors are not equivalent, but `Object`s or `Array`s
        // from different frames are.
        var aCtor = a.constructor, bCtor = b.constructor;
        if (aCtor !== bCtor &&
            !(typeof aCtor === "function" &&
                aCtor instanceof aCtor &&
                typeof bCtor === "function" &&
                bCtor instanceof bCtor) &&
            ("constructor" in a && "constructor" in b)) {
            return false;
        }
    }
    if (depth === 0) {
        return false;
    }
    else if (depth < 0) {
        depth = -1;
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
        // Linear search. Performance is inversely proportional to the number of
        // unique nested structures.
        if (aStack[length] === a)
            return bStack[length] === b;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    // Recursively compare objects and arrays.
    if (areArrays) {
        // Compare array lengths to determine if a deep comparison is necessary.
        length = a.length;
        if (length !== b.length)
            return false;
        // Deep compare the contents, ignoring non-numeric properties.
        while (length--) {
            if (!eq(a[length], b[length], depth - 1, aStack, bStack))
                return false;
        }
    }
    else {
        // Deep compare objects.
        var keys = Object.keys(a);
        var key = void 0;
        length = keys.length;
        // Ensure that both objects contain the same number of properties before comparing deep equality.
        if (Object.keys(b).length !== length)
            return false;
        while (length--) {
            // Deep compare each member
            key = keys[length];
            if (!(has$1(b, key) && eq(a[key], b[key], depth - 1, aStack, bStack)))
                return false;
        }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
}
function unwrap(a) {
    if (isObservableArray(a))
        return a.slice();
    if (isES6Map(a) || isObservableMap(a))
        return Array.from(a.entries());
    if (isES6Set(a) || isObservableSet(a))
        return Array.from(a.entries());
    return a;
}
function has$1(a, key) {
    return Object.prototype.hasOwnProperty.call(a, key);
}

function makeIterable(iterator) {
    iterator[Symbol.iterator] = getSelf;
    return iterator;
}
function getSelf() {
    return this;
}

/*
The only reason for this file to exist is pure horror:
Without it rollup can make the bundling fail at any point in time; when it rolls up the files in the wrong order
it will cause undefined errors (for example because super classes or local variables not being hoisted).
With this file that will still happen,
but at least in this file we can magically reorder the imports with trial and error until the build succeeds again.
*/

/**
 * (c) Michel Weststrate 2015 - 2018
 * MIT Licensed
 *
 * Welcome to the mobx sources! To get an global overview of how MobX internally works,
 * this is a good place to start:
 * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74
 *
 * Source folders:
 * ===============
 *
 * - api/     Most of the public static methods exposed by the module can be found here.
 * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.
 * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.
 * - utils/   Utility stuff.
 *
 */
if (typeof Proxy === "undefined" || typeof Symbol === "undefined") {
    throw new Error("[mobx] MobX 5+ requires Proxy and Symbol objects. If your environment doesn't support Symbol or Proxy objects, please downgrade to MobX 4. For React Native Android, consider upgrading JSCore.");
}
try {
    // define process.env if needed
    // if this is not a production build in the first place
    // (in which case the expression below would be substituted with 'production')
    "production";
}
catch (e) {
    var g = getGlobal();
    if (typeof process === "undefined")
        g.process = {};
    g.process.env = {};
}
(function () {
    function testCodeMinification() { }
    if (testCodeMinification.name !== "testCodeMinification" &&
        "production" !== "production" &&
        typeof process !== 'undefined' && process.env.IGNORE_MOBX_MINIFY_WARNING !== "true") {
        // trick so it doesn't get replaced
        var varName = ["process", "env", "NODE_ENV"].join(".");
        console.warn("[mobx] you are running a minified build, but '" + varName + "' was not set to 'production' in your bundler. This results in an unnecessarily large and slow bundle");
    }
})();
if (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "object") {
    // See: https://github.com/andykog/mobx-devtools/
    __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({
        spy: spy,
        extras: {
            getDebugName: getDebugName
        },
        $mobx: $mobx
    });
}



/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(23), __webpack_require__(19)))

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TaggedString; });
class TaggedString {
    constructor(...vals) {
        this.vals = vals;
    }
    append(t) {
        if (t instanceof TaggedString)
            this.vals.push(...t.vals);
        else
            this.vals.push(t);
        return this;
    }
    toString() {
        return this.vals.join("");
    }
    flatten() {
        for (let i = 0; i < this.vals.length; i++) {
            const v = this.vals[i];
            if (v instanceof TaggedString) {
                v.flatten();
                this.vals.splice(i, 1, ...this.vals[i].vals);
            }
        }
    }
    // template function creating an array containing strings and UnitNumbers for linking to definitions in the gui
    static t(literals, ...placeholders) {
        let result = [];
        for (let i = 0; i < placeholders.length; i++) {
            if (literals[i].length > 0)
                result.push(literals[i]);
            result.push(placeholders[i]);
        }
        const last = literals[literals.length - 1];
        if (last.length > 0)
            result.push(last);
        return new TaggedString(...result);
    }
    static join(str, joinEle) {
        if (str.length === 0)
            return new TaggedString();
        const out = [str[0]];
        for (let i = 1; i < str.length; i++) {
            out.push(joinEle, str[i]);
        }
        return new TaggedString(...out);
    }
}


/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return isEvaluated; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return NumberNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return IdentifierNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FunctionCallNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return UnaryFunctionCallNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return InfixFunctionCallNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return rpnToTree; });
/* harmony import */ var _unitNumber_output__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _unitNumber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);
/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7);
/* harmony import */ var _TokenType__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4);
/* harmony import */ var _RPNTokenType__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(14);





function isEvaluated(node) {
    return !!node.value;
}
class NumberNode {
    constructor(number) {
        this.number = number;
    }
    toTaggedString(_parentPrecedence = Infinity) {
        return new _unitNumber_output__WEBPACK_IMPORTED_MODULE_0__[/* TaggedString */ "a"](this.number);
    }
    toJSON() {
        return { type: "NumberNode", number: this.number };
    }
    toDebugString() {
        return this.number;
    }
    clone() {
        return new NumberNode(this.number);
    }
}
class IdentifierNode {
    constructor(identifier) {
        this.identifier = identifier;
    }
    toTaggedString(_parentPrecedence = Infinity) {
        if (isEvaluated(this))
            return new _unitNumber_output__WEBPACK_IMPORTED_MODULE_0__[/* TaggedString */ "a"](this.value);
        // hack: unit may not exist
        return new _unitNumber_output__WEBPACK_IMPORTED_MODULE_0__[/* TaggedString */ "a"](new _unitNumber__WEBPACK_IMPORTED_MODULE_1__[/* UnitNumber */ "b"](0, undefined, this.identifier));
    }
    toJSON() {
        return { type: "IdenifierNode", identifier: this.identifier };
    }
    toDebugString() {
        return this.identifier;
    }
    clone() {
        return new IdentifierNode(this.identifier);
    }
}
class FunctionCallNode {
    constructor(fnname, operands) {
        this.fnname = fnname;
        this.operands = operands;
    }
    toTaggedString(parentPrecedence = Infinity) {
        return _unitNumber_output__WEBPACK_IMPORTED_MODULE_0__[/* TaggedString */ "a"].t `${this.fnname}(${_unitNumber_output__WEBPACK_IMPORTED_MODULE_0__[/* TaggedString */ "a"].join(this.operands.map(x => x.toTaggedString(parentPrecedence)), ", ")})`;
    }
    toJSON() {
        return {
            type: this.constructor.name,
            fnname: this.fnname,
            operands: this.operands.map(x => x.toJSON()),
        };
    }
    clone() {
        return new this.constructor(this.fnname, this.operands.map(o => o.clone()));
    }
}
class UnaryFunctionCallNode extends FunctionCallNode {
    toDebugString() {
        return `(${this.fnname} ${this.operands[0].toDebugString()})`;
    }
}
class InfixFunctionCallNode extends FunctionCallNode {
    toTaggedString(parentPrecedence = Infinity) {
        const op = _parser__WEBPACK_IMPORTED_MODULE_2__[/* infixOperators */ "b"][this.fnname];
        const disp = op.displayString || this.fnname;
        const leftAdd = op.associativity === _parser__WEBPACK_IMPORTED_MODULE_2__[/* Associativity */ "a"].right ? -0.01 : 0;
        const rightAdd = op.associativity === _parser__WEBPACK_IMPORTED_MODULE_2__[/* Associativity */ "a"].left ? -0.01 : 0;
        let result;
        if (this.operands.length === 1)
            result = _unitNumber_output__WEBPACK_IMPORTED_MODULE_0__[/* TaggedString */ "a"].t `${leftAdd ? disp : ""}${this.operands[0].toTaggedString(op.precedence + leftAdd + rightAdd)}${rightAdd ? disp : ""}`;
        else if (this.operands.length === 2)
            result = _unitNumber_output__WEBPACK_IMPORTED_MODULE_0__[/* TaggedString */ "a"].t `${this.operands[0].toTaggedString(op.precedence + leftAdd)} `
                .append(disp === "" ? "" : disp + " ")
                .append(this.operands[1].toTaggedString(op.precedence + rightAdd));
        else
            throw Error("invalid operand count");
        if (parentPrecedence < op.precedence)
            return _unitNumber_output__WEBPACK_IMPORTED_MODULE_0__[/* TaggedString */ "a"].t `(${result})`;
        else
            return result;
    }
    toDebugString() {
        //if (this.operands.length !== 2)
        //	throw Error(`${this} has ${this.operands.length} ≠ 2 operands`);
        return `(${this.operands[0].toDebugString()} ${this.fnname} ${this.operands[1] ? this.operands[1].toDebugString() : ""})`;
    }
}
function rpnToTree(tokens) {
    const stack = [];
    for (const token of tokens) {
        if (token.type === _RPNTokenType__WEBPACK_IMPORTED_MODULE_4__[/* InfixOperator */ "a"]) {
            const op = _parser__WEBPACK_IMPORTED_MODULE_2__[/* infixOperators */ "b"][token.str.trim()];
            if (!op)
                throw Error("Operator not found: " + token.str);
            if (stack.length < op.arity)
                throw Error(`Operator '${token.str.trim()}' needs ${op.arity} arguments, only got ${stack.length}`);
            stack.push(new InfixFunctionCallNode(token.str.trim(), stack.splice(stack.length - op.arity)));
        }
        else if (token.type === _RPNTokenType__WEBPACK_IMPORTED_MODULE_4__[/* UnaryOperator */ "b"]) {
            const op = _parser__WEBPACK_IMPORTED_MODULE_2__[/* unaryOperators */ "h"][token.str.trim()];
            if (stack.length < op.arity)
                throw Error(`Operator '${token.str.trim()}' needs ${op.arity} arguments, only got ${stack.length}`);
            stack.push(new UnaryFunctionCallNode(token.str.trim(), stack.splice(stack.length - op.arity)));
        }
        else if (token.type === _TokenType__WEBPACK_IMPORTED_MODULE_3__[/* Identifier */ "a"]) {
            stack.push(new IdentifierNode(token.str));
        }
        else if (token.type === _TokenType__WEBPACK_IMPORTED_MODULE_3__[/* Number */ "c"]) {
            stack.push(new NumberNode(token.str));
        }
        else
            throw Error("to tree: don't know token type " + token.type);
    }
    if (stack.length > 1)
        throw Error("stack has more than one element left: " +
            stack.map(x => x.toDebugString()));
    else if (stack.length === 0)
        throw Error(`Empty`);
    return stack[0];
}


/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Identifier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return Number; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return LParen; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return RParen; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return Operator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return Whitespace; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return Unknown; });
const Identifier = "Identifier";
const Number = "Number";
const LParen = "LParen";
const RParen = "RParen";
const Operator = "Operator";
const Whitespace = "Whitespace";
const Unknown = "Unknown";


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (false) { var throwOnDirectAccess, ReactIs; } else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = __webpack_require__(92)();
}


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
  ) {
    return;
  }
  if (false) {}
  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if (true) {
  // DCE check should happen before ReactDOM bundle executes so that
  // DevTools can report bad minification during injection.
  checkDCE();
  module.exports = __webpack_require__(33);
} else {}


/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return tokenToDebugString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return tokenize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return preprocess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Associativity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return infixOperators; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return unaryOperators; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return toRPN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return parse; });
/* harmony import */ var _Tree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);
/* harmony import */ var _RPNTokenType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(14);
/* harmony import */ var _TokenType__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);



const TokenTypeRegex = [
    [/^\s+/, _TokenType__WEBPACK_IMPORTED_MODULE_2__[/* Whitespace */ "g"]],
    [/^\(/, _TokenType__WEBPACK_IMPORTED_MODULE_2__[/* LParen */ "b"]],
    [/^\)/, _TokenType__WEBPACK_IMPORTED_MODULE_2__[/* RParen */ "e"]],
    [/^(=>|<=|>=|\|\||&&|==|!=|[ =≈+*/^|·!<>-]|to )/, _TokenType__WEBPACK_IMPORTED_MODULE_2__[/* Operator */ "d"]],
    [
        /^[-+]?(([0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)|NaN|Infinity)/,
        _TokenType__WEBPACK_IMPORTED_MODULE_2__[/* Number */ "c"],
    ],
    [/^[^() =<>≈+*/^&|·!>-]+/i, _TokenType__WEBPACK_IMPORTED_MODULE_2__[/* Identifier */ "a"]],
    [/^./, _TokenType__WEBPACK_IMPORTED_MODULE_2__[/* Unknown */ "f"]],
];
function tokenToDebugString(t) {
    return `(${t.type} '${t.str}')`;
}
function* tokenize(str) {
    let i = 0;
    let it = 0;
    while (i < str.length) {
        it++;
        for (const [regex, type] of TokenTypeRegex) {
            const match = regex.exec(str.substr(i));
            if (match) {
                let str = match[0];
                yield { type, str, start: i };
                i += str.length;
                break;
            }
        }
        if (it > 1000)
            throw Error("wtf");
    }
}
/**
 * fix some things:
 * - remove whitespace
 * - replace unary minus with operator '#', "/m" with "1/m"
 * - replace unicode · with *
 * - identifier before '(' is function call e.g. "sin(x)"
 * - implicit multiplication between {), num, identifier} and {(, num, identifier)}
 */
function* preprocess(tokens) {
    let lastToken = null;
    for (const token of tokens) {
        if (token.type === _TokenType__WEBPACK_IMPORTED_MODULE_2__[/* Whitespace */ "g"])
            continue;
        if (lastToken)
            yield lastToken;
        if (lastToken &&
            [_TokenType__WEBPACK_IMPORTED_MODULE_2__[/* Identifier */ "a"], _TokenType__WEBPACK_IMPORTED_MODULE_2__[/* Number */ "c"], _TokenType__WEBPACK_IMPORTED_MODULE_2__[/* LParen */ "b"]].indexOf(token.type) >= 0 &&
            [_TokenType__WEBPACK_IMPORTED_MODULE_2__[/* Identifier */ "a"], _TokenType__WEBPACK_IMPORTED_MODULE_2__[/* Number */ "c"], _TokenType__WEBPACK_IMPORTED_MODULE_2__[/* RParen */ "e"]].indexOf(lastToken.type) >= 0)
            yield { type: _TokenType__WEBPACK_IMPORTED_MODULE_2__[/* Operator */ "d"], str: "", start: token.start };
        if (token.type === _TokenType__WEBPACK_IMPORTED_MODULE_2__[/* Operator */ "d"]) {
            if (token.str === "*")
                token.str = "·";
            if (token.str === "in")
                token.str = "to";
            if (!lastToken ||
                [_TokenType__WEBPACK_IMPORTED_MODULE_2__[/* LParen */ "b"], _TokenType__WEBPACK_IMPORTED_MODULE_2__[/* Operator */ "d"]].indexOf(lastToken.type) >= 0) {
                /*// is an unary operator
                if (token.str === "-") token.str = token.str.replace("-", "#");
                else if (token.str === "/")
                    yield {
                        type: TokenType.Number,
                        str: "1",
                        start: token.start,
                    };
                else throw Error("Unary " + token.str + " not allowed");*/
            }
        }
        lastToken = token;
    }
    if (lastToken)
        yield lastToken;
}
var Associativity;
(function (Associativity) {
    /** a / b / c = (a / b) / c */
    Associativity[Associativity["left"] = 0] = "left";
    /** a ^ b ^ c = a ^ (b ^ c) */
    Associativity[Associativity["right"] = 1] = "right";
    /** a + b + c = (a + b) + c = a + (b + c) */
    Associativity[Associativity["both"] = 2] = "both";
})(Associativity || (Associativity = {}));
const infixOperators = {
    // hack: this only allowed at end of line
    "!": { precedence: 0.5, associativity: Associativity.left, arity: 1 },
    "^": { precedence: 1, associativity: Associativity.right, arity: 2 },
    "|": { precedence: 1.5, associativity: Associativity.left, arity: 2 },
    "": { precedence: 1.8, associativity: Associativity.left, arity: 2 },
    "·": { precedence: 2, associativity: Associativity.both, arity: 2 },
    "/": { precedence: 2, associativity: Associativity.left, arity: 2 },
    "+": { precedence: 4, associativity: Associativity.both, arity: 2 },
    "-": { precedence: 4, associativity: Associativity.left, arity: 2 },
    "<": { precedence: 5, associativity: Associativity.left, arity: 2 },
    "<=": { precedence: 5, associativity: Associativity.left, arity: 2 },
    ">": { precedence: 5, associativity: Associativity.left, arity: 2 },
    ">=": { precedence: 5, associativity: Associativity.left, arity: 2 },
    "==": { precedence: 6, associativity: Associativity.left, arity: 2 },
    "!=": { precedence: 6, associativity: Associativity.left, arity: 2 },
    //'&': { precedence: 7, associativity: Associativity.left, arity: 2 },
    //'^': { precedence: 7.1, associativity: Associativity.left, arity: 2 },
    //'|': { precedence: 7.2, associativity: Associativity.left, arity: 2 },
    "&&": { precedence: 7.3, associativity: Associativity.left, arity: 2 },
    "||": { precedence: 7.4, associativity: Associativity.left, arity: 2 },
    "=>": { precedence: 8, associativity: Associativity.right, arity: 2 },
    "=": { precedence: 10, associativity: Associativity.right, arity: 2 },
    "≈": { precedence: 10, associativity: Associativity.right, arity: 2 },
    to: { precedence: 12, associativity: Associativity.left, arity: 2 },
};
const unaryOperators = {
    "-": {
        precedence: 0.5,
        associativity: Associativity.right,
        arity: 1,
    },
    "/": {
        precedence: 0.8,
        associativity: Associativity.right,
        arity: 1,
    },
};
function operator(token) {
    const op = token.str.trim();
    if (token.type === _RPNTokenType__WEBPACK_IMPORTED_MODULE_1__[/* InfixOperator */ "a"])
        var c = infixOperators[op];
    else if (token.type === _RPNTokenType__WEBPACK_IMPORTED_MODULE_1__[/* UnaryOperator */ "b"])
        c = unaryOperators[op];
    else
        return null;
    if (!c)
        throw Error(`unknown ${token.type}: '${op}'`);
    return c;
}
function* toRPN(tokens) {
    const stack = [];
    function top(stack) {
        return stack[stack.length - 1];
    }
    let infix_mode = "unary";
    function yieldOperator(token) {
        if (token.type !== _TokenType__WEBPACK_IMPORTED_MODULE_2__[/* Operator */ "d"])
            throw Error("not an operator " + token.type);
        if (infix_mode === "infix")
            return Object.assign(Object.assign({}, token), { type: _RPNTokenType__WEBPACK_IMPORTED_MODULE_1__[/* InfixOperator */ "a"] });
        else
            return Object.assign(Object.assign({}, token), { type: _RPNTokenType__WEBPACK_IMPORTED_MODULE_1__[/* UnaryOperator */ "b"] });
    }
    for (const token of tokens) {
        switch (token.type) {
            case _TokenType__WEBPACK_IMPORTED_MODULE_2__[/* Number */ "c"]:
            case _TokenType__WEBPACK_IMPORTED_MODULE_2__[/* Identifier */ "a"]:
                yield Object.assign(Object.assign({}, token), { type: token.type });
                infix_mode = "infix";
                break;
            case _TokenType__WEBPACK_IMPORTED_MODULE_2__[/* Operator */ "d"]:
                const convToken = yieldOperator(token);
                const o1 = operator(convToken);
                let token2, o2;
                while ((token2 = top(stack)) &&
                    (o2 = operator(token2)) &&
                    (((o1.associativity === Associativity.left ||
                        o1.associativity === Associativity.both) &&
                        o1.precedence >= o2.precedence) ||
                        (o1.associativity === Associativity.right &&
                            o1.precedence > o2.precedence))) {
                    yield stack.pop();
                }
                stack.push(convToken);
                infix_mode = "unary";
                break;
            case _TokenType__WEBPACK_IMPORTED_MODULE_2__[/* LParen */ "b"]:
                stack.push(Object.assign(Object.assign({}, token), { type: token.type }));
                infix_mode = "unary";
                break;
            case _TokenType__WEBPACK_IMPORTED_MODULE_2__[/* RParen */ "e"]:
                while (top(stack) && top(stack).type !== _TokenType__WEBPACK_IMPORTED_MODULE_2__[/* LParen */ "b"])
                    yield stack.pop();
                if (stack.length === 0)
                    throw Error(token.start + ": missing opening paren");
                stack.pop();
                infix_mode = "infix";
                break;
            default: {
                console.error("unknown token ", token);
                throw Error("what is " + tokenToDebugString(token));
            }
        }
    }
    while (stack.length > 0) {
        if (top(stack).type === _RPNTokenType__WEBPACK_IMPORTED_MODULE_1__[/* UnaryOperator */ "b"])
            yield stack.pop();
        else if (top(stack).type === _RPNTokenType__WEBPACK_IMPORTED_MODULE_1__[/* InfixOperator */ "a"]) {
            yield stack.pop();
            //throw Error("Missing second operand for " + top(stack).str);
        }
        else
            throw Error(top(stack).start + ":missing closing parens");
    }
}
function parse(str) {
    return Object(_Tree__WEBPACK_IMPORTED_MODULE_0__[/* rpnToTree */ "g"])(toRPN(preprocess(tokenize(str))));
}


/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "b", function() { return /* reexport */ UnitNumber_UnitNumber; });
__webpack_require__.d(__webpack_exports__, "a", function() { return /* reexport */ SpecialUnitNumber_SpecialUnitNumber; });

// EXTERNAL MODULE: ./node_modules/decimal.js/decimal.js
var decimal = __webpack_require__(64);
var decimal_default = /*#__PURE__*/__webpack_require__.n(decimal);

// CONCATENATED MODULE: ./src/unitNumber/Dimension.ts


class Dimension_Dimension {
    constructor(name) {
        this.id = Dimension_Dimension.dimensions.size;
        this.name = name;
        Dimension_Dimension.dimensions.set(this.id, this);
        this.baseUnit = new UnitNumber_UnitNumber(1, new DimensionMap_DimensionMap([[this.id, 1]]), this.name);
    }
    static get(id) {
        return Dimension_Dimension.dimensions.get(id);
    }
}
Dimension_Dimension.dimensions = new Map();
// </hack>

// EXTERNAL MODULE: ./src/unitNumber/output.ts
var output = __webpack_require__(2);

// CONCATENATED MODULE: ./src/unitNumber/DimensionMap.ts


/**
 * maps from dimension id to exponent
 * e.g.  m/s^2 has dimension map {m => 1, s => -2}
 */
class DimensionMap_DimensionMap extends Map {
    static toUnicodePow(x) {
        if (x === 1)
            return "";
        return x
            .toString()
            .split("")
            .map(x => (x === "." ? "⋅" : DimensionMap_DimensionMap.unicodePow[+x]))
            .join("");
    }
    static listToUnicodePow(entries) {
        return output["a" /* TaggedString */].join(entries.map(([id, exp]) => output["a" /* TaggedString */].t `${Dimension_Dimension.get(id).baseUnit}${DimensionMap_DimensionMap.toUnicodePow(exp)}`), " ");
    }
    toString() {
        return this.toTaggedString() + "";
    }
    toTaggedString() {
        const { pos, neg } = this.splitPosNeg();
        let str = DimensionMap_DimensionMap.listToUnicodePow(pos);
        if (neg.length > 0) {
            str.vals.push(" / ");
            str.append(DimensionMap_DimensionMap.listToUnicodePow(neg));
        }
        return str;
    }
    splitPosNeg() {
        const pos = [...this].filter(([_id, exp]) => exp > 0);
        const neg = [...this].filter(([_id, exp]) => exp < 0);
        neg.forEach(x => (x[1] *= -1));
        return { pos, neg };
    }
    static join(...list) {
        const map = new DimensionMap_DimensionMap();
        for (const { dimensions, factor } of list) {
            for (const [dimension, exponent] of dimensions) {
                const newFactor = (map.get(dimension) || 0) + exponent * factor;
                if (newFactor === 0)
                    map.delete(dimension);
                else
                    map.set(dimension, newFactor);
            }
        }
        return map;
    }
    assertEmpty(str = "") {
        if (this.size > 0)
            throw Error(str + " must be dimensionless");
    }
    equals(d) {
        const diff = DimensionMap_DimensionMap.join({ dimensions: this, factor: 1 }, { dimensions: d, factor: -1 });
        return diff.size === 0;
    }
    assertEqual(d) {
        if (!this.equals(d))
            throw Error("dimensions must be the same");
    }
    toMismatchString() {
        const { pos: tooMuch, neg: notEnough } = this.splitPosNeg();
        if (tooMuch.length === 0)
            return "missing " + new DimensionMap_DimensionMap(notEnough);
        if (notEnough.length === 0)
            return "don't want " + new DimensionMap_DimensionMap(tooMuch);
        return `have ${new DimensionMap_DimensionMap(tooMuch)}, want ${new DimensionMap_DimensionMap(notEnough)}`;
    }
}
DimensionMap_DimensionMap.unicodePow = "⁰¹²³⁴⁵⁶⁷⁸⁹";

// CONCATENATED MODULE: ./src/unitNumber/UnitNumber.ts




function dimensionMismatch(a, b, diff) {
    throw Error(`Dimensions don't match (${a.toString()} vs ${b.toString() || 1}): ` +
        diff.toMismatchString());
}
class UnitNumber_UnitNumber {
    constructor(value, dimensions = new DimensionMap_DimensionMap(), id) {
        // null in specialunitnumber
        if (value !== null)
            this.value = new decimal_default.a(value);
        if (dimensions !== null)
            this.dimensions = dimensions;
        this.id = id === undefined ? null : id;
    }
    mul(other) {
        if (other.isSpecial())
            return other.mul(this, true);
        return new UnitNumber_UnitNumber(this.value.times(other.value), DimensionMap_DimensionMap.join({ dimensions: this.dimensions, factor: 1 }, { dimensions: other.dimensions, factor: 1 }), null);
    }
    div(other) {
        if (other.isSpecial())
            return other.div(this, true);
        let name = null;
        //if (this.dimensions.size == 0 && other.dimensions.size == 0)
        //	name = this.value.toString() + "|" + other.value.toString();
        return new UnitNumber_UnitNumber(this.value.div(other.value), DimensionMap_DimensionMap.join({ dimensions: this.dimensions, factor: 1 }, { dimensions: other.dimensions, factor: -1 }), name);
    }
    plus(other, factor = 1) {
        if (other.isSpecial())
            return other.plus(this, factor, true);
        const dimensionDifference = this.div(other).dimensions;
        if (dimensionDifference.size > 0)
            throw dimensionMismatch(this.dimensions, other.dimensions, dimensionDifference);
        return new UnitNumber_UnitNumber(this.value.plus(other.value.times(factor)), this.dimensions);
    }
    minus(other) {
        return this.plus(other, -1);
    }
    memberFunctionHasSideeffects(member, other) {
        if (other.isSpecial())
            return other.memberFunctionHasSideeffects(member, this);
        return false;
    }
    withIdentifier(id) {
        return new UnitNumber_UnitNumber(this.value, this.dimensions, id);
    }
    isSpecial() {
        return false;
    }
    assign(_unit) {
        throw Error("Can't assign value to " + this);
    }
    toString() {
        if (this.id)
            return this.id;
        else
            return this.toTaggedString().toString();
    }
    toTaggedString() {
        if (this.id)
            return new output["a" /* TaggedString */](this);
        else {
            if (this.value.equals(1) && this.dimensions.size == 0)
                return new output["a" /* TaggedString */]("1");
            const v = this.value.equals(1) ? "" : this.value.toPrecision(10);
            return output["a" /* TaggedString */].t `${v}${v && this.dimensions.size > 0 ? " " : ""}${this.dimensions.toTaggedString()}`;
        }
    }
    pow(factor) {
        if (typeof factor === "number" || factor instanceof decimal_default.a)
            return new UnitNumber_UnitNumber(this.value.pow(factor), DimensionMap_DimensionMap.join({
                dimensions: this.dimensions,
                factor: typeof factor === "number" ? factor : factor.toNumber(),
            }));
        else if (factor.isSpecial())
            return factor.pow(this, true);
        else if (factor.dimensions.size > 0)
            throw Error("power must be dimensionless");
        else
            return this.pow(factor.value);
    }
    convertTo(unit) {
        const d = this.div(unit);
        if (d.dimensions.size > 0)
            throw Error("Dimensions don't match: " + d.dimensions.toMismatchString());
        return d.mul(unit);
    }
    static createBaseUnit(dimensionName) {
        return new Dimension_Dimension(dimensionName).baseUnit;
    }
}
UnitNumber_UnitNumber.zero = new UnitNumber_UnitNumber(0);
UnitNumber_UnitNumber.one = new UnitNumber_UnitNumber(1);
UnitNumber_UnitNumber.minusOne = new UnitNumber_UnitNumber(-1);

// CONCATENATED MODULE: ./src/unitNumber/SpecialUnitNumber.ts


/**
 * unit numbers that are actually functions that are applied using * operator
 * e.g. 10 °C = 10 * °C actually means degC(10)
 *
 * https://i.imgur.com/PLP3ZrJ.jpg
 */
class SpecialUnitNumber_SpecialUnitNumber extends UnitNumber_UnitNumber {
    constructor(meta) {
        super(null, null, meta.id);
        this.fnTree = meta.fnTree || null;
        this.fn = meta.fn || null;
        this.hasSideEffects = meta.hasSideEffects;
        this.inverse =
            meta.inverse ||
                new SpecialUnitNumber_SpecialUnitNumber({
                    fnTree: meta.inverseFnTree,
                    fn: meta.inverseFn,
                    inverse: this,
                    id: meta.id + "^-1",
                    hasSideEffects: meta.hasSideEffects,
                });
    }
    get value() {
        throw Error("can't get function.value");
    }
    get dimensions() {
        throw Error("can't get function.dimensions");
    }
    withIdentifier(id) {
        return new SpecialUnitNumber_SpecialUnitNumber({
            fnTree: this.fnTree || undefined,
            fn: this.fn || undefined,
            id,
            inverseFnTree: this.inverse.fnTree || undefined,
            inverseFn: this.inverse.fn || undefined,
            hasSideEffects: this.hasSideEffects,
        });
    }
    mul(other, reversed = false) {
        if (this.fn)
            return this.fn(other, reversed ? "right" : "left");
        throw Error(`function not defined: ${this}`);
    }
    div(other, reversed = false) {
        if (reversed)
            return this.inverse.mul(other);
        else
            throw Error(`can't divide function ${this} with ${other}`);
    }
    plus(other, _factor = 1, _reversed = false) {
        throw Error(`can't add ${this} and ${other}`);
    }
    pow(other, _reversed = false) {
        other.dimensions.assertEmpty();
        if (other.value.equals(-1))
            return this.inverse;
        throw Error(`can't pow ${this} with ${other}`);
    }
    memberFunctionHasSideeffects(member, _other) {
        if (member === "mul" || member === "div")
            return this.hasSideEffects;
        else
            return false;
    }
    /** TODO: replace this with normal assignment / replacement? */
    assign(other) {
        if (other.isSpecial()) {
            this.fn = other.fn;
            this.fnTree = other.fnTree;
            this.hasSideEffects = other.hasSideEffects;
        }
        else
            throw Error("can't assign non-function to function");
    }
    isSpecial() {
        return true;
    }
    toString() {
        if (this.id)
            return this.id;
        else
            return this.toTaggedString().toString();
    }
    toTaggedString() {
        if (this.id)
            return new output["a" /* TaggedString */](this);
        else
            return this.fnTree.toTaggedString();
    }
}

// CONCATENATED MODULE: ./src/unitNumber/index.ts




/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "e", function() { return /* binding */ stripCommentsTrim; });
__webpack_require__.d(__webpack_exports__, "d", function() { return /* binding */ parseEvaluate; });
__webpack_require__.d(__webpack_exports__, "c", function() { return /* binding */ evaluationHasSideeffect; });
__webpack_require__.d(__webpack_exports__, "b", function() { return /* binding */ evaluate; });
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ define; });

// EXTERNAL MODULE: ./src/unitNumber/index.ts + 4 modules
var unitNumber = __webpack_require__(8);

// EXTERNAL MODULE: ./src/libqalc/parser.ts
var parser = __webpack_require__(7);

// EXTERNAL MODULE: ./src/unitNumber/output.ts
var output = __webpack_require__(2);

// EXTERNAL MODULE: ./src/libqalc/Tree.ts
var Tree = __webpack_require__(3);

// CONCATENATED MODULE: ./src/libqalc/operators.ts



function makeFn(fn, hasSideEffects = () => false) {
    return {
        apply: (node, scope) => fn(...node.operands.map(arg => evaluate(arg, scope).value)),
        hasSideEffects,
    };
}
function memberAlias(fnname) {
    return makeFn((a, b) => {
        const x = a[fnname];
        return x.call(a, b);
    }, (node, scope) => {
        if (node.operands.some(op => evaluationHasSideeffect(op, scope)))
            return true;
        const [op1, op2] = node.operands;
        const [o1, o2] = [evaluate(op1, scope), evaluate(op2, scope)];
        return o1.value.memberFunctionHasSideeffects(fnname, o2.value);
    });
}
function makeRawFn(hasSideEffects, apply) {
    if (typeof hasSideEffects !== "function") {
        const val = hasSideEffects;
        hasSideEffects = () => val;
    }
    return {
        apply,
        hasSideEffects,
    };
}
const yes = unitNumber["b" /* UnitNumber */].one;
const no = unitNumber["b" /* UnitNumber */].zero;
const unaryOperators = {
    "-": makeFn(l => l.mul(unitNumber["b" /* UnitNumber */].minusOne)),
    "/": makeFn(l => unitNumber["b" /* UnitNumber */].one.div(l)),
};
const assignment = makeRawFn(true, (node, scope) => {
    const [name, val] = node.operands;
    const evNode = node;
    if (name instanceof Tree["b" /* IdentifierNode */]) {
        scope.setUnitOrPrefix(name.identifier, evNode, evaluate(val, scope));
        return evNode.value;
    }
    else {
        const leftVal = evaluate(name, scope);
        if (leftVal.value.id)
            leftVal.value.assign(evaluate(val, scope).value);
        else
            throw Error("invalid left hand side of assignment");
        return leftVal.value;
    }
});
const infixOperators = {
    "=": assignment,
    "≈": assignment,
    "!": makeRawFn(true, (node, scope) => {
        const [name, oth] = node.operands;
        if (oth)
            throw Error("! must be at end of line");
        const evNode = node;
        if (name instanceof Tree["b" /* IdentifierNode */]) {
            evNode.value = unitNumber["b" /* UnitNumber */].createBaseUnit(name.identifier);
            scope.setUnit(name.identifier, evNode);
            return evNode.value;
        }
        else
            throw Error("invalid definition");
    }),
    "=>": makeRawFn(false, (node, scope) => {
        const [argNameNode, val] = node.operands;
        if (argNameNode instanceof Tree["b" /* IdentifierNode */]) {
            const argName = argNameNode.identifier;
            return new unitNumber["a" /* SpecialUnitNumber */]({
                fnTree: val,
                fn: arg => {
                    const argval = new Tree["b" /* IdentifierNode */](argName);
                    argval.value = arg;
                    return evaluate(val.clone(), scope.withNew([argName, argval])).value;
                },
                hasSideEffects: false,
            });
        }
        else
            throw Error("invalid lambda definition");
    }),
    ">": makeFn((a, b) => (a.dimensions.assertEqual(b.dimensions),
        a.value.greaterThan(b.value) ? yes : no)),
    "<": makeFn((a, b) => (a.dimensions.assertEqual(b.dimensions),
        a.value.lessThan(b.value) ? yes : no)),
    ">=": makeFn((a, b) => (a.dimensions.assertEqual(b.dimensions),
        a.value.greaterThanOrEqualTo(b.value) ? yes : no)),
    "<=": makeFn((a, b) => (a.dimensions.assertEqual(b.dimensions),
        a.value.lessThanOrEqualTo(b.value) ? yes : no)),
    "==": makeFn((a, b) => a.value.equals(b.value) && a.dimensions.equals(b.dimensions)
        ? yes
        : no),
    "!=": makeFn((a, b) => (a.dimensions.assertEqual(b.dimensions),
        a.value.equals(b.value) ? no : yes)),
    "&&": makeRawFn(false, ({ operands: [a, b] }, scope) => {
        const aEv = evaluate(a, scope).value;
        return !aEv.value.isZero() ? evaluate(b, scope).value : aEv;
    }),
    "||": makeRawFn(false, ({ operands: [a, b] }, scope) => {
        const aEv = evaluate(a, scope).value;
        return aEv.value.isZero() ? evaluate(b, scope).value : aEv;
    }),
    "·": memberAlias("mul"),
    "": memberAlias("mul"),
    "/": memberAlias("div"),
    "|": memberAlias("div"),
    "^": memberAlias("pow"),
    "+": memberAlias("plus"),
    "-": memberAlias("minus"),
    to: memberAlias("convertTo"),
};

// EXTERNAL MODULE: ./src/libqalc/globalScope.ts + 2 modules
var globalScope = __webpack_require__(10);

// EXTERNAL MODULE: ./src/libqalc/init.ts
var init = __webpack_require__(47);

// CONCATENATED MODULE: ./src/libqalc/evaluator.ts







function stripCommentsTrim(str) {
    const inx = str.indexOf("#");
    if (inx < 0)
        return { code: str.trim() };
    return {
        code: str.substr(0, inx).trim(),
        comment: str.substr(inx + 1).trim(),
    };
}
function parseEvaluate(str) {
    return evaluate(Object(parser["c" /* parse */])(stripCommentsTrim(str).code), globalScope["a" /* default */]);
}
function evaluationHasSideeffect(node, scope) {
    if (node instanceof Tree["a" /* FunctionCallNode */]) {
        const fn = resolveFunction(node, scope);
        return fn.hasSideEffects(node, scope);
    }
    else if (node instanceof Tree["b" /* IdentifierNode */]) {
        return false;
    }
    else if (node instanceof Tree["d" /* NumberNode */]) {
        return false;
    }
    else {
        console.error("unknown node", node);
        throw Error("unknown node");
    }
}
function resolveFunction(node, _scope) {
    if (node instanceof Tree["c" /* InfixFunctionCallNode */]) {
        const op = node.fnname;
        const fn = infixOperators[op];
        if (!fn)
            throw Error("function not found: " + op);
        return fn;
    }
    else if (node instanceof Tree["e" /* UnaryFunctionCallNode */]) {
        const op = node.fnname;
        const fn = unaryOperators[op];
        if (!fn)
            throw Error("function not found: " + op);
        return fn;
    }
    else
        throw Error("wat");
}
function evaluate(node, scope) {
    Object(init["a" /* default */])();
    if (Tree["f" /* isEvaluated */](node))
        return node;
    let evNode = node;
    if (node instanceof Tree["d" /* NumberNode */]) {
        evNode.value = new unitNumber["b" /* UnitNumber */](node.number);
    }
    else if (node instanceof Tree["b" /* IdentifierNode */]) {
        evNode.value = scope.getUnit(node.identifier).value;
        if (!evNode.value)
            throw Error("can't resolve " + node.identifier);
    }
    else if (node instanceof Tree["c" /* InfixFunctionCallNode */]) {
        const fn = resolveFunction(node, scope);
        evNode.value = fn.apply(node, scope);
    }
    else if (node instanceof Tree["e" /* UnaryFunctionCallNode */]) {
        const fn = resolveFunction(node, scope);
        evNode.value = fn.apply(node, scope);
    }
    else
        throw Error("what is " + node.toDebugString());
    return evNode;
}
function define(unit, scope) {
    if (unit instanceof Tree["b" /* IdentifierNode */])
        unit = scope.getUnit(unit.value.id);
    const t = output["a" /* TaggedString */].t;
    const canonical = scope.getCanonical(unit.value);
    const canonicalText = canonical
        ? canonical == unit.value
            ? "(Canonical form)"
            : t `Canonical Form: ${canonical.toTaggedString()}`
        : "";
    const aliases = scope.getAliases(unit.value);
    const aliasesText = aliases && aliases.length > 0
        ? output["a" /* TaggedString */].t `Aliases: ${output["a" /* TaggedString */].join(aliases.map(a => a.value), ", ")}`
        : "";
    const info = scope.docMap.get(unit.value.id);
    let infoText = t ``;
    if (info) {
        infoText = t `
${info.comment ? info.comment : ""}
${info.headings.length
            ? "\nCategory: " + info.headings.map(x => `${x}`).join("\n -> ")
            : ""}
`;
    }
    unit = [...aliases, unit].find(alternative => alternative.value.id === unit.value.id);
    const inverse = unit.value instanceof unitNumber["a" /* SpecialUnitNumber */] && unit.value.inverse.fnTree;
    let inverseText = inverse ? t `Inverse:    ${inverse.toTaggedString()}` : "";
    const res = t `Definition: ${unit.toTaggedString()}.
		${inverseText}
		${canonicalText}

		${aliasesText}

		${infoText}`;
    res.flatten();
    res.vals = res.vals.map(x => typeof x === "string" ? x.replace(/\n\s*/g, "\n") : x);
    return res;
}


/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./src/libqalc/Tree.ts
var Tree = __webpack_require__(3);

// EXTERNAL MODULE: ./src/unitNumber/index.ts + 4 modules
var unitNumber = __webpack_require__(8);

// EXTERNAL MODULE: ./src/libqalc/evaluator.ts + 1 modules
var evaluator = __webpack_require__(9);

// CONCATENATED MODULE: ./src/libqalc/util.ts
// https://www.grammarly.com/blog/spelling-plurals-with-s-es/
const esSuffixes = ["s", "sh", "ch", "x", "z"];
/**
 * test -> null
 * inches -> inch
 * kilometers -> kilometer
 */
function tryRemovePluralSuffix(x) {
    if (x.slice(-2) === "es") {
        const wop = x.slice(0, -2);
        for (const suff of esSuffixes)
            if (wop.endsWith(suff))
                return wop;
    }
    if (x.slice(-1) === "s") {
        const wop = x.slice(0, -1);
        return wop;
    }
    return null;
}

// CONCATENATED MODULE: ./src/libqalc/scope.ts




class scope_Scope {
    constructor(scopes) {
        this.globalScope = new Map();
        this.scopes = [this.globalScope];
        this.prefixMap = new Map();
        this.canonicalMap = new Map();
        this.aliasMap = new Map();
        this.docMap = new Map();
        if (scopes)
            this.scopes = scopes;
    }
    addFunctions(...fns) {
        for (const { name, fn, hasSideEffects = false, mode = "leftOnly", } of fns) {
            const builtin = new Tree["b" /* IdentifierNode */]("[builtin]");
            function apply(a, modeB) {
                if (modeB === "left" && mode === "rightOnly")
                    throw Error(`${name} must be invoked as "x ${name}" not "${name} x"`);
                if (modeB === "right" && mode === "leftOnly")
                    throw Error(`${name} must be invoked as "${name} x" not "x ${name}"`);
                return fn(a);
            }
            builtin.value = new unitNumber["a" /* SpecialUnitNumber */]({
                fnTree: new Tree["d" /* NumberNode */]("[built in]"),
                fn: apply,
                hasSideEffects,
            });
            Object(evaluator["b" /* evaluate */])(new Tree["c" /* InfixFunctionCallNode */]("=", [
                new Tree["b" /* IdentifierNode */](name),
                builtin,
            ]), this);
        }
    }
    setUnit(name, val) {
        if (this.globalScope.has(name))
            throw Error(`Unit ${name} already exists.\nUse delete(${name}) to remove it. (${this.globalScope.get(name).toDebugString()})`);
        this.globalScope.set(name, val);
    }
    setPrefix(prefixName, node) {
        this.prefixMap.set(prefixName, node);
    }
    setUnitOrPrefixRaw(name, assignmentNode) {
        if (name.endsWith("_")) {
            const prefixName = name.substr(0, name.length - 1);
            this.setPrefix(prefixName, assignmentNode);
        }
        else {
            this.setUnit(name, assignmentNode);
        }
    }
    setUnitOrPrefix(name, assignmentNode, unit) {
        const evNode = assignmentNode;
        evNode.value = unit.value.withIdentifier(name);
        this.setUnitOrPrefixRaw(name, assignmentNode);
        this.unifyAliases(evNode, unit);
    }
    getAllUnits() {
        return this.globalScope.keys();
    }
    deleteUnit(name) {
        const unit = this.getUnit(name);
        const aliases = this.aliasMap.get(this.getCanonical(unit.value));
        if (aliases)
            aliases.delete(unit);
        return this.globalScope.delete(name);
    }
    getUnit(name, { withPrefix = true, withPluralSuffix = true, throwOnError = true, } = {}) {
        if (name.endsWith("_"))
            return this.getPrefix(name.substr(0, name.length - 1));
        const foundScope = this.scopes.find(map => map.has(name));
        if (!foundScope) {
            if (withPrefix)
                for (const prefix of this.prefixMap.keys()) {
                    if (name.startsWith(prefix)) {
                        let unit = this.getPrefix(prefix);
                        if (prefix.length < name.length) {
                            const suffix = this.getUnit(name.substr(prefix.length), { withPrefix: false, throwOnError: false });
                            if (suffix === null)
                                continue;
                            const unitValue = Object(evaluator["b" /* evaluate */])(new Tree["c" /* InfixFunctionCallNode */]("·", [
                                unit,
                                suffix,
                            ]), this);
                            if (unitValue.value.isSpecial())
                                continue; // ignore suffix on functions
                            unit = new Tree["c" /* InfixFunctionCallNode */]("=", [
                                new Tree["b" /* IdentifierNode */](name),
                                unitValue,
                            ]);
                            unit.value = unitValue.value.withIdentifier(name);
                        }
                        return unit;
                    }
                }
            if (withPluralSuffix) {
                const withoutPlural = tryRemovePluralSuffix(name);
                if (withoutPlural) {
                    return this.getUnit(withoutPlural, {
                        withPrefix,
                        withPluralSuffix: false,
                        throwOnError,
                    });
                }
            }
            if (throwOnError)
                throw Error("unknown unit: " + name);
            else
                return null;
        }
        let res = foundScope.get(name);
        if (!Tree["f" /* isEvaluated */](res)) {
            foundScope.delete(name);
            return Object(evaluator["b" /* evaluate */])(res, this);
        }
        else
            return res;
    }
    unifyAliases(unit1, unit2) {
        const can1 = this.getCanonical(unit1.value), can2 = this.getCanonical(unit2.value);
        if (!can1 && !can2) {
            const canonical = unit2.value.isSpecial() || unit2.value.dimensions.size > 0
                ? unit2.value
                : unit1.value;
            this.canonicalMap.set(unit1.value, canonical);
            this.canonicalMap.set(unit2.value, canonical);
            this.aliasMap.set(canonical, new Set([unit1, unit2]));
            return;
        }
        if (!can2 && can1) {
            this.canonicalMap.set(unit2.value, can1);
            this.aliasMap.get(can1).add(unit2);
            return;
        }
        if (!can1 && can2) {
            this.canonicalMap.set(unit1.value, can2);
            this.aliasMap.get(can2).add(unit1);
            return;
        }
        throw Error("unity error, can. form ex. for both " +
            unit1 +
            " and " +
            unit2 +
            ":" +
            can1 +
            " and " +
            can2);
    }
    getCanonical(u) {
        while (true) {
            let u2 = this.canonicalMap.get(u);
            if (!u2)
                return u2;
            if (u2 === u)
                return u;
            u = u2;
        }
    }
    getAliases(u) {
        return [...(this.aliasMap.get(this.getCanonical(u)) || [])].filter(x => !!x.value.id);
    }
    getPrefix(name) {
        let res = this.prefixMap.get(name);
        if (!res)
            throw Error("unknown prefix: " + name);
        if (!Tree["f" /* isEvaluated */](res)) {
            this.prefixMap.delete(name);
            return Object(evaluator["b" /* evaluate */])(res, this);
        }
        else
            return res;
    }
    withNew(...args) {
        const newScope = new Map(args);
        return Object.create(this, {
            scopes: { writable: false, value: [newScope, ...this.scopes] },
        });
    }
}

// CONCATENATED MODULE: ./src/libqalc/globalScope.ts

const globalScope = new scope_Scope();
/* harmony default export */ var libqalc_globalScope = __webpack_exports__["a"] = (globalScope);


/***/ }),
/* 11 */,
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "Observer", function() { return /* reexport */ ObserverComponent; });
__webpack_require__.d(__webpack_exports__, "isUsingStaticRendering", function() { return /* reexport */ isUsingStaticRendering; });
__webpack_require__.d(__webpack_exports__, "useAsObservableSource", function() { return /* reexport */ useAsObservableSource; });
__webpack_require__.d(__webpack_exports__, "useLocalStore", function() { return /* reexport */ useLocalStore; });
__webpack_require__.d(__webpack_exports__, "useObserver", function() { return /* reexport */ useObserver; });
__webpack_require__.d(__webpack_exports__, "useStaticRendering", function() { return /* reexport */ useStaticRendering; });
__webpack_require__.d(__webpack_exports__, "MobXProviderContext", function() { return /* binding */ MobXProviderContext; });
__webpack_require__.d(__webpack_exports__, "PropTypes", function() { return /* binding */ PropTypes; });
__webpack_require__.d(__webpack_exports__, "Provider", function() { return /* binding */ Provider; });
__webpack_require__.d(__webpack_exports__, "disposeOnUnmount", function() { return /* binding */ disposeOnUnmount; });
__webpack_require__.d(__webpack_exports__, "inject", function() { return /* binding */ inject; });
__webpack_require__.d(__webpack_exports__, "observer", function() { return /* binding */ mobxreact_esm_observer; });

// EXTERNAL MODULE: ./node_modules/mobx/lib/mobx.module.js
var mobx_module = __webpack_require__(1);

// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__(0);
var react_default = /*#__PURE__*/__webpack_require__.n(react);

// EXTERNAL MODULE: ./node_modules/react-dom/index.js
var react_dom = __webpack_require__(6);

// CONCATENATED MODULE: ./node_modules/mobx-react-lite/dist/index.module.js



if (!react["useState"]) {
    throw new Error("mobx-react-lite requires React with Hooks support");
}
if (!mobx_module["spy"]) {
    throw new Error("mobx-react-lite requires mobx at least version 4 to be available");
}

function useObservable(initialValue) {
    var observableRef = Object(react["useRef"])(null);
    if (!observableRef.current) {
        observableRef.current = Object(mobx_module["observable"])(initialValue);
    }
    return observableRef.current;
}

function useComputed(func, inputs) {
    if (inputs === void 0) { inputs = []; }
    var computed$1 = Object(react["useMemo"])(function () { return Object(mobx_module["computed"])(func); }, inputs);
    return computed$1.get();
}

var doNothingDisposer = function () {
    // empty
};
/**
 * Adds an observable effect (reaction, autorun, or anything else that returns a disposer) that will be registered upon component creation and disposed upon unmounting.
 * Returns the generated disposer for early disposal.
 *
 * @export
 * @template D
 * @param {() => D} disposerGenerator A function that returns the disposer of the wanted effect.
 * @param {ReadonlyArray<any>} [inputs=[]] If you want the effect to be automatically re-created when some variable(s) are changed then pass them in this array.
 * @returns {D}
 */
function useDisposable(disposerGenerator, inputs) {
    if (inputs === void 0) { inputs = []; }
    var disposerRef = Object(react["useRef"])(null);
    var earlyDisposedRef = Object(react["useRef"])(false);
    Object(react["useEffect"])(function () {
        return lazyCreateDisposer(false);
    }, inputs);
    function lazyCreateDisposer(earlyDisposal) {
        // ensure that we won't create a new disposer if it was early disposed
        if (earlyDisposedRef.current) {
            return doNothingDisposer;
        }
        if (!disposerRef.current) {
            var newDisposer = disposerGenerator();
            if (typeof newDisposer !== "function") {
                var error = new Error("generated disposer must be a function");
                {
                    // tslint:disable-next-line:no-console
                    console.error(error);
                    return doNothingDisposer;
                }
            }
            disposerRef.current = newDisposer;
        }
        return function () {
            if (disposerRef.current) {
                disposerRef.current();
                disposerRef.current = null;
            }
            if (earlyDisposal) {
                earlyDisposedRef.current = true;
            }
        };
    }
    return lazyCreateDisposer(true);
}

var globalIsUsingStaticRendering = false;
function useStaticRendering(enable) {
    globalIsUsingStaticRendering = enable;
}
function isUsingStaticRendering() {
    return globalIsUsingStaticRendering;
}

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function printDebugValue(v) {
    if (!v.current) {
        return "<unknown>";
    }
    return Object(mobx_module["getDependencyTree"])(v.current);
}

var EMPTY_ARRAY = [];
function useUnmount(fn) {
    Object(react["useEffect"])(function () { return fn; }, EMPTY_ARRAY);
}
function useForceUpdate() {
    var _a = __read(Object(react["useState"])(0), 2), setTick = _a[1];
    var update = Object(react["useCallback"])(function () {
        setTick(function (tick) { return tick + 1; });
    }, []);
    return update;
}
function isPlainObject(value) {
    if (!value || typeof value !== "object") {
        return false;
    }
    var proto = Object.getPrototypeOf(value);
    return !proto || proto === Object.prototype;
}

var EMPTY_OBJECT = {};
function useObserver(fn, baseComponentName, options) {
    if (baseComponentName === void 0) { baseComponentName = "observed"; }
    if (options === void 0) { options = EMPTY_OBJECT; }
    if (isUsingStaticRendering()) {
        return fn();
    }
    var wantedForceUpdateHook = options.useForceUpdate || useForceUpdate;
    var forceUpdate = wantedForceUpdateHook();
    var reaction = Object(react["useRef"])(null);
    if (!reaction.current) {
        reaction.current = new mobx_module["Reaction"]("observer(" + baseComponentName + ")", function () {
            forceUpdate();
        });
    }
    var dispose = function () {
        if (reaction.current && !reaction.current.isDisposed) {
            reaction.current.dispose();
            reaction.current = null;
        }
    };
    Object(react["useDebugValue"])(reaction, printDebugValue);
    useUnmount(function () {
        dispose();
    });
    // render the original component, but have the
    // reaction track the observables, so that rendering
    // can be invalidated (see above) once a dependency changes
    var rendering;
    var exception;
    reaction.current.track(function () {
        try {
            rendering = fn();
        }
        catch (e) {
            exception = e;
        }
    });
    if (exception) {
        dispose();
        throw exception; // re-throw any exceptions catched during rendering
    }
    return rendering;
}

// n.b. base case is not used for actual typings or exported in the typing files
function observer(baseComponent, options) {
    // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307
    if (isUsingStaticRendering()) {
        return baseComponent;
    }
    var realOptions = __assign({ forwardRef: false }, options);
    var baseComponentName = baseComponent.displayName || baseComponent.name;
    var wrappedComponent = function (props, ref) {
        return useObserver(function () { return baseComponent(props, ref); }, baseComponentName);
    };
    wrappedComponent.displayName = baseComponentName;
    // memo; we are not intested in deep updates
    // in props; we assume that if deep objects are changed,
    // this is in observables, which would have been tracked anyway
    var memoComponent;
    if (realOptions.forwardRef) {
        // we have to use forwardRef here because:
        // 1. it cannot go before memo, only after it
        // 2. forwardRef converts the function into an actual component, so we can't let the baseComponent do it
        //    since it wouldn't be a callable function anymore
        memoComponent = Object(react["memo"])(Object(react["forwardRef"])(wrappedComponent));
    }
    else {
        memoComponent = Object(react["memo"])(wrappedComponent);
    }
    copyStaticProperties(baseComponent, memoComponent);
    memoComponent.displayName = baseComponentName;
    return memoComponent;
}
// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js
var hoistBlackList = {
    $$typeof: true,
    render: true,
    compare: true,
    type: true
};
function copyStaticProperties(base, target) {
    Object.keys(base).forEach(function (key) {
        if (base.hasOwnProperty(key) && !hoistBlackList[key]) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));
        }
    });
}

function ObserverComponent(_a) {
    var children = _a.children, render = _a.render;
    var component = children || render;
    if (typeof component !== "function") {
        return null;
    }
    return useObserver(component);
}
ObserverComponent.propTypes = {
    children: ObserverPropsCheck,
    render: ObserverPropsCheck
};
ObserverComponent.displayName = "Observer";
function ObserverPropsCheck(props, key, componentName, location, propFullName) {
    var extraKey = key === "children" ? "render" : "children";
    var hasProp = typeof props[key] === "function";
    var hasExtraProp = typeof props[extraKey] === "function";
    if (hasProp && hasExtraProp) {
        return new Error("MobX Observer: Do not use children and render in the same time in`" + componentName);
    }
    if (hasProp || hasExtraProp) {
        return null;
    }
    return new Error("Invalid prop `" +
        propFullName +
        "` of type `" +
        typeof props[key] +
        "` supplied to" +
        " `" +
        componentName +
        "`, expected `function`.");
}

function useAsObservableSourceInternal(current, usedByLocalStore) {
    if (usedByLocalStore && current === undefined) {
        return undefined;
    }
    var _a = __read(react_default.a.useState(function () { return Object(mobx_module["observable"])(current, {}, { deep: false }); }), 1), res = _a[0];
    Object(mobx_module["runInAction"])(function () {
        Object.assign(res, current);
    });
    return res;
}
function useAsObservableSource(current) {
    return useAsObservableSourceInternal(current, false);
}

function useLocalStore(initializer, current) {
    var source = useAsObservableSourceInternal(current, true);
    return react_default.a.useState(function () {
        var local = Object(mobx_module["observable"])(initializer(source));
        if (isPlainObject(local)) {
            Object(mobx_module["runInAction"])(function () {
                Object.keys(local).forEach(function (key) {
                    var value = local[key];
                    if (typeof value === "function") {
                        // @ts-ignore No idea why ts2536 is popping out here
                        local[key] = wrapInTransaction(value, local);
                    }
                });
            });
        }
        return local;
    })[0];
}
// tslint:disable-next-line: ban-types
function wrapInTransaction(fn, context) {
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return Object(mobx_module["transaction"])(function () { return fn.apply(context, args); });
    };
}

var optimizeScheduler = function (reactionScheduler) {
    if (typeof reactionScheduler === "function") {
        Object(mobx_module["configure"])({ reactionScheduler: reactionScheduler });
    }
};



// CONCATENATED MODULE: ./node_modules/mobx-react/dist/mobxreact.esm.js






var symbolId = 0;

function createSymbol(name) {
  if (typeof Symbol === "function") {
    return Symbol(name);
  }

  var symbol = "__$mobx-react " + name + " (" + symbolId + ")";
  symbolId++;
  return symbol;
}

var createdSymbols = {};
function newSymbol(name) {
  if (!createdSymbols[name]) {
    createdSymbols[name] = createSymbol(name);
  }

  return createdSymbols[name];
}
function shallowEqual(objA, objB) {
  //From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js
  if (is(objA, objB)) return true;

  if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);
  if (keysA.length !== keysB.length) return false;

  for (var i = 0; i < keysA.length; i++) {
    if (!Object.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

function is(x, y) {
  // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js
  if (x === y) {
    return x !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
} // based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js


var mobxreact_esm_hoistBlackList = {
  $$typeof: 1,
  render: 1,
  compare: 1,
  type: 1,
  childContextTypes: 1,
  contextType: 1,
  contextTypes: 1,
  defaultProps: 1,
  getDefaultProps: 1,
  getDerivedStateFromError: 1,
  getDerivedStateFromProps: 1,
  mixins: 1,
  propTypes: 1
};
function mobxreact_esm_copyStaticProperties(base, target) {
  var protoProps = Object.getOwnPropertyNames(Object.getPrototypeOf(base));
  Object.getOwnPropertyNames(base).forEach(function (key) {
    if (!mobxreact_esm_hoistBlackList[key] && protoProps.indexOf(key) === -1) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));
    }
  });
}
/**
 * Helper to set `prop` to `this` as non-enumerable (hidden prop)
 * @param target
 * @param prop
 * @param value
 */

function setHiddenProp(target, prop, value) {
  if (!Object.hasOwnProperty.call(target, prop)) {
    Object.defineProperty(target, prop, {
      enumerable: false,
      configurable: true,
      writable: true,
      value: value
    });
  } else {
    target[prop] = value;
  }
}
/**
 * Utilities for patching componentWillUnmount, to make sure @disposeOnUnmount works correctly icm with user defined hooks
 * and the handler provided by mobx-react
 */

var mobxMixins =
/*#__PURE__*/
newSymbol("patchMixins");
var mobxPatchedDefinition =
/*#__PURE__*/
newSymbol("patchedDefinition");

function getMixins(target, methodName) {
  var mixins = target[mobxMixins] = target[mobxMixins] || {};
  var methodMixins = mixins[methodName] = mixins[methodName] || {};
  methodMixins.locks = methodMixins.locks || 0;
  methodMixins.methods = methodMixins.methods || [];
  return methodMixins;
}

function wrapper(realMethod, mixins) {
  var _this = this;

  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  // locks are used to ensure that mixins are invoked only once per invocation, even on recursive calls
  mixins.locks++;

  try {
    var retVal;

    if (realMethod !== undefined && realMethod !== null) {
      retVal = realMethod.apply(this, args);
    }

    return retVal;
  } finally {
    mixins.locks--;

    if (mixins.locks === 0) {
      mixins.methods.forEach(function (mx) {
        mx.apply(_this, args);
      });
    }
  }
}

function wrapFunction(realMethod, mixins) {
  var fn = function fn() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    wrapper.call.apply(wrapper, [this, realMethod, mixins].concat(args));
  };

  return fn;
}

function patch(target, methodName, mixinMethod) {
  var mixins = getMixins(target, methodName);

  if (mixins.methods.indexOf(mixinMethod) < 0) {
    mixins.methods.push(mixinMethod);
  }

  var oldDefinition = Object.getOwnPropertyDescriptor(target, methodName);

  if (oldDefinition && oldDefinition[mobxPatchedDefinition]) {
    // already patched definition, do not repatch
    return;
  }

  var originalMethod = target[methodName];
  var newDefinition = createDefinition(target, methodName, oldDefinition ? oldDefinition.enumerable : undefined, mixins, originalMethod);
  Object.defineProperty(target, methodName, newDefinition);
}

function createDefinition(target, methodName, enumerable, mixins, originalMethod) {
  var _ref;

  var wrappedFunc = wrapFunction(originalMethod, mixins);
  return _ref = {}, _ref[mobxPatchedDefinition] = true, _ref.get = function get() {
    return wrappedFunc;
  }, _ref.set = function set(value) {
    if (this === target) {
      wrappedFunc = wrapFunction(value, mixins);
    } else {
      // when it is an instance of the prototype/a child prototype patch that particular case again separately
      // since we need to store separate values depending on wether it is the actual instance, the prototype, etc
      // e.g. the method for super might not be the same as the method for the prototype which might be not the same
      // as the method for the instance
      var newDefinition = createDefinition(this, methodName, enumerable, mixins, value);
      Object.defineProperty(this, methodName, newDefinition);
    }
  }, _ref.configurable = true, _ref.enumerable = enumerable, _ref;
}

var mobxAdminProperty = mobx_module["$mobx"] || "$mobx";
var mobxIsUnmounted =
/*#__PURE__*/
newSymbol("isUnmounted");
var skipRenderKey =
/*#__PURE__*/
newSymbol("skipRender");
var isForcingUpdateKey =
/*#__PURE__*/
newSymbol("isForcingUpdate");
function makeClassComponentObserver(componentClass) {
  var target = componentClass.prototype;
  if (target.componentWillReact) throw new Error("The componentWillReact life-cycle event is no longer supported");

  if (componentClass["__proto__"] !== react["PureComponent"]) {
    if (!target.shouldComponentUpdate) target.shouldComponentUpdate = observerSCU;else if (target.shouldComponentUpdate !== observerSCU) // n.b. unequal check, instead of existence check, as @observer might be on superclass as well
      throw new Error("It is not allowed to use shouldComponentUpdate in observer based components.");
  } // this.props and this.state are made observable, just to make sure @computed fields that
  // are defined inside the component, and which rely on state or props, re-compute if state or props change
  // (otherwise the computed wouldn't update and become stale on props change, since props are not observable)
  // However, this solution is not without it's own problems: https://github.com/mobxjs/mobx-react/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3Aobservable-props-or-not+


  makeObservableProp(target, "props");
  makeObservableProp(target, "state");
  var baseRender = target.render;

  target.render = function () {
    return makeComponentReactive.call(this, baseRender);
  };

  patch(target, "componentWillUnmount", function () {
    if (isUsingStaticRendering() === true) return;

    if (this.render[mobxAdminProperty]) {
      this.render[mobxAdminProperty].dispose();
    } else if (false) { var displayName; }

    this[mobxIsUnmounted] = true;
  });
  return componentClass;
} // Generates a friendly name for debugging

function getDisplayName(comp) {
  return comp.displayName || comp.name || comp.constructor && (comp.constructor.displayName || comp.constructor.name) || "<component>";
}

function makeComponentReactive(render) {
  var _this = this;

  if (isUsingStaticRendering() === true) return render.call(this);
  /**
   * If props are shallowly modified, react will render anyway,
   * so atom.reportChanged() should not result in yet another re-render
   */

  setHiddenProp(this, skipRenderKey, false);
  /**
   * forceUpdate will re-assign this.props. We don't want that to cause a loop,
   * so detect these changes
   */

  setHiddenProp(this, isForcingUpdateKey, false);
  var initialName = getDisplayName(this);
  var baseRender = render.bind(this);
  var isRenderingPending = false;
  var reaction = new mobx_module["Reaction"](initialName + ".render()", function () {
    if (!isRenderingPending) {
      // N.B. Getting here *before mounting* means that a component constructor has side effects (see the relevant test in misc.js)
      // This unidiomatic React usage but React will correctly warn about this so we continue as usual
      // See #85 / Pull #44
      isRenderingPending = true;

      if (_this[mobxIsUnmounted] !== true) {
        var hasError = true;

        try {
          setHiddenProp(_this, isForcingUpdateKey, true);
          if (!_this[skipRenderKey]) react["Component"].prototype.forceUpdate.call(_this);
          hasError = false;
        } finally {
          setHiddenProp(_this, isForcingUpdateKey, false);
          if (hasError) reaction.dispose();
        }
      }
    }
  });
  reaction["reactComponent"] = this;
  reactiveRender[mobxAdminProperty] = reaction;
  this.render = reactiveRender;

  function reactiveRender() {
    isRenderingPending = false;
    var exception = undefined;
    var rendering = undefined;
    reaction.track(function () {
      try {
        rendering = Object(mobx_module["_allowStateChanges"])(false, baseRender);
      } catch (e) {
        exception = e;
      }
    });

    if (exception) {
      throw exception;
    }

    return rendering;
  }

  return reactiveRender.call(this);
}

function observerSCU(nextProps, nextState) {
  if (isUsingStaticRendering()) {
    console.warn("[mobx-react] It seems that a re-rendering of a React component is triggered while in static (server-side) mode. Please make sure components are rendered only once server-side.");
  } // update on any state changes (as is the default)


  if (this.state !== nextState) {
    return true;
  } // update if props are shallowly not equal, inspired by PureRenderMixin
  // we could return just 'false' here, and avoid the `skipRender` checks etc
  // however, it is nicer if lifecycle events are triggered like usually,
  // so we return true here if props are shallowly modified.


  return !shallowEqual(this.props, nextProps);
}

function makeObservableProp(target, propName) {
  var valueHolderKey = newSymbol("reactProp_" + propName + "_valueHolder");
  var atomHolderKey = newSymbol("reactProp_" + propName + "_atomHolder");

  function getAtom() {
    if (!this[atomHolderKey]) {
      setHiddenProp(this, atomHolderKey, Object(mobx_module["createAtom"])("reactive " + propName));
    }

    return this[atomHolderKey];
  }

  Object.defineProperty(target, propName, {
    configurable: true,
    enumerable: true,
    get: function get() {
      var prevReadState = false;

      if (mobx_module["_allowStateReadsStart"] && mobx_module["_allowStateReadsEnd"]) {
        prevReadState = Object(mobx_module["_allowStateReadsStart"])(true);
      }

      getAtom.call(this).reportObserved();

      if (mobx_module["_allowStateReadsStart"] && mobx_module["_allowStateReadsEnd"]) {
        Object(mobx_module["_allowStateReadsEnd"])(prevReadState);
      }

      return this[valueHolderKey];
    },
    set: function set(v) {
      if (!this[isForcingUpdateKey] && !shallowEqual(this[valueHolderKey], v)) {
        setHiddenProp(this, valueHolderKey, v);
        setHiddenProp(this, skipRenderKey, true);
        getAtom.call(this).reportChanged();
        setHiddenProp(this, skipRenderKey, false);
      } else {
        setHiddenProp(this, valueHolderKey, v);
      }
    }
  });
}

var hasSymbol = typeof Symbol === "function" && Symbol.for; // Using react-is had some issues (and operates on elements, not on types), see #608 / #609

var ReactForwardRefSymbol = hasSymbol ?
/*#__PURE__*/
Symbol.for("react.forward_ref") : typeof react["forwardRef"] === "function" &&
/*#__PURE__*/
Object(react["forwardRef"])(function (props) {
  return null;
})["$$typeof"];
var ReactMemoSymbol = hasSymbol ?
/*#__PURE__*/
Symbol.for("react.memo") : typeof react["memo"] === "function" &&
/*#__PURE__*/
Object(react["memo"])(function (props) {
  return null;
})["$$typeof"];
/**
 * Observer function / decorator
 */

function mobxreact_esm_observer(component) {
  if (component["isMobxInjector"] === true) {
    console.warn("Mobx observer: You are trying to use 'observer' on a component that already has 'inject'. Please apply 'observer' before applying 'inject'");
  }

  if (ReactMemoSymbol && component["$$typeof"] === ReactMemoSymbol) {
    throw new Error("Mobx observer: You are trying to use 'observer' on function component wrapped to either another observer or 'React.memo'. The observer already applies 'React.memo' for you.");
  } // Unwrap forward refs into `<Observer>` component
  // we need to unwrap the render, because it is the inner render that needs to be tracked,
  // not the ForwardRef HoC


  if (ReactForwardRefSymbol && component["$$typeof"] === ReactForwardRefSymbol) {
    var baseRender = component["render"];
    if (typeof baseRender !== "function") throw new Error("render property of ForwardRef was not a function");
    return Object(react["forwardRef"])(function ObserverForwardRef() {
      var args = arguments;
      return Object(react["createElement"])(ObserverComponent, null, function () {
        return baseRender.apply(undefined, args);
      });
    });
  } // Function component


  if (typeof component === "function" && (!component.prototype || !component.prototype.render) && !component["isReactClass"] && !Object.prototype.isPrototypeOf.call(react["Component"], component)) {
    return observer(component);
  }

  return makeClassComponentObserver(component);
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var MobXProviderContext =
/*#__PURE__*/
react_default.a.createContext({});
function Provider(props) {
  var children = props.children,
      stores = _objectWithoutPropertiesLoose(props, ["children"]);

  var parentValue = react_default.a.useContext(MobXProviderContext);
  var mutableProviderRef = react_default.a.useRef(_extends({}, parentValue, {}, stores));
  var value = mutableProviderRef.current;

  if (false) { var newValue; }

  return react_default.a.createElement(MobXProviderContext.Provider, {
    value: value
  }, children);
}
Provider.displayName = "MobXProvider";

/**
 * Store Injection
 */

function createStoreInjector(grabStoresFn, component, injectNames, makeReactive) {
  // Support forward refs
  var Injector = react_default.a.forwardRef(function (props, ref) {
    var newProps = _extends({}, props);

    var context = react_default.a.useContext(MobXProviderContext);
    Object.assign(newProps, grabStoresFn(context || {}, newProps) || {});

    if (ref) {
      newProps.ref = ref;
    }

    return react_default.a.createElement(component, newProps);
  });
  if (makeReactive) Injector = mobxreact_esm_observer(Injector);
  Injector["isMobxInjector"] = true; // assigned late to suppress observer warning
  // Static fields from component should be visible on the generated Injector

  mobxreact_esm_copyStaticProperties(component, Injector);
  Injector["wrappedComponent"] = component;
  Injector.displayName = getInjectName(component, injectNames);
  return Injector;
}

function getInjectName(component, injectNames) {
  var displayName;
  var componentName = component.displayName || component.name || component.constructor && component.constructor.name || "Component";
  if (injectNames) displayName = "inject-with-" + injectNames + "(" + componentName + ")";else displayName = "inject(" + componentName + ")";
  return displayName;
}

function grabStoresByName(storeNames) {
  return function (baseStores, nextProps) {
    storeNames.forEach(function (storeName) {
      if (storeName in nextProps // prefer props over stores
      ) return;
      if (!(storeName in baseStores)) throw new Error("MobX injector: Store '" + storeName + "' is not available! Make sure it is provided by some Provider");
      nextProps[storeName] = baseStores[storeName];
    });
    return nextProps;
  };
}
/**
 * higher order component that injects stores to a child.
 * takes either a varargs list of strings, which are stores read from the context,
 * or a function that manually maps the available stores from the context to props:
 * storesToProps(mobxStores, props, context) => newProps
 */


function inject() {
  for (var _len = arguments.length, storeNames = new Array(_len), _key = 0; _key < _len; _key++) {
    storeNames[_key] = arguments[_key];
  }

  if (typeof arguments[0] === "function") {
    var grabStoresFn = arguments[0];
    return function (componentClass) {
      return createStoreInjector(grabStoresFn, componentClass, grabStoresFn.name, true);
    };
  } else {
    return function (componentClass) {
      return createStoreInjector(grabStoresByName(storeNames), componentClass, storeNames.join("-"), false);
    };
  }
}

var protoStoreKey =
/*#__PURE__*/
newSymbol("disposeOnUnmountProto");
var instStoreKey =
/*#__PURE__*/
newSymbol("disposeOnUnmountInst");

function runDisposersOnWillUnmount() {
  var _this = this;
  [].concat(this[protoStoreKey] || [], this[instStoreKey] || []).forEach(function (propKeyOrFunction) {
    var prop = typeof propKeyOrFunction === "string" ? _this[propKeyOrFunction] : propKeyOrFunction;

    if (prop !== undefined && prop !== null) {
      if (Array.isArray(prop)) prop.map(function (f) {
        return f();
      });else prop();
    }
  });
}

function disposeOnUnmount(target, propertyKeyOrFunction) {
  if (Array.isArray(propertyKeyOrFunction)) {
    return propertyKeyOrFunction.map(function (fn) {
      return disposeOnUnmount(target, fn);
    });
  }

  var c = Object.getPrototypeOf(target).constructor || Object.getPrototypeOf(target.constructor);
  var c2 = Object.getPrototypeOf(target.constructor);

  if (!(c === react_default.a.Component || c === react_default.a.PureComponent || c2 === react_default.a.Component || c2 === react_default.a.PureComponent)) {
    throw new Error("[mobx-react] disposeOnUnmount only supports direct subclasses of React.Component or React.PureComponent.");
  }

  if (typeof propertyKeyOrFunction !== "string" && typeof propertyKeyOrFunction !== "function" && !Array.isArray(propertyKeyOrFunction)) {
    throw new Error("[mobx-react] disposeOnUnmount only works if the parameter is either a property key or a function.");
  } // decorator's target is the prototype, so it doesn't have any instance properties like props


  var isDecorator = typeof propertyKeyOrFunction === "string"; // add property key / function we want run (disposed) to the store

  var componentWasAlreadyModified = !!target[protoStoreKey] || !!target[instStoreKey];
  var store = isDecorator ? // decorators are added to the prototype store
  target[protoStoreKey] || (target[protoStoreKey] = []) : // functions are added to the instance store
  target[instStoreKey] || (target[instStoreKey] = []);
  store.push(propertyKeyOrFunction); // tweak the component class componentWillUnmount if not done already

  if (!componentWasAlreadyModified) {
    patch(target, "componentWillUnmount", runDisposersOnWillUnmount);
  } // return the disposer as is if invoked as a non decorator


  if (typeof propertyKeyOrFunction !== "string") {
    return propertyKeyOrFunction;
  }
}

function createChainableTypeChecker(validator) {
  function checkType(isRequired, props, propName, componentName, location, propFullName) {
    for (var _len = arguments.length, rest = new Array(_len > 6 ? _len - 6 : 0), _key = 6; _key < _len; _key++) {
      rest[_key - 6] = arguments[_key];
    }

    return Object(mobx_module["untracked"])(function () {
      componentName = componentName || "<<anonymous>>";
      propFullName = propFullName || propName;

      if (props[propName] == null) {
        if (isRequired) {
          var actual = props[propName] === null ? "null" : "undefined";
          return new Error("The " + location + " `" + propFullName + "` is marked as required " + "in `" + componentName + "`, but its value is `" + actual + "`.");
        }

        return null;
      } else {
        // @ts-ignore rest arg is necessary for some React internals - fails tests otherwise
        return validator.apply(void 0, [props, propName, componentName, location, propFullName].concat(rest));
      }
    });
  }

  var chainedCheckType = checkType.bind(null, false); // Add isRequired to satisfy Requirable

  chainedCheckType.isRequired = checkType.bind(null, true);
  return chainedCheckType;
} // Copied from React.PropTypes


function isSymbol(propType, propValue) {
  // Native Symbol.
  if (propType === "symbol") {
    return true;
  } // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'


  if (propValue["@@toStringTag"] === "Symbol") {
    return true;
  } // Fallback for non-spec compliant Symbols which are polyfilled.


  if (typeof Symbol === "function" && propValue instanceof Symbol) {
    return true;
  }

  return false;
} // Copied from React.PropTypes


function getPropType(propValue) {
  var propType = typeof propValue;

  if (Array.isArray(propValue)) {
    return "array";
  }

  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return "object";
  }

  if (isSymbol(propType, propValue)) {
    return "symbol";
  }

  return propType;
} // This handles more types than `getPropType`. Only used for error messages.
// Copied from React.PropTypes


function getPreciseType(propValue) {
  var propType = getPropType(propValue);

  if (propType === "object") {
    if (propValue instanceof Date) {
      return "date";
    } else if (propValue instanceof RegExp) {
      return "regexp";
    }
  }

  return propType;
}

function createObservableTypeCheckerCreator(allowNativeType, mobxType) {
  return createChainableTypeChecker(function (props, propName, componentName, location, propFullName) {
    return Object(mobx_module["untracked"])(function () {
      if (allowNativeType) {
        if (getPropType(props[propName]) === mobxType.toLowerCase()) return null;
      }

      var mobxChecker;

      switch (mobxType) {
        case "Array":
          mobxChecker = mobx_module["isObservableArray"];
          break;

        case "Object":
          mobxChecker = mobx_module["isObservableObject"];
          break;

        case "Map":
          mobxChecker = mobx_module["isObservableMap"];
          break;

        default:
          throw new Error("Unexpected mobxType: " + mobxType);
      }

      var propValue = props[propName];

      if (!mobxChecker(propValue)) {
        var preciseType = getPreciseType(propValue);
        var nativeTypeExpectationMessage = allowNativeType ? " or javascript `" + mobxType.toLowerCase() + "`" : "";
        return new Error("Invalid prop `" + propFullName + "` of type `" + preciseType + "` supplied to" + " `" + componentName + "`, expected `mobx.Observable" + mobxType + "`" + nativeTypeExpectationMessage + ".");
      }

      return null;
    });
  });
}

function createObservableArrayOfTypeChecker(allowNativeType, typeChecker) {
  return createChainableTypeChecker(function (props, propName, componentName, location, propFullName) {
    for (var _len2 = arguments.length, rest = new Array(_len2 > 5 ? _len2 - 5 : 0), _key2 = 5; _key2 < _len2; _key2++) {
      rest[_key2 - 5] = arguments[_key2];
    }

    return Object(mobx_module["untracked"])(function () {
      if (typeof typeChecker !== "function") {
        return new Error("Property `" + propFullName + "` of component `" + componentName + "` has " + "invalid PropType notation.");
      } else {
        var error = createObservableTypeCheckerCreator(allowNativeType, "Array")(props, propName, componentName, location, propFullName);
        if (error instanceof Error) return error;
        var propValue = props[propName];

        for (var i = 0; i < propValue.length; i++) {
          error = typeChecker.apply(void 0, [propValue, i, componentName, location, propFullName + "[" + i + "]"].concat(rest));
          if (error instanceof Error) return error;
        }

        return null;
      }
    });
  });
}

var observableArray =
/*#__PURE__*/
createObservableTypeCheckerCreator(false, "Array");
var observableArrayOf =
/*#__PURE__*/
createObservableArrayOfTypeChecker.bind(null, false);
var observableMap =
/*#__PURE__*/
createObservableTypeCheckerCreator(false, "Map");
var observableObject =
/*#__PURE__*/
createObservableTypeCheckerCreator(false, "Object");
var arrayOrObservableArray =
/*#__PURE__*/
createObservableTypeCheckerCreator(true, "Array");
var arrayOrObservableArrayOf =
/*#__PURE__*/
createObservableArrayOfTypeChecker.bind(null, true);
var objectOrObservableObject =
/*#__PURE__*/
createObservableTypeCheckerCreator(true, "Object");
var PropTypes = {
  observableArray: observableArray,
  observableArrayOf: observableArrayOf,
  observableMap: observableMap,
  observableObject: observableObject,
  arrayOrObservableArray: arrayOrObservableArray,
  arrayOrObservableArrayOf: arrayOrObservableArrayOf,
  objectOrObservableObject: objectOrObservableObject
};

if (!react["Component"]) throw new Error("mobx-react requires React to be available");
if (!mobx_module["observable"]) throw new Error("mobx-react requires mobx to be available");
if (typeof react_dom["unstable_batchedUpdates"] === "function") Object(mobx_module["configure"])({
  reactionScheduler: react_dom["unstable_batchedUpdates"]
});


//# sourceMappingURL=mobxreact.esm.js.map


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if ( true && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if (true) {
		// register as 'classnames', consistent with npm package name
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
			return classNames;
		}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
}());


/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export Identifier2 */
/* unused harmony export Number */
/* unused harmony export LParen */
/* unused harmony export RParen */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return UnaryOperator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return InfixOperator; });
/* unused harmony export Whitespace */
/* unused harmony export Unknown */
const Identifier2 = "Identifier";
const Number = "Number";
const LParen = "LParen";
const RParen = "RParen";
const UnaryOperator = "UnaryOperator";
const InfixOperator = "InfixOperator";
const Whitespace = "Whitespace";
const Unknown = "Unknown";


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),
/* 16 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 17 */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.6.11' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(37)(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 19 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(36);
var IE8_DOM_DEFINE = __webpack_require__(68);
var toPrimitive = __webpack_require__(49);
var dP = Object.defineProperty;

exports.f = __webpack_require__(18) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),
/* 21 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _assign = __webpack_require__(98);

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _assign2.default || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

/***/ }),
/* 23 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(16);
var core = __webpack_require__(17);
var ctx = __webpack_require__(67);
var hide = __webpack_require__(25);
var has = __webpack_require__(21);
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var IS_WRAP = type & $export.W;
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE];
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
  var key, own, out;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if (own && has(exports, key)) continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function (C) {
      var F = function (a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0: return new C();
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(20);
var createDesc = __webpack_require__(42);
module.exports = __webpack_require__(18) ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),
/* 26 */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(71);
var defined = __webpack_require__(50);
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(53)('wks');
var uid = __webpack_require__(45);
var Symbol = __webpack_require__(16).Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isOldIE = function isOldIE() {
  var memo;
  return function memorize() {
    if (typeof memo === 'undefined') {
      // Test for IE <= 9 as proposed by Browserhacks
      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
      // Tests for existence of standard globals is to allow style-loader
      // to operate correctly into non-standard environments
      // @see https://github.com/webpack-contrib/style-loader/issues/177
      memo = Boolean(window && document && document.all && !window.atob);
    }

    return memo;
  };
}();

var getTarget = function getTarget() {
  var memo = {};
  return function memorize(target) {
    if (typeof memo[target] === 'undefined') {
      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
        try {
          // This will throw an exception if access to iframe is blocked
          // due to cross-origin restrictions
          styleTarget = styleTarget.contentDocument.head;
        } catch (e) {
          // istanbul ignore next
          styleTarget = null;
        }
      }

      memo[target] = styleTarget;
    }

    return memo[target];
  };
}();

var stylesInDom = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDom.length; i++) {
    if (stylesInDom[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var index = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3]
    };

    if (index !== -1) {
      stylesInDom[index].references++;
      stylesInDom[index].updater(obj);
    } else {
      stylesInDom.push({
        identifier: identifier,
        updater: addStyle(obj, options),
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function insertStyleElement(options) {
  var style = document.createElement('style');
  var attributes = options.attributes || {};

  if (typeof attributes.nonce === 'undefined') {
    var nonce =  true ? __webpack_require__.nc : undefined;

    if (nonce) {
      attributes.nonce = nonce;
    }
  }

  Object.keys(attributes).forEach(function (key) {
    style.setAttribute(key, attributes[key]);
  });

  if (typeof options.insert === 'function') {
    options.insert(style);
  } else {
    var target = getTarget(options.insert || 'head');

    if (!target) {
      throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
    }

    target.appendChild(style);
  }

  return style;
}

function removeStyleElement(style) {
  // istanbul ignore if
  if (style.parentNode === null) {
    return false;
  }

  style.parentNode.removeChild(style);
}
/* istanbul ignore next  */


var replaceText = function replaceText() {
  var textStore = [];
  return function replace(index, replacement) {
    textStore[index] = replacement;
    return textStore.filter(Boolean).join('\n');
  };
}();

function applyToSingletonTag(style, index, remove, obj) {
  var css = remove ? '' : obj.media ? "@media ".concat(obj.media, " {").concat(obj.css, "}") : obj.css; // For old IE

  /* istanbul ignore if  */

  if (style.styleSheet) {
    style.styleSheet.cssText = replaceText(index, css);
  } else {
    var cssNode = document.createTextNode(css);
    var childNodes = style.childNodes;

    if (childNodes[index]) {
      style.removeChild(childNodes[index]);
    }

    if (childNodes.length) {
      style.insertBefore(cssNode, childNodes[index]);
    } else {
      style.appendChild(cssNode);
    }
  }
}

function applyToTag(style, options, obj) {
  var css = obj.css;
  var media = obj.media;
  var sourceMap = obj.sourceMap;

  if (media) {
    style.setAttribute('media', media);
  } else {
    style.removeAttribute('media');
  }

  if (sourceMap && btoa) {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    while (style.firstChild) {
      style.removeChild(style.firstChild);
    }

    style.appendChild(document.createTextNode(css));
  }
}

var singleton = null;
var singletonCounter = 0;

function addStyle(obj, options) {
  var style;
  var update;
  var remove;

  if (options.singleton) {
    var styleIndex = singletonCounter++;
    style = singleton || (singleton = insertStyleElement(options));
    update = applyToSingletonTag.bind(null, style, styleIndex, false);
    remove = applyToSingletonTag.bind(null, style, styleIndex, true);
  } else {
    style = insertStyleElement(options);
    update = applyToTag.bind(null, style, options);

    remove = function remove() {
      removeStyleElement(style);
    };
  }

  update(obj);
  return function updateStyle(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
        return;
      }

      update(obj = newObj);
    } else {
      remove();
    }
  };
}

module.exports = function (list, options) {
  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
  // tags it will allow on a page

  if (!options.singleton && typeof options.singleton !== 'boolean') {
    options.singleton = isOldIE();
  }

  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    if (Object.prototype.toString.call(newList) !== '[object Array]') {
      return;
    }

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDom[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDom[_index].references === 0) {
        stylesInDom[_index].updater();

        stylesInDom.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
// eslint-disable-next-line func-names
module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return "@media ".concat(item[2], " {").concat(content, "}");
      }

      return content;
    }).join('');
  }; // import a list of modules into the list
  // eslint-disable-next-line func-names


  list.i = function (modules, mediaQuery, dedupe) {
    if (typeof modules === 'string') {
      // eslint-disable-next-line no-param-reassign
      modules = [[null, modules, '']];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var i = 0; i < this.length; i++) {
        // eslint-disable-next-line prefer-destructuring
        var id = this[i][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _i = 0; _i < modules.length; _i++) {
      var item = [].concat(modules[_i]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        // eslint-disable-next-line no-continue
        continue;
      }

      if (mediaQuery) {
        if (!item[2]) {
          item[2] = mediaQuery;
        } else {
          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);
        }
      }

      list.push(item);
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring

  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || '').concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
  return "/*# ".concat(data, " */");
}

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var now = __webpack_require__(94)
  , root = typeof window === 'undefined' ? global : window
  , vendors = ['moz', 'webkit']
  , suffix = 'AnimationFrame'
  , raf = root['request' + suffix]
  , caf = root['cancel' + suffix] || root['cancelRequest' + suffix]

for(var i = 0; !raf && i < vendors.length; i++) {
  raf = root[vendors[i] + 'Request' + suffix]
  caf = root[vendors[i] + 'Cancel' + suffix]
      || root[vendors[i] + 'CancelRequest' + suffix]
}

// Some versions of FF have rAF but not cAF
if(!raf || !caf) {
  var last = 0
    , id = 0
    , queue = []
    , frameDuration = 1000 / 60

  raf = function(callback) {
    if(queue.length === 0) {
      var _now = now()
        , next = Math.max(0, frameDuration - (_now - last))
      last = next + _now
      setTimeout(function() {
        var cp = queue.slice(0)
        // Clear queue here to prevent
        // callbacks from appending listeners
        // to the current frame's queue
        queue.length = 0
        for(var i = 0; i < cp.length; i++) {
          if(!cp[i].cancelled) {
            try{
              cp[i].callback(last)
            } catch(e) {
              setTimeout(function() { throw e }, 0)
            }
          }
        }
      }, Math.round(next))
    }
    queue.push({
      handle: ++id,
      callback: callback,
      cancelled: false
    })
    return id
  }

  caf = function(handle) {
    for(var i = 0; i < queue.length; i++) {
      if(queue[i].handle === handle) {
        queue[i].cancelled = true
      }
    }
  }
}

module.exports = function(fn) {
  // Wrap in a new function to prevent
  // `cancel` potentially being assigned
  // to the native rAF function
  return raf.call(root, fn)
}
module.exports.cancel = function() {
  caf.apply(root, arguments)
}
module.exports.polyfill = function(object) {
  if (!object) {
    object = root;
  }
  object.requestAnimationFrame = raf
  object.cancelAnimationFrame = caf
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(19)))

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var l=__webpack_require__(15),n="function"===typeof Symbol&&Symbol.for,p=n?Symbol.for("react.element"):60103,q=n?Symbol.for("react.portal"):60106,r=n?Symbol.for("react.fragment"):60107,t=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,v=n?Symbol.for("react.provider"):60109,w=n?Symbol.for("react.context"):60110,x=n?Symbol.for("react.forward_ref"):60112,y=n?Symbol.for("react.suspense"):60113,z=n?Symbol.for("react.memo"):60115,A=n?Symbol.for("react.lazy"):
60116,B="function"===typeof Symbol&&Symbol.iterator;function C(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return"Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}
var D={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},E={};function F(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}F.prototype.isReactComponent={};F.prototype.setState=function(a,b){if("object"!==typeof a&&"function"!==typeof a&&null!=a)throw Error(C(85));this.updater.enqueueSetState(this,a,b,"setState")};F.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate")};
function G(){}G.prototype=F.prototype;function H(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}var I=H.prototype=new G;I.constructor=H;l(I,F.prototype);I.isPureReactComponent=!0;var J={current:null},K=Object.prototype.hasOwnProperty,L={key:!0,ref:!0,__self:!0,__source:!0};
function M(a,b,c){var e,d={},g=null,k=null;if(null!=b)for(e in void 0!==b.ref&&(k=b.ref),void 0!==b.key&&(g=""+b.key),b)K.call(b,e)&&!L.hasOwnProperty(e)&&(d[e]=b[e]);var f=arguments.length-2;if(1===f)d.children=c;else if(1<f){for(var h=Array(f),m=0;m<f;m++)h[m]=arguments[m+2];d.children=h}if(a&&a.defaultProps)for(e in f=a.defaultProps,f)void 0===d[e]&&(d[e]=f[e]);return{$$typeof:p,type:a,key:g,ref:k,props:d,_owner:J.current}}
function N(a,b){return{$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return"object"===typeof a&&null!==a&&a.$$typeof===p}function escape(a){var b={"=":"=0",":":"=2"};return"$"+(""+a).replace(/[=:]/g,function(a){return b[a]})}var P=/\/+/g,Q=[];function R(a,b,c,e){if(Q.length){var d=Q.pop();d.result=a;d.keyPrefix=b;d.func=c;d.context=e;d.count=0;return d}return{result:a,keyPrefix:b,func:c,context:e,count:0}}
function S(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>Q.length&&Q.push(a)}
function T(a,b,c,e){var d=typeof a;if("undefined"===d||"boolean"===d)a=null;var g=!1;if(null===a)g=!0;else switch(d){case "string":case "number":g=!0;break;case "object":switch(a.$$typeof){case p:case q:g=!0}}if(g)return c(e,a,""===b?"."+U(a,0):b),1;g=0;b=""===b?".":b+":";if(Array.isArray(a))for(var k=0;k<a.length;k++){d=a[k];var f=b+U(d,k);g+=T(d,f,c,e)}else if(null===a||"object"!==typeof a?f=null:(f=B&&a[B]||a["@@iterator"],f="function"===typeof f?f:null),"function"===typeof f)for(a=f.call(a),k=
0;!(d=a.next()).done;)d=d.value,f=b+U(d,k++),g+=T(d,f,c,e);else if("object"===d)throw c=""+a,Error(C(31,"[object Object]"===c?"object with keys {"+Object.keys(a).join(", ")+"}":c,""));return g}function V(a,b,c){return null==a?0:T(a,"",b,c)}function U(a,b){return"object"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function W(a,b){a.func.call(a.context,b,a.count++)}
function aa(a,b,c){var e=a.result,d=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?X(a,e,c,function(a){return a}):null!=a&&(O(a)&&(a=N(a,d+(!a.key||b&&b.key===a.key?"":(""+a.key).replace(P,"$&/")+"/")+c)),e.push(a))}function X(a,b,c,e,d){var g="";null!=c&&(g=(""+c).replace(P,"$&/")+"/");b=R(b,g,e,d);V(a,aa,b);S(b)}var Y={current:null};function Z(){var a=Y.current;if(null===a)throw Error(C(321));return a}
var ba={ReactCurrentDispatcher:Y,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:J,IsSomeRendererActing:{current:!1},assign:l};exports.Children={map:function(a,b,c){if(null==a)return a;var e=[];X(a,e,null,b,c);return e},forEach:function(a,b,c){if(null==a)return a;b=R(null,null,b,c);V(a,W,b);S(b)},count:function(a){return V(a,function(){return null},null)},toArray:function(a){var b=[];X(a,b,null,function(a){return a});return b},only:function(a){if(!O(a))throw Error(C(143));return a}};
exports.Component=F;exports.Fragment=r;exports.Profiler=u;exports.PureComponent=H;exports.StrictMode=t;exports.Suspense=y;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ba;
exports.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(C(267,a));var e=l({},a.props),d=a.key,g=a.ref,k=a._owner;if(null!=b){void 0!==b.ref&&(g=b.ref,k=J.current);void 0!==b.key&&(d=""+b.key);if(a.type&&a.type.defaultProps)var f=a.type.defaultProps;for(h in b)K.call(b,h)&&!L.hasOwnProperty(h)&&(e[h]=void 0===b[h]&&void 0!==f?f[h]:b[h])}var h=arguments.length-2;if(1===h)e.children=c;else if(1<h){f=Array(h);for(var m=0;m<h;m++)f[m]=arguments[m+2];e.children=f}return{$$typeof:p,type:a.type,
key:d,ref:g,props:e,_owner:k}};exports.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:w,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:v,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};exports.forwardRef=function(a){return{$$typeof:x,render:a}};exports.isValidElement=O;
exports.lazy=function(a){return{$$typeof:A,_ctor:a,_status:-1,_result:null}};exports.memo=function(a,b){return{$$typeof:z,type:a,compare:void 0===b?null:b}};exports.useCallback=function(a,b){return Z().useCallback(a,b)};exports.useContext=function(a,b){return Z().useContext(a,b)};exports.useDebugValue=function(){};exports.useEffect=function(a,b){return Z().useEffect(a,b)};exports.useImperativeHandle=function(a,b,c){return Z().useImperativeHandle(a,b,c)};
exports.useLayoutEffect=function(a,b){return Z().useLayoutEffect(a,b)};exports.useMemo=function(a,b){return Z().useMemo(a,b)};exports.useReducer=function(a,b,c){return Z().useReducer(a,b,c)};exports.useRef=function(a){return Z().useRef(a)};exports.useState=function(a){return Z().useState(a)};exports.version="16.13.1";


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/
var aa=__webpack_require__(0),n=__webpack_require__(15),r=__webpack_require__(34);function u(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return"Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!aa)throw Error(u(227));
function ba(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l)}catch(m){this.onError(m)}}var da=!1,ea=null,fa=!1,ha=null,ia={onError:function(a){da=!0;ea=a}};function ja(a,b,c,d,e,f,g,h,k){da=!1;ea=null;ba.apply(ia,arguments)}function ka(a,b,c,d,e,f,g,h,k){ja.apply(this,arguments);if(da){if(da){var l=ea;da=!1;ea=null}else throw Error(u(198));fa||(fa=!0,ha=l)}}var la=null,ma=null,na=null;
function oa(a,b,c){var d=a.type||"unknown-event";a.currentTarget=na(c);ka(d,b,void 0,a);a.currentTarget=null}var pa=null,qa={};
function ra(){if(pa)for(var a in qa){var b=qa[a],c=pa.indexOf(a);if(!(-1<c))throw Error(u(96,a));if(!sa[c]){if(!b.extractEvents)throw Error(u(97,a));sa[c]=b;c=b.eventTypes;for(var d in c){var e=void 0;var f=c[d],g=b,h=d;if(ta.hasOwnProperty(h))throw Error(u(99,h));ta[h]=f;var k=f.phasedRegistrationNames;if(k){for(e in k)k.hasOwnProperty(e)&&ua(k[e],g,h);e=!0}else f.registrationName?(ua(f.registrationName,g,h),e=!0):e=!1;if(!e)throw Error(u(98,d,a));}}}}
function ua(a,b,c){if(va[a])throw Error(u(100,a));va[a]=b;wa[a]=b.eventTypes[c].dependencies}var sa=[],ta={},va={},wa={};function xa(a){var b=!1,c;for(c in a)if(a.hasOwnProperty(c)){var d=a[c];if(!qa.hasOwnProperty(c)||qa[c]!==d){if(qa[c])throw Error(u(102,c));qa[c]=d;b=!0}}b&&ra()}var ya=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),za=null,Aa=null,Ba=null;
function Ca(a){if(a=ma(a)){if("function"!==typeof za)throw Error(u(280));var b=a.stateNode;b&&(b=la(b),za(a.stateNode,a.type,b))}}function Da(a){Aa?Ba?Ba.push(a):Ba=[a]:Aa=a}function Ea(){if(Aa){var a=Aa,b=Ba;Ba=Aa=null;Ca(a);if(b)for(a=0;a<b.length;a++)Ca(b[a])}}function Fa(a,b){return a(b)}function Ga(a,b,c,d,e){return a(b,c,d,e)}function Ha(){}var Ia=Fa,Ja=!1,Ka=!1;function La(){if(null!==Aa||null!==Ba)Ha(),Ea()}
function Ma(a,b,c){if(Ka)return a(b,c);Ka=!0;try{return Ia(a,b,c)}finally{Ka=!1,La()}}var Na=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Oa=Object.prototype.hasOwnProperty,Pa={},Qa={};
function Ra(a){if(Oa.call(Qa,a))return!0;if(Oa.call(Pa,a))return!1;if(Na.test(a))return Qa[a]=!0;Pa[a]=!0;return!1}function Sa(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case "function":case "symbol":return!0;case "boolean":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return"data-"!==a&&"aria-"!==a;default:return!1}}
function Ta(a,b,c,d){if(null===b||"undefined"===typeof b||Sa(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function v(a,b,c,d,e,f){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f}var C={};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){C[a]=new v(a,0,!1,a,null,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];C[b]=new v(b,1,!1,a[1],null,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(a){C[a]=new v(a,2,!1,a.toLowerCase(),null,!1)});
["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){C[a]=new v(a,2,!1,a,null,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){C[a]=new v(a,3,!1,a.toLowerCase(),null,!1)});
["checked","multiple","muted","selected"].forEach(function(a){C[a]=new v(a,3,!0,a,null,!1)});["capture","download"].forEach(function(a){C[a]=new v(a,4,!1,a,null,!1)});["cols","rows","size","span"].forEach(function(a){C[a]=new v(a,6,!1,a,null,!1)});["rowSpan","start"].forEach(function(a){C[a]=new v(a,5,!1,a.toLowerCase(),null,!1)});var Ua=/[\-:]([a-z])/g;function Va(a){return a[1].toUpperCase()}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(Ua,
Va);C[b]=new v(b,1,!1,a,null,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(Ua,Va);C[b]=new v(b,1,!1,a,"http://www.w3.org/1999/xlink",!1)});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(Ua,Va);C[b]=new v(b,1,!1,a,"http://www.w3.org/XML/1998/namespace",!1)});["tabIndex","crossOrigin"].forEach(function(a){C[a]=new v(a,1,!1,a.toLowerCase(),null,!1)});
C.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0);["src","href","action","formAction"].forEach(function(a){C[a]=new v(a,1,!1,a.toLowerCase(),null,!0)});var Wa=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;Wa.hasOwnProperty("ReactCurrentDispatcher")||(Wa.ReactCurrentDispatcher={current:null});Wa.hasOwnProperty("ReactCurrentBatchConfig")||(Wa.ReactCurrentBatchConfig={suspense:null});
function Xa(a,b,c,d){var e=C.hasOwnProperty(b)?C[b]:null;var f=null!==e?0===e.type:d?!1:!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1]?!1:!0;f||(Ta(b,c,e,d)&&(c=null),d||null===e?Ra(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c))))}
var Ya=/^(.*)[\\\/]/,E="function"===typeof Symbol&&Symbol.for,Za=E?Symbol.for("react.element"):60103,$a=E?Symbol.for("react.portal"):60106,ab=E?Symbol.for("react.fragment"):60107,bb=E?Symbol.for("react.strict_mode"):60108,cb=E?Symbol.for("react.profiler"):60114,db=E?Symbol.for("react.provider"):60109,eb=E?Symbol.for("react.context"):60110,fb=E?Symbol.for("react.concurrent_mode"):60111,gb=E?Symbol.for("react.forward_ref"):60112,hb=E?Symbol.for("react.suspense"):60113,ib=E?Symbol.for("react.suspense_list"):
60120,jb=E?Symbol.for("react.memo"):60115,kb=E?Symbol.for("react.lazy"):60116,lb=E?Symbol.for("react.block"):60121,mb="function"===typeof Symbol&&Symbol.iterator;function nb(a){if(null===a||"object"!==typeof a)return null;a=mb&&a[mb]||a["@@iterator"];return"function"===typeof a?a:null}function ob(a){if(-1===a._status){a._status=0;var b=a._ctor;b=b();a._result=b;b.then(function(b){0===a._status&&(b=b.default,a._status=1,a._result=b)},function(b){0===a._status&&(a._status=2,a._result=b)})}}
function pb(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case ab:return"Fragment";case $a:return"Portal";case cb:return"Profiler";case bb:return"StrictMode";case hb:return"Suspense";case ib:return"SuspenseList"}if("object"===typeof a)switch(a.$$typeof){case eb:return"Context.Consumer";case db:return"Context.Provider";case gb:var b=a.render;b=b.displayName||b.name||"";return a.displayName||(""!==b?"ForwardRef("+b+")":
"ForwardRef");case jb:return pb(a.type);case lb:return pb(a.render);case kb:if(a=1===a._status?a._result:null)return pb(a)}return null}function qb(a){var b="";do{a:switch(a.tag){case 3:case 4:case 6:case 7:case 10:case 9:var c="";break a;default:var d=a._debugOwner,e=a._debugSource,f=pb(a.type);c=null;d&&(c=pb(d.type));d=f;f="";e?f=" (at "+e.fileName.replace(Ya,"")+":"+e.lineNumber+")":c&&(f=" (created by "+c+")");c="\n    in "+(d||"Unknown")+f}b+=c;a=a.return}while(a);return b}
function rb(a){switch(typeof a){case "boolean":case "number":case "object":case "string":case "undefined":return a;default:return""}}function sb(a){var b=a.type;return(a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}
function tb(a){var b=sb(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=""+a},stopTracking:function(){a._valueTracker=
null;delete a[b]}}}}function xb(a){a._valueTracker||(a._valueTracker=tb(a))}function yb(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d="";a&&(d=sb(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function zb(a,b){var c=b.checked;return n({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}
function Ab(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=rb(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value}}function Bb(a,b){b=b.checked;null!=b&&Xa(a,"checked",b,!1)}
function Cb(a,b){Bb(a,b);var c=rb(b.value),d=b.type;if(null!=c)if("number"===d){if(0===c&&""===a.value||a.value!=c)a.value=""+c}else a.value!==""+c&&(a.value=""+c);else if("submit"===d||"reset"===d){a.removeAttribute("value");return}b.hasOwnProperty("value")?Db(a,b.type,c):b.hasOwnProperty("defaultValue")&&Db(a,b.type,rb(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}
function Eb(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){var d=b.type;if(!("submit"!==d&&"reset"!==d||void 0!==b.value&&null!==b.value))return;b=""+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b}c=a.name;""!==c&&(a.name="");a.defaultChecked=!!a._wrapperState.initialChecked;""!==c&&(a.name=c)}
function Db(a,b,c){if("number"!==b||a.ownerDocument.activeElement!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c)}function Fb(a){var b="";aa.Children.forEach(a,function(a){null!=a&&(b+=a)});return b}function Gb(a,b){a=n({children:void 0},b);if(b=Fb(b.children))a.children=b;return a}
function Hb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=""+rb(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}
function Ib(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(u(91));return n({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function Jb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(u(92));if(Array.isArray(c)){if(!(1>=c.length))throw Error(u(93));c=c[0]}b=c}null==b&&(b="");c=b}a._wrapperState={initialValue:rb(c)}}
function Kb(a,b){var c=rb(b.value),d=rb(b.defaultValue);null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=""+d)}function Lb(a){var b=a.textContent;b===a._wrapperState.initialValue&&""!==b&&null!==b&&(a.value=b)}var Mb={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};
function Nb(a){switch(a){case "svg":return"http://www.w3.org/2000/svg";case "math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Ob(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?Nb(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}
var Pb,Qb=function(a){return"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(a.namespaceURI!==Mb.svg||"innerHTML"in a)a.innerHTML=b;else{Pb=Pb||document.createElement("div");Pb.innerHTML="<svg>"+b.valueOf().toString()+"</svg>";for(b=Pb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});
function Rb(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}function Sb(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var Tb={animationend:Sb("Animation","AnimationEnd"),animationiteration:Sb("Animation","AnimationIteration"),animationstart:Sb("Animation","AnimationStart"),transitionend:Sb("Transition","TransitionEnd")},Ub={},Vb={};
ya&&(Vb=document.createElement("div").style,"AnimationEvent"in window||(delete Tb.animationend.animation,delete Tb.animationiteration.animation,delete Tb.animationstart.animation),"TransitionEvent"in window||delete Tb.transitionend.transition);function Wb(a){if(Ub[a])return Ub[a];if(!Tb[a])return a;var b=Tb[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Vb)return Ub[a]=b[c];return a}
var Xb=Wb("animationend"),Yb=Wb("animationiteration"),Zb=Wb("animationstart"),$b=Wb("transitionend"),ac="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),bc=new ("function"===typeof WeakMap?WeakMap:Map);function cc(a){var b=bc.get(a);void 0===b&&(b=new Map,bc.set(a,b));return b}
function dc(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else{a=b;do b=a,0!==(b.effectTag&1026)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function ec(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function fc(a){if(dc(a)!==a)throw Error(u(188));}
function gc(a){var b=a.alternate;if(!b){b=dc(a);if(null===b)throw Error(u(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return fc(e),a;if(f===d)return fc(e),b;f=f.sibling}throw Error(u(188));}if(c.return!==d.return)c=e,d=f;else{for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===
c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}if(!g)throw Error(u(189));}}if(c.alternate!==d)throw Error(u(190));}if(3!==c.tag)throw Error(u(188));return c.stateNode.current===c?a:b}function hc(a){a=gc(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}}return null}
function ic(a,b){if(null==b)throw Error(u(30));if(null==a)return b;if(Array.isArray(a)){if(Array.isArray(b))return a.push.apply(a,b),a;a.push(b);return a}return Array.isArray(b)?[a].concat(b):[a,b]}function jc(a,b,c){Array.isArray(a)?a.forEach(b,c):a&&b.call(c,a)}var kc=null;
function lc(a){if(a){var b=a._dispatchListeners,c=a._dispatchInstances;if(Array.isArray(b))for(var d=0;d<b.length&&!a.isPropagationStopped();d++)oa(a,b[d],c[d]);else b&&oa(a,b,c);a._dispatchListeners=null;a._dispatchInstances=null;a.isPersistent()||a.constructor.release(a)}}function mc(a){null!==a&&(kc=ic(kc,a));a=kc;kc=null;if(a){jc(a,lc);if(kc)throw Error(u(95));if(fa)throw a=ha,fa=!1,ha=null,a;}}
function nc(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}function oc(a){if(!ya)return!1;a="on"+a;var b=a in document;b||(b=document.createElement("div"),b.setAttribute(a,"return;"),b="function"===typeof b[a]);return b}var pc=[];function qc(a){a.topLevelType=null;a.nativeEvent=null;a.targetInst=null;a.ancestors.length=0;10>pc.length&&pc.push(a)}
function rc(a,b,c,d){if(pc.length){var e=pc.pop();e.topLevelType=a;e.eventSystemFlags=d;e.nativeEvent=b;e.targetInst=c;return e}return{topLevelType:a,eventSystemFlags:d,nativeEvent:b,targetInst:c,ancestors:[]}}
function sc(a){var b=a.targetInst,c=b;do{if(!c){a.ancestors.push(c);break}var d=c;if(3===d.tag)d=d.stateNode.containerInfo;else{for(;d.return;)d=d.return;d=3!==d.tag?null:d.stateNode.containerInfo}if(!d)break;b=c.tag;5!==b&&6!==b||a.ancestors.push(c);c=tc(d)}while(c);for(c=0;c<a.ancestors.length;c++){b=a.ancestors[c];var e=nc(a.nativeEvent);d=a.topLevelType;var f=a.nativeEvent,g=a.eventSystemFlags;0===c&&(g|=64);for(var h=null,k=0;k<sa.length;k++){var l=sa[k];l&&(l=l.extractEvents(d,b,f,e,g))&&(h=
ic(h,l))}mc(h)}}function uc(a,b,c){if(!c.has(a)){switch(a){case "scroll":vc(b,"scroll",!0);break;case "focus":case "blur":vc(b,"focus",!0);vc(b,"blur",!0);c.set("blur",null);c.set("focus",null);break;case "cancel":case "close":oc(a)&&vc(b,a,!0);break;case "invalid":case "submit":case "reset":break;default:-1===ac.indexOf(a)&&F(a,b)}c.set(a,null)}}
var wc,xc,yc,zc=!1,Ac=[],Bc=null,Cc=null,Dc=null,Ec=new Map,Fc=new Map,Gc=[],Hc="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Ic="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");
function Jc(a,b){var c=cc(b);Hc.forEach(function(a){uc(a,b,c)});Ic.forEach(function(a){uc(a,b,c)})}function Kc(a,b,c,d,e){return{blockedOn:a,topLevelType:b,eventSystemFlags:c|32,nativeEvent:e,container:d}}
function Lc(a,b){switch(a){case "focus":case "blur":Bc=null;break;case "dragenter":case "dragleave":Cc=null;break;case "mouseover":case "mouseout":Dc=null;break;case "pointerover":case "pointerout":Ec.delete(b.pointerId);break;case "gotpointercapture":case "lostpointercapture":Fc.delete(b.pointerId)}}function Mc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a=Kc(b,c,d,e,f),null!==b&&(b=Nc(b),null!==b&&xc(b)),a;a.eventSystemFlags|=d;return a}
function Oc(a,b,c,d,e){switch(b){case "focus":return Bc=Mc(Bc,a,b,c,d,e),!0;case "dragenter":return Cc=Mc(Cc,a,b,c,d,e),!0;case "mouseover":return Dc=Mc(Dc,a,b,c,d,e),!0;case "pointerover":var f=e.pointerId;Ec.set(f,Mc(Ec.get(f)||null,a,b,c,d,e));return!0;case "gotpointercapture":return f=e.pointerId,Fc.set(f,Mc(Fc.get(f)||null,a,b,c,d,e)),!0}return!1}
function Pc(a){var b=tc(a.target);if(null!==b){var c=dc(b);if(null!==c)if(b=c.tag,13===b){if(b=ec(c),null!==b){a.blockedOn=b;r.unstable_runWithPriority(a.priority,function(){yc(c)});return}}else if(3===b&&c.stateNode.hydrate){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null}function Qc(a){if(null!==a.blockedOn)return!1;var b=Rc(a.topLevelType,a.eventSystemFlags,a.container,a.nativeEvent);if(null!==b){var c=Nc(b);null!==c&&xc(c);a.blockedOn=b;return!1}return!0}
function Sc(a,b,c){Qc(a)&&c.delete(b)}function Tc(){for(zc=!1;0<Ac.length;){var a=Ac[0];if(null!==a.blockedOn){a=Nc(a.blockedOn);null!==a&&wc(a);break}var b=Rc(a.topLevelType,a.eventSystemFlags,a.container,a.nativeEvent);null!==b?a.blockedOn=b:Ac.shift()}null!==Bc&&Qc(Bc)&&(Bc=null);null!==Cc&&Qc(Cc)&&(Cc=null);null!==Dc&&Qc(Dc)&&(Dc=null);Ec.forEach(Sc);Fc.forEach(Sc)}function Uc(a,b){a.blockedOn===b&&(a.blockedOn=null,zc||(zc=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,Tc)))}
function Vc(a){function b(b){return Uc(b,a)}if(0<Ac.length){Uc(Ac[0],a);for(var c=1;c<Ac.length;c++){var d=Ac[c];d.blockedOn===a&&(d.blockedOn=null)}}null!==Bc&&Uc(Bc,a);null!==Cc&&Uc(Cc,a);null!==Dc&&Uc(Dc,a);Ec.forEach(b);Fc.forEach(b);for(c=0;c<Gc.length;c++)d=Gc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<Gc.length&&(c=Gc[0],null===c.blockedOn);)Pc(c),null===c.blockedOn&&Gc.shift()}
var Wc={},Yc=new Map,Zc=new Map,$c=["abort","abort",Xb,"animationEnd",Yb,"animationIteration",Zb,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking",
"seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",$b,"transitionEnd","waiting","waiting"];function ad(a,b){for(var c=0;c<a.length;c+=2){var d=a[c],e=a[c+1],f="on"+(e[0].toUpperCase()+e.slice(1));f={phasedRegistrationNames:{bubbled:f,captured:f+"Capture"},dependencies:[d],eventPriority:b};Zc.set(d,b);Yc.set(d,f);Wc[e]=f}}
ad("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0);
ad("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1);ad($c,2);for(var bd="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),cd=0;cd<bd.length;cd++)Zc.set(bd[cd],0);
var dd=r.unstable_UserBlockingPriority,ed=r.unstable_runWithPriority,fd=!0;function F(a,b){vc(b,a,!1)}function vc(a,b,c){var d=Zc.get(b);switch(void 0===d?2:d){case 0:d=gd.bind(null,b,1,a);break;case 1:d=hd.bind(null,b,1,a);break;default:d=id.bind(null,b,1,a)}c?a.addEventListener(b,d,!0):a.addEventListener(b,d,!1)}function gd(a,b,c,d){Ja||Ha();var e=id,f=Ja;Ja=!0;try{Ga(e,a,b,c,d)}finally{(Ja=f)||La()}}function hd(a,b,c,d){ed(dd,id.bind(null,a,b,c,d))}
function id(a,b,c,d){if(fd)if(0<Ac.length&&-1<Hc.indexOf(a))a=Kc(null,a,b,c,d),Ac.push(a);else{var e=Rc(a,b,c,d);if(null===e)Lc(a,d);else if(-1<Hc.indexOf(a))a=Kc(e,a,b,c,d),Ac.push(a);else if(!Oc(e,a,b,c,d)){Lc(a,d);a=rc(a,d,null,b);try{Ma(sc,a)}finally{qc(a)}}}}
function Rc(a,b,c,d){c=nc(d);c=tc(c);if(null!==c){var e=dc(c);if(null===e)c=null;else{var f=e.tag;if(13===f){c=ec(e);if(null!==c)return c;c=null}else if(3===f){if(e.stateNode.hydrate)return 3===e.tag?e.stateNode.containerInfo:null;c=null}else e!==c&&(c=null)}}a=rc(a,d,c,b);try{Ma(sc,a)}finally{qc(a)}return null}
var jd={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,
floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},kd=["Webkit","ms","Moz","O"];Object.keys(jd).forEach(function(a){kd.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);jd[b]=jd[a]})});function ld(a,b,c){return null==b||"boolean"===typeof b||""===b?"":c||"number"!==typeof b||0===b||jd.hasOwnProperty(a)&&jd[a]?(""+b).trim():b+"px"}
function md(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--"),e=ld(c,b[c],d);"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e}}var nd=n({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});
function od(a,b){if(b){if(nd[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(u(137,a,""));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(u(60));if(!("object"===typeof b.dangerouslySetInnerHTML&&"__html"in b.dangerouslySetInnerHTML))throw Error(u(61));}if(null!=b.style&&"object"!==typeof b.style)throw Error(u(62,""));}}
function pd(a,b){if(-1===a.indexOf("-"))return"string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return!1;default:return!0}}var qd=Mb.html;function rd(a,b){a=9===a.nodeType||11===a.nodeType?a:a.ownerDocument;var c=cc(a);b=wa[b];for(var d=0;d<b.length;d++)uc(b[d],a,c)}function sd(){}
function td(a){a=a||("undefined"!==typeof document?document:void 0);if("undefined"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}function ud(a){for(;a&&a.firstChild;)a=a.firstChild;return a}function vd(a,b){var c=ud(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=ud(c)}}
function wd(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?wd(a,b.parentNode):"contains"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}function xd(){for(var a=window,b=td();b instanceof a.HTMLIFrameElement;){try{var c="string"===typeof b.contentWindow.location.href}catch(d){c=!1}if(c)a=b.contentWindow;else break;b=td(a.document)}return b}
function yd(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}var zd="$",Ad="/$",Bd="$?",Cd="$!",Dd=null,Ed=null;function Fd(a,b){switch(a){case "button":case "input":case "select":case "textarea":return!!b.autoFocus}return!1}
function Gd(a,b){return"textarea"===a||"option"===a||"noscript"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}var Hd="function"===typeof setTimeout?setTimeout:void 0,Id="function"===typeof clearTimeout?clearTimeout:void 0;function Jd(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break}return a}
function Kd(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if(c===zd||c===Cd||c===Bd){if(0===b)return a;b--}else c===Ad&&b++}a=a.previousSibling}return null}var Ld=Math.random().toString(36).slice(2),Md="__reactInternalInstance$"+Ld,Nd="__reactEventHandlers$"+Ld,Od="__reactContainere$"+Ld;
function tc(a){var b=a[Md];if(b)return b;for(var c=a.parentNode;c;){if(b=c[Od]||c[Md]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=Kd(a);null!==a;){if(c=a[Md])return c;a=Kd(a)}return b}a=c;c=a.parentNode}return null}function Nc(a){a=a[Md]||a[Od];return!a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function Pd(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(u(33));}function Qd(a){return a[Nd]||null}
function Rd(a){do a=a.return;while(a&&5!==a.tag);return a?a:null}
function Sd(a,b){var c=a.stateNode;if(!c)return null;var d=la(c);if(!d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":case "onMouseEnter":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1}if(a)return null;if(c&&"function"!==typeof c)throw Error(u(231,
b,typeof c));return c}function Td(a,b,c){if(b=Sd(a,c.dispatchConfig.phasedRegistrationNames[b]))c._dispatchListeners=ic(c._dispatchListeners,b),c._dispatchInstances=ic(c._dispatchInstances,a)}function Ud(a){if(a&&a.dispatchConfig.phasedRegistrationNames){for(var b=a._targetInst,c=[];b;)c.push(b),b=Rd(b);for(b=c.length;0<b--;)Td(c[b],"captured",a);for(b=0;b<c.length;b++)Td(c[b],"bubbled",a)}}
function Vd(a,b,c){a&&c&&c.dispatchConfig.registrationName&&(b=Sd(a,c.dispatchConfig.registrationName))&&(c._dispatchListeners=ic(c._dispatchListeners,b),c._dispatchInstances=ic(c._dispatchInstances,a))}function Wd(a){a&&a.dispatchConfig.registrationName&&Vd(a._targetInst,null,a)}function Xd(a){jc(a,Ud)}var Yd=null,Zd=null,$d=null;
function ae(){if($d)return $d;var a,b=Zd,c=b.length,d,e="value"in Yd?Yd.value:Yd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return $d=e.slice(a,1<d?1-d:void 0)}function be(){return!0}function ce(){return!1}
function G(a,b,c,d){this.dispatchConfig=a;this._targetInst=b;this.nativeEvent=c;a=this.constructor.Interface;for(var e in a)a.hasOwnProperty(e)&&((b=a[e])?this[e]=b(c):"target"===e?this.target=d:this[e]=c[e]);this.isDefaultPrevented=(null!=c.defaultPrevented?c.defaultPrevented:!1===c.returnValue)?be:ce;this.isPropagationStopped=ce;return this}
n(G.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&(a.returnValue=!1),this.isDefaultPrevented=be)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=be)},persist:function(){this.isPersistent=be},isPersistent:ce,destructor:function(){var a=this.constructor.Interface,
b;for(b in a)this[b]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null;this.isPropagationStopped=this.isDefaultPrevented=ce;this._dispatchInstances=this._dispatchListeners=null}});G.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};
G.extend=function(a){function b(){}function c(){return d.apply(this,arguments)}var d=this;b.prototype=d.prototype;var e=new b;n(e,c.prototype);c.prototype=e;c.prototype.constructor=c;c.Interface=n({},d.Interface,a);c.extend=d.extend;de(c);return c};de(G);function ee(a,b,c,d){if(this.eventPool.length){var e=this.eventPool.pop();this.call(e,a,b,c,d);return e}return new this(a,b,c,d)}
function fe(a){if(!(a instanceof this))throw Error(u(279));a.destructor();10>this.eventPool.length&&this.eventPool.push(a)}function de(a){a.eventPool=[];a.getPooled=ee;a.release=fe}var ge=G.extend({data:null}),he=G.extend({data:null}),ie=[9,13,27,32],je=ya&&"CompositionEvent"in window,ke=null;ya&&"documentMode"in document&&(ke=document.documentMode);
var le=ya&&"TextEvent"in window&&!ke,me=ya&&(!je||ke&&8<ke&&11>=ke),ne=String.fromCharCode(32),oe={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",
captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},pe=!1;
function qe(a,b){switch(a){case "keyup":return-1!==ie.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "blur":return!0;default:return!1}}function re(a){a=a.detail;return"object"===typeof a&&"data"in a?a.data:null}var se=!1;function te(a,b){switch(a){case "compositionend":return re(b);case "keypress":if(32!==b.which)return null;pe=!0;return ne;case "textInput":return a=b.data,a===ne&&pe?null:a;default:return null}}
function ue(a,b){if(se)return"compositionend"===a||!je&&qe(a,b)?(a=ae(),$d=Zd=Yd=null,se=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return me&&"ko"!==b.locale?null:b.data;default:return null}}
var ve={eventTypes:oe,extractEvents:function(a,b,c,d){var e;if(je)b:{switch(a){case "compositionstart":var f=oe.compositionStart;break b;case "compositionend":f=oe.compositionEnd;break b;case "compositionupdate":f=oe.compositionUpdate;break b}f=void 0}else se?qe(a,c)&&(f=oe.compositionEnd):"keydown"===a&&229===c.keyCode&&(f=oe.compositionStart);f?(me&&"ko"!==c.locale&&(se||f!==oe.compositionStart?f===oe.compositionEnd&&se&&(e=ae()):(Yd=d,Zd="value"in Yd?Yd.value:Yd.textContent,se=!0)),f=ge.getPooled(f,
b,c,d),e?f.data=e:(e=re(c),null!==e&&(f.data=e)),Xd(f),e=f):e=null;(a=le?te(a,c):ue(a,c))?(b=he.getPooled(oe.beforeInput,b,c,d),b.data=a,Xd(b)):b=null;return null===e?b:null===b?e:[e,b]}},we={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function xe(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return"input"===b?!!we[a.type]:"textarea"===b?!0:!1}
var ye={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function ze(a,b,c){a=G.getPooled(ye.change,a,b,c);a.type="change";Da(c);Xd(a);return a}var Ae=null,Be=null;function Ce(a){mc(a)}function De(a){var b=Pd(a);if(yb(b))return a}function Ee(a,b){if("change"===a)return b}var Fe=!1;ya&&(Fe=oc("input")&&(!document.documentMode||9<document.documentMode));
function Ge(){Ae&&(Ae.detachEvent("onpropertychange",He),Be=Ae=null)}function He(a){if("value"===a.propertyName&&De(Be))if(a=ze(Be,a,nc(a)),Ja)mc(a);else{Ja=!0;try{Fa(Ce,a)}finally{Ja=!1,La()}}}function Ie(a,b,c){"focus"===a?(Ge(),Ae=b,Be=c,Ae.attachEvent("onpropertychange",He)):"blur"===a&&Ge()}function Je(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return De(Be)}function Ke(a,b){if("click"===a)return De(b)}function Le(a,b){if("input"===a||"change"===a)return De(b)}
var Me={eventTypes:ye,_isInputEventSupported:Fe,extractEvents:function(a,b,c,d){var e=b?Pd(b):window,f=e.nodeName&&e.nodeName.toLowerCase();if("select"===f||"input"===f&&"file"===e.type)var g=Ee;else if(xe(e))if(Fe)g=Le;else{g=Je;var h=Ie}else(f=e.nodeName)&&"input"===f.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)&&(g=Ke);if(g&&(g=g(a,b)))return ze(g,c,d);h&&h(a,e,b);"blur"===a&&(a=e._wrapperState)&&a.controlled&&"number"===e.type&&Db(e,"number",e.value)}},Ne=G.extend({view:null,detail:null}),
Oe={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pe(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Oe[a])?!!b[a]:!1}function Qe(){return Pe}
var Re=0,Se=0,Te=!1,Ue=!1,Ve=Ne.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Qe,button:null,buttons:null,relatedTarget:function(a){return a.relatedTarget||(a.fromElement===a.srcElement?a.toElement:a.fromElement)},movementX:function(a){if("movementX"in a)return a.movementX;var b=Re;Re=a.screenX;return Te?"mousemove"===a.type?a.screenX-b:0:(Te=!0,0)},movementY:function(a){if("movementY"in a)return a.movementY;
var b=Se;Se=a.screenY;return Ue?"mousemove"===a.type?a.screenY-b:0:(Ue=!0,0)}}),We=Ve.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Xe={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",
dependencies:["pointerout","pointerover"]}},Ye={eventTypes:Xe,extractEvents:function(a,b,c,d,e){var f="mouseover"===a||"pointerover"===a,g="mouseout"===a||"pointerout"===a;if(f&&0===(e&32)&&(c.relatedTarget||c.fromElement)||!g&&!f)return null;f=d.window===d?d:(f=d.ownerDocument)?f.defaultView||f.parentWindow:window;if(g){if(g=b,b=(b=c.relatedTarget||c.toElement)?tc(b):null,null!==b){var h=dc(b);if(b!==h||5!==b.tag&&6!==b.tag)b=null}}else g=null;if(g===b)return null;if("mouseout"===a||"mouseover"===
a){var k=Ve;var l=Xe.mouseLeave;var m=Xe.mouseEnter;var p="mouse"}else if("pointerout"===a||"pointerover"===a)k=We,l=Xe.pointerLeave,m=Xe.pointerEnter,p="pointer";a=null==g?f:Pd(g);f=null==b?f:Pd(b);l=k.getPooled(l,g,c,d);l.type=p+"leave";l.target=a;l.relatedTarget=f;c=k.getPooled(m,b,c,d);c.type=p+"enter";c.target=f;c.relatedTarget=a;d=g;p=b;if(d&&p)a:{k=d;m=p;g=0;for(a=k;a;a=Rd(a))g++;a=0;for(b=m;b;b=Rd(b))a++;for(;0<g-a;)k=Rd(k),g--;for(;0<a-g;)m=Rd(m),a--;for(;g--;){if(k===m||k===m.alternate)break a;
k=Rd(k);m=Rd(m)}k=null}else k=null;m=k;for(k=[];d&&d!==m;){g=d.alternate;if(null!==g&&g===m)break;k.push(d);d=Rd(d)}for(d=[];p&&p!==m;){g=p.alternate;if(null!==g&&g===m)break;d.push(p);p=Rd(p)}for(p=0;p<k.length;p++)Vd(k[p],"bubbled",l);for(p=d.length;0<p--;)Vd(d[p],"captured",c);return 0===(e&64)?[l]:[l,c]}};function Ze(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var $e="function"===typeof Object.is?Object.is:Ze,af=Object.prototype.hasOwnProperty;
function bf(a,b){if($e(a,b))return!0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++)if(!af.call(b,c[d])||!$e(a[c[d]],b[c[d]]))return!1;return!0}
var cf=ya&&"documentMode"in document&&11>=document.documentMode,df={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},ef=null,ff=null,gf=null,hf=!1;
function jf(a,b){var c=b.window===b?b.document:9===b.nodeType?b:b.ownerDocument;if(hf||null==ef||ef!==td(c))return null;c=ef;"selectionStart"in c&&yd(c)?c={start:c.selectionStart,end:c.selectionEnd}:(c=(c.ownerDocument&&c.ownerDocument.defaultView||window).getSelection(),c={anchorNode:c.anchorNode,anchorOffset:c.anchorOffset,focusNode:c.focusNode,focusOffset:c.focusOffset});return gf&&bf(gf,c)?null:(gf=c,a=G.getPooled(df.select,ff,a,b),a.type="select",a.target=ef,Xd(a),a)}
var kf={eventTypes:df,extractEvents:function(a,b,c,d,e,f){e=f||(d.window===d?d.document:9===d.nodeType?d:d.ownerDocument);if(!(f=!e)){a:{e=cc(e);f=wa.onSelect;for(var g=0;g<f.length;g++)if(!e.has(f[g])){e=!1;break a}e=!0}f=!e}if(f)return null;e=b?Pd(b):window;switch(a){case "focus":if(xe(e)||"true"===e.contentEditable)ef=e,ff=b,gf=null;break;case "blur":gf=ff=ef=null;break;case "mousedown":hf=!0;break;case "contextmenu":case "mouseup":case "dragend":return hf=!1,jf(c,d);case "selectionchange":if(cf)break;
case "keydown":case "keyup":return jf(c,d)}return null}},lf=G.extend({animationName:null,elapsedTime:null,pseudoElement:null}),mf=G.extend({clipboardData:function(a){return"clipboardData"in a?a.clipboardData:window.clipboardData}}),nf=Ne.extend({relatedTarget:null});function of(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}
var pf={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},qf={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",
116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},rf=Ne.extend({key:function(a){if(a.key){var b=pf[a.key]||a.key;if("Unidentified"!==b)return b}return"keypress"===a.type?(a=of(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?qf[a.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Qe,charCode:function(a){return"keypress"===
a.type?of(a):0},keyCode:function(a){return"keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return"keypress"===a.type?of(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),sf=Ve.extend({dataTransfer:null}),tf=Ne.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Qe}),uf=G.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),vf=Ve.extend({deltaX:function(a){return"deltaX"in a?a.deltaX:"wheelDeltaX"in
a?-a.wheelDeltaX:0},deltaY:function(a){return"deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:null,deltaMode:null}),wf={eventTypes:Wc,extractEvents:function(a,b,c,d){var e=Yc.get(a);if(!e)return null;switch(a){case "keypress":if(0===of(c))return null;case "keydown":case "keyup":a=rf;break;case "blur":case "focus":a=nf;break;case "click":if(2===c.button)return null;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":a=
Ve;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":a=sf;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":a=tf;break;case Xb:case Yb:case Zb:a=lf;break;case $b:a=uf;break;case "scroll":a=Ne;break;case "wheel":a=vf;break;case "copy":case "cut":case "paste":a=mf;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":a=
We;break;default:a=G}b=a.getPooled(e,b,c,d);Xd(b);return b}};if(pa)throw Error(u(101));pa=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));ra();var xf=Nc;la=Qd;ma=xf;na=Pd;xa({SimpleEventPlugin:wf,EnterLeaveEventPlugin:Ye,ChangeEventPlugin:Me,SelectEventPlugin:kf,BeforeInputEventPlugin:ve});var yf=[],zf=-1;function H(a){0>zf||(a.current=yf[zf],yf[zf]=null,zf--)}
function I(a,b){zf++;yf[zf]=a.current;a.current=b}var Af={},J={current:Af},K={current:!1},Bf=Af;function Cf(a,b){var c=a.type.contextTypes;if(!c)return Af;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function L(a){a=a.childContextTypes;return null!==a&&void 0!==a}
function Df(){H(K);H(J)}function Ef(a,b,c){if(J.current!==Af)throw Error(u(168));I(J,b);I(K,c)}function Ff(a,b,c){var d=a.stateNode;a=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in a))throw Error(u(108,pb(b)||"Unknown",e));return n({},c,{},d)}function Gf(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Af;Bf=J.current;I(J,a);I(K,K.current);return!0}
function Hf(a,b,c){var d=a.stateNode;if(!d)throw Error(u(169));c?(a=Ff(a,b,Bf),d.__reactInternalMemoizedMergedChildContext=a,H(K),H(J),I(J,a)):H(K);I(K,c)}
var If=r.unstable_runWithPriority,Jf=r.unstable_scheduleCallback,Kf=r.unstable_cancelCallback,Lf=r.unstable_requestPaint,Mf=r.unstable_now,Nf=r.unstable_getCurrentPriorityLevel,Of=r.unstable_ImmediatePriority,Pf=r.unstable_UserBlockingPriority,Qf=r.unstable_NormalPriority,Rf=r.unstable_LowPriority,Sf=r.unstable_IdlePriority,Tf={},Uf=r.unstable_shouldYield,Vf=void 0!==Lf?Lf:function(){},Wf=null,Xf=null,Yf=!1,Zf=Mf(),$f=1E4>Zf?Mf:function(){return Mf()-Zf};
function ag(){switch(Nf()){case Of:return 99;case Pf:return 98;case Qf:return 97;case Rf:return 96;case Sf:return 95;default:throw Error(u(332));}}function bg(a){switch(a){case 99:return Of;case 98:return Pf;case 97:return Qf;case 96:return Rf;case 95:return Sf;default:throw Error(u(332));}}function cg(a,b){a=bg(a);return If(a,b)}function dg(a,b,c){a=bg(a);return Jf(a,b,c)}function eg(a){null===Wf?(Wf=[a],Xf=Jf(Of,fg)):Wf.push(a);return Tf}function gg(){if(null!==Xf){var a=Xf;Xf=null;Kf(a)}fg()}
function fg(){if(!Yf&&null!==Wf){Yf=!0;var a=0;try{var b=Wf;cg(99,function(){for(;a<b.length;a++){var c=b[a];do c=c(!0);while(null!==c)}});Wf=null}catch(c){throw null!==Wf&&(Wf=Wf.slice(a+1)),Jf(Of,gg),c;}finally{Yf=!1}}}function hg(a,b,c){c/=10;return 1073741821-(((1073741821-a+b/10)/c|0)+1)*c}function ig(a,b){if(a&&a.defaultProps){b=n({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c])}return b}var jg={current:null},kg=null,lg=null,mg=null;function ng(){mg=lg=kg=null}
function og(a){var b=jg.current;H(jg);a.type._context._currentValue=b}function pg(a,b){for(;null!==a;){var c=a.alternate;if(a.childExpirationTime<b)a.childExpirationTime=b,null!==c&&c.childExpirationTime<b&&(c.childExpirationTime=b);else if(null!==c&&c.childExpirationTime<b)c.childExpirationTime=b;else break;a=a.return}}function qg(a,b){kg=a;mg=lg=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(a.expirationTime>=b&&(rg=!0),a.firstContext=null)}
function sg(a,b){if(mg!==a&&!1!==b&&0!==b){if("number"!==typeof b||1073741823===b)mg=a,b=1073741823;b={context:a,observedBits:b,next:null};if(null===lg){if(null===kg)throw Error(u(308));lg=b;kg.dependencies={expirationTime:0,firstContext:b,responders:null}}else lg=lg.next=b}return a._currentValue}var tg=!1;function ug(a){a.updateQueue={baseState:a.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}
function vg(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,baseQueue:a.baseQueue,shared:a.shared,effects:a.effects})}function wg(a,b){a={expirationTime:a,suspenseConfig:b,tag:0,payload:null,callback:null,next:null};return a.next=a}function xg(a,b){a=a.updateQueue;if(null!==a){a=a.shared;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b}}
function yg(a,b){var c=a.alternate;null!==c&&vg(c,a);a=a.updateQueue;c=a.baseQueue;null===c?(a.baseQueue=b.next=b,b.next=b):(b.next=c.next,c.next=b)}
function zg(a,b,c,d){var e=a.updateQueue;tg=!1;var f=e.baseQueue,g=e.shared.pending;if(null!==g){if(null!==f){var h=f.next;f.next=g.next;g.next=h}f=g;e.shared.pending=null;h=a.alternate;null!==h&&(h=h.updateQueue,null!==h&&(h.baseQueue=g))}if(null!==f){h=f.next;var k=e.baseState,l=0,m=null,p=null,x=null;if(null!==h){var z=h;do{g=z.expirationTime;if(g<d){var ca={expirationTime:z.expirationTime,suspenseConfig:z.suspenseConfig,tag:z.tag,payload:z.payload,callback:z.callback,next:null};null===x?(p=x=
ca,m=k):x=x.next=ca;g>l&&(l=g)}else{null!==x&&(x=x.next={expirationTime:1073741823,suspenseConfig:z.suspenseConfig,tag:z.tag,payload:z.payload,callback:z.callback,next:null});Ag(g,z.suspenseConfig);a:{var D=a,t=z;g=b;ca=c;switch(t.tag){case 1:D=t.payload;if("function"===typeof D){k=D.call(ca,k,g);break a}k=D;break a;case 3:D.effectTag=D.effectTag&-4097|64;case 0:D=t.payload;g="function"===typeof D?D.call(ca,k,g):D;if(null===g||void 0===g)break a;k=n({},k,g);break a;case 2:tg=!0}}null!==z.callback&&
(a.effectTag|=32,g=e.effects,null===g?e.effects=[z]:g.push(z))}z=z.next;if(null===z||z===h)if(g=e.shared.pending,null===g)break;else z=f.next=g.next,g.next=h,e.baseQueue=f=g,e.shared.pending=null}while(1)}null===x?m=k:x.next=p;e.baseState=m;e.baseQueue=x;Bg(l);a.expirationTime=l;a.memoizedState=k}}
function Cg(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=e;e=c;if("function"!==typeof d)throw Error(u(191,d));d.call(e)}}}var Dg=Wa.ReactCurrentBatchConfig,Eg=(new aa.Component).refs;function Fg(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:n({},b,c);a.memoizedState=c;0===a.expirationTime&&(a.updateQueue.baseState=c)}
var Jg={isMounted:function(a){return(a=a._reactInternalFiber)?dc(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternalFiber;var d=Gg(),e=Dg.suspense;d=Hg(d,a,e);e=wg(d,e);e.payload=b;void 0!==c&&null!==c&&(e.callback=c);xg(a,e);Ig(a,d)},enqueueReplaceState:function(a,b,c){a=a._reactInternalFiber;var d=Gg(),e=Dg.suspense;d=Hg(d,a,e);e=wg(d,e);e.tag=1;e.payload=b;void 0!==c&&null!==c&&(e.callback=c);xg(a,e);Ig(a,d)},enqueueForceUpdate:function(a,b){a=a._reactInternalFiber;var c=Gg(),d=Dg.suspense;
c=Hg(c,a,d);d=wg(c,d);d.tag=2;void 0!==b&&null!==b&&(d.callback=b);xg(a,d);Ig(a,c)}};function Kg(a,b,c,d,e,f,g){a=a.stateNode;return"function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!bf(c,d)||!bf(e,f):!0}
function Lg(a,b,c){var d=!1,e=Af;var f=b.contextType;"object"===typeof f&&null!==f?f=sg(f):(e=L(b)?Bf:J.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Cf(a,e):Af);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Jg;a.stateNode=b;b._reactInternalFiber=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}
function Mg(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Jg.enqueueReplaceState(b,b.state,null)}
function Ng(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=Eg;ug(a);var f=b.contextType;"object"===typeof f&&null!==f?e.context=sg(f):(f=L(b)?Bf:J.current,e.context=Cf(a,f));zg(a,c,e,d);e.state=a.memoizedState;f=b.getDerivedStateFromProps;"function"===typeof f&&(Fg(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&"function"!==typeof e.componentWillMount||
(b=e.state,"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Jg.enqueueReplaceState(e,e.state,null),zg(a,c,e,d),e.state=a.memoizedState);"function"===typeof e.componentDidMount&&(a.effectTag|=4)}var Og=Array.isArray;
function Pg(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(u(309));var d=c.stateNode}if(!d)throw Error(u(147,a));var e=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs;b===Eg&&(b=d.refs={});null===a?delete b[e]:b[e]=a};b._stringRef=e;return b}if("string"!==typeof a)throw Error(u(284));if(!c._owner)throw Error(u(290,a));}return a}
function Qg(a,b){if("textarea"!==a.type)throw Error(u(31,"[object Object]"===Object.prototype.toString.call(b)?"object with keys {"+Object.keys(b).join(", ")+"}":b,""));}
function Rg(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.effectTag=8}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=Sg(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.effectTag=
2,c):d;b.effectTag=2;return c}function g(b){a&&null===b.alternate&&(b.effectTag=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=Tg(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){if(null!==b&&b.elementType===c.type)return d=e(b,c.props),d.ref=Pg(a,b,c),d.return=a,d;d=Ug(c.type,c.key,c.props,null,a.mode,d);d.ref=Pg(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==
c.implementation)return b=Vg(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function m(a,b,c,d,f){if(null===b||7!==b.tag)return b=Wg(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function p(a,b,c){if("string"===typeof b||"number"===typeof b)return b=Tg(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case Za:return c=Ug(b.type,b.key,b.props,null,a.mode,c),c.ref=Pg(a,null,b),c.return=a,c;case $a:return b=Vg(b,a.mode,c),b.return=a,b}if(Og(b)||
nb(b))return b=Wg(b,a.mode,c,null),b.return=a,b;Qg(a,b)}return null}function x(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case Za:return c.key===e?c.type===ab?m(a,b,c.props.children,d,e):k(a,b,c,d):null;case $a:return c.key===e?l(a,b,c,d):null}if(Og(c)||nb(c))return null!==e?null:m(a,b,c,d,null);Qg(a,c)}return null}function z(a,b,c,d,e){if("string"===typeof d||"number"===typeof d)return a=
a.get(c)||null,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case Za:return a=a.get(null===d.key?c:d.key)||null,d.type===ab?m(b,a,d.props.children,e,d.key):k(b,a,d,e);case $a:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e)}if(Og(d)||nb(d))return a=a.get(c)||null,m(b,a,d,e,null);Qg(b,d)}return null}function ca(e,g,h,k){for(var l=null,t=null,m=g,y=g=0,A=null;null!==m&&y<h.length;y++){m.index>y?(A=m,m=null):A=m.sibling;var q=x(e,m,h[y],k);if(null===q){null===m&&(m=A);break}a&&
m&&null===q.alternate&&b(e,m);g=f(q,g,y);null===t?l=q:t.sibling=q;t=q;m=A}if(y===h.length)return c(e,m),l;if(null===m){for(;y<h.length;y++)m=p(e,h[y],k),null!==m&&(g=f(m,g,y),null===t?l=m:t.sibling=m,t=m);return l}for(m=d(e,m);y<h.length;y++)A=z(m,e,y,h[y],k),null!==A&&(a&&null!==A.alternate&&m.delete(null===A.key?y:A.key),g=f(A,g,y),null===t?l=A:t.sibling=A,t=A);a&&m.forEach(function(a){return b(e,a)});return l}function D(e,g,h,l){var k=nb(h);if("function"!==typeof k)throw Error(u(150));h=k.call(h);
if(null==h)throw Error(u(151));for(var m=k=null,t=g,y=g=0,A=null,q=h.next();null!==t&&!q.done;y++,q=h.next()){t.index>y?(A=t,t=null):A=t.sibling;var D=x(e,t,q.value,l);if(null===D){null===t&&(t=A);break}a&&t&&null===D.alternate&&b(e,t);g=f(D,g,y);null===m?k=D:m.sibling=D;m=D;t=A}if(q.done)return c(e,t),k;if(null===t){for(;!q.done;y++,q=h.next())q=p(e,q.value,l),null!==q&&(g=f(q,g,y),null===m?k=q:m.sibling=q,m=q);return k}for(t=d(e,t);!q.done;y++,q=h.next())q=z(t,e,y,q.value,l),null!==q&&(a&&null!==
q.alternate&&t.delete(null===q.key?y:q.key),g=f(q,g,y),null===m?k=q:m.sibling=q,m=q);a&&t.forEach(function(a){return b(e,a)});return k}return function(a,d,f,h){var k="object"===typeof f&&null!==f&&f.type===ab&&null===f.key;k&&(f=f.props.children);var l="object"===typeof f&&null!==f;if(l)switch(f.$$typeof){case Za:a:{l=f.key;for(k=d;null!==k;){if(k.key===l){switch(k.tag){case 7:if(f.type===ab){c(a,k.sibling);d=e(k,f.props.children);d.return=a;a=d;break a}break;default:if(k.elementType===f.type){c(a,
k.sibling);d=e(k,f.props);d.ref=Pg(a,k,f);d.return=a;a=d;break a}}c(a,k);break}else b(a,k);k=k.sibling}f.type===ab?(d=Wg(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=Ug(f.type,f.key,f.props,null,a.mode,h),h.ref=Pg(a,d,f),h.return=a,a=h)}return g(a);case $a:a:{for(k=f.key;null!==d;){if(d.key===k)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=
d.sibling}d=Vg(f,a.mode,h);d.return=a;a=d}return g(a)}if("string"===typeof f||"number"===typeof f)return f=""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):(c(a,d),d=Tg(f,a.mode,h),d.return=a,a=d),g(a);if(Og(f))return ca(a,d,f,h);if(nb(f))return D(a,d,f,h);l&&Qg(a,f);if("undefined"===typeof f&&!k)switch(a.tag){case 1:case 0:throw a=a.type,Error(u(152,a.displayName||a.name||"Component"));}return c(a,d)}}var Xg=Rg(!0),Yg=Rg(!1),Zg={},$g={current:Zg},ah={current:Zg},bh={current:Zg};
function ch(a){if(a===Zg)throw Error(u(174));return a}function dh(a,b){I(bh,b);I(ah,a);I($g,Zg);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:Ob(null,"");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=Ob(b,a)}H($g);I($g,b)}function eh(){H($g);H(ah);H(bh)}function fh(a){ch(bh.current);var b=ch($g.current);var c=Ob(b,a.type);b!==c&&(I(ah,a),I($g,c))}function gh(a){ah.current===a&&(H($g),H(ah))}var M={current:0};
function hh(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||c.data===Bd||c.data===Cd))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.effectTag&64))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}return null}function ih(a,b){return{responder:a,props:b}}
var jh=Wa.ReactCurrentDispatcher,kh=Wa.ReactCurrentBatchConfig,lh=0,N=null,O=null,P=null,mh=!1;function Q(){throw Error(u(321));}function nh(a,b){if(null===b)return!1;for(var c=0;c<b.length&&c<a.length;c++)if(!$e(a[c],b[c]))return!1;return!0}
function oh(a,b,c,d,e,f){lh=f;N=b;b.memoizedState=null;b.updateQueue=null;b.expirationTime=0;jh.current=null===a||null===a.memoizedState?ph:qh;a=c(d,e);if(b.expirationTime===lh){f=0;do{b.expirationTime=0;if(!(25>f))throw Error(u(301));f+=1;P=O=null;b.updateQueue=null;jh.current=rh;a=c(d,e)}while(b.expirationTime===lh)}jh.current=sh;b=null!==O&&null!==O.next;lh=0;P=O=N=null;mh=!1;if(b)throw Error(u(300));return a}
function th(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===P?N.memoizedState=P=a:P=P.next=a;return P}function uh(){if(null===O){var a=N.alternate;a=null!==a?a.memoizedState:null}else a=O.next;var b=null===P?N.memoizedState:P.next;if(null!==b)P=b,O=a;else{if(null===a)throw Error(u(310));O=a;a={memoizedState:O.memoizedState,baseState:O.baseState,baseQueue:O.baseQueue,queue:O.queue,next:null};null===P?N.memoizedState=P=a:P=P.next=a}return P}
function vh(a,b){return"function"===typeof b?b(a):b}
function wh(a){var b=uh(),c=b.queue;if(null===c)throw Error(u(311));c.lastRenderedReducer=a;var d=O,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g}d.baseQueue=e=f;c.pending=null}if(null!==e){e=e.next;d=d.baseState;var h=g=f=null,k=e;do{var l=k.expirationTime;if(l<lh){var m={expirationTime:k.expirationTime,suspenseConfig:k.suspenseConfig,action:k.action,eagerReducer:k.eagerReducer,eagerState:k.eagerState,next:null};null===h?(g=h=m,f=d):h=h.next=m;l>N.expirationTime&&
(N.expirationTime=l,Bg(l))}else null!==h&&(h=h.next={expirationTime:1073741823,suspenseConfig:k.suspenseConfig,action:k.action,eagerReducer:k.eagerReducer,eagerState:k.eagerState,next:null}),Ag(l,k.suspenseConfig),d=k.eagerReducer===a?k.eagerState:a(d,k.action);k=k.next}while(null!==k&&k!==e);null===h?f=d:h.next=g;$e(d,b.memoizedState)||(rg=!0);b.memoizedState=d;b.baseState=f;b.baseQueue=h;c.lastRenderedState=d}return[b.memoizedState,c.dispatch]}
function xh(a){var b=uh(),c=b.queue;if(null===c)throw Error(u(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);$e(f,b.memoizedState)||(rg=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f}return[f,d]}
function yh(a){var b=th();"function"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a=b.queue={pending:null,dispatch:null,lastRenderedReducer:vh,lastRenderedState:a};a=a.dispatch=zh.bind(null,N,a);return[b.memoizedState,a]}function Ah(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=N.updateQueue;null===b?(b={lastEffect:null},N.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}
function Bh(){return uh().memoizedState}function Ch(a,b,c,d){var e=th();N.effectTag|=a;e.memoizedState=Ah(1|b,c,void 0,void 0===d?null:d)}function Dh(a,b,c,d){var e=uh();d=void 0===d?null:d;var f=void 0;if(null!==O){var g=O.memoizedState;f=g.destroy;if(null!==d&&nh(d,g.deps)){Ah(b,c,f,d);return}}N.effectTag|=a;e.memoizedState=Ah(1|b,c,f,d)}function Eh(a,b){return Ch(516,4,a,b)}function Fh(a,b){return Dh(516,4,a,b)}function Gh(a,b){return Dh(4,2,a,b)}
function Hh(a,b){if("function"===typeof b)return a=a(),b(a),function(){b(null)};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null}}function Ih(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Dh(4,2,Hh.bind(null,b,a),c)}function Jh(){}function Kh(a,b){th().memoizedState=[a,void 0===b?null:b];return a}function Lh(a,b){var c=uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&nh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}
function Mh(a,b){var c=uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&nh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}function Nh(a,b,c){var d=ag();cg(98>d?98:d,function(){a(!0)});cg(97<d?97:d,function(){var d=kh.suspense;kh.suspense=void 0===b?null:b;try{a(!1),c()}finally{kh.suspense=d}})}
function zh(a,b,c){var d=Gg(),e=Dg.suspense;d=Hg(d,a,e);e={expirationTime:d,suspenseConfig:e,action:c,eagerReducer:null,eagerState:null,next:null};var f=b.pending;null===f?e.next=e:(e.next=f.next,f.next=e);b.pending=e;f=a.alternate;if(a===N||null!==f&&f===N)mh=!0,e.expirationTime=lh,N.expirationTime=lh;else{if(0===a.expirationTime&&(null===f||0===f.expirationTime)&&(f=b.lastRenderedReducer,null!==f))try{var g=b.lastRenderedState,h=f(g,c);e.eagerReducer=f;e.eagerState=h;if($e(h,g))return}catch(k){}finally{}Ig(a,
d)}}
var sh={readContext:sg,useCallback:Q,useContext:Q,useEffect:Q,useImperativeHandle:Q,useLayoutEffect:Q,useMemo:Q,useReducer:Q,useRef:Q,useState:Q,useDebugValue:Q,useResponder:Q,useDeferredValue:Q,useTransition:Q},ph={readContext:sg,useCallback:Kh,useContext:sg,useEffect:Eh,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Ch(4,2,Hh.bind(null,b,a),c)},useLayoutEffect:function(a,b){return Ch(4,2,a,b)},useMemo:function(a,b){var c=th();b=void 0===b?null:b;a=a();c.memoizedState=[a,
b];return a},useReducer:function(a,b,c){var d=th();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a=d.queue={pending:null,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};a=a.dispatch=zh.bind(null,N,a);return[d.memoizedState,a]},useRef:function(a){var b=th();a={current:a};return b.memoizedState=a},useState:yh,useDebugValue:Jh,useResponder:ih,useDeferredValue:function(a,b){var c=yh(a),d=c[0],e=c[1];Eh(function(){var c=kh.suspense;kh.suspense=void 0===b?null:b;try{e(a)}finally{kh.suspense=
c}},[a,b]);return d},useTransition:function(a){var b=yh(!1),c=b[0];b=b[1];return[Kh(Nh.bind(null,b,a),[b,a]),c]}},qh={readContext:sg,useCallback:Lh,useContext:sg,useEffect:Fh,useImperativeHandle:Ih,useLayoutEffect:Gh,useMemo:Mh,useReducer:wh,useRef:Bh,useState:function(){return wh(vh)},useDebugValue:Jh,useResponder:ih,useDeferredValue:function(a,b){var c=wh(vh),d=c[0],e=c[1];Fh(function(){var c=kh.suspense;kh.suspense=void 0===b?null:b;try{e(a)}finally{kh.suspense=c}},[a,b]);return d},useTransition:function(a){var b=
wh(vh),c=b[0];b=b[1];return[Lh(Nh.bind(null,b,a),[b,a]),c]}},rh={readContext:sg,useCallback:Lh,useContext:sg,useEffect:Fh,useImperativeHandle:Ih,useLayoutEffect:Gh,useMemo:Mh,useReducer:xh,useRef:Bh,useState:function(){return xh(vh)},useDebugValue:Jh,useResponder:ih,useDeferredValue:function(a,b){var c=xh(vh),d=c[0],e=c[1];Fh(function(){var c=kh.suspense;kh.suspense=void 0===b?null:b;try{e(a)}finally{kh.suspense=c}},[a,b]);return d},useTransition:function(a){var b=xh(vh),c=b[0];b=b[1];return[Lh(Nh.bind(null,
b,a),[b,a]),c]}},Oh=null,Ph=null,Qh=!1;function Rh(a,b){var c=Sh(5,null,null,0);c.elementType="DELETED";c.type="DELETED";c.stateNode=b;c.return=a;c.effectTag=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c}
function Th(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,!0):!1;case 13:return!1;default:return!1}}
function Uh(a){if(Qh){var b=Ph;if(b){var c=b;if(!Th(a,b)){b=Jd(c.nextSibling);if(!b||!Th(a,b)){a.effectTag=a.effectTag&-1025|2;Qh=!1;Oh=a;return}Rh(Oh,c)}Oh=a;Ph=Jd(b.firstChild)}else a.effectTag=a.effectTag&-1025|2,Qh=!1,Oh=a}}function Vh(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;Oh=a}
function Wh(a){if(a!==Oh)return!1;if(!Qh)return Vh(a),Qh=!0,!1;var b=a.type;if(5!==a.tag||"head"!==b&&"body"!==b&&!Gd(b,a.memoizedProps))for(b=Ph;b;)Rh(a,b),b=Jd(b.nextSibling);Vh(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(u(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if(c===Ad){if(0===b){Ph=Jd(a.nextSibling);break a}b--}else c!==zd&&c!==Cd&&c!==Bd||b++}a=a.nextSibling}Ph=null}}else Ph=Oh?Jd(a.stateNode.nextSibling):null;return!0}
function Xh(){Ph=Oh=null;Qh=!1}var Yh=Wa.ReactCurrentOwner,rg=!1;function R(a,b,c,d){b.child=null===a?Yg(b,null,c,d):Xg(b,a.child,c,d)}function Zh(a,b,c,d,e){c=c.render;var f=b.ref;qg(b,e);d=oh(a,b,c,d,f,e);if(null!==a&&!rg)return b.updateQueue=a.updateQueue,b.effectTag&=-517,a.expirationTime<=e&&(a.expirationTime=0),$h(a,b,e);b.effectTag|=1;R(a,b,d,e);return b.child}
function ai(a,b,c,d,e,f){if(null===a){var g=c.type;if("function"===typeof g&&!bi(g)&&void 0===g.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=g,ci(a,b,g,d,e,f);a=Ug(c.type,null,d,null,b.mode,f);a.ref=b.ref;a.return=b;return b.child=a}g=a.child;if(e<f&&(e=g.memoizedProps,c=c.compare,c=null!==c?c:bf,c(e,d)&&a.ref===b.ref))return $h(a,b,f);b.effectTag|=1;a=Sg(g,d);a.ref=b.ref;a.return=b;return b.child=a}
function ci(a,b,c,d,e,f){return null!==a&&bf(a.memoizedProps,d)&&a.ref===b.ref&&(rg=!1,e<f)?(b.expirationTime=a.expirationTime,$h(a,b,f)):di(a,b,c,d,f)}function ei(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.effectTag|=128}function di(a,b,c,d,e){var f=L(c)?Bf:J.current;f=Cf(b,f);qg(b,e);c=oh(a,b,c,d,f,e);if(null!==a&&!rg)return b.updateQueue=a.updateQueue,b.effectTag&=-517,a.expirationTime<=e&&(a.expirationTime=0),$h(a,b,e);b.effectTag|=1;R(a,b,c,e);return b.child}
function fi(a,b,c,d,e){if(L(c)){var f=!0;Gf(b)}else f=!1;qg(b,e);if(null===b.stateNode)null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),Lg(b,c,d),Ng(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;"object"===typeof l&&null!==l?l=sg(l):(l=L(c)?Bf:J.current,l=Cf(b,l));var m=c.getDerivedStateFromProps,p="function"===typeof m||"function"===typeof g.getSnapshotBeforeUpdate;p||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&
"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Mg(b,g,d,l);tg=!1;var x=b.memoizedState;g.state=x;zg(b,d,g,e);k=b.memoizedState;h!==d||x!==k||K.current||tg?("function"===typeof m&&(Fg(b,c,m,d),k=b.memoizedState),(h=tg||Kg(b,c,h,d,x,k,l))?(p||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),"function"===
typeof g.componentDidMount&&(b.effectTag|=4)):("function"===typeof g.componentDidMount&&(b.effectTag|=4),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):("function"===typeof g.componentDidMount&&(b.effectTag|=4),d=!1)}else g=b.stateNode,vg(a,b),h=b.memoizedProps,g.props=b.type===b.elementType?h:ig(b.type,h),k=g.context,l=c.contextType,"object"===typeof l&&null!==l?l=sg(l):(l=L(c)?Bf:J.current,l=Cf(b,l)),m=c.getDerivedStateFromProps,(p="function"===typeof m||"function"===
typeof g.getSnapshotBeforeUpdate)||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Mg(b,g,d,l),tg=!1,k=b.memoizedState,g.state=k,zg(b,d,g,e),x=b.memoizedState,h!==d||k!==x||K.current||tg?("function"===typeof m&&(Fg(b,c,m,d),x=b.memoizedState),(m=tg||Kg(b,c,h,d,k,x,l))?(p||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,
x,l),"function"===typeof g.UNSAFE_componentWillUpdate&&g.UNSAFE_componentWillUpdate(d,x,l)),"function"===typeof g.componentDidUpdate&&(b.effectTag|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.effectTag|=256)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=256),b.memoizedProps=d,b.memoizedState=x),g.props=d,g.state=x,g.context=l,d=m):
("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=256),d=!1);return gi(a,b,c,d,f,e)}
function gi(a,b,c,d,e,f){ei(a,b);var g=0!==(b.effectTag&64);if(!d&&!g)return e&&Hf(b,c,!1),$h(a,b,f);d=b.stateNode;Yh.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?null:d.render();b.effectTag|=1;null!==a&&g?(b.child=Xg(b,a.child,null,f),b.child=Xg(b,null,h,f)):R(a,b,h,f);b.memoizedState=d.state;e&&Hf(b,c,!0);return b.child}function hi(a){var b=a.stateNode;b.pendingContext?Ef(a,b.pendingContext,b.pendingContext!==b.context):b.context&&Ef(a,b.context,!1);dh(a,b.containerInfo)}
var ii={dehydrated:null,retryTime:0};
function ji(a,b,c){var d=b.mode,e=b.pendingProps,f=M.current,g=!1,h;(h=0!==(b.effectTag&64))||(h=0!==(f&2)&&(null===a||null!==a.memoizedState));h?(g=!0,b.effectTag&=-65):null!==a&&null===a.memoizedState||void 0===e.fallback||!0===e.unstable_avoidThisFallback||(f|=1);I(M,f&1);if(null===a){void 0!==e.fallback&&Uh(b);if(g){g=e.fallback;e=Wg(null,d,0,null);e.return=b;if(0===(b.mode&2))for(a=null!==b.memoizedState?b.child.child:b.child,e.child=a;null!==a;)a.return=e,a=a.sibling;c=Wg(g,d,c,null);c.return=
b;e.sibling=c;b.memoizedState=ii;b.child=e;return c}d=e.children;b.memoizedState=null;return b.child=Yg(b,null,d,c)}if(null!==a.memoizedState){a=a.child;d=a.sibling;if(g){e=e.fallback;c=Sg(a,a.pendingProps);c.return=b;if(0===(b.mode&2)&&(g=null!==b.memoizedState?b.child.child:b.child,g!==a.child))for(c.child=g;null!==g;)g.return=c,g=g.sibling;d=Sg(d,e);d.return=b;c.sibling=d;c.childExpirationTime=0;b.memoizedState=ii;b.child=c;return d}c=Xg(b,a.child,e.children,c);b.memoizedState=null;return b.child=
c}a=a.child;if(g){g=e.fallback;e=Wg(null,d,0,null);e.return=b;e.child=a;null!==a&&(a.return=e);if(0===(b.mode&2))for(a=null!==b.memoizedState?b.child.child:b.child,e.child=a;null!==a;)a.return=e,a=a.sibling;c=Wg(g,d,c,null);c.return=b;e.sibling=c;c.effectTag|=2;e.childExpirationTime=0;b.memoizedState=ii;b.child=e;return c}b.memoizedState=null;return b.child=Xg(b,a,e.children,c)}
function ki(a,b){a.expirationTime<b&&(a.expirationTime=b);var c=a.alternate;null!==c&&c.expirationTime<b&&(c.expirationTime=b);pg(a.return,b)}function li(a,b,c,d,e,f){var g=a.memoizedState;null===g?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailExpiration:0,tailMode:e,lastEffect:f}:(g.isBackwards=b,g.rendering=null,g.renderingStartTime=0,g.last=d,g.tail=c,g.tailExpiration=0,g.tailMode=e,g.lastEffect=f)}
function mi(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;R(a,b,d.children,c);d=M.current;if(0!==(d&2))d=d&1|2,b.effectTag|=64;else{if(null!==a&&0!==(a.effectTag&64))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&ki(a,c);else if(19===a.tag)ki(a,c);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}d&=1}I(M,d);if(0===(b.mode&2))b.memoizedState=
null;else switch(e){case "forwards":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===hh(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);li(b,!1,e,c,f,b.lastEffect);break;case "backwards":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===hh(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a}li(b,!0,c,null,f,b.lastEffect);break;case "together":li(b,!1,null,null,void 0,b.lastEffect);break;default:b.memoizedState=null}return b.child}
function $h(a,b,c){null!==a&&(b.dependencies=a.dependencies);var d=b.expirationTime;0!==d&&Bg(d);if(b.childExpirationTime<c)return null;if(null!==a&&b.child!==a.child)throw Error(u(153));if(null!==b.child){a=b.child;c=Sg(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Sg(a,a.pendingProps),c.return=b;c.sibling=null}return b.child}var ni,oi,pi,qi;
ni=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}};oi=function(){};
pi=function(a,b,c,d,e){var f=a.memoizedProps;if(f!==d){var g=b.stateNode;ch($g.current);a=null;switch(c){case "input":f=zb(g,f);d=zb(g,d);a=[];break;case "option":f=Gb(g,f);d=Gb(g,d);a=[];break;case "select":f=n({},f,{value:void 0});d=n({},d,{value:void 0});a=[];break;case "textarea":f=Ib(g,f);d=Ib(g,d);a=[];break;default:"function"!==typeof f.onClick&&"function"===typeof d.onClick&&(g.onclick=sd)}od(c,d);var h,k;c=null;for(h in f)if(!d.hasOwnProperty(h)&&f.hasOwnProperty(h)&&null!=f[h])if("style"===
h)for(k in g=f[h],g)g.hasOwnProperty(k)&&(c||(c={}),c[k]="");else"dangerouslySetInnerHTML"!==h&&"children"!==h&&"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&"autoFocus"!==h&&(va.hasOwnProperty(h)?a||(a=[]):(a=a||[]).push(h,null));for(h in d){var l=d[h];g=null!=f?f[h]:void 0;if(d.hasOwnProperty(h)&&l!==g&&(null!=l||null!=g))if("style"===h)if(g){for(k in g)!g.hasOwnProperty(k)||l&&l.hasOwnProperty(k)||(c||(c={}),c[k]="");for(k in l)l.hasOwnProperty(k)&&g[k]!==l[k]&&(c||(c={}),
c[k]=l[k])}else c||(a||(a=[]),a.push(h,c)),c=l;else"dangerouslySetInnerHTML"===h?(l=l?l.__html:void 0,g=g?g.__html:void 0,null!=l&&g!==l&&(a=a||[]).push(h,l)):"children"===h?g===l||"string"!==typeof l&&"number"!==typeof l||(a=a||[]).push(h,""+l):"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&(va.hasOwnProperty(h)?(null!=l&&rd(e,h),a||g===l||(a=[])):(a=a||[]).push(h,l))}c&&(a=a||[]).push("style",c);e=a;if(b.updateQueue=e)b.effectTag|=4}};
qi=function(a,b,c,d){c!==d&&(b.effectTag|=4)};function ri(a,b){switch(a.tailMode){case "hidden":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case "collapsed":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null}}
function si(a,b,c){var d=b.pendingProps;switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return L(b.type)&&Df(),null;case 3:return eh(),H(K),H(J),c=b.stateNode,c.pendingContext&&(c.context=c.pendingContext,c.pendingContext=null),null!==a&&null!==a.child||!Wh(b)||(b.effectTag|=4),oi(b),null;case 5:gh(b);c=ch(bh.current);var e=b.type;if(null!==a&&null!=b.stateNode)pi(a,b,e,d,c),a.ref!==b.ref&&(b.effectTag|=128);else{if(!d){if(null===b.stateNode)throw Error(u(166));
return null}a=ch($g.current);if(Wh(b)){d=b.stateNode;e=b.type;var f=b.memoizedProps;d[Md]=b;d[Nd]=f;switch(e){case "iframe":case "object":case "embed":F("load",d);break;case "video":case "audio":for(a=0;a<ac.length;a++)F(ac[a],d);break;case "source":F("error",d);break;case "img":case "image":case "link":F("error",d);F("load",d);break;case "form":F("reset",d);F("submit",d);break;case "details":F("toggle",d);break;case "input":Ab(d,f);F("invalid",d);rd(c,"onChange");break;case "select":d._wrapperState=
{wasMultiple:!!f.multiple};F("invalid",d);rd(c,"onChange");break;case "textarea":Jb(d,f),F("invalid",d),rd(c,"onChange")}od(e,f);a=null;for(var g in f)if(f.hasOwnProperty(g)){var h=f[g];"children"===g?"string"===typeof h?d.textContent!==h&&(a=["children",h]):"number"===typeof h&&d.textContent!==""+h&&(a=["children",""+h]):va.hasOwnProperty(g)&&null!=h&&rd(c,g)}switch(e){case "input":xb(d);Eb(d,f,!0);break;case "textarea":xb(d);Lb(d);break;case "select":case "option":break;default:"function"===typeof f.onClick&&
(d.onclick=sd)}c=a;b.updateQueue=c;null!==c&&(b.effectTag|=4)}else{g=9===c.nodeType?c:c.ownerDocument;a===qd&&(a=Nb(e));a===qd?"script"===e?(a=g.createElement("div"),a.innerHTML="<script>\x3c/script>",a=a.removeChild(a.firstChild)):"string"===typeof d.is?a=g.createElement(e,{is:d.is}):(a=g.createElement(e),"select"===e&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,e);a[Md]=b;a[Nd]=d;ni(a,b,!1,!1);b.stateNode=a;g=pd(e,d);switch(e){case "iframe":case "object":case "embed":F("load",
a);h=d;break;case "video":case "audio":for(h=0;h<ac.length;h++)F(ac[h],a);h=d;break;case "source":F("error",a);h=d;break;case "img":case "image":case "link":F("error",a);F("load",a);h=d;break;case "form":F("reset",a);F("submit",a);h=d;break;case "details":F("toggle",a);h=d;break;case "input":Ab(a,d);h=zb(a,d);F("invalid",a);rd(c,"onChange");break;case "option":h=Gb(a,d);break;case "select":a._wrapperState={wasMultiple:!!d.multiple};h=n({},d,{value:void 0});F("invalid",a);rd(c,"onChange");break;case "textarea":Jb(a,
d);h=Ib(a,d);F("invalid",a);rd(c,"onChange");break;default:h=d}od(e,h);var k=h;for(f in k)if(k.hasOwnProperty(f)){var l=k[f];"style"===f?md(a,l):"dangerouslySetInnerHTML"===f?(l=l?l.__html:void 0,null!=l&&Qb(a,l)):"children"===f?"string"===typeof l?("textarea"!==e||""!==l)&&Rb(a,l):"number"===typeof l&&Rb(a,""+l):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(va.hasOwnProperty(f)?null!=l&&rd(c,f):null!=l&&Xa(a,f,l,g))}switch(e){case "input":xb(a);Eb(a,d,!1);
break;case "textarea":xb(a);Lb(a);break;case "option":null!=d.value&&a.setAttribute("value",""+rb(d.value));break;case "select":a.multiple=!!d.multiple;c=d.value;null!=c?Hb(a,!!d.multiple,c,!1):null!=d.defaultValue&&Hb(a,!!d.multiple,d.defaultValue,!0);break;default:"function"===typeof h.onClick&&(a.onclick=sd)}Fd(e,d)&&(b.effectTag|=4)}null!==b.ref&&(b.effectTag|=128)}return null;case 6:if(a&&null!=b.stateNode)qi(a,b,a.memoizedProps,d);else{if("string"!==typeof d&&null===b.stateNode)throw Error(u(166));
c=ch(bh.current);ch($g.current);Wh(b)?(c=b.stateNode,d=b.memoizedProps,c[Md]=b,c.nodeValue!==d&&(b.effectTag|=4)):(c=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),c[Md]=b,b.stateNode=c)}return null;case 13:H(M);d=b.memoizedState;if(0!==(b.effectTag&64))return b.expirationTime=c,b;c=null!==d;d=!1;null===a?void 0!==b.memoizedProps.fallback&&Wh(b):(e=a.memoizedState,d=null!==e,c||null===e||(e=a.child.sibling,null!==e&&(f=b.firstEffect,null!==f?(b.firstEffect=e,e.nextEffect=f):(b.firstEffect=b.lastEffect=
e,e.nextEffect=null),e.effectTag=8)));if(c&&!d&&0!==(b.mode&2))if(null===a&&!0!==b.memoizedProps.unstable_avoidThisFallback||0!==(M.current&1))S===ti&&(S=ui);else{if(S===ti||S===ui)S=vi;0!==wi&&null!==T&&(xi(T,U),yi(T,wi))}if(c||d)b.effectTag|=4;return null;case 4:return eh(),oi(b),null;case 10:return og(b),null;case 17:return L(b.type)&&Df(),null;case 19:H(M);d=b.memoizedState;if(null===d)return null;e=0!==(b.effectTag&64);f=d.rendering;if(null===f)if(e)ri(d,!1);else{if(S!==ti||null!==a&&0!==(a.effectTag&
64))for(f=b.child;null!==f;){a=hh(f);if(null!==a){b.effectTag|=64;ri(d,!1);e=a.updateQueue;null!==e&&(b.updateQueue=e,b.effectTag|=4);null===d.lastEffect&&(b.firstEffect=null);b.lastEffect=d.lastEffect;for(d=b.child;null!==d;)e=d,f=c,e.effectTag&=2,e.nextEffect=null,e.firstEffect=null,e.lastEffect=null,a=e.alternate,null===a?(e.childExpirationTime=0,e.expirationTime=f,e.child=null,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null):(e.childExpirationTime=a.childExpirationTime,
e.expirationTime=a.expirationTime,e.child=a.child,e.memoizedProps=a.memoizedProps,e.memoizedState=a.memoizedState,e.updateQueue=a.updateQueue,f=a.dependencies,e.dependencies=null===f?null:{expirationTime:f.expirationTime,firstContext:f.firstContext,responders:f.responders}),d=d.sibling;I(M,M.current&1|2);return b.child}f=f.sibling}}else{if(!e)if(a=hh(f),null!==a){if(b.effectTag|=64,e=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.effectTag|=4),ri(d,!0),null===d.tail&&"hidden"===d.tailMode&&!f.alternate)return b=
b.lastEffect=d.lastEffect,null!==b&&(b.nextEffect=null),null}else 2*$f()-d.renderingStartTime>d.tailExpiration&&1<c&&(b.effectTag|=64,e=!0,ri(d,!1),b.expirationTime=b.childExpirationTime=c-1);d.isBackwards?(f.sibling=b.child,b.child=f):(c=d.last,null!==c?c.sibling=f:b.child=f,d.last=f)}return null!==d.tail?(0===d.tailExpiration&&(d.tailExpiration=$f()+500),c=d.tail,d.rendering=c,d.tail=c.sibling,d.lastEffect=b.lastEffect,d.renderingStartTime=$f(),c.sibling=null,b=M.current,I(M,e?b&1|2:b&1),c):null}throw Error(u(156,
b.tag));}function zi(a){switch(a.tag){case 1:L(a.type)&&Df();var b=a.effectTag;return b&4096?(a.effectTag=b&-4097|64,a):null;case 3:eh();H(K);H(J);b=a.effectTag;if(0!==(b&64))throw Error(u(285));a.effectTag=b&-4097|64;return a;case 5:return gh(a),null;case 13:return H(M),b=a.effectTag,b&4096?(a.effectTag=b&-4097|64,a):null;case 19:return H(M),null;case 4:return eh(),null;case 10:return og(a),null;default:return null}}function Ai(a,b){return{value:a,source:b,stack:qb(b)}}
var Bi="function"===typeof WeakSet?WeakSet:Set;function Ci(a,b){var c=b.source,d=b.stack;null===d&&null!==c&&(d=qb(c));null!==c&&pb(c.type);b=b.value;null!==a&&1===a.tag&&pb(a.type);try{console.error(b)}catch(e){setTimeout(function(){throw e;})}}function Di(a,b){try{b.props=a.memoizedProps,b.state=a.memoizedState,b.componentWillUnmount()}catch(c){Ei(a,c)}}function Fi(a){var b=a.ref;if(null!==b)if("function"===typeof b)try{b(null)}catch(c){Ei(a,c)}else b.current=null}
function Gi(a,b){switch(b.tag){case 0:case 11:case 15:case 22:return;case 1:if(b.effectTag&256&&null!==a){var c=a.memoizedProps,d=a.memoizedState;a=b.stateNode;b=a.getSnapshotBeforeUpdate(b.elementType===b.type?c:ig(b.type,c),d);a.__reactInternalSnapshotBeforeUpdate=b}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(u(163));}
function Hi(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.destroy;c.destroy=void 0;void 0!==d&&d()}c=c.next}while(c!==b)}}function Ii(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.create;c.destroy=d()}c=c.next}while(c!==b)}}
function Ji(a,b,c){switch(c.tag){case 0:case 11:case 15:case 22:Ii(3,c);return;case 1:a=c.stateNode;if(c.effectTag&4)if(null===b)a.componentDidMount();else{var d=c.elementType===c.type?b.memoizedProps:ig(c.type,b.memoizedProps);a.componentDidUpdate(d,b.memoizedState,a.__reactInternalSnapshotBeforeUpdate)}b=c.updateQueue;null!==b&&Cg(c,b,a);return;case 3:b=c.updateQueue;if(null!==b){a=null;if(null!==c.child)switch(c.child.tag){case 5:a=c.child.stateNode;break;case 1:a=c.child.stateNode}Cg(c,b,a)}return;
case 5:a=c.stateNode;null===b&&c.effectTag&4&&Fd(c.type,c.memoizedProps)&&a.focus();return;case 6:return;case 4:return;case 12:return;case 13:null===c.memoizedState&&(c=c.alternate,null!==c&&(c=c.memoizedState,null!==c&&(c=c.dehydrated,null!==c&&Vc(c))));return;case 19:case 17:case 20:case 21:return}throw Error(u(163));}
function Ki(a,b,c){"function"===typeof Li&&Li(b);switch(b.tag){case 0:case 11:case 14:case 15:case 22:a=b.updateQueue;if(null!==a&&(a=a.lastEffect,null!==a)){var d=a.next;cg(97<c?97:c,function(){var a=d;do{var c=a.destroy;if(void 0!==c){var g=b;try{c()}catch(h){Ei(g,h)}}a=a.next}while(a!==d)})}break;case 1:Fi(b);c=b.stateNode;"function"===typeof c.componentWillUnmount&&Di(b,c);break;case 5:Fi(b);break;case 4:Mi(a,b,c)}}
function Ni(a){var b=a.alternate;a.return=null;a.child=null;a.memoizedState=null;a.updateQueue=null;a.dependencies=null;a.alternate=null;a.firstEffect=null;a.lastEffect=null;a.pendingProps=null;a.memoizedProps=null;a.stateNode=null;null!==b&&Ni(b)}function Oi(a){return 5===a.tag||3===a.tag||4===a.tag}
function Pi(a){a:{for(var b=a.return;null!==b;){if(Oi(b)){var c=b;break a}b=b.return}throw Error(u(160));}b=c.stateNode;switch(c.tag){case 5:var d=!1;break;case 3:b=b.containerInfo;d=!0;break;case 4:b=b.containerInfo;d=!0;break;default:throw Error(u(161));}c.effectTag&16&&(Rb(b,""),c.effectTag&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c.return||Oi(c.return)){c=null;break a}c=c.return}c.sibling.return=c.return;for(c=c.sibling;5!==c.tag&&6!==c.tag&&18!==c.tag;){if(c.effectTag&2)continue b;
if(null===c.child||4===c.tag)continue b;else c.child.return=c,c=c.child}if(!(c.effectTag&2)){c=c.stateNode;break a}}d?Qi(a,c,b):Ri(a,c,b)}
function Qi(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=sd));else if(4!==d&&(a=a.child,null!==a))for(Qi(a,b,c),a=a.sibling;null!==a;)Qi(a,b,c),a=a.sibling}
function Ri(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(Ri(a,b,c),a=a.sibling;null!==a;)Ri(a,b,c),a=a.sibling}
function Mi(a,b,c){for(var d=b,e=!1,f,g;;){if(!e){e=d.return;a:for(;;){if(null===e)throw Error(u(160));f=e.stateNode;switch(e.tag){case 5:g=!1;break a;case 3:f=f.containerInfo;g=!0;break a;case 4:f=f.containerInfo;g=!0;break a}e=e.return}e=!0}if(5===d.tag||6===d.tag){a:for(var h=a,k=d,l=c,m=k;;)if(Ki(h,m,l),null!==m.child&&4!==m.tag)m.child.return=m,m=m.child;else{if(m===k)break a;for(;null===m.sibling;){if(null===m.return||m.return===k)break a;m=m.return}m.sibling.return=m.return;m=m.sibling}g?(h=
f,k=d.stateNode,8===h.nodeType?h.parentNode.removeChild(k):h.removeChild(k)):f.removeChild(d.stateNode)}else if(4===d.tag){if(null!==d.child){f=d.stateNode.containerInfo;g=!0;d.child.return=d;d=d.child;continue}}else if(Ki(a,d,c),null!==d.child){d.child.return=d;d=d.child;continue}if(d===b)break;for(;null===d.sibling;){if(null===d.return||d.return===b)return;d=d.return;4===d.tag&&(e=!1)}d.sibling.return=d.return;d=d.sibling}}
function Si(a,b){switch(b.tag){case 0:case 11:case 14:case 15:case 22:Hi(3,b);return;case 1:return;case 5:var c=b.stateNode;if(null!=c){var d=b.memoizedProps,e=null!==a?a.memoizedProps:d;a=b.type;var f=b.updateQueue;b.updateQueue=null;if(null!==f){c[Nd]=d;"input"===a&&"radio"===d.type&&null!=d.name&&Bb(c,d);pd(a,e);b=pd(a,d);for(e=0;e<f.length;e+=2){var g=f[e],h=f[e+1];"style"===g?md(c,h):"dangerouslySetInnerHTML"===g?Qb(c,h):"children"===g?Rb(c,h):Xa(c,g,h,b)}switch(a){case "input":Cb(c,d);break;
case "textarea":Kb(c,d);break;case "select":b=c._wrapperState.wasMultiple,c._wrapperState.wasMultiple=!!d.multiple,a=d.value,null!=a?Hb(c,!!d.multiple,a,!1):b!==!!d.multiple&&(null!=d.defaultValue?Hb(c,!!d.multiple,d.defaultValue,!0):Hb(c,!!d.multiple,d.multiple?[]:"",!1))}}}return;case 6:if(null===b.stateNode)throw Error(u(162));b.stateNode.nodeValue=b.memoizedProps;return;case 3:b=b.stateNode;b.hydrate&&(b.hydrate=!1,Vc(b.containerInfo));return;case 12:return;case 13:c=b;null===b.memoizedState?
d=!1:(d=!0,c=b.child,Ti=$f());if(null!==c)a:for(a=c;;){if(5===a.tag)f=a.stateNode,d?(f=f.style,"function"===typeof f.setProperty?f.setProperty("display","none","important"):f.display="none"):(f=a.stateNode,e=a.memoizedProps.style,e=void 0!==e&&null!==e&&e.hasOwnProperty("display")?e.display:null,f.style.display=ld("display",e));else if(6===a.tag)a.stateNode.nodeValue=d?"":a.memoizedProps;else if(13===a.tag&&null!==a.memoizedState&&null===a.memoizedState.dehydrated){f=a.child.sibling;f.return=a;a=
f;continue}else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===c)break;for(;null===a.sibling;){if(null===a.return||a.return===c)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}Ui(b);return;case 19:Ui(b);return;case 17:return}throw Error(u(163));}function Ui(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Bi);b.forEach(function(b){var d=Vi.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d))})}}
var Wi="function"===typeof WeakMap?WeakMap:Map;function Xi(a,b,c){c=wg(c,null);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Yi||(Yi=!0,Zi=d);Ci(a,b)};return c}
function $i(a,b,c){c=wg(c,null);c.tag=3;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){Ci(a,b);return d(e)}}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){"function"!==typeof d&&(null===aj?aj=new Set([this]):aj.add(this),Ci(a,b));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:""})});return c}
var bj=Math.ceil,cj=Wa.ReactCurrentDispatcher,dj=Wa.ReactCurrentOwner,V=0,ej=8,fj=16,gj=32,ti=0,hj=1,ij=2,ui=3,vi=4,jj=5,W=V,T=null,X=null,U=0,S=ti,kj=null,lj=1073741823,mj=1073741823,nj=null,wi=0,oj=!1,Ti=0,pj=500,Y=null,Yi=!1,Zi=null,aj=null,qj=!1,rj=null,sj=90,tj=null,uj=0,vj=null,wj=0;function Gg(){return(W&(fj|gj))!==V?1073741821-($f()/10|0):0!==wj?wj:wj=1073741821-($f()/10|0)}
function Hg(a,b,c){b=b.mode;if(0===(b&2))return 1073741823;var d=ag();if(0===(b&4))return 99===d?1073741823:1073741822;if((W&fj)!==V)return U;if(null!==c)a=hg(a,c.timeoutMs|0||5E3,250);else switch(d){case 99:a=1073741823;break;case 98:a=hg(a,150,100);break;case 97:case 96:a=hg(a,5E3,250);break;case 95:a=2;break;default:throw Error(u(326));}null!==T&&a===U&&--a;return a}
function Ig(a,b){if(50<uj)throw uj=0,vj=null,Error(u(185));a=xj(a,b);if(null!==a){var c=ag();1073741823===b?(W&ej)!==V&&(W&(fj|gj))===V?yj(a):(Z(a),W===V&&gg()):Z(a);(W&4)===V||98!==c&&99!==c||(null===tj?tj=new Map([[a,b]]):(c=tj.get(a),(void 0===c||c>b)&&tj.set(a,b)))}}
function xj(a,b){a.expirationTime<b&&(a.expirationTime=b);var c=a.alternate;null!==c&&c.expirationTime<b&&(c.expirationTime=b);var d=a.return,e=null;if(null===d&&3===a.tag)e=a.stateNode;else for(;null!==d;){c=d.alternate;d.childExpirationTime<b&&(d.childExpirationTime=b);null!==c&&c.childExpirationTime<b&&(c.childExpirationTime=b);if(null===d.return&&3===d.tag){e=d.stateNode;break}d=d.return}null!==e&&(T===e&&(Bg(b),S===vi&&xi(e,U)),yi(e,b));return e}
function zj(a){var b=a.lastExpiredTime;if(0!==b)return b;b=a.firstPendingTime;if(!Aj(a,b))return b;var c=a.lastPingedTime;a=a.nextKnownPendingLevel;a=c>a?c:a;return 2>=a&&b!==a?0:a}
function Z(a){if(0!==a.lastExpiredTime)a.callbackExpirationTime=1073741823,a.callbackPriority=99,a.callbackNode=eg(yj.bind(null,a));else{var b=zj(a),c=a.callbackNode;if(0===b)null!==c&&(a.callbackNode=null,a.callbackExpirationTime=0,a.callbackPriority=90);else{var d=Gg();1073741823===b?d=99:1===b||2===b?d=95:(d=10*(1073741821-b)-10*(1073741821-d),d=0>=d?99:250>=d?98:5250>=d?97:95);if(null!==c){var e=a.callbackPriority;if(a.callbackExpirationTime===b&&e>=d)return;c!==Tf&&Kf(c)}a.callbackExpirationTime=
b;a.callbackPriority=d;b=1073741823===b?eg(yj.bind(null,a)):dg(d,Bj.bind(null,a),{timeout:10*(1073741821-b)-$f()});a.callbackNode=b}}}
function Bj(a,b){wj=0;if(b)return b=Gg(),Cj(a,b),Z(a),null;var c=zj(a);if(0!==c){b=a.callbackNode;if((W&(fj|gj))!==V)throw Error(u(327));Dj();a===T&&c===U||Ej(a,c);if(null!==X){var d=W;W|=fj;var e=Fj();do try{Gj();break}catch(h){Hj(a,h)}while(1);ng();W=d;cj.current=e;if(S===hj)throw b=kj,Ej(a,c),xi(a,c),Z(a),b;if(null===X)switch(e=a.finishedWork=a.current.alternate,a.finishedExpirationTime=c,d=S,T=null,d){case ti:case hj:throw Error(u(345));case ij:Cj(a,2<c?2:c);break;case ui:xi(a,c);d=a.lastSuspendedTime;
c===d&&(a.nextKnownPendingLevel=Ij(e));if(1073741823===lj&&(e=Ti+pj-$f(),10<e)){if(oj){var f=a.lastPingedTime;if(0===f||f>=c){a.lastPingedTime=c;Ej(a,c);break}}f=zj(a);if(0!==f&&f!==c)break;if(0!==d&&d!==c){a.lastPingedTime=d;break}a.timeoutHandle=Hd(Jj.bind(null,a),e);break}Jj(a);break;case vi:xi(a,c);d=a.lastSuspendedTime;c===d&&(a.nextKnownPendingLevel=Ij(e));if(oj&&(e=a.lastPingedTime,0===e||e>=c)){a.lastPingedTime=c;Ej(a,c);break}e=zj(a);if(0!==e&&e!==c)break;if(0!==d&&d!==c){a.lastPingedTime=
d;break}1073741823!==mj?d=10*(1073741821-mj)-$f():1073741823===lj?d=0:(d=10*(1073741821-lj)-5E3,e=$f(),c=10*(1073741821-c)-e,d=e-d,0>d&&(d=0),d=(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*bj(d/1960))-d,c<d&&(d=c));if(10<d){a.timeoutHandle=Hd(Jj.bind(null,a),d);break}Jj(a);break;case jj:if(1073741823!==lj&&null!==nj){f=lj;var g=nj;d=g.busyMinDurationMs|0;0>=d?d=0:(e=g.busyDelayMs|0,f=$f()-(10*(1073741821-f)-(g.timeoutMs|0||5E3)),d=f<=e?0:e+d-f);if(10<d){xi(a,c);a.timeoutHandle=
Hd(Jj.bind(null,a),d);break}}Jj(a);break;default:throw Error(u(329));}Z(a);if(a.callbackNode===b)return Bj.bind(null,a)}}return null}
function yj(a){var b=a.lastExpiredTime;b=0!==b?b:1073741823;if((W&(fj|gj))!==V)throw Error(u(327));Dj();a===T&&b===U||Ej(a,b);if(null!==X){var c=W;W|=fj;var d=Fj();do try{Kj();break}catch(e){Hj(a,e)}while(1);ng();W=c;cj.current=d;if(S===hj)throw c=kj,Ej(a,b),xi(a,b),Z(a),c;if(null!==X)throw Error(u(261));a.finishedWork=a.current.alternate;a.finishedExpirationTime=b;T=null;Jj(a);Z(a)}return null}function Lj(){if(null!==tj){var a=tj;tj=null;a.forEach(function(a,c){Cj(c,a);Z(c)});gg()}}
function Mj(a,b){var c=W;W|=1;try{return a(b)}finally{W=c,W===V&&gg()}}function Nj(a,b){var c=W;W&=-2;W|=ej;try{return a(b)}finally{W=c,W===V&&gg()}}
function Ej(a,b){a.finishedWork=null;a.finishedExpirationTime=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,Id(c));if(null!==X)for(c=X.return;null!==c;){var d=c;switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&Df();break;case 3:eh();H(K);H(J);break;case 5:gh(d);break;case 4:eh();break;case 13:H(M);break;case 19:H(M);break;case 10:og(d)}c=c.return}T=a;X=Sg(a.current,null);U=b;S=ti;kj=null;mj=lj=1073741823;nj=null;wi=0;oj=!1}
function Hj(a,b){do{try{ng();jh.current=sh;if(mh)for(var c=N.memoizedState;null!==c;){var d=c.queue;null!==d&&(d.pending=null);c=c.next}lh=0;P=O=N=null;mh=!1;if(null===X||null===X.return)return S=hj,kj=b,X=null;a:{var e=a,f=X.return,g=X,h=b;b=U;g.effectTag|=2048;g.firstEffect=g.lastEffect=null;if(null!==h&&"object"===typeof h&&"function"===typeof h.then){var k=h;if(0===(g.mode&2)){var l=g.alternate;l?(g.updateQueue=l.updateQueue,g.memoizedState=l.memoizedState,g.expirationTime=l.expirationTime):(g.updateQueue=
null,g.memoizedState=null)}var m=0!==(M.current&1),p=f;do{var x;if(x=13===p.tag){var z=p.memoizedState;if(null!==z)x=null!==z.dehydrated?!0:!1;else{var ca=p.memoizedProps;x=void 0===ca.fallback?!1:!0!==ca.unstable_avoidThisFallback?!0:m?!1:!0}}if(x){var D=p.updateQueue;if(null===D){var t=new Set;t.add(k);p.updateQueue=t}else D.add(k);if(0===(p.mode&2)){p.effectTag|=64;g.effectTag&=-2981;if(1===g.tag)if(null===g.alternate)g.tag=17;else{var y=wg(1073741823,null);y.tag=2;xg(g,y)}g.expirationTime=1073741823;
break a}h=void 0;g=b;var A=e.pingCache;null===A?(A=e.pingCache=new Wi,h=new Set,A.set(k,h)):(h=A.get(k),void 0===h&&(h=new Set,A.set(k,h)));if(!h.has(g)){h.add(g);var q=Oj.bind(null,e,k,g);k.then(q,q)}p.effectTag|=4096;p.expirationTime=b;break a}p=p.return}while(null!==p);h=Error((pb(g.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+qb(g))}S!==
jj&&(S=ij);h=Ai(h,g);p=f;do{switch(p.tag){case 3:k=h;p.effectTag|=4096;p.expirationTime=b;var B=Xi(p,k,b);yg(p,B);break a;case 1:k=h;var w=p.type,ub=p.stateNode;if(0===(p.effectTag&64)&&("function"===typeof w.getDerivedStateFromError||null!==ub&&"function"===typeof ub.componentDidCatch&&(null===aj||!aj.has(ub)))){p.effectTag|=4096;p.expirationTime=b;var vb=$i(p,k,b);yg(p,vb);break a}}p=p.return}while(null!==p)}X=Pj(X)}catch(Xc){b=Xc;continue}break}while(1)}
function Fj(){var a=cj.current;cj.current=sh;return null===a?sh:a}function Ag(a,b){a<lj&&2<a&&(lj=a);null!==b&&a<mj&&2<a&&(mj=a,nj=b)}function Bg(a){a>wi&&(wi=a)}function Kj(){for(;null!==X;)X=Qj(X)}function Gj(){for(;null!==X&&!Uf();)X=Qj(X)}function Qj(a){var b=Rj(a.alternate,a,U);a.memoizedProps=a.pendingProps;null===b&&(b=Pj(a));dj.current=null;return b}
function Pj(a){X=a;do{var b=X.alternate;a=X.return;if(0===(X.effectTag&2048)){b=si(b,X,U);if(1===U||1!==X.childExpirationTime){for(var c=0,d=X.child;null!==d;){var e=d.expirationTime,f=d.childExpirationTime;e>c&&(c=e);f>c&&(c=f);d=d.sibling}X.childExpirationTime=c}if(null!==b)return b;null!==a&&0===(a.effectTag&2048)&&(null===a.firstEffect&&(a.firstEffect=X.firstEffect),null!==X.lastEffect&&(null!==a.lastEffect&&(a.lastEffect.nextEffect=X.firstEffect),a.lastEffect=X.lastEffect),1<X.effectTag&&(null!==
a.lastEffect?a.lastEffect.nextEffect=X:a.firstEffect=X,a.lastEffect=X))}else{b=zi(X);if(null!==b)return b.effectTag&=2047,b;null!==a&&(a.firstEffect=a.lastEffect=null,a.effectTag|=2048)}b=X.sibling;if(null!==b)return b;X=a}while(null!==X);S===ti&&(S=jj);return null}function Ij(a){var b=a.expirationTime;a=a.childExpirationTime;return b>a?b:a}function Jj(a){var b=ag();cg(99,Sj.bind(null,a,b));return null}
function Sj(a,b){do Dj();while(null!==rj);if((W&(fj|gj))!==V)throw Error(u(327));var c=a.finishedWork,d=a.finishedExpirationTime;if(null===c)return null;a.finishedWork=null;a.finishedExpirationTime=0;if(c===a.current)throw Error(u(177));a.callbackNode=null;a.callbackExpirationTime=0;a.callbackPriority=90;a.nextKnownPendingLevel=0;var e=Ij(c);a.firstPendingTime=e;d<=a.lastSuspendedTime?a.firstSuspendedTime=a.lastSuspendedTime=a.nextKnownPendingLevel=0:d<=a.firstSuspendedTime&&(a.firstSuspendedTime=
d-1);d<=a.lastPingedTime&&(a.lastPingedTime=0);d<=a.lastExpiredTime&&(a.lastExpiredTime=0);a===T&&(X=T=null,U=0);1<c.effectTag?null!==c.lastEffect?(c.lastEffect.nextEffect=c,e=c.firstEffect):e=c:e=c.firstEffect;if(null!==e){var f=W;W|=gj;dj.current=null;Dd=fd;var g=xd();if(yd(g)){if("selectionStart"in g)var h={start:g.selectionStart,end:g.selectionEnd};else a:{h=(h=g.ownerDocument)&&h.defaultView||window;var k=h.getSelection&&h.getSelection();if(k&&0!==k.rangeCount){h=k.anchorNode;var l=k.anchorOffset,
m=k.focusNode;k=k.focusOffset;try{h.nodeType,m.nodeType}catch(wb){h=null;break a}var p=0,x=-1,z=-1,ca=0,D=0,t=g,y=null;b:for(;;){for(var A;;){t!==h||0!==l&&3!==t.nodeType||(x=p+l);t!==m||0!==k&&3!==t.nodeType||(z=p+k);3===t.nodeType&&(p+=t.nodeValue.length);if(null===(A=t.firstChild))break;y=t;t=A}for(;;){if(t===g)break b;y===h&&++ca===l&&(x=p);y===m&&++D===k&&(z=p);if(null!==(A=t.nextSibling))break;t=y;y=t.parentNode}t=A}h=-1===x||-1===z?null:{start:x,end:z}}else h=null}h=h||{start:0,end:0}}else h=
null;Ed={activeElementDetached:null,focusedElem:g,selectionRange:h};fd=!1;Y=e;do try{Tj()}catch(wb){if(null===Y)throw Error(u(330));Ei(Y,wb);Y=Y.nextEffect}while(null!==Y);Y=e;do try{for(g=a,h=b;null!==Y;){var q=Y.effectTag;q&16&&Rb(Y.stateNode,"");if(q&128){var B=Y.alternate;if(null!==B){var w=B.ref;null!==w&&("function"===typeof w?w(null):w.current=null)}}switch(q&1038){case 2:Pi(Y);Y.effectTag&=-3;break;case 6:Pi(Y);Y.effectTag&=-3;Si(Y.alternate,Y);break;case 1024:Y.effectTag&=-1025;break;case 1028:Y.effectTag&=
-1025;Si(Y.alternate,Y);break;case 4:Si(Y.alternate,Y);break;case 8:l=Y,Mi(g,l,h),Ni(l)}Y=Y.nextEffect}}catch(wb){if(null===Y)throw Error(u(330));Ei(Y,wb);Y=Y.nextEffect}while(null!==Y);w=Ed;B=xd();q=w.focusedElem;h=w.selectionRange;if(B!==q&&q&&q.ownerDocument&&wd(q.ownerDocument.documentElement,q)){null!==h&&yd(q)&&(B=h.start,w=h.end,void 0===w&&(w=B),"selectionStart"in q?(q.selectionStart=B,q.selectionEnd=Math.min(w,q.value.length)):(w=(B=q.ownerDocument||document)&&B.defaultView||window,w.getSelection&&
(w=w.getSelection(),l=q.textContent.length,g=Math.min(h.start,l),h=void 0===h.end?g:Math.min(h.end,l),!w.extend&&g>h&&(l=h,h=g,g=l),l=vd(q,g),m=vd(q,h),l&&m&&(1!==w.rangeCount||w.anchorNode!==l.node||w.anchorOffset!==l.offset||w.focusNode!==m.node||w.focusOffset!==m.offset)&&(B=B.createRange(),B.setStart(l.node,l.offset),w.removeAllRanges(),g>h?(w.addRange(B),w.extend(m.node,m.offset)):(B.setEnd(m.node,m.offset),w.addRange(B))))));B=[];for(w=q;w=w.parentNode;)1===w.nodeType&&B.push({element:w,left:w.scrollLeft,
top:w.scrollTop});"function"===typeof q.focus&&q.focus();for(q=0;q<B.length;q++)w=B[q],w.element.scrollLeft=w.left,w.element.scrollTop=w.top}fd=!!Dd;Ed=Dd=null;a.current=c;Y=e;do try{for(q=a;null!==Y;){var ub=Y.effectTag;ub&36&&Ji(q,Y.alternate,Y);if(ub&128){B=void 0;var vb=Y.ref;if(null!==vb){var Xc=Y.stateNode;switch(Y.tag){case 5:B=Xc;break;default:B=Xc}"function"===typeof vb?vb(B):vb.current=B}}Y=Y.nextEffect}}catch(wb){if(null===Y)throw Error(u(330));Ei(Y,wb);Y=Y.nextEffect}while(null!==Y);Y=
null;Vf();W=f}else a.current=c;if(qj)qj=!1,rj=a,sj=b;else for(Y=e;null!==Y;)b=Y.nextEffect,Y.nextEffect=null,Y=b;b=a.firstPendingTime;0===b&&(aj=null);1073741823===b?a===vj?uj++:(uj=0,vj=a):uj=0;"function"===typeof Uj&&Uj(c.stateNode,d);Z(a);if(Yi)throw Yi=!1,a=Zi,Zi=null,a;if((W&ej)!==V)return null;gg();return null}function Tj(){for(;null!==Y;){var a=Y.effectTag;0!==(a&256)&&Gi(Y.alternate,Y);0===(a&512)||qj||(qj=!0,dg(97,function(){Dj();return null}));Y=Y.nextEffect}}
function Dj(){if(90!==sj){var a=97<sj?97:sj;sj=90;return cg(a,Vj)}}function Vj(){if(null===rj)return!1;var a=rj;rj=null;if((W&(fj|gj))!==V)throw Error(u(331));var b=W;W|=gj;for(a=a.current.firstEffect;null!==a;){try{var c=a;if(0!==(c.effectTag&512))switch(c.tag){case 0:case 11:case 15:case 22:Hi(5,c),Ii(5,c)}}catch(d){if(null===a)throw Error(u(330));Ei(a,d)}c=a.nextEffect;a.nextEffect=null;a=c}W=b;gg();return!0}
function Wj(a,b,c){b=Ai(c,b);b=Xi(a,b,1073741823);xg(a,b);a=xj(a,1073741823);null!==a&&Z(a)}function Ei(a,b){if(3===a.tag)Wj(a,a,b);else for(var c=a.return;null!==c;){if(3===c.tag){Wj(c,a,b);break}else if(1===c.tag){var d=c.stateNode;if("function"===typeof c.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===aj||!aj.has(d))){a=Ai(b,a);a=$i(c,a,1073741823);xg(c,a);c=xj(c,1073741823);null!==c&&Z(c);break}}c=c.return}}
function Oj(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);T===a&&U===c?S===vi||S===ui&&1073741823===lj&&$f()-Ti<pj?Ej(a,U):oj=!0:Aj(a,c)&&(b=a.lastPingedTime,0!==b&&b<c||(a.lastPingedTime=c,Z(a)))}function Vi(a,b){var c=a.stateNode;null!==c&&c.delete(b);b=0;0===b&&(b=Gg(),b=Hg(b,a,null));a=xj(a,b);null!==a&&Z(a)}var Rj;
Rj=function(a,b,c){var d=b.expirationTime;if(null!==a){var e=b.pendingProps;if(a.memoizedProps!==e||K.current)rg=!0;else{if(d<c){rg=!1;switch(b.tag){case 3:hi(b);Xh();break;case 5:fh(b);if(b.mode&4&&1!==c&&e.hidden)return b.expirationTime=b.childExpirationTime=1,null;break;case 1:L(b.type)&&Gf(b);break;case 4:dh(b,b.stateNode.containerInfo);break;case 10:d=b.memoizedProps.value;e=b.type._context;I(jg,e._currentValue);e._currentValue=d;break;case 13:if(null!==b.memoizedState){d=b.child.childExpirationTime;
if(0!==d&&d>=c)return ji(a,b,c);I(M,M.current&1);b=$h(a,b,c);return null!==b?b.sibling:null}I(M,M.current&1);break;case 19:d=b.childExpirationTime>=c;if(0!==(a.effectTag&64)){if(d)return mi(a,b,c);b.effectTag|=64}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null);I(M,M.current);if(!d)return null}return $h(a,b,c)}rg=!1}}else rg=!1;b.expirationTime=0;switch(b.tag){case 2:d=b.type;null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2);a=b.pendingProps;e=Cf(b,J.current);qg(b,c);e=oh(null,
b,d,a,e,c);b.effectTag|=1;if("object"===typeof e&&null!==e&&"function"===typeof e.render&&void 0===e.$$typeof){b.tag=1;b.memoizedState=null;b.updateQueue=null;if(L(d)){var f=!0;Gf(b)}else f=!1;b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null;ug(b);var g=d.getDerivedStateFromProps;"function"===typeof g&&Fg(b,d,g,a);e.updater=Jg;b.stateNode=e;e._reactInternalFiber=b;Ng(b,d,a,c);b=gi(null,b,d,!0,f,c)}else b.tag=0,R(null,b,e,c),b=b.child;return b;case 16:a:{e=b.elementType;null!==a&&(a.alternate=
null,b.alternate=null,b.effectTag|=2);a=b.pendingProps;ob(e);if(1!==e._status)throw e._result;e=e._result;b.type=e;f=b.tag=Xj(e);a=ig(e,a);switch(f){case 0:b=di(null,b,e,a,c);break a;case 1:b=fi(null,b,e,a,c);break a;case 11:b=Zh(null,b,e,a,c);break a;case 14:b=ai(null,b,e,ig(e.type,a),d,c);break a}throw Error(u(306,e,""));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),di(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),fi(a,b,d,e,c);
case 3:hi(b);d=b.updateQueue;if(null===a||null===d)throw Error(u(282));d=b.pendingProps;e=b.memoizedState;e=null!==e?e.element:null;vg(a,b);zg(b,d,null,c);d=b.memoizedState.element;if(d===e)Xh(),b=$h(a,b,c);else{if(e=b.stateNode.hydrate)Ph=Jd(b.stateNode.containerInfo.firstChild),Oh=b,e=Qh=!0;if(e)for(c=Yg(b,null,d,c),b.child=c;c;)c.effectTag=c.effectTag&-3|1024,c=c.sibling;else R(a,b,d,c),Xh();b=b.child}return b;case 5:return fh(b),null===a&&Uh(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:
null,g=e.children,Gd(d,e)?g=null:null!==f&&Gd(d,f)&&(b.effectTag|=16),ei(a,b),b.mode&4&&1!==c&&e.hidden?(b.expirationTime=b.childExpirationTime=1,b=null):(R(a,b,g,c),b=b.child),b;case 6:return null===a&&Uh(b),null;case 13:return ji(a,b,c);case 4:return dh(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Xg(b,null,d,c):R(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),Zh(a,b,d,e,c);case 7:return R(a,b,b.pendingProps,c),b.child;case 8:return R(a,
b,b.pendingProps.children,c),b.child;case 12:return R(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;g=b.memoizedProps;f=e.value;var h=b.type._context;I(jg,h._currentValue);h._currentValue=f;if(null!==g)if(h=g.value,f=$e(h,f)?0:("function"===typeof d._calculateChangedBits?d._calculateChangedBits(h,f):1073741823)|0,0===f){if(g.children===e.children&&!K.current){b=$h(a,b,c);break a}}else for(h=b.child,null!==h&&(h.return=b);null!==h;){var k=h.dependencies;if(null!==
k){g=h.child;for(var l=k.firstContext;null!==l;){if(l.context===d&&0!==(l.observedBits&f)){1===h.tag&&(l=wg(c,null),l.tag=2,xg(h,l));h.expirationTime<c&&(h.expirationTime=c);l=h.alternate;null!==l&&l.expirationTime<c&&(l.expirationTime=c);pg(h.return,c);k.expirationTime<c&&(k.expirationTime=c);break}l=l.next}}else g=10===h.tag?h.type===b.type?null:h.child:h.child;if(null!==g)g.return=h;else for(g=h;null!==g;){if(g===b){g=null;break}h=g.sibling;if(null!==h){h.return=g.return;g=h;break}g=g.return}h=
g}R(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,f=b.pendingProps,d=f.children,qg(b,c),e=sg(e,f.unstable_observedBits),d=d(e),b.effectTag|=1,R(a,b,d,c),b.child;case 14:return e=b.type,f=ig(e,b.pendingProps),f=ig(e.type,f),ai(a,b,e,f,d,c);case 15:return ci(a,b,b.type,b.pendingProps,d,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),b.tag=1,L(d)?(a=!0,Gf(b)):a=!1,qg(b,c),Lg(b,d,e),Ng(b,d,e,c),gi(null,
b,d,!0,a,c);case 19:return mi(a,b,c)}throw Error(u(156,b.tag));};var Uj=null,Li=null;function Yj(a){if("undefined"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var b=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(b.isDisabled||!b.supportsFiber)return!0;try{var c=b.inject(a);Uj=function(a){try{b.onCommitFiberRoot(c,a,void 0,64===(a.current.effectTag&64))}catch(e){}};Li=function(a){try{b.onCommitFiberUnmount(c,a)}catch(e){}}}catch(d){}return!0}
function Zj(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.effectTag=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.childExpirationTime=this.expirationTime=0;this.alternate=null}function Sh(a,b,c,d){return new Zj(a,b,c,d)}
function bi(a){a=a.prototype;return!(!a||!a.isReactComponent)}function Xj(a){if("function"===typeof a)return bi(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===gb)return 11;if(a===jb)return 14}return 2}
function Sg(a,b){var c=a.alternate;null===c?(c=Sh(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.effectTag=0,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null);c.childExpirationTime=a.childExpirationTime;c.expirationTime=a.expirationTime;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{expirationTime:b.expirationTime,
firstContext:b.firstContext,responders:b.responders};c.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}
function Ug(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)bi(a)&&(g=1);else if("string"===typeof a)g=5;else a:switch(a){case ab:return Wg(c.children,e,f,b);case fb:g=8;e|=7;break;case bb:g=8;e|=1;break;case cb:return a=Sh(12,c,b,e|8),a.elementType=cb,a.type=cb,a.expirationTime=f,a;case hb:return a=Sh(13,c,b,e),a.type=hb,a.elementType=hb,a.expirationTime=f,a;case ib:return a=Sh(19,c,b,e),a.elementType=ib,a.expirationTime=f,a;default:if("object"===typeof a&&null!==a)switch(a.$$typeof){case db:g=
10;break a;case eb:g=9;break a;case gb:g=11;break a;case jb:g=14;break a;case kb:g=16;d=null;break a;case lb:g=22;break a}throw Error(u(130,null==a?a:typeof a,""));}b=Sh(g,c,b,e);b.elementType=a;b.type=d;b.expirationTime=f;return b}function Wg(a,b,c,d){a=Sh(7,a,d,b);a.expirationTime=c;return a}function Tg(a,b,c){a=Sh(6,a,null,b);a.expirationTime=c;return a}
function Vg(a,b,c){b=Sh(4,null!==a.children?a.children:[],a.key,b);b.expirationTime=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}
function ak(a,b,c){this.tag=b;this.current=null;this.containerInfo=a;this.pingCache=this.pendingChildren=null;this.finishedExpirationTime=0;this.finishedWork=null;this.timeoutHandle=-1;this.pendingContext=this.context=null;this.hydrate=c;this.callbackNode=null;this.callbackPriority=90;this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}
function Aj(a,b){var c=a.firstSuspendedTime;a=a.lastSuspendedTime;return 0!==c&&c>=b&&a<=b}function xi(a,b){var c=a.firstSuspendedTime,d=a.lastSuspendedTime;c<b&&(a.firstSuspendedTime=b);if(d>b||0===c)a.lastSuspendedTime=b;b<=a.lastPingedTime&&(a.lastPingedTime=0);b<=a.lastExpiredTime&&(a.lastExpiredTime=0)}
function yi(a,b){b>a.firstPendingTime&&(a.firstPendingTime=b);var c=a.firstSuspendedTime;0!==c&&(b>=c?a.firstSuspendedTime=a.lastSuspendedTime=a.nextKnownPendingLevel=0:b>=a.lastSuspendedTime&&(a.lastSuspendedTime=b+1),b>a.nextKnownPendingLevel&&(a.nextKnownPendingLevel=b))}function Cj(a,b){var c=a.lastExpiredTime;if(0===c||c>b)a.lastExpiredTime=b}
function bk(a,b,c,d){var e=b.current,f=Gg(),g=Dg.suspense;f=Hg(f,e,g);a:if(c){c=c._reactInternalFiber;b:{if(dc(c)!==c||1!==c.tag)throw Error(u(170));var h=c;do{switch(h.tag){case 3:h=h.stateNode.context;break b;case 1:if(L(h.type)){h=h.stateNode.__reactInternalMemoizedMergedChildContext;break b}}h=h.return}while(null!==h);throw Error(u(171));}if(1===c.tag){var k=c.type;if(L(k)){c=Ff(c,k,h);break a}}c=h}else c=Af;null===b.context?b.context=c:b.pendingContext=c;b=wg(f,g);b.payload={element:a};d=void 0===
d?null:d;null!==d&&(b.callback=d);xg(e,b);Ig(e,f);return f}function ck(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function dk(a,b){a=a.memoizedState;null!==a&&null!==a.dehydrated&&a.retryTime<b&&(a.retryTime=b)}function ek(a,b){dk(a,b);(a=a.alternate)&&dk(a,b)}
function fk(a,b,c){c=null!=c&&!0===c.hydrate;var d=new ak(a,b,c),e=Sh(3,null,null,2===b?7:1===b?3:0);d.current=e;e.stateNode=d;ug(e);a[Od]=d.current;c&&0!==b&&Jc(a,9===a.nodeType?a:a.ownerDocument);this._internalRoot=d}fk.prototype.render=function(a){bk(a,this._internalRoot,null,null)};fk.prototype.unmount=function(){var a=this._internalRoot,b=a.containerInfo;bk(null,a,null,function(){b[Od]=null})};
function gk(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}function hk(a,b){b||(b=a?9===a.nodeType?a.documentElement:a.firstChild:null,b=!(!b||1!==b.nodeType||!b.hasAttribute("data-reactroot")));if(!b)for(var c;c=a.lastChild;)a.removeChild(c);return new fk(a,0,b?{hydrate:!0}:void 0)}
function ik(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f._internalRoot;if("function"===typeof e){var h=e;e=function(){var a=ck(g);h.call(a)}}bk(b,g,a,e)}else{f=c._reactRootContainer=hk(c,d);g=f._internalRoot;if("function"===typeof e){var k=e;e=function(){var a=ck(g);k.call(a)}}Nj(function(){bk(b,g,a,e)})}return ck(g)}function jk(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:$a,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}
wc=function(a){if(13===a.tag){var b=hg(Gg(),150,100);Ig(a,b);ek(a,b)}};xc=function(a){13===a.tag&&(Ig(a,3),ek(a,3))};yc=function(a){if(13===a.tag){var b=Gg();b=Hg(b,a,null);Ig(a,b);ek(a,b)}};
za=function(a,b,c){switch(b){case "input":Cb(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+'][type="radio"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Qd(d);if(!e)throw Error(u(90));yb(d);Cb(d,e)}}}break;case "textarea":Kb(a,c);break;case "select":b=c.value,null!=b&&Hb(a,!!c.multiple,b,!1)}};Fa=Mj;
Ga=function(a,b,c,d,e){var f=W;W|=4;try{return cg(98,a.bind(null,b,c,d,e))}finally{W=f,W===V&&gg()}};Ha=function(){(W&(1|fj|gj))===V&&(Lj(),Dj())};Ia=function(a,b){var c=W;W|=2;try{return a(b)}finally{W=c,W===V&&gg()}};function kk(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!gk(b))throw Error(u(200));return jk(a,b,null,c)}var lk={Events:[Nc,Pd,Qd,xa,ta,Xd,function(a){jc(a,Wd)},Da,Ea,id,mc,Dj,{current:!1}]};
(function(a){var b=a.findFiberByHostInstance;return Yj(n({},a,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Wa.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=hc(a);return null===a?null:a.stateNode},findFiberByHostInstance:function(a){return b?b(a):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}))})({findFiberByHostInstance:tc,bundleType:0,version:"16.13.1",
rendererPackageName:"react-dom"});exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=lk;exports.createPortal=kk;exports.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternalFiber;if(void 0===b){if("function"===typeof a.render)throw Error(u(188));throw Error(u(268,Object.keys(a)));}a=hc(b);a=null===a?null:a.stateNode;return a};
exports.flushSync=function(a,b){if((W&(fj|gj))!==V)throw Error(u(187));var c=W;W|=1;try{return cg(99,a.bind(null,b))}finally{W=c,gg()}};exports.hydrate=function(a,b,c){if(!gk(b))throw Error(u(200));return ik(null,a,b,!0,c)};exports.render=function(a,b,c){if(!gk(b))throw Error(u(200));return ik(null,a,b,!1,c)};
exports.unmountComponentAtNode=function(a){if(!gk(a))throw Error(u(40));return a._reactRootContainer?(Nj(function(){ik(null,null,a,!1,function(){a._reactRootContainer=null;a[Od]=null})}),!0):!1};exports.unstable_batchedUpdates=Mj;exports.unstable_createPortal=function(a,b){return kk(a,b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)};
exports.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!gk(c))throw Error(u(200));if(null==a||void 0===a._reactInternalFiber)throw Error(u(38));return ik(a,b,c,!1,d)};exports.version="16.13.1";


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (true) {
  module.exports = __webpack_require__(35);
} else {}


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var f,g,h,k,l;
if("undefined"===typeof window||"function"!==typeof MessageChannel){var p=null,q=null,t=function(){if(null!==p)try{var a=exports.unstable_now();p(!0,a);p=null}catch(b){throw setTimeout(t,0),b;}},u=Date.now();exports.unstable_now=function(){return Date.now()-u};f=function(a){null!==p?setTimeout(f,0,a):(p=a,setTimeout(t,0))};g=function(a,b){q=setTimeout(a,b)};h=function(){clearTimeout(q)};k=function(){return!1};l=exports.unstable_forceFrameRate=function(){}}else{var w=window.performance,x=window.Date,
y=window.setTimeout,z=window.clearTimeout;if("undefined"!==typeof console){var A=window.cancelAnimationFrame;"function"!==typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");"function"!==typeof A&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"===
typeof w&&"function"===typeof w.now)exports.unstable_now=function(){return w.now()};else{var B=x.now();exports.unstable_now=function(){return x.now()-B}}var C=!1,D=null,E=-1,F=5,G=0;k=function(){return exports.unstable_now()>=G};l=function(){};exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):F=0<a?Math.floor(1E3/a):5};var H=new MessageChannel,I=H.port2;H.port1.onmessage=
function(){if(null!==D){var a=exports.unstable_now();G=a+F;try{D(!0,a)?I.postMessage(null):(C=!1,D=null)}catch(b){throw I.postMessage(null),b;}}else C=!1};f=function(a){D=a;C||(C=!0,I.postMessage(null))};g=function(a,b){E=y(function(){a(exports.unstable_now())},b)};h=function(){z(E);E=-1}}function J(a,b){var c=a.length;a.push(b);a:for(;;){var d=c-1>>>1,e=a[d];if(void 0!==e&&0<K(e,b))a[d]=b,a[c]=e,c=d;else break a}}function L(a){a=a[0];return void 0===a?null:a}
function M(a){var b=a[0];if(void 0!==b){var c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length;d<e;){var m=2*(d+1)-1,n=a[m],v=m+1,r=a[v];if(void 0!==n&&0>K(n,c))void 0!==r&&0>K(r,n)?(a[d]=r,a[v]=c,d=v):(a[d]=n,a[m]=c,d=m);else if(void 0!==r&&0>K(r,c))a[d]=r,a[v]=c,d=v;else break a}}return b}return null}function K(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}var N=[],O=[],P=1,Q=null,R=3,S=!1,T=!1,U=!1;
function V(a){for(var b=L(O);null!==b;){if(null===b.callback)M(O);else if(b.startTime<=a)M(O),b.sortIndex=b.expirationTime,J(N,b);else break;b=L(O)}}function W(a){U=!1;V(a);if(!T)if(null!==L(N))T=!0,f(X);else{var b=L(O);null!==b&&g(W,b.startTime-a)}}
function X(a,b){T=!1;U&&(U=!1,h());S=!0;var c=R;try{V(b);for(Q=L(N);null!==Q&&(!(Q.expirationTime>b)||a&&!k());){var d=Q.callback;if(null!==d){Q.callback=null;R=Q.priorityLevel;var e=d(Q.expirationTime<=b);b=exports.unstable_now();"function"===typeof e?Q.callback=e:Q===L(N)&&M(N);V(b)}else M(N);Q=L(N)}if(null!==Q)var m=!0;else{var n=L(O);null!==n&&g(W,n.startTime-b);m=!1}return m}finally{Q=null,R=c,S=!1}}
function Y(a){switch(a){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1E4;default:return 5E3}}var Z=l;exports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){T||S||(T=!0,f(X))};
exports.unstable_getCurrentPriorityLevel=function(){return R};exports.unstable_getFirstCallbackNode=function(){return L(N)};exports.unstable_next=function(a){switch(R){case 1:case 2:case 3:var b=3;break;default:b=R}var c=R;R=b;try{return a()}finally{R=c}};exports.unstable_pauseExecution=function(){};exports.unstable_requestPaint=Z;exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=R;R=a;try{return b()}finally{R=c}};
exports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();if("object"===typeof c&&null!==c){var e=c.delay;e="number"===typeof e&&0<e?d+e:d;c="number"===typeof c.timeout?c.timeout:Y(a)}else c=Y(a),e=d;c=e+c;a={id:P++,callback:b,priorityLevel:a,startTime:e,expirationTime:c,sortIndex:-1};e>d?(a.sortIndex=e,J(O,a),null===L(N)&&a===L(O)&&(U?h():U=!0,g(W,e-d))):(a.sortIndex=c,J(N,a),T||S||(T=!0,f(X)));return a};
exports.unstable_shouldYield=function(){var a=exports.unstable_now();V(a);var b=L(N);return b!==Q&&null!==Q&&null!==b&&null!==b.callback&&b.startTime<=a&&b.expirationTime<Q.expirationTime||k()};exports.unstable_wrapCallback=function(a){var b=R;return function(){var c=R;R=b;try{return a.apply(this,arguments)}finally{R=c}}};


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(26);
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),
/* 37 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

var api = __webpack_require__(29);
            var content = __webpack_require__(39);

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.i, content, '']];
            }

var options = {};

options.insert = "head";
options.singleton = false;

var update = api(content, options);

var exported = content.locals ? content.locals : {};



module.exports = exported;

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(30);
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "#app{max-width:900px;margin:0 auto}.pull-right{float:right}.calc-ui{box-sizing:border-box}.calc-ui .gui-line{font-family:monospace}.calc-ui .gui-line.unit-complete input{font-family:monospace;font-size:inherit;border:1px solid gray;padding:4px}.calc-ui .gui-line.unit-complete .prompt,.calc-ui .gui-line.unit-complete .inline-response{padding-top:4px;padding-bottom:4px}.calc-ui .gui-line.unit-complete .inline-query,.calc-ui .gui-line.unit-complete .inline-response{display:inline-block;vertical-align:text-top}.calc-ui .gui-line.unit-complete .dropdown-menu{margin:0;list-style:none;padding-left:0;padding:1ex;position:absolute;max-height:300px;background-color:white;border:1px solid black;box-shadow:5px 5px 5px rgba(0,0,0,0.3);overflow-y:auto;border-radius:5px}.tagged-string-display{font-family:monospace;white-space:pre-wrap}a.unit-href,a.unit-href:visited,a.unit-href:hover,a.unit-href:active{color:#00e}.gnu-units-categorize ::selection{background-color:#cff}.gnu-rewrite-test{white-space:pre}.gnu-rewrite-test .clickable{cursor:pointer}.gnu-rewrite-test ul.table-of-contents{list-style:none}.gnu-rewrite-test ul.table-of-contents .toc-line{text-indent:-2em;padding-left:2em}.gnu-rewrite-test .deleted-box{font-style:italic;color:gray}.gnu-rewrite-test .normal-box{display:inline-block}.gnu-rewrite-test .normal-box.well{margin-bottom:0}.gnu-rewrite-test .normal-box td{padding:8px}.gnu-rewrite-test .normal-box .content,.gnu-rewrite-test .normal-box .comment{float:left}.gnu-rewrite-test .normal-box .comment{margin-left:1em;margin-bottom:0}\n", ""]);
// Exports
module.exports = exports;


/***/ }),
/* 40 */,
/* 41 */,
/* 42 */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(70);
var enumBugKeys = __webpack_require__(54);

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),
/* 44 */
/***/ (function(module, exports) {

module.exports = true;


/***/ }),
/* 45 */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),
/* 46 */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 47 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__dirname) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return init; });
/* harmony import */ var _load__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(65);
/* harmony import */ var _globalScope__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(10);
/* harmony import */ var _functions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(85);



let inited = false;
function init() {
    if (inited)
        return;
    inited = true;
    console.log("TOF", typeof navigator);
    let customData;
    let gnuUnitsData;
    if (typeof navigator !== "undefined" &&
        navigator.product === "ReactNative") {
        console.log("react native");
        gnuUnitsData = __webpack_require__(78);
        customData = __webpack_require__(136).text; // todo
    }
    else if (typeof window === "undefined") {
        // running in node
        console.log("node");
        const fs = __webpack_require__(137);
        gnuUnitsData = JSON.parse(fs.readFileSync(__dirname + "/../../data/gnu-units.json", "utf8"));
        customData = fs.readFileSync(__dirname + "/../../data/custom_data.txt", "utf8");
    }
    else {
        console.log("webpack");
        // running in webpack
        gnuUnitsData = __webpack_require__(78);
        customData = __webpack_require__(138).default;
    }
    console.log(customData);
    _globalScope__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].addFunctions(..._functions__WEBPACK_IMPORTED_MODULE_2__[/* internalFunctions */ "a"]);
    _load__WEBPACK_IMPORTED_MODULE_0__[/* loadUnitsJson */ "a"](_globalScope__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"], "units.json", gnuUnitsData);
    _load__WEBPACK_IMPORTED_MODULE_0__[/* loadUnitsTxt */ "b"](_globalScope__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"], "custom_data.txt", customData, true);
}

/* WEBPACK VAR INJECTION */}.call(this, "/"))

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _defineProperty = __webpack_require__(66);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (obj, key, value) {
  if (key in obj) {
    (0, _defineProperty2.default)(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(26);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),
/* 50 */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),
/* 51 */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(53)('keys');
var uid = __webpack_require__(45);
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(17);
var global = __webpack_require__(16);
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: __webpack_require__(44) ? 'pure' : 'global',
  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
});


/***/ }),
/* 54 */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),
/* 55 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(50);
module.exports = function (it) {
  return Object(defined(it));
};


/***/ }),
/* 57 */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(36);
var dPs = __webpack_require__(110);
var enumBugKeys = __webpack_require__(54);
var IE_PROTO = __webpack_require__(52)('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(69)('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(111).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(20).f;
var has = __webpack_require__(21);
var TAG = __webpack_require__(28)('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(28);


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(16);
var core = __webpack_require__(17);
var LIBRARY = __webpack_require__(44);
var wksExt = __webpack_require__(60);
var defineProperty = __webpack_require__(20).f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>
// This work is free. You can redistribute it and/or modify it
// under the terms of the WTFPL, Version 2
// For more information see LICENSE.txt or http://www.wtfpl.net/
//
// For more information, the home page:
// http://pieroxy.net/blog/pages/lz-string/testing.html
//
// LZ-based compression algorithm, version 1.4.4
var LZString = (function() {

// private property
var f = String.fromCharCode;
var keyStrBase64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
var keyStrUriSafe = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$";
var baseReverseDic = {};

function getBaseValue(alphabet, character) {
  if (!baseReverseDic[alphabet]) {
    baseReverseDic[alphabet] = {};
    for (var i=0 ; i<alphabet.length ; i++) {
      baseReverseDic[alphabet][alphabet.charAt(i)] = i;
    }
  }
  return baseReverseDic[alphabet][character];
}

var LZString = {
  compressToBase64 : function (input) {
    if (input == null) return "";
    var res = LZString._compress(input, 6, function(a){return keyStrBase64.charAt(a);});
    switch (res.length % 4) { // To produce valid Base64
    default: // When could this happen ?
    case 0 : return res;
    case 1 : return res+"===";
    case 2 : return res+"==";
    case 3 : return res+"=";
    }
  },

  decompressFromBase64 : function (input) {
    if (input == null) return "";
    if (input == "") return null;
    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrBase64, input.charAt(index)); });
  },

  compressToUTF16 : function (input) {
    if (input == null) return "";
    return LZString._compress(input, 15, function(a){return f(a+32);}) + " ";
  },

  decompressFromUTF16: function (compressed) {
    if (compressed == null) return "";
    if (compressed == "") return null;
    return LZString._decompress(compressed.length, 16384, function(index) { return compressed.charCodeAt(index) - 32; });
  },

  //compress into uint8array (UCS-2 big endian format)
  compressToUint8Array: function (uncompressed) {
    var compressed = LZString.compress(uncompressed);
    var buf=new Uint8Array(compressed.length*2); // 2 bytes per character

    for (var i=0, TotalLen=compressed.length; i<TotalLen; i++) {
      var current_value = compressed.charCodeAt(i);
      buf[i*2] = current_value >>> 8;
      buf[i*2+1] = current_value % 256;
    }
    return buf;
  },

  //decompress from uint8array (UCS-2 big endian format)
  decompressFromUint8Array:function (compressed) {
    if (compressed===null || compressed===undefined){
        return LZString.decompress(compressed);
    } else {
        var buf=new Array(compressed.length/2); // 2 bytes per character
        for (var i=0, TotalLen=buf.length; i<TotalLen; i++) {
          buf[i]=compressed[i*2]*256+compressed[i*2+1];
        }

        var result = [];
        buf.forEach(function (c) {
          result.push(f(c));
        });
        return LZString.decompress(result.join(''));

    }

  },


  //compress into a string that is already URI encoded
  compressToEncodedURIComponent: function (input) {
    if (input == null) return "";
    return LZString._compress(input, 6, function(a){return keyStrUriSafe.charAt(a);});
  },

  //decompress from an output of compressToEncodedURIComponent
  decompressFromEncodedURIComponent:function (input) {
    if (input == null) return "";
    if (input == "") return null;
    input = input.replace(/ /g, "+");
    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrUriSafe, input.charAt(index)); });
  },

  compress: function (uncompressed) {
    return LZString._compress(uncompressed, 16, function(a){return f(a);});
  },
  _compress: function (uncompressed, bitsPerChar, getCharFromInt) {
    if (uncompressed == null) return "";
    var i, value,
        context_dictionary= {},
        context_dictionaryToCreate= {},
        context_c="",
        context_wc="",
        context_w="",
        context_enlargeIn= 2, // Compensate for the first entry which should not count
        context_dictSize= 3,
        context_numBits= 2,
        context_data=[],
        context_data_val=0,
        context_data_position=0,
        ii;

    for (ii = 0; ii < uncompressed.length; ii += 1) {
      context_c = uncompressed.charAt(ii);
      if (!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {
        context_dictionary[context_c] = context_dictSize++;
        context_dictionaryToCreate[context_c] = true;
      }

      context_wc = context_w + context_c;
      if (Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {
        context_w = context_wc;
      } else {
        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {
          if (context_w.charCodeAt(0)<256) {
            for (i=0 ; i<context_numBits ; i++) {
              context_data_val = (context_data_val << 1);
              if (context_data_position == bitsPerChar-1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
            }
            value = context_w.charCodeAt(0);
            for (i=0 ; i<8 ; i++) {
              context_data_val = (context_data_val << 1) | (value&1);
              if (context_data_position == bitsPerChar-1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = value >> 1;
            }
          } else {
            value = 1;
            for (i=0 ; i<context_numBits ; i++) {
              context_data_val = (context_data_val << 1) | value;
              if (context_data_position ==bitsPerChar-1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = 0;
            }
            value = context_w.charCodeAt(0);
            for (i=0 ; i<16 ; i++) {
              context_data_val = (context_data_val << 1) | (value&1);
              if (context_data_position == bitsPerChar-1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = value >> 1;
            }
          }
          context_enlargeIn--;
          if (context_enlargeIn == 0) {
            context_enlargeIn = Math.pow(2, context_numBits);
            context_numBits++;
          }
          delete context_dictionaryToCreate[context_w];
        } else {
          value = context_dictionary[context_w];
          for (i=0 ; i<context_numBits ; i++) {
            context_data_val = (context_data_val << 1) | (value&1);
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }


        }
        context_enlargeIn--;
        if (context_enlargeIn == 0) {
          context_enlargeIn = Math.pow(2, context_numBits);
          context_numBits++;
        }
        // Add wc to the dictionary.
        context_dictionary[context_wc] = context_dictSize++;
        context_w = String(context_c);
      }
    }

    // Output the code for w.
    if (context_w !== "") {
      if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {
        if (context_w.charCodeAt(0)<256) {
          for (i=0 ; i<context_numBits ; i++) {
            context_data_val = (context_data_val << 1);
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
          }
          value = context_w.charCodeAt(0);
          for (i=0 ; i<8 ; i++) {
            context_data_val = (context_data_val << 1) | (value&1);
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }
        } else {
          value = 1;
          for (i=0 ; i<context_numBits ; i++) {
            context_data_val = (context_data_val << 1) | value;
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = 0;
          }
          value = context_w.charCodeAt(0);
          for (i=0 ; i<16 ; i++) {
            context_data_val = (context_data_val << 1) | (value&1);
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }
        }
        context_enlargeIn--;
        if (context_enlargeIn == 0) {
          context_enlargeIn = Math.pow(2, context_numBits);
          context_numBits++;
        }
        delete context_dictionaryToCreate[context_w];
      } else {
        value = context_dictionary[context_w];
        for (i=0 ; i<context_numBits ; i++) {
          context_data_val = (context_data_val << 1) | (value&1);
          if (context_data_position == bitsPerChar-1) {
            context_data_position = 0;
            context_data.push(getCharFromInt(context_data_val));
            context_data_val = 0;
          } else {
            context_data_position++;
          }
          value = value >> 1;
        }


      }
      context_enlargeIn--;
      if (context_enlargeIn == 0) {
        context_enlargeIn = Math.pow(2, context_numBits);
        context_numBits++;
      }
    }

    // Mark the end of the stream
    value = 2;
    for (i=0 ; i<context_numBits ; i++) {
      context_data_val = (context_data_val << 1) | (value&1);
      if (context_data_position == bitsPerChar-1) {
        context_data_position = 0;
        context_data.push(getCharFromInt(context_data_val));
        context_data_val = 0;
      } else {
        context_data_position++;
      }
      value = value >> 1;
    }

    // Flush the last char
    while (true) {
      context_data_val = (context_data_val << 1);
      if (context_data_position == bitsPerChar-1) {
        context_data.push(getCharFromInt(context_data_val));
        break;
      }
      else context_data_position++;
    }
    return context_data.join('');
  },

  decompress: function (compressed) {
    if (compressed == null) return "";
    if (compressed == "") return null;
    return LZString._decompress(compressed.length, 32768, function(index) { return compressed.charCodeAt(index); });
  },

  _decompress: function (length, resetValue, getNextValue) {
    var dictionary = [],
        next,
        enlargeIn = 4,
        dictSize = 4,
        numBits = 3,
        entry = "",
        result = [],
        i,
        w,
        bits, resb, maxpower, power,
        c,
        data = {val:getNextValue(0), position:resetValue, index:1};

    for (i = 0; i < 3; i += 1) {
      dictionary[i] = i;
    }

    bits = 0;
    maxpower = Math.pow(2,2);
    power=1;
    while (power!=maxpower) {
      resb = data.val & data.position;
      data.position >>= 1;
      if (data.position == 0) {
        data.position = resetValue;
        data.val = getNextValue(data.index++);
      }
      bits |= (resb>0 ? 1 : 0) * power;
      power <<= 1;
    }

    switch (next = bits) {
      case 0:
          bits = 0;
          maxpower = Math.pow(2,8);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }
        c = f(bits);
        break;
      case 1:
          bits = 0;
          maxpower = Math.pow(2,16);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }
        c = f(bits);
        break;
      case 2:
        return "";
    }
    dictionary[3] = c;
    w = c;
    result.push(c);
    while (true) {
      if (data.index > length) {
        return "";
      }

      bits = 0;
      maxpower = Math.pow(2,numBits);
      power=1;
      while (power!=maxpower) {
        resb = data.val & data.position;
        data.position >>= 1;
        if (data.position == 0) {
          data.position = resetValue;
          data.val = getNextValue(data.index++);
        }
        bits |= (resb>0 ? 1 : 0) * power;
        power <<= 1;
      }

      switch (c = bits) {
        case 0:
          bits = 0;
          maxpower = Math.pow(2,8);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }

          dictionary[dictSize++] = f(bits);
          c = dictSize-1;
          enlargeIn--;
          break;
        case 1:
          bits = 0;
          maxpower = Math.pow(2,16);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }
          dictionary[dictSize++] = f(bits);
          c = dictSize-1;
          enlargeIn--;
          break;
        case 2:
          return result.join('');
      }

      if (enlargeIn == 0) {
        enlargeIn = Math.pow(2, numBits);
        numBits++;
      }

      if (dictionary[c]) {
        entry = dictionary[c];
      } else {
        if (c === dictSize) {
          entry = w + w.charAt(0);
        } else {
          return null;
        }
      }
      result.push(entry);

      // Add w+entry[0] to the dictionary.
      dictionary[dictSize++] = w + entry.charAt(0);
      enlargeIn--;

      w = entry;

      if (enlargeIn == 0) {
        enlargeIn = Math.pow(2, numBits);
        numBits++;
      }

    }
  }
};
  return LZString;
})();

if (true) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () { return LZString; }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {}


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

const strictUriEncode = __webpack_require__(87);
const decodeComponent = __webpack_require__(88);
const splitOnFirst = __webpack_require__(89);

function encoderForArrayFormat(options) {
	switch (options.arrayFormat) {
		case 'index':
			return key => (result, value) => {
				const index = result.length;
				if (value === undefined || (options.skipNull && value === null)) {
					return result;
				}

				if (value === null) {
					return [...result, [encode(key, options), '[', index, ']'].join('')];
				}

				return [
					...result,
					[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')
				];
			};

		case 'bracket':
			return key => (result, value) => {
				if (value === undefined || (options.skipNull && value === null)) {
					return result;
				}

				if (value === null) {
					return [...result, [encode(key, options), '[]'].join('')];
				}

				return [...result, [encode(key, options), '[]=', encode(value, options)].join('')];
			};

		case 'comma':
		case 'separator':
			return key => (result, value) => {
				if (value === null || value === undefined || value.length === 0) {
					return result;
				}

				if (result.length === 0) {
					return [[encode(key, options), '=', encode(value, options)].join('')];
				}

				return [[result, encode(value, options)].join(options.arrayFormatSeparator)];
			};

		default:
			return key => (result, value) => {
				if (value === undefined || (options.skipNull && value === null)) {
					return result;
				}

				if (value === null) {
					return [...result, encode(key, options)];
				}

				return [...result, [encode(key, options), '=', encode(value, options)].join('')];
			};
	}
}

function parserForArrayFormat(options) {
	let result;

	switch (options.arrayFormat) {
		case 'index':
			return (key, value, accumulator) => {
				result = /\[(\d*)\]$/.exec(key);

				key = key.replace(/\[\d*\]$/, '');

				if (!result) {
					accumulator[key] = value;
					return;
				}

				if (accumulator[key] === undefined) {
					accumulator[key] = {};
				}

				accumulator[key][result[1]] = value;
			};

		case 'bracket':
			return (key, value, accumulator) => {
				result = /(\[\])$/.exec(key);
				key = key.replace(/\[\]$/, '');

				if (!result) {
					accumulator[key] = value;
					return;
				}

				if (accumulator[key] === undefined) {
					accumulator[key] = [value];
					return;
				}

				accumulator[key] = [].concat(accumulator[key], value);
			};

		case 'comma':
		case 'separator':
			return (key, value, accumulator) => {
				const isArray = typeof value === 'string' && value.split('').indexOf(options.arrayFormatSeparator) > -1;
				const newValue = isArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);
				accumulator[key] = newValue;
			};

		default:
			return (key, value, accumulator) => {
				if (accumulator[key] === undefined) {
					accumulator[key] = value;
					return;
				}

				accumulator[key] = [].concat(accumulator[key], value);
			};
	}
}

function validateArrayFormatSeparator(value) {
	if (typeof value !== 'string' || value.length !== 1) {
		throw new TypeError('arrayFormatSeparator must be single character string');
	}
}

function encode(value, options) {
	if (options.encode) {
		return options.strict ? strictUriEncode(value) : encodeURIComponent(value);
	}

	return value;
}

function decode(value, options) {
	if (options.decode) {
		return decodeComponent(value);
	}

	return value;
}

function keysSorter(input) {
	if (Array.isArray(input)) {
		return input.sort();
	}

	if (typeof input === 'object') {
		return keysSorter(Object.keys(input))
			.sort((a, b) => Number(a) - Number(b))
			.map(key => input[key]);
	}

	return input;
}

function removeHash(input) {
	const hashStart = input.indexOf('#');
	if (hashStart !== -1) {
		input = input.slice(0, hashStart);
	}

	return input;
}

function getHash(url) {
	let hash = '';
	const hashStart = url.indexOf('#');
	if (hashStart !== -1) {
		hash = url.slice(hashStart);
	}

	return hash;
}

function extract(input) {
	input = removeHash(input);
	const queryStart = input.indexOf('?');
	if (queryStart === -1) {
		return '';
	}

	return input.slice(queryStart + 1);
}

function parseValue(value, options) {
	if (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {
		value = Number(value);
	} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {
		value = value.toLowerCase() === 'true';
	}

	return value;
}

function parse(input, options) {
	options = Object.assign({
		decode: true,
		sort: true,
		arrayFormat: 'none',
		arrayFormatSeparator: ',',
		parseNumbers: false,
		parseBooleans: false
	}, options);

	validateArrayFormatSeparator(options.arrayFormatSeparator);

	const formatter = parserForArrayFormat(options);

	// Create an object with no prototype
	const ret = Object.create(null);

	if (typeof input !== 'string') {
		return ret;
	}

	input = input.trim().replace(/^[?#&]/, '');

	if (!input) {
		return ret;
	}

	for (const param of input.split('&')) {
		let [key, value] = splitOnFirst(options.decode ? param.replace(/\+/g, ' ') : param, '=');

		// Missing `=` should be `null`:
		// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
		value = value === undefined ? null : options.arrayFormat === 'comma' ? value : decode(value, options);
		formatter(decode(key, options), value, ret);
	}

	for (const key of Object.keys(ret)) {
		const value = ret[key];
		if (typeof value === 'object' && value !== null) {
			for (const k of Object.keys(value)) {
				value[k] = parseValue(value[k], options);
			}
		} else {
			ret[key] = parseValue(value, options);
		}
	}

	if (options.sort === false) {
		return ret;
	}

	return (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {
		const value = ret[key];
		if (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {
			// Sort object keys, not values
			result[key] = keysSorter(value);
		} else {
			result[key] = value;
		}

		return result;
	}, Object.create(null));
}

exports.extract = extract;
exports.parse = parse;

exports.stringify = (object, options) => {
	if (!object) {
		return '';
	}

	options = Object.assign({
		encode: true,
		strict: true,
		arrayFormat: 'none',
		arrayFormatSeparator: ','
	}, options);

	validateArrayFormatSeparator(options.arrayFormatSeparator);

	const formatter = encoderForArrayFormat(options);

	const objectCopy = Object.assign({}, object);
	if (options.skipNull) {
		for (const key of Object.keys(objectCopy)) {
			if (objectCopy[key] === undefined || objectCopy[key] === null) {
				delete objectCopy[key];
			}
		}
	}

	const keys = Object.keys(objectCopy);

	if (options.sort !== false) {
		keys.sort(options.sort);
	}

	return keys.map(key => {
		const value = object[key];

		if (value === undefined) {
			return '';
		}

		if (value === null) {
			return encode(key, options);
		}

		if (Array.isArray(value)) {
			return value
				.reduce(formatter(key), [])
				.join('&');
		}

		return encode(key, options) + '=' + encode(value, options);
	}).filter(x => x.length > 0).join('&');
};

exports.parseUrl = (input, options) => {
	return {
		url: removeHash(input).split('?')[0] || '',
		query: parse(extract(input), options)
	};
};

exports.stringifyUrl = (input, options) => {
	const url = removeHash(input.url).split('?')[0] || '';
	const queryFromUrl = exports.extract(input.url);
	const parsedQueryFromUrl = exports.parse(queryFromUrl);
	const hash = getHash(input.url);
	const query = Object.assign(parsedQueryFromUrl, input.query);
	let queryString = exports.stringify(query, options);
	if (queryString) {
		queryString = `?${queryString}`;
	}

	return `${url}${queryString}${hash}`;
};


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;;(function (globalScope) {
  'use strict';


  /*
   *  decimal.js v10.2.0
   *  An arbitrary-precision Decimal type for JavaScript.
   *  https://github.com/MikeMcl/decimal.js
   *  Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>
   *  MIT Licence
   */


  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //


    // The maximum exponent magnitude.
    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.
  var EXP_LIMIT = 9e15,                      // 0 to 9e15

    // The limit on the value of `precision`, and on the value of the first argument to
    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.
    MAX_DIGITS = 1e9,                        // 0 to 1e9

    // Base conversion alphabet.
    NUMERALS = '0123456789abcdef',

    // The natural logarithm of 10 (1025 digits).
    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',

    // Pi (1025 digits).
    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',


    // The initial configuration properties of the Decimal constructor.
    DEFAULTS = {

      // These values must be integers within the stated ranges (inclusive).
      // Most of these values can be changed at run-time using the `Decimal.config` method.

      // The maximum number of significant digits of the result of a calculation or base conversion.
      // E.g. `Decimal.config({ precision: 20 });`
      precision: 20,                         // 1 to MAX_DIGITS

      // The rounding mode used when rounding to `precision`.
      //
      // ROUND_UP         0 Away from zero.
      // ROUND_DOWN       1 Towards zero.
      // ROUND_CEIL       2 Towards +Infinity.
      // ROUND_FLOOR      3 Towards -Infinity.
      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
      //
      // E.g.
      // `Decimal.rounding = 4;`
      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
      rounding: 4,                           // 0 to 8

      // The modulo mode used when calculating the modulus: a mod n.
      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
      // The remainder (r) is calculated as: r = a - n * q.
      //
      // UP         0 The remainder is positive if the dividend is negative, else is negative.
      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).
      // FLOOR      3 The remainder has the same sign as the divisor (Python %).
      // HALF_EVEN  6 The IEEE 754 remainder function.
      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.
      //
      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian
      // division (9) are commonly used for the modulus operation. The other rounding modes can also
      // be used, but they may not give useful results.
      modulo: 1,                             // 0 to 9

      // The exponent value at and beneath which `toString` returns exponential notation.
      // JavaScript numbers: -7
      toExpNeg: -7,                          // 0 to -EXP_LIMIT

      // The exponent value at and above which `toString` returns exponential notation.
      // JavaScript numbers: 21
      toExpPos:  21,                         // 0 to EXP_LIMIT

      // The minimum exponent value, beneath which underflow to zero occurs.
      // JavaScript numbers: -324  (5e-324)
      minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT

      // The maximum exponent value, above which overflow to Infinity occurs.
      // JavaScript numbers: 308  (1.7976931348623157e+308)
      maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT

      // Whether to use cryptographically-secure random number generation, if available.
      crypto: false                          // true/false
    },


  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //


    Decimal, inexact, noConflict, quadrant,
    external = true,

    decimalError = '[DecimalError] ',
    invalidArgument = decimalError + 'Invalid argument: ',
    precisionLimitExceeded = decimalError + 'Precision limit exceeded',
    cryptoUnavailable = decimalError + 'crypto unavailable',

    mathfloor = Math.floor,
    mathpow = Math.pow,

    isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,
    isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,
    isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,
    isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,

    BASE = 1e7,
    LOG_BASE = 7,
    MAX_SAFE_INTEGER = 9007199254740991,

    LN10_PRECISION = LN10.length - 1,
    PI_PRECISION = PI.length - 1,

    // Decimal.prototype object
    P = { name: '[object Decimal]' };


  // Decimal prototype methods


  /*
   *  absoluteValue             abs
   *  ceil
   *  comparedTo                cmp
   *  cosine                    cos
   *  cubeRoot                  cbrt
   *  decimalPlaces             dp
   *  dividedBy                 div
   *  dividedToIntegerBy        divToInt
   *  equals                    eq
   *  floor
   *  greaterThan               gt
   *  greaterThanOrEqualTo      gte
   *  hyperbolicCosine          cosh
   *  hyperbolicSine            sinh
   *  hyperbolicTangent         tanh
   *  inverseCosine             acos
   *  inverseHyperbolicCosine   acosh
   *  inverseHyperbolicSine     asinh
   *  inverseHyperbolicTangent  atanh
   *  inverseSine               asin
   *  inverseTangent            atan
   *  isFinite
   *  isInteger                 isInt
   *  isNaN
   *  isNegative                isNeg
   *  isPositive                isPos
   *  isZero
   *  lessThan                  lt
   *  lessThanOrEqualTo         lte
   *  logarithm                 log
   *  [maximum]                 [max]
   *  [minimum]                 [min]
   *  minus                     sub
   *  modulo                    mod
   *  naturalExponential        exp
   *  naturalLogarithm          ln
   *  negated                   neg
   *  plus                      add
   *  precision                 sd
   *  round
   *  sine                      sin
   *  squareRoot                sqrt
   *  tangent                   tan
   *  times                     mul
   *  toBinary
   *  toDecimalPlaces           toDP
   *  toExponential
   *  toFixed
   *  toFraction
   *  toHexadecimal             toHex
   *  toNearest
   *  toNumber
   *  toOctal
   *  toPower                   pow
   *  toPrecision
   *  toSignificantDigits       toSD
   *  toString
   *  truncated                 trunc
   *  valueOf                   toJSON
   */


  /*
   * Return a new Decimal whose value is the absolute value of this Decimal.
   *
   */
  P.absoluteValue = P.abs = function () {
    var x = new this.constructor(this);
    if (x.s < 0) x.s = 1;
    return finalise(x);
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
   * direction of positive Infinity.
   *
   */
  P.ceil = function () {
    return finalise(new this.constructor(this), this.e + 1, 2);
  };


  /*
   * Return
   *   1    if the value of this Decimal is greater than the value of `y`,
   *  -1    if the value of this Decimal is less than the value of `y`,
   *   0    if they have the same value,
   *   NaN  if the value of either Decimal is NaN.
   *
   */
  P.comparedTo = P.cmp = function (y) {
    var i, j, xdL, ydL,
      x = this,
      xd = x.d,
      yd = (y = new x.constructor(y)).d,
      xs = x.s,
      ys = y.s;

    // Either NaN or ±Infinity?
    if (!xd || !yd) {
      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
    }

    // Either zero?
    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;

    // Signs differ?
    if (xs !== ys) return xs;

    // Compare exponents.
    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;

    xdL = xd.length;
    ydL = yd.length;

    // Compare digit by digit.
    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;
    }

    // Compare lengths.
    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
  };


  /*
   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-1, 1]
   *
   * cos(0)         = 1
   * cos(-0)        = 1
   * cos(Infinity)  = NaN
   * cos(-Infinity) = NaN
   * cos(NaN)       = NaN
   *
   */
  P.cosine = P.cos = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (!x.d) return new Ctor(NaN);

    // cos(0) = cos(-0) = 1
    if (!x.d[0]) return new Ctor(1);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
    Ctor.rounding = 1;

    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
  };


  /*
   *
   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   *  cbrt(0)  =  0
   *  cbrt(-0) = -0
   *  cbrt(1)  =  1
   *  cbrt(-1) = -1
   *  cbrt(N)  =  N
   *  cbrt(-I) = -I
   *  cbrt(I)  =  I
   *
   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))
   *
   */
  P.cubeRoot = P.cbrt = function () {
    var e, m, n, r, rep, s, sd, t, t3, t3plusx,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite() || x.isZero()) return new Ctor(x);
    external = false;

    // Initial estimate.
    s = x.s * mathpow(x.s * x, 1 / 3);

     // Math.cbrt underflow/overflow?
     // Pass x to Math.pow as integer, then adjust the exponent of the result.
    if (!s || Math.abs(s) == 1 / 0) {
      n = digitsToString(x.d);
      e = x.e;

      // Adjust n exponent so it is a multiple of 3 away from x exponent.
      if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');
      s = mathpow(n, 1 / 3);

      // Rarely, e may be one less than the result exponent value.
      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));

      if (s == 1 / 0) {
        n = '5e' + e;
      } else {
        n = s.toExponential();
        n = n.slice(0, n.indexOf('e') + 1) + e;
      }

      r = new Ctor(n);
      r.s = x.s;
    } else {
      r = new Ctor(s.toString());
    }

    sd = (e = Ctor.precision) + 3;

    // Halley's method.
    // TODO? Compare Newton's method.
    for (;;) {
      t = r;
      t3 = t.times(t).times(t);
      t3plusx = t3.plus(x);
      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);

      // TODO? Replace with for-loop and checkRoundingDigits.
      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
        n = n.slice(sd - 3, sd + 1);

        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999
        // , i.e. approaching a rounding boundary, continue the iteration.
        if (n == '9999' || !rep && n == '4999') {

          // On the first iteration only, check to see if rounding up gives the exact result as the
          // nines may infinitely repeat.
          if (!rep) {
            finalise(t, e + 1, 0);

            if (t.times(t).times(t).eq(x)) {
              r = t;
              break;
            }
          }

          sd += 4;
          rep = 1;
        } else {

          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
          // If not, then there are further digits and m will be truthy.
          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

            // Truncate to the first rounding digit.
            finalise(r, e + 1, 1);
            m = !r.times(r).times(r).eq(x);
          }

          break;
        }
      }
    }

    external = true;

    return finalise(r, e, Ctor.rounding, m);
  };


  /*
   * Return the number of decimal places of the value of this Decimal.
   *
   */
  P.decimalPlaces = P.dp = function () {
    var w,
      d = this.d,
      n = NaN;

    if (d) {
      w = d.length - 1;
      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;

      // Subtract the number of trailing zeros of the last word.
      w = d[w];
      if (w) for (; w % 10 == 0; w /= 10) n--;
      if (n < 0) n = 0;
    }

    return n;
  };


  /*
   *  n / 0 = I
   *  n / N = N
   *  n / I = 0
   *  0 / n = 0
   *  0 / 0 = N
   *  0 / N = N
   *  0 / I = 0
   *  N / n = N
   *  N / 0 = N
   *  N / N = N
   *  N / I = N
   *  I / n = I
   *  I / 0 = I
   *  I / N = N
   *  I / I = N
   *
   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   */
  P.dividedBy = P.div = function (y) {
    return divide(this, new this.constructor(y));
  };


  /*
   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal
   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.
   *
   */
  P.dividedToIntegerBy = P.divToInt = function (y) {
    var x = this,
      Ctor = x.constructor;
    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
  };


  /*
   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.
   *
   */
  P.equals = P.eq = function (y) {
    return this.cmp(y) === 0;
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
   * direction of negative Infinity.
   *
   */
  P.floor = function () {
    return finalise(new this.constructor(this), this.e + 1, 3);
  };


  /*
   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return
   * false.
   *
   */
  P.greaterThan = P.gt = function (y) {
    return this.cmp(y) > 0;
  };


  /*
   * Return true if the value of this Decimal is greater than or equal to the value of `y`,
   * otherwise return false.
   *
   */
  P.greaterThanOrEqualTo = P.gte = function (y) {
    var k = this.cmp(y);
    return k == 1 || k === 0;
  };


  /*
   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [1, Infinity]
   *
   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...
   *
   * cosh(0)         = 1
   * cosh(-0)        = 1
   * cosh(Infinity)  = Infinity
   * cosh(-Infinity) = Infinity
   * cosh(NaN)       = NaN
   *
   *  x        time taken (ms)   result
   * 1000      9                 9.8503555700852349694e+433
   * 10000     25                4.4034091128314607936e+4342
   * 100000    171               1.4033316802130615897e+43429
   * 1000000   3817              1.5166076984010437725e+434294
   * 10000000  abandoned after 2 minute wait
   *
   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))
   *
   */
  P.hyperbolicCosine = P.cosh = function () {
    var k, n, pr, rm, len,
      x = this,
      Ctor = x.constructor,
      one = new Ctor(1);

    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);
    if (x.isZero()) return one;

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
    Ctor.rounding = 1;
    len = x.d.length;

    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1
    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))

    // Estimate the optimum number of times to use the argument reduction.
    // TODO? Estimation reused from cosine() and may not be optimal here.
    if (len < 32) {
      k = Math.ceil(len / 3);
      n = (1 / tinyPow(4, k)).toString();
    } else {
      k = 16;
      n = '2.3283064365386962890625e-10';
    }

    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);

    // Reverse argument reduction
    var cosh2_x,
      i = k,
      d8 = new Ctor(8);
    for (; i--;) {
      cosh2_x = x.times(x);
      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
    }

    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
  };


  /*
   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-Infinity, Infinity]
   *
   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...
   *
   * sinh(0)         = 0
   * sinh(-0)        = -0
   * sinh(Infinity)  = Infinity
   * sinh(-Infinity) = -Infinity
   * sinh(NaN)       = NaN
   *
   * x        time taken (ms)
   * 10       2 ms
   * 100      5 ms
   * 1000     14 ms
   * 10000    82 ms
   * 100000   886 ms            1.4033316802130615897e+43429
   * 200000   2613 ms
   * 300000   5407 ms
   * 400000   8824 ms
   * 500000   13026 ms          8.7080643612718084129e+217146
   * 1000000  48543 ms
   *
   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))
   *
   */
  P.hyperbolicSine = P.sinh = function () {
    var k, pr, rm, len,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite() || x.isZero()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
    Ctor.rounding = 1;
    len = x.d.length;

    if (len < 3) {
      x = taylorSeries(Ctor, 2, x, x, true);
    } else {

      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))
      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))
      // 3 multiplications and 1 addition

      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))
      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))
      // 4 multiplications and 2 additions

      // Estimate the optimum number of times to use the argument reduction.
      k = 1.4 * Math.sqrt(len);
      k = k > 16 ? 16 : k | 0;

      x = x.times(1 / tinyPow(5, k));
      x = taylorSeries(Ctor, 2, x, x, true);

      // Reverse argument reduction
      var sinh2_x,
        d5 = new Ctor(5),
        d16 = new Ctor(16),
        d20 = new Ctor(20);
      for (; k--;) {
        sinh2_x = x.times(x);
        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
      }
    }

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return finalise(x, pr, rm, true);
  };


  /*
   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-1, 1]
   *
   * tanh(x) = sinh(x) / cosh(x)
   *
   * tanh(0)         = 0
   * tanh(-0)        = -0
   * tanh(Infinity)  = 1
   * tanh(-Infinity) = -1
   * tanh(NaN)       = NaN
   *
   */
  P.hyperbolicTangent = P.tanh = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite()) return new Ctor(x.s);
    if (x.isZero()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + 7;
    Ctor.rounding = 1;

    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
  };


  /*
   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of
   * this Decimal.
   *
   * Domain: [-1, 1]
   * Range: [0, pi]
   *
   * acos(x) = pi/2 - asin(x)
   *
   * acos(0)       = pi/2
   * acos(-0)      = pi/2
   * acos(1)       = 0
   * acos(-1)      = pi
   * acos(1/2)     = pi/3
   * acos(-1/2)    = 2*pi/3
   * acos(|x| > 1) = NaN
   * acos(NaN)     = NaN
   *
   */
  P.inverseCosine = P.acos = function () {
    var halfPi,
      x = this,
      Ctor = x.constructor,
      k = x.abs().cmp(1),
      pr = Ctor.precision,
      rm = Ctor.rounding;

    if (k !== -1) {
      return k === 0
        // |x| is 1
        ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)
        // |x| > 1 or x is NaN
        : new Ctor(NaN);
    }

    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);

    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3

    Ctor.precision = pr + 6;
    Ctor.rounding = 1;

    x = x.asin();
    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return halfPi.minus(x);
  };


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the
   * value of this Decimal.
   *
   * Domain: [1, Infinity]
   * Range: [0, Infinity]
   *
   * acosh(x) = ln(x + sqrt(x^2 - 1))
   *
   * acosh(x < 1)     = NaN
   * acosh(NaN)       = NaN
   * acosh(Infinity)  = Infinity
   * acosh(-Infinity) = NaN
   * acosh(0)         = NaN
   * acosh(-0)        = NaN
   * acosh(1)         = 0
   * acosh(-1)        = NaN
   *
   */
  P.inverseHyperbolicCosine = P.acosh = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);
    if (!x.isFinite()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
    Ctor.rounding = 1;
    external = false;

    x = x.times(x).minus(1).sqrt().plus(x);

    external = true;
    Ctor.precision = pr;
    Ctor.rounding = rm;

    return x.ln();
  };


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value
   * of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-Infinity, Infinity]
   *
   * asinh(x) = ln(x + sqrt(x^2 + 1))
   *
   * asinh(NaN)       = NaN
   * asinh(Infinity)  = Infinity
   * asinh(-Infinity) = -Infinity
   * asinh(0)         = 0
   * asinh(-0)        = -0
   *
   */
  P.inverseHyperbolicSine = P.asinh = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite() || x.isZero()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
    Ctor.rounding = 1;
    external = false;

    x = x.times(x).plus(1).sqrt().plus(x);

    external = true;
    Ctor.precision = pr;
    Ctor.rounding = rm;

    return x.ln();
  };


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the
   * value of this Decimal.
   *
   * Domain: [-1, 1]
   * Range: [-Infinity, Infinity]
   *
   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))
   *
   * atanh(|x| > 1)   = NaN
   * atanh(NaN)       = NaN
   * atanh(Infinity)  = NaN
   * atanh(-Infinity) = NaN
   * atanh(0)         = 0
   * atanh(-0)        = -0
   * atanh(1)         = Infinity
   * atanh(-1)        = -Infinity
   *
   */
  P.inverseHyperbolicTangent = P.atanh = function () {
    var pr, rm, wpr, xsd,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite()) return new Ctor(NaN);
    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    xsd = x.sd();

    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);

    Ctor.precision = wpr = xsd - x.e;

    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);

    Ctor.precision = pr + 4;
    Ctor.rounding = 1;

    x = x.ln();

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return x.times(0.5);
  };


  /*
   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-pi/2, pi/2]
   *
   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))
   *
   * asin(0)       = 0
   * asin(-0)      = -0
   * asin(1/2)     = pi/6
   * asin(-1/2)    = -pi/6
   * asin(1)       = pi/2
   * asin(-1)      = -pi/2
   * asin(|x| > 1) = NaN
   * asin(NaN)     = NaN
   *
   * TODO? Compare performance of Taylor series.
   *
   */
  P.inverseSine = P.asin = function () {
    var halfPi, k,
      pr, rm,
      x = this,
      Ctor = x.constructor;

    if (x.isZero()) return new Ctor(x);

    k = x.abs().cmp(1);
    pr = Ctor.precision;
    rm = Ctor.rounding;

    if (k !== -1) {

      // |x| is 1
      if (k === 0) {
        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
        halfPi.s = x.s;
        return halfPi;
      }

      // |x| > 1 or x is NaN
      return new Ctor(NaN);
    }

    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6

    Ctor.precision = pr + 6;
    Ctor.rounding = 1;

    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return x.times(2);
  };


  /*
   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value
   * of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-pi/2, pi/2]
   *
   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
   *
   * atan(0)         = 0
   * atan(-0)        = -0
   * atan(1)         = pi/4
   * atan(-1)        = -pi/4
   * atan(Infinity)  = pi/2
   * atan(-Infinity) = -pi/2
   * atan(NaN)       = NaN
   *
   */
  P.inverseTangent = P.atan = function () {
    var i, j, k, n, px, t, r, wpr, x2,
      x = this,
      Ctor = x.constructor,
      pr = Ctor.precision,
      rm = Ctor.rounding;

    if (!x.isFinite()) {
      if (!x.s) return new Ctor(NaN);
      if (pr + 4 <= PI_PRECISION) {
        r = getPi(Ctor, pr + 4, rm).times(0.5);
        r.s = x.s;
        return r;
      }
    } else if (x.isZero()) {
      return new Ctor(x);
    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
      r = getPi(Ctor, pr + 4, rm).times(0.25);
      r.s = x.s;
      return r;
    }

    Ctor.precision = wpr = pr + 10;
    Ctor.rounding = 1;

    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);

    // Argument reduction
    // Ensure |x| < 0.42
    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))

    k = Math.min(28, wpr / LOG_BASE + 2 | 0);

    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));

    external = false;

    j = Math.ceil(wpr / LOG_BASE);
    n = 1;
    x2 = x.times(x);
    r = new Ctor(x);
    px = x;

    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
    for (; i !== -1;) {
      px = px.times(x2);
      t = r.minus(px.div(n += 2));

      px = px.times(x2);
      r = t.plus(px.div(n += 2));

      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);
    }

    if (k) r = r.times(2 << (k - 1));

    external = true;

    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
  };


  /*
   * Return true if the value of this Decimal is a finite number, otherwise return false.
   *
   */
  P.isFinite = function () {
    return !!this.d;
  };


  /*
   * Return true if the value of this Decimal is an integer, otherwise return false.
   *
   */
  P.isInteger = P.isInt = function () {
    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
  };


  /*
   * Return true if the value of this Decimal is NaN, otherwise return false.
   *
   */
  P.isNaN = function () {
    return !this.s;
  };


  /*
   * Return true if the value of this Decimal is negative, otherwise return false.
   *
   */
  P.isNegative = P.isNeg = function () {
    return this.s < 0;
  };


  /*
   * Return true if the value of this Decimal is positive, otherwise return false.
   *
   */
  P.isPositive = P.isPos = function () {
    return this.s > 0;
  };


  /*
   * Return true if the value of this Decimal is 0 or -0, otherwise return false.
   *
   */
  P.isZero = function () {
    return !!this.d && this.d[0] === 0;
  };


  /*
   * Return true if the value of this Decimal is less than `y`, otherwise return false.
   *
   */
  P.lessThan = P.lt = function (y) {
    return this.cmp(y) < 0;
  };


  /*
   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.
   *
   */
  P.lessThanOrEqualTo = P.lte = function (y) {
    return this.cmp(y) < 1;
  };


  /*
   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * If no base is specified, return log[10](arg).
   *
   * log[base](arg) = ln(arg) / ln(base)
   *
   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'
   * otherwise:
   *
   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen
   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error
   * between the result and the correctly rounded result will be one ulp (unit in the last place).
   *
   * log[-b](a)       = NaN
   * log[0](a)        = NaN
   * log[1](a)        = NaN
   * log[NaN](a)      = NaN
   * log[Infinity](a) = NaN
   * log[b](0)        = -Infinity
   * log[b](-0)       = -Infinity
   * log[b](-a)       = NaN
   * log[b](1)        = 0
   * log[b](Infinity) = Infinity
   * log[b](NaN)      = NaN
   *
   * [base] {number|string|Decimal} The base of the logarithm.
   *
   */
  P.logarithm = P.log = function (base) {
    var isBase10, d, denominator, k, inf, num, sd, r,
      arg = this,
      Ctor = arg.constructor,
      pr = Ctor.precision,
      rm = Ctor.rounding,
      guard = 5;

    // Default base is 10.
    if (base == null) {
      base = new Ctor(10);
      isBase10 = true;
    } else {
      base = new Ctor(base);
      d = base.d;

      // Return NaN if base is negative, or non-finite, or is 0 or 1.
      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);

      isBase10 = base.eq(10);
    }

    d = arg.d;

    // Is arg negative, non-finite, 0 or 1?
    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {
      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);
    }

    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an
    // integer power of 10.
    if (isBase10) {
      if (d.length > 1) {
        inf = true;
      } else {
        for (k = d[0]; k % 10 === 0;) k /= 10;
        inf = k !== 1;
      }
    }

    external = false;
    sd = pr + guard;
    num = naturalLogarithm(arg, sd);
    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);

    // The result will have 5 rounding digits.
    r = divide(num, denominator, sd, 1);

    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,
    // calculate 10 further digits.
    //
    // If the result is known to have an infinite decimal expansion, repeat this until it is clear
    // that the result is above or below the boundary. Otherwise, if after calculating the 10
    // further digits, the last 14 are nines, round up and assume the result is exact.
    // Also assume the result is exact if the last 14 are zero.
    //
    // Example of a result that will be incorrectly rounded:
    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...
    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it
    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so
    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal
    // place is still 2.6.
    if (checkRoundingDigits(r.d, k = pr, rm)) {

      do {
        sd += 10;
        num = naturalLogarithm(arg, sd);
        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
        r = divide(num, denominator, sd, 1);

        if (!inf) {

          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.
          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {
            r = finalise(r, pr + 1, 0);
          }

          break;
        }
      } while (checkRoundingDigits(r.d, k += 10, rm));
    }

    external = true;

    return finalise(r, pr, rm);
  };


  /*
   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.
   *
   * arguments {number|string|Decimal}
   *
  P.max = function () {
    Array.prototype.push.call(arguments, this);
    return maxOrMin(this.constructor, arguments, 'lt');
  };
   */


  /*
   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.
   *
   * arguments {number|string|Decimal}
   *
  P.min = function () {
    Array.prototype.push.call(arguments, this);
    return maxOrMin(this.constructor, arguments, 'gt');
  };
   */


  /*
   *  n - 0 = n
   *  n - N = N
   *  n - I = -I
   *  0 - n = -n
   *  0 - 0 = 0
   *  0 - N = N
   *  0 - I = -I
   *  N - n = N
   *  N - 0 = N
   *  N - N = N
   *  N - I = N
   *  I - n = I
   *  I - 0 = I
   *  I - N = N
   *  I - I = N
   *
   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   */
  P.minus = P.sub = function (y) {
    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,
      x = this,
      Ctor = x.constructor;

    y = new Ctor(y);

    // If either is not finite...
    if (!x.d || !y.d) {

      // Return NaN if either is NaN.
      if (!x.s || !y.s) y = new Ctor(NaN);

      // Return y negated if x is finite and y is ±Infinity.
      else if (x.d) y.s = -y.s;

      // Return x if y is finite and x is ±Infinity.
      // Return x if both are ±Infinity with different signs.
      // Return NaN if both are ±Infinity with the same sign.
      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);

      return y;
    }

    // If signs differ...
    if (x.s != y.s) {
      y.s = -y.s;
      return x.plus(y);
    }

    xd = x.d;
    yd = y.d;
    pr = Ctor.precision;
    rm = Ctor.rounding;

    // If either is zero...
    if (!xd[0] || !yd[0]) {

      // Return y negated if x is zero and y is non-zero.
      if (yd[0]) y.s = -y.s;

      // Return x if y is zero and x is non-zero.
      else if (xd[0]) y = new Ctor(x);

      // Return zero if both are zero.
      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.
      else return new Ctor(rm === 3 ? -0 : 0);

      return external ? finalise(y, pr, rm) : y;
    }

    // x and y are finite, non-zero numbers with the same sign.

    // Calculate base 1e7 exponents.
    e = mathfloor(y.e / LOG_BASE);
    xe = mathfloor(x.e / LOG_BASE);

    xd = xd.slice();
    k = xe - e;

    // If base 1e7 exponents differ...
    if (k) {
      xLTy = k < 0;

      if (xLTy) {
        d = xd;
        k = -k;
        len = yd.length;
      } else {
        d = yd;
        e = xe;
        len = xd.length;
      }

      // Numbers with massively different exponents would result in a very high number of
      // zeros needing to be prepended, but this can be avoided while still ensuring correct
      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.
      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;

      if (k > i) {
        k = i;
        d.length = 1;
      }

      // Prepend zeros to equalise exponents.
      d.reverse();
      for (i = k; i--;) d.push(0);
      d.reverse();

    // Base 1e7 exponents equal.
    } else {

      // Check digits to determine which is the bigger number.

      i = xd.length;
      len = yd.length;
      xLTy = i < len;
      if (xLTy) len = i;

      for (i = 0; i < len; i++) {
        if (xd[i] != yd[i]) {
          xLTy = xd[i] < yd[i];
          break;
        }
      }

      k = 0;
    }

    if (xLTy) {
      d = xd;
      xd = yd;
      yd = d;
      y.s = -y.s;
    }

    len = xd.length;

    // Append zeros to `xd` if shorter.
    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.
    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;

    // Subtract yd from xd.
    for (i = yd.length; i > k;) {

      if (xd[--i] < yd[i]) {
        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;
        --xd[j];
        xd[i] += BASE;
      }

      xd[i] -= yd[i];
    }

    // Remove trailing zeros.
    for (; xd[--len] === 0;) xd.pop();

    // Remove leading zeros and adjust exponent accordingly.
    for (; xd[0] === 0; xd.shift()) --e;

    // Zero?
    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);

    y.d = xd;
    y.e = getBase10Exponent(xd, e);

    return external ? finalise(y, pr, rm) : y;
  };


  /*
   *   n % 0 =  N
   *   n % N =  N
   *   n % I =  n
   *   0 % n =  0
   *  -0 % n = -0
   *   0 % 0 =  N
   *   0 % N =  N
   *   0 % I =  0
   *   N % n =  N
   *   N % 0 =  N
   *   N % N =  N
   *   N % I =  N
   *   I % n =  N
   *   I % 0 =  N
   *   I % N =  N
   *   I % I =  N
   *
   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * The result depends on the modulo mode.
   *
   */
  P.modulo = P.mod = function (y) {
    var q,
      x = this,
      Ctor = x.constructor;

    y = new Ctor(y);

    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.
    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);

    // Return x if y is ±Infinity or x is ±0.
    if (!y.d || x.d && !x.d[0]) {
      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
    }

    // Prevent rounding of intermediate calculations.
    external = false;

    if (Ctor.modulo == 9) {

      // Euclidian division: q = sign(y) * floor(x / abs(y))
      // result = x - q * y    where  0 <= result < abs(y)
      q = divide(x, y.abs(), 0, 3, 1);
      q.s *= y.s;
    } else {
      q = divide(x, y, 0, Ctor.modulo, 1);
    }

    q = q.times(y);

    external = true;

    return x.minus(q);
  };


  /*
   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,
   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   */
  P.naturalExponential = P.exp = function () {
    return naturalExponential(this);
  };


  /*
   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
   * rounded to `precision` significant digits using rounding mode `rounding`.
   *
   */
  P.naturalLogarithm = P.ln = function () {
    return naturalLogarithm(this);
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by
   * -1.
   *
   */
  P.negated = P.neg = function () {
    var x = new this.constructor(this);
    x.s = -x.s;
    return finalise(x);
  };


  /*
   *  n + 0 = n
   *  n + N = N
   *  n + I = I
   *  0 + n = n
   *  0 + 0 = 0
   *  0 + N = N
   *  0 + I = I
   *  N + n = N
   *  N + 0 = N
   *  N + N = N
   *  N + I = N
   *  I + n = I
   *  I + 0 = I
   *  I + N = N
   *  I + I = I
   *
   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   */
  P.plus = P.add = function (y) {
    var carry, d, e, i, k, len, pr, rm, xd, yd,
      x = this,
      Ctor = x.constructor;

    y = new Ctor(y);

    // If either is not finite...
    if (!x.d || !y.d) {

      // Return NaN if either is NaN.
      if (!x.s || !y.s) y = new Ctor(NaN);

      // Return x if y is finite and x is ±Infinity.
      // Return x if both are ±Infinity with the same sign.
      // Return NaN if both are ±Infinity with different signs.
      // Return y if x is finite and y is ±Infinity.
      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);

      return y;
    }

     // If signs differ...
    if (x.s != y.s) {
      y.s = -y.s;
      return x.minus(y);
    }

    xd = x.d;
    yd = y.d;
    pr = Ctor.precision;
    rm = Ctor.rounding;

    // If either is zero...
    if (!xd[0] || !yd[0]) {

      // Return x if y is zero.
      // Return y if y is non-zero.
      if (!yd[0]) y = new Ctor(x);

      return external ? finalise(y, pr, rm) : y;
    }

    // x and y are finite, non-zero numbers with the same sign.

    // Calculate base 1e7 exponents.
    k = mathfloor(x.e / LOG_BASE);
    e = mathfloor(y.e / LOG_BASE);

    xd = xd.slice();
    i = k - e;

    // If base 1e7 exponents differ...
    if (i) {

      if (i < 0) {
        d = xd;
        i = -i;
        len = yd.length;
      } else {
        d = yd;
        e = k;
        len = xd.length;
      }

      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.
      k = Math.ceil(pr / LOG_BASE);
      len = k > len ? k + 1 : len + 1;

      if (i > len) {
        i = len;
        d.length = 1;
      }

      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.
      d.reverse();
      for (; i--;) d.push(0);
      d.reverse();
    }

    len = xd.length;
    i = yd.length;

    // If yd is longer than xd, swap xd and yd so xd points to the longer array.
    if (len - i < 0) {
      i = len;
      d = yd;
      yd = xd;
      xd = d;
    }

    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.
    for (carry = 0; i;) {
      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
      xd[i] %= BASE;
    }

    if (carry) {
      xd.unshift(carry);
      ++e;
    }

    // Remove trailing zeros.
    // No need to check for zero, as +x + +y != 0 && -x + -y != 0
    for (len = xd.length; xd[--len] == 0;) xd.pop();

    y.d = xd;
    y.e = getBase10Exponent(xd, e);

    return external ? finalise(y, pr, rm) : y;
  };


  /*
   * Return the number of significant digits of the value of this Decimal.
   *
   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
   *
   */
  P.precision = P.sd = function (z) {
    var k,
      x = this;

    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);

    if (x.d) {
      k = getPrecision(x.d);
      if (z && x.e + 1 > k) k = x.e + 1;
    } else {
      k = NaN;
    }

    return k;
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
   * rounding mode `rounding`.
   *
   */
  P.round = function () {
    var x = this,
      Ctor = x.constructor;

    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
  };


  /*
   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-1, 1]
   *
   * sin(x) = x - x^3/3! + x^5/5! - ...
   *
   * sin(0)         = 0
   * sin(-0)        = -0
   * sin(Infinity)  = NaN
   * sin(-Infinity) = NaN
   * sin(NaN)       = NaN
   *
   */
  P.sine = P.sin = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite()) return new Ctor(NaN);
    if (x.isZero()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
    Ctor.rounding = 1;

    x = sine(Ctor, toLessThanHalfPi(Ctor, x));

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
  };


  /*
   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   *  sqrt(-n) =  N
   *  sqrt(N)  =  N
   *  sqrt(-I) =  N
   *  sqrt(I)  =  I
   *  sqrt(0)  =  0
   *  sqrt(-0) = -0
   *
   */
  P.squareRoot = P.sqrt = function () {
    var m, n, sd, r, rep, t,
      x = this,
      d = x.d,
      e = x.e,
      s = x.s,
      Ctor = x.constructor;

    // Negative/NaN/Infinity/zero?
    if (s !== 1 || !d || !d[0]) {
      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
    }

    external = false;

    // Initial estimate.
    s = Math.sqrt(+x);

    // Math.sqrt underflow/overflow?
    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
    if (s == 0 || s == 1 / 0) {
      n = digitsToString(d);

      if ((n.length + e) % 2 == 0) n += '0';
      s = Math.sqrt(n);
      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);

      if (s == 1 / 0) {
        n = '1e' + e;
      } else {
        n = s.toExponential();
        n = n.slice(0, n.indexOf('e') + 1) + e;
      }

      r = new Ctor(n);
    } else {
      r = new Ctor(s.toString());
    }

    sd = (e = Ctor.precision) + 3;

    // Newton-Raphson iteration.
    for (;;) {
      t = r;
      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);

      // TODO? Replace with for-loop and checkRoundingDigits.
      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
        n = n.slice(sd - 3, sd + 1);

        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or
        // 4999, i.e. approaching a rounding boundary, continue the iteration.
        if (n == '9999' || !rep && n == '4999') {

          // On the first iteration only, check to see if rounding up gives the exact result as the
          // nines may infinitely repeat.
          if (!rep) {
            finalise(t, e + 1, 0);

            if (t.times(t).eq(x)) {
              r = t;
              break;
            }
          }

          sd += 4;
          rep = 1;
        } else {

          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
          // If not, then there are further digits and m will be truthy.
          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

            // Truncate to the first rounding digit.
            finalise(r, e + 1, 1);
            m = !r.times(r).eq(x);
          }

          break;
        }
      }
    }

    external = true;

    return finalise(r, e, Ctor.rounding, m);
  };


  /*
   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-Infinity, Infinity]
   *
   * tan(0)         = 0
   * tan(-0)        = -0
   * tan(Infinity)  = NaN
   * tan(-Infinity) = NaN
   * tan(NaN)       = NaN
   *
   */
  P.tangent = P.tan = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite()) return new Ctor(NaN);
    if (x.isZero()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + 10;
    Ctor.rounding = 1;

    x = x.sin();
    x.s = 1;
    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
  };


  /*
   *  n * 0 = 0
   *  n * N = N
   *  n * I = I
   *  0 * n = 0
   *  0 * 0 = 0
   *  0 * N = N
   *  0 * I = N
   *  N * n = N
   *  N * 0 = N
   *  N * N = N
   *  N * I = N
   *  I * n = I
   *  I * 0 = N
   *  I * N = N
   *  I * I = I
   *
   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   */
  P.times = P.mul = function (y) {
    var carry, e, i, k, r, rL, t, xdL, ydL,
      x = this,
      Ctor = x.constructor,
      xd = x.d,
      yd = (y = new Ctor(y)).d;

    y.s *= x.s;

     // If either is NaN, ±Infinity or ±0...
    if (!xd || !xd[0] || !yd || !yd[0]) {

      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd

        // Return NaN if either is NaN.
        // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.
        ? NaN

        // Return ±Infinity if either is ±Infinity.
        // Return ±0 if either is ±0.
        : !xd || !yd ? y.s / 0 : y.s * 0);
    }

    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
    xdL = xd.length;
    ydL = yd.length;

    // Ensure xd points to the longer array.
    if (xdL < ydL) {
      r = xd;
      xd = yd;
      yd = r;
      rL = xdL;
      xdL = ydL;
      ydL = rL;
    }

    // Initialise the result array with zeros.
    r = [];
    rL = xdL + ydL;
    for (i = rL; i--;) r.push(0);

    // Multiply!
    for (i = ydL; --i >= 0;) {
      carry = 0;
      for (k = xdL + i; k > i;) {
        t = r[k] + yd[i] * xd[k - i - 1] + carry;
        r[k--] = t % BASE | 0;
        carry = t / BASE | 0;
      }

      r[k] = (r[k] + carry) % BASE | 0;
    }

    // Remove trailing zeros.
    for (; !r[--rL];) r.pop();

    if (carry) ++e;
    else r.shift();

    y.d = r;
    y.e = getBase10Exponent(r, e);

    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
  };


  /*
   * Return a string representing the value of this Decimal in base 2, round to `sd` significant
   * digits using rounding mode `rm`.
   *
   * If the optional `sd` argument is present then return binary exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toBinary = function (sd, rm) {
    return toStringBinary(this, 2, sd, rm);
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`
   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.
   *
   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toDecimalPlaces = P.toDP = function (dp, rm) {
    var x = this,
      Ctor = x.constructor;

    x = new Ctor(x);
    if (dp === void 0) return x;

    checkInt32(dp, 0, MAX_DIGITS);

    if (rm === void 0) rm = Ctor.rounding;
    else checkInt32(rm, 0, 8);

    return finalise(x, dp + x.e + 1, rm);
  };


  /*
   * Return a string representing the value of this Decimal in exponential notation rounded to
   * `dp` fixed decimal places using rounding mode `rounding`.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toExponential = function (dp, rm) {
    var str,
      x = this,
      Ctor = x.constructor;

    if (dp === void 0) {
      str = finiteToString(x, true);
    } else {
      checkInt32(dp, 0, MAX_DIGITS);

      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);

      x = finalise(new Ctor(x), dp + 1, rm);
      str = finiteToString(x, true, dp + 1);
    }

    return x.isNeg() && !x.isZero() ? '-' + str : str;
  };


  /*
   * Return a string representing the value of this Decimal in normal (fixed-point) notation to
   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is
   * omitted.
   *
   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
   * (-0).toFixed(3) is '0.000'.
   * (-0.5).toFixed(0) is '-0'.
   *
   */
  P.toFixed = function (dp, rm) {
    var str, y,
      x = this,
      Ctor = x.constructor;

    if (dp === void 0) {
      str = finiteToString(x);
    } else {
      checkInt32(dp, 0, MAX_DIGITS);

      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);

      y = finalise(new Ctor(x), dp + x.e + 1, rm);
      str = finiteToString(y, false, dp + y.e + 1);
    }

    // To determine whether to add the minus sign look at the value before it was rounded,
    // i.e. look at `x` rather than `y`.
    return x.isNeg() && !x.isZero() ? '-' + str : str;
  };


  /*
   * Return an array representing the value of this Decimal as a simple fraction with an integer
   * numerator and an integer denominator.
   *
   * The denominator will be a positive non-zero value less than or equal to the specified maximum
   * denominator. If a maximum denominator is not specified, the denominator will be the lowest
   * value necessary to represent the number exactly.
   *
   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.
   *
   */
  P.toFraction = function (maxD) {
    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,
      x = this,
      xd = x.d,
      Ctor = x.constructor;

    if (!xd) return new Ctor(x);

    n1 = d0 = new Ctor(1);
    d1 = n0 = new Ctor(0);

    d = new Ctor(d1);
    e = d.e = getPrecision(xd) - x.e - 1;
    k = e % LOG_BASE;
    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);

    if (maxD == null) {

      // d is 10**e, the minimum max-denominator needed.
      maxD = e > 0 ? d : n1;
    } else {
      n = new Ctor(maxD);
      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);
      maxD = n.gt(d) ? (e > 0 ? d : n1) : n;
    }

    external = false;
    n = new Ctor(digitsToString(xd));
    pr = Ctor.precision;
    Ctor.precision = e = xd.length * LOG_BASE * 2;

    for (;;)  {
      q = divide(n, d, 0, 1, 1);
      d2 = d0.plus(q.times(d1));
      if (d2.cmp(maxD) == 1) break;
      d0 = d1;
      d1 = d2;
      d2 = n1;
      n1 = n0.plus(q.times(d2));
      n0 = d2;
      d2 = d;
      d = n.minus(q.times(d2));
      n = d2;
    }

    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);
    n0 = n0.plus(d2.times(n1));
    d0 = d0.plus(d2.times(d1));
    n0.s = n1.s = x.s;

    // Determine which fraction is closer to x, n0/d0 or n1/d1?
    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1
        ? [n1, d1] : [n0, d0];

    Ctor.precision = pr;
    external = true;

    return r;
  };


  /*
   * Return a string representing the value of this Decimal in base 16, round to `sd` significant
   * digits using rounding mode `rm`.
   *
   * If the optional `sd` argument is present then return binary exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toHexadecimal = P.toHex = function (sd, rm) {
    return toStringBinary(this, 16, sd, rm);
  };


  /*
   * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding
   * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.
   *
   * The return value will always have the same sign as this Decimal, unless either this Decimal
   * or `y` is NaN, in which case the return value will be also be NaN.
   *
   * The return value is not affected by the value of `precision`.
   *
   * y {number|string|Decimal} The magnitude to round to a multiple of.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * 'toNearest() rounding mode not an integer: {rm}'
   * 'toNearest() rounding mode out of range: {rm}'
   *
   */
  P.toNearest = function (y, rm) {
    var x = this,
      Ctor = x.constructor;

    x = new Ctor(x);

    if (y == null) {

      // If x is not finite, return x.
      if (!x.d) return x;

      y = new Ctor(1);
      rm = Ctor.rounding;
    } else {
      y = new Ctor(y);
      if (rm === void 0) {
        rm = Ctor.rounding;
      } else {
        checkInt32(rm, 0, 8);
      }

      // If x is not finite, return x if y is not NaN, else NaN.
      if (!x.d) return y.s ? x : y;

      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.
      if (!y.d) {
        if (y.s) y.s = x.s;
        return y;
      }
    }

    // If y is not zero, calculate the nearest multiple of y to x.
    if (y.d[0]) {
      external = false;
      x = divide(x, y, 0, rm, 1).times(y);
      external = true;
      finalise(x);

    // If y is zero, return zero with the sign of x.
    } else {
      y.s = x.s;
      x = y;
    }

    return x;
  };


  /*
   * Return the value of this Decimal converted to a number primitive.
   * Zero keeps its sign.
   *
   */
  P.toNumber = function () {
    return +this;
  };


  /*
   * Return a string representing the value of this Decimal in base 8, round to `sd` significant
   * digits using rounding mode `rm`.
   *
   * If the optional `sd` argument is present then return binary exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toOctal = function (sd, rm) {
    return toStringBinary(this, 8, sd, rm);
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded
   * to `precision` significant digits using rounding mode `rounding`.
   *
   * ECMAScript compliant.
   *
   *   pow(x, NaN)                           = NaN
   *   pow(x, ±0)                            = 1

   *   pow(NaN, non-zero)                    = NaN
   *   pow(abs(x) > 1, +Infinity)            = +Infinity
   *   pow(abs(x) > 1, -Infinity)            = +0
   *   pow(abs(x) == 1, ±Infinity)           = NaN
   *   pow(abs(x) < 1, +Infinity)            = +0
   *   pow(abs(x) < 1, -Infinity)            = +Infinity
   *   pow(+Infinity, y > 0)                 = +Infinity
   *   pow(+Infinity, y < 0)                 = +0
   *   pow(-Infinity, odd integer > 0)       = -Infinity
   *   pow(-Infinity, even integer > 0)      = +Infinity
   *   pow(-Infinity, odd integer < 0)       = -0
   *   pow(-Infinity, even integer < 0)      = +0
   *   pow(+0, y > 0)                        = +0
   *   pow(+0, y < 0)                        = +Infinity
   *   pow(-0, odd integer > 0)              = -0
   *   pow(-0, even integer > 0)             = +0
   *   pow(-0, odd integer < 0)              = -Infinity
   *   pow(-0, even integer < 0)             = +Infinity
   *   pow(finite x < 0, finite non-integer) = NaN
   *
   * For non-integer or very large exponents pow(x, y) is calculated using
   *
   *   x^y = exp(y*ln(x))
   *
   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the
   * probability of an incorrectly rounded result
   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14
   * i.e. 1 in 250,000,000,000,000
   *
   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).
   *
   * y {number|string|Decimal} The power to which to raise this Decimal.
   *
   */
  P.toPower = P.pow = function (y) {
    var e, k, pr, r, rm, s,
      x = this,
      Ctor = x.constructor,
      yn = +(y = new Ctor(y));

    // Either ±Infinity, NaN or ±0?
    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));

    x = new Ctor(x);

    if (x.eq(1)) return x;

    pr = Ctor.precision;
    rm = Ctor.rounding;

    if (y.eq(1)) return finalise(x, pr, rm);

    // y exponent
    e = mathfloor(y.e / LOG_BASE);

    // If y is a small integer use the 'exponentiation by squaring' algorithm.
    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
      r = intPow(Ctor, x, k, pr);
      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
    }

    s = x.s;

    // if x is negative
    if (s < 0) {

      // if y is not an integer
      if (e < y.d.length - 1) return new Ctor(NaN);

      // Result is positive if x is negative and the last digit of integer y is even.
      if ((y.d[e] & 1) == 0) s = 1;

      // if x.eq(-1)
      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {
        x.s = s;
        return x;
      }
    }

    // Estimate result exponent.
    // x^y = 10^e,  where e = y * log10(x)
    // log10(x) = log10(x_significand) + x_exponent
    // log10(x_significand) = ln(x_significand) / ln(10)
    k = mathpow(+x, yn);
    e = k == 0 || !isFinite(k)
      ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))
      : new Ctor(k + '').e;

    // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.

    // Overflow/underflow?
    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);

    external = false;
    Ctor.rounding = x.s = 1;

    // Estimate the extra guard digits needed to ensure five correct rounding digits from
    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):
    // new Decimal(2.32456).pow('2087987436534566.46411')
    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815
    k = Math.min(12, (e + '').length);

    // r = x^y = exp(y*ln(x))
    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);

    // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)
    if (r.d) {

      // Truncate to the required precision plus five rounding digits.
      r = finalise(r, pr + 5, 1);

      // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate
      // the result.
      if (checkRoundingDigits(r.d, pr, rm)) {
        e = pr + 10;

        // Truncate to the increased precision plus five rounding digits.
        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);

        // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).
        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {
          r = finalise(r, pr + 1, 0);
        }
      }
    }

    r.s = s;
    external = true;
    Ctor.rounding = rm;

    return finalise(r, pr, rm);
  };


  /*
   * Return a string representing the value of this Decimal rounded to `sd` significant digits
   * using rounding mode `rounding`.
   *
   * Return exponential notation if `sd` is less than the number of digits necessary to represent
   * the integer part of the value in normal notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toPrecision = function (sd, rm) {
    var str,
      x = this,
      Ctor = x.constructor;

    if (sd === void 0) {
      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
    } else {
      checkInt32(sd, 1, MAX_DIGITS);

      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);

      x = finalise(new Ctor(x), sd, rm);
      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
    }

    return x.isNeg() && !x.isZero() ? '-' + str : str;
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`
   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if
   * omitted.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * 'toSD() digits out of range: {sd}'
   * 'toSD() digits not an integer: {sd}'
   * 'toSD() rounding mode not an integer: {rm}'
   * 'toSD() rounding mode out of range: {rm}'
   *
   */
  P.toSignificantDigits = P.toSD = function (sd, rm) {
    var x = this,
      Ctor = x.constructor;

    if (sd === void 0) {
      sd = Ctor.precision;
      rm = Ctor.rounding;
    } else {
      checkInt32(sd, 1, MAX_DIGITS);

      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);
    }

    return finalise(new Ctor(x), sd, rm);
  };


  /*
   * Return a string representing the value of this Decimal.
   *
   * Return exponential notation if this Decimal has a positive exponent equal to or greater than
   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.
   *
   */
  P.toString = function () {
    var x = this,
      Ctor = x.constructor,
      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);

    return x.isNeg() && !x.isZero() ? '-' + str : str;
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.
   *
   */
  P.truncated = P.trunc = function () {
    return finalise(new this.constructor(this), this.e + 1, 1);
  };


  /*
   * Return a string representing the value of this Decimal.
   * Unlike `toString`, negative zero will include the minus sign.
   *
   */
  P.valueOf = P.toJSON = function () {
    var x = this,
      Ctor = x.constructor,
      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);

    return x.isNeg() ? '-' + str : str;
  };


  /*
  // Add aliases to match BigDecimal method names.
  // P.add = P.plus;
  P.subtract = P.minus;
  P.multiply = P.times;
  P.divide = P.div;
  P.remainder = P.mod;
  P.compareTo = P.cmp;
  P.negate = P.neg;
   */


  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.


  /*
   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,
   *                           finiteToString, naturalExponential, naturalLogarithm
   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,
   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random
   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm
   *  convertBase              toStringBinary, parseOther
   *  cos                      P.cos
   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,
   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,
   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,
   *                           taylorSeries, atan2, parseOther
   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,
   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,
   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,
   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,
   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,
   *                           P.truncated, divide, getLn10, getPi, naturalExponential,
   *                           naturalLogarithm, ceil, floor, round, trunc
   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,
   *                           toStringBinary
   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther
   *  getLn10                  P.logarithm, naturalLogarithm
   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2
   *  getPrecision             P.precision, P.toFraction
   *  getZeroString            digitsToString, finiteToString
   *  intPow                   P.toPower, parseOther
   *  isOdd                    toLessThanHalfPi
   *  maxOrMin                 max, min
   *  naturalExponential       P.naturalExponential, P.toPower
   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,
   *                           P.toPower, naturalExponential
   *  nonFiniteToString        finiteToString, toStringBinary
   *  parseDecimal             Decimal
   *  parseOther               Decimal
   *  sin                      P.sin
   *  taylorSeries             P.cosh, P.sinh, cos, sin
   *  toLessThanHalfPi         P.cos, P.sin
   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal
   *  truncate                 intPow
   *
   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,
   *                           naturalLogarithm, config, parseOther, random, Decimal
   */


  function digitsToString(d) {
    var i, k, ws,
      indexOfLastWord = d.length - 1,
      str = '',
      w = d[0];

    if (indexOfLastWord > 0) {
      str += w;
      for (i = 1; i < indexOfLastWord; i++) {
        ws = d[i] + '';
        k = LOG_BASE - ws.length;
        if (k) str += getZeroString(k);
        str += ws;
      }

      w = d[i];
      ws = w + '';
      k = LOG_BASE - ws.length;
      if (k) str += getZeroString(k);
    } else if (w === 0) {
      return '0';
    }

    // Remove trailing zeros of last w.
    for (; w % 10 === 0;) w /= 10;

    return str + w;
  }


  function checkInt32(i, min, max) {
    if (i !== ~~i || i < min || i > max) {
      throw Error(invalidArgument + i);
    }
  }


  /*
   * Check 5 rounding digits if `repeating` is null, 4 otherwise.
   * `repeating == null` if caller is `log` or `pow`,
   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.
   */
  function checkRoundingDigits(d, i, rm, repeating) {
    var di, k, r, rd;

    // Get the length of the first word of the array d.
    for (k = d[0]; k >= 10; k /= 10) --i;

    // Is the rounding digit in the first word of d?
    if (--i < 0) {
      i += LOG_BASE;
      di = 0;
    } else {
      di = Math.ceil((i + 1) / LOG_BASE);
      i %= LOG_BASE;
    }

    // i is the index (0 - 6) of the rounding digit.
    // E.g. if within the word 3487563 the first rounding digit is 5,
    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563
    k = mathpow(10, LOG_BASE - i);
    rd = d[di] % k | 0;

    if (repeating == null) {
      if (i < 3) {
        if (i == 0) rd = rd / 100 | 0;
        else if (i == 1) rd = rd / 10 | 0;
        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;
      } else {
        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&
          (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||
            (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
      }
    } else {
      if (i < 4) {
        if (i == 0) rd = rd / 1000 | 0;
        else if (i == 1) rd = rd / 100 | 0;
        else if (i == 2) rd = rd / 10 | 0;
        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
      } else {
        r = ((repeating || rm < 4) && rd + 1 == k ||
        (!repeating && rm > 3) && rd + 1 == k / 2) &&
          (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;
      }
    }

    return r;
  }


  // Convert string of `baseIn` to an array of numbers of `baseOut`.
  // Eg. convertBase('255', 10, 16) returns [15, 15].
  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
  function convertBase(str, baseIn, baseOut) {
    var j,
      arr = [0],
      arrL,
      i = 0,
      strL = str.length;

    for (; i < strL;) {
      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;
      arr[0] += NUMERALS.indexOf(str.charAt(i++));
      for (j = 0; j < arr.length; j++) {
        if (arr[j] > baseOut - 1) {
          if (arr[j + 1] === void 0) arr[j + 1] = 0;
          arr[j + 1] += arr[j] / baseOut | 0;
          arr[j] %= baseOut;
        }
      }
    }

    return arr.reverse();
  }


  /*
   * cos(x) = 1 - x^2/2! + x^4/4! - ...
   * |x| < pi/2
   *
   */
  function cosine(Ctor, x) {
    var k, y,
      len = x.d.length;

    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1
    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1

    // Estimate the optimum number of times to use the argument reduction.
    if (len < 32) {
      k = Math.ceil(len / 3);
      y = (1 / tinyPow(4, k)).toString();
    } else {
      k = 16;
      y = '2.3283064365386962890625e-10';
    }

    Ctor.precision += k;

    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));

    // Reverse argument reduction
    for (var i = k; i--;) {
      var cos2x = x.times(x);
      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
    }

    Ctor.precision -= k;

    return x;
  }


  /*
   * Perform division in the specified base.
   */
  var divide = (function () {

    // Assumes non-zero x and k, and hence non-zero result.
    function multiplyInteger(x, k, base) {
      var temp,
        carry = 0,
        i = x.length;

      for (x = x.slice(); i--;) {
        temp = x[i] * k + carry;
        x[i] = temp % base | 0;
        carry = temp / base | 0;
      }

      if (carry) x.unshift(carry);

      return x;
    }

    function compare(a, b, aL, bL) {
      var i, r;

      if (aL != bL) {
        r = aL > bL ? 1 : -1;
      } else {
        for (i = r = 0; i < aL; i++) {
          if (a[i] != b[i]) {
            r = a[i] > b[i] ? 1 : -1;
            break;
          }
        }
      }

      return r;
    }

    function subtract(a, b, aL, base) {
      var i = 0;

      // Subtract b from a.
      for (; aL--;) {
        a[aL] -= i;
        i = a[aL] < b[aL] ? 1 : 0;
        a[aL] = i * base + a[aL] - b[aL];
      }

      // Remove leading zeros.
      for (; !a[0] && a.length > 1;) a.shift();
    }

    return function (x, y, pr, rm, dp, base) {
      var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,
        yL, yz,
        Ctor = x.constructor,
        sign = x.s == y.s ? 1 : -1,
        xd = x.d,
        yd = y.d;

      // Either NaN, Infinity or 0?
      if (!xd || !xd[0] || !yd || !yd[0]) {

        return new Ctor(// Return NaN if either NaN, or both Infinity or 0.
          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :

          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.
          xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);
      }

      if (base) {
        logBase = 1;
        e = x.e - y.e;
      } else {
        base = BASE;
        logBase = LOG_BASE;
        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
      }

      yL = yd.length;
      xL = xd.length;
      q = new Ctor(sign);
      qd = q.d = [];

      // Result exponent may be one less than e.
      // The digit array of a Decimal from toStringBinary may have trailing zeros.
      for (i = 0; yd[i] == (xd[i] || 0); i++);

      if (yd[i] > (xd[i] || 0)) e--;

      if (pr == null) {
        sd = pr = Ctor.precision;
        rm = Ctor.rounding;
      } else if (dp) {
        sd = pr + (x.e - y.e) + 1;
      } else {
        sd = pr;
      }

      if (sd < 0) {
        qd.push(1);
        more = true;
      } else {

        // Convert precision in number of base 10 digits to base 1e7 digits.
        sd = sd / logBase + 2 | 0;
        i = 0;

        // divisor < 1e7
        if (yL == 1) {
          k = 0;
          yd = yd[0];
          sd++;

          // k is the carry.
          for (; (i < xL || k) && sd--; i++) {
            t = k * base + (xd[i] || 0);
            qd[i] = t / yd | 0;
            k = t % yd | 0;
          }

          more = k || i < xL;

        // divisor >= 1e7
        } else {

          // Normalise xd and yd so highest order digit of yd is >= base/2
          k = base / (yd[0] + 1) | 0;

          if (k > 1) {
            yd = multiplyInteger(yd, k, base);
            xd = multiplyInteger(xd, k, base);
            yL = yd.length;
            xL = xd.length;
          }

          xi = yL;
          rem = xd.slice(0, yL);
          remL = rem.length;

          // Add zeros to make remainder as long as divisor.
          for (; remL < yL;) rem[remL++] = 0;

          yz = yd.slice();
          yz.unshift(0);
          yd0 = yd[0];

          if (yd[1] >= base / 2) ++yd0;

          do {
            k = 0;

            // Compare divisor and remainder.
            cmp = compare(yd, rem, yL, remL);

            // If divisor < remainder.
            if (cmp < 0) {

              // Calculate trial digit, k.
              rem0 = rem[0];
              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

              // k will be how many times the divisor goes into the current remainder.
              k = rem0 / yd0 | 0;

              //  Algorithm:
              //  1. product = divisor * trial digit (k)
              //  2. if product > remainder: product -= divisor, k--
              //  3. remainder -= product
              //  4. if product was < remainder at 2:
              //    5. compare new remainder and divisor
              //    6. If remainder > divisor: remainder -= divisor, k++

              if (k > 1) {
                if (k >= base) k = base - 1;

                // product = divisor * trial digit.
                prod = multiplyInteger(yd, k, base);
                prodL = prod.length;
                remL = rem.length;

                // Compare product and remainder.
                cmp = compare(prod, rem, prodL, remL);

                // product > remainder.
                if (cmp == 1) {
                  k--;

                  // Subtract divisor from product.
                  subtract(prod, yL < prodL ? yz : yd, prodL, base);
                }
              } else {

                // cmp is -1.
                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1
                // to avoid it. If k is 1 there is a need to compare yd and rem again below.
                if (k == 0) cmp = k = 1;
                prod = yd.slice();
              }

              prodL = prod.length;
              if (prodL < remL) prod.unshift(0);

              // Subtract product from remainder.
              subtract(rem, prod, remL, base);

              // If product was < previous remainder.
              if (cmp == -1) {
                remL = rem.length;

                // Compare divisor and new remainder.
                cmp = compare(yd, rem, yL, remL);

                // If divisor < new remainder, subtract divisor from remainder.
                if (cmp < 1) {
                  k++;

                  // Subtract divisor from remainder.
                  subtract(rem, yL < remL ? yz : yd, remL, base);
                }
              }

              remL = rem.length;
            } else if (cmp === 0) {
              k++;
              rem = [0];
            }    // if cmp === 1, k will be 0

            // Add the next digit, k, to the result array.
            qd[i++] = k;

            // Update the remainder.
            if (cmp && rem[0]) {
              rem[remL++] = xd[xi] || 0;
            } else {
              rem = [xd[xi]];
              remL = 1;
            }

          } while ((xi++ < xL || rem[0] !== void 0) && sd--);

          more = rem[0] !== void 0;
        }

        // Leading zero?
        if (!qd[0]) qd.shift();
      }

      // logBase is 1 when divide is being used for base conversion.
      if (logBase == 1) {
        q.e = e;
        inexact = more;
      } else {

        // To calculate q.e, first get the number of digits of qd[0].
        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;
        q.e = i + e * logBase - 1;

        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);
      }

      return q;
    };
  })();


  /*
   * Round `x` to `sd` significant digits using rounding mode `rm`.
   * Check for over/under-flow.
   */
   function finalise(x, sd, rm, isTruncated) {
    var digits, i, j, k, rd, roundUp, w, xd, xdi,
      Ctor = x.constructor;

    // Don't round if sd is null or undefined.
    out: if (sd != null) {
      xd = x.d;

      // Infinity/NaN.
      if (!xd) return x;

      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.
      // w: the word of xd containing rd, a base 1e7 number.
      // xdi: the index of w within xd.
      // digits: the number of digits of w.
      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if
      // they had leading zeros)
      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).

      // Get the length of the first word of the digits array xd.
      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;
      i = sd - digits;

      // Is the rounding digit in the first word of xd?
      if (i < 0) {
        i += LOG_BASE;
        j = sd;
        w = xd[xdi = 0];

        // Get the rounding digit at index j of w.
        rd = w / mathpow(10, digits - j - 1) % 10 | 0;
      } else {
        xdi = Math.ceil((i + 1) / LOG_BASE);
        k = xd.length;
        if (xdi >= k) {
          if (isTruncated) {

            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.
            for (; k++ <= xdi;) xd.push(0);
            w = rd = 0;
            digits = 1;
            i %= LOG_BASE;
            j = i - LOG_BASE + 1;
          } else {
            break out;
          }
        } else {
          w = k = xd[xdi];

          // Get the number of digits of w.
          for (digits = 1; k >= 10; k /= 10) digits++;

          // Get the index of rd within w.
          i %= LOG_BASE;

          // Get the index of rd within w, adjusted for leading zeros.
          // The number of leading zeros of w is given by LOG_BASE - digits.
          j = i - LOG_BASE + digits;

          // Get the rounding digit at index j of w.
          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
        }
      }

      // Are there any non-zero digits after the rounding digit?
      isTruncated = isTruncated || sd < 0 ||
        xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));

      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right
      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression
      // will give 714.

      roundUp = rm < 4
        ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
        : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&

          // Check whether the digit to the left of the rounding digit is odd.
          ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||
            rm == (x.s < 0 ? 8 : 7));

      if (sd < 1 || !xd[0]) {
        xd.length = 0;
        if (roundUp) {

          // Convert sd to decimal places.
          sd -= x.e + 1;

          // 1, 0.1, 0.01, 0.001, 0.0001 etc.
          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
          x.e = -sd || 0;
        } else {

          // Zero.
          xd[0] = x.e = 0;
        }

        return x;
      }

      // Remove excess digits.
      if (i == 0) {
        xd.length = xdi;
        k = 1;
        xdi--;
      } else {
        xd.length = xdi + 1;
        k = mathpow(10, LOG_BASE - i);

        // E.g. 56700 becomes 56000 if 7 is the rounding digit.
        // j > 0 means i > number of leading zeros of w.
        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
      }

      if (roundUp) {
        for (;;) {

          // Is the digit to be rounded up in the first word of xd?
          if (xdi == 0) {

            // i will be the length of xd[0] before k is added.
            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;
            j = xd[0] += k;
            for (k = 1; j >= 10; j /= 10) k++;

            // if i != k the length has increased.
            if (i != k) {
              x.e++;
              if (xd[0] == BASE) xd[0] = 1;
            }

            break;
          } else {
            xd[xdi] += k;
            if (xd[xdi] != BASE) break;
            xd[xdi--] = 0;
            k = 1;
          }
        }
      }

      // Remove trailing zeros.
      for (i = xd.length; xd[--i] === 0;) xd.pop();
    }

    if (external) {

      // Overflow?
      if (x.e > Ctor.maxE) {

        // Infinity.
        x.d = null;
        x.e = NaN;

      // Underflow?
      } else if (x.e < Ctor.minE) {

        // Zero.
        x.e = 0;
        x.d = [0];
        // Ctor.underflow = true;
      } // else Ctor.underflow = false;
    }

    return x;
  }


  function finiteToString(x, isExp, sd) {
    if (!x.isFinite()) return nonFiniteToString(x);
    var k,
      e = x.e,
      str = digitsToString(x.d),
      len = str.length;

    if (isExp) {
      if (sd && (k = sd - len) > 0) {
        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);
      } else if (len > 1) {
        str = str.charAt(0) + '.' + str.slice(1);
      }

      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;
    } else if (e < 0) {
      str = '0.' + getZeroString(-e - 1) + str;
      if (sd && (k = sd - len) > 0) str += getZeroString(k);
    } else if (e >= len) {
      str += getZeroString(e + 1 - len);
      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);
    } else {
      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);
      if (sd && (k = sd - len) > 0) {
        if (e + 1 === len) str += '.';
        str += getZeroString(k);
      }
    }

    return str;
  }


  // Calculate the base 10 exponent from the base 1e7 exponent.
  function getBase10Exponent(digits, e) {
    var w = digits[0];

    // Add the number of digits of the first word of the digits array.
    for ( e *= LOG_BASE; w >= 10; w /= 10) e++;
    return e;
  }


  function getLn10(Ctor, sd, pr) {
    if (sd > LN10_PRECISION) {

      // Reset global state in case the exception is caught.
      external = true;
      if (pr) Ctor.precision = pr;
      throw Error(precisionLimitExceeded);
    }
    return finalise(new Ctor(LN10), sd, 1, true);
  }


  function getPi(Ctor, sd, rm) {
    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);
    return finalise(new Ctor(PI), sd, rm, true);
  }


  function getPrecision(digits) {
    var w = digits.length - 1,
      len = w * LOG_BASE + 1;

    w = digits[w];

    // If non-zero...
    if (w) {

      // Subtract the number of trailing zeros of the last word.
      for (; w % 10 == 0; w /= 10) len--;

      // Add the number of digits of the first word.
      for (w = digits[0]; w >= 10; w /= 10) len++;
    }

    return len;
  }


  function getZeroString(k) {
    var zs = '';
    for (; k--;) zs += '0';
    return zs;
  }


  /*
   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an
   * integer of type number.
   *
   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.
   *
   */
  function intPow(Ctor, x, n, pr) {
    var isTruncated,
      r = new Ctor(1),

      // Max n of 9007199254740991 takes 53 loop iterations.
      // Maximum digits array length; leaves [28, 34] guard digits.
      k = Math.ceil(pr / LOG_BASE + 4);

    external = false;

    for (;;) {
      if (n % 2) {
        r = r.times(x);
        if (truncate(r.d, k)) isTruncated = true;
      }

      n = mathfloor(n / 2);
      if (n === 0) {

        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.
        n = r.d.length - 1;
        if (isTruncated && r.d[n] === 0) ++r.d[n];
        break;
      }

      x = x.times(x);
      truncate(x.d, k);
    }

    external = true;

    return r;
  }


  function isOdd(n) {
    return n.d[n.d.length - 1] & 1;
  }


  /*
   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.
   */
  function maxOrMin(Ctor, args, ltgt) {
    var y,
      x = new Ctor(args[0]),
      i = 0;

    for (; ++i < args.length;) {
      y = new Ctor(args[i]);
      if (!y.s) {
        x = y;
        break;
      } else if (x[ltgt](y)) {
        x = y;
      }
    }

    return x;
  }


  /*
   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant
   * digits.
   *
   * Taylor/Maclaurin series.
   *
   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
   *
   * Argument reduction:
   *   Repeat x = x / 32, k += 5, until |x| < 0.1
   *   exp(x) = exp(x / 2^k)^(2^k)
   *
   * Previously, the argument was initially reduced by
   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
   * found to be slower than just dividing repeatedly by 32 as above.
   *
   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000
   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000
   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)
   *
   *  exp(Infinity)  = Infinity
   *  exp(-Infinity) = 0
   *  exp(NaN)       = NaN
   *  exp(±0)        = 1
   *
   *  exp(x) is non-terminating for any finite, non-zero x.
   *
   *  The result will always be correctly rounded.
   *
   */
  function naturalExponential(x, sd) {
    var denominator, guard, j, pow, sum, t, wpr,
      rep = 0,
      i = 0,
      k = 0,
      Ctor = x.constructor,
      rm = Ctor.rounding,
      pr = Ctor.precision;

    // 0/NaN/Infinity?
    if (!x.d || !x.d[0] || x.e > 17) {

      return new Ctor(x.d
        ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0
        : x.s ? x.s < 0 ? 0 : x : 0 / 0);
    }

    if (sd == null) {
      external = false;
      wpr = pr;
    } else {
      wpr = sd;
    }

    t = new Ctor(0.03125);

    // while abs(x) >= 0.1
    while (x.e > -2) {

      // x = x / 2^5
      x = x.times(t);
      k += 5;
    }

    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision
    // necessary to ensure the first 4 rounding digits are correct.
    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
    wpr += guard;
    denominator = pow = sum = new Ctor(1);
    Ctor.precision = wpr;

    for (;;) {
      pow = finalise(pow.times(x), wpr, 1);
      denominator = denominator.times(++i);
      t = sum.plus(divide(pow, denominator, wpr, 1));

      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
        j = k;
        while (j--) sum = finalise(sum.times(sum), wpr, 1);

        // Check to see if the first 4 rounding digits are [49]999.
        // If so, repeat the summation with a higher precision, otherwise
        // e.g. with precision: 18, rounding: 1
        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)
        // `wpr - guard` is the index of first rounding digit.
        if (sd == null) {

          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
            Ctor.precision = wpr += 10;
            denominator = pow = t = new Ctor(1);
            i = 0;
            rep++;
          } else {
            return finalise(sum, Ctor.precision = pr, rm, external = true);
          }
        } else {
          Ctor.precision = pr;
          return sum;
        }
      }

      sum = t;
    }
  }


  /*
   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant
   * digits.
   *
   *  ln(-n)        = NaN
   *  ln(0)         = -Infinity
   *  ln(-0)        = -Infinity
   *  ln(1)         = 0
   *  ln(Infinity)  = Infinity
   *  ln(-Infinity) = NaN
   *  ln(NaN)       = NaN
   *
   *  ln(n) (n != 1) is non-terminating.
   *
   */
  function naturalLogarithm(y, sd) {
    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,
      n = 1,
      guard = 10,
      x = y,
      xd = x.d,
      Ctor = x.constructor,
      rm = Ctor.rounding,
      pr = Ctor.precision;

    // Is x negative or Infinity, NaN, 0 or 1?
    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {
      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
    }

    if (sd == null) {
      external = false;
      wpr = pr;
    } else {
      wpr = sd;
    }

    Ctor.precision = wpr += guard;
    c = digitsToString(xd);
    c0 = c.charAt(0);

    if (Math.abs(e = x.e) < 1.5e15) {

      // Argument reduction.
      // The series converges faster the closer the argument is to 1, so using
      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b
      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,
      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can
      // later be divided by this number, then separate out the power of 10 using
      // ln(a*10^b) = ln(a) + b*ln(10).

      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).
      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {
      // max n is 6 (gives 0.7 - 1.3)
      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
        x = x.times(y);
        c = digitsToString(x.d);
        c0 = c.charAt(0);
        n++;
      }

      e = x.e;

      if (c0 > 1) {
        x = new Ctor('0.' + c);
        e++;
      } else {
        x = new Ctor(c0 + '.' + c.slice(1));
      }
    } else {

      // The argument reduction method above may result in overflow if the argument y is a massive
      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this
      // function using ln(x*10^e) = ln(x) + e*ln(10).
      t = getLn10(Ctor, wpr + 2, pr).times(e + '');
      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);
      Ctor.precision = pr;

      return sd == null ? finalise(x, pr, rm, external = true) : x;
    }

    // x1 is x reduced to a value near 1.
    x1 = x;

    // Taylor series.
    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)
    // where x = (y - 1)/(y + 1)    (|x| < 1)
    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);
    x2 = finalise(x.times(x), wpr, 1);
    denominator = 3;

    for (;;) {
      numerator = finalise(numerator.times(x2), wpr, 1);
      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));

      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
        sum = sum.times(2);

        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an
        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.
        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));
        sum = divide(sum, new Ctor(n), wpr, 1);

        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has
        // been repeated previously) and the first 4 rounding digits 9999?
        // If so, restart the summation with a higher precision, otherwise
        // e.g. with precision: 12, rounding: 1
        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.
        // `wpr - guard` is the index of first rounding digit.
        if (sd == null) {
          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
            Ctor.precision = wpr += guard;
            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);
            x2 = finalise(x.times(x), wpr, 1);
            denominator = rep = 1;
          } else {
            return finalise(sum, Ctor.precision = pr, rm, external = true);
          }
        } else {
          Ctor.precision = pr;
          return sum;
        }
      }

      sum = t;
      denominator += 2;
    }
  }


  // ±Infinity, NaN.
  function nonFiniteToString(x) {
    // Unsigned.
    return String(x.s * x.s / 0);
  }


  /*
   * Parse the value of a new Decimal `x` from string `str`.
   */
  function parseDecimal(x, str) {
    var e, i, len;

    // Decimal point?
    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

    // Exponential form?
    if ((i = str.search(/e/i)) > 0) {

      // Determine exponent.
      if (e < 0) e = i;
      e += +str.slice(i + 1);
      str = str.substring(0, i);
    } else if (e < 0) {

      // Integer.
      e = str.length;
    }

    // Determine leading zeros.
    for (i = 0; str.charCodeAt(i) === 48; i++);

    // Determine trailing zeros.
    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);
    str = str.slice(i, len);

    if (str) {
      len -= i;
      x.e = e = e - i - 1;
      x.d = [];

      // Transform base

      // e is the base 10 exponent.
      // i is where to slice str to get the first word of the digits array.
      i = (e + 1) % LOG_BASE;
      if (e < 0) i += LOG_BASE;

      if (i < len) {
        if (i) x.d.push(+str.slice(0, i));
        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));
        str = str.slice(i);
        i = LOG_BASE - str.length;
      } else {
        i -= len;
      }

      for (; i--;) str += '0';
      x.d.push(+str);

      if (external) {

        // Overflow?
        if (x.e > x.constructor.maxE) {

          // Infinity.
          x.d = null;
          x.e = NaN;

        // Underflow?
        } else if (x.e < x.constructor.minE) {

          // Zero.
          x.e = 0;
          x.d = [0];
          // x.constructor.underflow = true;
        } // else x.constructor.underflow = false;
      }
    } else {

      // Zero.
      x.e = 0;
      x.d = [0];
    }

    return x;
  }


  /*
   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.
   */
  function parseOther(x, str) {
    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;

    if (str === 'Infinity' || str === 'NaN') {
      if (!+str) x.s = NaN;
      x.e = NaN;
      x.d = null;
      return x;
    }

    if (isHex.test(str))  {
      base = 16;
      str = str.toLowerCase();
    } else if (isBinary.test(str))  {
      base = 2;
    } else if (isOctal.test(str))  {
      base = 8;
    } else {
      throw Error(invalidArgument + str);
    }

    // Is there a binary exponent part?
    i = str.search(/p/i);

    if (i > 0) {
      p = +str.slice(i + 1);
      str = str.substring(2, i);
    } else {
      str = str.slice(2);
    }

    // Convert `str` as an integer then divide the result by `base` raised to a power such that the
    // fraction part will be restored.
    i = str.indexOf('.');
    isFloat = i >= 0;
    Ctor = x.constructor;

    if (isFloat) {
      str = str.replace('.', '');
      len = str.length;
      i = len - i;

      // log[10](16) = 1.2041... , log[10](88) = 1.9444....
      divisor = intPow(Ctor, new Ctor(base), i, i * 2);
    }

    xd = convertBase(str, base, BASE);
    xe = xd.length - 1;

    // Remove trailing zeros.
    for (i = xe; xd[i] === 0; --i) xd.pop();
    if (i < 0) return new Ctor(x.s * 0);
    x.e = getBase10Exponent(xd, xe);
    x.d = xd;
    external = false;

    // At what precision to perform the division to ensure exact conversion?
    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)
    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412
    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.
    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount
    // Therefore using 4 * the number of digits of str will always be enough.
    if (isFloat) x = divide(x, divisor, len * 4);

    // Multiply by the binary exponent part if present.
    if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));
    external = true;

    return x;
  }


  /*
   * sin(x) = x - x^3/3! + x^5/5! - ...
   * |x| < pi/2
   *
   */
  function sine(Ctor, x) {
    var k,
      len = x.d.length;

    if (len < 3) return taylorSeries(Ctor, 2, x, x);

    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)
    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)
    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))

    // Estimate the optimum number of times to use the argument reduction.
    k = 1.4 * Math.sqrt(len);
    k = k > 16 ? 16 : k | 0;

    x = x.times(1 / tinyPow(5, k));
    x = taylorSeries(Ctor, 2, x, x);

    // Reverse argument reduction
    var sin2_x,
      d5 = new Ctor(5),
      d16 = new Ctor(16),
      d20 = new Ctor(20);
    for (; k--;) {
      sin2_x = x.times(x);
      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
    }

    return x;
  }


  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.
  function taylorSeries(Ctor, n, x, y, isHyperbolic) {
    var j, t, u, x2,
      i = 1,
      pr = Ctor.precision,
      k = Math.ceil(pr / LOG_BASE);

    external = false;
    x2 = x.times(x);
    u = new Ctor(y);

    for (;;) {
      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);
      u = isHyperbolic ? y.plus(t) : y.minus(t);
      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);
      t = u.plus(y);

      if (t.d[k] !== void 0) {
        for (j = k; t.d[j] === u.d[j] && j--;);
        if (j == -1) break;
      }

      j = u;
      u = y;
      y = t;
      t = j;
      i++;
    }

    external = true;
    t.d.length = k + 1;

    return t;
  }


  // Exponent e must be positive and non-zero.
  function tinyPow(b, e) {
    var n = b;
    while (--e) n *= b;
    return n;
  }


  // Return the absolute value of `x` reduced to less than or equal to half pi.
  function toLessThanHalfPi(Ctor, x) {
    var t,
      isNeg = x.s < 0,
      pi = getPi(Ctor, Ctor.precision, 1),
      halfPi = pi.times(0.5);

    x = x.abs();

    if (x.lte(halfPi)) {
      quadrant = isNeg ? 4 : 1;
      return x;
    }

    t = x.divToInt(pi);

    if (t.isZero()) {
      quadrant = isNeg ? 3 : 2;
    } else {
      x = x.minus(t.times(pi));

      // 0 <= x < pi
      if (x.lte(halfPi)) {
        quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);
        return x;
      }

      quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);
    }

    return x.minus(pi).abs();
  }


  /*
   * Return the value of Decimal `x` as a string in base `baseOut`.
   *
   * If the optional `sd` argument is present include a binary exponent suffix.
   */
  function toStringBinary(x, baseOut, sd, rm) {
    var base, e, i, k, len, roundUp, str, xd, y,
      Ctor = x.constructor,
      isExp = sd !== void 0;

    if (isExp) {
      checkInt32(sd, 1, MAX_DIGITS);
      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);
    } else {
      sd = Ctor.precision;
      rm = Ctor.rounding;
    }

    if (!x.isFinite()) {
      str = nonFiniteToString(x);
    } else {
      str = finiteToString(x);
      i = str.indexOf('.');

      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:
      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))
      // minBinaryExponent = floor(decimalExponent * log[2](10))
      // log[2](10) = 3.321928094887362347870319429489390175864

      if (isExp) {
        base = 2;
        if (baseOut == 16) {
          sd = sd * 4 - 3;
        } else if (baseOut == 8) {
          sd = sd * 3 - 2;
        }
      } else {
        base = baseOut;
      }

      // Convert the number as an integer then divide the result by its base raised to a power such
      // that the fraction part will be restored.

      // Non-integer.
      if (i >= 0) {
        str = str.replace('.', '');
        y = new Ctor(1);
        y.e = str.length - i;
        y.d = convertBase(finiteToString(y), 10, base);
        y.e = y.d.length;
      }

      xd = convertBase(str, 10, base);
      e = len = xd.length;

      // Remove trailing zeros.
      for (; xd[--len] == 0;) xd.pop();

      if (!xd[0]) {
        str = isExp ? '0p+0' : '0';
      } else {
        if (i < 0) {
          e--;
        } else {
          x = new Ctor(x);
          x.d = xd;
          x.e = e;
          x = divide(x, y, sd, rm, 0, base);
          xd = x.d;
          e = x.e;
          roundUp = inexact;
        }

        // The rounding digit, i.e. the digit after the digit that may be rounded up.
        i = xd[sd];
        k = base / 2;
        roundUp = roundUp || xd[sd + 1] !== void 0;

        roundUp = rm < 4
          ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))
          : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||
            rm === (x.s < 0 ? 8 : 7));

        xd.length = sd;

        if (roundUp) {

          // Rounding up may mean the previous digit has to be rounded up and so on.
          for (; ++xd[--sd] > base - 1;) {
            xd[sd] = 0;
            if (!sd) {
              ++e;
              xd.unshift(1);
            }
          }
        }

        // Determine trailing zeros.
        for (len = xd.length; !xd[len - 1]; --len);

        // E.g. [4, 11, 15] becomes 4bf.
        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);

        // Add binary exponent suffix?
        if (isExp) {
          if (len > 1) {
            if (baseOut == 16 || baseOut == 8) {
              i = baseOut == 16 ? 4 : 3;
              for (--len; len % i; len++) str += '0';
              xd = convertBase(str, base, baseOut);
              for (len = xd.length; !xd[len - 1]; --len);

              // xd[0] will always be be 1
              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);
            } else {
              str = str.charAt(0) + '.' + str.slice(1);
            }
          }

          str =  str + (e < 0 ? 'p' : 'p+') + e;
        } else if (e < 0) {
          for (; ++e;) str = '0' + str;
          str = '0.' + str;
        } else {
          if (++e > len) for (e -= len; e-- ;) str += '0';
          else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);
        }
      }

      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;
    }

    return x.s < 0 ? '-' + str : str;
  }


  // Does not strip trailing zeros.
  function truncate(arr, len) {
    if (arr.length > len) {
      arr.length = len;
      return true;
    }
  }


  // Decimal methods


  /*
   *  abs
   *  acos
   *  acosh
   *  add
   *  asin
   *  asinh
   *  atan
   *  atanh
   *  atan2
   *  cbrt
   *  ceil
   *  clone
   *  config
   *  cos
   *  cosh
   *  div
   *  exp
   *  floor
   *  hypot
   *  ln
   *  log
   *  log2
   *  log10
   *  max
   *  min
   *  mod
   *  mul
   *  pow
   *  random
   *  round
   *  set
   *  sign
   *  sin
   *  sinh
   *  sqrt
   *  sub
   *  tan
   *  tanh
   *  trunc
   */


  /*
   * Return a new Decimal whose value is the absolute value of `x`.
   *
   * x {number|string|Decimal}
   *
   */
  function abs(x) {
    return new this(x).abs();
  }


  /*
   * Return a new Decimal whose value is the arccosine in radians of `x`.
   *
   * x {number|string|Decimal}
   *
   */
  function acos(x) {
    return new this(x).acos();
  }


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function acosh(x) {
    return new this(x).acosh();
  }


  /*
   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
  function add(x, y) {
    return new this(x).plus(y);
  }


  /*
   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function asin(x) {
    return new this(x).asin();
  }


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function asinh(x) {
    return new this(x).asinh();
  }


  /*
   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function atan(x) {
    return new this(x).atan();
  }


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function atanh(x) {
    return new this(x).atanh();
  }


  /*
   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi
   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-pi, pi]
   *
   * y {number|string|Decimal} The y-coordinate.
   * x {number|string|Decimal} The x-coordinate.
   *
   * atan2(±0, -0)               = ±pi
   * atan2(±0, +0)               = ±0
   * atan2(±0, -x)               = ±pi for x > 0
   * atan2(±0, x)                = ±0 for x > 0
   * atan2(-y, ±0)               = -pi/2 for y > 0
   * atan2(y, ±0)                = pi/2 for y > 0
   * atan2(±y, -Infinity)        = ±pi for finite y > 0
   * atan2(±y, +Infinity)        = ±0 for finite y > 0
   * atan2(±Infinity, x)         = ±pi/2 for finite x
   * atan2(±Infinity, -Infinity) = ±3*pi/4
   * atan2(±Infinity, +Infinity) = ±pi/4
   * atan2(NaN, x) = NaN
   * atan2(y, NaN) = NaN
   *
   */
  function atan2(y, x) {
    y = new this(y);
    x = new this(x);
    var r,
      pr = this.precision,
      rm = this.rounding,
      wpr = pr + 4;

    // Either NaN
    if (!y.s || !x.s) {
      r = new this(NaN);

    // Both ±Infinity
    } else if (!y.d && !x.d) {
      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
      r.s = y.s;

    // x is ±Infinity or y is ±0
    } else if (!x.d || y.isZero()) {
      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
      r.s = y.s;

    // y is ±Infinity or x is ±0
    } else if (!y.d || x.isZero()) {
      r = getPi(this, wpr, 1).times(0.5);
      r.s = y.s;

    // Both non-zero and finite
    } else if (x.s < 0) {
      this.precision = wpr;
      this.rounding = 1;
      r = this.atan(divide(y, x, wpr, 1));
      x = getPi(this, wpr, 1);
      this.precision = pr;
      this.rounding = rm;
      r = y.s < 0 ? r.minus(x) : r.plus(x);
    } else {
      r = this.atan(divide(y, x, wpr, 1));
    }

    return r;
  }


  /*
   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function cbrt(x) {
    return new this(x).cbrt();
  }


  /*
   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.
   *
   * x {number|string|Decimal}
   *
   */
  function ceil(x) {
    return finalise(x = new this(x), x.e + 1, 2);
  }


  /*
   * Configure global settings for a Decimal constructor.
   *
   * `obj` is an object with one or more of the following properties,
   *
   *   precision  {number}
   *   rounding   {number}
   *   toExpNeg   {number}
   *   toExpPos   {number}
   *   maxE       {number}
   *   minE       {number}
   *   modulo     {number}
   *   crypto     {boolean|number}
   *   defaults   {true}
   *
   * E.g. Decimal.config({ precision: 20, rounding: 4 })
   *
   */
  function config(obj) {
    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');
    var i, p, v,
      useDefaults = obj.defaults === true,
      ps = [
        'precision', 1, MAX_DIGITS,
        'rounding', 0, 8,
        'toExpNeg', -EXP_LIMIT, 0,
        'toExpPos', 0, EXP_LIMIT,
        'maxE', 0, EXP_LIMIT,
        'minE', -EXP_LIMIT, 0,
        'modulo', 0, 9
      ];

    for (i = 0; i < ps.length; i += 3) {
      if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];
      if ((v = obj[p]) !== void 0) {
        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;
        else throw Error(invalidArgument + p + ': ' + v);
      }
    }

    if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];
    if ((v = obj[p]) !== void 0) {
      if (v === true || v === false || v === 0 || v === 1) {
        if (v) {
          if (typeof crypto != 'undefined' && crypto &&
            (crypto.getRandomValues || crypto.randomBytes)) {
            this[p] = true;
          } else {
            throw Error(cryptoUnavailable);
          }
        } else {
          this[p] = false;
        }
      } else {
        throw Error(invalidArgument + p + ': ' + v);
      }
    }

    return this;
  }


  /*
   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function cos(x) {
    return new this(x).cos();
  }


  /*
   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function cosh(x) {
    return new this(x).cosh();
  }


  /*
   * Create and return a Decimal constructor with the same configuration properties as this Decimal
   * constructor.
   *
   */
  function clone(obj) {
    var i, p, ps;

    /*
     * The Decimal constructor and exported function.
     * Return a new Decimal instance.
     *
     * v {number|string|Decimal} A numeric value.
     *
     */
    function Decimal(v) {
      var e, i, t,
        x = this;

      // Decimal called without new.
      if (!(x instanceof Decimal)) return new Decimal(v);

      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor
      // which points to Object.
      x.constructor = Decimal;

      // Duplicate.
      if (v instanceof Decimal) {
        x.s = v.s;

        if (external) {
          if (!v.d || v.e > Decimal.maxE) {

            // Infinity.
            x.e = NaN;
            x.d = null;
          } else if (v.e < Decimal.minE) {

            // Zero.
            x.e = 0;
            x.d = [0];
          } else {
            x.e = v.e;
            x.d = v.d.slice();
          }
        } else {
          x.e = v.e;
          x.d = v.d ? v.d.slice() : v.d;
        }

        return;
      }

      t = typeof v;

      if (t === 'number') {
        if (v === 0) {
          x.s = 1 / v < 0 ? -1 : 1;
          x.e = 0;
          x.d = [0];
          return;
        }

        if (v < 0) {
          v = -v;
          x.s = -1;
        } else {
          x.s = 1;
        }

        // Fast path for small integers.
        if (v === ~~v && v < 1e7) {
          for (e = 0, i = v; i >= 10; i /= 10) e++;

          if (external) {
            if (e > Decimal.maxE) {
              x.e = NaN;
              x.d = null;
            } else if (e < Decimal.minE) {
              x.e = 0;
              x.d = [0];
            } else {
              x.e = e;
              x.d = [v];
            }
          } else {
            x.e = e;
            x.d = [v];
          }

          return;

        // Infinity, NaN.
        } else if (v * 0 !== 0) {
          if (!v) x.s = NaN;
          x.e = NaN;
          x.d = null;
          return;
        }

        return parseDecimal(x, v.toString());

      } else if (t !== 'string') {
        throw Error(invalidArgument + v);
      }

      // Minus sign?
      if ((i = v.charCodeAt(0)) === 45) {
        v = v.slice(1);
        x.s = -1;
      } else {
        // Plus sign?
        if (i === 43) v = v.slice(1);
        x.s = 1;
      }

      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
    }

    Decimal.prototype = P;

    Decimal.ROUND_UP = 0;
    Decimal.ROUND_DOWN = 1;
    Decimal.ROUND_CEIL = 2;
    Decimal.ROUND_FLOOR = 3;
    Decimal.ROUND_HALF_UP = 4;
    Decimal.ROUND_HALF_DOWN = 5;
    Decimal.ROUND_HALF_EVEN = 6;
    Decimal.ROUND_HALF_CEIL = 7;
    Decimal.ROUND_HALF_FLOOR = 8;
    Decimal.EUCLID = 9;

    Decimal.config = Decimal.set = config;
    Decimal.clone = clone;
    Decimal.isDecimal = isDecimalInstance;

    Decimal.abs = abs;
    Decimal.acos = acos;
    Decimal.acosh = acosh;        // ES6
    Decimal.add = add;
    Decimal.asin = asin;
    Decimal.asinh = asinh;        // ES6
    Decimal.atan = atan;
    Decimal.atanh = atanh;        // ES6
    Decimal.atan2 = atan2;
    Decimal.cbrt = cbrt;          // ES6
    Decimal.ceil = ceil;
    Decimal.cos = cos;
    Decimal.cosh = cosh;          // ES6
    Decimal.div = div;
    Decimal.exp = exp;
    Decimal.floor = floor;
    Decimal.hypot = hypot;        // ES6
    Decimal.ln = ln;
    Decimal.log = log;
    Decimal.log10 = log10;        // ES6
    Decimal.log2 = log2;          // ES6
    Decimal.max = max;
    Decimal.min = min;
    Decimal.mod = mod;
    Decimal.mul = mul;
    Decimal.pow = pow;
    Decimal.random = random;
    Decimal.round = round;
    Decimal.sign = sign;          // ES6
    Decimal.sin = sin;
    Decimal.sinh = sinh;          // ES6
    Decimal.sqrt = sqrt;
    Decimal.sub = sub;
    Decimal.tan = tan;
    Decimal.tanh = tanh;          // ES6
    Decimal.trunc = trunc;        // ES6

    if (obj === void 0) obj = {};
    if (obj) {
      if (obj.defaults !== true) {
        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];
        for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];
      }
    }

    Decimal.config(obj);

    return Decimal;
  }


  /*
   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
  function div(x, y) {
    return new this(x).div(y);
  }


  /*
   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} The power to which to raise the base of the natural log.
   *
   */
  function exp(x) {
    return new this(x).exp();
  }


  /*
   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.
   *
   * x {number|string|Decimal}
   *
   */
  function floor(x) {
    return finalise(x = new this(x), x.e + 1, 3);
  }


  /*
   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,
   * rounded to `precision` significant digits using rounding mode `rounding`.
   *
   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)
   *
   * arguments {number|string|Decimal}
   *
   */
  function hypot() {
    var i, n,
      t = new this(0);

    external = false;

    for (i = 0; i < arguments.length;) {
      n = new this(arguments[i++]);
      if (!n.d) {
        if (n.s) {
          external = true;
          return new this(1 / 0);
        }
        t = n;
      } else if (t.d) {
        t = t.plus(n.times(n));
      }
    }

    external = true;

    return t.sqrt();
  }


  /*
   * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),
   * otherwise return false.
   *
   */
  function isDecimalInstance(obj) {
    return obj instanceof Decimal || obj && obj.name === '[object Decimal]' || false;
  }


  /*
   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function ln(x) {
    return new this(x).ln();
  }


  /*
   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base
   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.
   *
   * log[y](x)
   *
   * x {number|string|Decimal} The argument of the logarithm.
   * y {number|string|Decimal} The base of the logarithm.
   *
   */
  function log(x, y) {
    return new this(x).log(y);
  }


  /*
   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function log2(x) {
    return new this(x).log(2);
  }


  /*
   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function log10(x) {
    return new this(x).log(10);
  }


  /*
   * Return a new Decimal whose value is the maximum of the arguments.
   *
   * arguments {number|string|Decimal}
   *
   */
  function max() {
    return maxOrMin(this, arguments, 'lt');
  }


  /*
   * Return a new Decimal whose value is the minimum of the arguments.
   *
   * arguments {number|string|Decimal}
   *
   */
  function min() {
    return maxOrMin(this, arguments, 'gt');
  }


  /*
   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits
   * using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
  function mod(x, y) {
    return new this(x).mod(y);
  }


  /*
   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
  function mul(x, y) {
    return new this(x).mul(y);
  }


  /*
   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} The base.
   * y {number|string|Decimal} The exponent.
   *
   */
  function pow(x, y) {
    return new this(x).pow(y);
  }


  /*
   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with
   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros
   * are produced).
   *
   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.
   *
   */
  function random(sd) {
    var d, e, k, n,
      i = 0,
      r = new this(1),
      rd = [];

    if (sd === void 0) sd = this.precision;
    else checkInt32(sd, 1, MAX_DIGITS);

    k = Math.ceil(sd / LOG_BASE);

    if (!this.crypto) {
      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;

    // Browsers supporting crypto.getRandomValues.
    } else if (crypto.getRandomValues) {
      d = crypto.getRandomValues(new Uint32Array(k));

      for (; i < k;) {
        n = d[i];

        // 0 <= n < 4294967296
        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).
        if (n >= 4.29e9) {
          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];
        } else {

          // 0 <= n <= 4289999999
          // 0 <= (n % 1e7) <= 9999999
          rd[i++] = n % 1e7;
        }
      }

    // Node.js supporting crypto.randomBytes.
    } else if (crypto.randomBytes) {

      // buffer
      d = crypto.randomBytes(k *= 4);

      for (; i < k;) {

        // 0 <= n < 2147483648
        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);

        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).
        if (n >= 2.14e9) {
          crypto.randomBytes(4).copy(d, i);
        } else {

          // 0 <= n <= 2139999999
          // 0 <= (n % 1e7) <= 9999999
          rd.push(n % 1e7);
          i += 4;
        }
      }

      i = k / 4;
    } else {
      throw Error(cryptoUnavailable);
    }

    k = rd[--i];
    sd %= LOG_BASE;

    // Convert trailing digits to zeros according to sd.
    if (k && sd) {
      n = mathpow(10, LOG_BASE - sd);
      rd[i] = (k / n | 0) * n;
    }

    // Remove trailing words which are zero.
    for (; rd[i] === 0; i--) rd.pop();

    // Zero?
    if (i < 0) {
      e = 0;
      rd = [0];
    } else {
      e = -1;

      // Remove leading words which are zero and adjust exponent accordingly.
      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();

      // Count the digits of the first word of rd to determine leading zeros.
      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;

      // Adjust the exponent for leading zeros of the first word of rd.
      if (k < LOG_BASE) e -= LOG_BASE - k;
    }

    r.e = e;
    r.d = rd;

    return r;
  }


  /*
   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.
   *
   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).
   *
   * x {number|string|Decimal}
   *
   */
  function round(x) {
    return finalise(x = new this(x), x.e + 1, this.rounding);
  }


  /*
   * Return
   *   1    if x > 0,
   *  -1    if x < 0,
   *   0    if x is 0,
   *  -0    if x is -0,
   *   NaN  otherwise
   *
   * x {number|string|Decimal}
   *
   */
  function sign(x) {
    x = new this(x);
    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;
  }


  /*
   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits
   * using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function sin(x) {
    return new this(x).sin();
  }


  /*
   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function sinh(x) {
    return new this(x).sinh();
  }


  /*
   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function sqrt(x) {
    return new this(x).sqrt();
  }


  /*
   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits
   * using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
  function sub(x, y) {
    return new this(x).sub(y);
  }


  /*
   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function tan(x) {
    return new this(x).tan();
  }


  /*
   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function tanh(x) {
    return new this(x).tanh();
  }


  /*
   * Return a new Decimal whose value is `x` truncated to an integer.
   *
   * x {number|string|Decimal}
   *
   */
  function trunc(x) {
    return finalise(x = new this(x), x.e + 1, 1);
  }


  // Create and configure initial Decimal constructor.
  Decimal = clone(DEFAULTS);

  Decimal['default'] = Decimal.Decimal = Decimal;

  // Create the internal constants from their string values.
  LN10 = new Decimal(LN10);
  PI = new Decimal(PI);


  // Export.


  // AMD.
  if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return Decimal;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

  // Node and other environments that support module.exports.
  } else {}
})(this);


/***/ }),
/* 65 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export loadUnit */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return loadUnitsJson; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return loadUnitsTxt; });
/* harmony import */ var _evaluator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9);
/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);
/* harmony import */ var _Tree__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);



function loadUnit(scope, data, postEvaluate) {
    const { code: line } = Object(_evaluator__WEBPACK_IMPORTED_MODULE_0__[/* stripCommentsTrim */ "e"])(data.line);
    if (line.length === 0)
        return;
    //if (line.indexOf("=") >= 0 && line.split("=")[0].search(/[\(\[]/) >= 0)
    //	return;
    const tree = Object(_parser__WEBPACK_IMPORTED_MODULE_1__[/* parse */ "c"])(line);
    if (tree instanceof _Tree__WEBPACK_IMPORTED_MODULE_2__[/* FunctionCallNode */ "a"] && tree.fnname === "=") {
        const nameNode = tree.operands[0];
        const name = nameNode instanceof _Tree__WEBPACK_IMPORTED_MODULE_2__[/* IdentifierNode */ "b"] && nameNode.identifier;
        if (!name) {
            postEvaluate.push({ evaluateNode: tree });
            return;
        }
        scope.setUnitOrPrefixRaw(name, tree);
        scope.docMap.set(name, data.info);
        postEvaluate.push({ reevaluateUnit: name });
    }
    else if (tree instanceof _Tree__WEBPACK_IMPORTED_MODULE_2__[/* FunctionCallNode */ "a"] && tree.fnname === "!") {
        scope.docMap.set(tree.operands[0].identifier, data.info);
        postEvaluate.push({ evaluateNode: tree });
    }
    else {
        postEvaluate.push({ evaluateNode: tree });
    }
}
function applyPostEvaluate(scope, { reevaluateUnit, evaluateNode }) {
    try {
        if (reevaluateUnit)
            scope.getUnit(reevaluateUnit);
        if (evaluateNode)
            Object(_evaluator__WEBPACK_IMPORTED_MODULE_0__[/* evaluate */ "b"])(evaluateNode, scope);
    }
    catch (e) {
        console.error("force-evaluate unit", reevaluateUnit || evaluateNode, e);
    }
}
function loadUnitsJson(scope, filename, data, immediately = false) {
    const postEvaluate = immediately
        ? {
            push(x) {
                applyPostEvaluate(scope, x);
            },
        }
        : [];
    for (let i = 0; i < data.length; i++) {
        try {
            loadUnit(scope, data[i], postEvaluate);
        }
        catch (e) {
            console.error(filename + ":" + (i + 1), data[i], e);
        }
    }
    // force evaluate all units
    if (Array.isArray(postEvaluate))
        for (const p of postEvaluate) {
            applyPostEvaluate(scope, p);
        }
}
const loadUnitsTxt = (scope, filename, data, immediately) => {
    loadUnitsJson(scope, filename, data
        .split("\n")
        .map(line => ({ line, info: { comment: "", headings: [] } })), immediately);
};


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(95), __esModule: true };

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(97);
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(18) && !__webpack_require__(37)(function () {
  return Object.defineProperty(__webpack_require__(69)('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(26);
var document = __webpack_require__(16).document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(21);
var toIObject = __webpack_require__(27);
var arrayIndexOf = __webpack_require__(102)(false);
var IE_PROTO = __webpack_require__(52)('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(72);
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),
/* 72 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _iterator = __webpack_require__(105);

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = __webpack_require__(117);

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(44);
var $export = __webpack_require__(24);
var redefine = __webpack_require__(75);
var hide = __webpack_require__(25);
var Iterators = __webpack_require__(57);
var $iterCreate = __webpack_require__(109);
var setToStringTag = __webpack_require__(59);
var getPrototypeOf = __webpack_require__(112);
var ITERATOR = __webpack_require__(28)('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(25);


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(70);
var hiddenKeys = __webpack_require__(54).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(46);
var createDesc = __webpack_require__(42);
var toIObject = __webpack_require__(27);
var toPrimitive = __webpack_require__(49);
var has = __webpack_require__(21);
var IE8_DOM_DEFINE = __webpack_require__(68);
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(18) ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};


/***/ }),
/* 78 */
/***/ (function(module) {

module.exports = JSON.parse("[{\"line\":\"kg!\",\"info\":{\"headingsIndex\":[1,1],\"headingLevel\":2,\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.1. SI units\"],\"comment\":\"Mass of the international prototype\"}},{\"line\":\"kilogram = kg\",\"info\":{\"headingsIndex\":[1,1],\"headingLevel\":2,\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.1. SI units\"],\"comment\":\"Mass of the international prototype\"}},{\"line\":\"s!\",\"info\":{\"headingsIndex\":[1,1],\"headingLevel\":2,\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.1. SI units\"],\"comment\":\"Duration of 9192631770 periods of the radiation\\ncorresponding to the transition between the two hyperfine\\nlevels of the ground state of the cesium-133 atom\"}},{\"line\":\"second = s\",\"info\":{\"headingsIndex\":[1,1],\"headingLevel\":2,\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.1. SI units\"],\"comment\":\"Duration of 9192631770 periods of the radiation\\ncorresponding to the transition between the two hyperfine\\nlevels of the ground state of the cesium-133 atom\"}},{\"line\":\"m!\",\"info\":{\"headingsIndex\":[1,1],\"headingLevel\":2,\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.1. SI units\"],\"comment\":\"Length of the path traveled by light in a vacuum\\nduring 1|299792458 seconds.  Originally meant to be\\n1e-7 of the length along a meridian from the equator\\nto a pole.\"}},{\"line\":\"meter = m\",\"info\":{\"headingsIndex\":[1,1],\"headingLevel\":2,\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.1. SI units\"],\"comment\":\"Length of the path traveled by light in a vacuum\\nduring 1|299792458 seconds.  Originally meant to be\\n1e-7 of the length along a meridian from the equator\\nto a pole.\"}},{\"line\":\"A!\",\"info\":{\"headingsIndex\":[1,1],\"headingLevel\":2,\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.1. SI units\"],\"comment\":\"The current which produces a force of 2e-7 N/m between two\\ninfinitely long wires that are 1 meter apart\"}},{\"line\":\"ampere = A\",\"info\":{\"headingsIndex\":[1,1],\"headingLevel\":2,\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.1. SI units\"],\"comment\":\"The current which produces a force of 2e-7 N/m between two\\ninfinitely long wires that are 1 meter apart\"}},{\"line\":\"amp = ampere\",\"info\":{\"headingsIndex\":[1,1],\"headingLevel\":2,\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.1. SI units\"],\"comment\":\"The current which produces a force of 2e-7 N/m between two\\ninfinitely long wires that are 1 meter apart\"}},{\"line\":\"cd!\",\"info\":{\"headingsIndex\":[1,1],\"headingLevel\":2,\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.1. SI units\"],\"comment\":\"Luminous intensity in a given direction of a source which\\nemits monochromatic radiation at 540e12 Hz with radiant\\nintensity 1|683 W/steradian.  (This differs from radiant\\nintensity (W/sr) in that it is adjusted for human\\nperceptual dependence on wavelength.  The frequency of\\n540e12 Hz (yellow) is where human perception is most\\nefficient.)\"}},{\"line\":\"candela = cd\",\"info\":{\"headingsIndex\":[1,1],\"headingLevel\":2,\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.1. SI units\"],\"comment\":\"Luminous intensity in a given direction of a source which\\nemits monochromatic radiation at 540e12 Hz with radiant\\nintensity 1|683 W/steradian.  (This differs from radiant\\nintensity (W/sr) in that it is adjusted for human\\nperceptual dependence on wavelength.  The frequency of\\n540e12 Hz (yellow) is where human perception is most\\nefficient.)\"}},{\"line\":\"mol!\",\"info\":{\"headingsIndex\":[1,1],\"headingLevel\":2,\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.1. SI units\"],\"comment\":\"The amount of substance of a system which contains as many\\nelementary entities as there are atoms in 0.012 kg of\\ncarbon 12.  The elementary entities must be specified and\\nmay be atoms, molecules, ions, electrons, or other\\nparticles or groups of particles.  It is understood that\\nunbound atoms of carbon 12, at rest and in the ground\\nstate, are referred to.\"}},{\"line\":\"mole = mol\",\"info\":{\"headingsIndex\":[1,1],\"headingLevel\":2,\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.1. SI units\"],\"comment\":\"The amount of substance of a system which contains as many\\nelementary entities as there are atoms in 0.012 kg of\\ncarbon 12.  The elementary entities must be specified and\\nmay be atoms, molecules, ions, electrons, or other\\nparticles or groups of particles.  It is understood that\\nunbound atoms of carbon 12, at rest and in the ground\\nstate, are referred to.\"}},{\"line\":\"K!\",\"info\":{\"headingsIndex\":[1,1],\"headingLevel\":2,\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.1. SI units\"],\"comment\":\"1|273.16 of the thermodynamic temperature of the triple\\npoint of water\"}},{\"line\":\"kelvin = K\",\"info\":{\"headingsIndex\":[1,1],\"headingLevel\":2,\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.1. SI units\"],\"comment\":\"1|273.16 of the thermodynamic temperature of the triple\\npoint of water\"}},{\"line\":\"radian = 1\",\"info\":{\"headingsIndex\":[1,2],\"headingLevel\":2,\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.2. The radian and steradian are defined as dimensionless primitive units.\\nThe radian is equal to m/m and the steradian to m^2/m^2 so these units are\\ndimensionless. Retaining them as named units is useful because it allows\\nclarity in expressions and makes the meaning of unit definitions more clear.\\nThese units will reduce to 1 in conversions but not for sums of units or for\\narguments to functions.\"],\"comment\":\"The angle subtended at the center of a circle by\\nan arc equal in length to the radius of the\\ncircle\\nSolid angle which cuts off an area of the surface\\nof the sphere equal to that of a square with\\nsides of length equal to the radius of the\\nsphere\"}},{\"line\":\"sr = 1\",\"info\":{\"headingsIndex\":[1,2],\"headingLevel\":2,\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.2. The radian and steradian are defined as dimensionless primitive units.\\nThe radian is equal to m/m and the steradian to m^2/m^2 so these units are\\ndimensionless. Retaining them as named units is useful because it allows\\nclarity in expressions and makes the meaning of unit definitions more clear.\\nThese units will reduce to 1 in conversions but not for sums of units or for\\narguments to functions.\"],\"comment\":\"The angle subtended at the center of a circle by\\nan arc equal in length to the radius of the\\ncircle\\nSolid angle which cuts off an area of the surface\\nof the sphere equal to that of a square with\\nsides of length equal to the radius of the\\nsphere\"}},{\"line\":\"steradian = sr\",\"info\":{\"headingsIndex\":[1,2],\"headingLevel\":2,\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.2. The radian and steradian are defined as dimensionless primitive units.\\nThe radian is equal to m/m and the steradian to m^2/m^2 so these units are\\ndimensionless. Retaining them as named units is useful because it allows\\nclarity in expressions and makes the meaning of unit definitions more clear.\\nThese units will reduce to 1 in conversions but not for sums of units or for\\narguments to functions.\"],\"comment\":\"The angle subtended at the center of a circle by\\nan arc equal in length to the radius of the\\ncircle\\nSolid angle which cuts off an area of the surface\\nof the sphere equal to that of a square with\\nsides of length equal to the radius of the\\nsphere\"}},{\"line\":\"US$!\",\"info\":{\"headingsIndex\":[1,3],\"headingLevel\":2,\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.3. Some primitive non-SI units\"],\"comment\":\"The US dollar is chosen arbitrarily to be the primitive\\nunit of money.\"}},{\"line\":\"bit!\",\"info\":{\"headingsIndex\":[1,3],\"headingLevel\":2,\"headings\":[\"1. Primitive units. Any unit defined to contain a '!' character is a\\nprimitive unit which will not be reduced any further. All units should\\nreduce to primitive units.\",\"1.3. Some primitive non-SI units\"],\"comment\":\"Basic unit of information (entropy).  The entropy in bits\\nof a random variable over a finite alphabet is defined\\nto be the sum of -p(i)*log2(p(i)) over the alphabet where\\np(i) is the probability that the random variable takes\\non the value i.\"}},{\"line\":\"yotta_ = 1e24\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Greek or Latin octo, \\\"eight\\\"\"}},{\"line\":\"zetta_ = 1e21\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Latin septem, \\\"seven\\\"\"}},{\"line\":\"exa_ = 1e18\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Greek hex, \\\"six\\\"\"}},{\"line\":\"peta_ = 1e15\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Greek pente, \\\"five\\\"\"}},{\"line\":\"tera_ = 1e12\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Greek teras, \\\"monster\\\"\"}},{\"line\":\"giga_ = 1e9\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Greek gigas, \\\"giant\\\"\"}},{\"line\":\"mega_ = 1e6\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Greek megas, \\\"large\\\"\"}},{\"line\":\"myria_ = 1e4\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Not an official SI prefix\"}},{\"line\":\"kilo_ = 1e3\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Greek chilioi, \\\"thousand\\\"\"}},{\"line\":\"hecto_ = 1e2\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Greek hekaton, \\\"hundred\\\"\"}},{\"line\":\"deca_ = 1e1\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Greek deka, \\\"ten\\\"\"}},{\"line\":\"deka_ = deca\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Greek deka, \\\"ten\\\"\"}},{\"line\":\"deci_ = 1e-1\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Latin decimus, \\\"tenth\\\"\"}},{\"line\":\"centi_ = 1e-2\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Latin centum, \\\"hundred\\\"\"}},{\"line\":\"milli_ = 1e-3\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Latin mille, \\\"thousand\\\"\"}},{\"line\":\"micro_ = 1e-6\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Latin micro or Greek mikros, \\\"small\\\"\"}},{\"line\":\"nano_ = 1e-9\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Latin nanus or Greek nanos, \\\"dwarf\\\"\"}},{\"line\":\"pico_ = 1e-12\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Spanish pico, \\\"a bit\\\"\"}},{\"line\":\"femto_ = 1e-15\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Danish-Norwegian femten, \\\"fifteen\\\"\"}},{\"line\":\"atto_ = 1e-18\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Danish-Norwegian atten, \\\"eighteen\\\"\"}},{\"line\":\"zepto_ = 1e-21\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Latin septem, \\\"seven\\\"\"}},{\"line\":\"yocto_ = 1e-24\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"Greek or Latin octo, \\\"eight\\\"\"}},{\"line\":\"quarter_ = 1|4\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"semi_ = 0.5\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"demi_ = 0.5\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"hemi_ = 0.5\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"half_ = 0.5\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"double_ = 2\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"triple_ = 3\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"treble_ = 3\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"kibi_ = 2^10\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"In response to the convention of illegally\\nand confusingly using metric prefixes for\\npowers of two, the International\\nElectrotechnical Commission aproved these\\nbinary prefixes for use in 1998.  If you\\nwant to refer to \\\"megabytes\\\" using the\\nbinary definition, use these prefixes.\"}},{\"line\":\"mebi_ = 2^20\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"In response to the convention of illegally\\nand confusingly using metric prefixes for\\npowers of two, the International\\nElectrotechnical Commission aproved these\\nbinary prefixes for use in 1998.  If you\\nwant to refer to \\\"megabytes\\\" using the\\nbinary definition, use these prefixes.\"}},{\"line\":\"gibi_ = 2^30\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"In response to the convention of illegally\\nand confusingly using metric prefixes for\\npowers of two, the International\\nElectrotechnical Commission aproved these\\nbinary prefixes for use in 1998.  If you\\nwant to refer to \\\"megabytes\\\" using the\\nbinary definition, use these prefixes.\"}},{\"line\":\"tebi_ = 2^40\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"In response to the convention of illegally\\nand confusingly using metric prefixes for\\npowers of two, the International\\nElectrotechnical Commission aproved these\\nbinary prefixes for use in 1998.  If you\\nwant to refer to \\\"megabytes\\\" using the\\nbinary definition, use these prefixes.\"}},{\"line\":\"pebi_ = 2^50\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"In response to the convention of illegally\\nand confusingly using metric prefixes for\\npowers of two, the International\\nElectrotechnical Commission aproved these\\nbinary prefixes for use in 1998.  If you\\nwant to refer to \\\"megabytes\\\" using the\\nbinary definition, use these prefixes.\"}},{\"line\":\"exbi_ = 2^60\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"In response to the convention of illegally\\nand confusingly using metric prefixes for\\npowers of two, the International\\nElectrotechnical Commission aproved these\\nbinary prefixes for use in 1998.  If you\\nwant to refer to \\\"megabytes\\\" using the\\nbinary definition, use these prefixes.\"}},{\"line\":\"Ki_ = kibi\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"In response to the convention of illegally\\nand confusingly using metric prefixes for\\npowers of two, the International\\nElectrotechnical Commission aproved these\\nbinary prefixes for use in 1998.  If you\\nwant to refer to \\\"megabytes\\\" using the\\nbinary definition, use these prefixes.\"}},{\"line\":\"Mi_ = mebi\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"In response to the convention of illegally\\nand confusingly using metric prefixes for\\npowers of two, the International\\nElectrotechnical Commission aproved these\\nbinary prefixes for use in 1998.  If you\\nwant to refer to \\\"megabytes\\\" using the\\nbinary definition, use these prefixes.\"}},{\"line\":\"Gi_ = gibi\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"In response to the convention of illegally\\nand confusingly using metric prefixes for\\npowers of two, the International\\nElectrotechnical Commission aproved these\\nbinary prefixes for use in 1998.  If you\\nwant to refer to \\\"megabytes\\\" using the\\nbinary definition, use these prefixes.\"}},{\"line\":\"Ti_ = tebi\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"In response to the convention of illegally\\nand confusingly using metric prefixes for\\npowers of two, the International\\nElectrotechnical Commission aproved these\\nbinary prefixes for use in 1998.  If you\\nwant to refer to \\\"megabytes\\\" using the\\nbinary definition, use these prefixes.\"}},{\"line\":\"Pi_ = pebi\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"In response to the convention of illegally\\nand confusingly using metric prefixes for\\npowers of two, the International\\nElectrotechnical Commission aproved these\\nbinary prefixes for use in 1998.  If you\\nwant to refer to \\\"megabytes\\\" using the\\nbinary definition, use these prefixes.\"}},{\"line\":\"Ei_ = exbi\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"In response to the convention of illegally\\nand confusingly using metric prefixes for\\npowers of two, the International\\nElectrotechnical Commission aproved these\\nbinary prefixes for use in 1998.  If you\\nwant to refer to \\\"megabytes\\\" using the\\nbinary definition, use these prefixes.\"}},{\"line\":\"Y_ = yotta\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"Z_ = zetta\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"E_ = exa\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"P_ = peta\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"T_ = tera\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"G_ = giga\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"M_ = mega\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"k_ = kilo\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"h_ = hecto\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"da_ = deka\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"d_ = deci\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"c_ = centi\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"m_ = milli\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"u_ = micro\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"it should be a mu but u is easy to type\"}},{\"line\":\"n_ = nano\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"p_ = pico\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"f_ = femto\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"a_ = atto\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"z_ = zepto\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"y_ = yocto\",\"info\":{\"headingsIndex\":[2],\"headingLevel\":1,\"headings\":[\"2. Prefixes (longer names must come first)\"],\"comment\":\"\"}},{\"line\":\"one = 1\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"two = 2\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"double = 2\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"couple = 2\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"three = 3\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"triple = 3\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"four = 4\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"quadruple = 4\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"five = 5\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"quintuple = 5\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"six = 6\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"seven = 7\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"eight = 8\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"nine = 9\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"ten = 10\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"eleven = 11\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"twelve = 12\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"thirteen = 13\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"fourteen = 14\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"fifteen = 15\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"sixteen = 16\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"seventeen = 17\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"eighteen = 18\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"nineteen = 19\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"twenty = 20\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"thirty = 30\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"forty = 40\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"fifty = 50\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"sixty = 60\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"seventy = 70\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"eighty = 80\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"ninety = 90\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"hundred = 100\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"thousand = 1000\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"million = 1e6\",\"info\":{\"headingsIndex\":[2,1],\"headingLevel\":2,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\"],\"comment\":\"\"}},{\"line\":\"shortbillion = 1e9\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shorttrillion = 1e12\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortquadrillion = 1e15\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortquintillion = 1e18\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortsextillion = 1e21\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortseptillion = 1e24\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortoctillion = 1e27\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortnonillion = 1e30\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortnoventillion = shortnonillion\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortdecillion = 1e33\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortundecillion = 1e36\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortduodecillion = 1e39\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shorttredecillion = 1e42\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortquattuordecillion = 1e45\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortquindecillion = 1e48\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortsexdecillion = 1e51\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortseptendecillion = 1e54\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortoctodecillion = 1e57\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortnovemdecillion = 1e60\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"shortvigintillion = 1e63\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"centillion = 1e303\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"googol = 1e100\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longbillion = million^2\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longtrillion = million^3\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longquadrillion = million^4\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longquintillion = million^5\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longsextillion = million^6\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longseptillion = million^7\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longoctillion = million^8\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longnonillion = million^9\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longnoventillion = longnonillion\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longdecillion = million^10\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longundecillion = million^11\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longduodecillion = million^12\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longtredecillion = million^13\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longquattuordecillion = million^14\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longquindecillion = million^15\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longsexdecillion = million^16\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longseptdecillion = million^17\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longoctodecillion = million^18\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longnovemdecillion = million^19\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"longvigintillion = million^20\",\"info\":{\"headingsIndex\":[2,1,1],\"headingLevel\":3,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\"],\"comment\":\"\"}},{\"line\":\"milliard = 1000 million\",\"info\":{\"headingsIndex\":[2,1,1,1],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.1. These numbers fill the gaps left by the long system above.\"],\"comment\":\"\"}},{\"line\":\"billiard = 1000 million^2\",\"info\":{\"headingsIndex\":[2,1,1,1],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.1. These numbers fill the gaps left by the long system above.\"],\"comment\":\"\"}},{\"line\":\"trilliard = 1000 million^3\",\"info\":{\"headingsIndex\":[2,1,1,1],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.1. These numbers fill the gaps left by the long system above.\"],\"comment\":\"\"}},{\"line\":\"quadrilliard = 1000 million^4\",\"info\":{\"headingsIndex\":[2,1,1,1],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.1. These numbers fill the gaps left by the long system above.\"],\"comment\":\"\"}},{\"line\":\"quintilliard = 1000 million^5\",\"info\":{\"headingsIndex\":[2,1,1,1],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.1. These numbers fill the gaps left by the long system above.\"],\"comment\":\"\"}},{\"line\":\"sextilliard = 1000 million^6\",\"info\":{\"headingsIndex\":[2,1,1,1],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.1. These numbers fill the gaps left by the long system above.\"],\"comment\":\"\"}},{\"line\":\"septilliard = 1000 million^7\",\"info\":{\"headingsIndex\":[2,1,1,1],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.1. These numbers fill the gaps left by the long system above.\"],\"comment\":\"\"}},{\"line\":\"octilliard = 1000 million^8\",\"info\":{\"headingsIndex\":[2,1,1,1],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.1. These numbers fill the gaps left by the long system above.\"],\"comment\":\"\"}},{\"line\":\"nonilliard = 1000 million^9\",\"info\":{\"headingsIndex\":[2,1,1,1],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.1. These numbers fill the gaps left by the long system above.\"],\"comment\":\"\"}},{\"line\":\"noventilliard = nonilliard\",\"info\":{\"headingsIndex\":[2,1,1,1],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.1. These numbers fill the gaps left by the long system above.\"],\"comment\":\"\"}},{\"line\":\"decilliard = 1000 million^10\",\"info\":{\"headingsIndex\":[2,1,1,1],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.1. These numbers fill the gaps left by the long system above.\"],\"comment\":\"\"}},{\"line\":\"longmilliard = milliard\",\"info\":{\"headingsIndex\":[2,1,1,2],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.2. For consistency\"],\"comment\":\"\"}},{\"line\":\"longbilliard = billiard\",\"info\":{\"headingsIndex\":[2,1,1,2],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.2. For consistency\"],\"comment\":\"\"}},{\"line\":\"longtrilliard = trilliard\",\"info\":{\"headingsIndex\":[2,1,1,2],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.2. For consistency\"],\"comment\":\"\"}},{\"line\":\"longquadrilliard = quadrilliard\",\"info\":{\"headingsIndex\":[2,1,1,2],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.2. For consistency\"],\"comment\":\"\"}},{\"line\":\"longquintilliard = quintilliard\",\"info\":{\"headingsIndex\":[2,1,1,2],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.2. For consistency\"],\"comment\":\"\"}},{\"line\":\"longsextilliard = sextilliard\",\"info\":{\"headingsIndex\":[2,1,1,2],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.2. For consistency\"],\"comment\":\"\"}},{\"line\":\"longseptilliard = septilliard\",\"info\":{\"headingsIndex\":[2,1,1,2],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.2. For consistency\"],\"comment\":\"\"}},{\"line\":\"longoctilliard = octilliard\",\"info\":{\"headingsIndex\":[2,1,1,2],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.2. For consistency\"],\"comment\":\"\"}},{\"line\":\"longnonilliard = nonilliard\",\"info\":{\"headingsIndex\":[2,1,1,2],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.2. For consistency\"],\"comment\":\"\"}},{\"line\":\"longnoventilliard = noventilliard\",\"info\":{\"headingsIndex\":[2,1,1,2],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.2. For consistency\"],\"comment\":\"\"}},{\"line\":\"longdecilliard = decilliard\",\"info\":{\"headingsIndex\":[2,1,1,2],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.2. For consistency\"],\"comment\":\"\"}},{\"line\":\"billion = shortbillion\",\"info\":{\"headingsIndex\":[2,1,1,3],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"trillion = shorttrillion\",\"info\":{\"headingsIndex\":[2,1,1,3],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"quadrillion = shortquadrillion\",\"info\":{\"headingsIndex\":[2,1,1,3],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"quintillion = shortquintillion\",\"info\":{\"headingsIndex\":[2,1,1,3],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"sextillion = shortsextillion\",\"info\":{\"headingsIndex\":[2,1,1,3],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"septillion = shortseptillion\",\"info\":{\"headingsIndex\":[2,1,1,3],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"octillion = shortoctillion\",\"info\":{\"headingsIndex\":[2,1,1,3],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"nonillion = shortnonillion\",\"info\":{\"headingsIndex\":[2,1,1,3],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"noventillion = shortnoventillion\",\"info\":{\"headingsIndex\":[2,1,1,3],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"decillion = shortdecillion\",\"info\":{\"headingsIndex\":[2,1,1,3],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"undecillion = shortundecillion\",\"info\":{\"headingsIndex\":[2,1,1,3],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"duodecillion = shortduodecillion\",\"info\":{\"headingsIndex\":[2,1,1,3],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"tredecillion = shorttredecillion\",\"info\":{\"headingsIndex\":[2,1,1,3],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"quattuordecillion = shortquattuordecillion\",\"info\":{\"headingsIndex\":[2,1,1,3],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"quindecillion = shortquindecillion\",\"info\":{\"headingsIndex\":[2,1,1,3],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"sexdecillion = shortsexdecillion\",\"info\":{\"headingsIndex\":[2,1,1,3],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"septendecillion = shortseptendecillion\",\"info\":{\"headingsIndex\":[2,1,1,3],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"octodecillion = shortoctodecillion\",\"info\":{\"headingsIndex\":[2,1,1,3],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"novemdecillion = shortnovemdecillion\",\"info\":{\"headingsIndex\":[2,1,1,3],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"vigintillion = shortvigintillion\",\"info\":{\"headingsIndex\":[2,1,1,3],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.3. The short system prevails in English speaking countries\"],\"comment\":\"\"}},{\"line\":\"lakh = 1e5\",\"info\":{\"headingsIndex\":[2,1,1,4],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.4. Numbers used in India\"],\"comment\":\"\"}},{\"line\":\"crore = 1e7\",\"info\":{\"headingsIndex\":[2,1,1,4],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.4. Numbers used in India\"],\"comment\":\"\"}},{\"line\":\"arab = 1e9\",\"info\":{\"headingsIndex\":[2,1,1,4],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.4. Numbers used in India\"],\"comment\":\"\"}},{\"line\":\"kharab = 1e11\",\"info\":{\"headingsIndex\":[2,1,1,4],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.4. Numbers used in India\"],\"comment\":\"\"}},{\"line\":\"neel = 1e13\",\"info\":{\"headingsIndex\":[2,1,1,4],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.4. Numbers used in India\"],\"comment\":\"\"}},{\"line\":\"padm = 1e15\",\"info\":{\"headingsIndex\":[2,1,1,4],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.4. Numbers used in India\"],\"comment\":\"\"}},{\"line\":\"shankh = 1e17\",\"info\":{\"headingsIndex\":[2,1,1,4],\"headingLevel\":4,\"headings\":[\"2. Prefixes (longer names must come first)\",\"2.1. Names of some numbers\",\"2.1.1. These number terms were described by N. Chuquet and De la Roche in the 16th\\ncentury as being successive powers of a million. These definitions are still\\nused in most European countries. The current US definitions for these\\nnumbers arose in the 17th century and don't make nearly as much sense. These\\nnumbers are listed in the CRC Concise Encyclopedia of Mathematics by Eric\\nW. Weisstein.\",\"2.1.1.4. Numbers used in India\"],\"comment\":\"\"}},{\"line\":\"newton = kg m / s^2\",\"info\":{\"headingsIndex\":[3,1],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"force\"}},{\"line\":\"N = newton\",\"info\":{\"headingsIndex\":[3,1],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"force\"}},{\"line\":\"pascal = N/m^2\",\"info\":{\"headingsIndex\":[3,1],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"pressure or stress\"}},{\"line\":\"Pa = pascal\",\"info\":{\"headingsIndex\":[3,1],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"pressure or stress\"}},{\"line\":\"joule = N m\",\"info\":{\"headingsIndex\":[3,1],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"energy\"}},{\"line\":\"J = joule\",\"info\":{\"headingsIndex\":[3,1],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"energy\"}},{\"line\":\"watt = J/s\",\"info\":{\"headingsIndex\":[3,1],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"power\"}},{\"line\":\"W = watt\",\"info\":{\"headingsIndex\":[3,1],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"power\"}},{\"line\":\"coulomb = A s\",\"info\":{\"headingsIndex\":[3,1],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"charge\"}},{\"line\":\"C = coulomb\",\"info\":{\"headingsIndex\":[3,1],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"charge\"}},{\"line\":\"volt = W/A\",\"info\":{\"headingsIndex\":[3,1],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"potential difference\"}},{\"line\":\"V = volt\",\"info\":{\"headingsIndex\":[3,1],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"potential difference\"}},{\"line\":\"ohm = V/A\",\"info\":{\"headingsIndex\":[3,1],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"electrical resistance\"}},{\"line\":\"siemens = A/V\",\"info\":{\"headingsIndex\":[3,1],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"electrical conductance\"}},{\"line\":\"S = siemens\",\"info\":{\"headingsIndex\":[3,1],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"electrical conductance\"}},{\"line\":\"farad = C/V\",\"info\":{\"headingsIndex\":[3,1],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"capacitance\"}},{\"line\":\"F = farad\",\"info\":{\"headingsIndex\":[3,1],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"capacitance\"}},{\"line\":\"weber = V s\",\"info\":{\"headingsIndex\":[3,1],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"magnetic flux\"}},{\"line\":\"Wb = weber\",\"info\":{\"headingsIndex\":[3,1],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"magnetic flux\"}},{\"line\":\"henry = Wb/A\",\"info\":{\"headingsIndex\":[3,1],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"inductance\"}},{\"line\":\"H = henry\",\"info\":{\"headingsIndex\":[3,1],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"inductance\"}},{\"line\":\"tesla = Wb/m^2\",\"info\":{\"headingsIndex\":[3,1],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"magnetic flux density\"}},{\"line\":\"T = tesla\",\"info\":{\"headingsIndex\":[3,1],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"magnetic flux density\"}},{\"line\":\"hertz = /s\",\"info\":{\"headingsIndex\":[3,1],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"frequency\"}},{\"line\":\"Hz = hertz\",\"info\":{\"headingsIndex\":[3,1],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.1. Named SI derived units (officially accepted)\"],\"comment\":\"frequency\"}},{\"line\":\"LENGTH = meter\",\"info\":{\"headingsIndex\":[3,2],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"AREA = LENGTH^2\",\"info\":{\"headingsIndex\":[3,2],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"VOLUME = LENGTH^3\",\"info\":{\"headingsIndex\":[3,2],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"MASS = kilogram\",\"info\":{\"headingsIndex\":[3,2],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"CURRENT = ampere\",\"info\":{\"headingsIndex\":[3,2],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"AMOUNT = mole\",\"info\":{\"headingsIndex\":[3,2],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"ANGLE = radian\",\"info\":{\"headingsIndex\":[3,2],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"SOLID_ANGLE = steradian\",\"info\":{\"headingsIndex\":[3,2],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"MONEY = US$\",\"info\":{\"headingsIndex\":[3,2],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"FORCE = newton\",\"info\":{\"headingsIndex\":[3,2],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"PRESSURE = FORCE / AREA\",\"info\":{\"headingsIndex\":[3,2],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"STRESS = FORCE / AREA\",\"info\":{\"headingsIndex\":[3,2],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"CHARGE = coulomb\",\"info\":{\"headingsIndex\":[3,2],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"CAPACITANCE = farad\",\"info\":{\"headingsIndex\":[3,2],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"RESISTANCE = ohm\",\"info\":{\"headingsIndex\":[3,2],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"CONDUCTANCE = siemens\",\"info\":{\"headingsIndex\":[3,2],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"INDUCTANCE = henry\",\"info\":{\"headingsIndex\":[3,2],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"FREQUENCY = hertz\",\"info\":{\"headingsIndex\":[3,2],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"VELOCITY = LENGTH / TIME\",\"info\":{\"headingsIndex\":[3,2],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"ACCELERATION = VELOCITY / TIME\",\"info\":{\"headingsIndex\":[3,2],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"DENSITY = MASS / VOLUME\",\"info\":{\"headingsIndex\":[3,2],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"LINEAR_DENSITY = MASS / LENGTH\",\"info\":{\"headingsIndex\":[3,2],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"VISCOSITY = FORCE TIME / AREA\",\"info\":{\"headingsIndex\":[3,2],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"KINEMATIC_VISCOSITY = VISCOSITY / DENSITY\",\"info\":{\"headingsIndex\":[3,2],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.2. Dimensions. These are here to help with dimensional analysis and\\nbecause they will appear in the list produced by hitting '?' at the\\n\\\"You want:\\\" prompt to tell the user the dimension of the unit.\"],\"comment\":\"\"}},{\"line\":\"gram = millikg\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"gm = gram\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"g = gram\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"tonne = 1000 kg\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"t = tonne\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"metricton = tonne\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"sthene = tonne m / s^2\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"funal = sthene\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"pieze = sthene / m^2\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"quintal = 100 kg\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"bar = 1e5 Pa\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"About 1 atm\"}},{\"line\":\"b = bar\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"About 1 atm\"}},{\"line\":\"vac = millibar\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"micron = micrometer\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"One millionth of a meter\"}},{\"line\":\"bicron = picometer\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"One brbillionth of a meter\"}},{\"line\":\"cc = cm^3\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"are = 100 m^2\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"a = are\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"liter = 1000 cc\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"The liter was defined in 1901 as the\\nspace occupied by 1 kg of pure water at\\nthe temperature of its maximum density\\nunder a pressure of 1 atm.  This was\\nsupposed to be 1000 cubic cm, but it\\nwas discovered that the original\\nmeasurement was off.  In 1964, the\\nliter was redefined to be exactly 1000\\ncubic centimeters.\"}},{\"line\":\"oldliter = 1.000028 dm^3\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"The liter was defined in 1901 as the\\nspace occupied by 1 kg of pure water at\\nthe temperature of its maximum density\\nunder a pressure of 1 atm.  This was\\nsupposed to be 1000 cubic cm, but it\\nwas discovered that the original\\nmeasurement was off.  In 1964, the\\nliter was redefined to be exactly 1000\\ncubic centimeters.\"}},{\"line\":\"L = liter\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"The liter was defined in 1901 as the\\nspace occupied by 1 kg of pure water at\\nthe temperature of its maximum density\\nunder a pressure of 1 atm.  This was\\nsupposed to be 1000 cubic cm, but it\\nwas discovered that the original\\nmeasurement was off.  In 1964, the\\nliter was redefined to be exactly 1000\\ncubic centimeters.\"}},{\"line\":\"l = liter\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"The liter was defined in 1901 as the\\nspace occupied by 1 kg of pure water at\\nthe temperature of its maximum density\\nunder a pressure of 1 atm.  This was\\nsupposed to be 1000 cubic cm, but it\\nwas discovered that the original\\nmeasurement was off.  In 1964, the\\nliter was redefined to be exactly 1000\\ncubic centimeters.\"}},{\"line\":\"mho = siemens\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Inverse of ohm, hence ohm spelled backward\"}},{\"line\":\"galvat = ampere\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Named after Luigi Galvani\"}},{\"line\":\"angstrom = 1e-10 m\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Convenient for describing molecular sizes\"}},{\"line\":\"xunit = xunit_cu\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Used for measuring x-ray wavelengths.\\nOriginally defined to be 1|3029.45 of\\nthe spacing of calcite planes at 18\\ndegC.  It was intended to be exactly\\n1e-13 m, but was later found to be\\nslightly off.  Current usage is with\\nreference to common x-ray lines, either\\nthe K-alpha 1 line of copper or the\\nsame line of molybdenum.\"}},{\"line\":\"siegbahn = xunit\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Used for measuring x-ray wavelengths.\\nOriginally defined to be 1|3029.45 of\\nthe spacing of calcite planes at 18\\ndegC.  It was intended to be exactly\\n1e-13 m, but was later found to be\\nslightly off.  Current usage is with\\nreference to common x-ray lines, either\\nthe K-alpha 1 line of copper or the\\nsame line of molybdenum.\"}},{\"line\":\"xunit_cu = 1.00207697e-13 m\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Used for measuring x-ray wavelengths.\\nOriginally defined to be 1|3029.45 of\\nthe spacing of calcite planes at 18\\ndegC.  It was intended to be exactly\\n1e-13 m, but was later found to be\\nslightly off.  Current usage is with\\nreference to common x-ray lines, either\\nthe K-alpha 1 line of copper or the\\nsame line of molybdenum.\"}},{\"line\":\"xunit_mo = 1.00209952e-13 m\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Used for measuring x-ray wavelengths.\\nOriginally defined to be 1|3029.45 of\\nthe spacing of calcite planes at 18\\ndegC.  It was intended to be exactly\\n1e-13 m, but was later found to be\\nslightly off.  Current usage is with\\nreference to common x-ray lines, either\\nthe K-alpha 1 line of copper or the\\nsame line of molybdenum.\"}},{\"line\":\"angstromstar = 1.00001495 angstrom\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Defined by JA Bearden in 1965\"}},{\"line\":\"fermi = 1e-15 m\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Convenient for describing nuclear sizes\\nNuclear radius is from 1 to 10 fermis\"}},{\"line\":\"barn = 1e-28 m^2\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Used to measure cross section for\\nparticle physics collision, said to\\nhave originated in the phrase \\\"big as\\na barn\\\".\"}},{\"line\":\"shed = 1e-24 barn\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Defined to be a smaller companion to the\\nbarn, but it's too small to be of\\nmuch use.\"}},{\"line\":\"brewster = micron^2/N\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"measures stress-optical coef\"}},{\"line\":\"diopter = /m\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"measures reciprocal of lens focal length\"}},{\"line\":\"fresnel = 1e12 Hz\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"occasionally used in spectroscopy\"}},{\"line\":\"shake = 1e-8 sec\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"svedberg = 1e-13 s\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Used for measuring the sedimentation\\ncoefficient for centrifuging.\"}},{\"line\":\"gamma = microgram\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Also used for 1e-9 tesla\"}},{\"line\":\"lambda = microliter\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"spat = 1e12 m\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Rarely used for astronomical measurements\"}},{\"line\":\"preece = 1e13 ohm m\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"resistivity\"}},{\"line\":\"planck = J s\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"action of one joule over one second\"}},{\"line\":\"sturgeon = /henry\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"magnetic reluctance\"}},{\"line\":\"daraf = 1/farad\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"elastance (farad spelled backwards)\"}},{\"line\":\"leo = 10 m/s^2\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"poiseuille = N s / m^2\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"viscosity\"}},{\"line\":\"mayer = J/g K\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"specific heat\"}},{\"line\":\"mired = / microK\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"reciprocal color temperature.  The name\\nabbreviates micro reciprocal degree.\"}},{\"line\":\"crocodile = megavolt\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"used informally in UK physics labs\"}},{\"line\":\"metricounce = 25 g\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"mounce = metricounce\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"\"}},{\"line\":\"finsenunit = 1e5 W/m^2\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Measures intensity of ultraviolet light\\nwith wavelength 296.7 nm.\"}},{\"line\":\"fluxunit = 1e-26 W/m^2 Hz\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Used in radio astronomy to measure\\nthe energy incident on the receiving\\nbody across a specified frequency\\nbandwidth.  [12]\\nK. G. Jansky identified radio waves coming\\nfrom outer space in 1931.\"}},{\"line\":\"jansky = fluxunit\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Used in radio astronomy to measure\\nthe energy incident on the receiving\\nbody across a specified frequency\\nbandwidth.  [12]\\nK. G. Jansky identified radio waves coming\\nfrom outer space in 1931.\"}},{\"line\":\"Jy = jansky\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Used in radio astronomy to measure\\nthe energy incident on the receiving\\nbody across a specified frequency\\nbandwidth.  [12]\\nK. G. Jansky identified radio waves coming\\nfrom outer space in 1931.\"}},{\"line\":\"flick = W / cm^2 sr micrometer\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Spectral radiance or irradiance\"}},{\"line\":\"pfu = / cm^2 sr s\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"particle flux unit -- Used to measure\\nrate at which particles are received by\\na spacecraft as particles per solid\\nangle per detector area per second. [18]\"}},{\"line\":\"pyron = cal_IT / cm^2 min\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Measures heat flow from solar radiation,\\nfrom Greek work \\\"pyr\\\" for fire.\"}},{\"line\":\"katal = mol/sec\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Measure of the amount of a catalyst.  One\\nkatal of catalyst enables the reaction\\nto consume or produce on mol/sec.\"}},{\"line\":\"kat = katal\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"Measure of the amount of a catalyst.  One\\nkatal of catalyst enables the reaction\\nto consume or produce on mol/sec.\"}},{\"line\":\"solarluminosity = 384.6e24 W\",\"info\":{\"headingsIndex\":[3,3],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.3. units derived easily from SI units\"],\"comment\":\"A common yardstick for comparing the\\noutput of different stars.\\nhttp://nssdc.gsfc.nasa.gov/planetary/factsheet/sunfact.html\"}},{\"line\":\"sec = s\",\"info\":{\"headingsIndex\":[3,4],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"\"}},{\"line\":\"minute = 60 s\",\"info\":{\"headingsIndex\":[3,4],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"\"}},{\"line\":\"min = minute\",\"info\":{\"headingsIndex\":[3,4],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"\"}},{\"line\":\"hour = 60 min\",\"info\":{\"headingsIndex\":[3,4],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"\"}},{\"line\":\"hr = hour\",\"info\":{\"headingsIndex\":[3,4],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"\"}},{\"line\":\"day = 24 hr\",\"info\":{\"headingsIndex\":[3,4],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"\"}},{\"line\":\"d = day\",\"info\":{\"headingsIndex\":[3,4],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"\"}},{\"line\":\"da = day\",\"info\":{\"headingsIndex\":[3,4],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"\"}},{\"line\":\"week = 7 day\",\"info\":{\"headingsIndex\":[3,4],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"\"}},{\"line\":\"wk = week\",\"info\":{\"headingsIndex\":[3,4],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"\"}},{\"line\":\"sennight = 7 day\",\"info\":{\"headingsIndex\":[3,4],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"\"}},{\"line\":\"fortnight = 14 day\",\"info\":{\"headingsIndex\":[3,4],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"\"}},{\"line\":\"blink = 1e-5 day\",\"info\":{\"headingsIndex\":[3,4],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"Actual human blink takes 1|3 second\"}},{\"line\":\"ce = 1e-2 day\",\"info\":{\"headingsIndex\":[3,4],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"\"}},{\"line\":\"cron = 1e6 years\",\"info\":{\"headingsIndex\":[3,4],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"\"}},{\"line\":\"watch = 4 hours\",\"info\":{\"headingsIndex\":[3,4],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"time a sentry stands watch or a ship's\\ncrew is on duty.\"}},{\"line\":\"bell = 1|8 watch\",\"info\":{\"headingsIndex\":[3,4],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\"],\"comment\":\"Bell would be sounded every 30 minutes.\"}},{\"line\":\"decimalhour = 1|10 day\",\"info\":{\"headingsIndex\":[3,4,1],\"headingLevel\":3,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\",\"3.4.1. French Revolutionary Time or Decimal Time. It was Proposed during\\nthe French Revolution. A few clocks were made, but it never caught\\non. In 1998 Swatch defined a time measurement called \\\".beat\\\" and\\nsold some watches that displayed time in this unit.\"],\"comment\":\"\"}},{\"line\":\"decimalminute = 1|100 decimalhour\",\"info\":{\"headingsIndex\":[3,4,1],\"headingLevel\":3,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\",\"3.4.1. French Revolutionary Time or Decimal Time. It was Proposed during\\nthe French Revolution. A few clocks were made, but it never caught\\non. In 1998 Swatch defined a time measurement called \\\".beat\\\" and\\nsold some watches that displayed time in this unit.\"],\"comment\":\"\"}},{\"line\":\"decimalsecond = 1|100 decimalminute\",\"info\":{\"headingsIndex\":[3,4,1],\"headingLevel\":3,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\",\"3.4.1. French Revolutionary Time or Decimal Time. It was Proposed during\\nthe French Revolution. A few clocks were made, but it never caught\\non. In 1998 Swatch defined a time measurement called \\\".beat\\\" and\\nsold some watches that displayed time in this unit.\"],\"comment\":\"\"}},{\"line\":\"beat = decimalminute\",\"info\":{\"headingsIndex\":[3,4,1],\"headingLevel\":3,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.4. time\",\"3.4.1. French Revolutionary Time or Decimal Time. It was Proposed during\\nthe French Revolution. A few clocks were made, but it never caught\\non. In 1998 Swatch defined a time measurement called \\\".beat\\\" and\\nsold some watches that displayed time in this unit.\"],\"comment\":\"Swatch Internet Time\"}},{\"line\":\"circle = 2 pi radian\",\"info\":{\"headingsIndex\":[3,5],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"degree = 1|360 circle\",\"info\":{\"headingsIndex\":[3,5],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"deg = degree\",\"info\":{\"headingsIndex\":[3,5],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"arcdeg = degree\",\"info\":{\"headingsIndex\":[3,5],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"arcmin = 1|60 degree\",\"info\":{\"headingsIndex\":[3,5],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"arcminute = arcmin\",\"info\":{\"headingsIndex\":[3,5],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"' = arcmin\",\"info\":{\"headingsIndex\":[3,5],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"arcsec = 1|60 arcmin\",\"info\":{\"headingsIndex\":[3,5],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"arcsecond = arcsec\",\"info\":{\"headingsIndex\":[3,5],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"\\\" = arcsec\",\"info\":{\"headingsIndex\":[3,5],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"'' = \\\"\",\"info\":{\"headingsIndex\":[3,5],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"rightangle = 90 degrees\",\"info\":{\"headingsIndex\":[3,5],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"quadrant = 1|4 circle\",\"info\":{\"headingsIndex\":[3,5],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"quintant = 1|5 circle\",\"info\":{\"headingsIndex\":[3,5],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"sextant = 1|6 circle\",\"info\":{\"headingsIndex\":[3,5],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"sign = 1|12 circle\",\"info\":{\"headingsIndex\":[3,5],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"Angular extent of one sign of the zodiac\"}},{\"line\":\"turn = circle\",\"info\":{\"headingsIndex\":[3,5],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"revolution = turn\",\"info\":{\"headingsIndex\":[3,5],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"rev = turn\",\"info\":{\"headingsIndex\":[3,5],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"pulsatance = radian / sec\",\"info\":{\"headingsIndex\":[3,5],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"gon = 1|100 rightangle\",\"info\":{\"headingsIndex\":[3,5],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"measure of grade\"}},{\"line\":\"grade = gon\",\"info\":{\"headingsIndex\":[3,5],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"measure of grade\"}},{\"line\":\"centesimalminute = 1|100 grade\",\"info\":{\"headingsIndex\":[3,5],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"centesimalsecond = 1|100 centesimalminute\",\"info\":{\"headingsIndex\":[3,5],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"\"}},{\"line\":\"milangle = 1|6400 circle\",\"info\":{\"headingsIndex\":[3,5],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"Official NIST definition.\\nAnother choice is 1e-3 radian.\"}},{\"line\":\"pointangle = 1|32 circle\",\"info\":{\"headingsIndex\":[3,5],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"Used for reporting compass readings\"}},{\"line\":\"centrad = 0.01 radian\",\"info\":{\"headingsIndex\":[3,5],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"Used for angular deviation of light\\nthrough a prism.\"}},{\"line\":\"mas = milli arcsec\",\"info\":{\"headingsIndex\":[3,5],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"Used by astronomers\"}},{\"line\":\"seclongitude = circle (seconds/day)\",\"info\":{\"headingsIndex\":[3,5],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.5. angular measure\"],\"comment\":\"Astronomers measure longitude\\n(which they call right ascension) in\\ntime units by dividing the equator into\\n24 hours instead of 360 degrees.\"}},{\"line\":\"circlearea = r => pi r^2 \",\"info\":{\"headingsIndex\":[3,6],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.6. Some geometric formulas\"],\"comment\":\"\"}},{\"line\":\"circlearea^-1 = circlearea => sqrt(circlearea/pi)\",\"info\":{\"headingsIndex\":[3,6],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.6. Some geometric formulas\"],\"comment\":\"\"}},{\"line\":\"spherevolume = r => 4|3 pi r^3 \",\"info\":{\"headingsIndex\":[3,6],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.6. Some geometric formulas\"],\"comment\":\"\"}},{\"line\":\"spherevolume^-1 = spherevolume => cuberoot(spherevolume/4|3 pi)\",\"info\":{\"headingsIndex\":[3,6],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.6. Some geometric formulas\"],\"comment\":\"\"}},{\"line\":\"spherevol = spherevolume\",\"info\":{\"headingsIndex\":[3,6],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.6. Some geometric formulas\"],\"comment\":\"\"}},{\"line\":\"square = x => x^2 \",\"info\":{\"headingsIndex\":[3,6],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.6. Some geometric formulas\"],\"comment\":\"\"}},{\"line\":\"square^-1 = square => sqrt(square)\",\"info\":{\"headingsIndex\":[3,6],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.6. Some geometric formulas\"],\"comment\":\"\"}},{\"line\":\"sphere = 4 pi sr\",\"info\":{\"headingsIndex\":[3,7],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.7. Solid angle measure\"],\"comment\":\"\"}},{\"line\":\"squaredegree = 1|180^2 pi^2 sr\",\"info\":{\"headingsIndex\":[3,7],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.7. Solid angle measure\"],\"comment\":\"\"}},{\"line\":\"squareminute = 1|60^2 squaredegree\",\"info\":{\"headingsIndex\":[3,7],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.7. Solid angle measure\"],\"comment\":\"\"}},{\"line\":\"squaresecond = 1|60^2 squareminute\",\"info\":{\"headingsIndex\":[3,7],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.7. Solid angle measure\"],\"comment\":\"\"}},{\"line\":\"squarearcmin = squareminute\",\"info\":{\"headingsIndex\":[3,7],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.7. Solid angle measure\"],\"comment\":\"\"}},{\"line\":\"squarearcsec = squaresecond\",\"info\":{\"headingsIndex\":[3,7],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.7. Solid angle measure\"],\"comment\":\"\"}},{\"line\":\"sphericalrightangle = 0.5 pi sr\",\"info\":{\"headingsIndex\":[3,7],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.7. Solid angle measure\"],\"comment\":\"\"}},{\"line\":\"octant = 0.5 pi sr\",\"info\":{\"headingsIndex\":[3,7],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.7. Solid angle measure\"],\"comment\":\"\"}},{\"line\":\"percent = 0.01\",\"info\":{\"headingsIndex\":[3,8],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"\"}},{\"line\":\"% = percent\",\"info\":{\"headingsIndex\":[3,8],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"\"}},{\"line\":\"mill = 0.001\",\"info\":{\"headingsIndex\":[3,8],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"Originally established by Congress in 1791\\nas a unit of money equal to 0.001 dollars,\\nit has come to refer to 0.001 in general.\\nUsed by some towns to set their property\\ntax rate, and written with a symbol similar\\nto the % symbol but with two 0's in the\\ndenominator.  [18]\"}},{\"line\":\"proof = 1|200\",\"info\":{\"headingsIndex\":[3,8],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"Alcohol content measured by volume at\\n60 degrees Fahrenheit.  This is a USA\\nmeasure.  In Europe proof=percent.\"}},{\"line\":\"ppm = 1e-6\",\"info\":{\"headingsIndex\":[3,8],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"\"}},{\"line\":\"partspermillion = ppm\",\"info\":{\"headingsIndex\":[3,8],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"\"}},{\"line\":\"ppb = 1e-9\",\"info\":{\"headingsIndex\":[3,8],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"USA billion\"}},{\"line\":\"partsperbillion = ppb\",\"info\":{\"headingsIndex\":[3,8],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"USA billion\"}},{\"line\":\"ppt = 1e-12\",\"info\":{\"headingsIndex\":[3,8],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"USA trillion\"}},{\"line\":\"partspertrillion = ppt\",\"info\":{\"headingsIndex\":[3,8],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"USA trillion\"}},{\"line\":\"karat = 1|24\",\"info\":{\"headingsIndex\":[3,8],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"measure of gold purity\"}},{\"line\":\"caratgold = karat\",\"info\":{\"headingsIndex\":[3,8],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"measure of gold purity\"}},{\"line\":\"gammil = mg/l\",\"info\":{\"headingsIndex\":[3,8],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"\"}},{\"line\":\"basispoint = 0.01 %\",\"info\":{\"headingsIndex\":[3,8],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"Used in finance\"}},{\"line\":\"fine = 1|1000\",\"info\":{\"headingsIndex\":[3,8],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"Measure of gold purity\"}},{\"line\":\"pH = x => 10^(-x) mol/liter \",\"info\":{\"headingsIndex\":[3,8],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"The pH scale is used to measure the concentration of hydronium (H3O+) ions in\\na solution.  A neutral solution has a pH of 7 as a result of dissociated\\nwater molecules.\"}},{\"line\":\"pH^-1 = pH => (-log(pH liters/mol))\",\"info\":{\"headingsIndex\":[3,8],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.8. Concentration measures\"],\"comment\":\"The pH scale is used to measure the concentration of hydronium (H3O+) ions in\\na solution.  A neutral solution has a pH of 7 as a result of dissociated\\nwater molecules.\"}},{\"line\":\"TEMPERATURE = kelvin\",\"info\":{\"headingsIndex\":[3,9],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\"],\"comment\":\"\"}},{\"line\":\"TEMPERATURE_DIFFERENCE = kelvin\",\"info\":{\"headingsIndex\":[3,9],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\"],\"comment\":\"\"}},{\"line\":\"tempC = x => x K + stdtemp \",\"info\":{\"headingsIndex\":[3,9],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\"],\"comment\":\"In 1741 Anders Celsius introduced a temperature scale with water boiling at\\n0 degrees and freezing at 100 degrees at standard pressure. After his death\\nthe fixed points were reversed and the scale was called the centigrade\\nscale.  Due to the difficulty of accurately measuring the temperature of\\nmelting ice at standard pressure, the centigrade scale was replaced in 1954\\nby the Celsius scale which is defined by subtracting 273.15 from the\\ntemperature in Kelvins.  This definition differed slightly from the old\\ncentigrade definition, but the Kelvin scale depends on the triple point of\\nwater rather than a melting point, so it can be measured accurately.\"}},{\"line\":\"tempC^-1 = tempC => (tempC +(-stdtemp))/K\",\"info\":{\"headingsIndex\":[3,9],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\"],\"comment\":\"In 1741 Anders Celsius introduced a temperature scale with water boiling at\\n0 degrees and freezing at 100 degrees at standard pressure. After his death\\nthe fixed points were reversed and the scale was called the centigrade\\nscale.  Due to the difficulty of accurately measuring the temperature of\\nmelting ice at standard pressure, the centigrade scale was replaced in 1954\\nby the Celsius scale which is defined by subtracting 273.15 from the\\ntemperature in Kelvins.  This definition differed slightly from the old\\ncentigrade definition, but the Kelvin scale depends on the triple point of\\nwater rather than a melting point, so it can be measured accurately.\"}},{\"line\":\"tempcelsius = tempC\",\"info\":{\"headingsIndex\":[3,9],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\"],\"comment\":\"In 1741 Anders Celsius introduced a temperature scale with water boiling at\\n0 degrees and freezing at 100 degrees at standard pressure. After his death\\nthe fixed points were reversed and the scale was called the centigrade\\nscale.  Due to the difficulty of accurately measuring the temperature of\\nmelting ice at standard pressure, the centigrade scale was replaced in 1954\\nby the Celsius scale which is defined by subtracting 273.15 from the\\ntemperature in Kelvins.  This definition differed slightly from the old\\ncentigrade definition, but the Kelvin scale depends on the triple point of\\nwater rather than a melting point, so it can be measured accurately.\"}},{\"line\":\"degcelsius = K\",\"info\":{\"headingsIndex\":[3,9],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\"],\"comment\":\"In 1741 Anders Celsius introduced a temperature scale with water boiling at\\n0 degrees and freezing at 100 degrees at standard pressure. After his death\\nthe fixed points were reversed and the scale was called the centigrade\\nscale.  Due to the difficulty of accurately measuring the temperature of\\nmelting ice at standard pressure, the centigrade scale was replaced in 1954\\nby the Celsius scale which is defined by subtracting 273.15 from the\\ntemperature in Kelvins.  This definition differed slightly from the old\\ncentigrade definition, but the Kelvin scale depends on the triple point of\\nwater rather than a melting point, so it can be measured accurately.\"}},{\"line\":\"degC = K\",\"info\":{\"headingsIndex\":[3,9],\"headingLevel\":2,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\"],\"comment\":\"In 1741 Anders Celsius introduced a temperature scale with water boiling at\\n0 degrees and freezing at 100 degrees at standard pressure. After his death\\nthe fixed points were reversed and the scale was called the centigrade\\nscale.  Due to the difficulty of accurately measuring the temperature of\\nmelting ice at standard pressure, the centigrade scale was replaced in 1954\\nby the Celsius scale which is defined by subtracting 273.15 from the\\ntemperature in Kelvins.  This definition differed slightly from the old\\ncentigrade definition, but the Kelvin scale depends on the triple point of\\nwater rather than a melting point, so it can be measured accurately.\"}},{\"line\":\"tempF = x => (x+(-32)) degF + stdtemp \",\"info\":{\"headingsIndex\":[3,9,1],\"headingLevel\":3,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"\"}},{\"line\":\"tempF^-1 = tempF => (tempF+(-stdtemp))/degF + 32\",\"info\":{\"headingsIndex\":[3,9,1],\"headingLevel\":3,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"\"}},{\"line\":\"tempfahrenheit = tempF\",\"info\":{\"headingsIndex\":[3,9,1],\"headingLevel\":3,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"\"}},{\"line\":\"degfahrenheit = 5|9 degC\",\"info\":{\"headingsIndex\":[3,9,1],\"headingLevel\":3,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"\"}},{\"line\":\"degF = 5|9 degC\",\"info\":{\"headingsIndex\":[3,9,1],\"headingLevel\":3,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"\"}},{\"line\":\"degreesrankine = degF\",\"info\":{\"headingsIndex\":[3,9,1],\"headingLevel\":3,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"The Rankine scale has the\\nFahrenheit degree, but its zero\\nis at absolute zero.\"}},{\"line\":\"degrankine = degreesrankine\",\"info\":{\"headingsIndex\":[3,9,1],\"headingLevel\":3,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"The Rankine scale has the\\nFahrenheit degree, but its zero\\nis at absolute zero.\"}},{\"line\":\"degreerankine = degF\",\"info\":{\"headingsIndex\":[3,9,1],\"headingLevel\":3,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"The Rankine scale has the\\nFahrenheit degree, but its zero\\nis at absolute zero.\"}},{\"line\":\"degR = degrankine\",\"info\":{\"headingsIndex\":[3,9,1],\"headingLevel\":3,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"The Rankine scale has the\\nFahrenheit degree, but its zero\\nis at absolute zero.\"}},{\"line\":\"tempR = degrankine\",\"info\":{\"headingsIndex\":[3,9,1],\"headingLevel\":3,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"The Rankine scale has the\\nFahrenheit degree, but its zero\\nis at absolute zero.\"}},{\"line\":\"temprankine = degrankine\",\"info\":{\"headingsIndex\":[3,9,1],\"headingLevel\":3,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"The Rankine scale has the\\nFahrenheit degree, but its zero\\nis at absolute zero.\"}},{\"line\":\"tempreaumur = x => x degreaumur+stdtemp \",\"info\":{\"headingsIndex\":[3,9,1],\"headingLevel\":3,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"The Reaumur scale was used in Europe and\\nparticularly in France.  It is defined\\nto be 0 at the freezing point of water\\nand 80 at the boiling point.  Reaumur\\napparently selected 80 because it is\\ndivisible by many numbers.\"}},{\"line\":\"tempreaumur^-1 = tempreaumur => (tempreaumur+(-stdtemp))/degreaumur\",\"info\":{\"headingsIndex\":[3,9,1],\"headingLevel\":3,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"The Reaumur scale was used in Europe and\\nparticularly in France.  It is defined\\nto be 0 at the freezing point of water\\nand 80 at the boiling point.  Reaumur\\napparently selected 80 because it is\\ndivisible by many numbers.\"}},{\"line\":\"degreaumur = 10|8 degC\",\"info\":{\"headingsIndex\":[3,9,1],\"headingLevel\":3,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"The Reaumur scale was used in Europe and\\nparticularly in France.  It is defined\\nto be 0 at the freezing point of water\\nand 80 at the boiling point.  Reaumur\\napparently selected 80 because it is\\ndivisible by many numbers.\"}},{\"line\":\"degK = K\",\"info\":{\"headingsIndex\":[3,9,1],\"headingLevel\":3,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"\\\"Degrees Kelvin\\\" is forbidden usage.\\nFor consistency\"}},{\"line\":\"tempK = K\",\"info\":{\"headingsIndex\":[3,9,1],\"headingLevel\":3,\"headings\":[\"3. Derived units which can be reduced to the primitive units\",\"3.9. Temperature\\n\\nTwo types of units are defined: units for converting temperature differences\\nand functions for converting absolute temperatures. Conversions for\\ndifferences start with \\\"deg\\\" and conversions for absolute temperature start\\nwith \\\"temp\\\".\",\"3.9.1. Fahrenheit defined his temperature scale by setting 0 to the coldest\\ntemperature he could produce in his lab with a salt water solution and by\\nsetting 96 degrees to body heat. In Fahrenheit's words:\\n\\nPlacing the thermometer in a mixture of sal ammoniac or sea\\nsalt, ice, and water a point on the scale will be found which\\nis denoted as zero. A second point is obtained if the same\\nmixture is used without salt. Denote this position as 30. A\\nthird point, designated as 96, is obtained if the thermometer\\nis placed in the mouth so as to acquire the heat of a healthy\\nman.\\\" (D. G. Fahrenheit, Phil. Trans. (London) 33, 78, 1724)\"],\"comment\":\"\\\"Degrees Kelvin\\\" is forbidden usage.\\nFor consistency\"}},{\"line\":\"pi = 3.14159265358979323846\",\"info\":{\"headingsIndex\":[4,1],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.1. Basic constants\"],\"comment\":\"\"}},{\"line\":\"c = 2.99792458e8 m/s\",\"info\":{\"headingsIndex\":[4,1],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.1. Basic constants\"],\"comment\":\"speed of light in vacuum (exact)\"}},{\"line\":\"light = c\",\"info\":{\"headingsIndex\":[4,1],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.1. Basic constants\"],\"comment\":\"speed of light in vacuum (exact)\"}},{\"line\":\"mu0 = 4 pi 1e-7 H/m\",\"info\":{\"headingsIndex\":[4,1],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.1. Basic constants\"],\"comment\":\"permeability of vacuum (exact)\"}},{\"line\":\"epsilon0 = 1/mu0 c^2\",\"info\":{\"headingsIndex\":[4,1],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.1. Basic constants\"],\"comment\":\"permittivity of vacuum (exact)\"}},{\"line\":\"energy = c^2\",\"info\":{\"headingsIndex\":[4,1],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.1. Basic constants\"],\"comment\":\"convert mass to energy\"}},{\"line\":\"e = 1.6021766208e-19 C\",\"info\":{\"headingsIndex\":[4,1],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.1. Basic constants\"],\"comment\":\"electron charge\"}},{\"line\":\"h = 4.135667662e-15 eV s\",\"info\":{\"headingsIndex\":[4,1],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.1. Basic constants\"],\"comment\":\"Planck constant\"}},{\"line\":\"hbar = h / 2 pi\",\"info\":{\"headingsIndex\":[4,1],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.1. Basic constants\"],\"comment\":\"\"}},{\"line\":\"spin = hbar\",\"info\":{\"headingsIndex\":[4,1],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.1. Basic constants\"],\"comment\":\"\"}},{\"line\":\"G = 6.67408e-11 N m^2 / kg^2\",\"info\":{\"headingsIndex\":[4,1],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.1. Basic constants\"],\"comment\":\"Newtonian gravitational constant\\nThis is the NIST 2006 value.\\nThe relative uncertainty on this\\nis 1e-4.\"}},{\"line\":\"coulombconst = 1/4 pi epsilon0\",\"info\":{\"headingsIndex\":[4,1],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.1. Basic constants\"],\"comment\":\"listed as \\\"k\\\" sometimes\"}},{\"line\":\"atomicmassunit = 1.660539040e-27 kg\",\"info\":{\"headingsIndex\":[4,2],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"atomic mass unit (defined to be\\n1|12 of the mass of carbon 12)\"}},{\"line\":\"u = atomicmassunit\",\"info\":{\"headingsIndex\":[4,2],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"atomic mass unit (defined to be\\n1|12 of the mass of carbon 12)\"}},{\"line\":\"amu = atomicmassunit\",\"info\":{\"headingsIndex\":[4,2],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"atomic mass unit (defined to be\\n1|12 of the mass of carbon 12)\"}},{\"line\":\"amu_chem = 1.66026e-27 kg\",\"info\":{\"headingsIndex\":[4,2],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"1|16 of the weighted average mass of\\nthe 3 naturally occuring neutral\\nisotopes of oxygen\"}},{\"line\":\"amu_phys = 1.65981e-27 kg\",\"info\":{\"headingsIndex\":[4,2],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"1|16 of the mass of a neutral\\noxygen 16 atom\"}},{\"line\":\"dalton = u\",\"info\":{\"headingsIndex\":[4,2],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"Maybe this should be amu_chem?\"}},{\"line\":\"avogadro = grams/amu mol\",\"info\":{\"headingsIndex\":[4,2],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"size of a mole\"}},{\"line\":\"N_A = avogadro\",\"info\":{\"headingsIndex\":[4,2],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"size of a mole\"}},{\"line\":\"gasconstant = k N_A\",\"info\":{\"headingsIndex\":[4,2],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"molar gas constant\"}},{\"line\":\"R = gasconstant\",\"info\":{\"headingsIndex\":[4,2],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"molar gas constant\"}},{\"line\":\"boltzmann = 1.38064852e-23 J/K\",\"info\":{\"headingsIndex\":[4,2],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"Boltzmann constant\"}},{\"line\":\"k = boltzmann\",\"info\":{\"headingsIndex\":[4,2],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"Boltzmann constant\"}},{\"line\":\"kboltzmann = boltzmann\",\"info\":{\"headingsIndex\":[4,2],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"Boltzmann constant\"}},{\"line\":\"molarvolume = mol R stdtemp / atm\",\"info\":{\"headingsIndex\":[4,2],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"Volume occupied by one mole of an\\nideal gas at STP.\"}},{\"line\":\"loschmidt = avogadro mol / molarvolume\",\"info\":{\"headingsIndex\":[4,2],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"Molecules per cubic meter of an\\nideal gas at STP.  Loschmidt did\\nwork similar to Avogadro.\"}},{\"line\":\"stefanboltzmann = pi^2 k^4 / 60 hbar^3 c^2\",\"info\":{\"headingsIndex\":[4,2],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"The power per area radiated by a\\nblackbody at temperature T is\\ngiven by sigma T^4.\"}},{\"line\":\"sigma = stefanboltzmann\",\"info\":{\"headingsIndex\":[4,2],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"The power per area radiated by a\\nblackbody at temperature T is\\ngiven by sigma T^4.\"}},{\"line\":\"wiendisplacement = 2.8977729e-3 m K\",\"info\":{\"headingsIndex\":[4,2],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"Wien's Displacement Law gives the\\nfrequency at which the the Planck\\nspectrum has maximum intensity.\\nThe relation is lambda T = b where\\nlambda is wavelength, T is\\ntemperature and b is the Wien\\ndisplacement.  This relation is\\nused to determine the temperature\\nof stars.\"}},{\"line\":\"K_J90 = 483597.9 GHz/V\",\"info\":{\"headingsIndex\":[4,2],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"Direct measurement of the volt is difficult.  Until\\nrecently, laboratories kept Weston cadmium cells as\\na reference, but they could drift.  In 1987 the\\nCGPM officially recommended the use of the\\nJosephson effect as a laboratory representation of\\nthe volt.  The Josephson effect occurs when two\\nsuperconductors are separated by a thin insulating\\nlayer.  A \\\"supercurrent\\\" flows across the insulator\\nwith a frequency that depends on the potential\\napplied across the superconductors.  This frequency\\ncan be very accurately measured.  The Josephson\\nconstant K_J, which is equal to 2e/h, relates the\\nmeasured frequency to the potential.  Two values\\ngiven, the conventional (exact) value from 1990 and\\nthe current CODATA measured value.\"}},{\"line\":\"K_J = 483597.8525 GHz/V\",\"info\":{\"headingsIndex\":[4,2],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"Direct measurement of the volt is difficult.  Until\\nrecently, laboratories kept Weston cadmium cells as\\na reference, but they could drift.  In 1987 the\\nCGPM officially recommended the use of the\\nJosephson effect as a laboratory representation of\\nthe volt.  The Josephson effect occurs when two\\nsuperconductors are separated by a thin insulating\\nlayer.  A \\\"supercurrent\\\" flows across the insulator\\nwith a frequency that depends on the potential\\napplied across the superconductors.  This frequency\\ncan be very accurately measured.  The Josephson\\nconstant K_J, which is equal to 2e/h, relates the\\nmeasured frequency to the potential.  Two values\\ngiven, the conventional (exact) value from 1990 and\\nthe current CODATA measured value.\"}},{\"line\":\"R_K90 = 25812.807 ohm\",\"info\":{\"headingsIndex\":[4,2],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"Measurement of the ohm also presents difficulties.\\nThe old approach involved maintaining resistances\\nthat were subject to drift.  The new standard is\\nbased on the Hall effect.  When a current carrying\\nribbon is placed in a magnetic field, a potential\\ndifference develops across the ribbon.  The ratio\\nof the potential difference to the current is\\ncalled the Hall resistance.  Klaus von Klitzing\\ndiscovered in 1980 that the Hall resistance varies\\nin discrete jumps when the magnetic field is very\\nlarge and the temperature very low.  This enables\\naccurate realization of the resistance h/e^2 in the\\nlab.  Two values given, the conventional (exact)\\nvalue from 1990 and the current CODATA measured\\nvalue.\"}},{\"line\":\"R_K = 25812.8074555 ohm\",\"info\":{\"headingsIndex\":[4,2],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.2. Physico-chemical constants\"],\"comment\":\"Measurement of the ohm also presents difficulties.\\nThe old approach involved maintaining resistances\\nthat were subject to drift.  The new standard is\\nbased on the Hall effect.  When a current carrying\\nribbon is placed in a magnetic field, a potential\\ndifference develops across the ribbon.  The ratio\\nof the potential difference to the current is\\ncalled the Hall resistance.  Klaus von Klitzing\\ndiscovered in 1980 that the Hall resistance varies\\nin discrete jumps when the magnetic field is very\\nlarge and the temperature very low.  This enables\\naccurate realization of the resistance h/e^2 in the\\nlab.  Two values given, the conventional (exact)\\nvalue from 1990 and the current CODATA measured\\nvalue.\"}},{\"line\":\"gravity = 9.80665 m/s^2\",\"info\":{\"headingsIndex\":[4,3],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.3. Various conventional values\"],\"comment\":\"std acceleration of gravity (exact)\\nuse to turn masses into forces\"}},{\"line\":\"force = gravity\",\"info\":{\"headingsIndex\":[4,3],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.3. Various conventional values\"],\"comment\":\"std acceleration of gravity (exact)\\nuse to turn masses into forces\"}},{\"line\":\"atm = 101325 Pa\",\"info\":{\"headingsIndex\":[4,3],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.3. Various conventional values\"],\"comment\":\"Standard atmospheric pressure\"}},{\"line\":\"atmosphere = atm\",\"info\":{\"headingsIndex\":[4,3],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.3. Various conventional values\"],\"comment\":\"Standard atmospheric pressure\"}},{\"line\":\"Hg = 13.5951 gram force / cm^3\",\"info\":{\"headingsIndex\":[4,3],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.3. Various conventional values\"],\"comment\":\"Standard weight of mercury (exact)\"}},{\"line\":\"water = gram force/cm^3\",\"info\":{\"headingsIndex\":[4,3],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.3. Various conventional values\"],\"comment\":\"Standard weight of water (exact)\"}},{\"line\":\"waterdensity = gram / cm^3\",\"info\":{\"headingsIndex\":[4,3],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.3. Various conventional values\"],\"comment\":\"Density of water\"}},{\"line\":\"H2O = water\",\"info\":{\"headingsIndex\":[4,3],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.3. Various conventional values\"],\"comment\":\"water column\"}},{\"line\":\"wc = water\",\"info\":{\"headingsIndex\":[4,3],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.3. Various conventional values\"],\"comment\":\"water column\"}},{\"line\":\"mach = 331.46 m/s\",\"info\":{\"headingsIndex\":[4,3],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.3. Various conventional values\"],\"comment\":\"speed of sound in dry air at STP\"}},{\"line\":\"standardtemp = 273.15 K\",\"info\":{\"headingsIndex\":[4,3],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.3. Various conventional values\"],\"comment\":\"standard temperature\"}},{\"line\":\"stdtemp = standardtemp\",\"info\":{\"headingsIndex\":[4,3],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.3. Various conventional values\"],\"comment\":\"standard temperature\"}},{\"line\":\"normaltemp = tempF(70)\",\"info\":{\"headingsIndex\":[4,3],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.3. Various conventional values\"],\"comment\":\"for gas density, from NIST\\nHandbook 44\"}},{\"line\":\"normtemp = normaltemp\",\"info\":{\"headingsIndex\":[4,3],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.3. Various conventional values\"],\"comment\":\"for gas density, from NIST\\nHandbook 44\"}},{\"line\":\"Hg10C = 13.5708 force gram / cm^3\",\"info\":{\"headingsIndex\":[4,4],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.4. Weight of mercury and water at different temperatures using the standard\\nforce of gravity.\"],\"comment\":\"These units, when used to form\\npressure measures, are not accurate\\nbecause of considerations of the\\nrevised practical temperature scale.\"}},{\"line\":\"Hg20C = 13.5462 force gram / cm^3\",\"info\":{\"headingsIndex\":[4,4],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.4. Weight of mercury and water at different temperatures using the standard\\nforce of gravity.\"],\"comment\":\"These units, when used to form\\npressure measures, are not accurate\\nbecause of considerations of the\\nrevised practical temperature scale.\"}},{\"line\":\"Hg23C = 13.5386 force gram / cm^3\",\"info\":{\"headingsIndex\":[4,4],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.4. Weight of mercury and water at different temperatures using the standard\\nforce of gravity.\"],\"comment\":\"These units, when used to form\\npressure measures, are not accurate\\nbecause of considerations of the\\nrevised practical temperature scale.\"}},{\"line\":\"Hg30C = 13.5217 force gram / cm^3\",\"info\":{\"headingsIndex\":[4,4],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.4. Weight of mercury and water at different temperatures using the standard\\nforce of gravity.\"],\"comment\":\"These units, when used to form\\npressure measures, are not accurate\\nbecause of considerations of the\\nrevised practical temperature scale.\"}},{\"line\":\"Hg40C = 13.4973 force gram / cm^3\",\"info\":{\"headingsIndex\":[4,4],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.4. Weight of mercury and water at different temperatures using the standard\\nforce of gravity.\"],\"comment\":\"These units, when used to form\\npressure measures, are not accurate\\nbecause of considerations of the\\nrevised practical temperature scale.\"}},{\"line\":\"Hg60F = 13.5574 force gram / cm^3\",\"info\":{\"headingsIndex\":[4,4],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.4. Weight of mercury and water at different temperatures using the standard\\nforce of gravity.\"],\"comment\":\"These units, when used to form\\npressure measures, are not accurate\\nbecause of considerations of the\\nrevised practical temperature scale.\"}},{\"line\":\"H2O0C = 0.99987 force gram / cm^3\",\"info\":{\"headingsIndex\":[4,4],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.4. Weight of mercury and water at different temperatures using the standard\\nforce of gravity.\"],\"comment\":\"These units, when used to form\\npressure measures, are not accurate\\nbecause of considerations of the\\nrevised practical temperature scale.\"}},{\"line\":\"H2O5C = 0.99999 force gram / cm^3\",\"info\":{\"headingsIndex\":[4,4],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.4. Weight of mercury and water at different temperatures using the standard\\nforce of gravity.\"],\"comment\":\"These units, when used to form\\npressure measures, are not accurate\\nbecause of considerations of the\\nrevised practical temperature scale.\"}},{\"line\":\"H2O10C = 0.99973 force gram / cm^3\",\"info\":{\"headingsIndex\":[4,4],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.4. Weight of mercury and water at different temperatures using the standard\\nforce of gravity.\"],\"comment\":\"These units, when used to form\\npressure measures, are not accurate\\nbecause of considerations of the\\nrevised practical temperature scale.\"}},{\"line\":\"H2O15C = 0.99913 force gram / cm^3\",\"info\":{\"headingsIndex\":[4,4],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.4. Weight of mercury and water at different temperatures using the standard\\nforce of gravity.\"],\"comment\":\"These units, when used to form\\npressure measures, are not accurate\\nbecause of considerations of the\\nrevised practical temperature scale.\"}},{\"line\":\"H2O18C = 0.99862 force gram / cm^3\",\"info\":{\"headingsIndex\":[4,4],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.4. Weight of mercury and water at different temperatures using the standard\\nforce of gravity.\"],\"comment\":\"These units, when used to form\\npressure measures, are not accurate\\nbecause of considerations of the\\nrevised practical temperature scale.\"}},{\"line\":\"H2O20C = 0.99823 force gram / cm^3\",\"info\":{\"headingsIndex\":[4,4],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.4. Weight of mercury and water at different temperatures using the standard\\nforce of gravity.\"],\"comment\":\"These units, when used to form\\npressure measures, are not accurate\\nbecause of considerations of the\\nrevised practical temperature scale.\"}},{\"line\":\"H2O25C = 0.99707 force gram / cm^3\",\"info\":{\"headingsIndex\":[4,4],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.4. Weight of mercury and water at different temperatures using the standard\\nforce of gravity.\"],\"comment\":\"These units, when used to form\\npressure measures, are not accurate\\nbecause of considerations of the\\nrevised practical temperature scale.\"}},{\"line\":\"H2O50C = 0.98807 force gram / cm^3\",\"info\":{\"headingsIndex\":[4,4],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.4. Weight of mercury and water at different temperatures using the standard\\nforce of gravity.\"],\"comment\":\"These units, when used to form\\npressure measures, are not accurate\\nbecause of considerations of the\\nrevised practical temperature scale.\"}},{\"line\":\"H2O100C = 0.95838 force gram / cm^3\",\"info\":{\"headingsIndex\":[4,4],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.4. Weight of mercury and water at different temperatures using the standard\\nforce of gravity.\"],\"comment\":\"These units, when used to form\\npressure measures, are not accurate\\nbecause of considerations of the\\nrevised practical temperature scale.\"}},{\"line\":\"Rinfinity = 10973731.568539 /m\",\"info\":{\"headingsIndex\":[4,5],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.5. Atomic constants\"],\"comment\":\"The wavelengths of a spectral series\\ncan be expressed as\\n1/lambda = R (1/m^2 - 1/n^2).\\nwhere R is a number that various\\nslightly from element to element.\\nFor hydrogen, R_H is the value,\\nand for heavy elements, the value\\napproaches Rinfinity, which can be\\ncomputed from\\nm_e c alpha^2 / 2 h\\nwith a loss of 4 digits\\nof precision.\"}},{\"line\":\"R_H = 10967760 /m\",\"info\":{\"headingsIndex\":[4,5],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.5. Atomic constants\"],\"comment\":\"The wavelengths of a spectral series\\ncan be expressed as\\n1/lambda = R (1/m^2 - 1/n^2).\\nwhere R is a number that various\\nslightly from element to element.\\nFor hydrogen, R_H is the value,\\nand for heavy elements, the value\\napproaches Rinfinity, which can be\\ncomputed from\\nm_e c alpha^2 / 2 h\\nwith a loss of 4 digits\\nof precision.\"}},{\"line\":\"alpha = 7.2973525664e-3\",\"info\":{\"headingsIndex\":[4,5],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.5. Atomic constants\"],\"comment\":\"The fine structure constant was\\nintroduced to explain fine\\nstructure visible in spectral\\nlines.  It can be computed from\\nmu0 c e^2 / 2 h\\nwith a loss of 3 digits precision\\nand loss of precision in derived\\nvalues which use alpha.\"}},{\"line\":\"bohrradius = alpha / 4 pi Rinfinity\",\"info\":{\"headingsIndex\":[4,5],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.5. Atomic constants\"],\"comment\":\"\"}},{\"line\":\"prout = 185.5 keV\",\"info\":{\"headingsIndex\":[4,5],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.5. Atomic constants\"],\"comment\":\"nuclear binding energy equal to 1|12\\nbinding energy of the deuteron\"}},{\"line\":\"planckmass = 2.17651e-8 kg\",\"info\":{\"headingsIndex\":[4,6],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.6. Planck constants\"],\"comment\":\"sqrt(hbar c / G)\"}},{\"line\":\"m_P = planckmass\",\"info\":{\"headingsIndex\":[4,6],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.6. Planck constants\"],\"comment\":\"sqrt(hbar c / G)\"}},{\"line\":\"plancktime = hbar / planckmass c^2\",\"info\":{\"headingsIndex\":[4,6],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.6. Planck constants\"],\"comment\":\"\"}},{\"line\":\"t_P = plancktime\",\"info\":{\"headingsIndex\":[4,6],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.6. Planck constants\"],\"comment\":\"\"}},{\"line\":\"plancklength = plancktime c\",\"info\":{\"headingsIndex\":[4,6],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.6. Planck constants\"],\"comment\":\"\"}},{\"line\":\"l_P = plancklength\",\"info\":{\"headingsIndex\":[4,6],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.6. Planck constants\"],\"comment\":\"\"}},{\"line\":\"electronradius = (1/4 pi epsilon0) e^2 / electronmass c^2\",\"info\":{\"headingsIndex\":[4,7],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.7. Particle radius\"],\"comment\":\"Classical\"}},{\"line\":\"deuteronchargeradius = 2.1413e-15 m\",\"info\":{\"headingsIndex\":[4,7],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.7. Particle radius\"],\"comment\":\"\"}},{\"line\":\"protonchargeradius = 0.8751e-15 m\",\"info\":{\"headingsIndex\":[4,7],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.7. Particle radius\"],\"comment\":\"\"}},{\"line\":\"electronmass = 5.48579909070e-4 u\",\"info\":{\"headingsIndex\":[4,8],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"m_e = electronmass\",\"info\":{\"headingsIndex\":[4,8],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"protonmass = 1.007276466879 u\",\"info\":{\"headingsIndex\":[4,8],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"m_p = protonmass\",\"info\":{\"headingsIndex\":[4,8],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"neutronmass = 1.00866491588 u\",\"info\":{\"headingsIndex\":[4,8],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"m_n = neutronmass\",\"info\":{\"headingsIndex\":[4,8],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"muonmass = 0.1134289257 u\",\"info\":{\"headingsIndex\":[4,8],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"m_mu = muonmass\",\"info\":{\"headingsIndex\":[4,8],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"deuteronmass = 2.013553212745 u\",\"info\":{\"headingsIndex\":[4,8],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"m_d = deuteronmass\",\"info\":{\"headingsIndex\":[4,8],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"alphaparticlemass = 4.001506179127 u\",\"info\":{\"headingsIndex\":[4,8],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"m_alpha = alphaparticlemass\",\"info\":{\"headingsIndex\":[4,8],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"taumass = 1.90749 u\",\"info\":{\"headingsIndex\":[4,8],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"m_tau = taumass\",\"info\":{\"headingsIndex\":[4,8],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"tritonmass = 3.01550071632 u\",\"info\":{\"headingsIndex\":[4,8],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"m_t = tritonmass\",\"info\":{\"headingsIndex\":[4,8],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"helionmass = 3.01493224673 u\",\"info\":{\"headingsIndex\":[4,8],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"m_h = helionmass\",\"info\":{\"headingsIndex\":[4,8],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.8. Masses of elementary particles\"],\"comment\":\"\"}},{\"line\":\"electronwavelength = h / m_e c\",\"info\":{\"headingsIndex\":[4,9],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.9. particle wavelengths: the compton wavelength of a particle is\\ndefined as h / m c where m is the mass of the particle.\"],\"comment\":\"\"}},{\"line\":\"lambda_C = electronwavelength\",\"info\":{\"headingsIndex\":[4,9],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.9. particle wavelengths: the compton wavelength of a particle is\\ndefined as h / m c where m is the mass of the particle.\"],\"comment\":\"\"}},{\"line\":\"protonwavelength = h / m_p c\",\"info\":{\"headingsIndex\":[4,9],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.9. particle wavelengths: the compton wavelength of a particle is\\ndefined as h / m c where m is the mass of the particle.\"],\"comment\":\"\"}},{\"line\":\"lambda_C,p = protonwavelength\",\"info\":{\"headingsIndex\":[4,9],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.9. particle wavelengths: the compton wavelength of a particle is\\ndefined as h / m c where m is the mass of the particle.\"],\"comment\":\"\"}},{\"line\":\"neutronwavelength = h / m_n c\",\"info\":{\"headingsIndex\":[4,9],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.9. particle wavelengths: the compton wavelength of a particle is\\ndefined as h / m c where m is the mass of the particle.\"],\"comment\":\"\"}},{\"line\":\"lambda_C,n = neutronwavelength\",\"info\":{\"headingsIndex\":[4,9],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.9. particle wavelengths: the compton wavelength of a particle is\\ndefined as h / m c where m is the mass of the particle.\"],\"comment\":\"\"}},{\"line\":\"bohrmagneton = e hbar / 2 electronmass\",\"info\":{\"headingsIndex\":[4,10],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.10. Magnetic moments\"],\"comment\":\"\"}},{\"line\":\"mu_B = bohrmagneton\",\"info\":{\"headingsIndex\":[4,10],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.10. Magnetic moments\"],\"comment\":\"\"}},{\"line\":\"nuclearmagneton = e hbar /  2 protonmass\",\"info\":{\"headingsIndex\":[4,10],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.10. Magnetic moments\"],\"comment\":\"\"}},{\"line\":\"mu_N = nuclearmagneton\",\"info\":{\"headingsIndex\":[4,10],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.10. Magnetic moments\"],\"comment\":\"\"}},{\"line\":\"mu_mu = -4.49044826e-26 J/T\",\"info\":{\"headingsIndex\":[4,10],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.10. Magnetic moments\"],\"comment\":\"Muon magnetic moment\"}},{\"line\":\"mu_p = 1.4106067873e-26 J/T\",\"info\":{\"headingsIndex\":[4,10],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.10. Magnetic moments\"],\"comment\":\"Proton magnetic moment\"}},{\"line\":\"mu_e = -928.4764620e-26 J/T\",\"info\":{\"headingsIndex\":[4,10],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.10. Magnetic moments\"],\"comment\":\"Electron magnetic moment\"}},{\"line\":\"mu_n = -0.96623650e-26 J/T\",\"info\":{\"headingsIndex\":[4,10],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.10. Magnetic moments\"],\"comment\":\"Neutron magnetic moment\"}},{\"line\":\"mu_d = 0.4330735040e-26 J/T\",\"info\":{\"headingsIndex\":[4,10],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.10. Magnetic moments\"],\"comment\":\"Deuteron magnetic moment\"}},{\"line\":\"mu_t = 1.504609503e-26 J/T\",\"info\":{\"headingsIndex\":[4,10],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.10. Magnetic moments\"],\"comment\":\"Triton magnetic moment\"}},{\"line\":\"mu_h = -1.074617522e-26 J/T\",\"info\":{\"headingsIndex\":[4,10],\"headingLevel\":2,\"headings\":[\"4. Physical constants\",\"4.10. Magnetic moments\"],\"comment\":\"Helion magnetic moment\"}},{\"line\":\"kgf = kg force\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"\"}},{\"line\":\"technicalatmosphere = kgf / cm^2\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"\"}},{\"line\":\"at = technicalatmosphere\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"\"}},{\"line\":\"hyl = kgf s^2 / m\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Also gram-force s^2/m according to [15]\"}},{\"line\":\"mmHg = mm Hg\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"\"}},{\"line\":\"torr = atm / 760\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"These units, both named after Evangelista\\nTorricelli, should not be confused.  The\\ntorr is very close to the mm Hg.\"}},{\"line\":\"tor = Pa\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"These units, both named after Evangelista\\nTorricelli, should not be confused.  The\\ntorr is very close to the mm Hg.\"}},{\"line\":\"inHg = inch Hg\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"These units, both named after Evangelista\\nTorricelli, should not be confused.  The\\ntorr is very close to the mm Hg.\"}},{\"line\":\"inH2O = inch water\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"\"}},{\"line\":\"mmH2O = mm water\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"\"}},{\"line\":\"eV = e V\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Energy acquired by a particle with charge e\\nwhen it is accelerated through 1 V\"}},{\"line\":\"electronvolt = eV\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Energy acquired by a particle with charge e\\nwhen it is accelerated through 1 V\"}},{\"line\":\"lightyear = c julianyear\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"The 365.25 day year is specified in\\nNIST publication 811\"}},{\"line\":\"ly = lightyear\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"The 365.25 day year is specified in\\nNIST publication 811\"}},{\"line\":\"lightsecond = c s\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"\"}},{\"line\":\"lightminute = c min\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"\"}},{\"line\":\"parsec = au / tan(arcsec)\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Unit of length equal to distance\\nfrom the sun to a point having\\nheliocentric parallax of 1\\narcsec (derived from parallax\\nsecond).  A distant object with\\nparalax theta will be about\\n(arcsec/theta) parsecs from the\\nsun (using the approximation\\nthat tan(theta) = theta).\"}},{\"line\":\"pc = parsec\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Unit of length equal to distance\\nfrom the sun to a point having\\nheliocentric parallax of 1\\narcsec (derived from parallax\\nsecond).  A distant object with\\nparalax theta will be about\\n(arcsec/theta) parsecs from the\\nsun (using the approximation\\nthat tan(theta) = theta).\"}},{\"line\":\"rydberg = h c Rinfinity\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Rydberg energy\"}},{\"line\":\"crith = 0.089885 gram\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"The crith is the mass of one\\nliter of hydrogen at standard\\ntemperature and pressure.\"}},{\"line\":\"amagatvolume = molarvolume\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"\"}},{\"line\":\"amagat = mol/amagatvolume\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Used to measure gas densities\"}},{\"line\":\"lorentz = bohrmagneton / h c\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Used to measure the extent\\nthat the frequency of light\\nis shifted by a magnetic field.\"}},{\"line\":\"cminv = h c / cm\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Unit of energy used in infrared\\nspectroscopy.\"}},{\"line\":\"invcm = cminv\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Unit of energy used in infrared\\nspectroscopy.\"}},{\"line\":\"wavenumber = cminv\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Unit of energy used in infrared\\nspectroscopy.\"}},{\"line\":\"kcal_mol = kcal_th / mol N_A\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"kcal/mol is used as a unit of\\nenergy by physical chemists.\"}},{\"line\":\"dyne = cm gram / s^2\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"force\"}},{\"line\":\"dyn = dyne\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"force\"}},{\"line\":\"erg = cm dyne\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"energy\"}},{\"line\":\"poise = gram / cm s\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"viscosity, honors Jean Poiseuille\"}},{\"line\":\"P = poise\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"viscosity, honors Jean Poiseuille\"}},{\"line\":\"rhe = /poise\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"reciprocal viscosity\"}},{\"line\":\"stokes = cm^2 / s\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"kinematic viscosity\"}},{\"line\":\"St = stokes\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"kinematic viscosity\"}},{\"line\":\"stoke = stokes\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"kinematic viscosity\"}},{\"line\":\"lentor = stokes\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"old name\"}},{\"line\":\"Gal = cm / s^2\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"acceleration, used in geophysics\\nfor earth's gravitational field\\n(note that \\\"gal\\\" is for gallon\\nbut \\\"Gal\\\" is the standard symbol\\nfor the gal which is evidently a\\nshortened form of \\\"galileo\\\".)\"}},{\"line\":\"galileo = Gal\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"acceleration, used in geophysics\\nfor earth's gravitational field\\n(note that \\\"gal\\\" is for gallon\\nbut \\\"Gal\\\" is the standard symbol\\nfor the gal which is evidently a\\nshortened form of \\\"galileo\\\".)\"}},{\"line\":\"barye = dyne/cm^2\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"pressure\"}},{\"line\":\"barad = barye\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"old name\"}},{\"line\":\"kayser = 1/cm\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Proposed as a unit for wavenumber\\nEven less common name than \\\"kayser\\\"\"}},{\"line\":\"balmer = kayser\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Proposed as a unit for wavenumber\\nEven less common name than \\\"kayser\\\"\"}},{\"line\":\"kine = cm/s\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"velocity\"}},{\"line\":\"bole = g cm / s\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"momentum\"}},{\"line\":\"pond = gram force\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"\"}},{\"line\":\"glug = gram force s^2 / cm\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Mass which is accelerated at\\n1 cm/s^2 by 1 gram force\"}},{\"line\":\"darcy = centipoise cm^2 / s atm\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Measures permeability to fluid flow.\\n\\nOne darcy is the permeability of a\\nmedium that allows a flow of cc/s\\nof a liquid of centipoise viscosity\\nunder a pressure gradient of\\natm/cm.  Named for H. Darcy.\"}},{\"line\":\"mobileohm = cm / dyn s\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"mobile ohm, measure of mechanical\\nmobility\"}},{\"line\":\"mechanicalohm = dyn s / cm\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"mechanical resistance\"}},{\"line\":\"acousticalohm = dyn s / cm^5\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"ratio of the sound pressure of\\n1 dyn/cm^2 to a source of strength\\n1 cm^3/s\"}},{\"line\":\"ray = acousticalohm\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"ratio of the sound pressure of\\n1 dyn/cm^2 to a source of strength\\n1 cm^3/s\"}},{\"line\":\"rayl = dyn s / cm^3\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Specific acoustical resistance\"}},{\"line\":\"eotvos = 1e-9 Gal/cm\",\"info\":{\"headingsIndex\":[5],\"headingLevel\":1,\"headings\":[\"5. Units derived from physical constants\"],\"comment\":\"Change in gravitational acceleration\\nover horizontal distance\"}},{\"line\":\"abampere = 10 A\",\"info\":{\"headingsIndex\":[5,1],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"Current which produces a force of\\n2 dyne/cm between two infinitely\\nlong wires that are 1 cm apart\\nalternative name for abamp\"}},{\"line\":\"abamp = abampere\",\"info\":{\"headingsIndex\":[5,1],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"Current which produces a force of\\n2 dyne/cm between two infinitely\\nlong wires that are 1 cm apart\\nalternative name for abamp\"}},{\"line\":\"aA = abampere\",\"info\":{\"headingsIndex\":[5,1],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"Current which produces a force of\\n2 dyne/cm between two infinitely\\nlong wires that are 1 cm apart\\nalternative name for abamp\"}},{\"line\":\"biot = aA\",\"info\":{\"headingsIndex\":[5,1],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"Current which produces a force of\\n2 dyne/cm between two infinitely\\nlong wires that are 1 cm apart\\nalternative name for abamp\"}},{\"line\":\"Bi = biot\",\"info\":{\"headingsIndex\":[5,1],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"Current which produces a force of\\n2 dyne/cm between two infinitely\\nlong wires that are 1 cm apart\\nalternative name for abamp\"}},{\"line\":\"abcoulomb = abamp sec\",\"info\":{\"headingsIndex\":[5,1],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\"}},{\"line\":\"abcoul = abcoulomb\",\"info\":{\"headingsIndex\":[5,1],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\"}},{\"line\":\"abfarad = abampere sec / abvolt\",\"info\":{\"headingsIndex\":[5,1],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\"}},{\"line\":\"abhenry = abvolt sec / abamp\",\"info\":{\"headingsIndex\":[5,1],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\"}},{\"line\":\"abvolt = dyne cm  / abamp sec\",\"info\":{\"headingsIndex\":[5,1],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\"}},{\"line\":\"abohm = abvolt / abamp\",\"info\":{\"headingsIndex\":[5,1],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\"}},{\"line\":\"abmho = /abohm\",\"info\":{\"headingsIndex\":[5,1],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\"}},{\"line\":\"gauss = abvolt sec / cm^2\",\"info\":{\"headingsIndex\":[5,1],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\"}},{\"line\":\"Gs = gauss\",\"info\":{\"headingsIndex\":[5,1],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\"}},{\"line\":\"maxwell = abvolt sec\",\"info\":{\"headingsIndex\":[5,1],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"Also called the \\\"line\\\"\"}},{\"line\":\"Mx = maxwell\",\"info\":{\"headingsIndex\":[5,1],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"Also called the \\\"line\\\"\"}},{\"line\":\"oersted = gauss / mu0\",\"info\":{\"headingsIndex\":[5,1],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\"}},{\"line\":\"Oe = oersted\",\"info\":{\"headingsIndex\":[5,1],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\"}},{\"line\":\"gilbert = gauss cm / mu0\",\"info\":{\"headingsIndex\":[5,1],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\"}},{\"line\":\"Gb = gilbert\",\"info\":{\"headingsIndex\":[5,1],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\"}},{\"line\":\"Gi = gilbert\",\"info\":{\"headingsIndex\":[5,1],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\"}},{\"line\":\"unitpole = 4 pi maxwell\",\"info\":{\"headingsIndex\":[5,1],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\"}},{\"line\":\"emu = erg/gauss\",\"info\":{\"headingsIndex\":[5,1],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\"],\"comment\":\"\\\"electro-magnetic unit\\\", a measure of\\nmagnetic moment, often used as emu/cm^3\\nto specify magnetic moment density.\"}},{\"line\":\"statampere = 10 A cm / s c\",\"info\":{\"headingsIndex\":[5,1,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"\"}},{\"line\":\"statamp = statampere\",\"info\":{\"headingsIndex\":[5,1,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"\"}},{\"line\":\"statvolt = dyne cm / statamp sec\",\"info\":{\"headingsIndex\":[5,1,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"\"}},{\"line\":\"statcoulomb = statamp s\",\"info\":{\"headingsIndex\":[5,1,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"\"}},{\"line\":\"esu = statcoulomb\",\"info\":{\"headingsIndex\":[5,1,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"\"}},{\"line\":\"statcoul = statcoulomb\",\"info\":{\"headingsIndex\":[5,1,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"\"}},{\"line\":\"statfarad = statamp sec / statvolt\",\"info\":{\"headingsIndex\":[5,1,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"\"}},{\"line\":\"cmcapacitance = statfarad\",\"info\":{\"headingsIndex\":[5,1,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"\"}},{\"line\":\"stathenry = statvolt sec / statamp\",\"info\":{\"headingsIndex\":[5,1,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"\"}},{\"line\":\"statohm = statvolt / statamp\",\"info\":{\"headingsIndex\":[5,1,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"\"}},{\"line\":\"statmho = /statohm\",\"info\":{\"headingsIndex\":[5,1,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"\"}},{\"line\":\"statmaxwell = statvolt sec\",\"info\":{\"headingsIndex\":[5,1,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"\"}},{\"line\":\"franklin = statcoulomb\",\"info\":{\"headingsIndex\":[5,1,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"\"}},{\"line\":\"debye = 1e-18 statcoul cm\",\"info\":{\"headingsIndex\":[5,1,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"unit of electrical dipole moment\"}},{\"line\":\"helmholtz = debye/angstrom^2\",\"info\":{\"headingsIndex\":[5,1,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"Dipole moment per area\"}},{\"line\":\"jar = 1000 statfarad\",\"info\":{\"headingsIndex\":[5,1,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.1. Gaussian system: electromagnetic units derived from statampere.\\n\\nNote that the Gaussian units are often used in such a way that Coulomb's law\\nhas the form F= q1 * q2 / r^2. The constant 1|4*pi*epsilon0 is incorporated\\ninto the units. From this, we can get the relation force=charge^2/dist^2.\\nThis means that the simplification esu^2 = dyne cm^2 can be used to simplify\\nunits in the Gaussian system, with the curious result that capacitance can be\\nmeasured in cm, resistance in sec/cm, and inductance in sec^2/cm. These\\nunits are given the names statfarad, statohm and stathenry below.\"],\"comment\":\"approx capacitance of Leyden jar\"}},{\"line\":\"intampere = 0.999835 A\",\"info\":{\"headingsIndex\":[5,1,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"Defined as the current which in one\\nsecond deposits .001118 gram of\\nsilver from an aqueous solution of\\nsilver nitrate.\"}},{\"line\":\"intamp = intampere\",\"info\":{\"headingsIndex\":[5,1,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"Defined as the current which in one\\nsecond deposits .001118 gram of\\nsilver from an aqueous solution of\\nsilver nitrate.\"}},{\"line\":\"intfarad = 0.999505 F\",\"info\":{\"headingsIndex\":[5,1,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"\"}},{\"line\":\"intvolt = 1.00033 V\",\"info\":{\"headingsIndex\":[5,1,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"\"}},{\"line\":\"intohm = 1.000495 ohm\",\"info\":{\"headingsIndex\":[5,1,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"Defined as the resistance of a\\nuniform column of mercury containing\\n14.4521 gram in a column 1.063 m\\nlong and maintained at 0 degC.\"}},{\"line\":\"daniell = 1.042 V\",\"info\":{\"headingsIndex\":[5,1,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"Meant to be electromotive force of a\\nDaniell cell, but in error by .04 V\"}},{\"line\":\"faraday = N_A e mol\",\"info\":{\"headingsIndex\":[5,1,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"Charge that must flow to deposit or\\nliberate one gram equivalent of any\\nelement.  (The chemical and physical\\nvalues are off slightly from what is\\nobtained by multiplying by amu_chem\\nor amu_phys.  These values are from\\na 1991 NIST publication.)  Note that\\nthere is a Faraday constant which is\\nequal to N_A e and hence has units of\\nC/mol.\"}},{\"line\":\"faraday_phys = 96521.9 C\",\"info\":{\"headingsIndex\":[5,1,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"Charge that must flow to deposit or\\nliberate one gram equivalent of any\\nelement.  (The chemical and physical\\nvalues are off slightly from what is\\nobtained by multiplying by amu_chem\\nor amu_phys.  These values are from\\na 1991 NIST publication.)  Note that\\nthere is a Faraday constant which is\\nequal to N_A e and hence has units of\\nC/mol.\"}},{\"line\":\"faraday_chem = 96495.7 C\",\"info\":{\"headingsIndex\":[5,1,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"Charge that must flow to deposit or\\nliberate one gram equivalent of any\\nelement.  (The chemical and physical\\nvalues are off slightly from what is\\nobtained by multiplying by amu_chem\\nor amu_phys.  These values are from\\na 1991 NIST publication.)  Note that\\nthere is a Faraday constant which is\\nequal to N_A e and hence has units of\\nC/mol.\"}},{\"line\":\"kappline = 6000 maxwell\",\"info\":{\"headingsIndex\":[5,1,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"Named by and for Gisbert Kapp\"}},{\"line\":\"siemensunit = 0.9534 ohm\",\"info\":{\"headingsIndex\":[5,1,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"Resistance of a meter long column of\\nmercury with a 1 mm cross section.\"}},{\"line\":\"copperconductivity = 58 siemens m / mm^2\",\"info\":{\"headingsIndex\":[5,1,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"A wire a meter long with\\na 1 mm^2 cross section\"}},{\"line\":\"IACS = copperconductivity\",\"info\":{\"headingsIndex\":[5,1,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"A wire a meter long with\\na 1 mm^2 cross section\"}},{\"line\":\"copperdensity = 8.89 g/cm^3\",\"info\":{\"headingsIndex\":[5,1,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"The \\\"ounce\\\" measures the\\nthickness of copper used\\nin circuitboard fabrication\"}},{\"line\":\"ouncecopper = oz / ft^2 copperdensity\",\"info\":{\"headingsIndex\":[5,1,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"The \\\"ounce\\\" measures the\\nthickness of copper used\\nin circuitboard fabrication\"}},{\"line\":\"ozcu = ouncecopper\",\"info\":{\"headingsIndex\":[5,1,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.1. Electromagnetic units derived from the abampere\",\"5.1.2. Some historical electromagnetic units\"],\"comment\":\"The \\\"ounce\\\" measures the\\nthickness of copper used\\nin circuitboard fabrication\"}},{\"line\":\"LUMINOUS_INTENSITY = candela\",\"info\":{\"headingsIndex\":[5,2],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"\"}},{\"line\":\"LUMINOUS_FLUX = lumen\",\"info\":{\"headingsIndex\":[5,2],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"\"}},{\"line\":\"LUMINOUS_ENERGY = talbot\",\"info\":{\"headingsIndex\":[5,2],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"\"}},{\"line\":\"ILLUMINANCE = lux\",\"info\":{\"headingsIndex\":[5,2],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"\"}},{\"line\":\"EXITANCE = lux\",\"info\":{\"headingsIndex\":[5,2],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"\"}},{\"line\":\"candle = 1.02 candela\",\"info\":{\"headingsIndex\":[5,2],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"Standard unit for luminous intensity\\nin use before candela\"}},{\"line\":\"hefnerunit = 0.9 candle\",\"info\":{\"headingsIndex\":[5,2],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"Standard unit for luminous intensity\\nin use before candela\"}},{\"line\":\"hefnercandle = hefnerunit\",\"info\":{\"headingsIndex\":[5,2],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"Standard unit for luminous intensity\\nin use before candela\"}},{\"line\":\"violle = 20.17 cd\",\"info\":{\"headingsIndex\":[5,2],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"luminous intensity of 1 cm^2 of\\nplatinum at its temperature of\\nsolidification (2045 K)\"}},{\"line\":\"lumen = cd sr\",\"info\":{\"headingsIndex\":[5,2],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"Luminous flux (luminous energy per\\ntime unit)\"}},{\"line\":\"lm = lumen\",\"info\":{\"headingsIndex\":[5,2],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"Luminous flux (luminous energy per\\ntime unit)\"}},{\"line\":\"talbot = lumen s\",\"info\":{\"headingsIndex\":[5,2],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"Luminous energy\\nReferences give these values for\\nlumerg and lumberg both.  Note that\\na paper from 1948 suggests that\\nlumerg should be 1e-7 talbots so\\nthat lumergs/erg = talbots/joule.\\nlumerg = luminous erg\"}},{\"line\":\"lumberg = talbot\",\"info\":{\"headingsIndex\":[5,2],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"Luminous energy\\nReferences give these values for\\nlumerg and lumberg both.  Note that\\na paper from 1948 suggests that\\nlumerg should be 1e-7 talbots so\\nthat lumergs/erg = talbots/joule.\\nlumerg = luminous erg\"}},{\"line\":\"lumerg = talbot\",\"info\":{\"headingsIndex\":[5,2],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"Luminous energy\\nReferences give these values for\\nlumerg and lumberg both.  Note that\\na paper from 1948 suggests that\\nlumerg should be 1e-7 talbots so\\nthat lumergs/erg = talbots/joule.\\nlumerg = luminous erg\"}},{\"line\":\"lux = lm/m^2\",\"info\":{\"headingsIndex\":[5,2],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"Illuminance or exitance (luminous\\nflux incident on or coming from\\na surface)\"}},{\"line\":\"lx = lux\",\"info\":{\"headingsIndex\":[5,2],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"Illuminance or exitance (luminous\\nflux incident on or coming from\\na surface)\"}},{\"line\":\"phot = lumen / cm^2\",\"info\":{\"headingsIndex\":[5,2],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"Illuminance or exitance (luminous\\nflux incident on or coming from\\na surface)\"}},{\"line\":\"ph = phot\",\"info\":{\"headingsIndex\":[5,2],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"Illuminance or exitance (luminous\\nflux incident on or coming from\\na surface)\"}},{\"line\":\"footcandle = lumen/ft^2\",\"info\":{\"headingsIndex\":[5,2],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"Illuminance from a 1 candela source\\nat a distance of one foot\"}},{\"line\":\"metercandle = lumen/m^2\",\"info\":{\"headingsIndex\":[5,2],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"Illuminance from a 1 candela source\\nat a distance of one meter\"}},{\"line\":\"mcs = metercandle s\",\"info\":{\"headingsIndex\":[5,2],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"luminous energy per area, used to\\nmeasure photographic exposure\"}},{\"line\":\"nox = 1e-3 lux\",\"info\":{\"headingsIndex\":[5,2],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"These two units were proposed for\\nmeasurements relating to dark adapted\\neyes.\"}},{\"line\":\"skot = 1e-3 apostilb\",\"info\":{\"headingsIndex\":[5,2],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\"],\"comment\":\"These two units were proposed for\\nmeasurements relating to dark adapted\\neyes.\"}},{\"line\":\"LUMINANCE = nit\",\"info\":{\"headingsIndex\":[5,2,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\"],\"comment\":\"\"}},{\"line\":\"nit = cd/m^2\",\"info\":{\"headingsIndex\":[5,2,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\"],\"comment\":\"Luminance: the intensity per projected\\narea of an extended luminous source.\\n(nit is from latin nitere = to shine.)\"}},{\"line\":\"stilb = cd / cm^2\",\"info\":{\"headingsIndex\":[5,2,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\"],\"comment\":\"Luminance: the intensity per projected\\narea of an extended luminous source.\\n(nit is from latin nitere = to shine.)\"}},{\"line\":\"sb = stilb\",\"info\":{\"headingsIndex\":[5,2,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\"],\"comment\":\"Luminance: the intensity per projected\\narea of an extended luminous source.\\n(nit is from latin nitere = to shine.)\"}},{\"line\":\"apostilb = cd/pi m^2\",\"info\":{\"headingsIndex\":[5,2,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\"],\"comment\":\"\"}},{\"line\":\"asb = apostilb\",\"info\":{\"headingsIndex\":[5,2,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\"],\"comment\":\"\"}},{\"line\":\"blondel = apostilb\",\"info\":{\"headingsIndex\":[5,2,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\"],\"comment\":\"Named after a French scientist.\"}},{\"line\":\"equivalentlux = cd / pi m^2\",\"info\":{\"headingsIndex\":[5,2,1,1],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\",\"5.2.1.1. Equivalent luminance measures. These units are units which measure\\nthe luminance of a surface with a specified exitance which obeys\\nLambert's law. (Lambert's law specifies that luminous intensity of\\na perfectly diffuse luminous surface is proportional to the cosine\\nof the angle at which you view the luminous surface.)\"],\"comment\":\"luminance of a 1 lux surface\"}},{\"line\":\"equivalentphot = cd / pi cm^2\",\"info\":{\"headingsIndex\":[5,2,1,1],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\",\"5.2.1.1. Equivalent luminance measures. These units are units which measure\\nthe luminance of a surface with a specified exitance which obeys\\nLambert's law. (Lambert's law specifies that luminous intensity of\\na perfectly diffuse luminous surface is proportional to the cosine\\nof the angle at which you view the luminous surface.)\"],\"comment\":\"luminance of a 1 phot surface\"}},{\"line\":\"lambert = cd / pi cm^2\",\"info\":{\"headingsIndex\":[5,2,1,1],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\",\"5.2.1.1. Equivalent luminance measures. These units are units which measure\\nthe luminance of a surface with a specified exitance which obeys\\nLambert's law. (Lambert's law specifies that luminous intensity of\\na perfectly diffuse luminous surface is proportional to the cosine\\nof the angle at which you view the luminous surface.)\"],\"comment\":\"luminance of a 1 phot surface\"}},{\"line\":\"footlambert = cd / pi ft^2\",\"info\":{\"headingsIndex\":[5,2,1,1],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\",\"5.2.1.1. Equivalent luminance measures. These units are units which measure\\nthe luminance of a surface with a specified exitance which obeys\\nLambert's law. (Lambert's law specifies that luminous intensity of\\na perfectly diffuse luminous surface is proportional to the cosine\\nof the angle at which you view the luminous surface.)\"],\"comment\":\"\"}},{\"line\":\"bril = x => 2^(x+-100) lamberts \",\"info\":{\"headingsIndex\":[5,2,1,1],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\",\"5.2.1.1. Equivalent luminance measures. These units are units which measure\\nthe luminance of a surface with a specified exitance which obeys\\nLambert's law. (Lambert's law specifies that luminous intensity of\\na perfectly diffuse luminous surface is proportional to the cosine\\nof the angle at which you view the luminous surface.)\"],\"comment\":\"The bril is used to express \\\"brilliance\\\" of a source of light on a\\nlogarithmic scale to correspond to subjective perception.  An increase of 1\\nbril means doubling the luminance.  A luminance of 1 lambert is defined to\\nhave a brilliance of 1 bril.\"}},{\"line\":\"bril^-1 = bril => log2(bril/lambert)+100\",\"info\":{\"headingsIndex\":[5,2,1,1],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\",\"5.2.1.1. Equivalent luminance measures. These units are units which measure\\nthe luminance of a surface with a specified exitance which obeys\\nLambert's law. (Lambert's law specifies that luminous intensity of\\na perfectly diffuse luminous surface is proportional to the cosine\\nof the angle at which you view the luminous surface.)\"],\"comment\":\"The bril is used to express \\\"brilliance\\\" of a source of light on a\\nlogarithmic scale to correspond to subjective perception.  An increase of 1\\nbril means doubling the luminance.  A luminance of 1 lambert is defined to\\nhave a brilliance of 1 bril.\"}},{\"line\":\"sunlum = 1.6e9 cd/m^2\",\"info\":{\"headingsIndex\":[5,2,1,2],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\",\"5.2.1.2. Some luminance data from the IES Lighting Handbook, 8th ed, 1993\"],\"comment\":\"at zenith\"}},{\"line\":\"sunillum = 100e3 lux\",\"info\":{\"headingsIndex\":[5,2,1,2],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\",\"5.2.1.2. Some luminance data from the IES Lighting Handbook, 8th ed, 1993\"],\"comment\":\"clear sky\"}},{\"line\":\"sunillum_o = 10e3 lux\",\"info\":{\"headingsIndex\":[5,2,1,2],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\",\"5.2.1.2. Some luminance data from the IES Lighting Handbook, 8th ed, 1993\"],\"comment\":\"overcast sky\"}},{\"line\":\"sunlum_h = 6e6 cd/m^2\",\"info\":{\"headingsIndex\":[5,2,1,2],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\",\"5.2.1.2. Some luminance data from the IES Lighting Handbook, 8th ed, 1993\"],\"comment\":\"value at horizon\"}},{\"line\":\"skylum = 8000 cd/m^2\",\"info\":{\"headingsIndex\":[5,2,1,2],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\",\"5.2.1.2. Some luminance data from the IES Lighting Handbook, 8th ed, 1993\"],\"comment\":\"average, clear sky\"}},{\"line\":\"skylum_o = 2000 cd/m^2\",\"info\":{\"headingsIndex\":[5,2,1,2],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\",\"5.2.1.2. Some luminance data from the IES Lighting Handbook, 8th ed, 1993\"],\"comment\":\"average, overcast sky\"}},{\"line\":\"moonlum = 2500 cd/m^2\",\"info\":{\"headingsIndex\":[5,2,1,2],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.1. Luminance measures\",\"5.2.1.2. Some luminance data from the IES Lighting Handbook, 8th ed, 1993\"],\"comment\":\"\"}},{\"line\":\"s100 = 100 / lx s\",\"info\":{\"headingsIndex\":[5,2,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\"],\"comment\":\"ISO 100 speed\"}},{\"line\":\"iso100 = s100\",\"info\":{\"headingsIndex\":[5,2,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\"],\"comment\":\"ISO 100 speed\"}},{\"line\":\"k1250 = 12.5 (cd/m^2) / lx s\",\"info\":{\"headingsIndex\":[5,2,2,1],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.1. Reflected-light meter calibration constant with ISO 100 speed\"],\"comment\":\"For Canon, Nikon, and Sekonic\"}},{\"line\":\"k1400 = 14   (cd/m^2) / lx s\",\"info\":{\"headingsIndex\":[5,2,2,1],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.1. Reflected-light meter calibration constant with ISO 100 speed\"],\"comment\":\"For Kenko (Minolta) and Pentax\"}},{\"line\":\"c250 = 250 lx / lx s\",\"info\":{\"headingsIndex\":[5,2,2,2],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.2. Incident-light meter calibration constant with ISO 100 film\"],\"comment\":\"flat-disc receptor\"}},{\"line\":\"ev100 = x => 2^x k1250 / s100\",\"info\":{\"headingsIndex\":[5,2,2,4,2],\"headingLevel\":5,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.4. \",\"5.2.2.4.2. For Canon, Nikon, or Sekonic\"],\"comment\":\"\"}},{\"line\":\"ev100^-1 = ev100 => log2(ev100 s100/k1250)\",\"info\":{\"headingsIndex\":[5,2,2,4,2],\"headingLevel\":5,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.4. \",\"5.2.2.4.2. For Canon, Nikon, or Sekonic\"],\"comment\":\"\"}},{\"line\":\"EV100 = ev100\",\"info\":{\"headingsIndex\":[5,2,2,4,2],\"headingLevel\":5,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.4. \",\"5.2.2.4.2. For Canon, Nikon, or Sekonic\"],\"comment\":\"\"}},{\"line\":\"iv100 = x => 2^x c250 / s100\",\"info\":{\"headingsIndex\":[5,2,2,5],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.5. Exposure value to scene illuminance with ISO 100 imaging media\"],\"comment\":\"\"}},{\"line\":\"iv100^-1 = iv100 => log2(iv100 s100 / c250)\",\"info\":{\"headingsIndex\":[5,2,2,5],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.5. Exposure value to scene illuminance with ISO 100 imaging media\"],\"comment\":\"\"}},{\"line\":\"N_exif = 1|3.125 lx s\",\"info\":{\"headingsIndex\":[5,2,2,6],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.6. Other Photographic Exposure Conversions\\n\\nAs part of APEX, ASA PH2.5-1960 proposed several logarithmic quantities\\nrelated by\\n\\nEv = Av + Tv = Bv + Sv\\n\\nwhere\\nAv = log2(A^2) Aperture value\\nTv = log2(1/t) Time value\\nSv = log2(N Sx) Speed value\\nBv = log2(B S / K) Luminance (\\\"brightness\\\") value\\nIv = log2(I S / C) Illuminance value\\n\\nand\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nSx = Arithmetic ISO speed in 1/lux s\\nB = luminance in cd/m2\\nI = luminance in lux\\n\\nThe constant N derives from the arcane relationship between arithmetic\\nand logarithmic speed given in ASA PH2.5-1960. That relationship\\napparently was not obvious--so much so that it was thought necessary\\nto explain it in PH2.12-1961. The constant has had several values\\nover the years, usually without explanation for the changes. Although\\nAPEX had little impact on consumer cameras, it has seen a partial\\nresurrection in the Exif standards published by the Camera & Imaging\\nProducts Association of Japan.\\n\\nN_apex 2^-1.75 lx s  precise value implied in ASA PH2.12-1961,\\nderived from ASA PH2.5-1960.\\nN_apex 0.30 lx s  rounded value in ASA PH2.5-1960,\\nASA PH2.12-1961, and ANSI PH2.7-1986\\nN_apex 0.3162 lx s  value in ANSI PH2.7-1973\"],\"comment\":\"value in Exif 2.3 (2010), making Sv(5) = 100\"}},{\"line\":\"K_apex1961 = 11.4 (cd/m^2) / lx s\",\"info\":{\"headingsIndex\":[5,2,2,6],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.6. Other Photographic Exposure Conversions\\n\\nAs part of APEX, ASA PH2.5-1960 proposed several logarithmic quantities\\nrelated by\\n\\nEv = Av + Tv = Bv + Sv\\n\\nwhere\\nAv = log2(A^2) Aperture value\\nTv = log2(1/t) Time value\\nSv = log2(N Sx) Speed value\\nBv = log2(B S / K) Luminance (\\\"brightness\\\") value\\nIv = log2(I S / C) Illuminance value\\n\\nand\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nSx = Arithmetic ISO speed in 1/lux s\\nB = luminance in cd/m2\\nI = luminance in lux\\n\\nThe constant N derives from the arcane relationship between arithmetic\\nand logarithmic speed given in ASA PH2.5-1960. That relationship\\napparently was not obvious--so much so that it was thought necessary\\nto explain it in PH2.12-1961. The constant has had several values\\nover the years, usually without explanation for the changes. Although\\nAPEX had little impact on consumer cameras, it has seen a partial\\nresurrection in the Exif standards published by the Camera & Imaging\\nProducts Association of Japan.\\n\\nN_apex 2^-1.75 lx s  precise value implied in ASA PH2.12-1961,\\nderived from ASA PH2.5-1960.\\nN_apex 0.30 lx s  rounded value in ASA PH2.5-1960,\\nASA PH2.12-1961, and ANSI PH2.7-1986\\nN_apex 0.3162 lx s  value in ANSI PH2.7-1973\"],\"comment\":\"value in ASA PH2.12-1961\"}},{\"line\":\"K_apex1971 = 12.5 (cd/m^2) / lx s\",\"info\":{\"headingsIndex\":[5,2,2,6],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.6. Other Photographic Exposure Conversions\\n\\nAs part of APEX, ASA PH2.5-1960 proposed several logarithmic quantities\\nrelated by\\n\\nEv = Av + Tv = Bv + Sv\\n\\nwhere\\nAv = log2(A^2) Aperture value\\nTv = log2(1/t) Time value\\nSv = log2(N Sx) Speed value\\nBv = log2(B S / K) Luminance (\\\"brightness\\\") value\\nIv = log2(I S / C) Illuminance value\\n\\nand\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nSx = Arithmetic ISO speed in 1/lux s\\nB = luminance in cd/m2\\nI = luminance in lux\\n\\nThe constant N derives from the arcane relationship between arithmetic\\nand logarithmic speed given in ASA PH2.5-1960. That relationship\\napparently was not obvious--so much so that it was thought necessary\\nto explain it in PH2.12-1961. The constant has had several values\\nover the years, usually without explanation for the changes. Although\\nAPEX had little impact on consumer cameras, it has seen a partial\\nresurrection in the Exif standards published by the Camera & Imaging\\nProducts Association of Japan.\\n\\nN_apex 2^-1.75 lx s  precise value implied in ASA PH2.12-1961,\\nderived from ASA PH2.5-1960.\\nN_apex 0.30 lx s  rounded value in ASA PH2.5-1960,\\nASA PH2.12-1961, and ANSI PH2.7-1986\\nN_apex 0.3162 lx s  value in ANSI PH2.7-1973\"],\"comment\":\"value in ANSI PH3.49-1971; more common\"}},{\"line\":\"C_apex1961 = 224 lx / lx s\",\"info\":{\"headingsIndex\":[5,2,2,6],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.6. Other Photographic Exposure Conversions\\n\\nAs part of APEX, ASA PH2.5-1960 proposed several logarithmic quantities\\nrelated by\\n\\nEv = Av + Tv = Bv + Sv\\n\\nwhere\\nAv = log2(A^2) Aperture value\\nTv = log2(1/t) Time value\\nSv = log2(N Sx) Speed value\\nBv = log2(B S / K) Luminance (\\\"brightness\\\") value\\nIv = log2(I S / C) Illuminance value\\n\\nand\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nSx = Arithmetic ISO speed in 1/lux s\\nB = luminance in cd/m2\\nI = luminance in lux\\n\\nThe constant N derives from the arcane relationship between arithmetic\\nand logarithmic speed given in ASA PH2.5-1960. That relationship\\napparently was not obvious--so much so that it was thought necessary\\nto explain it in PH2.12-1961. The constant has had several values\\nover the years, usually without explanation for the changes. Although\\nAPEX had little impact on consumer cameras, it has seen a partial\\nresurrection in the Exif standards published by the Camera & Imaging\\nProducts Association of Japan.\\n\\nN_apex 2^-1.75 lx s  precise value implied in ASA PH2.12-1961,\\nderived from ASA PH2.5-1960.\\nN_apex 0.30 lx s  rounded value in ASA PH2.5-1960,\\nASA PH2.12-1961, and ANSI PH2.7-1986\\nN_apex 0.3162 lx s  value in ANSI PH2.7-1973\"],\"comment\":\"value in PH2.12-1961 (20.83 for I in\\nfootcandles; flat sensor?)\"}},{\"line\":\"C_apex1971 = 322 lx / lx s\",\"info\":{\"headingsIndex\":[5,2,2,6],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.6. Other Photographic Exposure Conversions\\n\\nAs part of APEX, ASA PH2.5-1960 proposed several logarithmic quantities\\nrelated by\\n\\nEv = Av + Tv = Bv + Sv\\n\\nwhere\\nAv = log2(A^2) Aperture value\\nTv = log2(1/t) Time value\\nSv = log2(N Sx) Speed value\\nBv = log2(B S / K) Luminance (\\\"brightness\\\") value\\nIv = log2(I S / C) Illuminance value\\n\\nand\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nSx = Arithmetic ISO speed in 1/lux s\\nB = luminance in cd/m2\\nI = luminance in lux\\n\\nThe constant N derives from the arcane relationship between arithmetic\\nand logarithmic speed given in ASA PH2.5-1960. That relationship\\napparently was not obvious--so much so that it was thought necessary\\nto explain it in PH2.12-1961. The constant has had several values\\nover the years, usually without explanation for the changes. Although\\nAPEX had little impact on consumer cameras, it has seen a partial\\nresurrection in the Exif standards published by the Camera & Imaging\\nProducts Association of Japan.\\n\\nN_apex 2^-1.75 lx s  precise value implied in ASA PH2.12-1961,\\nderived from ASA PH2.5-1960.\\nN_apex 0.30 lx s  rounded value in ASA PH2.5-1960,\\nASA PH2.12-1961, and ANSI PH2.7-1986\\nN_apex 0.3162 lx s  value in ANSI PH2.7-1973\"],\"comment\":\"mean value in PH3.49-1971 (30 +/- 5 for I in\\nfootcandles; hemispherical sensor?)\"}},{\"line\":\"N_speed = N_exif\",\"info\":{\"headingsIndex\":[5,2,2,6],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.6. Other Photographic Exposure Conversions\\n\\nAs part of APEX, ASA PH2.5-1960 proposed several logarithmic quantities\\nrelated by\\n\\nEv = Av + Tv = Bv + Sv\\n\\nwhere\\nAv = log2(A^2) Aperture value\\nTv = log2(1/t) Time value\\nSv = log2(N Sx) Speed value\\nBv = log2(B S / K) Luminance (\\\"brightness\\\") value\\nIv = log2(I S / C) Illuminance value\\n\\nand\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nSx = Arithmetic ISO speed in 1/lux s\\nB = luminance in cd/m2\\nI = luminance in lux\\n\\nThe constant N derives from the arcane relationship between arithmetic\\nand logarithmic speed given in ASA PH2.5-1960. That relationship\\napparently was not obvious--so much so that it was thought necessary\\nto explain it in PH2.12-1961. The constant has had several values\\nover the years, usually without explanation for the changes. Although\\nAPEX had little impact on consumer cameras, it has seen a partial\\nresurrection in the Exif standards published by the Camera & Imaging\\nProducts Association of Japan.\\n\\nN_apex 2^-1.75 lx s  precise value implied in ASA PH2.12-1961,\\nderived from ASA PH2.5-1960.\\nN_apex 0.30 lx s  rounded value in ASA PH2.5-1960,\\nASA PH2.12-1961, and ANSI PH2.7-1986\\nN_apex 0.3162 lx s  value in ANSI PH2.7-1973\"],\"comment\":\"\"}},{\"line\":\"K_lum = K_apex1971\",\"info\":{\"headingsIndex\":[5,2,2,6],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.6. Other Photographic Exposure Conversions\\n\\nAs part of APEX, ASA PH2.5-1960 proposed several logarithmic quantities\\nrelated by\\n\\nEv = Av + Tv = Bv + Sv\\n\\nwhere\\nAv = log2(A^2) Aperture value\\nTv = log2(1/t) Time value\\nSv = log2(N Sx) Speed value\\nBv = log2(B S / K) Luminance (\\\"brightness\\\") value\\nIv = log2(I S / C) Illuminance value\\n\\nand\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nSx = Arithmetic ISO speed in 1/lux s\\nB = luminance in cd/m2\\nI = luminance in lux\\n\\nThe constant N derives from the arcane relationship between arithmetic\\nand logarithmic speed given in ASA PH2.5-1960. That relationship\\napparently was not obvious--so much so that it was thought necessary\\nto explain it in PH2.12-1961. The constant has had several values\\nover the years, usually without explanation for the changes. Although\\nAPEX had little impact on consumer cameras, it has seen a partial\\nresurrection in the Exif standards published by the Camera & Imaging\\nProducts Association of Japan.\\n\\nN_apex 2^-1.75 lx s  precise value implied in ASA PH2.12-1961,\\nderived from ASA PH2.5-1960.\\nN_apex 0.30 lx s  rounded value in ASA PH2.5-1960,\\nASA PH2.12-1961, and ANSI PH2.7-1986\\nN_apex 0.3162 lx s  value in ANSI PH2.7-1973\"],\"comment\":\"\"}},{\"line\":\"C_illum = C_apex1961\",\"info\":{\"headingsIndex\":[5,2,2,6],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.6. Other Photographic Exposure Conversions\\n\\nAs part of APEX, ASA PH2.5-1960 proposed several logarithmic quantities\\nrelated by\\n\\nEv = Av + Tv = Bv + Sv\\n\\nwhere\\nAv = log2(A^2) Aperture value\\nTv = log2(1/t) Time value\\nSv = log2(N Sx) Speed value\\nBv = log2(B S / K) Luminance (\\\"brightness\\\") value\\nIv = log2(I S / C) Illuminance value\\n\\nand\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nSx = Arithmetic ISO speed in 1/lux s\\nB = luminance in cd/m2\\nI = luminance in lux\\n\\nThe constant N derives from the arcane relationship between arithmetic\\nand logarithmic speed given in ASA PH2.5-1960. That relationship\\napparently was not obvious--so much so that it was thought necessary\\nto explain it in PH2.12-1961. The constant has had several values\\nover the years, usually without explanation for the changes. Although\\nAPEX had little impact on consumer cameras, it has seen a partial\\nresurrection in the Exif standards published by the Camera & Imaging\\nProducts Association of Japan.\\n\\nN_apex 2^-1.75 lx s  precise value implied in ASA PH2.12-1961,\\nderived from ASA PH2.5-1960.\\nN_apex 0.30 lx s  rounded value in ASA PH2.5-1960,\\nASA PH2.12-1961, and ANSI PH2.7-1986\\nN_apex 0.3162 lx s  value in ANSI PH2.7-1973\"],\"comment\":\"\"}},{\"line\":\"Av = A => 2^(A/2)\",\"info\":{\"headingsIndex\":[5,2,2,8],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.8. \"],\"comment\":\"convert relative aperture (f-number) to aperture value\"}},{\"line\":\"Av^-1 = Av => 2 log2(Av)\",\"info\":{\"headingsIndex\":[5,2,2,8],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.8. \"],\"comment\":\"convert relative aperture (f-number) to aperture value\"}},{\"line\":\"Tv = t => 2^(-t) s\",\"info\":{\"headingsIndex\":[5,2,2,8],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.8. \"],\"comment\":\"convert exposure time to time value\"}},{\"line\":\"Tv^-1 = Tv => log2(s / Tv)\",\"info\":{\"headingsIndex\":[5,2,2,8],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.8. \"],\"comment\":\"convert exposure time to time value\"}},{\"line\":\"Sval = S => 2^S / (N_speed/lx s)\",\"info\":{\"headingsIndex\":[5,2,2,8],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.8. \"],\"comment\":\"convert logarithmic speed Sv in ASA PH2.5-1960 to ASA/ISO arithmetic speed;\\nmake arithmetic speed dimensionless\\n'Sv' conflicts with the symbol for sievert; you can uncomment this function\\ndefinition if you don't need that symbol\\nSv(S)    units=[1;1] range=(0,) 2^S / (N_speed/lx s); log2((N_speed/lx s) Sv)\"}},{\"line\":\"Sval^-1 = Sval => log2((N_speed/lx s) Sval)\",\"info\":{\"headingsIndex\":[5,2,2,8],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.8. \"],\"comment\":\"convert logarithmic speed Sv in ASA PH2.5-1960 to ASA/ISO arithmetic speed;\\nmake arithmetic speed dimensionless\\n'Sv' conflicts with the symbol for sievert; you can uncomment this function\\ndefinition if you don't need that symbol\\nSv(S)    units=[1;1] range=(0,) 2^S / (N_speed/lx s); log2((N_speed/lx s) Sv)\"}},{\"line\":\"Bv = x => 2^x K_lum N_speed \",\"info\":{\"headingsIndex\":[5,2,2,8],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.8. \"],\"comment\":\"convert luminance value Bv in ASA PH2.12-1961 to luminance\"}},{\"line\":\"Bv^-1 = Bv => log2(Bv / (K_lum N_speed))\",\"info\":{\"headingsIndex\":[5,2,2,8],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.8. \"],\"comment\":\"convert luminance value Bv in ASA PH2.12-1961 to luminance\"}},{\"line\":\"Iv = x => 2^x C_illum N_speed \",\"info\":{\"headingsIndex\":[5,2,2,8],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.8. \"],\"comment\":\"convert illuminance value Iv in ASA PH2.12-1961 to illuminance\"}},{\"line\":\"Iv^-1 = Iv => log2(Iv / (C_illum N_speed))\",\"info\":{\"headingsIndex\":[5,2,2,8],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.8. \"],\"comment\":\"convert illuminance value Iv in ASA PH2.12-1961 to illuminance\"}},{\"line\":\"Sx = S => log2((N_speed/lx s) S)\",\"info\":{\"headingsIndex\":[5,2,2,8],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.8. \"],\"comment\":\"convert ASA/ISO arithmetic speed Sx to ASA logarithmic speed in\\nASA PH2.5-1960; make arithmetic speed dimensionless\"}},{\"line\":\"Sx^-1 = Sx => 2^Sx / (N_speed/lx s)\",\"info\":{\"headingsIndex\":[5,2,2,8],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.8. \"],\"comment\":\"convert ASA/ISO arithmetic speed Sx to ASA logarithmic speed in\\nASA PH2.5-1960; make arithmetic speed dimensionless\"}},{\"line\":\"Sdeg = S => 10^((S - 1) / 10) \",\"info\":{\"headingsIndex\":[5,2,2,8],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.8. \"],\"comment\":\"convert DIN speed/ISO logarithmic speed in ISO 6:1993 to arithmetic speed\\nfor convenience, speed is treated here as if it were dimensionless\"}},{\"line\":\"Sdeg^-1 = Sdeg => (1 + 10 log(Sdeg))\",\"info\":{\"headingsIndex\":[5,2,2,8],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.8. \"],\"comment\":\"convert DIN speed/ISO logarithmic speed in ISO 6:1993 to arithmetic speed\\nfor convenience, speed is treated here as if it were dimensionless\"}},{\"line\":\"Sdin = Sdeg\",\"info\":{\"headingsIndex\":[5,2,2,8],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.8. \"],\"comment\":\"convert DIN speed/ISO logarithmic speed in ISO 6:1993 to arithmetic speed\\nfor convenience, speed is treated here as if it were dimensionless\"}},{\"line\":\"numericalaperture = x => 0.5 / x \",\"info\":{\"headingsIndex\":[5,2,2,9],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.9. Numerical Aperture and f-Number of a Lens\\n\\nThe numerical aperture (NA) is given by\\n\\nNA = n sin(theta)\\n\\nwhere n is the index of refraction of the medium and theta is half\\nof the angle subtended by the aperture stop from a point in the image\\nor object plane. For a lens in air, n = 1, and\\n\\nNA = 0.5 / f-number\\n\\nconvert NA to f-number\"],\"comment\":\"\"}},{\"line\":\"numericalaperture^-1 = numericalaperture => 0.5 / numericalaperture\",\"info\":{\"headingsIndex\":[5,2,2,9],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.9. Numerical Aperture and f-Number of a Lens\\n\\nThe numerical aperture (NA) is given by\\n\\nNA = n sin(theta)\\n\\nwhere n is the index of refraction of the medium and theta is half\\nof the angle subtended by the aperture stop from a point in the image\\nor object plane. For a lens in air, n = 1, and\\n\\nNA = 0.5 / f-number\\n\\nconvert NA to f-number\"],\"comment\":\"\"}},{\"line\":\"NA = numericalaperture\",\"info\":{\"headingsIndex\":[5,2,2,9],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.9. Numerical Aperture and f-Number of a Lens\\n\\nThe numerical aperture (NA) is given by\\n\\nNA = n sin(theta)\\n\\nwhere n is the index of refraction of the medium and theta is half\\nof the angle subtended by the aperture stop from a point in the image\\nor object plane. For a lens in air, n = 1, and\\n\\nNA = 0.5 / f-number\\n\\nconvert NA to f-number\"],\"comment\":\"convert f-number to itself; restrict values to those possible\"}},{\"line\":\"fnumber = x => x \",\"info\":{\"headingsIndex\":[5,2,2,9],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.9. Numerical Aperture and f-Number of a Lens\\n\\nThe numerical aperture (NA) is given by\\n\\nNA = n sin(theta)\\n\\nwhere n is the index of refraction of the medium and theta is half\\nof the angle subtended by the aperture stop from a point in the image\\nor object plane. For a lens in air, n = 1, and\\n\\nNA = 0.5 / f-number\\n\\nconvert NA to f-number\"],\"comment\":\"\"}},{\"line\":\"fnumber^-1 = fnumber => fnumber\",\"info\":{\"headingsIndex\":[5,2,2,9],\"headingLevel\":4,\"headings\":[\"5. Units derived from physical constants\",\"5.2. Photometric units\",\"5.2.2. Photographic Exposure Value\\nThis section by Jeff Conrad (jeff_conrad@msn.com)\\n\\nThe Additive system of Photographic EXposure (APEX) proposed in ASA\\nPH2.5-1960 was an attempt to simplify exposure determination for people who\\nrelied on exposure tables rather than exposure meters. Shortly thereafter,\\nnearly all cameras incorporated exposure meters, so the APEX system never\\ncaught on, but the concept of exposure value remains in use. Though given as\\n'Ev' in ASA PH2.5-1960, it is now more commonly indicated by 'EV'. EV is\\nrelated to exposure parameters by\\n\\nA^2 LS ES\\n2^EV = --- = -- = --\\nt K C\\n\\nWhere\\nA = Relative aperture (f-number)\\nt = Exposure time in seconds\\nL = Scene luminance in cd/m2\\nE = Scene illuminance in lux\\nS = Arithmetic ISO speed\\nK = Reflected-light meter calibration constant\\nC = Incident-light meter calibration constant\\n\\nStrictly, an exposure value is a combination of aperture and exposure time,\\nbut it's also commonly used to indicate luminance (or illuminance).\\nConversion to luminance or illuminance units depends on the ISO speed and the\\nmeter calibration constant. Common practice is to use an ISO speed of 100.\\nCalibration constants vary among camera and meter manufacturers: Canon,\\nNikon, and Sekonic use a value of 12.5 for reflected-light meters, while\\nKenko (formerly Minolta) and Pentax use a value of 14. Kenko and Sekonic use\\na value of 250 for incident-light meters with flat receptors.\\n\\nThe values for in-camera meters apply only averaging, weighted-averaging, or\\nspot metering--the multi-segment metering incorporated in most current\\ncameras uses proprietary algorithms that evaluate many factors related to the\\nluminance distribution of what is being metered; they are not amenable to\\nsimple conversions, and are usually not disclosed by the manufacturers.\",\"5.2.2.9. Numerical Aperture and f-Number of a Lens\\n\\nThe numerical aperture (NA) is given by\\n\\nNA = n sin(theta)\\n\\nwhere n is the index of refraction of the medium and theta is half\\nof the angle subtended by the aperture stop from a point in the image\\nor object plane. For a lens in air, n = 1, and\\n\\nNA = 0.5 / f-number\\n\\nconvert NA to f-number\"],\"comment\":\"\"}},{\"line\":\"TIME = second\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"anomalisticyear = 365.2596 days\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"The time between successive\\nperihelion passages of the\\nearth.\"}},{\"line\":\"siderealyear = 365.256360417 day\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"The time for the earth to make\\none revolution around the sun\\nrelative to the stars.\"}},{\"line\":\"tropicalyear = 365.242198781 day\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"The time needed for the mean sun\\nas defined above to increase\\nits longitude by 360 degrees.\\nMost references defined the\\ntropical year as the interval\\nbetween vernal equinoxes, but\\nthis is misleading.  The length\\nof the season changes over time\\nbecause of the eccentricity of\\nthe earth's orbit.  The time\\nbetween vernal equinoxes is\\napproximately 365.24237 days\\naround the year 2000.  See\\n\\\"Mathematical Astronomy\\nMorsels\\\" for more details.\"}},{\"line\":\"eclipseyear = 346.62 days\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"The line of nodes is the\\nintersection of the plane of\\nEarth's orbit around the sun\\nwith the plane of the moon's\\norbit around earth.  Eclipses\\ncan only occur when the moon\\nand sun are close to this\\nline.  The line rotates and\\nappearances of the sun on the\\nline of nodes occur every\\neclipse year.\"}},{\"line\":\"saros = 223 synodicmonth\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"The earth, moon and sun appear in\\nthe same arrangement every\\nsaros, so if an eclipse occurs,\\nthen one saros later, a similar\\neclipse will occur.  (The saros\\nis close to 19 eclipse years.)\\nThe eclipse will occur about\\n120 degrees west of the\\npreceeding one because the\\nsaros is not an even number of\\ndays.  After 3 saros, an\\neclipse will occur at\\napproximately the same place.\"}},{\"line\":\"siderealday = 86164.09054 s\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"The sidereal day is the interval\\nbetween two successive transits\\nof a star over the meridian,\\nor the time required  for the\\nearth to make one rotation\\nrelative to the stars.  The\\nmore usual solar day is the\\ntime required to make a\\nrotation relative to the sun.\\nBecause the earth moves in its\\norbit, it has to turn a bit\\nextra to face the sun again,\\nhence the solar day is slightly\\nlonger.\"}},{\"line\":\"siderealhour = 1|24 siderealday\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"The sidereal day is the interval\\nbetween two successive transits\\nof a star over the meridian,\\nor the time required  for the\\nearth to make one rotation\\nrelative to the stars.  The\\nmore usual solar day is the\\ntime required to make a\\nrotation relative to the sun.\\nBecause the earth moves in its\\norbit, it has to turn a bit\\nextra to face the sun again,\\nhence the solar day is slightly\\nlonger.\"}},{\"line\":\"siderealminute = 1|60 siderealhour\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"The sidereal day is the interval\\nbetween two successive transits\\nof a star over the meridian,\\nor the time required  for the\\nearth to make one rotation\\nrelative to the stars.  The\\nmore usual solar day is the\\ntime required to make a\\nrotation relative to the sun.\\nBecause the earth moves in its\\norbit, it has to turn a bit\\nextra to face the sun again,\\nhence the solar day is slightly\\nlonger.\"}},{\"line\":\"siderealsecond = 1|60 siderealminute\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"The sidereal day is the interval\\nbetween two successive transits\\nof a star over the meridian,\\nor the time required  for the\\nearth to make one rotation\\nrelative to the stars.  The\\nmore usual solar day is the\\ntime required to make a\\nrotation relative to the sun.\\nBecause the earth moves in its\\norbit, it has to turn a bit\\nextra to face the sun again,\\nhence the solar day is slightly\\nlonger.\"}},{\"line\":\"anomalisticmonth = 27.55454977 day\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"Time for the moon to travel from\\nperigee to perigee\"}},{\"line\":\"nodicalmonth = 27.2122199 day\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"The nodes are the points where\\nan orbit crosses the ecliptic.\\nThis is the time required to\\ntravel from the ascending node\\nto the next ascending node.\"}},{\"line\":\"draconicmonth = nodicalmonth\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"The nodes are the points where\\nan orbit crosses the ecliptic.\\nThis is the time required to\\ntravel from the ascending node\\nto the next ascending node.\"}},{\"line\":\"draconiticmonth = nodicalmonth\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"The nodes are the points where\\nan orbit crosses the ecliptic.\\nThis is the time required to\\ntravel from the ascending node\\nto the next ascending node.\"}},{\"line\":\"siderealmonth = 27.321661 day\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"Time required for the moon to\\norbit the earth\"}},{\"line\":\"lunarmonth = 29 days + 12 hours + 44 minutes + 2.8 seconds\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"Mean time between full moons.\\nFull moons occur when the sun\\nand moon are on opposite sides\\nof the earth.  Since the earth\\nmoves around the sun, the moon\\nhas to revolve a bit extra to\\nget into the full moon\\nconfiguration.\"}},{\"line\":\"synodicmonth = lunarmonth\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"Mean time between full moons.\\nFull moons occur when the sun\\nand moon are on opposite sides\\nof the earth.  Since the earth\\nmoves around the sun, the moon\\nhas to revolve a bit extra to\\nget into the full moon\\nconfiguration.\"}},{\"line\":\"lunation = synodicmonth\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"Mean time between full moons.\\nFull moons occur when the sun\\nand moon are on opposite sides\\nof the earth.  Since the earth\\nmoves around the sun, the moon\\nhas to revolve a bit extra to\\nget into the full moon\\nconfiguration.\"}},{\"line\":\"lune = 1|30 lunation\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"Mean time between full moons.\\nFull moons occur when the sun\\nand moon are on opposite sides\\nof the earth.  Since the earth\\nmoves around the sun, the moon\\nhas to revolve a bit extra to\\nget into the full moon\\nconfiguration.\"}},{\"line\":\"lunour = 1|24 lune\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"Mean time between full moons.\\nFull moons occur when the sun\\nand moon are on opposite sides\\nof the earth.  Since the earth\\nmoves around the sun, the moon\\nhas to revolve a bit extra to\\nget into the full moon\\nconfiguration.\"}},{\"line\":\"year = tropicalyear\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"yr = year\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"month = 1|12 year\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"mo = month\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"lustrum = 5 years\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"The Lustrum was a Roman\\npurification ceremony that took\\nplace every five years.\\nClassically educated Englishmen\\nused this term.\"}},{\"line\":\"decade = 10 years\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"century = 100 years\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"millennium = 1000 years\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"millennia = millennium\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"solaryear = year\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"lunaryear = 12 lunarmonth\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"calendaryear = 365 day\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"commonyear = 365 day\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"leapyear = 366 day\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"julianyear = 365.25 day\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"gregorianyear = 365.2425 day\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"\"}},{\"line\":\"islamicyear = 354 day\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"A year of 12 lunar months. They\\nbegan counting on July 16, AD 622\\nwhen Muhammad emigrated to Medina\\n(the year of the Hegira).  They need\\n11 leap days in 30 years to stay in\\nsync with the lunar year which is a\\nbit longer than the 29.5 days of the\\naverage month.  The months do not\\nkeep to the same seasons, but\\nregress through the seasons every\\n32.5 years.\"}},{\"line\":\"islamicleapyear = 355 day\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"A year of 12 lunar months. They\\nbegan counting on July 16, AD 622\\nwhen Muhammad emigrated to Medina\\n(the year of the Hegira).  They need\\n11 leap days in 30 years to stay in\\nsync with the lunar year which is a\\nbit longer than the 29.5 days of the\\naverage month.  The months do not\\nkeep to the same seasons, but\\nregress through the seasons every\\n32.5 years.\"}},{\"line\":\"islamicmonth = 1|12 islamicyear\",\"info\":{\"headingsIndex\":[5,3],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\"],\"comment\":\"They have 29 day and 30 day months.\"}},{\"line\":\"mercuryday = 58.6462 day\",\"info\":{\"headingsIndex\":[5,3,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.1. Sidereal days\"],\"comment\":\"\"}},{\"line\":\"venusday = 243.01 day\",\"info\":{\"headingsIndex\":[5,3,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.1. Sidereal days\"],\"comment\":\"retrograde\"}},{\"line\":\"earthday = siderealday\",\"info\":{\"headingsIndex\":[5,3,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.1. Sidereal days\"],\"comment\":\"\"}},{\"line\":\"marsday = 1.02595675 day\",\"info\":{\"headingsIndex\":[5,3,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.1. Sidereal days\"],\"comment\":\"\"}},{\"line\":\"jupiterday = 0.41354 day\",\"info\":{\"headingsIndex\":[5,3,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.1. Sidereal days\"],\"comment\":\"\"}},{\"line\":\"saturnday = 0.4375 day\",\"info\":{\"headingsIndex\":[5,3,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.1. Sidereal days\"],\"comment\":\"\"}},{\"line\":\"uranusday = 0.65 day\",\"info\":{\"headingsIndex\":[5,3,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.1. Sidereal days\"],\"comment\":\"retrograde\"}},{\"line\":\"neptuneday = 0.768 day\",\"info\":{\"headingsIndex\":[5,3,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.1. Sidereal days\"],\"comment\":\"\"}},{\"line\":\"plutoday = 6.3867 day\",\"info\":{\"headingsIndex\":[5,3,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.1. Sidereal days\"],\"comment\":\"\"}},{\"line\":\"mercuryyear = 0.2408467 julianyear\",\"info\":{\"headingsIndex\":[5,3,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.2. Sidereal years from http://ssd.jpl.nasa.gov/phys_props_planets.html. Data\\nwas updated in May 2001 based on the 1992 Explanatory Supplement to the\\nAstronomical Almanac and the mean longitude rates. Apparently the table of\\nyears in that reference is incorrect.\"],\"comment\":\"\"}},{\"line\":\"venusyear = 0.61519726 julianyear\",\"info\":{\"headingsIndex\":[5,3,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.2. Sidereal years from http://ssd.jpl.nasa.gov/phys_props_planets.html. Data\\nwas updated in May 2001 based on the 1992 Explanatory Supplement to the\\nAstronomical Almanac and the mean longitude rates. Apparently the table of\\nyears in that reference is incorrect.\"],\"comment\":\"\"}},{\"line\":\"earthyear = siderealyear\",\"info\":{\"headingsIndex\":[5,3,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.2. Sidereal years from http://ssd.jpl.nasa.gov/phys_props_planets.html. Data\\nwas updated in May 2001 based on the 1992 Explanatory Supplement to the\\nAstronomical Almanac and the mean longitude rates. Apparently the table of\\nyears in that reference is incorrect.\"],\"comment\":\"\"}},{\"line\":\"marsyear = 1.8808476 julianyear\",\"info\":{\"headingsIndex\":[5,3,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.2. Sidereal years from http://ssd.jpl.nasa.gov/phys_props_planets.html. Data\\nwas updated in May 2001 based on the 1992 Explanatory Supplement to the\\nAstronomical Almanac and the mean longitude rates. Apparently the table of\\nyears in that reference is incorrect.\"],\"comment\":\"\"}},{\"line\":\"jupiteryear = 11.862615 julianyear\",\"info\":{\"headingsIndex\":[5,3,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.2. Sidereal years from http://ssd.jpl.nasa.gov/phys_props_planets.html. Data\\nwas updated in May 2001 based on the 1992 Explanatory Supplement to the\\nAstronomical Almanac and the mean longitude rates. Apparently the table of\\nyears in that reference is incorrect.\"],\"comment\":\"\"}},{\"line\":\"saturnyear = 29.447498 julianyear\",\"info\":{\"headingsIndex\":[5,3,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.2. Sidereal years from http://ssd.jpl.nasa.gov/phys_props_planets.html. Data\\nwas updated in May 2001 based on the 1992 Explanatory Supplement to the\\nAstronomical Almanac and the mean longitude rates. Apparently the table of\\nyears in that reference is incorrect.\"],\"comment\":\"\"}},{\"line\":\"uranusyear = 84.016846 julianyear\",\"info\":{\"headingsIndex\":[5,3,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.2. Sidereal years from http://ssd.jpl.nasa.gov/phys_props_planets.html. Data\\nwas updated in May 2001 based on the 1992 Explanatory Supplement to the\\nAstronomical Almanac and the mean longitude rates. Apparently the table of\\nyears in that reference is incorrect.\"],\"comment\":\"\"}},{\"line\":\"neptuneyear = 164.79132 julianyear\",\"info\":{\"headingsIndex\":[5,3,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.2. Sidereal years from http://ssd.jpl.nasa.gov/phys_props_planets.html. Data\\nwas updated in May 2001 based on the 1992 Explanatory Supplement to the\\nAstronomical Almanac and the mean longitude rates. Apparently the table of\\nyears in that reference is incorrect.\"],\"comment\":\"\"}},{\"line\":\"plutoyear = 247.92065 julianyear\",\"info\":{\"headingsIndex\":[5,3,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.3. Astronomical time measurements\\n\\nAstronomical time measurement is a complicated matter. The length of the\\ntrue day at a given place can be 21 seconds less than 24 hours or 30 seconds\\nover 24 hours. The two main reasons for this are the varying speed of the\\nearth in its elliptical orbit and the fact that the sun moves on the ecliptic\\ninstead of along the celestial equator. To devise a workable system for time\\nmeasurement, Simon Newcomb (1835-1909) used a fictitious \\\"mean sun\\\".\\nConsider a first fictitious sun traveling along the ecliptic at a constant\\nspeed and coinciding with the true sun at perigee and apogee. Then\\nconsidering a second fictitious sun traveling along the celestial equator at\\na constant speed and coinciding with the first fictitious sun at the\\nequinoxes. The second fictitious sun is the \\\"mean sun\\\". From this equations\\ncan be written out to determine the length of the mean day, and the tropical\\nyear. The length of the second was determined based on the tropical year\\nfrom such a calculation and was officially used from 1960-1967 until atomic\\nclocks replaced astronomical measurements for a standard of time. All of the\\nvalues below give the mean time for the specified interval.\\n\\nSee \\\"Mathematical Astronomy Morsels\\\" by Jean Meeus for more details\\nand a description of how to compute the correction to mean time.\",\"5.3.2. Sidereal years from http://ssd.jpl.nasa.gov/phys_props_planets.html. Data\\nwas updated in May 2001 based on the 1992 Explanatory Supplement to the\\nAstronomical Almanac and the mean longitude rates. Apparently the table of\\nyears in that reference is incorrect.\"],\"comment\":\"\"}},{\"line\":\"earthflattening = 1|298.25642\",\"info\":{\"headingsIndex\":[5,4],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.4. Objects on the earth are charted relative to a perfect ellipsoid whose\\ndimensions are specified by different organizations. The ellipsoid is\\nspecified by an equatorial radius and a flattening value which defines the\\npolar radius. These values are the 1996 values given by the International\\nEarth Rotation Service (IERS) whose reference documents can be found at\\nhttp://maia.usno.navy.mil/\"],\"comment\":\"\"}},{\"line\":\"earthradius_equatorial = 6378136.49 m\",\"info\":{\"headingsIndex\":[5,4],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.4. Objects on the earth are charted relative to a perfect ellipsoid whose\\ndimensions are specified by different organizations. The ellipsoid is\\nspecified by an equatorial radius and a flattening value which defines the\\npolar radius. These values are the 1996 values given by the International\\nEarth Rotation Service (IERS) whose reference documents can be found at\\nhttp://maia.usno.navy.mil/\"],\"comment\":\"\"}},{\"line\":\"earthradius_polar = (-earthflattening+1) earthradius_equatorial\",\"info\":{\"headingsIndex\":[5,4],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.4. Objects on the earth are charted relative to a perfect ellipsoid whose\\ndimensions are specified by different organizations. The ellipsoid is\\nspecified by an equatorial radius and a flattening value which defines the\\npolar radius. These values are the 1996 values given by the International\\nEarth Rotation Service (IERS) whose reference documents can be found at\\nhttp://maia.usno.navy.mil/\"],\"comment\":\"\"}},{\"line\":\"landarea = 148.847e6 km^2\",\"info\":{\"headingsIndex\":[5,4],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.4. Objects on the earth are charted relative to a perfect ellipsoid whose\\ndimensions are specified by different organizations. The ellipsoid is\\nspecified by an equatorial radius and a flattening value which defines the\\npolar radius. These values are the 1996 values given by the International\\nEarth Rotation Service (IERS) whose reference documents can be found at\\nhttp://maia.usno.navy.mil/\"],\"comment\":\"\"}},{\"line\":\"oceanarea = 361.254e6 km^2\",\"info\":{\"headingsIndex\":[5,4],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.4. Objects on the earth are charted relative to a perfect ellipsoid whose\\ndimensions are specified by different organizations. The ellipsoid is\\nspecified by an equatorial radius and a flattening value which defines the\\npolar radius. These values are the 1996 values given by the International\\nEarth Rotation Service (IERS) whose reference documents can be found at\\nhttp://maia.usno.navy.mil/\"],\"comment\":\"\"}},{\"line\":\"moonradius = 1738 km\",\"info\":{\"headingsIndex\":[5,4],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.4. Objects on the earth are charted relative to a perfect ellipsoid whose\\ndimensions are specified by different organizations. The ellipsoid is\\nspecified by an equatorial radius and a flattening value which defines the\\npolar radius. These values are the 1996 values given by the International\\nEarth Rotation Service (IERS) whose reference documents can be found at\\nhttp://maia.usno.navy.mil/\"],\"comment\":\"mean value\"}},{\"line\":\"sunradius = 6.96e8 m\",\"info\":{\"headingsIndex\":[5,4],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.4. Objects on the earth are charted relative to a perfect ellipsoid whose\\ndimensions are specified by different organizations. The ellipsoid is\\nspecified by an equatorial radius and a flattening value which defines the\\npolar radius. These values are the 1996 values given by the International\\nEarth Rotation Service (IERS) whose reference documents can be found at\\nhttp://maia.usno.navy.mil/\"],\"comment\":\"\"}},{\"line\":\"gauss_k = 0.01720209895\",\"info\":{\"headingsIndex\":[5,5],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\"],\"comment\":\"This beast has dimensions of\\nau^(3|2) / day and is exact.\"}},{\"line\":\"gaussianyear = (2 pi / gauss_k) days\",\"info\":{\"headingsIndex\":[5,5],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\"],\"comment\":\"Year that corresponds to the Gaussian\\ngravitational constant. This is a\\nfictional year, and doesn't\\ncorrespond to any celestial event.\"}},{\"line\":\"astronomicalunit = 149597870700 m\",\"info\":{\"headingsIndex\":[5,5],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\"],\"comment\":\"IAU definition from 2012, exact\\nephemeris for the above described\\nastronomical unit.  (See the NASA\\nsite listed above.)\"}},{\"line\":\"au = astronomicalunit\",\"info\":{\"headingsIndex\":[5,5],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\"],\"comment\":\"IAU definition from 2012, exact\\nephemeris for the above described\\nastronomical unit.  (See the NASA\\nsite listed above.)\"}},{\"line\":\"solarmass = 1.9891e30 kg\",\"info\":{\"headingsIndex\":[5,5],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\"],\"comment\":\"\"}},{\"line\":\"sunmass = solarmass\",\"info\":{\"headingsIndex\":[5,5],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\"],\"comment\":\"\"}},{\"line\":\"sundist = 1.0000010178 au\",\"info\":{\"headingsIndex\":[5,5],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\"],\"comment\":\"mean earth-sun distance\"}},{\"line\":\"moondist = 3.844e8 m\",\"info\":{\"headingsIndex\":[5,5],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\"],\"comment\":\"mean earth-moon distance\"}},{\"line\":\"sundist_near = 1.471e11 m\",\"info\":{\"headingsIndex\":[5,5],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\"],\"comment\":\"earth-sun distance at perihelion\"}},{\"line\":\"sundist_far = 1.521e11 m\",\"info\":{\"headingsIndex\":[5,5],\"headingLevel\":2,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\"],\"comment\":\"earth-sun distance at aphelion\"}},{\"line\":\"mercurymass = solarmass / 6023600\",\"info\":{\"headingsIndex\":[5,5,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.1. The following are masses for planetary systems, not just the planet itself.\\nThe comments give the uncertainty in the denominators. As noted above,\\nmasses are given relative to the solarmass because this is more accurate.\\nThe conversion to SI is uncertain because of uncertainty in G, the\\ngravitational constant.\\n\\nValues are from http://ssd.jpl.nasa.gov/astro_constants.html\"],\"comment\":\"250\"}},{\"line\":\"venusmass = solarmass / 408523.71\",\"info\":{\"headingsIndex\":[5,5,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.1. The following are masses for planetary systems, not just the planet itself.\\nThe comments give the uncertainty in the denominators. As noted above,\\nmasses are given relative to the solarmass because this is more accurate.\\nThe conversion to SI is uncertain because of uncertainty in G, the\\ngravitational constant.\\n\\nValues are from http://ssd.jpl.nasa.gov/astro_constants.html\"],\"comment\":\"0.06\"}},{\"line\":\"earthmoonmass = solarmass / 328900.56\",\"info\":{\"headingsIndex\":[5,5,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.1. The following are masses for planetary systems, not just the planet itself.\\nThe comments give the uncertainty in the denominators. As noted above,\\nmasses are given relative to the solarmass because this is more accurate.\\nThe conversion to SI is uncertain because of uncertainty in G, the\\ngravitational constant.\\n\\nValues are from http://ssd.jpl.nasa.gov/astro_constants.html\"],\"comment\":\"0.02\"}},{\"line\":\"marsmass = solarmass / 3098708\",\"info\":{\"headingsIndex\":[5,5,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.1. The following are masses for planetary systems, not just the planet itself.\\nThe comments give the uncertainty in the denominators. As noted above,\\nmasses are given relative to the solarmass because this is more accurate.\\nThe conversion to SI is uncertain because of uncertainty in G, the\\ngravitational constant.\\n\\nValues are from http://ssd.jpl.nasa.gov/astro_constants.html\"],\"comment\":\"9\"}},{\"line\":\"jupitermass = solarmass / 1047.3486\",\"info\":{\"headingsIndex\":[5,5,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.1. The following are masses for planetary systems, not just the planet itself.\\nThe comments give the uncertainty in the denominators. As noted above,\\nmasses are given relative to the solarmass because this is more accurate.\\nThe conversion to SI is uncertain because of uncertainty in G, the\\ngravitational constant.\\n\\nValues are from http://ssd.jpl.nasa.gov/astro_constants.html\"],\"comment\":\"0.0008\"}},{\"line\":\"saturnmass = solarmass / 3497.898\",\"info\":{\"headingsIndex\":[5,5,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.1. The following are masses for planetary systems, not just the planet itself.\\nThe comments give the uncertainty in the denominators. As noted above,\\nmasses are given relative to the solarmass because this is more accurate.\\nThe conversion to SI is uncertain because of uncertainty in G, the\\ngravitational constant.\\n\\nValues are from http://ssd.jpl.nasa.gov/astro_constants.html\"],\"comment\":\"0.018\"}},{\"line\":\"uranusmass = solarmass / 22902.98\",\"info\":{\"headingsIndex\":[5,5,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.1. The following are masses for planetary systems, not just the planet itself.\\nThe comments give the uncertainty in the denominators. As noted above,\\nmasses are given relative to the solarmass because this is more accurate.\\nThe conversion to SI is uncertain because of uncertainty in G, the\\ngravitational constant.\\n\\nValues are from http://ssd.jpl.nasa.gov/astro_constants.html\"],\"comment\":\"0.03\"}},{\"line\":\"neptunemass = solarmass / 19412.24\",\"info\":{\"headingsIndex\":[5,5,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.1. The following are masses for planetary systems, not just the planet itself.\\nThe comments give the uncertainty in the denominators. As noted above,\\nmasses are given relative to the solarmass because this is more accurate.\\nThe conversion to SI is uncertain because of uncertainty in G, the\\ngravitational constant.\\n\\nValues are from http://ssd.jpl.nasa.gov/astro_constants.html\"],\"comment\":\"0.04\"}},{\"line\":\"plutomass = solarmass / 1.35e8\",\"info\":{\"headingsIndex\":[5,5,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.1. The following are masses for planetary systems, not just the planet itself.\\nThe comments give the uncertainty in the denominators. As noted above,\\nmasses are given relative to the solarmass because this is more accurate.\\nThe conversion to SI is uncertain because of uncertainty in G, the\\ngravitational constant.\\n\\nValues are from http://ssd.jpl.nasa.gov/astro_constants.html\"],\"comment\":\"0.07e8\"}},{\"line\":\"moonearthmassratio = 0.012300034\",\"info\":{\"headingsIndex\":[5,5,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.1. The following are masses for planetary systems, not just the planet itself.\\nThe comments give the uncertainty in the denominators. As noted above,\\nmasses are given relative to the solarmass because this is more accurate.\\nThe conversion to SI is uncertain because of uncertainty in G, the\\ngravitational constant.\\n\\nValues are from http://ssd.jpl.nasa.gov/astro_constants.html\"],\"comment\":\"uncertainty 3 x 10-9\"}},{\"line\":\"earthmass = earthmoonmass / ( 1 + moonearthmassratio)\",\"info\":{\"headingsIndex\":[5,5,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.1. The following are masses for planetary systems, not just the planet itself.\\nThe comments give the uncertainty in the denominators. As noted above,\\nmasses are given relative to the solarmass because this is more accurate.\\nThe conversion to SI is uncertain because of uncertainty in G, the\\ngravitational constant.\\n\\nValues are from http://ssd.jpl.nasa.gov/astro_constants.html\"],\"comment\":\"\"}},{\"line\":\"moonmass = moonearthmassratio earthmass\",\"info\":{\"headingsIndex\":[5,5,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.1. The following are masses for planetary systems, not just the planet itself.\\nThe comments give the uncertainty in the denominators. As noted above,\\nmasses are given relative to the solarmass because this is more accurate.\\nThe conversion to SI is uncertain because of uncertainty in G, the\\ngravitational constant.\\n\\nValues are from http://ssd.jpl.nasa.gov/astro_constants.html\"],\"comment\":\"\"}},{\"line\":\"oldmercurymass = 0.33022e24 kg\",\"info\":{\"headingsIndex\":[5,5,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.2. These are the old values for the planetary masses. They may give\\nthe masses of the planets alone.\"],\"comment\":\"\"}},{\"line\":\"oldvenusmass = 4.8690e24 kg\",\"info\":{\"headingsIndex\":[5,5,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.2. These are the old values for the planetary masses. They may give\\nthe masses of the planets alone.\"],\"comment\":\"\"}},{\"line\":\"oldmarsmass = 0.64191e24 kg\",\"info\":{\"headingsIndex\":[5,5,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.2. These are the old values for the planetary masses. They may give\\nthe masses of the planets alone.\"],\"comment\":\"\"}},{\"line\":\"oldjupitermass = 1898.8e24 kg\",\"info\":{\"headingsIndex\":[5,5,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.2. These are the old values for the planetary masses. They may give\\nthe masses of the planets alone.\"],\"comment\":\"\"}},{\"line\":\"oldsaturnmass = 568.5e24 kg\",\"info\":{\"headingsIndex\":[5,5,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.2. These are the old values for the planetary masses. They may give\\nthe masses of the planets alone.\"],\"comment\":\"\"}},{\"line\":\"olduranusmass = 86.625e24 kg\",\"info\":{\"headingsIndex\":[5,5,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.2. These are the old values for the planetary masses. They may give\\nthe masses of the planets alone.\"],\"comment\":\"\"}},{\"line\":\"oldneptunemass = 102.78e24 kg\",\"info\":{\"headingsIndex\":[5,5,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.2. These are the old values for the planetary masses. They may give\\nthe masses of the planets alone.\"],\"comment\":\"\"}},{\"line\":\"oldplutomass = 0.015e24 kg\",\"info\":{\"headingsIndex\":[5,5,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.2. These are the old values for the planetary masses. They may give\\nthe masses of the planets alone.\"],\"comment\":\"\"}},{\"line\":\"mercuryradius = 2440 km\",\"info\":{\"headingsIndex\":[5,5,3],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.3. Mean radius from http://ssd.jpl.nsaa.gov/phys_props_planets.html which in\\nturn cites Global Earth Physics by CF Yoder, 1995.\"],\"comment\":\"\"}},{\"line\":\"venusradius = 6051.84 km\",\"info\":{\"headingsIndex\":[5,5,3],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.3. Mean radius from http://ssd.jpl.nsaa.gov/phys_props_planets.html which in\\nturn cites Global Earth Physics by CF Yoder, 1995.\"],\"comment\":\"\"}},{\"line\":\"earthradius = 6371.01 km\",\"info\":{\"headingsIndex\":[5,5,3],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.3. Mean radius from http://ssd.jpl.nsaa.gov/phys_props_planets.html which in\\nturn cites Global Earth Physics by CF Yoder, 1995.\"],\"comment\":\"\"}},{\"line\":\"marsradius = 3389.92 km\",\"info\":{\"headingsIndex\":[5,5,3],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.3. Mean radius from http://ssd.jpl.nsaa.gov/phys_props_planets.html which in\\nturn cites Global Earth Physics by CF Yoder, 1995.\"],\"comment\":\"\"}},{\"line\":\"jupiterradius = 69911 km\",\"info\":{\"headingsIndex\":[5,5,3],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.3. Mean radius from http://ssd.jpl.nsaa.gov/phys_props_planets.html which in\\nturn cites Global Earth Physics by CF Yoder, 1995.\"],\"comment\":\"\"}},{\"line\":\"saturnradius = 58232 km\",\"info\":{\"headingsIndex\":[5,5,3],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.3. Mean radius from http://ssd.jpl.nsaa.gov/phys_props_planets.html which in\\nturn cites Global Earth Physics by CF Yoder, 1995.\"],\"comment\":\"\"}},{\"line\":\"uranusradius = 25362 km\",\"info\":{\"headingsIndex\":[5,5,3],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.3. Mean radius from http://ssd.jpl.nsaa.gov/phys_props_planets.html which in\\nturn cites Global Earth Physics by CF Yoder, 1995.\"],\"comment\":\"\"}},{\"line\":\"neptuneradius = 24624 km\",\"info\":{\"headingsIndex\":[5,5,3],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.3. Mean radius from http://ssd.jpl.nsaa.gov/phys_props_planets.html which in\\nturn cites Global Earth Physics by CF Yoder, 1995.\"],\"comment\":\"\"}},{\"line\":\"plutoradius = 1151 km\",\"info\":{\"headingsIndex\":[5,5,3],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.3. Mean radius from http://ssd.jpl.nsaa.gov/phys_props_planets.html which in\\nturn cites Global Earth Physics by CF Yoder, 1995.\"],\"comment\":\"\"}},{\"line\":\"moongravity = 1.62 m/s^2\",\"info\":{\"headingsIndex\":[5,5,3],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.5. Many astronomical values can be measured most accurately in a system of units\\nusing the astronomical unit and the mass of the sun as base units. The\\nuncertainty in the gravitational constant makes conversion to SI units\\nsignificantly less accurate.\\n\\nThe astronomical unit was defined to be the length of the of the semimajor\\naxis of a massless object with the same year as the earth. With such a\\ndefinition in force, and with the mass of the sun set equal to one, Kepler's\\nthird law can be used to solve for the value of the gravitational constant.\\n\\nKepler's third law says that (2 pi / T)^2 a^3 = G M where T is the orbital\\nperiod, a is the size of the semimajor axis, G is the gravitational constant\\nand M is the mass. With M = 1 and T and a chosen for the earth's orbit, we\\nfind sqrt(G) = (2 pi / T) sqrt(AU^3). This constant is called the Gaussian\\ngravitational constant, apparently because Gauss originally did the\\ncalculations. However, when the original calculation was done, the value\\nfor the length of the earth's year was inaccurate. The value used is called\\nthe Gaussian year. Changing the astronomical unit to bring it into\\nagreement with more accurate values for the year would have invalidated a\\nlot of previous work, so instead the astronomical unit has been kept equal\\nto this original value. This is accomplished by using a standard value for\\nthe Gaussian gravitational constant. This constant is called k.\\nMany values below are from http://ssd.jpl.nasa.gov/?constants\",\"5.5.3. Mean radius from http://ssd.jpl.nsaa.gov/phys_props_planets.html which in\\nturn cites Global Earth Physics by CF Yoder, 1995.\"],\"comment\":\"\"}},{\"line\":\"atomicmass = electronmass\",\"info\":{\"headingsIndex\":[5,6,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.6. The Hartree system of atomic units, derived from fundamental units\\nof mass (of electron), action (planck's constant), charge, and\\nthe coulomb constant.\",\"5.6.1. Fundamental units\"],\"comment\":\"\"}},{\"line\":\"atomiccharge = e\",\"info\":{\"headingsIndex\":[5,6,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.6. The Hartree system of atomic units, derived from fundamental units\\nof mass (of electron), action (planck's constant), charge, and\\nthe coulomb constant.\",\"5.6.1. Fundamental units\"],\"comment\":\"\"}},{\"line\":\"atomicaction = hbar\",\"info\":{\"headingsIndex\":[5,6,1],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.6. The Hartree system of atomic units, derived from fundamental units\\nof mass (of electron), action (planck's constant), charge, and\\nthe coulomb constant.\",\"5.6.1. Fundamental units\"],\"comment\":\"\"}},{\"line\":\"atomiclength = bohrradius\",\"info\":{\"headingsIndex\":[5,6,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.6. The Hartree system of atomic units, derived from fundamental units\\nof mass (of electron), action (planck's constant), charge, and\\nthe coulomb constant.\",\"5.6.2. derived units (Warning: accuracy is lost from deriving them this way)\"],\"comment\":\"\"}},{\"line\":\"atomictime = hbar^3/coulombconst^2 atomicmass e^4\",\"info\":{\"headingsIndex\":[5,6,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.6. The Hartree system of atomic units, derived from fundamental units\\nof mass (of electron), action (planck's constant), charge, and\\nthe coulomb constant.\",\"5.6.2. derived units (Warning: accuracy is lost from deriving them this way)\"],\"comment\":\"Period of first\\nbohr orbit\"}},{\"line\":\"atomicvelocity = atomiclength / atomictime\",\"info\":{\"headingsIndex\":[5,6,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.6. The Hartree system of atomic units, derived from fundamental units\\nof mass (of electron), action (planck's constant), charge, and\\nthe coulomb constant.\",\"5.6.2. derived units (Warning: accuracy is lost from deriving them this way)\"],\"comment\":\"\"}},{\"line\":\"atomicenergy = hbar / atomictime\",\"info\":{\"headingsIndex\":[5,6,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.6. The Hartree system of atomic units, derived from fundamental units\\nof mass (of electron), action (planck's constant), charge, and\\nthe coulomb constant.\",\"5.6.2. derived units (Warning: accuracy is lost from deriving them this way)\"],\"comment\":\"\"}},{\"line\":\"hartree = atomicenergy\",\"info\":{\"headingsIndex\":[5,6,2],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.6. The Hartree system of atomic units, derived from fundamental units\\nof mass (of electron), action (planck's constant), charge, and\\nthe coulomb constant.\",\"5.6.2. derived units (Warning: accuracy is lost from deriving them this way)\"],\"comment\":\"\"}},{\"line\":\"thermalcoulomb = J/K\",\"info\":{\"headingsIndex\":[5,6,3],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.6. The Hartree system of atomic units, derived from fundamental units\\nof mass (of electron), action (planck's constant), charge, and\\nthe coulomb constant.\",\"5.6.3. These thermal units treat entropy as charge, from [5]\"],\"comment\":\"entropy\"}},{\"line\":\"thermalampere = W/K\",\"info\":{\"headingsIndex\":[5,6,3],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.6. The Hartree system of atomic units, derived from fundamental units\\nof mass (of electron), action (planck's constant), charge, and\\nthe coulomb constant.\",\"5.6.3. These thermal units treat entropy as charge, from [5]\"],\"comment\":\"entropy flow\"}},{\"line\":\"thermalfarad = J/K^2\",\"info\":{\"headingsIndex\":[5,6,3],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.6. The Hartree system of atomic units, derived from fundamental units\\nof mass (of electron), action (planck's constant), charge, and\\nthe coulomb constant.\",\"5.6.3. These thermal units treat entropy as charge, from [5]\"],\"comment\":\"\"}},{\"line\":\"thermalohm = K^2/W\",\"info\":{\"headingsIndex\":[5,6,3],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.6. The Hartree system of atomic units, derived from fundamental units\\nof mass (of electron), action (planck's constant), charge, and\\nthe coulomb constant.\",\"5.6.3. These thermal units treat entropy as charge, from [5]\"],\"comment\":\"thermal resistance\"}},{\"line\":\"fourier = thermalohm\",\"info\":{\"headingsIndex\":[5,6,3],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.6. The Hartree system of atomic units, derived from fundamental units\\nof mass (of electron), action (planck's constant), charge, and\\nthe coulomb constant.\",\"5.6.3. These thermal units treat entropy as charge, from [5]\"],\"comment\":\"thermal resistance\"}},{\"line\":\"thermalhenry = J K^2/W^2\",\"info\":{\"headingsIndex\":[5,6,3],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.6. The Hartree system of atomic units, derived from fundamental units\\nof mass (of electron), action (planck's constant), charge, and\\nthe coulomb constant.\",\"5.6.3. These thermal units treat entropy as charge, from [5]\"],\"comment\":\"thermal inductance\"}},{\"line\":\"thermalvolt = K\",\"info\":{\"headingsIndex\":[5,6,3],\"headingLevel\":3,\"headings\":[\"5. Units derived from physical constants\",\"5.6. The Hartree system of atomic units, derived from fundamental units\\nof mass (of electron), action (planck's constant), charge, and\\nthe coulomb constant.\",\"5.6.3. These thermal units treat entropy as charge, from [5]\"],\"comment\":\"thermal potential difference\"}},{\"line\":\"US = 1200|3937 m/ft\",\"info\":{\"headingsIndex\":[6,1],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"These four values will convert\\ninternational measures to\\nUS Survey measures\"}},{\"line\":\"US_ = US\",\"info\":{\"headingsIndex\":[6,1],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"These four values will convert\\ninternational measures to\\nUS Survey measures\"}},{\"line\":\"survey_ = US\",\"info\":{\"headingsIndex\":[6,1],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"These four values will convert\\ninternational measures to\\nUS Survey measures\"}},{\"line\":\"geodetic_ = US\",\"info\":{\"headingsIndex\":[6,1],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"These four values will convert\\ninternational measures to\\nUS Survey measures\"}},{\"line\":\"int = 3937|1200 ft/m\",\"info\":{\"headingsIndex\":[6,1],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"Convert US Survey measures to\\ninternational measures\"}},{\"line\":\"int_ = int\",\"info\":{\"headingsIndex\":[6,1],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"Convert US Survey measures to\\ninternational measures\"}},{\"line\":\"inch = 2.54 cm\",\"info\":{\"headingsIndex\":[6,1],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"\"}},{\"line\":\"in = inch\",\"info\":{\"headingsIndex\":[6,1],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"\"}},{\"line\":\"foot = 12 inch\",\"info\":{\"headingsIndex\":[6,1],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"\"}},{\"line\":\"feet = foot\",\"info\":{\"headingsIndex\":[6,1],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"\"}},{\"line\":\"ft = foot\",\"info\":{\"headingsIndex\":[6,1],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"\"}},{\"line\":\"yard = 3 ft\",\"info\":{\"headingsIndex\":[6,1],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"\"}},{\"line\":\"yd = yard\",\"info\":{\"headingsIndex\":[6,1],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"\"}},{\"line\":\"mile = 5280 ft\",\"info\":{\"headingsIndex\":[6,1],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"The mile was enlarged from 5000 ft\\nto this number in order to make\\nit an even number of furlongs.\\n(The Roman mile is 5000 romanfeet.)\"}},{\"line\":\"line = 1|12 inch\",\"info\":{\"headingsIndex\":[6,1],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"Also defined as '.1 in' or as '1e-8 Wb'\"}},{\"line\":\"rod = 5.5 yard\",\"info\":{\"headingsIndex\":[6,1],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"\"}},{\"line\":\"perch = rod\",\"info\":{\"headingsIndex\":[6,1],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"\"}},{\"line\":\"furlong = 40 rod\",\"info\":{\"headingsIndex\":[6,1],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"From \\\"furrow long\\\"\"}},{\"line\":\"statutemile = mile\",\"info\":{\"headingsIndex\":[6,1],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"\"}},{\"line\":\"league = 3 mile\",\"info\":{\"headingsIndex\":[6,1],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\"],\"comment\":\"Intended to be an an hour's walk\"}},{\"line\":\"surveyorschain = 66 surveyft\",\"info\":{\"headingsIndex\":[6,1,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"surveychain = surveyorschain\",\"info\":{\"headingsIndex\":[6,1,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"surveyorspole = 1|4 surveyorschain\",\"info\":{\"headingsIndex\":[6,1,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"surveyorslink = 1|100 surveyorschain\",\"info\":{\"headingsIndex\":[6,1,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"chain = 66 ft\",\"info\":{\"headingsIndex\":[6,1,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"link = 1|100 chain\",\"info\":{\"headingsIndex\":[6,1,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"ch = chain\",\"info\":{\"headingsIndex\":[6,1,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"USacre = 10 surveychain^2\",\"info\":{\"headingsIndex\":[6,1,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"intacre = 10 chain^2\",\"info\":{\"headingsIndex\":[6,1,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"Acre based on international ft\"}},{\"line\":\"intacrefoot = acre foot\",\"info\":{\"headingsIndex\":[6,1,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"USacrefoot = USacre surveyfoot\",\"info\":{\"headingsIndex\":[6,1,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"acrefoot = intacrefoot\",\"info\":{\"headingsIndex\":[6,1,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"acre = intacre\",\"info\":{\"headingsIndex\":[6,1,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"section = mile^2\",\"info\":{\"headingsIndex\":[6,1,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"township = 36 section\",\"info\":{\"headingsIndex\":[6,1,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"homestead = 160 acre\",\"info\":{\"headingsIndex\":[6,1,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"Area of land granted by the 1862 Homestead\\nAct of the United States Congress\"}},{\"line\":\"gunterschain = surveyorschain\",\"info\":{\"headingsIndex\":[6,1,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"engineerschain = 100 ft\",\"info\":{\"headingsIndex\":[6,1,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"engineerslink = 1|100 engineerschain\",\"info\":{\"headingsIndex\":[6,1,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"ramsdenschain = engineerschain\",\"info\":{\"headingsIndex\":[6,1,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"ramsdenslink = engineerslink\",\"info\":{\"headingsIndex\":[6,1,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"\"}},{\"line\":\"gurleychain = 33 feet\",\"info\":{\"headingsIndex\":[6,1,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"Andrew Ellicott chain is the\\nsame length\\n\\nChain from 1664, introduced by\\nVincent Wing, also found in a\\n33 foot length with 40 links.\"}},{\"line\":\"gurleylink = 1|50 gurleychain\",\"info\":{\"headingsIndex\":[6,1,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"Andrew Ellicott chain is the\\nsame length\\n\\nChain from 1664, introduced by\\nVincent Wing, also found in a\\n33 foot length with 40 links.\"}},{\"line\":\"wingchain = 66 feet\",\"info\":{\"headingsIndex\":[6,1,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"Andrew Ellicott chain is the\\nsame length\\n\\nChain from 1664, introduced by\\nVincent Wing, also found in a\\n33 foot length with 40 links.\"}},{\"line\":\"winglink = 1|80 wingchain\",\"info\":{\"headingsIndex\":[6,1,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.1. linear measure\\n\\nThe US Metric Law of 1866 legalized the metric system in the USA and\\ndefined the meter in terms of the British system with the exact\\n1 meter = 39.37 inches. On April 5, 1893 Thomas Corwin Mendenhall,\\nSuperintendent of Weights and Measures, decided, in what has become\\nknown as the \\\"Mendenhall Order\\\" that the meter and kilogram would be the\\nfundamental standards in the USA. The definition from 1866 was turned\\naround to give an exact definition of the yard as 3600|3937 meters This\\ndefinition was used until July of 1959 when the definition was changed\\nto bring the US and other English-speaking countries into agreement; the\\nCanadian value of 1 yard = 0.9144 meter (exactly) was chosen because it\\nwas approximately halfway between the British and US values; it had the\\nadded advantage of making 1 inch = 25.4 mm (exactly). Since 1959, the\\n\\\"international\\\" foot has been exactly 0.3048 meters. At the same time,\\nit was decided that any data expressed in feet derived from geodetic\\nsurveys within the US would continue to use the old definition and call\\nthe old unit the \\\"survey foot.\\\" The US continues to define the statute\\nmile, furlong, chain, rod, link, and fathom in terms of the US survey\\nfoot.\\nSources:\\nNIST Special Publication 447, Sects. 5, 7, and 8.\\nNIST Handbook 44, 2011 ed., Appendix C.\\nCanadian Journal of Physics, 1959, 37:(1) 84, 10.1139/p59-014.\",\"6.1.1. surveyor's measure\"],\"comment\":\"Andrew Ellicott chain is the\\nsame length\\n\\nChain from 1664, introduced by\\nVincent Wing, also found in a\\n33 foot length with 40 links.\"}},{\"line\":\"troughtonyard = 914.42190 mm\",\"info\":{\"headingsIndex\":[6,2],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.2. early US length standards\\n\\nThe US has had four standards for the yard: one by Troughton of London\\n(1815); bronze yard 11 (1856); the Mendhall yard (1893), consistent\\nwith the definition of the meter in the metric joint resolution of\\nCongress in 1866, but defining the yard in terms of the meter; and the\\ninternational yard (1959), which standardized definitions for Australia,\\nCanada, New Zealand, South Africa, the UK, and the US.\\nSources: Pat Naughtin (2009), Which Inch?, www.metricationmatters.com;\\nLewis E. Barbrow and Lewis V. Judson (1976). NBS Special Publication\\n447, Weights and Measures Standards of the United States: A Brief\\nHistory.\"],\"comment\":\"\"}},{\"line\":\"bronzeyard11 = 914.39980 mm\",\"info\":{\"headingsIndex\":[6,2],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.2. early US length standards\\n\\nThe US has had four standards for the yard: one by Troughton of London\\n(1815); bronze yard 11 (1856); the Mendhall yard (1893), consistent\\nwith the definition of the meter in the metric joint resolution of\\nCongress in 1866, but defining the yard in terms of the meter; and the\\ninternational yard (1959), which standardized definitions for Australia,\\nCanada, New Zealand, South Africa, the UK, and the US.\\nSources: Pat Naughtin (2009), Which Inch?, www.metricationmatters.com;\\nLewis E. Barbrow and Lewis V. Judson (1976). NBS Special Publication\\n447, Weights and Measures Standards of the United States: A Brief\\nHistory.\"],\"comment\":\"\"}},{\"line\":\"mendenhallyard = surveyyard\",\"info\":{\"headingsIndex\":[6,2],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.2. early US length standards\\n\\nThe US has had four standards for the yard: one by Troughton of London\\n(1815); bronze yard 11 (1856); the Mendhall yard (1893), consistent\\nwith the definition of the meter in the metric joint resolution of\\nCongress in 1866, but defining the yard in terms of the meter; and the\\ninternational yard (1959), which standardized definitions for Australia,\\nCanada, New Zealand, South Africa, the UK, and the US.\\nSources: Pat Naughtin (2009), Which Inch?, www.metricationmatters.com;\\nLewis E. Barbrow and Lewis V. Judson (1976). NBS Special Publication\\n447, Weights and Measures Standards of the United States: A Brief\\nHistory.\"],\"comment\":\"\"}},{\"line\":\"internationalyard = yard\",\"info\":{\"headingsIndex\":[6,2],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.2. early US length standards\\n\\nThe US has had four standards for the yard: one by Troughton of London\\n(1815); bronze yard 11 (1856); the Mendhall yard (1893), consistent\\nwith the definition of the meter in the metric joint resolution of\\nCongress in 1866, but defining the yard in terms of the meter; and the\\ninternational yard (1959), which standardized definitions for Australia,\\nCanada, New Zealand, South Africa, the UK, and the US.\\nSources: Pat Naughtin (2009), Which Inch?, www.metricationmatters.com;\\nLewis E. Barbrow and Lewis V. Judson (1976). NBS Special Publication\\n447, Weights and Measures Standards of the United States: A Brief\\nHistory.\"],\"comment\":\"\"}},{\"line\":\"fathom = 6 ft\",\"info\":{\"headingsIndex\":[6,3],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.3. nautical measure\"],\"comment\":\"Originally defined as the distance from\\nfingertip to fingertip with arms fully\\nextended.\"}},{\"line\":\"nauticalmile = 1852 m\",\"info\":{\"headingsIndex\":[6,3],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.3. nautical measure\"],\"comment\":\"Supposed to be one minute of latitude at\\nthe equator.  That value is about 1855 m.\\nEarly estimates of the earth's circumference\\nwere a bit off.  The value of 1852 m was\\nmade the international standard in 1929.\\nThe US did not accept this value until\\n1954.  The UK switched in 1970.\"}},{\"line\":\"cable = 1|10 nauticalmile\",\"info\":{\"headingsIndex\":[6,3],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.3. nautical measure\"],\"comment\":\"international cable\"}},{\"line\":\"intcable = cable\",\"info\":{\"headingsIndex\":[6,3],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.3. nautical measure\"],\"comment\":\"international cable\"}},{\"line\":\"cablelength = cable\",\"info\":{\"headingsIndex\":[6,3],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.3. nautical measure\"],\"comment\":\"international cable\"}},{\"line\":\"UScable = 100 USfathom\",\"info\":{\"headingsIndex\":[6,3],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.3. nautical measure\"],\"comment\":\"\"}},{\"line\":\"navycablelength = 720 USft\",\"info\":{\"headingsIndex\":[6,3],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.3. nautical measure\"],\"comment\":\"used for depth in water\"}},{\"line\":\"marineleague = 3 nauticalmile\",\"info\":{\"headingsIndex\":[6,3],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.3. nautical measure\"],\"comment\":\"\"}},{\"line\":\"geographicalmile = brnauticalmile\",\"info\":{\"headingsIndex\":[6,3],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.3. nautical measure\"],\"comment\":\"\"}},{\"line\":\"knot = nauticalmile / hr\",\"info\":{\"headingsIndex\":[6,3],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.3. nautical measure\"],\"comment\":\"\"}},{\"line\":\"click = km\",\"info\":{\"headingsIndex\":[6,3],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.3. nautical measure\"],\"comment\":\"US military slang\"}},{\"line\":\"klick = click\",\"info\":{\"headingsIndex\":[6,3],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.3. nautical measure\"],\"comment\":\"US military slang\"}},{\"line\":\"pound = 0.45359237 kg\",\"info\":{\"headingsIndex\":[6,4],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.4. Avoirdupois weight\"],\"comment\":\"The one normally used\\nFrom the latin libra\"}},{\"line\":\"lb = pound\",\"info\":{\"headingsIndex\":[6,4],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.4. Avoirdupois weight\"],\"comment\":\"The one normally used\\nFrom the latin libra\"}},{\"line\":\"grain = 1|7000 pound\",\"info\":{\"headingsIndex\":[6,4],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.4. Avoirdupois weight\"],\"comment\":\"The grain is the same in all three\\nweight systems.  It was originally\\ndefined as the weight of a barley\\ncorn taken from the middle of the\\near.\"}},{\"line\":\"ounce = 1|16 pound\",\"info\":{\"headingsIndex\":[6,4],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.4. Avoirdupois weight\"],\"comment\":\"\"}},{\"line\":\"oz = ounce\",\"info\":{\"headingsIndex\":[6,4],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.4. Avoirdupois weight\"],\"comment\":\"\"}},{\"line\":\"dram = 1|16 ounce\",\"info\":{\"headingsIndex\":[6,4],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.4. Avoirdupois weight\"],\"comment\":\"\"}},{\"line\":\"dr = dram\",\"info\":{\"headingsIndex\":[6,4],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.4. Avoirdupois weight\"],\"comment\":\"\"}},{\"line\":\"ushundredweight = 100 pounds\",\"info\":{\"headingsIndex\":[6,4],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.4. Avoirdupois weight\"],\"comment\":\"\"}},{\"line\":\"cwt = hundredweight\",\"info\":{\"headingsIndex\":[6,4],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.4. Avoirdupois weight\"],\"comment\":\"\"}},{\"line\":\"shorthundredweight = ushundredweight\",\"info\":{\"headingsIndex\":[6,4],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.4. Avoirdupois weight\"],\"comment\":\"\"}},{\"line\":\"uston = shortton\",\"info\":{\"headingsIndex\":[6,4],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.4. Avoirdupois weight\"],\"comment\":\"\"}},{\"line\":\"shortton = 2000 lb\",\"info\":{\"headingsIndex\":[6,4],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.4. Avoirdupois weight\"],\"comment\":\"\"}},{\"line\":\"quarterweight = 1|4 uston\",\"info\":{\"headingsIndex\":[6,4],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.4. Avoirdupois weight\"],\"comment\":\"\"}},{\"line\":\"shortquarterweight = 1|4 shortton\",\"info\":{\"headingsIndex\":[6,4],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.4. Avoirdupois weight\"],\"comment\":\"\"}},{\"line\":\"shortquarter = shortquarterweight\",\"info\":{\"headingsIndex\":[6,4],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.4. Avoirdupois weight\"],\"comment\":\"\"}},{\"line\":\"troypound = 5760 grain\",\"info\":{\"headingsIndex\":[6,5],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\"],\"comment\":\"\"}},{\"line\":\"troyounce = 1|12 troypound\",\"info\":{\"headingsIndex\":[6,5],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\"],\"comment\":\"\"}},{\"line\":\"ozt = troyounce\",\"info\":{\"headingsIndex\":[6,5],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\"],\"comment\":\"\"}},{\"line\":\"pennyweight = 1|20 troyounce\",\"info\":{\"headingsIndex\":[6,5],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\"],\"comment\":\"Abbreviated \\\"d\\\" in reference to a\\nFrankish coin called the \\\"denier\\\"\\nminted in the late 700's.  There\\nwere 240 deniers to the pound.\"}},{\"line\":\"dwt = pennyweight\",\"info\":{\"headingsIndex\":[6,5],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\"],\"comment\":\"Abbreviated \\\"d\\\" in reference to a\\nFrankish coin called the \\\"denier\\\"\\nminted in the late 700's.  There\\nwere 240 deniers to the pound.\"}},{\"line\":\"assayton = mg ton / troyounce\",\"info\":{\"headingsIndex\":[6,5],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\"],\"comment\":\"mg / assayton = troyounce / ton\"}},{\"line\":\"usassayton = mg uston / troyounce\",\"info\":{\"headingsIndex\":[6,5],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\"],\"comment\":\"\"}},{\"line\":\"brassayton = mg brton / troyounce\",\"info\":{\"headingsIndex\":[6,5],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\"],\"comment\":\"\"}},{\"line\":\"fineounce = troyounce\",\"info\":{\"headingsIndex\":[6,5],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\"],\"comment\":\"A troy ounce of 99.5% pure gold\"}},{\"line\":\"metriccarat = 0.2 gram\",\"info\":{\"headingsIndex\":[6,5,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\",\"6.5.1. Some other jewelers units\"],\"comment\":\"Defined in 1907\"}},{\"line\":\"metricgrain = 50 mg\",\"info\":{\"headingsIndex\":[6,5,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\",\"6.5.1. Some other jewelers units\"],\"comment\":\"\"}},{\"line\":\"carat = metriccarat\",\"info\":{\"headingsIndex\":[6,5,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\",\"6.5.1. Some other jewelers units\"],\"comment\":\"\"}},{\"line\":\"ct = carat\",\"info\":{\"headingsIndex\":[6,5,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\",\"6.5.1. Some other jewelers units\"],\"comment\":\"\"}},{\"line\":\"jewelerspoint = 1|100 carat\",\"info\":{\"headingsIndex\":[6,5,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\",\"6.5.1. Some other jewelers units\"],\"comment\":\"\"}},{\"line\":\"silversmithpoint = 1|4000 inch\",\"info\":{\"headingsIndex\":[6,5,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\",\"6.5.1. Some other jewelers units\"],\"comment\":\"\"}},{\"line\":\"momme = 3.75 grams\",\"info\":{\"headingsIndex\":[6,5,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.5. Troy Weight. In 1828 the troy pound was made the first United States\\nstandard weight. It was to be used to regulate coinage.\",\"6.5.1. Some other jewelers units\"],\"comment\":\"Traditional Japanese unit based\\non the chinese mace.  It is used for\\npearls in modern times and also for\\nsilk density.  The definition here\\nwas adopted in 1891.\"}},{\"line\":\"appound = troypound\",\"info\":{\"headingsIndex\":[6,6],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.6. Apothecaries' weight\"],\"comment\":\"\"}},{\"line\":\"apounce = troyounce\",\"info\":{\"headingsIndex\":[6,6],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.6. Apothecaries' weight\"],\"comment\":\"\"}},{\"line\":\"apdram = 1|8 apounce\",\"info\":{\"headingsIndex\":[6,6],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.6. Apothecaries' weight\"],\"comment\":\"\"}},{\"line\":\"apscruple = 1|3 apdram\",\"info\":{\"headingsIndex\":[6,6],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.6. Apothecaries' weight\"],\"comment\":\"\"}},{\"line\":\"usgallon = 231 in^3\",\"info\":{\"headingsIndex\":[6,7],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"gal = gallon\",\"info\":{\"headingsIndex\":[6,7],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"quart = 1|4 gallon\",\"info\":{\"headingsIndex\":[6,7],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"pint = 1|2 quart\",\"info\":{\"headingsIndex\":[6,7],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"gill = 1|4 pint\",\"info\":{\"headingsIndex\":[6,7],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"usquart = 1|4 usgallon\",\"info\":{\"headingsIndex\":[6,7],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"uspint = 1|2 usquart\",\"info\":{\"headingsIndex\":[6,7],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"usgill = 1|4 uspint\",\"info\":{\"headingsIndex\":[6,7],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"usfluidounce = 1|16 uspint\",\"info\":{\"headingsIndex\":[6,7],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"fluiddram = 1|8 usfloz\",\"info\":{\"headingsIndex\":[6,7],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"minimvolume = 1|60 fluiddram\",\"info\":{\"headingsIndex\":[6,7],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"qt = quart\",\"info\":{\"headingsIndex\":[6,7],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"pt = pint\",\"info\":{\"headingsIndex\":[6,7],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"floz = fluidounce\",\"info\":{\"headingsIndex\":[6,7],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"usfloz = usfluidounce\",\"info\":{\"headingsIndex\":[6,7],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"fldr = fluiddram\",\"info\":{\"headingsIndex\":[6,7],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"liquidbarrel = 31.5 usgallon\",\"info\":{\"headingsIndex\":[6,7],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"usbeerbarrel = 2 beerkegs\",\"info\":{\"headingsIndex\":[6,7],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"US liquid measure is derived from\\nthe British wine gallon of 1707.\\nSee the \\\"winegallon\\\" entry below\\nmore historical information.\"}},{\"line\":\"beerkeg = 15.5 usgallon\",\"info\":{\"headingsIndex\":[6,7],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"Various among brewers\"}},{\"line\":\"ponykeg = 1|2 beerkeg\",\"info\":{\"headingsIndex\":[6,7],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"\"}},{\"line\":\"winekeg = 12 usgallon\",\"info\":{\"headingsIndex\":[6,7],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"\"}},{\"line\":\"petroleumbarrel = 42 usgallon\",\"info\":{\"headingsIndex\":[6,7],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"Originated in Pennsylvania oil\\nfields, from the winetierce\"}},{\"line\":\"barrel = petroleumbarrel\",\"info\":{\"headingsIndex\":[6,7],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"Originated in Pennsylvania oil\\nfields, from the winetierce\"}},{\"line\":\"bbl = barrel\",\"info\":{\"headingsIndex\":[6,7],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"Originated in Pennsylvania oil\\nfields, from the winetierce\"}},{\"line\":\"ushogshead = 2 liquidbarrel\",\"info\":{\"headingsIndex\":[6,7],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"\"}},{\"line\":\"usfirkin = 9 usgallon\",\"info\":{\"headingsIndex\":[6,7],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.7. Liquid measure\"],\"comment\":\"\"}},{\"line\":\"usbushel = 2150.42 in^3\",\"info\":{\"headingsIndex\":[6,8],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.8. Dry measures: The Winchester Bushel was defined by William III in 1702 and\\nlegally adopted in the US in 1836.\"],\"comment\":\"Volume of 8 inch cylinder with 18.5\\ninch diameter (rounded)\"}},{\"line\":\"bu = bushel\",\"info\":{\"headingsIndex\":[6,8],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.8. Dry measures: The Winchester Bushel was defined by William III in 1702 and\\nlegally adopted in the US in 1836.\"],\"comment\":\"Volume of 8 inch cylinder with 18.5\\ninch diameter (rounded)\"}},{\"line\":\"peck = 1|4 bushel\",\"info\":{\"headingsIndex\":[6,8],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.8. Dry measures: The Winchester Bushel was defined by William III in 1702 and\\nlegally adopted in the US in 1836.\"],\"comment\":\"\"}},{\"line\":\"uspeck = 1|4 usbushel\",\"info\":{\"headingsIndex\":[6,8],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.8. Dry measures: The Winchester Bushel was defined by William III in 1702 and\\nlegally adopted in the US in 1836.\"],\"comment\":\"\"}},{\"line\":\"brpeck = 1|4 brbushel\",\"info\":{\"headingsIndex\":[6,8],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.8. Dry measures: The Winchester Bushel was defined by William III in 1702 and\\nlegally adopted in the US in 1836.\"],\"comment\":\"\"}},{\"line\":\"pk = peck\",\"info\":{\"headingsIndex\":[6,8],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.8. Dry measures: The Winchester Bushel was defined by William III in 1702 and\\nlegally adopted in the US in 1836.\"],\"comment\":\"\"}},{\"line\":\"drygallon = 1|2 uspeck\",\"info\":{\"headingsIndex\":[6,8],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.8. Dry measures: The Winchester Bushel was defined by William III in 1702 and\\nlegally adopted in the US in 1836.\"],\"comment\":\"\"}},{\"line\":\"dryquart = 1|4 drygallon\",\"info\":{\"headingsIndex\":[6,8],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.8. Dry measures: The Winchester Bushel was defined by William III in 1702 and\\nlegally adopted in the US in 1836.\"],\"comment\":\"\"}},{\"line\":\"drypint = 1|2 dryquart\",\"info\":{\"headingsIndex\":[6,8],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.8. Dry measures: The Winchester Bushel was defined by William III in 1702 and\\nlegally adopted in the US in 1836.\"],\"comment\":\"\"}},{\"line\":\"drybarrel = 7056 in^3\",\"info\":{\"headingsIndex\":[6,8],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.8. Dry measures: The Winchester Bushel was defined by William III in 1702 and\\nlegally adopted in the US in 1836.\"],\"comment\":\"Used in US for fruits, vegetables,\\nand other dry commodities except for\\ncranberries.\"}},{\"line\":\"cranberrybarrel = 5826 in^3\",\"info\":{\"headingsIndex\":[6,8],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.8. Dry measures: The Winchester Bushel was defined by William III in 1702 and\\nlegally adopted in the US in 1836.\"],\"comment\":\"US cranberry barrel\"}},{\"line\":\"heapedbushel = 1.278 usbushel\",\"info\":{\"headingsIndex\":[6,8],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.8. Dry measures: The Winchester Bushel was defined by William III in 1702 and\\nlegally adopted in the US in 1836.\"],\"comment\":\"The following explanation for this\\nvalue was provided by Wendy Krieger\\n<os2fan2@yahoo.com> based on\\nguesswork.  The cylindrical vessel is\\n18.5 inches in diameter and 1|2 inch\\nthick.  A heaped bushel includes the\\ncontents of this cylinder plus a heap\\non top.  The heap is a cone 19.5\\ninches in diameter and 6 inches\\nhigh.  With these values, the volume\\nof the bushel is 684.5 pi in^3 and\\nthe heap occupies 190.125 pi in^3.\\nTherefore, the heaped bushel is\\n874.625|684.5 bushels.  This value is\\napproximately 1.2777575 and it rounds\\nto the value listed for the size of\\nthe heaped bushel.  Sometimes the\\nheaped bushel is reported as 1.25\\nbushels.  This same explanation gives\\nthat value if the heap is taken to\\nhave an 18.5 inch diameter.\"}},{\"line\":\"wheatbushel = 60 lb\",\"info\":{\"headingsIndex\":[6,9],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.9. Grain measures. The bushel as it is used by farmers in the USA is actually\\na measure of mass which varies for different commodities. Canada uses the\\nsame bushel masses for most commodities, but not for oats.\"],\"comment\":\"\"}},{\"line\":\"soybeanbushel = 60 lb\",\"info\":{\"headingsIndex\":[6,9],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.9. Grain measures. The bushel as it is used by farmers in the USA is actually\\na measure of mass which varies for different commodities. Canada uses the\\nsame bushel masses for most commodities, but not for oats.\"],\"comment\":\"\"}},{\"line\":\"cornbushel = 56 lb\",\"info\":{\"headingsIndex\":[6,9],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.9. Grain measures. The bushel as it is used by farmers in the USA is actually\\na measure of mass which varies for different commodities. Canada uses the\\nsame bushel masses for most commodities, but not for oats.\"],\"comment\":\"\"}},{\"line\":\"ryebushel = 56 lb\",\"info\":{\"headingsIndex\":[6,9],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.9. Grain measures. The bushel as it is used by farmers in the USA is actually\\na measure of mass which varies for different commodities. Canada uses the\\nsame bushel masses for most commodities, but not for oats.\"],\"comment\":\"\"}},{\"line\":\"barleybushel = 48 lb\",\"info\":{\"headingsIndex\":[6,9],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.9. Grain measures. The bushel as it is used by farmers in the USA is actually\\na measure of mass which varies for different commodities. Canada uses the\\nsame bushel masses for most commodities, but not for oats.\"],\"comment\":\"\"}},{\"line\":\"oatbushel = 32 lb\",\"info\":{\"headingsIndex\":[6,9],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.9. Grain measures. The bushel as it is used by farmers in the USA is actually\\na measure of mass which varies for different commodities. Canada uses the\\nsame bushel masses for most commodities, but not for oats.\"],\"comment\":\"\"}},{\"line\":\"ricebushel = 45 lb\",\"info\":{\"headingsIndex\":[6,9],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.9. Grain measures. The bushel as it is used by farmers in the USA is actually\\na measure of mass which varies for different commodities. Canada uses the\\nsame bushel masses for most commodities, but not for oats.\"],\"comment\":\"\"}},{\"line\":\"canada_oatbushel = 34 lb\",\"info\":{\"headingsIndex\":[6,9],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.9. Grain measures. The bushel as it is used by farmers in the USA is actually\\na measure of mass which varies for different commodities. Canada uses the\\nsame bushel masses for most commodities, but not for oats.\"],\"comment\":\"\"}},{\"line\":\"ponyvolume = 1 usfloz\",\"info\":{\"headingsIndex\":[6,10],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.10. Wine and Spirits measure\"],\"comment\":\"\"}},{\"line\":\"jigger = 1.5 usfloz\",\"info\":{\"headingsIndex\":[6,10],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.10. Wine and Spirits measure\"],\"comment\":\"Can vary between 1 and 2 usfloz\\nSometimes 1 usfloz\"}},{\"line\":\"shot = jigger\",\"info\":{\"headingsIndex\":[6,10],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.10. Wine and Spirits measure\"],\"comment\":\"Can vary between 1 and 2 usfloz\\nSometimes 1 usfloz\"}},{\"line\":\"eushot = 25 ml\",\"info\":{\"headingsIndex\":[6,10],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.10. Wine and Spirits measure\"],\"comment\":\"EU standard spirits measure\"}},{\"line\":\"fifth = 1|5 usgallon\",\"info\":{\"headingsIndex\":[6,10],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.10. Wine and Spirits measure\"],\"comment\":\"\"}},{\"line\":\"winebottle = 750 ml\",\"info\":{\"headingsIndex\":[6,10],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.10. Wine and Spirits measure\"],\"comment\":\"US industry standard, 1979\"}},{\"line\":\"winesplit = 1|4 winebottle\",\"info\":{\"headingsIndex\":[6,10],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.10. Wine and Spirits measure\"],\"comment\":\"\"}},{\"line\":\"wineglass = 4 usfloz\",\"info\":{\"headingsIndex\":[6,10],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.10. Wine and Spirits measure\"],\"comment\":\"\"}},{\"line\":\"magnum = 1.5 liter\",\"info\":{\"headingsIndex\":[6,10],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.10. Wine and Spirits measure\"],\"comment\":\"Standardized in 1979, but given\\nas 2 qt in some references\"}},{\"line\":\"metrictenth = 375 ml\",\"info\":{\"headingsIndex\":[6,10],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.10. Wine and Spirits measure\"],\"comment\":\"\"}},{\"line\":\"metricfifth = 750 ml\",\"info\":{\"headingsIndex\":[6,10],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.10. Wine and Spirits measure\"],\"comment\":\"\"}},{\"line\":\"metricquart = 1 liter\",\"info\":{\"headingsIndex\":[6,10],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.10. Wine and Spirits measure\"],\"comment\":\"\"}},{\"line\":\"reputedquart = 1|6 brgallon\",\"info\":{\"headingsIndex\":[6,11],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.11. Old British bottle size\"],\"comment\":\"\"}},{\"line\":\"reputedpint = 1|2 reputedquart\",\"info\":{\"headingsIndex\":[6,11],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.11. Old British bottle size\"],\"comment\":\"\"}},{\"line\":\"brwinebottle = reputedquart\",\"info\":{\"headingsIndex\":[6,11],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.11. Old British bottle size\"],\"comment\":\"Very close to 1|5 winegallon\"}},{\"line\":\"split = 200 ml\",\"info\":{\"headingsIndex\":[6,12],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.12. French champagne bottle sizes\"],\"comment\":\"\"}},{\"line\":\"jeroboam = 2 magnum\",\"info\":{\"headingsIndex\":[6,12],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.12. French champagne bottle sizes\"],\"comment\":\"\"}},{\"line\":\"rehoboam = 3 magnum\",\"info\":{\"headingsIndex\":[6,12],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.12. French champagne bottle sizes\"],\"comment\":\"\"}},{\"line\":\"methuselah = 4 magnum\",\"info\":{\"headingsIndex\":[6,12],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.12. French champagne bottle sizes\"],\"comment\":\"\"}},{\"line\":\"salmanazar = 6 magnum\",\"info\":{\"headingsIndex\":[6,12],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.12. French champagne bottle sizes\"],\"comment\":\"\"}},{\"line\":\"balthazar = 8 magnum\",\"info\":{\"headingsIndex\":[6,12],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.12. French champagne bottle sizes\"],\"comment\":\"\"}},{\"line\":\"nebuchadnezzar = 10 magnum\",\"info\":{\"headingsIndex\":[6,12],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.12. French champagne bottle sizes\"],\"comment\":\"\"}},{\"line\":\"clarkdegree = grains/brgallon\",\"info\":{\"headingsIndex\":[6,13],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.13. Water is \\\"hard\\\" if it contains various minerals, expecially calcium\\ncarbonate.\"],\"comment\":\"Content by weigh of calcium carbonate\"}},{\"line\":\"gpg = grains/usgallon\",\"info\":{\"headingsIndex\":[6,13],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.13. Water is \\\"hard\\\" if it contains various minerals, expecially calcium\\ncarbonate.\"],\"comment\":\"Divide by water's density to convert to\\na dimensionless concentration measure\"}},{\"line\":\"shoeiron = 1|48 inch\",\"info\":{\"headingsIndex\":[6,14],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.14. Shoe measures\"],\"comment\":\"Used to measure leather in soles\"}},{\"line\":\"shoeounce = 1|64 inch\",\"info\":{\"headingsIndex\":[6,14],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.14. Shoe measures\"],\"comment\":\"Used to measure non-sole shoe leather\"}},{\"line\":\"shoesize_delta = 1|3 inch\",\"info\":{\"headingsIndex\":[6,14,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.14. Shoe measures\",\"6.14.1. USA shoe sizes. These express the length of the shoe or the length\\nof the \\\"last\\\", the form that the shoe is made on. But note that\\nthis only captures the length. It appears that widths change 1/4\\ninch for each letter within the same size, and if you change the\\nlength by half a size then the width changes between 1/8 inch and\\n1/4 inch. But this may not be standard. If you know better, please\\ncontact me.\"],\"comment\":\"USA shoe sizes differ by this amount\"}},{\"line\":\"shoe_men0 = 8.25 inch\",\"info\":{\"headingsIndex\":[6,14,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.14. Shoe measures\",\"6.14.1. USA shoe sizes. These express the length of the shoe or the length\\nof the \\\"last\\\", the form that the shoe is made on. But note that\\nthis only captures the length. It appears that widths change 1/4\\ninch for each letter within the same size, and if you change the\\nlength by half a size then the width changes between 1/8 inch and\\n1/4 inch. But this may not be standard. If you know better, please\\ncontact me.\"],\"comment\":\"\"}},{\"line\":\"shoe_women0 = (7+11|12) inch\",\"info\":{\"headingsIndex\":[6,14,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.14. Shoe measures\",\"6.14.1. USA shoe sizes. These express the length of the shoe or the length\\nof the \\\"last\\\", the form that the shoe is made on. But note that\\nthis only captures the length. It appears that widths change 1/4\\ninch for each letter within the same size, and if you change the\\nlength by half a size then the width changes between 1/8 inch and\\n1/4 inch. But this may not be standard. If you know better, please\\ncontact me.\"],\"comment\":\"\"}},{\"line\":\"shoe_boys0 = (3+11|12) inch\",\"info\":{\"headingsIndex\":[6,14,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.14. Shoe measures\",\"6.14.1. USA shoe sizes. These express the length of the shoe or the length\\nof the \\\"last\\\", the form that the shoe is made on. But note that\\nthis only captures the length. It appears that widths change 1/4\\ninch for each letter within the same size, and if you change the\\nlength by half a size then the width changes between 1/8 inch and\\n1/4 inch. But this may not be standard. If you know better, please\\ncontact me.\"],\"comment\":\"\"}},{\"line\":\"shoe_girls0 = (3+7|12) inch\",\"info\":{\"headingsIndex\":[6,14,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.14. Shoe measures\",\"6.14.1. USA shoe sizes. These express the length of the shoe or the length\\nof the \\\"last\\\", the form that the shoe is made on. But note that\\nthis only captures the length. It appears that widths change 1/4\\ninch for each letter within the same size, and if you change the\\nlength by half a size then the width changes between 1/8 inch and\\n1/4 inch. But this may not be standard. If you know better, please\\ncontact me.\"],\"comment\":\"\"}},{\"line\":\"shoesize_men = n => shoe_men0 + n shoesize_delta \",\"info\":{\"headingsIndex\":[6,14,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.14. Shoe measures\",\"6.14.1. USA shoe sizes. These express the length of the shoe or the length\\nof the \\\"last\\\", the form that the shoe is made on. But note that\\nthis only captures the length. It appears that widths change 1/4\\ninch for each letter within the same size, and if you change the\\nlength by half a size then the width changes between 1/8 inch and\\n1/4 inch. But this may not be standard. If you know better, please\\ncontact me.\"],\"comment\":\"\"}},{\"line\":\"shoesize_men^-1 = shoesize_men => (shoesize_men+(-shoe_men0))/shoesize_delta\",\"info\":{\"headingsIndex\":[6,14,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.14. Shoe measures\",\"6.14.1. USA shoe sizes. These express the length of the shoe or the length\\nof the \\\"last\\\", the form that the shoe is made on. But note that\\nthis only captures the length. It appears that widths change 1/4\\ninch for each letter within the same size, and if you change the\\nlength by half a size then the width changes between 1/8 inch and\\n1/4 inch. But this may not be standard. If you know better, please\\ncontact me.\"],\"comment\":\"\"}},{\"line\":\"shoesize_women = n => shoe_women0 + n shoesize_delta \",\"info\":{\"headingsIndex\":[6,14,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.14. Shoe measures\",\"6.14.1. USA shoe sizes. These express the length of the shoe or the length\\nof the \\\"last\\\", the form that the shoe is made on. But note that\\nthis only captures the length. It appears that widths change 1/4\\ninch for each letter within the same size, and if you change the\\nlength by half a size then the width changes between 1/8 inch and\\n1/4 inch. But this may not be standard. If you know better, please\\ncontact me.\"],\"comment\":\"\"}},{\"line\":\"shoesize_women^-1 = shoesize_women => (shoesize_women+(-shoe_women0))/shoesize_delta\",\"info\":{\"headingsIndex\":[6,14,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.14. Shoe measures\",\"6.14.1. USA shoe sizes. These express the length of the shoe or the length\\nof the \\\"last\\\", the form that the shoe is made on. But note that\\nthis only captures the length. It appears that widths change 1/4\\ninch for each letter within the same size, and if you change the\\nlength by half a size then the width changes between 1/8 inch and\\n1/4 inch. But this may not be standard. If you know better, please\\ncontact me.\"],\"comment\":\"\"}},{\"line\":\"shoesize_boys = n => shoe_boys0 + n shoesize_delta \",\"info\":{\"headingsIndex\":[6,14,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.14. Shoe measures\",\"6.14.1. USA shoe sizes. These express the length of the shoe or the length\\nof the \\\"last\\\", the form that the shoe is made on. But note that\\nthis only captures the length. It appears that widths change 1/4\\ninch for each letter within the same size, and if you change the\\nlength by half a size then the width changes between 1/8 inch and\\n1/4 inch. But this may not be standard. If you know better, please\\ncontact me.\"],\"comment\":\"\"}},{\"line\":\"shoesize_boys^-1 = shoesize_boys => (shoesize_boys+(-shoe_boys0))/shoesize_delta\",\"info\":{\"headingsIndex\":[6,14,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.14. Shoe measures\",\"6.14.1. USA shoe sizes. These express the length of the shoe or the length\\nof the \\\"last\\\", the form that the shoe is made on. But note that\\nthis only captures the length. It appears that widths change 1/4\\ninch for each letter within the same size, and if you change the\\nlength by half a size then the width changes between 1/8 inch and\\n1/4 inch. But this may not be standard. If you know better, please\\ncontact me.\"],\"comment\":\"\"}},{\"line\":\"shoesize_girls = n => shoe_girls0 + n shoesize_delta \",\"info\":{\"headingsIndex\":[6,14,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.14. Shoe measures\",\"6.14.1. USA shoe sizes. These express the length of the shoe or the length\\nof the \\\"last\\\", the form that the shoe is made on. But note that\\nthis only captures the length. It appears that widths change 1/4\\ninch for each letter within the same size, and if you change the\\nlength by half a size then the width changes between 1/8 inch and\\n1/4 inch. But this may not be standard. If you know better, please\\ncontact me.\"],\"comment\":\"\"}},{\"line\":\"shoesize_girls^-1 = shoesize_girls => (shoesize_girls+(-shoe_girls0))/shoesize_delta\",\"info\":{\"headingsIndex\":[6,14,1],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.14. Shoe measures\",\"6.14.1. USA shoe sizes. These express the length of the shoe or the length\\nof the \\\"last\\\", the form that the shoe is made on. But note that\\nthis only captures the length. It appears that widths change 1/4\\ninch for each letter within the same size, and if you change the\\nlength by half a size then the width changes between 1/8 inch and\\n1/4 inch. But this may not be standard. If you know better, please\\ncontact me.\"],\"comment\":\"\"}},{\"line\":\"europeshoesize = 2|3 cm\",\"info\":{\"headingsIndex\":[6,14,2],\"headingLevel\":3,\"headings\":[\"6. United States units\",\"6.14. Shoe measures\",\"6.14.2. European shoe size. According to\\nhttp://www.shoeline.com/footnotes/shoeterm.shtml\\nshoe sizes in Europe are measured with Paris points which simply measure\\nthe length of the shoe.\"],\"comment\":\"\"}},{\"line\":\"buck = US$\",\"info\":{\"headingsIndex\":[6,15],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.15. USA slang units\"],\"comment\":\"\"}},{\"line\":\"fin = 5 US$\",\"info\":{\"headingsIndex\":[6,15],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.15. USA slang units\"],\"comment\":\"\"}},{\"line\":\"sawbuck = 10 US$\",\"info\":{\"headingsIndex\":[6,15],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.15. USA slang units\"],\"comment\":\"\"}},{\"line\":\"usgrand = 1000 US$\",\"info\":{\"headingsIndex\":[6,15],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.15. USA slang units\"],\"comment\":\"\"}},{\"line\":\"greenback = US$\",\"info\":{\"headingsIndex\":[6,15],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.15. USA slang units\"],\"comment\":\"\"}},{\"line\":\"key = kg\",\"info\":{\"headingsIndex\":[6,15],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.15. USA slang units\"],\"comment\":\"usually of marijuana, 60's\"}},{\"line\":\"lid = 1 oz\",\"info\":{\"headingsIndex\":[6,15],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.15. USA slang units\"],\"comment\":\"Another 60's weed unit\"}},{\"line\":\"footballfield = usfootballfield\",\"info\":{\"headingsIndex\":[6,15],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.15. USA slang units\"],\"comment\":\"\"}},{\"line\":\"usfootballfield = 100 yards\",\"info\":{\"headingsIndex\":[6,15],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.15. USA slang units\"],\"comment\":\"\"}},{\"line\":\"canadafootballfield = 110 yards\",\"info\":{\"headingsIndex\":[6,15],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.15. USA slang units\"],\"comment\":\"And 65 yards wide\"}},{\"line\":\"marathon = 26 miles + 385 yards\",\"info\":{\"headingsIndex\":[6,15],\"headingLevel\":2,\"headings\":[\"6. United States units\",\"6.15. USA slang units\"],\"comment\":\"\"}},{\"line\":\"UK = UKlength_SJJ\",\"info\":{\"headingsIndex\":[7,1],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.1. The length measure in the UK was defined by a bronze bar manufactured in\\n1844. Various conversions were sanctioned for convenience at different\\ntimes, which makes conversions before 1963 a confusing matter. Apparently\\nprevious conversions were never explicitly revoked. Four different\\nconversion factors appear below. Multiply them times an imperial length\\nunits as desired. The Weights and Measures Act of 1963 switched the UK away\\nfrom their bronze standard and onto a definition of the yard in terms of the\\nmeter. This happened after an international agreement in 1959 to align the\\nworld's measurement systems.\"],\"comment\":\"\"}},{\"line\":\"UK_ = UK\",\"info\":{\"headingsIndex\":[7,1],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.1. The length measure in the UK was defined by a bronze bar manufactured in\\n1844. Various conversions were sanctioned for convenience at different\\ntimes, which makes conversions before 1963 a confusing matter. Apparently\\nprevious conversions were never explicitly revoked. Four different\\nconversion factors appear below. Multiply them times an imperial length\\nunits as desired. The Weights and Measures Act of 1963 switched the UK away\\nfrom their bronze standard and onto a definition of the yard in terms of the\\nmeter. This happened after an international agreement in 1959 to align the\\nworld's measurement systems.\"],\"comment\":\"\"}},{\"line\":\"british_ = UK\",\"info\":{\"headingsIndex\":[7,1],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.1. The length measure in the UK was defined by a bronze bar manufactured in\\n1844. Various conversions were sanctioned for convenience at different\\ntimes, which makes conversions before 1963 a confusing matter. Apparently\\nprevious conversions were never explicitly revoked. Four different\\nconversion factors appear below. Multiply them times an imperial length\\nunits as desired. The Weights and Measures Act of 1963 switched the UK away\\nfrom their bronze standard and onto a definition of the yard in terms of the\\nmeter. This happened after an international agreement in 1959 to align the\\nworld's measurement systems.\"],\"comment\":\"\"}},{\"line\":\"UKlength_B = 0.9143992 meter / yard\",\"info\":{\"headingsIndex\":[7,1],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.1. The length measure in the UK was defined by a bronze bar manufactured in\\n1844. Various conversions were sanctioned for convenience at different\\ntimes, which makes conversions before 1963 a confusing matter. Apparently\\nprevious conversions were never explicitly revoked. Four different\\nconversion factors appear below. Multiply them times an imperial length\\nunits as desired. The Weights and Measures Act of 1963 switched the UK away\\nfrom their bronze standard and onto a definition of the yard in terms of the\\nmeter. This happened after an international agreement in 1959 to align the\\nworld's measurement systems.\"],\"comment\":\"Benoit found the yard to be\\n0.9143992 m at a weights and\\nmeasures conference around\\n1896.   Legally sanctioned\\nin 1898.\"}},{\"line\":\"UKlength_SJJ = 0.91439841 meter / yard\",\"info\":{\"headingsIndex\":[7,1],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.1. The length measure in the UK was defined by a bronze bar manufactured in\\n1844. Various conversions were sanctioned for convenience at different\\ntimes, which makes conversions before 1963 a confusing matter. Apparently\\nprevious conversions were never explicitly revoked. Four different\\nconversion factors appear below. Multiply them times an imperial length\\nunits as desired. The Weights and Measures Act of 1963 switched the UK away\\nfrom their bronze standard and onto a definition of the yard in terms of the\\nmeter. This happened after an international agreement in 1959 to align the\\nworld's measurement systems.\"],\"comment\":\"In 1922, Seers, Jolly and\\nJohnson found the yard to be\\n0.91439841 meters.\\nUsed starting in the 1930's.\"}},{\"line\":\"UKlength_K = meter / 39.37079 inch\",\"info\":{\"headingsIndex\":[7,1],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.1. The length measure in the UK was defined by a bronze bar manufactured in\\n1844. Various conversions were sanctioned for convenience at different\\ntimes, which makes conversions before 1963 a confusing matter. Apparently\\nprevious conversions were never explicitly revoked. Four different\\nconversion factors appear below. Multiply them times an imperial length\\nunits as desired. The Weights and Measures Act of 1963 switched the UK away\\nfrom their bronze standard and onto a definition of the yard in terms of the\\nmeter. This happened after an international agreement in 1959 to align the\\nworld's measurement systems.\"],\"comment\":\"In 1816 Kater found this ratio\\nfor the meter and inch.  This\\nvalue was used as the legal\\nconversion ratio when the\\nmetric system was legalized\\nfor contract in 1864.\"}},{\"line\":\"UKlength_C = meter / 1.09362311 yard\",\"info\":{\"headingsIndex\":[7,1],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.1. The length measure in the UK was defined by a bronze bar manufactured in\\n1844. Various conversions were sanctioned for convenience at different\\ntimes, which makes conversions before 1963 a confusing matter. Apparently\\nprevious conversions were never explicitly revoked. Four different\\nconversion factors appear below. Multiply them times an imperial length\\nunits as desired. The Weights and Measures Act of 1963 switched the UK away\\nfrom their bronze standard and onto a definition of the yard in terms of the\\nmeter. This happened after an international agreement in 1959 to align the\\nworld's measurement systems.\"],\"comment\":\"In 1866 Clarke found the meter\\nto be 1.09362311 yards.  This\\nconversion was legalized\\naround 1878.\"}},{\"line\":\"brnauticalmile = 6080 ft\",\"info\":{\"headingsIndex\":[7,1],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.1. The length measure in the UK was defined by a bronze bar manufactured in\\n1844. Various conversions were sanctioned for convenience at different\\ntimes, which makes conversions before 1963 a confusing matter. Apparently\\nprevious conversions were never explicitly revoked. Four different\\nconversion factors appear below. Multiply them times an imperial length\\nunits as desired. The Weights and Measures Act of 1963 switched the UK away\\nfrom their bronze standard and onto a definition of the yard in terms of the\\nmeter. This happened after an international agreement in 1959 to align the\\nworld's measurement systems.\"],\"comment\":\"Used until 1970 when the UK\"}},{\"line\":\"brknot = brnauticalmile / hr\",\"info\":{\"headingsIndex\":[7,1],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.1. The length measure in the UK was defined by a bronze bar manufactured in\\n1844. Various conversions were sanctioned for convenience at different\\ntimes, which makes conversions before 1963 a confusing matter. Apparently\\nprevious conversions were never explicitly revoked. Four different\\nconversion factors appear below. Multiply them times an imperial length\\nunits as desired. The Weights and Measures Act of 1963 switched the UK away\\nfrom their bronze standard and onto a definition of the yard in terms of the\\nmeter. This happened after an international agreement in 1959 to align the\\nworld's measurement systems.\"],\"comment\":\"switched to the international\"}},{\"line\":\"brcable = 1|10 brnauticalmile\",\"info\":{\"headingsIndex\":[7,1],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.1. The length measure in the UK was defined by a bronze bar manufactured in\\n1844. Various conversions were sanctioned for convenience at different\\ntimes, which makes conversions before 1963 a confusing matter. Apparently\\nprevious conversions were never explicitly revoked. Four different\\nconversion factors appear below. Multiply them times an imperial length\\nunits as desired. The Weights and Measures Act of 1963 switched the UK away\\nfrom their bronze standard and onto a definition of the yard in terms of the\\nmeter. This happened after an international agreement in 1959 to align the\\nworld's measurement systems.\"],\"comment\":\"nautical mile.\"}},{\"line\":\"admiraltymile = brnauticalmile\",\"info\":{\"headingsIndex\":[7,1],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.1. The length measure in the UK was defined by a bronze bar manufactured in\\n1844. Various conversions were sanctioned for convenience at different\\ntimes, which makes conversions before 1963 a confusing matter. Apparently\\nprevious conversions were never explicitly revoked. Four different\\nconversion factors appear below. Multiply them times an imperial length\\nunits as desired. The Weights and Measures Act of 1963 switched the UK away\\nfrom their bronze standard and onto a definition of the yard in terms of the\\nmeter. This happened after an international agreement in 1959 to align the\\nworld's measurement systems.\"],\"comment\":\"\"}},{\"line\":\"admiraltyknot = brknot\",\"info\":{\"headingsIndex\":[7,1],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.1. The length measure in the UK was defined by a bronze bar manufactured in\\n1844. Various conversions were sanctioned for convenience at different\\ntimes, which makes conversions before 1963 a confusing matter. Apparently\\nprevious conversions were never explicitly revoked. Four different\\nconversion factors appear below. Multiply them times an imperial length\\nunits as desired. The Weights and Measures Act of 1963 switched the UK away\\nfrom their bronze standard and onto a definition of the yard in terms of the\\nmeter. This happened after an international agreement in 1959 to align the\\nworld's measurement systems.\"],\"comment\":\"\"}},{\"line\":\"admiraltycable = brcable\",\"info\":{\"headingsIndex\":[7,1],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.1. The length measure in the UK was defined by a bronze bar manufactured in\\n1844. Various conversions were sanctioned for convenience at different\\ntimes, which makes conversions before 1963 a confusing matter. Apparently\\nprevious conversions were never explicitly revoked. Four different\\nconversion factors appear below. Multiply them times an imperial length\\nunits as desired. The Weights and Measures Act of 1963 switched the UK away\\nfrom their bronze standard and onto a definition of the yard in terms of the\\nmeter. This happened after an international agreement in 1959 to align the\\nworld's measurement systems.\"],\"comment\":\"\"}},{\"line\":\"seamile = 6000 ft\",\"info\":{\"headingsIndex\":[7,1],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.1. The length measure in the UK was defined by a bronze bar manufactured in\\n1844. Various conversions were sanctioned for convenience at different\\ntimes, which makes conversions before 1963 a confusing matter. Apparently\\nprevious conversions were never explicitly revoked. Four different\\nconversion factors appear below. Multiply them times an imperial length\\nunits as desired. The Weights and Measures Act of 1963 switched the UK away\\nfrom their bronze standard and onto a definition of the yard in terms of the\\nmeter. This happened after an international agreement in 1959 to align the\\nworld's measurement systems.\"],\"comment\":\"\"}},{\"line\":\"shackle = 15 fathoms\",\"info\":{\"headingsIndex\":[7,1],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.1. The length measure in the UK was defined by a bronze bar manufactured in\\n1844. Various conversions were sanctioned for convenience at different\\ntimes, which makes conversions before 1963 a confusing matter. Apparently\\nprevious conversions were never explicitly revoked. Four different\\nconversion factors appear below. Multiply them times an imperial length\\nunits as desired. The Weights and Measures Act of 1963 switched the UK away\\nfrom their bronze standard and onto a definition of the yard in terms of the\\nmeter. This happened after an international agreement in 1959 to align the\\nworld's measurement systems.\"],\"comment\":\"Adopted 1949 by British navy\"}},{\"line\":\"clove = 7 lb\",\"info\":{\"headingsIndex\":[7,2],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.2. British Imperial weight is mostly the same as US weight. A few extra\\nunits are added here.\"],\"comment\":\"\"}},{\"line\":\"stone = 14 lb\",\"info\":{\"headingsIndex\":[7,2],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.2. British Imperial weight is mostly the same as US weight. A few extra\\nunits are added here.\"],\"comment\":\"\"}},{\"line\":\"tod = 28 lb\",\"info\":{\"headingsIndex\":[7,2],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.2. British Imperial weight is mostly the same as US weight. A few extra\\nunits are added here.\"],\"comment\":\"\"}},{\"line\":\"brquarterweight = 1|4 brhundredweight\",\"info\":{\"headingsIndex\":[7,2],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.2. British Imperial weight is mostly the same as US weight. A few extra\\nunits are added here.\"],\"comment\":\"\"}},{\"line\":\"brhundredweight = 8 stone\",\"info\":{\"headingsIndex\":[7,2],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.2. British Imperial weight is mostly the same as US weight. A few extra\\nunits are added here.\"],\"comment\":\"\"}},{\"line\":\"longhundredweight = brhundredweight\",\"info\":{\"headingsIndex\":[7,2],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.2. British Imperial weight is mostly the same as US weight. A few extra\\nunits are added here.\"],\"comment\":\"\"}},{\"line\":\"longton = 20 brhundredweight\",\"info\":{\"headingsIndex\":[7,2],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.2. British Imperial weight is mostly the same as US weight. A few extra\\nunits are added here.\"],\"comment\":\"\"}},{\"line\":\"brton = longton\",\"info\":{\"headingsIndex\":[7,2],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.2. British Imperial weight is mostly the same as US weight. A few extra\\nunits are added here.\"],\"comment\":\"\"}},{\"line\":\"brminim = 1|60 brdram\",\"info\":{\"headingsIndex\":[7,3],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\"],\"comment\":\"\"}},{\"line\":\"brscruple = 1|3 brdram\",\"info\":{\"headingsIndex\":[7,3],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\"],\"comment\":\"\"}},{\"line\":\"fluidscruple = brscruple\",\"info\":{\"headingsIndex\":[7,3],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\"],\"comment\":\"\"}},{\"line\":\"brdram = 1|8 brfloz\",\"info\":{\"headingsIndex\":[7,3],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\"],\"comment\":\"\"}},{\"line\":\"brfluidounce = 1|20 brpint\",\"info\":{\"headingsIndex\":[7,3],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\"],\"comment\":\"\"}},{\"line\":\"brfloz = brfluidounce\",\"info\":{\"headingsIndex\":[7,3],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\"],\"comment\":\"\"}},{\"line\":\"brgill = 1|4 brpint\",\"info\":{\"headingsIndex\":[7,3],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\"],\"comment\":\"\"}},{\"line\":\"brpint = 1|2 brquart\",\"info\":{\"headingsIndex\":[7,3],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\"],\"comment\":\"\"}},{\"line\":\"brquart = 1|4 brgallon\",\"info\":{\"headingsIndex\":[7,3],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\"],\"comment\":\"\"}},{\"line\":\"brgallon = 4.54609 l\",\"info\":{\"headingsIndex\":[7,3],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\"],\"comment\":\"The British Imperial gallon was\\ndefined in 1824 to be the volume of\\nwater which weighed 10 pounds at 62\\ndeg F with a pressure of 30 inHg.\\nIt was also defined as 277.274 in^3,\\nWhich is slightly in error.  In\\n1963 it was defined to be the volume\\noccupied by 10 pounds of distilled\\nwater of density 0.998859 g/ml weighed\\nin air of density 0.001217 g/ml\\nagainst weights of density 8.136 g/ml.\\nThis gives a value of approximately\\n4.5459645 liters, but the old liter\\nwas in force at this time.  In 1976\\nthe definition was changed to exactly\\n4.54609 liters using the new\\ndefinition of the liter (1 dm^3).\"}},{\"line\":\"brbarrel = 36 brgallon\",\"info\":{\"headingsIndex\":[7,3],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\"],\"comment\":\"Used for beer\"}},{\"line\":\"brbushel = 8 brgallon\",\"info\":{\"headingsIndex\":[7,3],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\"],\"comment\":\"\"}},{\"line\":\"brheapedbushel = 1.278 brbushel\",\"info\":{\"headingsIndex\":[7,3],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\"],\"comment\":\"\"}},{\"line\":\"brquarter = 8 brbushel\",\"info\":{\"headingsIndex\":[7,3],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\"],\"comment\":\"\"}},{\"line\":\"brchaldron = 36 brbushel\",\"info\":{\"headingsIndex\":[7,3],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\"],\"comment\":\"\"}},{\"line\":\"bag = 4 brbushel\",\"info\":{\"headingsIndex\":[7,3,1],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"bucket = 4 brgallon\",\"info\":{\"headingsIndex\":[7,3,1],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"kilderkin = 2 brfirkin\",\"info\":{\"headingsIndex\":[7,3,1],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"last = 40 brbushel\",\"info\":{\"headingsIndex\":[7,3,1],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"noggin = brgill\",\"info\":{\"headingsIndex\":[7,3,1],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"pottle = 0.5 brgallon\",\"info\":{\"headingsIndex\":[7,3,1],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"pin = 4.5 brgallon\",\"info\":{\"headingsIndex\":[7,3,1],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"puncheon = 72 brgallon\",\"info\":{\"headingsIndex\":[7,3,1],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"seam = 8 brbushel\",\"info\":{\"headingsIndex\":[7,3,1],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"coomb = 4 brbushel\",\"info\":{\"headingsIndex\":[7,3,1],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"boll = 6 brbushel\",\"info\":{\"headingsIndex\":[7,3,1],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"firlot = 1|4 boll\",\"info\":{\"headingsIndex\":[7,3,1],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"brfirkin = 9 brgallon\",\"info\":{\"headingsIndex\":[7,3,1],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"Used for ale and beer\"}},{\"line\":\"cran = 37.5 brgallon\",\"info\":{\"headingsIndex\":[7,3,1],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"measures herring, about 750 fish\"}},{\"line\":\"brwinehogshead = 52.5 brgallon\",\"info\":{\"headingsIndex\":[7,3,1],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"This value is approximately equal\\nto the old wine hogshead of 63\\nwine gallons.  This adjustment\\nis listed in the OED and in\\n\\\"The Weights and Measures of\\nEngland\\\" by R. D. Connor\"}},{\"line\":\"brhogshead = brwinehogshead\",\"info\":{\"headingsIndex\":[7,3,1],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"This value is approximately equal\\nto the old wine hogshead of 63\\nwine gallons.  This adjustment\\nis listed in the OED and in\\n\\\"The Weights and Measures of\\nEngland\\\" by R. D. Connor\"}},{\"line\":\"brbeerhogshead = 54 brgallon\",\"info\":{\"headingsIndex\":[7,3,1],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"brbeerbutt = 2 brbeerhogshead\",\"info\":{\"headingsIndex\":[7,3,1],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"registerton = 100 ft^3\",\"info\":{\"headingsIndex\":[7,3,1],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"Used for internal capacity of ships\"}},{\"line\":\"shippington = 40 ft^3\",\"info\":{\"headingsIndex\":[7,3,1],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"Used for ship's cargo freight or timber\"}},{\"line\":\"brshippington = 42 ft^3\",\"info\":{\"headingsIndex\":[7,3,1],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"freightton = shippington\",\"info\":{\"headingsIndex\":[7,3,1],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"Both register ton and shipping ton derive\\nfrom the \\\"tun cask\\\" of wine.\"}},{\"line\":\"displacementton = 35 ft^3\",\"info\":{\"headingsIndex\":[7,3,1],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"Approximate volume of a longton weight of\\nsea water.  Measures water displaced by\\nships.\"}},{\"line\":\"waterton = 224 brgallon\",\"info\":{\"headingsIndex\":[7,3,1],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"\"}},{\"line\":\"strike = 70.5 l\",\"info\":{\"headingsIndex\":[7,3,1],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"16th century unit, sometimes\\ndefined as .5, 2, or 4 bushels\\ndepending on the location.  It\\nprobably doesn't make a lot of\\nsense to define in terms of imperial\\nbushels.  Zupko gives a value of\\n2 Winchester grain bushels or about\\n70.5 liters.\"}},{\"line\":\"amber = 4 brbushel\",\"info\":{\"headingsIndex\":[7,3,1],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.1. Obscure British volume measures. These units are generally traditional\\nmeasures whose definitions have fluctuated over the years. Often they\\ndepended on the quantity being measured. They are given here in terms of\\nBritish Imperial measures. For example, the puncheon may have historically\\nbeen defined relative to the wine gallon or beer gallon or ale gallon\\nrather than the British Imperial gallon.\"],\"comment\":\"Used for dry and liquid capacity [18]\"}},{\"line\":\"imperialminim = brminim\",\"info\":{\"headingsIndex\":[7,3,2],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialscruple = brscruple\",\"info\":{\"headingsIndex\":[7,3,2],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialdram = brdram\",\"info\":{\"headingsIndex\":[7,3,2],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialfluidounce = brfluidounce\",\"info\":{\"headingsIndex\":[7,3,2],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialfloz = brfloz\",\"info\":{\"headingsIndex\":[7,3,2],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialgill = brgill\",\"info\":{\"headingsIndex\":[7,3,2],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialpint = brpint\",\"info\":{\"headingsIndex\":[7,3,2],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialquart = brquart\",\"info\":{\"headingsIndex\":[7,3,2],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialgallon = brgallon\",\"info\":{\"headingsIndex\":[7,3,2],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialbarrel = brbarrel\",\"info\":{\"headingsIndex\":[7,3,2],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialbushel = brbushel\",\"info\":{\"headingsIndex\":[7,3,2],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialheapedbushel = brheapedbushel\",\"info\":{\"headingsIndex\":[7,3,2],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialquarter = brquarter\",\"info\":{\"headingsIndex\":[7,3,2],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialchaldron = brchaldron\",\"info\":{\"headingsIndex\":[7,3,2],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialwinehogshead = brwinehogshead\",\"info\":{\"headingsIndex\":[7,3,2],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialhogshead = brhogshead\",\"info\":{\"headingsIndex\":[7,3,2],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialbeerhogshead = brbeerhogshead\",\"info\":{\"headingsIndex\":[7,3,2],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialbeerbutt = brbeerbutt\",\"info\":{\"headingsIndex\":[7,3,2],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"imperialfirkin = brfirkin\",\"info\":{\"headingsIndex\":[7,3,2],\"headingLevel\":3,\"headings\":[\"7. British\",\"7.3. British Imperial volume measures\",\"7.3.2. British volume measures with \\\"imperial\\\"\"],\"comment\":\"\"}},{\"line\":\"barleycorn = 1|3 UKinch\",\"info\":{\"headingsIndex\":[7,4],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.4. obscure British lengths\"],\"comment\":\"Given in Realm of Measure as the\\ndifference between successive shoe sizes\"}},{\"line\":\"nail = 1|16 UKyard\",\"info\":{\"headingsIndex\":[7,4],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.4. obscure British lengths\"],\"comment\":\"Originally the width of the thumbnail,\\nor 1|16 ft.  This took on the general\\nmeaning of 1|16 and settled on the\\nnail of a yard or 1|16 yards as its\\nfinal value.  [12]\"}},{\"line\":\"pole = 16.5 UKft\",\"info\":{\"headingsIndex\":[7,4],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.4. obscure British lengths\"],\"comment\":\"This was 15 Saxon feet, the Saxon\\nfoot (aka northern foot) being longer\"}},{\"line\":\"rope = 20 UKft\",\"info\":{\"headingsIndex\":[7,4],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.4. obscure British lengths\"],\"comment\":\"This was 15 Saxon feet, the Saxon\\nfoot (aka northern foot) being longer\"}},{\"line\":\"englishell = 45 UKinch\",\"info\":{\"headingsIndex\":[7,4],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.4. obscure British lengths\"],\"comment\":\"\"}},{\"line\":\"flemishell = 27 UKinch\",\"info\":{\"headingsIndex\":[7,4],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.4. obscure British lengths\"],\"comment\":\"\"}},{\"line\":\"ell = englishell\",\"info\":{\"headingsIndex\":[7,4],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.4. obscure British lengths\"],\"comment\":\"supposed to be measure from elbow to\\nfingertips\"}},{\"line\":\"span = 9 UKinch\",\"info\":{\"headingsIndex\":[7,4],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.4. obscure British lengths\"],\"comment\":\"supposed to be distance from thumb\\nto pinky with full hand extension\"}},{\"line\":\"goad = 4.5 UKft\",\"info\":{\"headingsIndex\":[7,4],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.4. obscure British lengths\"],\"comment\":\"used for cloth, possibly named after the\\nstick used for prodding animals.\"}},{\"line\":\"hide = 120 acre\",\"info\":{\"headingsIndex\":[7,5],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.5. misc obscure British units\"],\"comment\":\"English unit of land area dating to the 7th\\ncentury, originally the amount of land\\nthat a single plowman could cultivate,\\nwhich varied from 60-180 acres regionally.\\nStandardized at Normon conquest.\"}},{\"line\":\"virgate = 1|4 hide\",\"info\":{\"headingsIndex\":[7,5],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.5. misc obscure British units\"],\"comment\":\"\"}},{\"line\":\"nook = 1|2 virgate\",\"info\":{\"headingsIndex\":[7,5],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.5. misc obscure British units\"],\"comment\":\"\"}},{\"line\":\"rood = furlong rod\",\"info\":{\"headingsIndex\":[7,5],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.5. misc obscure British units\"],\"comment\":\"Area of a strip a rod by a furlong\"}},{\"line\":\"englishcarat = troyounce/151.5\",\"info\":{\"headingsIndex\":[7,5],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.5. misc obscure British units\"],\"comment\":\"Originally intended to be 4 grain\\nbut this value ended up being\\nused in the London diamond market\"}},{\"line\":\"mancus = 2 oz\",\"info\":{\"headingsIndex\":[7,5],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.5. misc obscure British units\"],\"comment\":\"\"}},{\"line\":\"mast = 2.5 lb\",\"info\":{\"headingsIndex\":[7,5],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.5. misc obscure British units\"],\"comment\":\"\"}},{\"line\":\"nailkeg = 100 lbs\",\"info\":{\"headingsIndex\":[7,5],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.5. misc obscure British units\"],\"comment\":\"\"}},{\"line\":\"basebox = 31360 in^2\",\"info\":{\"headingsIndex\":[7,5],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.5. misc obscure British units\"],\"comment\":\"Used in metal plating\"}},{\"line\":\"metre = meter\",\"info\":{\"headingsIndex\":[7,6],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.6. alternate spellings\"],\"comment\":\"\"}},{\"line\":\"gramme = gram\",\"info\":{\"headingsIndex\":[7,6],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.6. alternate spellings\"],\"comment\":\"\"}},{\"line\":\"litre = liter\",\"info\":{\"headingsIndex\":[7,6],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.6. alternate spellings\"],\"comment\":\"\"}},{\"line\":\"dioptre = diopter\",\"info\":{\"headingsIndex\":[7,6],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.6. alternate spellings\"],\"comment\":\"\"}},{\"line\":\"aluminium = aluminum\",\"info\":{\"headingsIndex\":[7,6],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.6. alternate spellings\"],\"comment\":\"\"}},{\"line\":\"sulphur = sulfur\",\"info\":{\"headingsIndex\":[7,6],\"headingLevel\":2,\"headings\":[\"7. British\",\"7.6. alternate spellings\"],\"comment\":\"\"}},{\"line\":\"geometricpace = 5 ft\",\"info\":{\"headingsIndex\":[8],\"headingLevel\":1,\"headings\":[\"8. Units derived the human body (may not be very accurate)\"],\"comment\":\"distance between points where the same\\nfoot hits the ground\"}},{\"line\":\"pace = 2.5 ft\",\"info\":{\"headingsIndex\":[8],\"headingLevel\":1,\"headings\":[\"8. Units derived the human body (may not be very accurate)\"],\"comment\":\"distance between points where alternate\\nfeet touch the ground\"}},{\"line\":\"USmilitarypace = 30 in\",\"info\":{\"headingsIndex\":[8],\"headingLevel\":1,\"headings\":[\"8. Units derived the human body (may not be very accurate)\"],\"comment\":\"United States official military pace\"}},{\"line\":\"USdoubletimepace = 36 in\",\"info\":{\"headingsIndex\":[8],\"headingLevel\":1,\"headings\":[\"8. Units derived the human body (may not be very accurate)\"],\"comment\":\"United States official doubletime pace\"}},{\"line\":\"fingerbreadth = 7|8 in\",\"info\":{\"headingsIndex\":[8],\"headingLevel\":1,\"headings\":[\"8. Units derived the human body (may not be very accurate)\"],\"comment\":\"The finger is defined as either the width\\nor length of the finger\"}},{\"line\":\"fingerlength = 4.5 in\",\"info\":{\"headingsIndex\":[8],\"headingLevel\":1,\"headings\":[\"8. Units derived the human body (may not be very accurate)\"],\"comment\":\"The finger is defined as either the width\\nor length of the finger\"}},{\"line\":\"finger = fingerbreadth\",\"info\":{\"headingsIndex\":[8],\"headingLevel\":1,\"headings\":[\"8. Units derived the human body (may not be very accurate)\"],\"comment\":\"The finger is defined as either the width\\nor length of the finger\"}},{\"line\":\"palmwidth = hand\",\"info\":{\"headingsIndex\":[8],\"headingLevel\":1,\"headings\":[\"8. Units derived the human body (may not be very accurate)\"],\"comment\":\"The palm is a unit defined as either the width\\nor the length of the hand\"}},{\"line\":\"palmlength = 8 in\",\"info\":{\"headingsIndex\":[8],\"headingLevel\":1,\"headings\":[\"8. Units derived the human body (may not be very accurate)\"],\"comment\":\"The palm is a unit defined as either the width\\nor the length of the hand\"}},{\"line\":\"hand = 4 inch\",\"info\":{\"headingsIndex\":[8],\"headingLevel\":1,\"headings\":[\"8. Units derived the human body (may not be very accurate)\"],\"comment\":\"width of hand\"}},{\"line\":\"shaftment = 6 inch\",\"info\":{\"headingsIndex\":[8],\"headingLevel\":1,\"headings\":[\"8. Units derived the human body (may not be very accurate)\"],\"comment\":\"Distance from tip of outstretched thumb to the\\nopposite side of the palm of the hand.  The\\nending -ment is from the old English word\\nfor hand. [18]\"}},{\"line\":\"smoot = 5 ft + 7 in\",\"info\":{\"headingsIndex\":[8],\"headingLevel\":1,\"headings\":[\"8. Units derived the human body (may not be very accurate)\"],\"comment\":\"Created as part of an MIT fraternity prank.\\nIn 1958 Oliver Smoot was used to measure\\nthe length of the Harvard Bridge, which was\\nmarked off in smooth lengths.  These\\nmarkings have been maintained on the bridge\\nsince then and repainted by subsequent\\nincoming fraternity members.  During a\\nbridge rennovation the new sidewalk was\\nscored every smooth rather than at the\\ncustomary 6 ft spacing.\"}},{\"line\":\"tbl = tablespoon\",\"info\":{\"headingsIndex\":[9,1],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.1. Common abbreviations\"],\"comment\":\"\"}},{\"line\":\"tbsp = tablespoon\",\"info\":{\"headingsIndex\":[9,1],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.1. Common abbreviations\"],\"comment\":\"\"}},{\"line\":\"tblsp = tablespoon\",\"info\":{\"headingsIndex\":[9,1],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.1. Common abbreviations\"],\"comment\":\"\"}},{\"line\":\"Tb = tablespoon\",\"info\":{\"headingsIndex\":[9,1],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.1. Common abbreviations\"],\"comment\":\"\"}},{\"line\":\"tsp = teaspoon\",\"info\":{\"headingsIndex\":[9,1],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.1. Common abbreviations\"],\"comment\":\"\"}},{\"line\":\"saltspoon = 1|4 tsp\",\"info\":{\"headingsIndex\":[9,1],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.1. Common abbreviations\"],\"comment\":\"\"}},{\"line\":\"uscup = 8 usfloz\",\"info\":{\"headingsIndex\":[9,2],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.2. US measures\"],\"comment\":\"\"}},{\"line\":\"ustablespoon = 1|16 uscup\",\"info\":{\"headingsIndex\":[9,2],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.2. US measures\"],\"comment\":\"\"}},{\"line\":\"usteaspoon = 1|3 ustablespoon\",\"info\":{\"headingsIndex\":[9,2],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.2. US measures\"],\"comment\":\"\"}},{\"line\":\"ustbl = ustablespoon\",\"info\":{\"headingsIndex\":[9,2],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.2. US measures\"],\"comment\":\"\"}},{\"line\":\"ustbsp = ustablespoon\",\"info\":{\"headingsIndex\":[9,2],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.2. US measures\"],\"comment\":\"\"}},{\"line\":\"ustblsp = ustablespoon\",\"info\":{\"headingsIndex\":[9,2],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.2. US measures\"],\"comment\":\"\"}},{\"line\":\"ustsp = usteaspoon\",\"info\":{\"headingsIndex\":[9,2],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.2. US measures\"],\"comment\":\"\"}},{\"line\":\"metriccup = 250 ml\",\"info\":{\"headingsIndex\":[9,2],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.2. US measures\"],\"comment\":\"\"}},{\"line\":\"stickbutter = 1|4 lb\",\"info\":{\"headingsIndex\":[9,2],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.2. US measures\"],\"comment\":\"Butter in the USA is sold in one\\npound packages that contain four\\nindividually wrapped pieces.  The\\npieces are marked into tablespoons,\\nmaking it possible to measure out\\nbutter by volume by slicing the\\nbutter.\"}},{\"line\":\"legalcup = 240 ml\",\"info\":{\"headingsIndex\":[9,2],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.2. US measures\"],\"comment\":\"The cup used on nutrition labeling\"}},{\"line\":\"legaltablespoon = 1|16 legalcup\",\"info\":{\"headingsIndex\":[9,2],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.2. US measures\"],\"comment\":\"\"}},{\"line\":\"legaltbsp = legaltablespoon\",\"info\":{\"headingsIndex\":[9,2],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.2. US measures\"],\"comment\":\"\"}},{\"line\":\"scoop = n => 32 usfloz / n \",\"info\":{\"headingsIndex\":[9,2,1],\"headingLevel\":3,\"headings\":[\"9. Cooking measures\",\"9.2. US measures\",\"9.2.1. Scoop size. Ice cream scoops in the US are marked with numbers\\nindicating the number of scoops requird to fill a US quart.\"],\"comment\":\"\"}},{\"line\":\"scoop^-1 = scoop => 32 usfloz / scoop\",\"info\":{\"headingsIndex\":[9,2,1],\"headingLevel\":3,\"headings\":[\"9. Cooking measures\",\"9.2. US measures\",\"9.2.1. Scoop size. Ice cream scoops in the US are marked with numbers\\nindicating the number of scoops requird to fill a US quart.\"],\"comment\":\"\"}},{\"line\":\"number1can = 10 usfloz\",\"info\":{\"headingsIndex\":[9,2,2],\"headingLevel\":3,\"headings\":[\"9. Cooking measures\",\"9.2. US measures\",\"9.2.2. US can sizes.\"],\"comment\":\"\"}},{\"line\":\"number2can = 19 usfloz\",\"info\":{\"headingsIndex\":[9,2,2],\"headingLevel\":3,\"headings\":[\"9. Cooking measures\",\"9.2. US measures\",\"9.2.2. US can sizes.\"],\"comment\":\"\"}},{\"line\":\"number2.5can = 3.5 uscups\",\"info\":{\"headingsIndex\":[9,2,2],\"headingLevel\":3,\"headings\":[\"9. Cooking measures\",\"9.2. US measures\",\"9.2.2. US can sizes.\"],\"comment\":\"\"}},{\"line\":\"number3can = 4 uscups\",\"info\":{\"headingsIndex\":[9,2,2],\"headingLevel\":3,\"headings\":[\"9. Cooking measures\",\"9.2. US measures\",\"9.2.2. US can sizes.\"],\"comment\":\"\"}},{\"line\":\"number5can = 7 uscups\",\"info\":{\"headingsIndex\":[9,2,2],\"headingLevel\":3,\"headings\":[\"9. Cooking measures\",\"9.2. US measures\",\"9.2.2. US can sizes.\"],\"comment\":\"\"}},{\"line\":\"number10can = 105 usfloz\",\"info\":{\"headingsIndex\":[9,2,2],\"headingLevel\":3,\"headings\":[\"9. Cooking measures\",\"9.2. US measures\",\"9.2.2. US can sizes.\"],\"comment\":\"\"}},{\"line\":\"brcup = 1|2 brpint\",\"info\":{\"headingsIndex\":[9,3],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.3. British measures\"],\"comment\":\"\"}},{\"line\":\"brteacup = 1|3 brpint\",\"info\":{\"headingsIndex\":[9,3],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.3. British measures\"],\"comment\":\"\"}},{\"line\":\"brtablespoon = 15 ml\",\"info\":{\"headingsIndex\":[9,3],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.3. British measures\"],\"comment\":\"Also 5|8 brfloz, approx 17.7 ml\"}},{\"line\":\"brteaspoon = 1|3 brtablespoon\",\"info\":{\"headingsIndex\":[9,3],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.3. British measures\"],\"comment\":\"Also 1|4 brtablespoon\"}},{\"line\":\"brdessertspoon = 2 brteaspoon\",\"info\":{\"headingsIndex\":[9,3],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.3. British measures\"],\"comment\":\"\"}},{\"line\":\"dessertspoon = brdessertspoon\",\"info\":{\"headingsIndex\":[9,3],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.3. British measures\"],\"comment\":\"\"}},{\"line\":\"dsp = dessertspoon\",\"info\":{\"headingsIndex\":[9,3],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.3. British measures\"],\"comment\":\"\"}},{\"line\":\"brtsp = brteaspoon\",\"info\":{\"headingsIndex\":[9,3],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.3. British measures\"],\"comment\":\"\"}},{\"line\":\"brtbl = brtablespoon\",\"info\":{\"headingsIndex\":[9,3],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.3. British measures\"],\"comment\":\"\"}},{\"line\":\"brtbsp = brtablespoon\",\"info\":{\"headingsIndex\":[9,3],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.3. British measures\"],\"comment\":\"\"}},{\"line\":\"brtblsp = brtablespoon\",\"info\":{\"headingsIndex\":[9,3],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.3. British measures\"],\"comment\":\"\"}},{\"line\":\"australiatablespoon = 20 ml\",\"info\":{\"headingsIndex\":[9,4],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.4. Australian\"],\"comment\":\"\"}},{\"line\":\"austbl = australiatablespoon\",\"info\":{\"headingsIndex\":[9,4],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.4. Australian\"],\"comment\":\"\"}},{\"line\":\"austbsp = australiatablespoon\",\"info\":{\"headingsIndex\":[9,4],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.4. Australian\"],\"comment\":\"\"}},{\"line\":\"austblsp = australiatablespoon\",\"info\":{\"headingsIndex\":[9,4],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.4. Australian\"],\"comment\":\"\"}},{\"line\":\"australiateaspoon = 1|4 australiatablespoon\",\"info\":{\"headingsIndex\":[9,4],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.4. Australian\"],\"comment\":\"\"}},{\"line\":\"austsp = australiateaspoon\",\"info\":{\"headingsIndex\":[9,4],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.4. Australian\"],\"comment\":\"\"}},{\"line\":\"etto = 100 g\",\"info\":{\"headingsIndex\":[9,5],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.5. Italian\"],\"comment\":\"Used for buying items like meat and\\ncheese.\"}},{\"line\":\"etti = etto\",\"info\":{\"headingsIndex\":[9,5],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.5. Italian\"],\"comment\":\"Used for buying items like meat and\\ncheese.\"}},{\"line\":\"catty = 0.5 kg\",\"info\":{\"headingsIndex\":[9,6],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.6. Chinese\"],\"comment\":\"\"}},{\"line\":\"oldcatty = 4|3 lbs\",\"info\":{\"headingsIndex\":[9,6],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.6. Chinese\"],\"comment\":\"Before metric conversion.\"}},{\"line\":\"tael = 1|16 oldcatty\",\"info\":{\"headingsIndex\":[9,6],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.6. Chinese\"],\"comment\":\"Should the tael be defined both ways?\"}},{\"line\":\"mace = 0.1 tael\",\"info\":{\"headingsIndex\":[9,6],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.6. Chinese\"],\"comment\":\"\"}},{\"line\":\"oldpicul = 100 oldcatty\",\"info\":{\"headingsIndex\":[9,6],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.6. Chinese\"],\"comment\":\"\"}},{\"line\":\"picul = 100 catty\",\"info\":{\"headingsIndex\":[9,6],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.6. Chinese\"],\"comment\":\"Chinese usage\"}},{\"line\":\"seer = 14400 grain\",\"info\":{\"headingsIndex\":[9,7],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.7. Indian\"],\"comment\":\"British Colonial standard\"}},{\"line\":\"ser = seer\",\"info\":{\"headingsIndex\":[9,7],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.7. Indian\"],\"comment\":\"British Colonial standard\"}},{\"line\":\"maund = 40 seer\",\"info\":{\"headingsIndex\":[9,7],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.7. Indian\"],\"comment\":\"\"}},{\"line\":\"pakistanseer = 1 kg\",\"info\":{\"headingsIndex\":[9,7],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.7. Indian\"],\"comment\":\"\"}},{\"line\":\"pakistanmaund = 40 pakistanseer\",\"info\":{\"headingsIndex\":[9,7],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.7. Indian\"],\"comment\":\"\"}},{\"line\":\"chittak = 1|16 seer\",\"info\":{\"headingsIndex\":[9,7],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.7. Indian\"],\"comment\":\"\"}},{\"line\":\"tola = 1|5 chittak\",\"info\":{\"headingsIndex\":[9,7],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.7. Indian\"],\"comment\":\"\"}},{\"line\":\"ollock = 1|4 liter\",\"info\":{\"headingsIndex\":[9,7],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.7. Indian\"],\"comment\":\"Is this right?\"}},{\"line\":\"japancup = 200 ml\",\"info\":{\"headingsIndex\":[9,8],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.8. Japanese\"],\"comment\":\"\"}},{\"line\":\"butter = 8 oz/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"butter_clarified = 6.8 oz/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"cocoa_butter = 9 oz/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"shortening = 6.75 oz/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"vegetable shortening\"}},{\"line\":\"oil = 7.5 oz/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"cakeflour_sifted = 3.5 oz/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"The density of flour depends on the\\nmeasuring method.  \\\"Scooped\\\",  or\\n\\\"dip and sweep\\\" refers to dipping a\\nmeasure into a bin, and then sweeping\\nthe excess off the top.  \\\"Spooned\\\"\\nmeans to lightly spoon into a measure\\nand then sweep the top.  Sifted means\\nsifting the flour directly into a\\nmeasure and then sweeping the top.\"}},{\"line\":\"cakeflour_spooned = 4 oz/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"The density of flour depends on the\\nmeasuring method.  \\\"Scooped\\\",  or\\n\\\"dip and sweep\\\" refers to dipping a\\nmeasure into a bin, and then sweeping\\nthe excess off the top.  \\\"Spooned\\\"\\nmeans to lightly spoon into a measure\\nand then sweep the top.  Sifted means\\nsifting the flour directly into a\\nmeasure and then sweeping the top.\"}},{\"line\":\"cakeflour_scooped = 4.5 oz/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"The density of flour depends on the\\nmeasuring method.  \\\"Scooped\\\",  or\\n\\\"dip and sweep\\\" refers to dipping a\\nmeasure into a bin, and then sweeping\\nthe excess off the top.  \\\"Spooned\\\"\\nmeans to lightly spoon into a measure\\nand then sweep the top.  Sifted means\\nsifting the flour directly into a\\nmeasure and then sweeping the top.\"}},{\"line\":\"flour_sifted = 4 oz/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"The density of flour depends on the\\nmeasuring method.  \\\"Scooped\\\",  or\\n\\\"dip and sweep\\\" refers to dipping a\\nmeasure into a bin, and then sweeping\\nthe excess off the top.  \\\"Spooned\\\"\\nmeans to lightly spoon into a measure\\nand then sweep the top.  Sifted means\\nsifting the flour directly into a\\nmeasure and then sweeping the top.\"}},{\"line\":\"flour_spooned = 4.25 oz/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"The density of flour depends on the\\nmeasuring method.  \\\"Scooped\\\",  or\\n\\\"dip and sweep\\\" refers to dipping a\\nmeasure into a bin, and then sweeping\\nthe excess off the top.  \\\"Spooned\\\"\\nmeans to lightly spoon into a measure\\nand then sweep the top.  Sifted means\\nsifting the flour directly into a\\nmeasure and then sweeping the top.\"}},{\"line\":\"flour_scooped = 5 oz/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"The density of flour depends on the\\nmeasuring method.  \\\"Scooped\\\",  or\\n\\\"dip and sweep\\\" refers to dipping a\\nmeasure into a bin, and then sweeping\\nthe excess off the top.  \\\"Spooned\\\"\\nmeans to lightly spoon into a measure\\nand then sweep the top.  Sifted means\\nsifting the flour directly into a\\nmeasure and then sweeping the top.\"}},{\"line\":\"breadflour_sifted = 4.25 oz/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"The density of flour depends on the\\nmeasuring method.  \\\"Scooped\\\",  or\\n\\\"dip and sweep\\\" refers to dipping a\\nmeasure into a bin, and then sweeping\\nthe excess off the top.  \\\"Spooned\\\"\\nmeans to lightly spoon into a measure\\nand then sweep the top.  Sifted means\\nsifting the flour directly into a\\nmeasure and then sweeping the top.\"}},{\"line\":\"breadflour_spooned = 4.5 oz/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"The density of flour depends on the\\nmeasuring method.  \\\"Scooped\\\",  or\\n\\\"dip and sweep\\\" refers to dipping a\\nmeasure into a bin, and then sweeping\\nthe excess off the top.  \\\"Spooned\\\"\\nmeans to lightly spoon into a measure\\nand then sweep the top.  Sifted means\\nsifting the flour directly into a\\nmeasure and then sweeping the top.\"}},{\"line\":\"breadflour_scooped = 5.5 oz/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"The density of flour depends on the\\nmeasuring method.  \\\"Scooped\\\",  or\\n\\\"dip and sweep\\\" refers to dipping a\\nmeasure into a bin, and then sweeping\\nthe excess off the top.  \\\"Spooned\\\"\\nmeans to lightly spoon into a measure\\nand then sweep the top.  Sifted means\\nsifting the flour directly into a\\nmeasure and then sweeping the top.\"}},{\"line\":\"cornstarch = 120 grams/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"dutchcocoa_sifted = 75 g/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"These are for Dutch processed cocoa\"}},{\"line\":\"dutchcocoa_spooned = 92 g/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"These are for Dutch processed cocoa\"}},{\"line\":\"dutchcocoa_scooped = 95 g/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"These are for Dutch processed cocoa\"}},{\"line\":\"cocoa_sifted = 75 g/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"These are for nonalkalized cocoa\"}},{\"line\":\"cocoa_spooned = 82 g/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"These are for nonalkalized cocoa\"}},{\"line\":\"cocoa_scooped = 95 g/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"These are for nonalkalized cocoa\"}},{\"line\":\"heavycream = 232 g/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"milk = 242 g/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"sourcream = 242 g/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"molasses = 11.25 oz/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"cornsyrup = 11.5 oz/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"honey = 11.75 oz/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"sugar = 200 g/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"powdered_sugar = 4 oz/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"brownsugar_light = 217 g/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"packed\"}},{\"line\":\"brownsugar_dark = 239 g/uscup\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"baking_powder = 4.6 grams / ustsp\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"salt = 6 g / ustsp\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"\"}},{\"line\":\"koshersalt = 2.8 g / ustsp\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"Diamond Crystal kosher salt\"}},{\"line\":\"koshersalt_morton = 4.8 g / ustsp\",\"info\":{\"headingsIndex\":[9,9],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.9. densities of cooking ingredients from The Cake Bible by Rose Levy Beranbaum\\nso you can convert '2 cups sugar' to grams, for example, or in the other\\ndirection grams could be converted to 'cup flour_scooped'.\"],\"comment\":\"Morton kosher salt\\nValues are from the nutrition info\\non the packages\"}},{\"line\":\"egg = 50 grams\",\"info\":{\"headingsIndex\":[9,10],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.10. Egg weights and volumes for a USA large egg\"],\"comment\":\"without shell\"}},{\"line\":\"eggwhite = 30 grams\",\"info\":{\"headingsIndex\":[9,10],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.10. Egg weights and volumes for a USA large egg\"],\"comment\":\"\"}},{\"line\":\"eggyolk = 18.6 grams\",\"info\":{\"headingsIndex\":[9,10],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.10. Egg weights and volumes for a USA large egg\"],\"comment\":\"\"}},{\"line\":\"eggvolume = 3 ustablespoons + 1|2 ustsp\",\"info\":{\"headingsIndex\":[9,10],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.10. Egg weights and volumes for a USA large egg\"],\"comment\":\"\"}},{\"line\":\"eggwhitevolume = 2 ustablespoons\",\"info\":{\"headingsIndex\":[9,10],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.10. Egg weights and volumes for a USA large egg\"],\"comment\":\"\"}},{\"line\":\"eggyolkvolume = 3.5 ustsp\",\"info\":{\"headingsIndex\":[9,10],\"headingLevel\":2,\"headings\":[\"9. Cooking measures\",\"9.10. Egg weights and volumes for a USA large egg\"],\"comment\":\"\"}},{\"line\":\"sugar_bpe = T => brix(~sugar_conc_bpe(T))\",\"info\":{\"headingsIndex\":[9,11,1,1],\"headingLevel\":4,\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.1. Density of a sugar syrup is frequently measured in candy making procedures.\\nIn the USA the boiling point of the syrup is measured. Some recipes instead\\nspecify the density using degrees Baume. Conversion between degrees Baume\\nand the boiling point measure has proved elusive. This table appeared in one\\ntext, and provides a fragmentary relationship to the concentration.\\n\\ntemp(C) conc (%)\\n100 30\\n101 40\\n102 50\\n103 60\\n106 70\\n112 80\\n123 90\\n140 95\\n151 97\\n160 98.2\\n166 99.5\\n171 99.6\\n\\nThe best source identified to date came from \\\"Boiling point elevation of\\ntechnical sugarcane solutions and its use in automatic pan boiling\\\" by\\nMichael Saska. International Sugar Journal, 2002, 104, 1247, pp 500-507.\\n\\nBut I'm using equation (3) which is credited to Starzak and Peacock,\\n\\\"Water activity coefficient in aqueous solutions of sucrose--A comprehensive\\ndata analyzis. Zuckerindustrie, 122, 380-387. (I couldn't find this\\ndocument.)\\n\\nNote that the range of validity is uncertain, but answers are in agreement\\nwith the above table all the way to 99.6.\\n\\nThe original equation has a parameter for the boiling point of water, which\\nof course varies with altitude. It also includes various other model\\nparameters. The input is the molar concentration of sucrose in the solution,\\n(moles sucrose) / (total moles).\\n\\nBsp 3797.06 degC\\nCsp 226.28 degC\\nQQ -17638 J/mol\\nasp -1.0038\\nbsp -0.24653\\ntbw 100 degC  boiling point of water\\nsugar_bpe_orig(x) ((1-QQ/R Bsp * x^2 (1+asp x + bsp x^2) (tbw + Csp) \\\\\\n/(tbw+stdtemp)) / (1+(tbw + Csp)/Bsp *ln(1-x))-1) * (tbw + Csp)\\n\\nTo convert mass concentration (brix) to molar concentration\\n\\nsc(x) (x / 342.3) / (( x/342.3) + (100-x)/18.02); \\\\\\n100 sc 342.3|18.02 / (sc (342.3|18.02-1)+1)\\n\\nHere is a simplfied version of this equation where the temperature of boiling\\nwater has been fixed at 100 degrees Celcius and the argument is now the\\nconcentration (brix).\\n\\nsugar_bpe(x) ((1+ 0.48851085 * sc(x)^2 (1+ -1.0038 sc(x) + -0.24653 sc(x)^2)) \\\\\\n/ (1+0.08592964 ln(1-sc(x)))-1) 326.28 K\\n\\n\\nThe formula is not invertible, so to implement it in units we unfortunately\\nmust turn it into a table.\",\"9.11.1.1. Using the brix table we can use this to produce a mapping from boiling point\\nto density which makes all of the units interconvertible. Because the brix\\ntable stops at 95 this approach works up to a boiling point elevation of 39 K\\nor a boiling point of 139 C / 282 F, which is the \\\"soft crack\\\" stage in candy\\nmaking. The \\\"hard crack\\\" stage continues up to 310 F.\"],\"comment\":\"Boiling point elevation\"}},{\"line\":\"sugar_bpe^-1 = sugar_bpe => sugar_conc_bpe(~brix(sugar_bpe))\",\"info\":{\"headingsIndex\":[9,11,1,1],\"headingLevel\":4,\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.1. Density of a sugar syrup is frequently measured in candy making procedures.\\nIn the USA the boiling point of the syrup is measured. Some recipes instead\\nspecify the density using degrees Baume. Conversion between degrees Baume\\nand the boiling point measure has proved elusive. This table appeared in one\\ntext, and provides a fragmentary relationship to the concentration.\\n\\ntemp(C) conc (%)\\n100 30\\n101 40\\n102 50\\n103 60\\n106 70\\n112 80\\n123 90\\n140 95\\n151 97\\n160 98.2\\n166 99.5\\n171 99.6\\n\\nThe best source identified to date came from \\\"Boiling point elevation of\\ntechnical sugarcane solutions and its use in automatic pan boiling\\\" by\\nMichael Saska. International Sugar Journal, 2002, 104, 1247, pp 500-507.\\n\\nBut I'm using equation (3) which is credited to Starzak and Peacock,\\n\\\"Water activity coefficient in aqueous solutions of sucrose--A comprehensive\\ndata analyzis. Zuckerindustrie, 122, 380-387. (I couldn't find this\\ndocument.)\\n\\nNote that the range of validity is uncertain, but answers are in agreement\\nwith the above table all the way to 99.6.\\n\\nThe original equation has a parameter for the boiling point of water, which\\nof course varies with altitude. It also includes various other model\\nparameters. The input is the molar concentration of sucrose in the solution,\\n(moles sucrose) / (total moles).\\n\\nBsp 3797.06 degC\\nCsp 226.28 degC\\nQQ -17638 J/mol\\nasp -1.0038\\nbsp -0.24653\\ntbw 100 degC  boiling point of water\\nsugar_bpe_orig(x) ((1-QQ/R Bsp * x^2 (1+asp x + bsp x^2) (tbw + Csp) \\\\\\n/(tbw+stdtemp)) / (1+(tbw + Csp)/Bsp *ln(1-x))-1) * (tbw + Csp)\\n\\nTo convert mass concentration (brix) to molar concentration\\n\\nsc(x) (x / 342.3) / (( x/342.3) + (100-x)/18.02); \\\\\\n100 sc 342.3|18.02 / (sc (342.3|18.02-1)+1)\\n\\nHere is a simplfied version of this equation where the temperature of boiling\\nwater has been fixed at 100 degrees Celcius and the argument is now the\\nconcentration (brix).\\n\\nsugar_bpe(x) ((1+ 0.48851085 * sc(x)^2 (1+ -1.0038 sc(x) + -0.24653 sc(x)^2)) \\\\\\n/ (1+0.08592964 ln(1-sc(x)))-1) 326.28 K\\n\\n\\nThe formula is not invertible, so to implement it in units we unfortunately\\nmust turn it into a table.\",\"9.11.1.1. Using the brix table we can use this to produce a mapping from boiling point\\nto density which makes all of the units interconvertible. Because the brix\\ntable stops at 95 this approach works up to a boiling point elevation of 39 K\\nor a boiling point of 139 C / 282 F, which is the \\\"soft crack\\\" stage in candy\\nmaking. The \\\"hard crack\\\" stage continues up to 310 F.\"],\"comment\":\"Boiling point elevation\"}},{\"line\":\"sugar_bp = T => brix(~sugar_conc_bpe(T-tempC(100))) \",\"info\":{\"headingsIndex\":[9,11,1,1],\"headingLevel\":4,\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.1. Density of a sugar syrup is frequently measured in candy making procedures.\\nIn the USA the boiling point of the syrup is measured. Some recipes instead\\nspecify the density using degrees Baume. Conversion between degrees Baume\\nand the boiling point measure has proved elusive. This table appeared in one\\ntext, and provides a fragmentary relationship to the concentration.\\n\\ntemp(C) conc (%)\\n100 30\\n101 40\\n102 50\\n103 60\\n106 70\\n112 80\\n123 90\\n140 95\\n151 97\\n160 98.2\\n166 99.5\\n171 99.6\\n\\nThe best source identified to date came from \\\"Boiling point elevation of\\ntechnical sugarcane solutions and its use in automatic pan boiling\\\" by\\nMichael Saska. International Sugar Journal, 2002, 104, 1247, pp 500-507.\\n\\nBut I'm using equation (3) which is credited to Starzak and Peacock,\\n\\\"Water activity coefficient in aqueous solutions of sucrose--A comprehensive\\ndata analyzis. Zuckerindustrie, 122, 380-387. (I couldn't find this\\ndocument.)\\n\\nNote that the range of validity is uncertain, but answers are in agreement\\nwith the above table all the way to 99.6.\\n\\nThe original equation has a parameter for the boiling point of water, which\\nof course varies with altitude. It also includes various other model\\nparameters. The input is the molar concentration of sucrose in the solution,\\n(moles sucrose) / (total moles).\\n\\nBsp 3797.06 degC\\nCsp 226.28 degC\\nQQ -17638 J/mol\\nasp -1.0038\\nbsp -0.24653\\ntbw 100 degC  boiling point of water\\nsugar_bpe_orig(x) ((1-QQ/R Bsp * x^2 (1+asp x + bsp x^2) (tbw + Csp) \\\\\\n/(tbw+stdtemp)) / (1+(tbw + Csp)/Bsp *ln(1-x))-1) * (tbw + Csp)\\n\\nTo convert mass concentration (brix) to molar concentration\\n\\nsc(x) (x / 342.3) / (( x/342.3) + (100-x)/18.02); \\\\\\n100 sc 342.3|18.02 / (sc (342.3|18.02-1)+1)\\n\\nHere is a simplfied version of this equation where the temperature of boiling\\nwater has been fixed at 100 degrees Celcius and the argument is now the\\nconcentration (brix).\\n\\nsugar_bpe(x) ((1+ 0.48851085 * sc(x)^2 (1+ -1.0038 sc(x) + -0.24653 sc(x)^2)) \\\\\\n/ (1+0.08592964 ln(1-sc(x)))-1) 326.28 K\\n\\n\\nThe formula is not invertible, so to implement it in units we unfortunately\\nmust turn it into a table.\",\"9.11.1.1. Using the brix table we can use this to produce a mapping from boiling point\\nto density which makes all of the units interconvertible. Because the brix\\ntable stops at 95 this approach works up to a boiling point elevation of 39 K\\nor a boiling point of 139 C / 282 F, which is the \\\"soft crack\\\" stage in candy\\nmaking. The \\\"hard crack\\\" stage continues up to 310 F.\"],\"comment\":\"Absolute boiling point (produces an absolute temperature)\"}},{\"line\":\"sugar_bp^-1 = sugar_bp => sugar_conc_bpe(~brix(sugar_bp))+tempC(100)\",\"info\":{\"headingsIndex\":[9,11,1,1],\"headingLevel\":4,\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.1. Density of a sugar syrup is frequently measured in candy making procedures.\\nIn the USA the boiling point of the syrup is measured. Some recipes instead\\nspecify the density using degrees Baume. Conversion between degrees Baume\\nand the boiling point measure has proved elusive. This table appeared in one\\ntext, and provides a fragmentary relationship to the concentration.\\n\\ntemp(C) conc (%)\\n100 30\\n101 40\\n102 50\\n103 60\\n106 70\\n112 80\\n123 90\\n140 95\\n151 97\\n160 98.2\\n166 99.5\\n171 99.6\\n\\nThe best source identified to date came from \\\"Boiling point elevation of\\ntechnical sugarcane solutions and its use in automatic pan boiling\\\" by\\nMichael Saska. International Sugar Journal, 2002, 104, 1247, pp 500-507.\\n\\nBut I'm using equation (3) which is credited to Starzak and Peacock,\\n\\\"Water activity coefficient in aqueous solutions of sucrose--A comprehensive\\ndata analyzis. Zuckerindustrie, 122, 380-387. (I couldn't find this\\ndocument.)\\n\\nNote that the range of validity is uncertain, but answers are in agreement\\nwith the above table all the way to 99.6.\\n\\nThe original equation has a parameter for the boiling point of water, which\\nof course varies with altitude. It also includes various other model\\nparameters. The input is the molar concentration of sucrose in the solution,\\n(moles sucrose) / (total moles).\\n\\nBsp 3797.06 degC\\nCsp 226.28 degC\\nQQ -17638 J/mol\\nasp -1.0038\\nbsp -0.24653\\ntbw 100 degC  boiling point of water\\nsugar_bpe_orig(x) ((1-QQ/R Bsp * x^2 (1+asp x + bsp x^2) (tbw + Csp) \\\\\\n/(tbw+stdtemp)) / (1+(tbw + Csp)/Bsp *ln(1-x))-1) * (tbw + Csp)\\n\\nTo convert mass concentration (brix) to molar concentration\\n\\nsc(x) (x / 342.3) / (( x/342.3) + (100-x)/18.02); \\\\\\n100 sc 342.3|18.02 / (sc (342.3|18.02-1)+1)\\n\\nHere is a simplfied version of this equation where the temperature of boiling\\nwater has been fixed at 100 degrees Celcius and the argument is now the\\nconcentration (brix).\\n\\nsugar_bpe(x) ((1+ 0.48851085 * sc(x)^2 (1+ -1.0038 sc(x) + -0.24653 sc(x)^2)) \\\\\\n/ (1+0.08592964 ln(1-sc(x)))-1) 326.28 K\\n\\n\\nThe formula is not invertible, so to implement it in units we unfortunately\\nmust turn it into a table.\",\"9.11.1.1. Using the brix table we can use this to produce a mapping from boiling point\\nto density which makes all of the units interconvertible. Because the brix\\ntable stops at 95 this approach works up to a boiling point elevation of 39 K\\nor a boiling point of 139 C / 282 F, which is the \\\"soft crack\\\" stage in candy\\nmaking. The \\\"hard crack\\\" stage continues up to 310 F.\"],\"comment\":\"Absolute boiling point (produces an absolute temperature)\"}},{\"line\":\"sugar_bpF = T => brix(~sugar_conc_bpe(tempF(T)+-tempC(100))) \",\"info\":{\"headingsIndex\":[9,11,1,1],\"headingLevel\":4,\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.1. Density of a sugar syrup is frequently measured in candy making procedures.\\nIn the USA the boiling point of the syrup is measured. Some recipes instead\\nspecify the density using degrees Baume. Conversion between degrees Baume\\nand the boiling point measure has proved elusive. This table appeared in one\\ntext, and provides a fragmentary relationship to the concentration.\\n\\ntemp(C) conc (%)\\n100 30\\n101 40\\n102 50\\n103 60\\n106 70\\n112 80\\n123 90\\n140 95\\n151 97\\n160 98.2\\n166 99.5\\n171 99.6\\n\\nThe best source identified to date came from \\\"Boiling point elevation of\\ntechnical sugarcane solutions and its use in automatic pan boiling\\\" by\\nMichael Saska. International Sugar Journal, 2002, 104, 1247, pp 500-507.\\n\\nBut I'm using equation (3) which is credited to Starzak and Peacock,\\n\\\"Water activity coefficient in aqueous solutions of sucrose--A comprehensive\\ndata analyzis. Zuckerindustrie, 122, 380-387. (I couldn't find this\\ndocument.)\\n\\nNote that the range of validity is uncertain, but answers are in agreement\\nwith the above table all the way to 99.6.\\n\\nThe original equation has a parameter for the boiling point of water, which\\nof course varies with altitude. It also includes various other model\\nparameters. The input is the molar concentration of sucrose in the solution,\\n(moles sucrose) / (total moles).\\n\\nBsp 3797.06 degC\\nCsp 226.28 degC\\nQQ -17638 J/mol\\nasp -1.0038\\nbsp -0.24653\\ntbw 100 degC  boiling point of water\\nsugar_bpe_orig(x) ((1-QQ/R Bsp * x^2 (1+asp x + bsp x^2) (tbw + Csp) \\\\\\n/(tbw+stdtemp)) / (1+(tbw + Csp)/Bsp *ln(1-x))-1) * (tbw + Csp)\\n\\nTo convert mass concentration (brix) to molar concentration\\n\\nsc(x) (x / 342.3) / (( x/342.3) + (100-x)/18.02); \\\\\\n100 sc 342.3|18.02 / (sc (342.3|18.02-1)+1)\\n\\nHere is a simplfied version of this equation where the temperature of boiling\\nwater has been fixed at 100 degrees Celcius and the argument is now the\\nconcentration (brix).\\n\\nsugar_bpe(x) ((1+ 0.48851085 * sc(x)^2 (1+ -1.0038 sc(x) + -0.24653 sc(x)^2)) \\\\\\n/ (1+0.08592964 ln(1-sc(x)))-1) 326.28 K\\n\\n\\nThe formula is not invertible, so to implement it in units we unfortunately\\nmust turn it into a table.\",\"9.11.1.1. Using the brix table we can use this to produce a mapping from boiling point\\nto density which makes all of the units interconvertible. Because the brix\\ntable stops at 95 this approach works up to a boiling point elevation of 39 K\\nor a boiling point of 139 C / 282 F, which is the \\\"soft crack\\\" stage in candy\\nmaking. The \\\"hard crack\\\" stage continues up to 310 F.\"],\"comment\":\"In practice dealing with the absolute temperature is annoying because it is\\nnot possible to convert to a nested function, so you're stuck retyping the\\nabsolute temperature in Kelvins to convert to celsius or Fahrenheit.  To\\nprevent this we supply definitions that build in the temperature conversion\\nand produce results in the Fahrenheit and Celcius scales.  So using these\\nmeasures, to convert 46 degrees Baume to a Fahrenheit boiling point:\\n\\nYou have: baume(45)\\nYou want: sugar_bpF\\n239.05647\"}},{\"line\":\"sugar_bpF^-1 = sugar_bpF => ~tempF(sugar_conc_bpe(~brix(sugar_bpF))+tempC(100))\",\"info\":{\"headingsIndex\":[9,11,1,1],\"headingLevel\":4,\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.1. Density of a sugar syrup is frequently measured in candy making procedures.\\nIn the USA the boiling point of the syrup is measured. Some recipes instead\\nspecify the density using degrees Baume. Conversion between degrees Baume\\nand the boiling point measure has proved elusive. This table appeared in one\\ntext, and provides a fragmentary relationship to the concentration.\\n\\ntemp(C) conc (%)\\n100 30\\n101 40\\n102 50\\n103 60\\n106 70\\n112 80\\n123 90\\n140 95\\n151 97\\n160 98.2\\n166 99.5\\n171 99.6\\n\\nThe best source identified to date came from \\\"Boiling point elevation of\\ntechnical sugarcane solutions and its use in automatic pan boiling\\\" by\\nMichael Saska. International Sugar Journal, 2002, 104, 1247, pp 500-507.\\n\\nBut I'm using equation (3) which is credited to Starzak and Peacock,\\n\\\"Water activity coefficient in aqueous solutions of sucrose--A comprehensive\\ndata analyzis. Zuckerindustrie, 122, 380-387. (I couldn't find this\\ndocument.)\\n\\nNote that the range of validity is uncertain, but answers are in agreement\\nwith the above table all the way to 99.6.\\n\\nThe original equation has a parameter for the boiling point of water, which\\nof course varies with altitude. It also includes various other model\\nparameters. The input is the molar concentration of sucrose in the solution,\\n(moles sucrose) / (total moles).\\n\\nBsp 3797.06 degC\\nCsp 226.28 degC\\nQQ -17638 J/mol\\nasp -1.0038\\nbsp -0.24653\\ntbw 100 degC  boiling point of water\\nsugar_bpe_orig(x) ((1-QQ/R Bsp * x^2 (1+asp x + bsp x^2) (tbw + Csp) \\\\\\n/(tbw+stdtemp)) / (1+(tbw + Csp)/Bsp *ln(1-x))-1) * (tbw + Csp)\\n\\nTo convert mass concentration (brix) to molar concentration\\n\\nsc(x) (x / 342.3) / (( x/342.3) + (100-x)/18.02); \\\\\\n100 sc 342.3|18.02 / (sc (342.3|18.02-1)+1)\\n\\nHere is a simplfied version of this equation where the temperature of boiling\\nwater has been fixed at 100 degrees Celcius and the argument is now the\\nconcentration (brix).\\n\\nsugar_bpe(x) ((1+ 0.48851085 * sc(x)^2 (1+ -1.0038 sc(x) + -0.24653 sc(x)^2)) \\\\\\n/ (1+0.08592964 ln(1-sc(x)))-1) 326.28 K\\n\\n\\nThe formula is not invertible, so to implement it in units we unfortunately\\nmust turn it into a table.\",\"9.11.1.1. Using the brix table we can use this to produce a mapping from boiling point\\nto density which makes all of the units interconvertible. Because the brix\\ntable stops at 95 this approach works up to a boiling point elevation of 39 K\\nor a boiling point of 139 C / 282 F, which is the \\\"soft crack\\\" stage in candy\\nmaking. The \\\"hard crack\\\" stage continues up to 310 F.\"],\"comment\":\"In practice dealing with the absolute temperature is annoying because it is\\nnot possible to convert to a nested function, so you're stuck retyping the\\nabsolute temperature in Kelvins to convert to celsius or Fahrenheit.  To\\nprevent this we supply definitions that build in the temperature conversion\\nand produce results in the Fahrenheit and Celcius scales.  So using these\\nmeasures, to convert 46 degrees Baume to a Fahrenheit boiling point:\\n\\nYou have: baume(45)\\nYou want: sugar_bpF\\n239.05647\"}},{\"line\":\"sugar_bpC = T => brix(~sugar_conc_bpe(tempC(T)+-tempC(100))) \",\"info\":{\"headingsIndex\":[9,11,1,1],\"headingLevel\":4,\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.1. Density of a sugar syrup is frequently measured in candy making procedures.\\nIn the USA the boiling point of the syrup is measured. Some recipes instead\\nspecify the density using degrees Baume. Conversion between degrees Baume\\nand the boiling point measure has proved elusive. This table appeared in one\\ntext, and provides a fragmentary relationship to the concentration.\\n\\ntemp(C) conc (%)\\n100 30\\n101 40\\n102 50\\n103 60\\n106 70\\n112 80\\n123 90\\n140 95\\n151 97\\n160 98.2\\n166 99.5\\n171 99.6\\n\\nThe best source identified to date came from \\\"Boiling point elevation of\\ntechnical sugarcane solutions and its use in automatic pan boiling\\\" by\\nMichael Saska. International Sugar Journal, 2002, 104, 1247, pp 500-507.\\n\\nBut I'm using equation (3) which is credited to Starzak and Peacock,\\n\\\"Water activity coefficient in aqueous solutions of sucrose--A comprehensive\\ndata analyzis. Zuckerindustrie, 122, 380-387. (I couldn't find this\\ndocument.)\\n\\nNote that the range of validity is uncertain, but answers are in agreement\\nwith the above table all the way to 99.6.\\n\\nThe original equation has a parameter for the boiling point of water, which\\nof course varies with altitude. It also includes various other model\\nparameters. The input is the molar concentration of sucrose in the solution,\\n(moles sucrose) / (total moles).\\n\\nBsp 3797.06 degC\\nCsp 226.28 degC\\nQQ -17638 J/mol\\nasp -1.0038\\nbsp -0.24653\\ntbw 100 degC  boiling point of water\\nsugar_bpe_orig(x) ((1-QQ/R Bsp * x^2 (1+asp x + bsp x^2) (tbw + Csp) \\\\\\n/(tbw+stdtemp)) / (1+(tbw + Csp)/Bsp *ln(1-x))-1) * (tbw + Csp)\\n\\nTo convert mass concentration (brix) to molar concentration\\n\\nsc(x) (x / 342.3) / (( x/342.3) + (100-x)/18.02); \\\\\\n100 sc 342.3|18.02 / (sc (342.3|18.02-1)+1)\\n\\nHere is a simplfied version of this equation where the temperature of boiling\\nwater has been fixed at 100 degrees Celcius and the argument is now the\\nconcentration (brix).\\n\\nsugar_bpe(x) ((1+ 0.48851085 * sc(x)^2 (1+ -1.0038 sc(x) + -0.24653 sc(x)^2)) \\\\\\n/ (1+0.08592964 ln(1-sc(x)))-1) 326.28 K\\n\\n\\nThe formula is not invertible, so to implement it in units we unfortunately\\nmust turn it into a table.\",\"9.11.1.1. Using the brix table we can use this to produce a mapping from boiling point\\nto density which makes all of the units interconvertible. Because the brix\\ntable stops at 95 this approach works up to a boiling point elevation of 39 K\\nor a boiling point of 139 C / 282 F, which is the \\\"soft crack\\\" stage in candy\\nmaking. The \\\"hard crack\\\" stage continues up to 310 F.\"],\"comment\":\"In practice dealing with the absolute temperature is annoying because it is\\nnot possible to convert to a nested function, so you're stuck retyping the\\nabsolute temperature in Kelvins to convert to celsius or Fahrenheit.  To\\nprevent this we supply definitions that build in the temperature conversion\\nand produce results in the Fahrenheit and Celcius scales.  So using these\\nmeasures, to convert 46 degrees Baume to a Fahrenheit boiling point:\\n\\nYou have: baume(45)\\nYou want: sugar_bpF\\n239.05647\"}},{\"line\":\"sugar_bpC^-1 = sugar_bpC => ~tempC(sugar_conc_bpe(~brix(sugar_bpC))+tempC(100))\",\"info\":{\"headingsIndex\":[9,11,1,1],\"headingLevel\":4,\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.1. Density of a sugar syrup is frequently measured in candy making procedures.\\nIn the USA the boiling point of the syrup is measured. Some recipes instead\\nspecify the density using degrees Baume. Conversion between degrees Baume\\nand the boiling point measure has proved elusive. This table appeared in one\\ntext, and provides a fragmentary relationship to the concentration.\\n\\ntemp(C) conc (%)\\n100 30\\n101 40\\n102 50\\n103 60\\n106 70\\n112 80\\n123 90\\n140 95\\n151 97\\n160 98.2\\n166 99.5\\n171 99.6\\n\\nThe best source identified to date came from \\\"Boiling point elevation of\\ntechnical sugarcane solutions and its use in automatic pan boiling\\\" by\\nMichael Saska. International Sugar Journal, 2002, 104, 1247, pp 500-507.\\n\\nBut I'm using equation (3) which is credited to Starzak and Peacock,\\n\\\"Water activity coefficient in aqueous solutions of sucrose--A comprehensive\\ndata analyzis. Zuckerindustrie, 122, 380-387. (I couldn't find this\\ndocument.)\\n\\nNote that the range of validity is uncertain, but answers are in agreement\\nwith the above table all the way to 99.6.\\n\\nThe original equation has a parameter for the boiling point of water, which\\nof course varies with altitude. It also includes various other model\\nparameters. The input is the molar concentration of sucrose in the solution,\\n(moles sucrose) / (total moles).\\n\\nBsp 3797.06 degC\\nCsp 226.28 degC\\nQQ -17638 J/mol\\nasp -1.0038\\nbsp -0.24653\\ntbw 100 degC  boiling point of water\\nsugar_bpe_orig(x) ((1-QQ/R Bsp * x^2 (1+asp x + bsp x^2) (tbw + Csp) \\\\\\n/(tbw+stdtemp)) / (1+(tbw + Csp)/Bsp *ln(1-x))-1) * (tbw + Csp)\\n\\nTo convert mass concentration (brix) to molar concentration\\n\\nsc(x) (x / 342.3) / (( x/342.3) + (100-x)/18.02); \\\\\\n100 sc 342.3|18.02 / (sc (342.3|18.02-1)+1)\\n\\nHere is a simplfied version of this equation where the temperature of boiling\\nwater has been fixed at 100 degrees Celcius and the argument is now the\\nconcentration (brix).\\n\\nsugar_bpe(x) ((1+ 0.48851085 * sc(x)^2 (1+ -1.0038 sc(x) + -0.24653 sc(x)^2)) \\\\\\n/ (1+0.08592964 ln(1-sc(x)))-1) 326.28 K\\n\\n\\nThe formula is not invertible, so to implement it in units we unfortunately\\nmust turn it into a table.\",\"9.11.1.1. Using the brix table we can use this to produce a mapping from boiling point\\nto density which makes all of the units interconvertible. Because the brix\\ntable stops at 95 this approach works up to a boiling point elevation of 39 K\\nor a boiling point of 139 C / 282 F, which is the \\\"soft crack\\\" stage in candy\\nmaking. The \\\"hard crack\\\" stage continues up to 310 F.\"],\"comment\":\"In practice dealing with the absolute temperature is annoying because it is\\nnot possible to convert to a nested function, so you're stuck retyping the\\nabsolute temperature in Kelvins to convert to celsius or Fahrenheit.  To\\nprevent this we supply definitions that build in the temperature conversion\\nand produce results in the Fahrenheit and Celcius scales.  So using these\\nmeasures, to convert 46 degrees Baume to a Fahrenheit boiling point:\\n\\nYou have: baume(45)\\nYou want: sugar_bpF\\n239.05647\"}},{\"line\":\"baumeconst = 145\",\"info\":{\"headingsIndex\":[9,11,1,1],\"headingLevel\":4,\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.1. Density of a sugar syrup is frequently measured in candy making procedures.\\nIn the USA the boiling point of the syrup is measured. Some recipes instead\\nspecify the density using degrees Baume. Conversion between degrees Baume\\nand the boiling point measure has proved elusive. This table appeared in one\\ntext, and provides a fragmentary relationship to the concentration.\\n\\ntemp(C) conc (%)\\n100 30\\n101 40\\n102 50\\n103 60\\n106 70\\n112 80\\n123 90\\n140 95\\n151 97\\n160 98.2\\n166 99.5\\n171 99.6\\n\\nThe best source identified to date came from \\\"Boiling point elevation of\\ntechnical sugarcane solutions and its use in automatic pan boiling\\\" by\\nMichael Saska. International Sugar Journal, 2002, 104, 1247, pp 500-507.\\n\\nBut I'm using equation (3) which is credited to Starzak and Peacock,\\n\\\"Water activity coefficient in aqueous solutions of sucrose--A comprehensive\\ndata analyzis. Zuckerindustrie, 122, 380-387. (I couldn't find this\\ndocument.)\\n\\nNote that the range of validity is uncertain, but answers are in agreement\\nwith the above table all the way to 99.6.\\n\\nThe original equation has a parameter for the boiling point of water, which\\nof course varies with altitude. It also includes various other model\\nparameters. The input is the molar concentration of sucrose in the solution,\\n(moles sucrose) / (total moles).\\n\\nBsp 3797.06 degC\\nCsp 226.28 degC\\nQQ -17638 J/mol\\nasp -1.0038\\nbsp -0.24653\\ntbw 100 degC  boiling point of water\\nsugar_bpe_orig(x) ((1-QQ/R Bsp * x^2 (1+asp x + bsp x^2) (tbw + Csp) \\\\\\n/(tbw+stdtemp)) / (1+(tbw + Csp)/Bsp *ln(1-x))-1) * (tbw + Csp)\\n\\nTo convert mass concentration (brix) to molar concentration\\n\\nsc(x) (x / 342.3) / (( x/342.3) + (100-x)/18.02); \\\\\\n100 sc 342.3|18.02 / (sc (342.3|18.02-1)+1)\\n\\nHere is a simplfied version of this equation where the temperature of boiling\\nwater has been fixed at 100 degrees Celcius and the argument is now the\\nconcentration (brix).\\n\\nsugar_bpe(x) ((1+ 0.48851085 * sc(x)^2 (1+ -1.0038 sc(x) + -0.24653 sc(x)^2)) \\\\\\n/ (1+0.08592964 ln(1-sc(x)))-1) 326.28 K\\n\\n\\nThe formula is not invertible, so to implement it in units we unfortunately\\nmust turn it into a table.\",\"9.11.1.1. Using the brix table we can use this to produce a mapping from boiling point\\nto density which makes all of the units interconvertible. Because the brix\\ntable stops at 95 this approach works up to a boiling point elevation of 39 K\\nor a boiling point of 139 C / 282 F, which is the \\\"soft crack\\\" stage in candy\\nmaking. The \\\"hard crack\\\" stage continues up to 310 F.\"],\"comment\":\"Degrees Baume is used in European recipes to specify the density of a sugar\\nsyrup.  An entirely different definition is used for densities below\\n1 g/cm^3.  An arbitrary constant appears in the definition.  This value is\\nequal to 145 in the US, but was according to [], the old scale used in\\nHolland had a value of 144, and the new scale or Gerlach scale used 146.78.\\n\\nUS value\"}},{\"line\":\"baume = d => (baumeconst/(baumeconst+-d)) g/cm^3 \",\"info\":{\"headingsIndex\":[9,11,1,1],\"headingLevel\":4,\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.1. Density of a sugar syrup is frequently measured in candy making procedures.\\nIn the USA the boiling point of the syrup is measured. Some recipes instead\\nspecify the density using degrees Baume. Conversion between degrees Baume\\nand the boiling point measure has proved elusive. This table appeared in one\\ntext, and provides a fragmentary relationship to the concentration.\\n\\ntemp(C) conc (%)\\n100 30\\n101 40\\n102 50\\n103 60\\n106 70\\n112 80\\n123 90\\n140 95\\n151 97\\n160 98.2\\n166 99.5\\n171 99.6\\n\\nThe best source identified to date came from \\\"Boiling point elevation of\\ntechnical sugarcane solutions and its use in automatic pan boiling\\\" by\\nMichael Saska. International Sugar Journal, 2002, 104, 1247, pp 500-507.\\n\\nBut I'm using equation (3) which is credited to Starzak and Peacock,\\n\\\"Water activity coefficient in aqueous solutions of sucrose--A comprehensive\\ndata analyzis. Zuckerindustrie, 122, 380-387. (I couldn't find this\\ndocument.)\\n\\nNote that the range of validity is uncertain, but answers are in agreement\\nwith the above table all the way to 99.6.\\n\\nThe original equation has a parameter for the boiling point of water, which\\nof course varies with altitude. It also includes various other model\\nparameters. The input is the molar concentration of sucrose in the solution,\\n(moles sucrose) / (total moles).\\n\\nBsp 3797.06 degC\\nCsp 226.28 degC\\nQQ -17638 J/mol\\nasp -1.0038\\nbsp -0.24653\\ntbw 100 degC  boiling point of water\\nsugar_bpe_orig(x) ((1-QQ/R Bsp * x^2 (1+asp x + bsp x^2) (tbw + Csp) \\\\\\n/(tbw+stdtemp)) / (1+(tbw + Csp)/Bsp *ln(1-x))-1) * (tbw + Csp)\\n\\nTo convert mass concentration (brix) to molar concentration\\n\\nsc(x) (x / 342.3) / (( x/342.3) + (100-x)/18.02); \\\\\\n100 sc 342.3|18.02 / (sc (342.3|18.02-1)+1)\\n\\nHere is a simplfied version of this equation where the temperature of boiling\\nwater has been fixed at 100 degrees Celcius and the argument is now the\\nconcentration (brix).\\n\\nsugar_bpe(x) ((1+ 0.48851085 * sc(x)^2 (1+ -1.0038 sc(x) + -0.24653 sc(x)^2)) \\\\\\n/ (1+0.08592964 ln(1-sc(x)))-1) 326.28 K\\n\\n\\nThe formula is not invertible, so to implement it in units we unfortunately\\nmust turn it into a table.\",\"9.11.1.1. Using the brix table we can use this to produce a mapping from boiling point\\nto density which makes all of the units interconvertible. Because the brix\\ntable stops at 95 this approach works up to a boiling point elevation of 39 K\\nor a boiling point of 139 C / 282 F, which is the \\\"soft crack\\\" stage in candy\\nmaking. The \\\"hard crack\\\" stage continues up to 310 F.\"],\"comment\":\"Degrees Baume is used in European recipes to specify the density of a sugar\\nsyrup.  An entirely different definition is used for densities below\\n1 g/cm^3.  An arbitrary constant appears in the definition.  This value is\\nequal to 145 in the US, but was according to [], the old scale used in\\nHolland had a value of 144, and the new scale or Gerlach scale used 146.78.\\n\\nUS value\"}},{\"line\":\"baume^-1 = baume => (baume+((-g)/cm^3)) baumeconst / baume\",\"info\":{\"headingsIndex\":[9,11,1,1],\"headingLevel\":4,\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.1. Density of a sugar syrup is frequently measured in candy making procedures.\\nIn the USA the boiling point of the syrup is measured. Some recipes instead\\nspecify the density using degrees Baume. Conversion between degrees Baume\\nand the boiling point measure has proved elusive. This table appeared in one\\ntext, and provides a fragmentary relationship to the concentration.\\n\\ntemp(C) conc (%)\\n100 30\\n101 40\\n102 50\\n103 60\\n106 70\\n112 80\\n123 90\\n140 95\\n151 97\\n160 98.2\\n166 99.5\\n171 99.6\\n\\nThe best source identified to date came from \\\"Boiling point elevation of\\ntechnical sugarcane solutions and its use in automatic pan boiling\\\" by\\nMichael Saska. International Sugar Journal, 2002, 104, 1247, pp 500-507.\\n\\nBut I'm using equation (3) which is credited to Starzak and Peacock,\\n\\\"Water activity coefficient in aqueous solutions of sucrose--A comprehensive\\ndata analyzis. Zuckerindustrie, 122, 380-387. (I couldn't find this\\ndocument.)\\n\\nNote that the range of validity is uncertain, but answers are in agreement\\nwith the above table all the way to 99.6.\\n\\nThe original equation has a parameter for the boiling point of water, which\\nof course varies with altitude. It also includes various other model\\nparameters. The input is the molar concentration of sucrose in the solution,\\n(moles sucrose) / (total moles).\\n\\nBsp 3797.06 degC\\nCsp 226.28 degC\\nQQ -17638 J/mol\\nasp -1.0038\\nbsp -0.24653\\ntbw 100 degC  boiling point of water\\nsugar_bpe_orig(x) ((1-QQ/R Bsp * x^2 (1+asp x + bsp x^2) (tbw + Csp) \\\\\\n/(tbw+stdtemp)) / (1+(tbw + Csp)/Bsp *ln(1-x))-1) * (tbw + Csp)\\n\\nTo convert mass concentration (brix) to molar concentration\\n\\nsc(x) (x / 342.3) / (( x/342.3) + (100-x)/18.02); \\\\\\n100 sc 342.3|18.02 / (sc (342.3|18.02-1)+1)\\n\\nHere is a simplfied version of this equation where the temperature of boiling\\nwater has been fixed at 100 degrees Celcius and the argument is now the\\nconcentration (brix).\\n\\nsugar_bpe(x) ((1+ 0.48851085 * sc(x)^2 (1+ -1.0038 sc(x) + -0.24653 sc(x)^2)) \\\\\\n/ (1+0.08592964 ln(1-sc(x)))-1) 326.28 K\\n\\n\\nThe formula is not invertible, so to implement it in units we unfortunately\\nmust turn it into a table.\",\"9.11.1.1. Using the brix table we can use this to produce a mapping from boiling point\\nto density which makes all of the units interconvertible. Because the brix\\ntable stops at 95 this approach works up to a boiling point elevation of 39 K\\nor a boiling point of 139 C / 282 F, which is the \\\"soft crack\\\" stage in candy\\nmaking. The \\\"hard crack\\\" stage continues up to 310 F.\"],\"comment\":\"Degrees Baume is used in European recipes to specify the density of a sugar\\nsyrup.  An entirely different definition is used for densities below\\n1 g/cm^3.  An arbitrary constant appears in the definition.  This value is\\nequal to 145 in the US, but was according to [], the old scale used in\\nHolland had a value of 144, and the new scale or Gerlach scale used 146.78.\\n\\nUS value\"}},{\"line\":\"twaddell = x => (1 + 0.005 x) g / cm^3 \",\"info\":{\"headingsIndex\":[9,11,1,1],\"headingLevel\":4,\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.1. Density of a sugar syrup is frequently measured in candy making procedures.\\nIn the USA the boiling point of the syrup is measured. Some recipes instead\\nspecify the density using degrees Baume. Conversion between degrees Baume\\nand the boiling point measure has proved elusive. This table appeared in one\\ntext, and provides a fragmentary relationship to the concentration.\\n\\ntemp(C) conc (%)\\n100 30\\n101 40\\n102 50\\n103 60\\n106 70\\n112 80\\n123 90\\n140 95\\n151 97\\n160 98.2\\n166 99.5\\n171 99.6\\n\\nThe best source identified to date came from \\\"Boiling point elevation of\\ntechnical sugarcane solutions and its use in automatic pan boiling\\\" by\\nMichael Saska. International Sugar Journal, 2002, 104, 1247, pp 500-507.\\n\\nBut I'm using equation (3) which is credited to Starzak and Peacock,\\n\\\"Water activity coefficient in aqueous solutions of sucrose--A comprehensive\\ndata analyzis. Zuckerindustrie, 122, 380-387. (I couldn't find this\\ndocument.)\\n\\nNote that the range of validity is uncertain, but answers are in agreement\\nwith the above table all the way to 99.6.\\n\\nThe original equation has a parameter for the boiling point of water, which\\nof course varies with altitude. It also includes various other model\\nparameters. The input is the molar concentration of sucrose in the solution,\\n(moles sucrose) / (total moles).\\n\\nBsp 3797.06 degC\\nCsp 226.28 degC\\nQQ -17638 J/mol\\nasp -1.0038\\nbsp -0.24653\\ntbw 100 degC  boiling point of water\\nsugar_bpe_orig(x) ((1-QQ/R Bsp * x^2 (1+asp x + bsp x^2) (tbw + Csp) \\\\\\n/(tbw+stdtemp)) / (1+(tbw + Csp)/Bsp *ln(1-x))-1) * (tbw + Csp)\\n\\nTo convert mass concentration (brix) to molar concentration\\n\\nsc(x) (x / 342.3) / (( x/342.3) + (100-x)/18.02); \\\\\\n100 sc 342.3|18.02 / (sc (342.3|18.02-1)+1)\\n\\nHere is a simplfied version of this equation where the temperature of boiling\\nwater has been fixed at 100 degrees Celcius and the argument is now the\\nconcentration (brix).\\n\\nsugar_bpe(x) ((1+ 0.48851085 * sc(x)^2 (1+ -1.0038 sc(x) + -0.24653 sc(x)^2)) \\\\\\n/ (1+0.08592964 ln(1-sc(x)))-1) 326.28 K\\n\\n\\nThe formula is not invertible, so to implement it in units we unfortunately\\nmust turn it into a table.\",\"9.11.1.1. Using the brix table we can use this to produce a mapping from boiling point\\nto density which makes all of the units interconvertible. Because the brix\\ntable stops at 95 this approach works up to a boiling point elevation of 39 K\\nor a boiling point of 139 C / 282 F, which is the \\\"soft crack\\\" stage in candy\\nmaking. The \\\"hard crack\\\" stage continues up to 310 F.\"],\"comment\":\"It's not clear if this value was ever used with negative degrees.\"}},{\"line\":\"twaddell^-1 = twaddell => 200 (twaddell / (g/cm^3) +- 1)\",\"info\":{\"headingsIndex\":[9,11,1,1],\"headingLevel\":4,\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.1. Density of a sugar syrup is frequently measured in candy making procedures.\\nIn the USA the boiling point of the syrup is measured. Some recipes instead\\nspecify the density using degrees Baume. Conversion between degrees Baume\\nand the boiling point measure has proved elusive. This table appeared in one\\ntext, and provides a fragmentary relationship to the concentration.\\n\\ntemp(C) conc (%)\\n100 30\\n101 40\\n102 50\\n103 60\\n106 70\\n112 80\\n123 90\\n140 95\\n151 97\\n160 98.2\\n166 99.5\\n171 99.6\\n\\nThe best source identified to date came from \\\"Boiling point elevation of\\ntechnical sugarcane solutions and its use in automatic pan boiling\\\" by\\nMichael Saska. International Sugar Journal, 2002, 104, 1247, pp 500-507.\\n\\nBut I'm using equation (3) which is credited to Starzak and Peacock,\\n\\\"Water activity coefficient in aqueous solutions of sucrose--A comprehensive\\ndata analyzis. Zuckerindustrie, 122, 380-387. (I couldn't find this\\ndocument.)\\n\\nNote that the range of validity is uncertain, but answers are in agreement\\nwith the above table all the way to 99.6.\\n\\nThe original equation has a parameter for the boiling point of water, which\\nof course varies with altitude. It also includes various other model\\nparameters. The input is the molar concentration of sucrose in the solution,\\n(moles sucrose) / (total moles).\\n\\nBsp 3797.06 degC\\nCsp 226.28 degC\\nQQ -17638 J/mol\\nasp -1.0038\\nbsp -0.24653\\ntbw 100 degC  boiling point of water\\nsugar_bpe_orig(x) ((1-QQ/R Bsp * x^2 (1+asp x + bsp x^2) (tbw + Csp) \\\\\\n/(tbw+stdtemp)) / (1+(tbw + Csp)/Bsp *ln(1-x))-1) * (tbw + Csp)\\n\\nTo convert mass concentration (brix) to molar concentration\\n\\nsc(x) (x / 342.3) / (( x/342.3) + (100-x)/18.02); \\\\\\n100 sc 342.3|18.02 / (sc (342.3|18.02-1)+1)\\n\\nHere is a simplfied version of this equation where the temperature of boiling\\nwater has been fixed at 100 degrees Celcius and the argument is now the\\nconcentration (brix).\\n\\nsugar_bpe(x) ((1+ 0.48851085 * sc(x)^2 (1+ -1.0038 sc(x) + -0.24653 sc(x)^2)) \\\\\\n/ (1+0.08592964 ln(1-sc(x)))-1) 326.28 K\\n\\n\\nThe formula is not invertible, so to implement it in units we unfortunately\\nmust turn it into a table.\",\"9.11.1.1. Using the brix table we can use this to produce a mapping from boiling point\\nto density which makes all of the units interconvertible. Because the brix\\ntable stops at 95 this approach works up to a boiling point elevation of 39 K\\nor a boiling point of 139 C / 282 F, which is the \\\"soft crack\\\" stage in candy\\nmaking. The \\\"hard crack\\\" stage continues up to 310 F.\"],\"comment\":\"It's not clear if this value was ever used with negative degrees.\"}},{\"line\":\"quevenne = x => (1 + 0.001 x) g / cm^3 \",\"info\":{\"headingsIndex\":[9,11,1,1],\"headingLevel\":4,\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.1. Density of a sugar syrup is frequently measured in candy making procedures.\\nIn the USA the boiling point of the syrup is measured. Some recipes instead\\nspecify the density using degrees Baume. Conversion between degrees Baume\\nand the boiling point measure has proved elusive. This table appeared in one\\ntext, and provides a fragmentary relationship to the concentration.\\n\\ntemp(C) conc (%)\\n100 30\\n101 40\\n102 50\\n103 60\\n106 70\\n112 80\\n123 90\\n140 95\\n151 97\\n160 98.2\\n166 99.5\\n171 99.6\\n\\nThe best source identified to date came from \\\"Boiling point elevation of\\ntechnical sugarcane solutions and its use in automatic pan boiling\\\" by\\nMichael Saska. International Sugar Journal, 2002, 104, 1247, pp 500-507.\\n\\nBut I'm using equation (3) which is credited to Starzak and Peacock,\\n\\\"Water activity coefficient in aqueous solutions of sucrose--A comprehensive\\ndata analyzis. Zuckerindustrie, 122, 380-387. (I couldn't find this\\ndocument.)\\n\\nNote that the range of validity is uncertain, but answers are in agreement\\nwith the above table all the way to 99.6.\\n\\nThe original equation has a parameter for the boiling point of water, which\\nof course varies with altitude. It also includes various other model\\nparameters. The input is the molar concentration of sucrose in the solution,\\n(moles sucrose) / (total moles).\\n\\nBsp 3797.06 degC\\nCsp 226.28 degC\\nQQ -17638 J/mol\\nasp -1.0038\\nbsp -0.24653\\ntbw 100 degC  boiling point of water\\nsugar_bpe_orig(x) ((1-QQ/R Bsp * x^2 (1+asp x + bsp x^2) (tbw + Csp) \\\\\\n/(tbw+stdtemp)) / (1+(tbw + Csp)/Bsp *ln(1-x))-1) * (tbw + Csp)\\n\\nTo convert mass concentration (brix) to molar concentration\\n\\nsc(x) (x / 342.3) / (( x/342.3) + (100-x)/18.02); \\\\\\n100 sc 342.3|18.02 / (sc (342.3|18.02-1)+1)\\n\\nHere is a simplfied version of this equation where the temperature of boiling\\nwater has been fixed at 100 degrees Celcius and the argument is now the\\nconcentration (brix).\\n\\nsugar_bpe(x) ((1+ 0.48851085 * sc(x)^2 (1+ -1.0038 sc(x) + -0.24653 sc(x)^2)) \\\\\\n/ (1+0.08592964 ln(1-sc(x)))-1) 326.28 K\\n\\n\\nThe formula is not invertible, so to implement it in units we unfortunately\\nmust turn it into a table.\",\"9.11.1.1. Using the brix table we can use this to produce a mapping from boiling point\\nto density which makes all of the units interconvertible. Because the brix\\ntable stops at 95 this approach works up to a boiling point elevation of 39 K\\nor a boiling point of 139 C / 282 F, which is the \\\"soft crack\\\" stage in candy\\nmaking. The \\\"hard crack\\\" stage continues up to 310 F.\"],\"comment\":\"The degree quevenne is a unit for measuring the density of milk.\\nSimilarly it's unclear if negative values were allowed here.\"}},{\"line\":\"quevenne^-1 = quevenne => 1000 (quevenne / (g/cm^3) +- 1)\",\"info\":{\"headingsIndex\":[9,11,1,1],\"headingLevel\":4,\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.1. Density of a sugar syrup is frequently measured in candy making procedures.\\nIn the USA the boiling point of the syrup is measured. Some recipes instead\\nspecify the density using degrees Baume. Conversion between degrees Baume\\nand the boiling point measure has proved elusive. This table appeared in one\\ntext, and provides a fragmentary relationship to the concentration.\\n\\ntemp(C) conc (%)\\n100 30\\n101 40\\n102 50\\n103 60\\n106 70\\n112 80\\n123 90\\n140 95\\n151 97\\n160 98.2\\n166 99.5\\n171 99.6\\n\\nThe best source identified to date came from \\\"Boiling point elevation of\\ntechnical sugarcane solutions and its use in automatic pan boiling\\\" by\\nMichael Saska. International Sugar Journal, 2002, 104, 1247, pp 500-507.\\n\\nBut I'm using equation (3) which is credited to Starzak and Peacock,\\n\\\"Water activity coefficient in aqueous solutions of sucrose--A comprehensive\\ndata analyzis. Zuckerindustrie, 122, 380-387. (I couldn't find this\\ndocument.)\\n\\nNote that the range of validity is uncertain, but answers are in agreement\\nwith the above table all the way to 99.6.\\n\\nThe original equation has a parameter for the boiling point of water, which\\nof course varies with altitude. It also includes various other model\\nparameters. The input is the molar concentration of sucrose in the solution,\\n(moles sucrose) / (total moles).\\n\\nBsp 3797.06 degC\\nCsp 226.28 degC\\nQQ -17638 J/mol\\nasp -1.0038\\nbsp -0.24653\\ntbw 100 degC  boiling point of water\\nsugar_bpe_orig(x) ((1-QQ/R Bsp * x^2 (1+asp x + bsp x^2) (tbw + Csp) \\\\\\n/(tbw+stdtemp)) / (1+(tbw + Csp)/Bsp *ln(1-x))-1) * (tbw + Csp)\\n\\nTo convert mass concentration (brix) to molar concentration\\n\\nsc(x) (x / 342.3) / (( x/342.3) + (100-x)/18.02); \\\\\\n100 sc 342.3|18.02 / (sc (342.3|18.02-1)+1)\\n\\nHere is a simplfied version of this equation where the temperature of boiling\\nwater has been fixed at 100 degrees Celcius and the argument is now the\\nconcentration (brix).\\n\\nsugar_bpe(x) ((1+ 0.48851085 * sc(x)^2 (1+ -1.0038 sc(x) + -0.24653 sc(x)^2)) \\\\\\n/ (1+0.08592964 ln(1-sc(x)))-1) 326.28 K\\n\\n\\nThe formula is not invertible, so to implement it in units we unfortunately\\nmust turn it into a table.\",\"9.11.1.1. Using the brix table we can use this to produce a mapping from boiling point\\nto density which makes all of the units interconvertible. Because the brix\\ntable stops at 95 this approach works up to a boiling point elevation of 39 K\\nor a boiling point of 139 C / 282 F, which is the \\\"soft crack\\\" stage in candy\\nmaking. The \\\"hard crack\\\" stage continues up to 310 F.\"],\"comment\":\"The degree quevenne is a unit for measuring the density of milk.\\nSimilarly it's unclear if negative values were allowed here.\"}},{\"line\":\"apidegree = x => 141.5 g/cm^3 / (x+131.5) \",\"info\":{\"headingsIndex\":[9,11,2],\"headingLevel\":3,\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.2. Density measure invented by the American Petroleum Institute. Lighter\\npetroleum products are more valuable, and they get a higher API degree.\\n\\nThe intervals of range and domain should be open rather than closed.\"],\"comment\":\"\"}},{\"line\":\"apidegree^-1 = apidegree => 141.5 (g/cm^3) / apidegree + (-131.5)\",\"info\":{\"headingsIndex\":[9,11,2],\"headingLevel\":3,\"headings\":[\"9. Cooking measures\",\"9.11. Density measures. Density has traditionally been measured on a variety of\\nbizarre nonlinear scales.\",\"9.11.2. Density measure invented by the American Petroleum Institute. Lighter\\npetroleum products are more valuable, and they get a higher API degree.\\n\\nThe intervals of range and domain should be open rather than closed.\"],\"comment\":\"\"}},{\"line\":\"ouncedal = oz ft / s^2\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"force which accelerates an ounce\\nat 1 ft/s^2\\nsame thing for a pound\\nand for a ton\"}},{\"line\":\"poundal = lb ft / s^2\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"force which accelerates an ounce\\nat 1 ft/s^2\\nsame thing for a pound\\nand for a ton\"}},{\"line\":\"tondal = longton ft / s^2\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"force which accelerates an ounce\\nat 1 ft/s^2\\nsame thing for a pound\\nand for a ton\"}},{\"line\":\"pdl = poundal\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"osi = ounce force / inch^2\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"used in aviation\"}},{\"line\":\"psi = pound force / inch^2\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"absolute pressure\\nNote that gauge pressure can be given\\nusing the gaugepressure() and\\npsig() nonlinear unit definitions\"}},{\"line\":\"psia = psi\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"absolute pressure\\nNote that gauge pressure can be given\\nusing the gaugepressure() and\\npsig() nonlinear unit definitions\"}},{\"line\":\"tsi = ton force / inch^2\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"reyn = psi sec\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"slug = lbf s^2 / ft\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"slugf = slug force\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"slinch = lbf s^2 / inch\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"Mass unit derived from inch second\\npound-force system.  Used in space\\napplications where in/sec^2 was a\\nnatural acceleration measure.\"}},{\"line\":\"slinchf = slinch force\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"Mass unit derived from inch second\\npound-force system.  Used in space\\napplications where in/sec^2 was a\\nnatural acceleration measure.\"}},{\"line\":\"geepound = slug\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"lbf = lb force\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"tonf = ton force\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"lbm = lb\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"kip = 1000 lbf\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"from kilopound\"}},{\"line\":\"ksi = kip / in^2\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"mil = 0.001 inch\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"thou = 0.001 inch\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"tenth = 0.0001 inch\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"one tenth of one thousandth of an inch\"}},{\"line\":\"millionth = 1e-6 inch\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"one millionth of an inch\"}},{\"line\":\"circularinch = 1|4 pi in^2\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"area of a one-inch diameter circle\\nA circle with diameter d inches has\\nan area of d^2 circularinches\"}},{\"line\":\"circleinch = circularinch\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"area of a one-inch diameter circle\\nA circle with diameter d inches has\\nan area of d^2 circularinches\"}},{\"line\":\"cylinderinch = circleinch inch\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"Cylinder h inch tall, d inches diameter\\nhas volume d^2 h cylinder inches\"}},{\"line\":\"circularmil = 1|4 pi mil^2\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"area of one-mil diameter circle\"}},{\"line\":\"cmil = circularmil\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"area of one-mil diameter circle\"}},{\"line\":\"cental = 100 pound\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"centner = cental\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"caliber = 0.01 inch\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"for measuring bullets\"}},{\"line\":\"duty = ft lbf\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"celo = ft / s^2\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"jerk = ft / s^3\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"\"}},{\"line\":\"australiapoint = 0.01 inch\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"The \\\"point\\\" is used to measure rainfall\\nin Australia\"}},{\"line\":\"sabin = ft^2\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"Measure of sound absorption equal to the\\nabsorbing power of one square foot of\\na perfectly absorbing material.  The\\nsound absorptivity of an object is the\\narea times a dimensionless\\nabsorptivity coefficient.\"}},{\"line\":\"standardgauge = 4 ft + 8.5 in\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"Standard width between railroad track\"}},{\"line\":\"flag = 5 ft^2\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"Construction term referring to sidewalk.\"}},{\"line\":\"rollwallpaper = 30 ft^2\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"Area of roll of wall paper\"}},{\"line\":\"fillpower = in^3 / ounce\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"Density of down at standard pressure.\\nThe best down has 750-800 fillpower.\"}},{\"line\":\"pinlength = 1|16 inch\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"A\"}},{\"line\":\"buttonline = 1|40 inch\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"The line was used in 19th century USA\\nto measure width of buttons.\"}},{\"line\":\"beespace = 1|4 inch\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"Bees will fill any space that is smaller\\nthan the bee space and leave open\\nspaces that are larger.  The size of\\nthe space varies with species.\"}},{\"line\":\"diamond = 8|5 ft\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"Marking on US tape measures that is\\nuseful to carpenters who wish to place\\nfive studs in an 8 ft distance.  Note\\nthat the numbers appear in red every\\n16 inches as well, giving six\\ndivisions in 8 feet.\"}},{\"line\":\"retmaunit = 1.75 in\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"Height of rack mountable equipment.\\nEquipment should be 1|32 inch narrower\\nthan its U measurement indicates to\\nallow for clearance, so 4U=(6+31|32)in\\nRETMA stands for the former name of\\nthe standardizing organization, Radio\\nElectronics Television Manufacturers\\nAssociation.  This organization is now\\ncalled the Electronic Industries\\nAlliance (EIA) and the rack standard\\nis specified in EIA RS-310-D.\"}},{\"line\":\"U = retmaunit\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"Height of rack mountable equipment.\\nEquipment should be 1|32 inch narrower\\nthan its U measurement indicates to\\nallow for clearance, so 4U=(6+31|32)in\\nRETMA stands for the former name of\\nthe standardizing organization, Radio\\nElectronics Television Manufacturers\\nAssociation.  This organization is now\\ncalled the Electronic Industries\\nAlliance (EIA) and the rack standard\\nis specified in EIA RS-310-D.\"}},{\"line\":\"RU = U\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"Height of rack mountable equipment.\\nEquipment should be 1|32 inch narrower\\nthan its U measurement indicates to\\nallow for clearance, so 4U=(6+31|32)in\\nRETMA stands for the former name of\\nthe standardizing organization, Radio\\nElectronics Television Manufacturers\\nAssociation.  This organization is now\\ncalled the Electronic Industries\\nAlliance (EIA) and the rack standard\\nis specified in EIA RS-310-D.\"}},{\"line\":\"count = / pound\",\"info\":{\"headingsIndex\":[10],\"headingLevel\":1,\"headings\":[\"10. Units derived from imperial system\"],\"comment\":\"For measuring the size of shrimp\"}},{\"line\":\"ENERGY = joule\",\"info\":{\"headingsIndex\":[11],\"headingLevel\":1,\"headings\":[\"11. Other units of work, energy, power, etc\"],\"comment\":\"\"}},{\"line\":\"WORK = joule\",\"info\":{\"headingsIndex\":[11],\"headingLevel\":1,\"headings\":[\"11. Other units of work, energy, power, etc\"],\"comment\":\"\"}},{\"line\":\"cal_IT = 4.1868 J\",\"info\":{\"headingsIndex\":[11,1],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.1. Calories: energy to raise a gram of water one degree celsius\"],\"comment\":\"International Table calorie\"}},{\"line\":\"cal_th = 4.184 J\",\"info\":{\"headingsIndex\":[11,1],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.1. Calories: energy to raise a gram of water one degree celsius\"],\"comment\":\"Thermochemical calorie\"}},{\"line\":\"cal_fifteen = 4.18580 J\",\"info\":{\"headingsIndex\":[11,1],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.1. Calories: energy to raise a gram of water one degree celsius\"],\"comment\":\"Energy to go from 14.5 to 15.5 degC\"}},{\"line\":\"cal_twenty = 4.18190 J\",\"info\":{\"headingsIndex\":[11,1],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.1. Calories: energy to raise a gram of water one degree celsius\"],\"comment\":\"Energy to go from 19.5 to 20.5 degC\"}},{\"line\":\"cal_mean = 4.19002 J\",\"info\":{\"headingsIndex\":[11,1],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.1. Calories: energy to raise a gram of water one degree celsius\"],\"comment\":\"1|100 energy to go from 0 to 100 degC\"}},{\"line\":\"calorie = cal_IT\",\"info\":{\"headingsIndex\":[11,1],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.1. Calories: energy to raise a gram of water one degree celsius\"],\"comment\":\"\"}},{\"line\":\"cal = calorie\",\"info\":{\"headingsIndex\":[11,1],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.1. Calories: energy to raise a gram of water one degree celsius\"],\"comment\":\"\"}},{\"line\":\"calorie_IT = cal_IT\",\"info\":{\"headingsIndex\":[11,1],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.1. Calories: energy to raise a gram of water one degree celsius\"],\"comment\":\"\"}},{\"line\":\"thermcalorie = cal_th\",\"info\":{\"headingsIndex\":[11,1],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.1. Calories: energy to raise a gram of water one degree celsius\"],\"comment\":\"\"}},{\"line\":\"calorie_th = thermcalorie\",\"info\":{\"headingsIndex\":[11,1],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.1. Calories: energy to raise a gram of water one degree celsius\"],\"comment\":\"\"}},{\"line\":\"Calorie = kilocalorie\",\"info\":{\"headingsIndex\":[11,1],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.1. Calories: energy to raise a gram of water one degree celsius\"],\"comment\":\"the food Calorie\"}},{\"line\":\"thermie = 1e6 cal_fifteen\",\"info\":{\"headingsIndex\":[11,1],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.1. Calories: energy to raise a gram of water one degree celsius\"],\"comment\":\"Heat required to raise the\\ntemperature of a tonne of\\nwater from 14.5 to 15.5 degC.\"}},{\"line\":\"btu = cal lb degF / gram K\",\"info\":{\"headingsIndex\":[11,2],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.2. btu definitions: energy to raise a pound of water 1 degF\"],\"comment\":\"international table BTU\"}},{\"line\":\"britishthermalunit = btu\",\"info\":{\"headingsIndex\":[11,2],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.2. btu definitions: energy to raise a pound of water 1 degF\"],\"comment\":\"international table BTU\"}},{\"line\":\"btu_IT = btu\",\"info\":{\"headingsIndex\":[11,2],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.2. btu definitions: energy to raise a pound of water 1 degF\"],\"comment\":\"international table BTU\"}},{\"line\":\"btu_th = cal_th lb degF / gram K\",\"info\":{\"headingsIndex\":[11,2],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.2. btu definitions: energy to raise a pound of water 1 degF\"],\"comment\":\"\"}},{\"line\":\"btu_mean = cal_mean lb degF / gram K\",\"info\":{\"headingsIndex\":[11,2],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.2. btu definitions: energy to raise a pound of water 1 degF\"],\"comment\":\"\"}},{\"line\":\"quad = quadrillion btu\",\"info\":{\"headingsIndex\":[11,2],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.2. btu definitions: energy to raise a pound of water 1 degF\"],\"comment\":\"\"}},{\"line\":\"ECtherm = 1.05506e8 J\",\"info\":{\"headingsIndex\":[11,2],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.2. btu definitions: energy to raise a pound of water 1 degF\"],\"comment\":\"Exact definition, close to 1e5 btu\"}},{\"line\":\"UStherm = 1.054804e8 J\",\"info\":{\"headingsIndex\":[11,2],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.2. btu definitions: energy to raise a pound of water 1 degF\"],\"comment\":\"Exact definition\"}},{\"line\":\"therm = UStherm\",\"info\":{\"headingsIndex\":[11,2],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.2. btu definitions: energy to raise a pound of water 1 degF\"],\"comment\":\"Exact definition\"}},{\"line\":\"water_fusion_heat = 79.8 calorie/g\",\"info\":{\"headingsIndex\":[11,3],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.3. Water latent heat (from Wikipedia)\"],\"comment\":\"\"}},{\"line\":\"water_vaporization_heat = 1160 J/g\",\"info\":{\"headingsIndex\":[11,3],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.3. Water latent heat (from Wikipedia)\"],\"comment\":\"\"}},{\"line\":\"specificheat_water = calorie / g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"\"}},{\"line\":\"water_specificheat = specificheat_water\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"\"}},{\"line\":\"specificheat_aluminum = 0.91 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_antimony = 0.21 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_barium = 0.20 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_beryllium = 1.83 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_bismuth = 0.13 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_cadmium = 0.23 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_cesium = 0.24 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_chromium = 0.46 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_cobalt = 0.42 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_copper = 0.39 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_gallium = 0.37 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_germanium = 0.32 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_gold = 0.13 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_hafnium = 0.14 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_indium = 0.24 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_iridium = 0.13 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_iron = 0.45 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_lanthanum = 0.195 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_lead = 0.13 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_lithium = 3.57 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_lutetium = 0.15 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_magnesium = 1.05 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_manganese = 0.48 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_mercury = 0.14 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_molybdenum = 0.25 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_nickel = 0.44 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_osmium = 0.13 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_palladium = 0.24 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_platinum = 0.13 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_plutonum = 0.13 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_potassium = 0.75 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_rhenium = 0.14 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_rhodium = 0.24 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_rubidium = 0.36 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_ruthenium = 0.24 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_scandium = 0.57  J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_selenium = 0.32 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_silicon = 0.71 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_silver = 0.23 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_sodium = 1.21 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_strontium = 0.30 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_tantalum = 0.14 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_thallium = 0.13 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_thorium = 0.13 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_tin = 0.21 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_titanium = 0.54 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_tungsten = 0.13 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_uranium = 0.12 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_vanadium = 0.39 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_yttrium = 0.30 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_zinc = 0.39 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_zirconium = 0.27 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_ethanol = 2.3  J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_ammonia = 4.6 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"Values from www.engineeringtoolbox.com/specific-heat-metals-d_152.html\"}},{\"line\":\"specificheat_freon = 0.91 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"R-12 at 0 degrees Fahrenheit\"}},{\"line\":\"specificheat_gasoline = 2.22 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"\"}},{\"line\":\"specificheat_iodine = 2.15 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"\"}},{\"line\":\"specificheat_oliveoil = 1.97 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"\"}},{\"line\":\"specificheat_hydrogen = 14.3 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_helium = 5.1932 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_argon = 0.5203 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_tissue = 3.5 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_diamond = 0.5091 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_granite = 0.79 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_graphite = 0.71 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_ice = 2.11 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_asphalt = 0.92 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_brick = 0.84 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_concrete = 0.88 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_glass_silica = 0.84 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_glass_flint = 0.503 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_glass_pyrex = 0.753 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_gypsum = 1.09 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_marble = 0.88 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_sand = 0.835 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_soil = 0.835 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_wood = 1.7 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"en.wikipedia.org/wiki/Heat_capacity\"}},{\"line\":\"specificheat_sucrose = 1.244 J/g K\",\"info\":{\"headingsIndex\":[11,4],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.4. Specific heat capacities of various substances\"],\"comment\":\"www.sugartech.co.za/heatcapacity/index.php\"}},{\"line\":\"tonoil = 1e10 cal_IT\",\"info\":{\"headingsIndex\":[11,5],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"Ton oil equivalent.  A conventional\\nvalue for the energy released by\\nburning one metric ton of oil. [18,E2]\\nNote that energy per mass of petroleum\\nproducts is fairly constant.\\nVariations in volumetric energy\\ndensity result from variations in the\\ndensity (kg/m^3) of different fuels.\\nThis definition is given by the\\nIEA/OECD.\"}},{\"line\":\"toe = tonoil\",\"info\":{\"headingsIndex\":[11,5],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"Ton oil equivalent.  A conventional\\nvalue for the energy released by\\nburning one metric ton of oil. [18,E2]\\nNote that energy per mass of petroleum\\nproducts is fairly constant.\\nVariations in volumetric energy\\ndensity result from variations in the\\ndensity (kg/m^3) of different fuels.\\nThis definition is given by the\\nIEA/OECD.\"}},{\"line\":\"toncoal = 7e9 cal_IT\",\"info\":{\"headingsIndex\":[11,5],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"Energy in metric ton coal from [18].\\nThis is a nominal value which\\nis close to the heat content\\nof coal used in the 1950's\"}},{\"line\":\"barreloil = 5.8 Mbtu\",\"info\":{\"headingsIndex\":[11,5],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"Conventional value for barrel of crude\\noil [E2].  Actual range is 5.6 - 6.3.\"}},{\"line\":\"naturalgas_HHV = 1027 btu/ft^3\",\"info\":{\"headingsIndex\":[11,5],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"Energy content of natural gas.  HHV\\nis for Higher Heating Value and\\nincludes energy from condensation\\ncombustion products.  LHV is for Lower\\nHeating Value and excludes these.\\nAmerican publications typically report\\nHHV whereas European ones report LHV.\"}},{\"line\":\"naturalgas_LHV = 930 btu/ft^3\",\"info\":{\"headingsIndex\":[11,5],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"Energy content of natural gas.  HHV\\nis for Higher Heating Value and\\nincludes energy from condensation\\ncombustion products.  LHV is for Lower\\nHeating Value and excludes these.\\nAmerican publications typically report\\nHHV whereas European ones report LHV.\"}},{\"line\":\"naturalgas = naturalgas_HHV\",\"info\":{\"headingsIndex\":[11,5],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"Energy content of natural gas.  HHV\\nis for Higher Heating Value and\\nincludes energy from condensation\\ncombustion products.  LHV is for Lower\\nHeating Value and excludes these.\\nAmerican publications typically report\\nHHV whereas European ones report LHV.\"}},{\"line\":\"charcoal = 30 GJ/tonne\",\"info\":{\"headingsIndex\":[11,5],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"\"}},{\"line\":\"woodenergy_dry = 20 GJ/tonne\",\"info\":{\"headingsIndex\":[11,5],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"HHV, a cord weights about a tonne\"}},{\"line\":\"woodenergy_airdry = 15 GJ/tonne\",\"info\":{\"headingsIndex\":[11,5],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"20% moisture content\"}},{\"line\":\"coal_bituminous = 27 GJ / tonne\",\"info\":{\"headingsIndex\":[11,5],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"\"}},{\"line\":\"coal_lignite = 15 GJ / tonne\",\"info\":{\"headingsIndex\":[11,5],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"\"}},{\"line\":\"coal_US = 22 GJ / uston\",\"info\":{\"headingsIndex\":[11,5],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"Average for US coal (short ton), 1995\"}},{\"line\":\"ethanol_HHV = 84000 btu/usgallon\",\"info\":{\"headingsIndex\":[11,5],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"\"}},{\"line\":\"ethanol_LHV = 75700 btu/usgallon\",\"info\":{\"headingsIndex\":[11,5],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"\"}},{\"line\":\"diesel = 130500 btu/usgallon\",\"info\":{\"headingsIndex\":[11,5],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"\"}},{\"line\":\"gasoline_LHV = 115000 btu/usgallon\",\"info\":{\"headingsIndex\":[11,5],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"\"}},{\"line\":\"gasoline_HHV = 125000 btu/usgallon\",\"info\":{\"headingsIndex\":[11,5],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"\"}},{\"line\":\"gasoline = gasoline_HHV\",\"info\":{\"headingsIndex\":[11,5],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"\"}},{\"line\":\"heating = 37.3 MJ/liter\",\"info\":{\"headingsIndex\":[11,5],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"\"}},{\"line\":\"fueloil = 39.7 MJ/liter\",\"info\":{\"headingsIndex\":[11,5],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"low sulphur\"}},{\"line\":\"propane = 93.3 MJ/m^3\",\"info\":{\"headingsIndex\":[11,5],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"\"}},{\"line\":\"butane = 124 MJ/m^3\",\"info\":{\"headingsIndex\":[11,5],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\"],\"comment\":\"\"}},{\"line\":\"uranium_pure = 200 MeV avogadro / (235.0439299 g/mol)\",\"info\":{\"headingsIndex\":[11,5,1],\"headingLevel\":3,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\",\"11.5.1. These values give total energy from uranium fission. Actual efficiency\\nof nuclear power plants is around 30%-40%. Note also that some reactors\\nuse enriched uranium around 3% U-235. Uranium during processing or use\\nmay be in a compound of uranium oxide or uranium hexafluoride, in which\\ncase the energy density would be lower depending on how much uranium is\\nin the compound.\"],\"comment\":\"Pure U-235\"}},{\"line\":\"uranium_natural = 0.7% uranium_pure\",\"info\":{\"headingsIndex\":[11,5,1],\"headingLevel\":3,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.5. Energy densities of various fuels\\n\\nMost of these fuels have varying compositions or qualities and hence their\\nactual energy densities vary. These numbers are hence only approximate.\\n\\nE1. http://bioenergy.ornl.gov/papers/misc/energy_conv.html\\nE2. http://www.aps.org/policy/reports/popa-reports/energy/units.cfm\\nE3. http://www.ior.com.au/ecflist.html\",\"11.5.1. These values give total energy from uranium fission. Actual efficiency\\nof nuclear power plants is around 30%-40%. Note also that some reactors\\nuse enriched uranium around 3% U-235. Uranium during processing or use\\nmay be in a compound of uranium oxide or uranium hexafluoride, in which\\ncase the energy density would be lower depending on how much uranium is\\nin the compound.\"],\"comment\":\"Natural uranium: 0.7% U-235\"}},{\"line\":\"celsiusheatunit = cal lb degC / gram K\",\"info\":{\"headingsIndex\":[11,6],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.6. Celsius heat unit: energy to raise a pound of water 1 degC\"],\"comment\":\"\"}},{\"line\":\"chu = celsiusheatunit\",\"info\":{\"headingsIndex\":[11,6],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.6. Celsius heat unit: energy to raise a pound of water 1 degC\"],\"comment\":\"\"}},{\"line\":\"POWER = watt\",\"info\":{\"headingsIndex\":[11,6],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.6. Celsius heat unit: energy to raise a pound of water 1 degC\"],\"comment\":\"\"}},{\"line\":\"VA = volt ampere\",\"info\":{\"headingsIndex\":[11,7],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.7. \\\"Apparent\\\" average power in an AC circuit, the product of rms voltage\\nand rms current, equal to the true power in watts when voltage and\\ncurrent are in phase. In a DC circuit, always equal to the true power.\"],\"comment\":\"\"}},{\"line\":\"kWh = kilowatt hour\",\"info\":{\"headingsIndex\":[11,7],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.7. \\\"Apparent\\\" average power in an AC circuit, the product of rms voltage\\nand rms current, equal to the true power in watts when voltage and\\ncurrent are in phase. In a DC circuit, always equal to the true power.\"],\"comment\":\"\"}},{\"line\":\"horsepower = 550 foot pound force / sec\",\"info\":{\"headingsIndex\":[11,8],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.8. The horsepower is supposedly the power of one horse pulling. Obviously\\ndifferent people had different horses.\"],\"comment\":\"Invented by James Watt\"}},{\"line\":\"mechanicalhorsepower = horsepower\",\"info\":{\"headingsIndex\":[11,8],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.8. The horsepower is supposedly the power of one horse pulling. Obviously\\ndifferent people had different horses.\"],\"comment\":\"Invented by James Watt\"}},{\"line\":\"hp = horsepower\",\"info\":{\"headingsIndex\":[11,8],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.8. The horsepower is supposedly the power of one horse pulling. Obviously\\ndifferent people had different horses.\"],\"comment\":\"Invented by James Watt\"}},{\"line\":\"metrichorsepower = 75 kilogram force meter / sec\",\"info\":{\"headingsIndex\":[11,8],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.8. The horsepower is supposedly the power of one horse pulling. Obviously\\ndifferent people had different horses.\"],\"comment\":\"PS=Pferdestaerke in\\nGermany\"}},{\"line\":\"electrichorsepower = 746 W\",\"info\":{\"headingsIndex\":[11,8],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.8. The horsepower is supposedly the power of one horse pulling. Obviously\\ndifferent people had different horses.\"],\"comment\":\"PS=Pferdestaerke in\\nGermany\"}},{\"line\":\"boilerhorsepower = 9809.50 W\",\"info\":{\"headingsIndex\":[11,8],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.8. The horsepower is supposedly the power of one horse pulling. Obviously\\ndifferent people had different horses.\"],\"comment\":\"\"}},{\"line\":\"waterhorsepower = 746.043 W\",\"info\":{\"headingsIndex\":[11,8],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.8. The horsepower is supposedly the power of one horse pulling. Obviously\\ndifferent people had different horses.\"],\"comment\":\"\"}},{\"line\":\"brhorsepower = 745.70 W\",\"info\":{\"headingsIndex\":[11,8],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.8. The horsepower is supposedly the power of one horse pulling. Obviously\\ndifferent people had different horses.\"],\"comment\":\"\"}},{\"line\":\"donkeypower = 250 W\",\"info\":{\"headingsIndex\":[11,8],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.8. The horsepower is supposedly the power of one horse pulling. Obviously\\ndifferent people had different horses.\"],\"comment\":\"\"}},{\"line\":\"chevalvapeur = metrichorsepower\",\"info\":{\"headingsIndex\":[11,8],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.8. The horsepower is supposedly the power of one horse pulling. Obviously\\ndifferent people had different horses.\"],\"comment\":\"\"}},{\"line\":\"THERMAL_CONDUCTIVITY = POWER / AREA (TEMPERATURE_DIFFERENCE/LENGTH)\",\"info\":{\"headingsIndex\":[11,10],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.10. Heat Transfer\"],\"comment\":\"Thermal conductivity, K, measures the rate of heat transfer across\\na material.  The heat transfered is\\nQ = K dT A t / L\\nwhere dT is the temperature difference across the material, A is the\\ncross sectional area, t is the time, and L is the length (thickness).\\nThermal conductivity is a material property.\"}},{\"line\":\"THERMAL_RESISTIVITY = 1/THERMAL_CONDUCTIVITY\",\"info\":{\"headingsIndex\":[11,10],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.10. Heat Transfer\"],\"comment\":\"\"}},{\"line\":\"THERMAL_CONDUCTANCE = POWER / TEMPERATURE_DIFFERENCE\",\"info\":{\"headingsIndex\":[11,10],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.10. Heat Transfer\"],\"comment\":\"Thermal conductance is the rate at which heat flows across a given\\nobject, so the area and thickness have been fixed.  It depends on\\nthe size of the object and is hence not a material property.\"}},{\"line\":\"THERMAL_RESISTANCE = 1/THERMAL_CONDUCTANCE\",\"info\":{\"headingsIndex\":[11,10],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.10. Heat Transfer\"],\"comment\":\"\"}},{\"line\":\"THERMAL_ADMITTANCE = THERMAL_CONDUCTIVITY / LENGTH\",\"info\":{\"headingsIndex\":[11,10,1],\"headingLevel\":3,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.10. Heat Transfer\",\"11.10.1. Thermal admittance is the rate of heat flow per area across an\\nobject whose thickness has been fixed. Its reciprocal, thermal\\ninsulation, is used to for measuring the heat transfer per area\\nof sheets of insulation or cloth that are of specified thickness.\"],\"comment\":\"\"}},{\"line\":\"THERMAL_INSULANCE = THERMAL_RESISTIVITY LENGTH\",\"info\":{\"headingsIndex\":[11,10,1],\"headingLevel\":3,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.10. Heat Transfer\",\"11.10.1. Thermal admittance is the rate of heat flow per area across an\\nobject whose thickness has been fixed. Its reciprocal, thermal\\ninsulation, is used to for measuring the heat transfer per area\\nof sheets of insulation or cloth that are of specified thickness.\"],\"comment\":\"\"}},{\"line\":\"THERMAL_INSULATION = THERMAL_RESISTIVITY LENGTH\",\"info\":{\"headingsIndex\":[11,10,1],\"headingLevel\":3,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.10. Heat Transfer\",\"11.10.1. Thermal admittance is the rate of heat flow per area across an\\nobject whose thickness has been fixed. Its reciprocal, thermal\\ninsulation, is used to for measuring the heat transfer per area\\nof sheets of insulation or cloth that are of specified thickness.\"],\"comment\":\"\"}},{\"line\":\"Rvalue = degF ft^2 hr / btu\",\"info\":{\"headingsIndex\":[11,10,1],\"headingLevel\":3,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.10. Heat Transfer\",\"11.10.1. Thermal admittance is the rate of heat flow per area across an\\nobject whose thickness has been fixed. Its reciprocal, thermal\\ninsulation, is used to for measuring the heat transfer per area\\nof sheets of insulation or cloth that are of specified thickness.\"],\"comment\":\"\"}},{\"line\":\"Uvalue = 1/Rvalue\",\"info\":{\"headingsIndex\":[11,10,1],\"headingLevel\":3,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.10. Heat Transfer\",\"11.10.1. Thermal admittance is the rate of heat flow per area across an\\nobject whose thickness has been fixed. Its reciprocal, thermal\\ninsulation, is used to for measuring the heat transfer per area\\nof sheets of insulation or cloth that are of specified thickness.\"],\"comment\":\"\"}},{\"line\":\"europeanUvalue = watt / m^2 K\",\"info\":{\"headingsIndex\":[11,10,1],\"headingLevel\":3,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.10. Heat Transfer\",\"11.10.1. Thermal admittance is the rate of heat flow per area across an\\nobject whose thickness has been fixed. Its reciprocal, thermal\\ninsulation, is used to for measuring the heat transfer per area\\nof sheets of insulation or cloth that are of specified thickness.\"],\"comment\":\"\"}},{\"line\":\"RSI = degC m^2 / W\",\"info\":{\"headingsIndex\":[11,10,1],\"headingLevel\":3,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.10. Heat Transfer\",\"11.10.1. Thermal admittance is the rate of heat flow per area across an\\nobject whose thickness has been fixed. Its reciprocal, thermal\\ninsulation, is used to for measuring the heat transfer per area\\nof sheets of insulation or cloth that are of specified thickness.\"],\"comment\":\"\"}},{\"line\":\"clo = 0.155 degC m^2 / W\",\"info\":{\"headingsIndex\":[11,10,1],\"headingLevel\":3,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.10. Heat Transfer\",\"11.10.1. Thermal admittance is the rate of heat flow per area across an\\nobject whose thickness has been fixed. Its reciprocal, thermal\\ninsulation, is used to for measuring the heat transfer per area\\nof sheets of insulation or cloth that are of specified thickness.\"],\"comment\":\"Supposed to be the insulance\\nrequired to keep a resting person\\ncomfortable indoors.  The value\\ngiven is from NIST and the CRC,\\nbut [5] gives a slightly different\\nvalue of 0.875 ft^2 degF hr / btu.\"}},{\"line\":\"tog = 0.1 degC m^2 / W\",\"info\":{\"headingsIndex\":[11,10,1],\"headingLevel\":3,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.10. Heat Transfer\",\"11.10.1. Thermal admittance is the rate of heat flow per area across an\\nobject whose thickness has been fixed. Its reciprocal, thermal\\ninsulation, is used to for measuring the heat transfer per area\\nof sheets of insulation or cloth that are of specified thickness.\"],\"comment\":\"Also used for clothing.\"}},{\"line\":\"bel = x => 10^(x)\",\"info\":{\"headingsIndex\":[11,11],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Basic bel definition\"}},{\"line\":\"bel^-1 = bel => log(bel)\",\"info\":{\"headingsIndex\":[11,11],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Basic bel definition\"}},{\"line\":\"decibel = x => 10^(x/10)\",\"info\":{\"headingsIndex\":[11,11],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Basic decibel\"}},{\"line\":\"decibel^-1 = decibel => 10 log(decibel)\",\"info\":{\"headingsIndex\":[11,11],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Basic decibel\"}},{\"line\":\"dB = decibel\",\"info\":{\"headingsIndex\":[11,11],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Abbreviation\"}},{\"line\":\"dBW = x => dB(x) W \",\"info\":{\"headingsIndex\":[11,11],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Reference = 1 W\"}},{\"line\":\"dBW^-1 = dBW => ~dB(dBW/W)\",\"info\":{\"headingsIndex\":[11,11],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Reference = 1 W\"}},{\"line\":\"dBk = x => dB(x) kW \",\"info\":{\"headingsIndex\":[11,11],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Reference = 1 kW\"}},{\"line\":\"dBk^-1 = dBk => ~dB(dBk/kW)\",\"info\":{\"headingsIndex\":[11,11],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Reference = 1 kW\"}},{\"line\":\"dBf = x => dB(x) fW \",\"info\":{\"headingsIndex\":[11,11],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Reference = 1 fW\"}},{\"line\":\"dBf^-1 = dBf => ~dB(dBf/fW)\",\"info\":{\"headingsIndex\":[11,11],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Reference = 1 fW\"}},{\"line\":\"dBm = x => dB(x) mW \",\"info\":{\"headingsIndex\":[11,11],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Reference = 1 mW\"}},{\"line\":\"dBm^-1 = dBm => ~dB(dBm/mW)\",\"info\":{\"headingsIndex\":[11,11],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Reference = 1 mW\"}},{\"line\":\"dBmW = x => dBm(x) \",\"info\":{\"headingsIndex\":[11,11],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Reference = 1 mW\"}},{\"line\":\"dBmW^-1 = dBmW => ~dBm(dBmW)\",\"info\":{\"headingsIndex\":[11,11],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Reference = 1 mW\"}},{\"line\":\"dBJ = x => dB(x) J\",\"info\":{\"headingsIndex\":[11,11],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Energy relative\\nto 1 joule.  Used for power spectral\\ndensity since W/Hz = J\"}},{\"line\":\"dBJ^-1 = dBJ => ~dB(dBJ/J)\",\"info\":{\"headingsIndex\":[11,11],\"headingLevel\":2,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\"],\"comment\":\"Energy relative\\nto 1 joule.  Used for power spectral\\ndensity since W/Hz = J\"}},{\"line\":\"dBV = x => dB(0.5 x) V\",\"info\":{\"headingsIndex\":[11,11,1],\"headingLevel\":3,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.1. When used to measure amplitude, voltage, or current the signal is squared\\nbecause power is proportional to the square of these measures. The root\\nmean square (RMS) voltage is typically used with these units.\"],\"comment\":\"Reference = 1 V\"}},{\"line\":\"dBV^-1 = dBV => ~dB(dBV^2 / V^2)\",\"info\":{\"headingsIndex\":[11,11,1],\"headingLevel\":3,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.1. When used to measure amplitude, voltage, or current the signal is squared\\nbecause power is proportional to the square of these measures. The root\\nmean square (RMS) voltage is typically used with these units.\"],\"comment\":\"Reference = 1 V\"}},{\"line\":\"dBmV = x => dB(0.5 x) mV\",\"info\":{\"headingsIndex\":[11,11,1],\"headingLevel\":3,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.1. When used to measure amplitude, voltage, or current the signal is squared\\nbecause power is proportional to the square of these measures. The root\\nmean square (RMS) voltage is typically used with these units.\"],\"comment\":\"Reference = 1 mV\"}},{\"line\":\"dBmV^-1 = dBmV => ~dB(dBmV^2/mV^2)\",\"info\":{\"headingsIndex\":[11,11,1],\"headingLevel\":3,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.1. When used to measure amplitude, voltage, or current the signal is squared\\nbecause power is proportional to the square of these measures. The root\\nmean square (RMS) voltage is typically used with these units.\"],\"comment\":\"Reference = 1 mV\"}},{\"line\":\"dBuV = x => dB(0.5 x) microV \",\"info\":{\"headingsIndex\":[11,11,1],\"headingLevel\":3,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.1. When used to measure amplitude, voltage, or current the signal is squared\\nbecause power is proportional to the square of these measures. The root\\nmean square (RMS) voltage is typically used with these units.\"],\"comment\":\"Reference = 1 microvolt\"}},{\"line\":\"dBuV^-1 = dBuV => ~dB(dBuV^2 / microV^2)\",\"info\":{\"headingsIndex\":[11,11,1],\"headingLevel\":3,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.1. When used to measure amplitude, voltage, or current the signal is squared\\nbecause power is proportional to the square of these measures. The root\\nmean square (RMS) voltage is typically used with these units.\"],\"comment\":\"Reference = 1 microvolt\"}},{\"line\":\"dBu = x => dB(0.5 x) sqrt(mW 600 ohm) \",\"info\":{\"headingsIndex\":[11,11,2],\"headingLevel\":3,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.2. Referenced to the voltage that causes 1 mW dissipation in a 600 ohm load.\\nOriginally defined as dBv but changed to prevent confusion with dBV.\\nThe \\\"u\\\" is for unloaded.\"],\"comment\":\"\"}},{\"line\":\"dBu^-1 = dBu => ~dB(dBu^2 / mW 600 ohm)\",\"info\":{\"headingsIndex\":[11,11,2],\"headingLevel\":3,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.2. Referenced to the voltage that causes 1 mW dissipation in a 600 ohm load.\\nOriginally defined as dBv but changed to prevent confusion with dBV.\\nThe \\\"u\\\" is for unloaded.\"],\"comment\":\"\"}},{\"line\":\"dBv = x => dBu(x) \",\"info\":{\"headingsIndex\":[11,11,2],\"headingLevel\":3,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.2. Referenced to the voltage that causes 1 mW dissipation in a 600 ohm load.\\nOriginally defined as dBv but changed to prevent confusion with dBV.\\nThe \\\"u\\\" is for unloaded.\"],\"comment\":\"Synonym for dBu\"}},{\"line\":\"dBv^-1 = dBv => ~dBu(dBv)\",\"info\":{\"headingsIndex\":[11,11,2],\"headingLevel\":3,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.2. Referenced to the voltage that causes 1 mW dissipation in a 600 ohm load.\\nOriginally defined as dBv but changed to prevent confusion with dBV.\\nThe \\\"u\\\" is for unloaded.\"],\"comment\":\"Synonym for dBu\"}},{\"line\":\"dBSPL = x => dB(0.5 x) 20 microPa \",\"info\":{\"headingsIndex\":[11,11,3],\"headingLevel\":3,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.3. Measurements for sound in air, referenced to the threshold of human hearing\\nNote that sound in other media typically uses 1 micropascal as a reference\\nfor sound pressure. Units dBA, dBB, dBC, refer to different frequency\\nweightings meant to approximate the human ear's response.\"],\"comment\":\"pressure\"}},{\"line\":\"dBSPL^-1 = dBSPL => ~dB(dBSPL^2 / (20 microPa)^2)\",\"info\":{\"headingsIndex\":[11,11,3],\"headingLevel\":3,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.3. Measurements for sound in air, referenced to the threshold of human hearing\\nNote that sound in other media typically uses 1 micropascal as a reference\\nfor sound pressure. Units dBA, dBB, dBC, refer to different frequency\\nweightings meant to approximate the human ear's response.\"],\"comment\":\"pressure\"}},{\"line\":\"dBSIL = x => dB(x) 1e-12 W/m^2\",\"info\":{\"headingsIndex\":[11,11,3],\"headingLevel\":3,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.3. Measurements for sound in air, referenced to the threshold of human hearing\\nNote that sound in other media typically uses 1 micropascal as a reference\\nfor sound pressure. Units dBA, dBB, dBC, refer to different frequency\\nweightings meant to approximate the human ear's response.\"],\"comment\":\"intensity\"}},{\"line\":\"dBSIL^-1 = dBSIL => ~dB(dBSIL / (1e-12 W/m^2))\",\"info\":{\"headingsIndex\":[11,11,3],\"headingLevel\":3,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.3. Measurements for sound in air, referenced to the threshold of human hearing\\nNote that sound in other media typically uses 1 micropascal as a reference\\nfor sound pressure. Units dBA, dBB, dBC, refer to different frequency\\nweightings meant to approximate the human ear's response.\"],\"comment\":\"intensity\"}},{\"line\":\"dBSWL = x => dB(x) 1e-12 W\",\"info\":{\"headingsIndex\":[11,11,3],\"headingLevel\":3,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.3. Measurements for sound in air, referenced to the threshold of human hearing\\nNote that sound in other media typically uses 1 micropascal as a reference\\nfor sound pressure. Units dBA, dBB, dBC, refer to different frequency\\nweightings meant to approximate the human ear's response.\"],\"comment\":\"\"}},{\"line\":\"dBSWL^-1 = dBSWL => ~dB(dBSWL/1e-12 W)\",\"info\":{\"headingsIndex\":[11,11,3],\"headingLevel\":3,\"headings\":[\"11. Other units of work, energy, power, etc\",\"11.11. The bel was defined by engineers of Bell Laboratories to describe the\\nreduction in audio level over a length of one mile. It was originally\\ncalled the transmission unit (TU) but was renamed around 1923 to honor\\nAlexander Graham Bell. The bel proved inconveniently large so the decibel\\nhas become more common. The decibel is dimensionless since it reports a\\nratio, but it is used in various contexts to report a signal's power\\nrelative to some reference level.\",\"11.11.3. Measurements for sound in air, referenced to the threshold of human hearing\\nNote that sound in other media typically uses 1 micropascal as a reference\\nfor sound pressure. Units dBA, dBB, dBC, refer to different frequency\\nweightings meant to approximate the human ear's response.\"],\"comment\":\"\"}},{\"line\":\"ENTROPY = ENERGY / TEMPERATURE\",\"info\":{\"headingsIndex\":[12],\"headingLevel\":1,\"headings\":[\"12. Misc other measures\"],\"comment\":\"\"}},{\"line\":\"clausius = 1e3 cal/K\",\"info\":{\"headingsIndex\":[12],\"headingLevel\":1,\"headings\":[\"12. Misc other measures\"],\"comment\":\"A unit of physical entropy\"}},{\"line\":\"langley = thermcalorie/cm^2\",\"info\":{\"headingsIndex\":[12],\"headingLevel\":1,\"headings\":[\"12. Misc other measures\"],\"comment\":\"Used in radiation theory\"}},{\"line\":\"poncelet = 100 kg force m / s\",\"info\":{\"headingsIndex\":[12],\"headingLevel\":1,\"headings\":[\"12. Misc other measures\"],\"comment\":\"\"}},{\"line\":\"tonrefrigeration = uston 144 btu / lb day\",\"info\":{\"headingsIndex\":[12],\"headingLevel\":1,\"headings\":[\"12. Misc other measures\"],\"comment\":\"One ton refrigeration is\\nthe rate of heat extraction required\\nturn one ton of water to ice in\\na day.  Ice is defined to have a\\nlatent heat of 144 btu/lb.\"}},{\"line\":\"tonref = tonrefrigeration\",\"info\":{\"headingsIndex\":[12],\"headingLevel\":1,\"headings\":[\"12. Misc other measures\"],\"comment\":\"One ton refrigeration is\\nthe rate of heat extraction required\\nturn one ton of water to ice in\\na day.  Ice is defined to have a\\nlatent heat of 144 btu/lb.\"}},{\"line\":\"refrigeration = tonref / ton\",\"info\":{\"headingsIndex\":[12],\"headingLevel\":1,\"headings\":[\"12. Misc other measures\"],\"comment\":\"\"}},{\"line\":\"frigorie = 1000 cal_fifteen\",\"info\":{\"headingsIndex\":[12],\"headingLevel\":1,\"headings\":[\"12. Misc other measures\"],\"comment\":\"Used in refrigeration engineering.\"}},{\"line\":\"tnt = 1e9 cal_th / ton\",\"info\":{\"headingsIndex\":[12],\"headingLevel\":1,\"headings\":[\"12. Misc other measures\"],\"comment\":\"So you can write tons tnt. This\\nis a defined, not measured, value.\"}},{\"line\":\"airwatt = 8.5 (ft^3/min) inH2O\",\"info\":{\"headingsIndex\":[12],\"headingLevel\":1,\"headings\":[\"12. Misc other measures\"],\"comment\":\"Measure of vacuum power as\\npressure times air flow.\"}},{\"line\":\"perm_0C = grain / hr ft^2 inHg\",\"info\":{\"headingsIndex\":[13],\"headingLevel\":1,\"headings\":[\"13. Permeability: The permeability or permeance, n, of a substance determines\\nhow fast vapor flows through the substance. The formula W = n A dP\\nholds where W is the rate of flow (in mass/time), n is the permeability,\\nA is the area of the flow path, and dP is the vapor pressure difference.\"],\"comment\":\"\"}},{\"line\":\"perm_zero = perm_0C\",\"info\":{\"headingsIndex\":[13],\"headingLevel\":1,\"headings\":[\"13. Permeability: The permeability or permeance, n, of a substance determines\\nhow fast vapor flows through the substance. The formula W = n A dP\\nholds where W is the rate of flow (in mass/time), n is the permeability,\\nA is the area of the flow path, and dP is the vapor pressure difference.\"],\"comment\":\"\"}},{\"line\":\"perm_0 = perm_0C\",\"info\":{\"headingsIndex\":[13],\"headingLevel\":1,\"headings\":[\"13. Permeability: The permeability or permeance, n, of a substance determines\\nhow fast vapor flows through the substance. The formula W = n A dP\\nholds where W is the rate of flow (in mass/time), n is the permeability,\\nA is the area of the flow path, and dP is the vapor pressure difference.\"],\"comment\":\"\"}},{\"line\":\"perm = perm_0C\",\"info\":{\"headingsIndex\":[13],\"headingLevel\":1,\"headings\":[\"13. Permeability: The permeability or permeance, n, of a substance determines\\nhow fast vapor flows through the substance. The formula W = n A dP\\nholds where W is the rate of flow (in mass/time), n is the permeability,\\nA is the area of the flow path, and dP is the vapor pressure difference.\"],\"comment\":\"\"}},{\"line\":\"perm_23C = grain / hr ft^2 in Hg23C\",\"info\":{\"headingsIndex\":[13],\"headingLevel\":1,\"headings\":[\"13. Permeability: The permeability or permeance, n, of a substance determines\\nhow fast vapor flows through the substance. The formula W = n A dP\\nholds where W is the rate of flow (in mass/time), n is the permeability,\\nA is the area of the flow path, and dP is the vapor pressure difference.\"],\"comment\":\"\"}},{\"line\":\"perm_twentythree = perm_23C\",\"info\":{\"headingsIndex\":[13],\"headingLevel\":1,\"headings\":[\"13. Permeability: The permeability or permeance, n, of a substance determines\\nhow fast vapor flows through the substance. The formula W = n A dP\\nholds where W is the rate of flow (in mass/time), n is the permeability,\\nA is the area of the flow path, and dP is the vapor pressure difference.\"],\"comment\":\"\"}},{\"line\":\"pair = 2\",\"info\":{\"headingsIndex\":[14],\"headingLevel\":1,\"headings\":[\"14. Counting measures\"],\"comment\":\"\"}},{\"line\":\"brace = 2\",\"info\":{\"headingsIndex\":[14],\"headingLevel\":1,\"headings\":[\"14. Counting measures\"],\"comment\":\"\"}},{\"line\":\"nest = 3\",\"info\":{\"headingsIndex\":[14],\"headingLevel\":1,\"headings\":[\"14. Counting measures\"],\"comment\":\"often used for items like bowls that\\nnest together\\nUsed in sports, especially cricket and ice\\nhockey to report the number of goals.\"}},{\"line\":\"hattrick = 3\",\"info\":{\"headingsIndex\":[14],\"headingLevel\":1,\"headings\":[\"14. Counting measures\"],\"comment\":\"often used for items like bowls that\\nnest together\\nUsed in sports, especially cricket and ice\\nhockey to report the number of goals.\"}},{\"line\":\"dicker = 10\",\"info\":{\"headingsIndex\":[14],\"headingLevel\":1,\"headings\":[\"14. Counting measures\"],\"comment\":\"\"}},{\"line\":\"dozen = 12\",\"info\":{\"headingsIndex\":[14],\"headingLevel\":1,\"headings\":[\"14. Counting measures\"],\"comment\":\"\"}},{\"line\":\"bakersdozen = 13\",\"info\":{\"headingsIndex\":[14],\"headingLevel\":1,\"headings\":[\"14. Counting measures\"],\"comment\":\"\"}},{\"line\":\"score = 20\",\"info\":{\"headingsIndex\":[14],\"headingLevel\":1,\"headings\":[\"14. Counting measures\"],\"comment\":\"\"}},{\"line\":\"flock = 40\",\"info\":{\"headingsIndex\":[14],\"headingLevel\":1,\"headings\":[\"14. Counting measures\"],\"comment\":\"\"}},{\"line\":\"timer = 40\",\"info\":{\"headingsIndex\":[14],\"headingLevel\":1,\"headings\":[\"14. Counting measures\"],\"comment\":\"\"}},{\"line\":\"shock = 60\",\"info\":{\"headingsIndex\":[14],\"headingLevel\":1,\"headings\":[\"14. Counting measures\"],\"comment\":\"\"}},{\"line\":\"toncount = 100\",\"info\":{\"headingsIndex\":[14],\"headingLevel\":1,\"headings\":[\"14. Counting measures\"],\"comment\":\"Used in sports in the UK\"}},{\"line\":\"longhundred = 120\",\"info\":{\"headingsIndex\":[14],\"headingLevel\":1,\"headings\":[\"14. Counting measures\"],\"comment\":\"From a germanic counting system\"}},{\"line\":\"gross = 144\",\"info\":{\"headingsIndex\":[14],\"headingLevel\":1,\"headings\":[\"14. Counting measures\"],\"comment\":\"\"}},{\"line\":\"greatgross = 12 gross\",\"info\":{\"headingsIndex\":[14],\"headingLevel\":1,\"headings\":[\"14. Counting measures\"],\"comment\":\"\"}},{\"line\":\"tithe = 1|10\",\"info\":{\"headingsIndex\":[14],\"headingLevel\":1,\"headings\":[\"14. Counting measures\"],\"comment\":\"From Anglo-Saxon word for tenth\"}},{\"line\":\"shortquire = 24\",\"info\":{\"headingsIndex\":[14,1],\"headingLevel\":2,\"headings\":[\"14. Counting measures\",\"14.1. Paper counting measure\"],\"comment\":\"\"}},{\"line\":\"quire = 25\",\"info\":{\"headingsIndex\":[14,1],\"headingLevel\":2,\"headings\":[\"14. Counting measures\",\"14.1. Paper counting measure\"],\"comment\":\"\"}},{\"line\":\"shortream = 480\",\"info\":{\"headingsIndex\":[14,1],\"headingLevel\":2,\"headings\":[\"14. Counting measures\",\"14.1. Paper counting measure\"],\"comment\":\"\"}},{\"line\":\"ream = 500\",\"info\":{\"headingsIndex\":[14,1],\"headingLevel\":2,\"headings\":[\"14. Counting measures\",\"14.1. Paper counting measure\"],\"comment\":\"\"}},{\"line\":\"perfectream = 516\",\"info\":{\"headingsIndex\":[14,1],\"headingLevel\":2,\"headings\":[\"14. Counting measures\",\"14.1. Paper counting measure\"],\"comment\":\"\"}},{\"line\":\"bundle = 2 reams\",\"info\":{\"headingsIndex\":[14,1],\"headingLevel\":2,\"headings\":[\"14. Counting measures\",\"14.1. Paper counting measure\"],\"comment\":\"\"}},{\"line\":\"bale = 5 bundles\",\"info\":{\"headingsIndex\":[14,1],\"headingLevel\":2,\"headings\":[\"14. Counting measures\",\"14.1. Paper counting measure\"],\"comment\":\"\"}},{\"line\":\"lettersize = 8.5 inch 11 inch\",\"info\":{\"headingsIndex\":[15,1],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\"],\"comment\":\"\"}},{\"line\":\"legalsize = 8.5 inch 14 inch\",\"info\":{\"headingsIndex\":[15,1],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\"],\"comment\":\"\"}},{\"line\":\"ledgersize = 11 inch 17 inch\",\"info\":{\"headingsIndex\":[15,1],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\"],\"comment\":\"\"}},{\"line\":\"executivesize = 7.25 inch 10.5 inch\",\"info\":{\"headingsIndex\":[15,1],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\"],\"comment\":\"\"}},{\"line\":\"Apaper = 8.5 inch 11 inch\",\"info\":{\"headingsIndex\":[15,1],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\"],\"comment\":\"\"}},{\"line\":\"Bpaper = 11 inch 17 inch\",\"info\":{\"headingsIndex\":[15,1],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\"],\"comment\":\"\"}},{\"line\":\"Cpaper = 17 inch 22 inch\",\"info\":{\"headingsIndex\":[15,1],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\"],\"comment\":\"\"}},{\"line\":\"Dpaper = 22 inch 34 inch\",\"info\":{\"headingsIndex\":[15,1],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\"],\"comment\":\"\"}},{\"line\":\"Epaper = 34 inch 44 inch\",\"info\":{\"headingsIndex\":[15,1],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\"],\"comment\":\"\"}},{\"line\":\"envelope6_25size = 3.5 inch 6 inch\",\"info\":{\"headingsIndex\":[15,1,1],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.1. Correspondence envelope sizes. 10 is the standard business\\nenvelope in the USA.\"],\"comment\":\"\"}},{\"line\":\"envelope6_75size = 3.625 inch 6.5 inch\",\"info\":{\"headingsIndex\":[15,1,1],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.1. Correspondence envelope sizes. 10 is the standard business\\nenvelope in the USA.\"],\"comment\":\"\"}},{\"line\":\"envelope7size = 3.75 inch 6.75 inch\",\"info\":{\"headingsIndex\":[15,1,1],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.1. Correspondence envelope sizes. 10 is the standard business\\nenvelope in the USA.\"],\"comment\":\"\"}},{\"line\":\"envelope7_75size = 3.875 inch 7.5 inch\",\"info\":{\"headingsIndex\":[15,1,1],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.1. Correspondence envelope sizes. 10 is the standard business\\nenvelope in the USA.\"],\"comment\":\"\"}},{\"line\":\"envelope8_625size = 3.625 inch 8.625 inch\",\"info\":{\"headingsIndex\":[15,1,1],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.1. Correspondence envelope sizes. 10 is the standard business\\nenvelope in the USA.\"],\"comment\":\"\"}},{\"line\":\"envelope9size = 3.875 inch 8.875 inch\",\"info\":{\"headingsIndex\":[15,1,1],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.1. Correspondence envelope sizes. 10 is the standard business\\nenvelope in the USA.\"],\"comment\":\"\"}},{\"line\":\"envelope10size = 4.125 inch 9.5 inch\",\"info\":{\"headingsIndex\":[15,1,1],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.1. Correspondence envelope sizes. 10 is the standard business\\nenvelope in the USA.\"],\"comment\":\"\"}},{\"line\":\"envelope11size = 4.5 inch 10.375 inch\",\"info\":{\"headingsIndex\":[15,1,1],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.1. Correspondence envelope sizes. 10 is the standard business\\nenvelope in the USA.\"],\"comment\":\"\"}},{\"line\":\"envelope12size = 4.75 inch 11 inch\",\"info\":{\"headingsIndex\":[15,1,1],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.1. Correspondence envelope sizes. 10 is the standard business\\nenvelope in the USA.\"],\"comment\":\"\"}},{\"line\":\"envelope14size = 5 inch 11.5 inch\",\"info\":{\"headingsIndex\":[15,1,1],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.1. Correspondence envelope sizes. 10 is the standard business\\nenvelope in the USA.\"],\"comment\":\"\"}},{\"line\":\"envelope16size = 6 inch 12 inch\",\"info\":{\"headingsIndex\":[15,1,1],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.1. Correspondence envelope sizes. 10 is the standard business\\nenvelope in the USA.\"],\"comment\":\"\"}},{\"line\":\"envelopeA1size = 3.625 inch 5.125 inch\",\"info\":{\"headingsIndex\":[15,1,2],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.2. Announcement envelope sizes (no relation to metric paper sizes like A4)\"],\"comment\":\"same as 4bar\"}},{\"line\":\"envelopeA2size = 4.375 inch 5.75 inch\",\"info\":{\"headingsIndex\":[15,1,2],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.2. Announcement envelope sizes (no relation to metric paper sizes like A4)\"],\"comment\":\"\"}},{\"line\":\"envelopeA6size = 4.75 inch 6.5 inch\",\"info\":{\"headingsIndex\":[15,1,2],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.2. Announcement envelope sizes (no relation to metric paper sizes like A4)\"],\"comment\":\"\"}},{\"line\":\"envelopeA7size = 5.25 inch 7.25 inch\",\"info\":{\"headingsIndex\":[15,1,2],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.2. Announcement envelope sizes (no relation to metric paper sizes like A4)\"],\"comment\":\"\"}},{\"line\":\"envelopeA8size = 5.5 inch 8.125 inch\",\"info\":{\"headingsIndex\":[15,1,2],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.2. Announcement envelope sizes (no relation to metric paper sizes like A4)\"],\"comment\":\"\"}},{\"line\":\"envelopeA9size = 5.75 inch 8.75 inch\",\"info\":{\"headingsIndex\":[15,1,2],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.2. Announcement envelope sizes (no relation to metric paper sizes like A4)\"],\"comment\":\"\"}},{\"line\":\"envelopeA10size = 6 inch 9.5 inch\",\"info\":{\"headingsIndex\":[15,1,2],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.2. Announcement envelope sizes (no relation to metric paper sizes like A4)\"],\"comment\":\"\"}},{\"line\":\"envelope4bar = 3.625 inch 5.125 inch\",\"info\":{\"headingsIndex\":[15,1,3],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.3. Baronial envelopes\"],\"comment\":\"same as A1\"}},{\"line\":\"envelope5_5bar = 4.375 inch 5.75 inch\",\"info\":{\"headingsIndex\":[15,1,3],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.3. Baronial envelopes\"],\"comment\":\"\"}},{\"line\":\"envelope6bar = 4.75 inch 6.5 inch\",\"info\":{\"headingsIndex\":[15,1,3],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.3. Baronial envelopes\"],\"comment\":\"\"}},{\"line\":\"envelope1baby = 2.25 inch 3.5 inch\",\"info\":{\"headingsIndex\":[15,1,4],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.4. Coin envelopes\"],\"comment\":\"same as\"}},{\"line\":\"envelope00coin = 1.6875 inch 2.75 inch\",\"info\":{\"headingsIndex\":[15,1,4],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.4. Coin envelopes\"],\"comment\":\"\"}},{\"line\":\"envelope1coin = 2.25 inch 3.5 inch\",\"info\":{\"headingsIndex\":[15,1,4],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.4. Coin envelopes\"],\"comment\":\"\"}},{\"line\":\"envelope3coin = 2.5 inch 4.25 inch\",\"info\":{\"headingsIndex\":[15,1,4],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.4. Coin envelopes\"],\"comment\":\"\"}},{\"line\":\"envelope4coin = 3 inch 4.5 inch\",\"info\":{\"headingsIndex\":[15,1,4],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.4. Coin envelopes\"],\"comment\":\"\"}},{\"line\":\"envelope4_5coin = 3 inch 4.875 inch\",\"info\":{\"headingsIndex\":[15,1,4],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.4. Coin envelopes\"],\"comment\":\"\"}},{\"line\":\"envelope5coin = 2.875 inch 5.25 inch\",\"info\":{\"headingsIndex\":[15,1,4],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.4. Coin envelopes\"],\"comment\":\"\"}},{\"line\":\"envelope5_5coin = 3.125 inch 5.5 inch\",\"info\":{\"headingsIndex\":[15,1,4],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.4. Coin envelopes\"],\"comment\":\"\"}},{\"line\":\"envelope6coin = 3.375 inch 6 inch\",\"info\":{\"headingsIndex\":[15,1,4],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.4. Coin envelopes\"],\"comment\":\"\"}},{\"line\":\"envelope7coin = 3.5 inch 6.5 inch\",\"info\":{\"headingsIndex\":[15,1,4],\"headingLevel\":3,\"headings\":[\"15. Paper measures\",\"15.1. USA paper sizes\",\"15.1.4. Coin envelopes\"],\"comment\":\"\"}},{\"line\":\"A0paper = 841 mm 1189 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic size in the A series\\nis defined to have an area of\\none square meter.\"}},{\"line\":\"A1paper = 594 mm  841 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic size in the A series\\nis defined to have an area of\\none square meter.\"}},{\"line\":\"A2paper = 420 mm  594 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic size in the A series\\nis defined to have an area of\\none square meter.\"}},{\"line\":\"A3paper = 297 mm  420 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic size in the A series\\nis defined to have an area of\\none square meter.\"}},{\"line\":\"A4paper = 210 mm  297 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic size in the A series\\nis defined to have an area of\\none square meter.\"}},{\"line\":\"A5paper = 148 mm  210 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic size in the A series\\nis defined to have an area of\\none square meter.\"}},{\"line\":\"A6paper = 105 mm  148 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic size in the A series\\nis defined to have an area of\\none square meter.\"}},{\"line\":\"A7paper = 74 mm  105 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic size in the A series\\nis defined to have an area of\\none square meter.\"}},{\"line\":\"A8paper = 52 mm   74 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic size in the A series\\nis defined to have an area of\\none square meter.\"}},{\"line\":\"A9paper = 37 mm   52 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic size in the A series\\nis defined to have an area of\\none square meter.\"}},{\"line\":\"A10paper = 26 mm   37 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic size in the A series\\nis defined to have an area of\\none square meter.\"}},{\"line\":\"B0paper = 1000 mm 1414 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic B size has an area\\nof sqrt(2) square meters.\"}},{\"line\":\"B1paper = 707 mm 1000 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic B size has an area\\nof sqrt(2) square meters.\"}},{\"line\":\"B2paper = 500 mm  707 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic B size has an area\\nof sqrt(2) square meters.\"}},{\"line\":\"B3paper = 353 mm  500 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic B size has an area\\nof sqrt(2) square meters.\"}},{\"line\":\"B4paper = 250 mm  353 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic B size has an area\\nof sqrt(2) square meters.\"}},{\"line\":\"B5paper = 176 mm  250 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic B size has an area\\nof sqrt(2) square meters.\"}},{\"line\":\"B6paper = 125 mm  176 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic B size has an area\\nof sqrt(2) square meters.\"}},{\"line\":\"B7paper = 88 mm  125 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic B size has an area\\nof sqrt(2) square meters.\"}},{\"line\":\"B8paper = 62 mm   88 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic B size has an area\\nof sqrt(2) square meters.\"}},{\"line\":\"B9paper = 44 mm   62 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic B size has an area\\nof sqrt(2) square meters.\"}},{\"line\":\"B10paper = 31 mm   44 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic B size has an area\\nof sqrt(2) square meters.\"}},{\"line\":\"C0paper = 917 mm 1297 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic C size has an area\\nof sqrt(sqrt(2)) square meters.\\n\\nIntended for envelope sizes\"}},{\"line\":\"C1paper = 648 mm  917 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic C size has an area\\nof sqrt(sqrt(2)) square meters.\\n\\nIntended for envelope sizes\"}},{\"line\":\"C2paper = 458 mm  648 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic C size has an area\\nof sqrt(sqrt(2)) square meters.\\n\\nIntended for envelope sizes\"}},{\"line\":\"C3paper = 324 mm  458 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic C size has an area\\nof sqrt(sqrt(2)) square meters.\\n\\nIntended for envelope sizes\"}},{\"line\":\"C4paper = 229 mm  324 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic C size has an area\\nof sqrt(sqrt(2)) square meters.\\n\\nIntended for envelope sizes\"}},{\"line\":\"C5paper = 162 mm  229 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic C size has an area\\nof sqrt(sqrt(2)) square meters.\\n\\nIntended for envelope sizes\"}},{\"line\":\"C6paper = 114 mm  162 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic C size has an area\\nof sqrt(sqrt(2)) square meters.\\n\\nIntended for envelope sizes\"}},{\"line\":\"C7paper = 81 mm  114 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic C size has an area\\nof sqrt(sqrt(2)) square meters.\\n\\nIntended for envelope sizes\"}},{\"line\":\"C8paper = 57 mm   81 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic C size has an area\\nof sqrt(sqrt(2)) square meters.\\n\\nIntended for envelope sizes\"}},{\"line\":\"C9paper = 40 mm   57 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic C size has an area\\nof sqrt(sqrt(2)) square meters.\\n\\nIntended for envelope sizes\"}},{\"line\":\"C10paper = 28 mm   40 mm\",\"info\":{\"headingsIndex\":[15,2],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.2. The metric paper sizes are defined so that if a sheet is cut in half\\nalong the short direction, the result is two sheets which are\\nsimilar to the original sheet. This means that for any metric size,\\nthe long side is close to sqrt(2) times the length of the short\\nside. Each series of sizes is generated by repeated cuts in half,\\nwith the values rounded down to the nearest millimeter.\"],\"comment\":\"The basic C size has an area\\nof sqrt(sqrt(2)) square meters.\\n\\nIntended for envelope sizes\"}},{\"line\":\"gsm = grams / meter^2\",\"info\":{\"headingsIndex\":[15,3],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.3. gsm (Grams per Square Meter), a sane, metric paper weight measure\"],\"comment\":\"\"}},{\"line\":\"poundbookpaper = lb / 25 inch 38 inch ream\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"For offset printing\\n\\nDesigned to be lightweight, thin,\\nstrong and opaque.\"}},{\"line\":\"lbbook = poundbookpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"For offset printing\\n\\nDesigned to be lightweight, thin,\\nstrong and opaque.\"}},{\"line\":\"poundtextpaper = poundbookpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"For offset printing\\n\\nDesigned to be lightweight, thin,\\nstrong and opaque.\"}},{\"line\":\"lbtext = poundtextpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"For offset printing\\n\\nDesigned to be lightweight, thin,\\nstrong and opaque.\"}},{\"line\":\"poundoffsetpaper = poundbookpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"For offset printing\\n\\nDesigned to be lightweight, thin,\\nstrong and opaque.\"}},{\"line\":\"lboffset = poundoffsetpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"For offset printing\\n\\nDesigned to be lightweight, thin,\\nstrong and opaque.\"}},{\"line\":\"poundbiblepaper = poundbookpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"For offset printing\\n\\nDesigned to be lightweight, thin,\\nstrong and opaque.\"}},{\"line\":\"lbbible = poundbiblepaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"For offset printing\\n\\nDesigned to be lightweight, thin,\\nstrong and opaque.\"}},{\"line\":\"poundtagpaper = lb / 24 inch 36 inch ream\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbtag = poundtagpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundbagpaper = poundtagpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbbag = poundbagpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundnewsprintpaper = poundtagpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbnewsprint = poundnewsprintpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundposterpaper = poundtagpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbposter = poundposterpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundtissuepaper = poundtagpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbtissue = poundtissuepaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundwrappingpaper = poundtagpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbwrapping = poundwrappingpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundwaxingpaper = poundtagpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbwaxing = poundwaxingpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundglassinepaper = poundtagpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbglassine = poundglassinepaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundcoverpaper = lb / 20 inch 26 inch ream\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbcover = poundcoverpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundindexpaper = lb / 25.5 inch 30.5 inch ream\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbindex = poundindexpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundindexbristolpaper = poundindexpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbindexbristol = poundindexpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundbondpaper = lb / 17 inch 22 inch ream\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"Bond paper is stiff and\\ndurable for repeated\\nfiling, and it resists\\nink penetration.\"}},{\"line\":\"lbbond = poundbondpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"Bond paper is stiff and\\ndurable for repeated\\nfiling, and it resists\\nink penetration.\"}},{\"line\":\"poundwritingpaper = poundbondpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"Bond paper is stiff and\\ndurable for repeated\\nfiling, and it resists\\nink penetration.\"}},{\"line\":\"lbwriting = poundwritingpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"Bond paper is stiff and\\ndurable for repeated\\nfiling, and it resists\\nink penetration.\"}},{\"line\":\"poundledgerpaper = poundbondpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"Bond paper is stiff and\\ndurable for repeated\\nfiling, and it resists\\nink penetration.\"}},{\"line\":\"lbledger = poundledgerpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"Bond paper is stiff and\\ndurable for repeated\\nfiling, and it resists\\nink penetration.\"}},{\"line\":\"poundcopypaper = poundbondpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"Bond paper is stiff and\\ndurable for repeated\\nfiling, and it resists\\nink penetration.\"}},{\"line\":\"lbcopy = poundcopypaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"Bond paper is stiff and\\ndurable for repeated\\nfiling, and it resists\\nink penetration.\"}},{\"line\":\"poundblottingpaper = lb / 19 inch 24 inch ream\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbblotting = poundblottingpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundblankspaper = lb / 22 inch 28 inch ream\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbblanks = poundblankspaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundpostcardpaper = lb / 22.5 inch 28.5 inch ream\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbpostcard = poundpostcardpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundweddingbristol = poundpostcardpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbweddingbristol = poundweddingbristol\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundbristolpaper = poundweddingbristol\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbbristol = poundbristolpaper\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundboxboard = lb / 1000 ft^2\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbboxboard = poundboxboard\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"poundpaperboard = poundboxboard\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"lbpaperboard = poundpaperboard\",\"info\":{\"headingsIndex\":[15,4],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.4. In the USA, a collection of crazy historical paper measures are used. Paper\\nis measured as a weight of a ream of that particular type of paper. This is\\nsometimes called the \\\"substance\\\" or \\\"basis\\\" (as in \\\"substance 20\\\" paper).\\nThe standard sheet size or \\\"basis size\\\" varies depending on the type of\\npaper. As a result, 20 pound bond paper and 50 pound text paper are actually\\nabout the same weight. The different sheet sizes were historically the most\\nconvenient for printing or folding in the different applications. These\\ndifferent basis weights are standards maintained by American Society for\\nTesting Materials (ASTM) and the American Forest and Paper Association\\n(AF&PA).\"],\"comment\":\"\"}},{\"line\":\"paperM = lb / 1000\",\"info\":{\"headingsIndex\":[15,5],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.5. When paper is marked in units of M, it means the weight of 1000 sheets of the\\ngiven size of paper. To convert this to paper weight, divide by the size of\\nthe paper in question.\"],\"comment\":\"\"}},{\"line\":\"pointthickness = 0.001 in\",\"info\":{\"headingsIndex\":[15,6],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.6. In addition paper weight is reported in \\\"caliper\\\" which is simply the\\nthickness of one sheet, typically in inches. Thickness is also reported in\\n\\\"points\\\" where a point is 1|1000 inch. These conversions are supplied to\\nconvert these units roughly (using an approximate density) into the standard\\npaper weight values.\"],\"comment\":\"\"}},{\"line\":\"paperdensity = 0.8 g/cm^3\",\"info\":{\"headingsIndex\":[15,6],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.6. In addition paper weight is reported in \\\"caliper\\\" which is simply the\\nthickness of one sheet, typically in inches. Thickness is also reported in\\n\\\"points\\\" where a point is 1|1000 inch. These conversions are supplied to\\nconvert these units roughly (using an approximate density) into the standard\\npaper weight values.\"],\"comment\":\"approximate--paper densities vary!\"}},{\"line\":\"papercaliper = in paperdensity\",\"info\":{\"headingsIndex\":[15,6],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.6. In addition paper weight is reported in \\\"caliper\\\" which is simply the\\nthickness of one sheet, typically in inches. Thickness is also reported in\\n\\\"points\\\" where a point is 1|1000 inch. These conversions are supplied to\\nconvert these units roughly (using an approximate density) into the standard\\npaper weight values.\"],\"comment\":\"\"}},{\"line\":\"paperpoint = pointthickness paperdensity\",\"info\":{\"headingsIndex\":[15,6],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.6. In addition paper weight is reported in \\\"caliper\\\" which is simply the\\nthickness of one sheet, typically in inches. Thickness is also reported in\\n\\\"points\\\" where a point is 1|1000 inch. These conversions are supplied to\\nconvert these units roughly (using an approximate density) into the standard\\npaper weight values.\"],\"comment\":\"\"}},{\"line\":\"fournierpoint = 0.1648 inch / 12\",\"info\":{\"headingsIndex\":[15,7],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.7. Printing\"],\"comment\":\"First definition of the printers\\npoint made by Pierre Fournier who\\ndefined it in 1737 as 1|12 of a\\ncicero which was 0.1648 inches.\"}},{\"line\":\"olddidotpoint = 1|72 frenchinch\",\"info\":{\"headingsIndex\":[15,7],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.7. Printing\"],\"comment\":\"François Ambroise Didot, one of\\na family of printers, changed\\nFournier's definition around 1770\\nto fit to the French units then in\\nuse.\"}},{\"line\":\"bertholdpoint = 1|2660 m\",\"info\":{\"headingsIndex\":[15,7],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.7. Printing\"],\"comment\":\"H. Berthold tried to create a\\nmetric version of the didot point\\nin 1878.\"}},{\"line\":\"INpoint = 0.4 mm\",\"info\":{\"headingsIndex\":[15,7],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.7. Printing\"],\"comment\":\"This point was created by a\\ngroup directed by Fermin Didot in\\n1881 and is associated with the\\nimprimerie nationale.  It doesn't\\nseem to have been used much.\"}},{\"line\":\"germandidotpoint = 0.376065 mm\",\"info\":{\"headingsIndex\":[15,7],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.7. Printing\"],\"comment\":\"Exact definition appears in DIN\\n16507, a German standards document\\nof 1954.  Adopted more broadly  in\\n1966 by ???\"}},{\"line\":\"metricpoint = 3|8 mm\",\"info\":{\"headingsIndex\":[15,7],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.7. Printing\"],\"comment\":\"Proposed in 1977 by Eurograf\"}},{\"line\":\"oldpoint = 1|72.27 inch\",\"info\":{\"headingsIndex\":[15,7],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.7. Printing\"],\"comment\":\"The American point was invented\\nby Nelson Hawks in 1879 and\\ndominates USA publishing.\\nIt was standardized by the American\\nTypefounders Association at the\\nvalue of 0.013837 inches exactly.\\nKnuth uses the approximation given\\nhere (which is very close).  The\\ncomp.fonts FAQ claims that this\\nvalue is supposed to be 1|12 of a\\npica where 83 picas is equal to 35\\ncm.  But this value differs from\\nthe standard.\"}},{\"line\":\"printerspoint = oldpoint\",\"info\":{\"headingsIndex\":[15,7],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.7. Printing\"],\"comment\":\"The American point was invented\\nby Nelson Hawks in 1879 and\\ndominates USA publishing.\\nIt was standardized by the American\\nTypefounders Association at the\\nvalue of 0.013837 inches exactly.\\nKnuth uses the approximation given\\nhere (which is very close).  The\\ncomp.fonts FAQ claims that this\\nvalue is supposed to be 1|12 of a\\npica where 83 picas is equal to 35\\ncm.  But this value differs from\\nthe standard.\"}},{\"line\":\"texpoint = oldpoint\",\"info\":{\"headingsIndex\":[15,7],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.7. Printing\"],\"comment\":\"The American point was invented\\nby Nelson Hawks in 1879 and\\ndominates USA publishing.\\nIt was standardized by the American\\nTypefounders Association at the\\nvalue of 0.013837 inches exactly.\\nKnuth uses the approximation given\\nhere (which is very close).  The\\ncomp.fonts FAQ claims that this\\nvalue is supposed to be 1|12 of a\\npica where 83 picas is equal to 35\\ncm.  But this value differs from\\nthe standard.\"}},{\"line\":\"texscaledpoint = 1|65536 texpoint\",\"info\":{\"headingsIndex\":[15,7],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.7. Printing\"],\"comment\":\"The TeX typesetting system uses\\nthis for all computations.\"}},{\"line\":\"texsp = texscaledpoint\",\"info\":{\"headingsIndex\":[15,7],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.7. Printing\"],\"comment\":\"The TeX typesetting system uses\\nthis for all computations.\"}},{\"line\":\"computerpoint = 1|72 inch\",\"info\":{\"headingsIndex\":[15,7],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.7. Printing\"],\"comment\":\"The American point was rounded\\n\\nto an even 1|72 inch by computer\\npeople at some point.\"}},{\"line\":\"point = computerpoint\",\"info\":{\"headingsIndex\":[15,7],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.7. Printing\"],\"comment\":\"The American point was rounded\\n\\nto an even 1|72 inch by computer\\npeople at some point.\"}},{\"line\":\"computerpica = 12 computerpoint\",\"info\":{\"headingsIndex\":[15,7],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.7. Printing\"],\"comment\":\"The American point was rounded\\n\\nto an even 1|72 inch by computer\\npeople at some point.\"}},{\"line\":\"postscriptpoint = computerpoint\",\"info\":{\"headingsIndex\":[15,7],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.7. Printing\"],\"comment\":\"The American point was rounded\\n\\nto an even 1|72 inch by computer\\npeople at some point.\"}},{\"line\":\"pspoint = postscriptpoint\",\"info\":{\"headingsIndex\":[15,7],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.7. Printing\"],\"comment\":\"The American point was rounded\\n\\nto an even 1|72 inch by computer\\npeople at some point.\"}},{\"line\":\"twip = 1|20 point\",\"info\":{\"headingsIndex\":[15,7],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.7. Printing\"],\"comment\":\"TWentieth of an Imperial Point\"}},{\"line\":\"Q = 1|4 mm\",\"info\":{\"headingsIndex\":[15,7],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.7. Printing\"],\"comment\":\"Used in Japanese phototypesetting\\nQ is for quarter\"}},{\"line\":\"frenchprinterspoint = olddidotpoint\",\"info\":{\"headingsIndex\":[15,7],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.7. Printing\"],\"comment\":\"\"}},{\"line\":\"didotpoint = germandidotpoint\",\"info\":{\"headingsIndex\":[15,7],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.7. Printing\"],\"comment\":\"This seems to be the dominant value\\nfor the point used in Europe\"}},{\"line\":\"europeanpoint = didotpoint\",\"info\":{\"headingsIndex\":[15,7],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.7. Printing\"],\"comment\":\"This seems to be the dominant value\\nfor the point used in Europe\"}},{\"line\":\"cicero = 12 didotpoint\",\"info\":{\"headingsIndex\":[15,7],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.7. Printing\"],\"comment\":\"\"}},{\"line\":\"stick = 2 inches\",\"info\":{\"headingsIndex\":[15,7],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.7. Printing\"],\"comment\":\"\"}},{\"line\":\"excelsior = 3 oldpoint\",\"info\":{\"headingsIndex\":[15,8],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.8. Type sizes\"],\"comment\":\"\"}},{\"line\":\"brilliant = 3.5 oldpoint\",\"info\":{\"headingsIndex\":[15,8],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.8. Type sizes\"],\"comment\":\"\"}},{\"line\":\"diamondtype = 4 oldpoint\",\"info\":{\"headingsIndex\":[15,8],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.8. Type sizes\"],\"comment\":\"\"}},{\"line\":\"pearl = 5 oldpoint\",\"info\":{\"headingsIndex\":[15,8],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.8. Type sizes\"],\"comment\":\"\"}},{\"line\":\"agate = 5.5 oldpoint\",\"info\":{\"headingsIndex\":[15,8],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.8. Type sizes\"],\"comment\":\"Originally agate type was 14 lines per\\ninch, giving a value of 1|14 in.\\nBritish\"}},{\"line\":\"ruby = agate\",\"info\":{\"headingsIndex\":[15,8],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.8. Type sizes\"],\"comment\":\"Originally agate type was 14 lines per\\ninch, giving a value of 1|14 in.\\nBritish\"}},{\"line\":\"nonpareil = 6 oldpoint\",\"info\":{\"headingsIndex\":[15,8],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.8. Type sizes\"],\"comment\":\"\"}},{\"line\":\"mignonette = 6.5 oldpoint\",\"info\":{\"headingsIndex\":[15,8],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.8. Type sizes\"],\"comment\":\"British\"}},{\"line\":\"emerald = mignonette\",\"info\":{\"headingsIndex\":[15,8],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.8. Type sizes\"],\"comment\":\"British\"}},{\"line\":\"minion = 7 oldpoint\",\"info\":{\"headingsIndex\":[15,8],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.8. Type sizes\"],\"comment\":\"\"}},{\"line\":\"brevier = 8 oldpoint\",\"info\":{\"headingsIndex\":[15,8],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.8. Type sizes\"],\"comment\":\"\"}},{\"line\":\"bourgeois = 9 oldpoint\",\"info\":{\"headingsIndex\":[15,8],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.8. Type sizes\"],\"comment\":\"\"}},{\"line\":\"longprimer = 10 oldpoint\",\"info\":{\"headingsIndex\":[15,8],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.8. Type sizes\"],\"comment\":\"\"}},{\"line\":\"smallpica = 11 oldpoint\",\"info\":{\"headingsIndex\":[15,8],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.8. Type sizes\"],\"comment\":\"\"}},{\"line\":\"pica = 12 oldpoint\",\"info\":{\"headingsIndex\":[15,8],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.8. Type sizes\"],\"comment\":\"\"}},{\"line\":\"english = 14 oldpoint\",\"info\":{\"headingsIndex\":[15,8],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.8. Type sizes\"],\"comment\":\"\"}},{\"line\":\"columbian = 16 oldpoint\",\"info\":{\"headingsIndex\":[15,8],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.8. Type sizes\"],\"comment\":\"\"}},{\"line\":\"greatprimer = 18 oldpoint\",\"info\":{\"headingsIndex\":[15,8],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.8. Type sizes\"],\"comment\":\"\"}},{\"line\":\"paragon = 20 oldpoint\",\"info\":{\"headingsIndex\":[15,8],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.8. Type sizes\"],\"comment\":\"\"}},{\"line\":\"meridian = 44 oldpoint\",\"info\":{\"headingsIndex\":[15,8],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.8. Type sizes\"],\"comment\":\"\"}},{\"line\":\"canon = 48 oldpoint\",\"info\":{\"headingsIndex\":[15,8],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.8. Type sizes\"],\"comment\":\"\"}},{\"line\":\"nonplusultra = 2 didotpoint\",\"info\":{\"headingsIndex\":[15,9],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.9. German type sizes\"],\"comment\":\"\"}},{\"line\":\"brillant = 3 didotpoint\",\"info\":{\"headingsIndex\":[15,9],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.9. German type sizes\"],\"comment\":\"\"}},{\"line\":\"diamant = 4 didotpoint\",\"info\":{\"headingsIndex\":[15,9],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.9. German type sizes\"],\"comment\":\"\"}},{\"line\":\"perl = 5 didotpoint\",\"info\":{\"headingsIndex\":[15,9],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.9. German type sizes\"],\"comment\":\"\"}},{\"line\":\"nonpareille = 6 didotpoint\",\"info\":{\"headingsIndex\":[15,9],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.9. German type sizes\"],\"comment\":\"\"}},{\"line\":\"kolonel = 7 didotpoint\",\"info\":{\"headingsIndex\":[15,9],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.9. German type sizes\"],\"comment\":\"\"}},{\"line\":\"petit = 8 didotpoint\",\"info\":{\"headingsIndex\":[15,9],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.9. German type sizes\"],\"comment\":\"\"}},{\"line\":\"borgis = 9 didotpoint\",\"info\":{\"headingsIndex\":[15,9],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.9. German type sizes\"],\"comment\":\"\"}},{\"line\":\"korpus = 10 didotpoint\",\"info\":{\"headingsIndex\":[15,9],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.9. German type sizes\"],\"comment\":\"\"}},{\"line\":\"corpus = korpus\",\"info\":{\"headingsIndex\":[15,9],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.9. German type sizes\"],\"comment\":\"\"}},{\"line\":\"garamond = korpus\",\"info\":{\"headingsIndex\":[15,9],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.9. German type sizes\"],\"comment\":\"\"}},{\"line\":\"mittel = 14 didotpoint\",\"info\":{\"headingsIndex\":[15,9],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.9. German type sizes\"],\"comment\":\"\"}},{\"line\":\"tertia = 16 didotpoint\",\"info\":{\"headingsIndex\":[15,9],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.9. German type sizes\"],\"comment\":\"\"}},{\"line\":\"text = 18 didotpoint\",\"info\":{\"headingsIndex\":[15,9],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.9. German type sizes\"],\"comment\":\"\"}},{\"line\":\"kleine_kanon = 32 didotpoint\",\"info\":{\"headingsIndex\":[15,9],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.9. German type sizes\"],\"comment\":\"\"}},{\"line\":\"kanon = 36 didotpoint\",\"info\":{\"headingsIndex\":[15,9],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.9. German type sizes\"],\"comment\":\"\"}},{\"line\":\"grobe_kanon = 42 didotpoint\",\"info\":{\"headingsIndex\":[15,9],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.9. German type sizes\"],\"comment\":\"\"}},{\"line\":\"missal = 48 didotpoint\",\"info\":{\"headingsIndex\":[15,9],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.9. German type sizes\"],\"comment\":\"\"}},{\"line\":\"kleine_sabon = 72 didotpoint\",\"info\":{\"headingsIndex\":[15,9],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.9. German type sizes\"],\"comment\":\"\"}},{\"line\":\"grobe_sabon = 84 didotpoint\",\"info\":{\"headingsIndex\":[15,9],\"headingLevel\":2,\"headings\":[\"15. Paper measures\",\"15.9. German type sizes\"],\"comment\":\"\"}},{\"line\":\"INFORMATION = bit\",\"info\":{\"headingsIndex\":[16],\"headingLevel\":1,\"headings\":[\"16. Information theory units. Note that the name \\\"entropy\\\" is used both\\nto measure information and as a physical quantity.\"],\"comment\":\"\"}},{\"line\":\"nat = (1/ln(2)) bits\",\"info\":{\"headingsIndex\":[16],\"headingLevel\":1,\"headings\":[\"16. Information theory units. Note that the name \\\"entropy\\\" is used both\\nto measure information and as a physical quantity.\"],\"comment\":\"Entropy measured base e\"}},{\"line\":\"hartley = log2(10) bits\",\"info\":{\"headingsIndex\":[16],\"headingLevel\":1,\"headings\":[\"16. Information theory units. Note that the name \\\"entropy\\\" is used both\\nto measure information and as a physical quantity.\"],\"comment\":\"Entropy of a uniformly\\ndistributed random variable\\nover 10 symbols.\\nfrom Decimal digIT\"}},{\"line\":\"ban = hartley\",\"info\":{\"headingsIndex\":[16],\"headingLevel\":1,\"headings\":[\"16. Information theory units. Note that the name \\\"entropy\\\" is used both\\nto measure information and as a physical quantity.\"],\"comment\":\"Entropy of a uniformly\\ndistributed random variable\\nover 10 symbols.\\nfrom Decimal digIT\"}},{\"line\":\"dit = hartley\",\"info\":{\"headingsIndex\":[16],\"headingLevel\":1,\"headings\":[\"16. Information theory units. Note that the name \\\"entropy\\\" is used both\\nto measure information and as a physical quantity.\"],\"comment\":\"Entropy of a uniformly\\ndistributed random variable\\nover 10 symbols.\\nfrom Decimal digIT\"}},{\"line\":\"bps = bit/sec\",\"info\":{\"headingsIndex\":[16,1],\"headingLevel\":2,\"headings\":[\"16. Information theory units. Note that the name \\\"entropy\\\" is used both\\nto measure information and as a physical quantity.\",\"16.1. Computer\"],\"comment\":\"Sometimes the term \\\"baud\\\" is\\nincorrectly used to refer to\\nbits per second.  Baud refers\\nto symbols per second.  Modern\\nmodems transmit several bits\\nper symbol.\"}},{\"line\":\"byte = 8 bit\",\"info\":{\"headingsIndex\":[16,1],\"headingLevel\":2,\"headings\":[\"16. Information theory units. Note that the name \\\"entropy\\\" is used both\\nto measure information and as a physical quantity.\",\"16.1. Computer\"],\"comment\":\"Not all machines had 8 bit\\nbytes, but these days most of\\nthem do.  But beware: for\\ntransmission over modems, a\\nfew extra bits are used so\\nthere are actually 10 bits per\\nbyte.\"}},{\"line\":\"B = byte\",\"info\":{\"headingsIndex\":[16,1],\"headingLevel\":2,\"headings\":[\"16. Information theory units. Note that the name \\\"entropy\\\" is used both\\nto measure information and as a physical quantity.\",\"16.1. Computer\"],\"comment\":\"Not all machines had 8 bit\\nbytes, but these days most of\\nthem do.  But beware: for\\ntransmission over modems, a\\nfew extra bits are used so\\nthere are actually 10 bits per\\nbyte.\"}},{\"line\":\"octet = 8 bits\",\"info\":{\"headingsIndex\":[16,1],\"headingLevel\":2,\"headings\":[\"16. Information theory units. Note that the name \\\"entropy\\\" is used both\\nto measure information and as a physical quantity.\",\"16.1. Computer\"],\"comment\":\"The octet is always 8 bits\"}},{\"line\":\"nybble = 4 bits\",\"info\":{\"headingsIndex\":[16,1],\"headingLevel\":2,\"headings\":[\"16. Information theory units. Note that the name \\\"entropy\\\" is used both\\nto measure information and as a physical quantity.\",\"16.1. Computer\"],\"comment\":\"Half of a byte. Sometimes\\nequal to different lengths\\nsuch as 3 bits.\"}},{\"line\":\"nibble = nybble\",\"info\":{\"headingsIndex\":[16,1],\"headingLevel\":2,\"headings\":[\"16. Information theory units. Note that the name \\\"entropy\\\" is used both\\nto measure information and as a physical quantity.\",\"16.1. Computer\"],\"comment\":\"Half of a byte. Sometimes\\nequal to different lengths\\nsuch as 3 bits.\"}},{\"line\":\"nyp = 2 bits\",\"info\":{\"headingsIndex\":[16,1],\"headingLevel\":2,\"headings\":[\"16. Information theory units. Note that the name \\\"entropy\\\" is used both\\nto measure information and as a physical quantity.\",\"16.1. Computer\"],\"comment\":\"Donald Knuth asks in an exercise\\nfor a name for a 2 bit\\nquantity and gives the \\\"nyp\\\"\\nas a solution due to Gregor\\nPurdy.  Not in common use.\"}},{\"line\":\"meg = megabyte\",\"info\":{\"headingsIndex\":[16,1],\"headingLevel\":2,\"headings\":[\"16. Information theory units. Note that the name \\\"entropy\\\" is used both\\nto measure information and as a physical quantity.\",\"16.1. Computer\"],\"comment\":\"Some people consider these\\nunits along with the kilobyte\\nto be defined according to\\npowers of 2 with the kilobyte\\nequal to 2^10 bytes, the\\nmegabyte equal to 2^20 bytes and\\nthe gigabyte equal to 2^30 bytes\\nbut these usages are forbidden\\nby SI.  Binary prefixes have\\nbeen defined by IEC to replace\\nthe SI prefixes.  Use them to\\nget the binary values: KiB, MiB,\\nand GiB.\"}},{\"line\":\"gig = gigabyte\",\"info\":{\"headingsIndex\":[16,1],\"headingLevel\":2,\"headings\":[\"16. Information theory units. Note that the name \\\"entropy\\\" is used both\\nto measure information and as a physical quantity.\",\"16.1. Computer\"],\"comment\":\"Some people consider these\\nunits along with the kilobyte\\nto be defined according to\\npowers of 2 with the kilobyte\\nequal to 2^10 bytes, the\\nmegabyte equal to 2^20 bytes and\\nthe gigabyte equal to 2^30 bytes\\nbut these usages are forbidden\\nby SI.  Binary prefixes have\\nbeen defined by IEC to replace\\nthe SI prefixes.  Use them to\\nget the binary values: KiB, MiB,\\nand GiB.\"}},{\"line\":\"jiffy = 0.01 sec\",\"info\":{\"headingsIndex\":[16,1],\"headingLevel\":2,\"headings\":[\"16. Information theory units. Note that the name \\\"entropy\\\" is used both\\nto measure information and as a physical quantity.\",\"16.1. Computer\"],\"comment\":\"This is defined in the Jargon File\\n(http://www.jargon.org) as being the\\nduration of a clock tick for measuring\\nwall-clock time.  Supposedly the value\\nused to be 1|60 sec or 1|50 sec\\ndepending on the frequency of AC power,\\nbut then 1|100 sec became more common.\\nOn linux systems, this term is used and\\nfor the Intel based chips, it does have\\nthe value of .01 sec.  The Jargon File\\nalso lists two other definitions:\\nmillisecond, and the time taken for\\nlight to travel one foot.\"}},{\"line\":\"jiffies = jiffy\",\"info\":{\"headingsIndex\":[16,1],\"headingLevel\":2,\"headings\":[\"16. Information theory units. Note that the name \\\"entropy\\\" is used both\\nto measure information and as a physical quantity.\",\"16.1. Computer\"],\"comment\":\"This is defined in the Jargon File\\n(http://www.jargon.org) as being the\\nduration of a clock tick for measuring\\nwall-clock time.  Supposedly the value\\nused to be 1|60 sec or 1|50 sec\\ndepending on the frequency of AC power,\\nbut then 1|100 sec became more common.\\nOn linux systems, this term is used and\\nfor the Intel based chips, it does have\\nthe value of .01 sec.  The Jargon File\\nalso lists two other definitions:\\nmillisecond, and the time taken for\\nlight to travel one foot.\"}},{\"line\":\"cdaudiospeed = 44.1 kHz 2*16 bits\",\"info\":{\"headingsIndex\":[16,1],\"headingLevel\":2,\"headings\":[\"16. Information theory units. Note that the name \\\"entropy\\\" is used both\\nto measure information and as a physical quantity.\",\"16.1. Computer\"],\"comment\":\"CD audio data rate at 44.1 kHz with 2\\nsamples of sixteen bits each.\"}},{\"line\":\"cdromspeed = 75 2048 bytes / sec\",\"info\":{\"headingsIndex\":[16,1],\"headingLevel\":2,\"headings\":[\"16. Information theory units. Note that the name \\\"entropy\\\" is used both\\nto measure information and as a physical quantity.\",\"16.1. Computer\"],\"comment\":\"For data CDs (mode1) 75 sectors are read\\neach second with 2048 bytes per sector.\\nAudio CDs do not have sectors, but\\npeople sometimes divide the bit rate by\\n75 and claim a sector length of 2352.\\nData CDs have a lower rate due to\\nincreased error correction overhead.\\nThere is a rarely used mode (mode2) with\\n2336 bytes per sector that has fewer\\nerror correction bits than mode1.\"}},{\"line\":\"dvdspeed = 1385 kB/s\",\"info\":{\"headingsIndex\":[16,1],\"headingLevel\":2,\"headings\":[\"16. Information theory units. Note that the name \\\"entropy\\\" is used both\\nto measure information and as a physical quantity.\",\"16.1. Computer\"],\"comment\":\"This is the \\\"1x\\\" speed of a DVD using\\nconstant linear velocity (CLV) mode.\\nModern DVDs may vary the linear velocity\\nas they go from the inside to the\\noutside of the disc.\\nSee http://www.osta.org/technology/dvdqa/dvdqa4.htm\"}},{\"line\":\"octave = 2\",\"info\":{\"headingsIndex\":[17,1],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.1. Perfect intervals\"],\"comment\":\"\"}},{\"line\":\"majorsecond = musicalfifth^2 / octave\",\"info\":{\"headingsIndex\":[17,1],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.1. Perfect intervals\"],\"comment\":\"\"}},{\"line\":\"majorthird = 5|4\",\"info\":{\"headingsIndex\":[17,1],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.1. Perfect intervals\"],\"comment\":\"\"}},{\"line\":\"minorthird = 6|5\",\"info\":{\"headingsIndex\":[17,1],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.1. Perfect intervals\"],\"comment\":\"\"}},{\"line\":\"musicalfourth = 4|3\",\"info\":{\"headingsIndex\":[17,1],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.1. Perfect intervals\"],\"comment\":\"\"}},{\"line\":\"musicalfifth = 3|2\",\"info\":{\"headingsIndex\":[17,1],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.1. Perfect intervals\"],\"comment\":\"\"}},{\"line\":\"majorsixth = musicalfourth majorthird\",\"info\":{\"headingsIndex\":[17,1],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.1. Perfect intervals\"],\"comment\":\"\"}},{\"line\":\"minorsixth = musicalfourth minorthird\",\"info\":{\"headingsIndex\":[17,1],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.1. Perfect intervals\"],\"comment\":\"\"}},{\"line\":\"majorseventh = musicalfifth majorthird\",\"info\":{\"headingsIndex\":[17,1],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.1. Perfect intervals\"],\"comment\":\"\"}},{\"line\":\"minorseventh = musicalfifth minorthird\",\"info\":{\"headingsIndex\":[17,1],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.1. Perfect intervals\"],\"comment\":\"\"}},{\"line\":\"pythagoreanthird = majorsecond musicalfifth^2 / octave\",\"info\":{\"headingsIndex\":[17,1],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.1. Perfect intervals\"],\"comment\":\"\"}},{\"line\":\"syntoniccomma = pythagoreanthird / majorthird\",\"info\":{\"headingsIndex\":[17,1],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.1. Perfect intervals\"],\"comment\":\"\"}},{\"line\":\"pythagoreancomma = musicalfifth^12 / octave^7\",\"info\":{\"headingsIndex\":[17,1],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.1. Perfect intervals\"],\"comment\":\"\"}},{\"line\":\"semitone = octave^(1|12)\",\"info\":{\"headingsIndex\":[17,2],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.2. Equal tempered definitions\"],\"comment\":\"\"}},{\"line\":\"musicalcent = x => semitone^(x/100) \",\"info\":{\"headingsIndex\":[17,2],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.2. Equal tempered definitions\"],\"comment\":\"\"}},{\"line\":\"musicalcent^-1 = musicalcent => 100 log(musicalcent)/log(semitone)\",\"info\":{\"headingsIndex\":[17,2],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.2. Equal tempered definitions\"],\"comment\":\"\"}},{\"line\":\"wholenote!\",\"info\":{\"headingsIndex\":[17,3],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.3. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"MUSICAL_NOTE_LENGTH = wholenote\",\"info\":{\"headingsIndex\":[17,3],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.3. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"halfnote = 1|2 wholenote\",\"info\":{\"headingsIndex\":[17,3],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.3. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"quarternote = 1|4 wholenote\",\"info\":{\"headingsIndex\":[17,3],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.3. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"eighthnote = 1|8 wholenote\",\"info\":{\"headingsIndex\":[17,3],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.3. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"sixteenthnote = 1|16 wholenote\",\"info\":{\"headingsIndex\":[17,3],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.3. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"thirtysecondnote = 1|32 wholenote\",\"info\":{\"headingsIndex\":[17,3],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.3. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"sixtyfourthnote = 1|64 wholenote\",\"info\":{\"headingsIndex\":[17,3],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.3. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"dotted = 3|2\",\"info\":{\"headingsIndex\":[17,3],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.3. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"doubledotted = 7|4\",\"info\":{\"headingsIndex\":[17,3],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.3. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"breve = doublewholenote\",\"info\":{\"headingsIndex\":[17,3],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.3. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"semibreve = wholenote\",\"info\":{\"headingsIndex\":[17,3],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.3. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"minimnote = halfnote\",\"info\":{\"headingsIndex\":[17,3],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.3. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"crotchet = quarternote\",\"info\":{\"headingsIndex\":[17,3],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.3. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"quaver = eighthnote\",\"info\":{\"headingsIndex\":[17,3],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.3. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"semiquaver = sixteenthnote\",\"info\":{\"headingsIndex\":[17,3],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.3. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"demisemiquaver = thirtysecondnote\",\"info\":{\"headingsIndex\":[17,3],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.3. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"hemidemisemiquaver = sixtyfourthnote\",\"info\":{\"headingsIndex\":[17,3],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.3. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"semidemisemiquaver = hemidemisemiquaver\",\"info\":{\"headingsIndex\":[17,3],\"headingLevel\":2,\"headings\":[\"17. Musical measures. Musical intervals expressed as ratios. Multiply\\ntwo intervals together to get the sum of the interval. The function\\nmusicalcent can be used to convert ratios to cents.\",\"17.3. Musical note lengths.\"],\"comment\":\"\"}},{\"line\":\"woolyarnrun = 1600 yard/pound\",\"info\":{\"headingsIndex\":[18,1],\"headingLevel\":2,\"headings\":[\"18. yarn and cloth measures\",\"18.1. yarn linear density\"],\"comment\":\"1600 yds of \\\"number 1 yarn\\\" weighs\\na pound.\"}},{\"line\":\"yarncut = 300 yard/pound\",\"info\":{\"headingsIndex\":[18,1],\"headingLevel\":2,\"headings\":[\"18. yarn and cloth measures\",\"18.1. yarn linear density\"],\"comment\":\"Less common system used in\\nPennsylvania for wool yarn\"}},{\"line\":\"cottonyarncount = 840 yard/pound\",\"info\":{\"headingsIndex\":[18,1],\"headingLevel\":2,\"headings\":[\"18. yarn and cloth measures\",\"18.1. yarn linear density\"],\"comment\":\"\"}},{\"line\":\"linenyarncount = 300 yard/pound\",\"info\":{\"headingsIndex\":[18,1],\"headingLevel\":2,\"headings\":[\"18. yarn and cloth measures\",\"18.1. yarn linear density\"],\"comment\":\"Also used for hemp and ramie\"}},{\"line\":\"worstedyarncount = 1680 ft/pound\",\"info\":{\"headingsIndex\":[18,1],\"headingLevel\":2,\"headings\":[\"18. yarn and cloth measures\",\"18.1. yarn linear density\"],\"comment\":\"\"}},{\"line\":\"metricyarncount = meter/gram\",\"info\":{\"headingsIndex\":[18,1],\"headingLevel\":2,\"headings\":[\"18. yarn and cloth measures\",\"18.1. yarn linear density\"],\"comment\":\"\"}},{\"line\":\"denier = 1|9 tex\",\"info\":{\"headingsIndex\":[18,1],\"headingLevel\":2,\"headings\":[\"18. yarn and cloth measures\",\"18.1. yarn linear density\"],\"comment\":\"used for silk and rayon\"}},{\"line\":\"manchesteryarnnumber = drams/1000 yards\",\"info\":{\"headingsIndex\":[18,1],\"headingLevel\":2,\"headings\":[\"18. yarn and cloth measures\",\"18.1. yarn linear density\"],\"comment\":\"old system used for silk\"}},{\"line\":\"pli = lb/in\",\"info\":{\"headingsIndex\":[18,1],\"headingLevel\":2,\"headings\":[\"18. yarn and cloth measures\",\"18.1. yarn linear density\"],\"comment\":\"\"}},{\"line\":\"typp = 1000 yd/lb\",\"info\":{\"headingsIndex\":[18,1],\"headingLevel\":2,\"headings\":[\"18. yarn and cloth measures\",\"18.1. yarn linear density\"],\"comment\":\"abbreviation for Thousand Yard Per Pound\"}},{\"line\":\"asbestoscut = 100 yd/lb\",\"info\":{\"headingsIndex\":[18,1],\"headingLevel\":2,\"headings\":[\"18. yarn and cloth measures\",\"18.1. yarn linear density\"],\"comment\":\"used for glass and asbestos yarn\"}},{\"line\":\"tex = gram / km\",\"info\":{\"headingsIndex\":[18,1],\"headingLevel\":2,\"headings\":[\"18. yarn and cloth measures\",\"18.1. yarn linear density\"],\"comment\":\"rational metric yarn measure, meant\\nto be used for any kind of yarn\"}},{\"line\":\"drex = 0.1 tex\",\"info\":{\"headingsIndex\":[18,1],\"headingLevel\":2,\"headings\":[\"18. yarn and cloth measures\",\"18.1. yarn linear density\"],\"comment\":\"rational metric yarn measure, meant\\nto be used for any kind of yarn\"}},{\"line\":\"poumar = lb / 1e6 yard\",\"info\":{\"headingsIndex\":[18,1],\"headingLevel\":2,\"headings\":[\"18. yarn and cloth measures\",\"18.1. yarn linear density\"],\"comment\":\"\"}},{\"line\":\"skeincotton = 80*54 inch\",\"info\":{\"headingsIndex\":[18,2],\"headingLevel\":2,\"headings\":[\"18. yarn and cloth measures\",\"18.2. yarn and cloth length\"],\"comment\":\"80 turns of thread on a reel with a\\n54 in circumference (varies for other\\nkinds of thread)\"}},{\"line\":\"cottonbolt = 120 ft\",\"info\":{\"headingsIndex\":[18,2],\"headingLevel\":2,\"headings\":[\"18. yarn and cloth measures\",\"18.2. yarn and cloth length\"],\"comment\":\"cloth measurement\"}},{\"line\":\"woolbolt = 210 ft\",\"info\":{\"headingsIndex\":[18,2],\"headingLevel\":2,\"headings\":[\"18. yarn and cloth measures\",\"18.2. yarn and cloth length\"],\"comment\":\"\"}},{\"line\":\"bolt = cottonbolt\",\"info\":{\"headingsIndex\":[18,2],\"headingLevel\":2,\"headings\":[\"18. yarn and cloth measures\",\"18.2. yarn and cloth length\"],\"comment\":\"\"}},{\"line\":\"heer = 600 yards\",\"info\":{\"headingsIndex\":[18,2],\"headingLevel\":2,\"headings\":[\"18. yarn and cloth measures\",\"18.2. yarn and cloth length\"],\"comment\":\"\"}},{\"line\":\"cut = 300 yards\",\"info\":{\"headingsIndex\":[18,2],\"headingLevel\":2,\"headings\":[\"18. yarn and cloth measures\",\"18.2. yarn and cloth length\"],\"comment\":\"used for wet-spun linen yarn\"}},{\"line\":\"lea = 300 yards\",\"info\":{\"headingsIndex\":[18,2],\"headingLevel\":2,\"headings\":[\"18. yarn and cloth measures\",\"18.2. yarn and cloth length\"],\"comment\":\"used for wet-spun linen yarn\"}},{\"line\":\"sailmakersyard = 28.5 in\",\"info\":{\"headingsIndex\":[18,2],\"headingLevel\":2,\"headings\":[\"18. yarn and cloth measures\",\"18.2. yarn and cloth length\"],\"comment\":\"\"}},{\"line\":\"sailmakersounce = oz / sailmakersyard 36 inch\",\"info\":{\"headingsIndex\":[18,2],\"headingLevel\":2,\"headings\":[\"18. yarn and cloth measures\",\"18.2. yarn and cloth length\"],\"comment\":\"\"}},{\"line\":\"silkmomme = momme / 25 yards 1.49 inch\",\"info\":{\"headingsIndex\":[18,2],\"headingLevel\":2,\"headings\":[\"18. yarn and cloth measures\",\"18.2. yarn and cloth length\"],\"comment\":\"Traditional silk weight\\nBut it is also defined as\\nlb/100 yd 45 inch.  The two\\ndefinitions are slightly different\\nand neither one seems likely to be\\nthe true source definition.\"}},{\"line\":\"silkmm = silkmomme\",\"info\":{\"headingsIndex\":[18,2],\"headingLevel\":2,\"headings\":[\"18. yarn and cloth measures\",\"18.2. yarn and cloth length\"],\"comment\":\"Traditional silk weight\\nBut it is also defined as\\nlb/100 yd 45 inch.  The two\\ndefinitions are slightly different\\nand neither one seems likely to be\\nthe true source definition.\"}},{\"line\":\"mcg = microgram\",\"info\":{\"headingsIndex\":[19],\"headingLevel\":1,\"headings\":[\"19. drug dosage\"],\"comment\":\"Frequently used for vitamins\"}},{\"line\":\"iudiptheria = 62.8 microgram\",\"info\":{\"headingsIndex\":[19],\"headingLevel\":1,\"headings\":[\"19. drug dosage\"],\"comment\":\"IU is for international unit\"}},{\"line\":\"iupenicillin = 0.6 microgram\",\"info\":{\"headingsIndex\":[19],\"headingLevel\":1,\"headings\":[\"19. drug dosage\"],\"comment\":\"\"}},{\"line\":\"iuinsulin = 41.67 microgram\",\"info\":{\"headingsIndex\":[19],\"headingLevel\":1,\"headings\":[\"19. drug dosage\"],\"comment\":\"\"}},{\"line\":\"drop = 1|20 ml\",\"info\":{\"headingsIndex\":[19],\"headingLevel\":1,\"headings\":[\"19. drug dosage\"],\"comment\":\"The drop was an old \\\"unit\\\" that was\\nreplaced by the minim.  But I was\\ntold by a pharmacist that in his\\nprofession, the conversion of 20\\ndrops per ml is actually used.\"}},{\"line\":\"bloodunit = 450 ml\",\"info\":{\"headingsIndex\":[19],\"headingLevel\":1,\"headings\":[\"19. drug dosage\"],\"comment\":\"For whole blood.  For blood\\ncomponents, a blood unit is the\\nquanity of the component found in a\\nblood unit of whole blood.  The\\nhuman body contains about 12 blood\\nunits of whole blood.\"}},{\"line\":\"frenchcathetersize = 1|3 mm\",\"info\":{\"headingsIndex\":[20],\"headingLevel\":1,\"headings\":[\"20. misc medical measure\"],\"comment\":\"measure used for the outer diameter\\nof a catheter\"}},{\"line\":\"charriere = frenchcathetersize\",\"info\":{\"headingsIndex\":[20],\"headingLevel\":1,\"headings\":[\"20. misc medical measure\"],\"comment\":\"measure used for the outer diameter\\nof a catheter\"}},{\"line\":\"hectare = hectoare\",\"info\":{\"headingsIndex\":[21],\"headingLevel\":1,\"headings\":[\"21. fixup units for times when prefix handling doesn't do the job\"],\"comment\":\"\"}},{\"line\":\"megohm = megaohm\",\"info\":{\"headingsIndex\":[21],\"headingLevel\":1,\"headings\":[\"21. fixup units for times when prefix handling doesn't do the job\"],\"comment\":\"\"}},{\"line\":\"kilohm = kiloohm\",\"info\":{\"headingsIndex\":[21],\"headingLevel\":1,\"headings\":[\"21. fixup units for times when prefix handling doesn't do the job\"],\"comment\":\"\"}},{\"line\":\"microhm = microohm\",\"info\":{\"headingsIndex\":[21],\"headingLevel\":1,\"headings\":[\"21. fixup units for times when prefix handling doesn't do the job\"],\"comment\":\"\"}},{\"line\":\"megalerg = megaerg\",\"info\":{\"headingsIndex\":[21],\"headingLevel\":1,\"headings\":[\"21. fixup units for times when prefix handling doesn't do the job\"],\"comment\":\"'L' added to make it pronounceable [18].\"}},{\"line\":\"unitedstatesdollar = US$\",\"info\":{\"headingsIndex\":[22],\"headingLevel\":1,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"usdollar = US$\",\"info\":{\"headingsIndex\":[22],\"headingLevel\":1,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"$ = dollar\",\"info\":{\"headingsIndex\":[22],\"headingLevel\":1,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"mark = germanymark\",\"info\":{\"headingsIndex\":[22],\"headingLevel\":1,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"bolivar = venezuelabolivar\",\"info\":{\"headingsIndex\":[22],\"headingLevel\":1,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"The currency was revalued by\\na factor of 1000.\"}},{\"line\":\"venezuelanbolivarfuerte = venezuelabolivar\",\"info\":{\"headingsIndex\":[22],\"headingLevel\":1,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"The currency was revalued by\\na factor of 1000.\"}},{\"line\":\"bolivarfuerte = bolivar\",\"info\":{\"headingsIndex\":[22],\"headingLevel\":1,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"The currency was revalued by\\na factor of 1000.\"}},{\"line\":\"oldbolivar = 1|1000 bolivar\",\"info\":{\"headingsIndex\":[22],\"headingLevel\":1,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"The currency was revalued by\\na factor of 1000.\"}},{\"line\":\"peseta = spainpeseta\",\"info\":{\"headingsIndex\":[22],\"headingLevel\":1,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"rand = southafricarand\",\"info\":{\"headingsIndex\":[22],\"headingLevel\":1,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"escudo = portugalescudo\",\"info\":{\"headingsIndex\":[22],\"headingLevel\":1,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"guilder = netherlandsguilder\",\"info\":{\"headingsIndex\":[22],\"headingLevel\":1,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"hollandguilder = netherlandsguilder\",\"info\":{\"headingsIndex\":[22],\"headingLevel\":1,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"peso = mexicopeso\",\"info\":{\"headingsIndex\":[22],\"headingLevel\":1,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"yen = japanyen\",\"info\":{\"headingsIndex\":[22],\"headingLevel\":1,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"lira = italylira\",\"info\":{\"headingsIndex\":[22],\"headingLevel\":1,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"rupee = indiarupee\",\"info\":{\"headingsIndex\":[22],\"headingLevel\":1,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"drachma = greecedrachma\",\"info\":{\"headingsIndex\":[22],\"headingLevel\":1,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"franc = francefranc\",\"info\":{\"headingsIndex\":[22],\"headingLevel\":1,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"markka = finlandmarkka\",\"info\":{\"headingsIndex\":[22],\"headingLevel\":1,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"britainpound = unitedkingdompound\",\"info\":{\"headingsIndex\":[22],\"headingLevel\":1,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"greatbritainpound = unitedkingdompound\",\"info\":{\"headingsIndex\":[22],\"headingLevel\":1,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"unitedkingdompound = ukpound\",\"info\":{\"headingsIndex\":[22],\"headingLevel\":1,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"poundsterling = britainpound\",\"info\":{\"headingsIndex\":[22],\"headingLevel\":1,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"yuan = chinayuan\",\"info\":{\"headingsIndex\":[22],\"headingLevel\":1,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\"],\"comment\":\"\"}},{\"line\":\"austriaschilling = 1|13.7603 euro\",\"info\":{\"headingsIndex\":[22,1],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"belgiumfranc = 1|40.3399 euro\",\"info\":{\"headingsIndex\":[22,1],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"estoniakroon = 1|15.6466 euro\",\"info\":{\"headingsIndex\":[22,1],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"Equal to 1|8 germanymark\"}},{\"line\":\"finlandmarkka = 1|5.94573 euro\",\"info\":{\"headingsIndex\":[22,1],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"francefranc = 1|6.55957 euro\",\"info\":{\"headingsIndex\":[22,1],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"germanymark = 1|1.95583 euro\",\"info\":{\"headingsIndex\":[22,1],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"greecedrachma = 1|340.75 euro\",\"info\":{\"headingsIndex\":[22,1],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"irelandpunt = 1|0.787564 euro\",\"info\":{\"headingsIndex\":[22,1],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"italylira = 1|1936.27 euro\",\"info\":{\"headingsIndex\":[22,1],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"luxembourgfranc = 1|40.3399 euro\",\"info\":{\"headingsIndex\":[22,1],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"netherlandsguilder = 1|2.20371 euro\",\"info\":{\"headingsIndex\":[22,1],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"portugalescudo = 1|200.482 euro\",\"info\":{\"headingsIndex\":[22,1],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"spainpeseta = 1|166.386 euro\",\"info\":{\"headingsIndex\":[22,1],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"cypruspound = 1|0.585274 euro\",\"info\":{\"headingsIndex\":[22,1],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"maltalira = 1|0.429300 euro\",\"info\":{\"headingsIndex\":[22,1],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"sloveniatolar = 1|239.640 euro\",\"info\":{\"headingsIndex\":[22,1],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"slovakiakoruna = 1|30.1260 euro\",\"info\":{\"headingsIndex\":[22,1],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"\"}},{\"line\":\"UKP = GBP\",\"info\":{\"headingsIndex\":[22,1],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"Not an ISO code, but looks like one, and\\nsometimes used on usenet.\"}},{\"line\":\"VEB = 1|1000 VEF\",\"info\":{\"headingsIndex\":[22,1],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.1. Some European currencies have permanent fixed exchange rates with\\nthe Euro. These rates were taken from the EC's web site:\\nhttp://ec.europa.eu/economy_finance/euro/adoption/conversion/index_en.htm\"],\"comment\":\"old venezuelan bolivar\"}},{\"line\":\"icelandkróna = icelandkrona\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"polandzłoty = polandzloty\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"tongapa’anga = tongapa'anga\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"venezuelabolívar = venezuelabolivar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"vietnamđồng = vietnamdong\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"AED = uaedirham\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"AFN = afghanafghani\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"ALL = albanialek\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"AMD = armeniadram\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"AOA = angolakwanza\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"ARS = argentinapeso\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"AUD = australiadollar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"AWG = arubaflorin\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"AZN = azerbaijanmanat\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"BAM = bosniaconvertiblemark\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"BBD = barbadosdollar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"BDT = bangladeshtaka\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"BGN = bulgarialev\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"BHD = bahraindinar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"BIF = burundifranc\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"BMD = bermudadollar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"BND = bruneidollar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"BOB = boliviaboliviano\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"BRL = brazilreal\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"BSD = bahamasdollar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"BTN = bhutanngultrum\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"BWP = botswanapula\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"BYR = belarusruble\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"BZD = belizedollar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"CAD = canadadollar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"CDF = drcfranccongolais\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"CHF = swissfranc\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"CLP = chilepeso\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"CMG = sintmaartencaribbeanguilder\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"CNY = chinayuan\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"COP = colombiapeso\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"CRC = costaricacolon\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"CUP = cubapeso\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"CVE = capeverdeescudo\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"CZK = czechkoruna\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"DJF = djiboutifranc\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"DKK = denmarkkrona\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"DOP = dominicanrepublicpeso\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"DZD = algeriadinar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"EGP = egyptpound\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"ERN = eritreanakfa\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"ETB = ethiopianbirr\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"EUR = euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"FJD = fijidollar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"FKP = falklandislandspound\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"GBP = ukpound\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"GEL = georgialari\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"GGP = guernseypound\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"GHS = ghanacedi\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"GIP = gibraltarpound\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"GMD = gambiadalasi\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"GNF = guineafranc\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"GTQ = guatemalaquetzal\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"GYD = guyanadollar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"HKD = hongkongdollar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"HNL = honduraslempira\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"HRK = croatiakuna\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"HTG = haitigourde\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"HUF = hungariaforint\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"IDR = indonesiarupiah\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"ILS = israelnewshekel\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"IMP = manxpound\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"INR = indiarupee\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"IQD = iraqdinar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"IRR = iranrial\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"ISK = icelandkrona\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"JEP = jerseypound\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"JMD = jamaicadollar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"JOD = jordandinar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"JPY = japanyen\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"KES = kenyaschilling\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"KGS = kyrgyzstansom\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"KHR = cambodiariel\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"KMF = comorosfranc\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"KPW = northkoreawon\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"KRW = southkoreawon\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"KWD = kuwaitdinar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"KYD = caymanislandsdollar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"KZT = kazakhstantenge\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"LAK = laokip\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"LBP = lebanonpound\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"LKR = srilankanrupee\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"LRD = liberiadollar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"LTL = lithuanialita\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"LVL = latvialat\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"LYD = libyadinar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"MAD = moroccodirham\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"MDL = moldovaleu\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"MGA = madagascarariary\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"MKD = macedoniadenar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"MMK = myanmarkyat\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"MNT = mongoliatugrik\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"MOP = macaupataca\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"MRO = mauritaniaouguiya\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"MUR = mauritiusrupee\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"MVR = maldiverufiyaa\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"MWK = malawikwacha\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"MXN = mexicopeso\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"MYR = malaysiaringgit\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"MZN = mozambicanmetical\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"NAD = namibiadollar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"NGN = nigerianaira\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"NIO = nicaraguacordobaoro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"NOK = norwaykrone\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"NPR = nepalrupee\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"NZD = newzealanddollar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"OMR = omanrial\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"PAB = panamabalboa\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"PEN = perunuevosol\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"PGK = papuanewguineakina\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"PHP = philippinepeso\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"PKR = pakistanrupee\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"PLN = polandzloty\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"PYG = paraguayguarani\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"QAR = qatarrial\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"RON = romanianewlei\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"RSD = serbiadinar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"RUB = russiarouble\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"RWF = rwandafranc\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"SAR = saudiarabiariyal\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"SBD = solomonislandsdollar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"SCR = seychellesrupee\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"SDG = sudanpound\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"SEK = swedenkrona\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"SGD = singaporedollar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"SHP = sainthelenapound\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"SLL = sierraleoneleone\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"SOS = somaliaschilling\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"SRD = surinamedollar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"STD = saotomeandprincipedobra\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"SVC = elsalvadorcolon\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"SYP = syriapound\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"SZL = swazilandlilangeni\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"THB = thailandbaht\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"TJS = tajikistansomoni\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"TMT = turkmenistanmanat\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"TND = tunisiadinar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"TOP = tongapa'anga\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"TRY = turkeylira\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"TTD = trinidadandtobagodollar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"TVD = tuvaludollar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"TWD = taiwandollar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"TZS = tanzaniashilling\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"UAH = ukrainehryvnia\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"UGX = ugandaschilling\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"USD = usdollar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"UYU = uruguaypeso\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"UZS = uzbekistansum\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"VEF = venezuelabolivar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"VND = vietnamdong\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"VUV = vanuatuvatu\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"WST = samoatala\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"XAF = centralafricancfafranc\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"XCD = eastcaribbeandollar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"XDR = specialdrawingrights\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"XOF = westafricanfranc\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"XPF = cfpfranc\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"YER = yemenrial\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"ZAR = southafricarand\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"ZMW = zambiakwacha\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"ZWL = zimbabwedollar\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"uaedirham = 1|4.175642287901 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"afghanafghani = 1|71.834 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"albanialek = 1|139.44 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"armeniadram = 1|539.16766610698 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"angolakwanza = 1|151.63 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"argentinapeso = 1|10.844411979547 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"australiadollar = 1|1.5722 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"arubaflorin = 1|2.04239 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"azerbaijanmanat = 1|1.1998964405441 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"bosniaconvertiblemark = 1|1.95583 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"barbadosdollar = 1|2.282 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"bangladeshtaka = 1|87.075 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"bulgarialev = 1|1.9558 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"bahraindinar = 1|0.429016 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"burundifranc = 1|1751.9 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"bermudadollar = 1|1.1410 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"bruneidollar = 1|1.5949 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"boliviaboliviano = 1|7.7365 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"brazilreal = 1|4.4198 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"bahamasdollar = 1|1.1410 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"bhutanngultrum = 1|74.1465 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"botswanapula = 1|11.805 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"belarusruble = 1|19563.011314186 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"belizedollar = 1|2.282 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"canadadollar = 1|1.4816 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"drcfranccongolais = 1|1038.5 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"swissfranc = 1|1.0901 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"chilepeso = 1|779.31758530184 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"sintmaartencaribbeanguilder = 1|2.04239 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"chinayuan = 1|7.2435 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"colombiapeso = 1|3351.2415349887 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"costaricacolon = 1|598.07 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"cubapeso = 1|1.1203 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"capeverdeescudo = 1|110.265 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"czechkoruna = 1|27.113 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"djiboutifranc = 1|202.779661 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"denmarkkrona = 1|7.4612 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"dominicanrepublicpeso = 1|50.666 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"algeriadinar = 1|118.84 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"egyptpound = 1|8.9318551668023 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"eritreanakfa = 1|17.115 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"ethiopianbirr = 1|23.439 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"euro = 1.1410 US$\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"fijidollar = 1|0.4076849051416 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"falklandislandspound = 1|0.74180 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"ukpound = 1|0.74180 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"georgialari = 1|2.7114148200866 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"guernseypound = 1|0.74180 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"ghanacedi = 1|4.3690406121248 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"gibraltarpound = 1|0.74180 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"gambiadalasi = 1|43.753 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"guineafranc = 1|8122.2 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"guatemalaquetzal = 1|8.9649758454106 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"guyanadollar = 1|232.13 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"hongkongdollar = 1|8.8429 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"honduraslempira = 1|25.137148662377 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"croatiakuna = 1|7.6280 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"haitigourde = 1|60.612 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"hungariaforint = 1|311.04 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"indonesiarupiah = 1|15534.04 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"israelnewshekel = 1|4.3949 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"manxpound = 1|0.74180 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"indiarupee = 1|74.1465 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"iraqdinar = 1|1361.2 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"iranrial = 1|0.0229 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"icelandkrona = 1|141.94177822682 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"jerseypound = 1|0.74180 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"jamaicadollar = 1|136.32690541781 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"jordandinar = 1|0.808969 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"japanyen = 1|136.48 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"kenyaschilling = 1|117.51 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"kyrgyzstansom = 1|78.121502797762 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"cambodiariel = 1|4566.3 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"comorosfranc = 1|491.96775 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"northkoreawon = 1|145.7 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"southkoreawon = 1|1308.96 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"kuwaitdinar = 1|0.34321648936739 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"caymanislandsdollar = 1|0.95083333333333 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"kazakhstantenge = 1|312.7142459655 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"laokip = 1|9131 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"lebanonpound = 1|1720.0575 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"srilankanrupee = 1|0.0062118176400539 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"liberiadollar = 1|97.466 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"lithuanialita = 1|3.45280 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"latvialat = 1|0.702804 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"libyadinar = 1|1.5236 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"moroccodirham = 1|10.972653362897 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"moldovaleu = 1|11.23895 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"madagascarariary = 1|3590.6 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"macedoniadenar = 1|61.538 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"myanmarkyat = 1|1469.900990099 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"mongoliatugrik = 1|0.0344 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"macaupataca = 1|9.108187 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"mauritaniaouguiya = 1|327.17 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"mauritiusrupee = 1|39.715 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"maldiverufiyaa = 1|17.241 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"malawikwacha = 1|622.16 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"mexicopeso = 1|18.8927 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"malaysiaringgit = 1|4.8055 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"mozambicanmetical = 1|47.523 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"namibiadollar = 1|15.3094 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"nigerianaira = 1|222.94 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"nicaraguacordobaoro = 1|30.781 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"norwaykrone = 1|9.2400 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"nepalrupee = 1|118.6344 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"newzealanddollar = 1|1.6938 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"omanrial = 1|0.43871116579514 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"panamabalboa = 1|1.1410 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"perunuevosol = 1|3.7050162216122 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"papuanewguineakina = 1|0.30504551766703 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"philippinepeso = 1|52.447 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"pakistanrupee = 1|0.0083800303495282 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"polandzloty = 1|4.2378 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"paraguayguarani = 1|6325.8 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"qatarrial = 1|4.15324 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"romanianewlei = 1|4.4145 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"serbiadinar = 1|119.86551198234 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"russiarouble = 1|71.9750 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"rwandafranc = 1|850.31 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"saudiarabiariyal = 1|4.27875 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"solomonislandsdollar = 1|0.10707708972739 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"seychellesrupee = 1|14.633 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"sudanpound = 1|7.0481 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"swedenkrona = 1|9.2716 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"singaporedollar = 1|1.5815 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"sainthelenapound = 1|0.74180 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"sierraleoneleone = 1|5395.9 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"somaliaschilling = 1|722.71 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"surinamedollar = 1|3.697 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"saotomeandprincipedobra = 1|24504 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"elsalvadorcolon = 1|9.8137 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"syriapound = 1|247.23 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"swazilandlilangeni = 1|15.3094 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"thailandbaht = 1|40.533 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"tajikistansomoni = 1|6.9076147042565 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"turkmenistanmanat = 1|3.9790232072366 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"tunisiadinar = 1|2.2257871064468 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"tongapa'anga = 1|0.40393652523326 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"turkeylira = 1|3.3500 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"trinidadandtobagodollar = 1|7.1318205 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"tuvaludollar = 1|1.5722 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"taiwandollar = 1|37.087184611541 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"tanzaniashilling = 1|2431.1 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"ukrainehryvnia = 1|19.241014210086 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"ugandaschilling = 1|4136.7 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"uruguaypeso = 1|32.337 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"uzbekistansum = 1|3011.9120996918 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"venezuelabolivar = 1|7.2032993692382 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"vietnamdong = 1|25596.551724138 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"vanuatuvatu = 1|0.008155099515314 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"samoatala = 1|0.33965181537052 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"centralafricancfafranc = 1|655.957 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"eastcaribbeandollar = 1|3.0807 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"specialdrawingrights = 1|1.9241014210086 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"westafricanfranc = 1|655.957 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"cfpfranc = 1|119.33 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"yemenrial = 1|240.74 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"southafricarand = 1|15.3094 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"zambiakwacha = 1|13.544 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"zimbabwedollar = 1|353.62 euro\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"goldprice = 1184.00 US$/troyounce\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"platinumprice = 1002.00 US$/troyounce\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"silverprice = 16.15 US$/troyounce\",\"info\":{\"headingsIndex\":[],\"headingLevel\":0,\"headings\":[],\"comment\":\"\"}},{\"line\":\"olddollargold = 23.22 grains goldprice\",\"info\":{\"headingsIndex\":[22,2],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.2. Money on the gold standard, used in the late 19th century and early\\n20th century.\"],\"comment\":\"Used until 1934\"}},{\"line\":\"newdollargold = 96|7 grains goldprice\",\"info\":{\"headingsIndex\":[22,2],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.2. Money on the gold standard, used in the late 19th century and early\\n20th century.\"],\"comment\":\"After Jan 31, 1934\"}},{\"line\":\"dollargold = newdollargold\",\"info\":{\"headingsIndex\":[22,2],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.2. Money on the gold standard, used in the late 19th century and early\\n20th century.\"],\"comment\":\"After Jan 31, 1934\"}},{\"line\":\"poundgold = 113 grains goldprice\",\"info\":{\"headingsIndex\":[22,2],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.2. Money on the gold standard, used in the late 19th century and early\\n20th century.\"],\"comment\":\"\"}},{\"line\":\"goldounce = goldprice troyounce\",\"info\":{\"headingsIndex\":[22,2],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.2. Money on the gold standard, used in the late 19th century and early\\n20th century.\"],\"comment\":\"\"}},{\"line\":\"silverounce = silverprice troyounce\",\"info\":{\"headingsIndex\":[22,2],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.2. Money on the gold standard, used in the late 19th century and early\\n20th century.\"],\"comment\":\"\"}},{\"line\":\"platinumounce = platinumprice troyounce\",\"info\":{\"headingsIndex\":[22,2],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.2. Money on the gold standard, used in the late 19th century and early\\n20th century.\"],\"comment\":\"\"}},{\"line\":\"XAU = goldounce\",\"info\":{\"headingsIndex\":[22,2],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.2. Money on the gold standard, used in the late 19th century and early\\n20th century.\"],\"comment\":\"\"}},{\"line\":\"XPT = platinumounce\",\"info\":{\"headingsIndex\":[22,2],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.2. Money on the gold standard, used in the late 19th century and early\\n20th century.\"],\"comment\":\"\"}},{\"line\":\"XAG = silverounce\",\"info\":{\"headingsIndex\":[22,2],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.2. Money on the gold standard, used in the late 19th century and early\\n20th century.\"],\"comment\":\"\"}},{\"line\":\"USpennyweight = 2.5 grams\",\"info\":{\"headingsIndex\":[22,3],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.3. Nominal masses of US coins. Note that dimes, quarters and half dollars\\nhave weight proportional to value. Before 1965 it was $40 / kg.\"],\"comment\":\"Since 1982, 48 grains before\"}},{\"line\":\"USnickelweight = 5 grams\",\"info\":{\"headingsIndex\":[22,3],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.3. Nominal masses of US coins. Note that dimes, quarters and half dollars\\nhave weight proportional to value. Before 1965 it was $40 / kg.\"],\"comment\":\"\"}},{\"line\":\"USdimeweight = US$ 0.10 / (20 US$ / lb)\",\"info\":{\"headingsIndex\":[22,3],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.3. Nominal masses of US coins. Note that dimes, quarters and half dollars\\nhave weight proportional to value. Before 1965 it was $40 / kg.\"],\"comment\":\"Since 1965\"}},{\"line\":\"USquarterweight = US$ 0.25 / (20 US$ / lb)\",\"info\":{\"headingsIndex\":[22,3],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.3. Nominal masses of US coins. Note that dimes, quarters and half dollars\\nhave weight proportional to value. Before 1965 it was $40 / kg.\"],\"comment\":\"Since 1965\"}},{\"line\":\"UShalfdollarweight = US$ 0.50 / (20 US$ / lb)\",\"info\":{\"headingsIndex\":[22,3],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.3. Nominal masses of US coins. Note that dimes, quarters and half dollars\\nhave weight proportional to value. Before 1965 it was $40 / kg.\"],\"comment\":\"Since 1971\"}},{\"line\":\"USdollarmass = 8.1 grams\",\"info\":{\"headingsIndex\":[22,3],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.3. Nominal masses of US coins. Note that dimes, quarters and half dollars\\nhave weight proportional to value. Before 1965 it was $40 / kg.\"],\"comment\":\"\"}},{\"line\":\"quid = britainpound\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"Slang names\"}},{\"line\":\"fiver = 5 quid\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"\"}},{\"line\":\"tenner = 10 quid\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"\"}},{\"line\":\"monkey = 500 quid\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"\"}},{\"line\":\"brgrand = 1000 quid\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"\"}},{\"line\":\"bob = shilling\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"\"}},{\"line\":\"shilling = 1|20 britainpound\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"Before decimalisation, there\\nwere 20 shillings to a pound,\\neach of twelve old pence\"}},{\"line\":\"oldpence = 1|12 shilling\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"Before decimalisation, there\\nwere 20 shillings to a pound,\\neach of twelve old pence\"}},{\"line\":\"farthing = 1|4 oldpence\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"Before decimalisation, there\\nwere 20 shillings to a pound,\\neach of twelve old pence\"}},{\"line\":\"guinea = 21 shilling\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"Still used in horse racing\"}},{\"line\":\"crown = 5 shilling\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"\"}},{\"line\":\"florin = 2 shilling\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"\"}},{\"line\":\"groat = 4 oldpence\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"\"}},{\"line\":\"tanner = 6 oldpence\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"\"}},{\"line\":\"brpenny = 0.01 britainpound\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"\"}},{\"line\":\"pence = brpenny\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"\"}},{\"line\":\"tuppence = 2 pence\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"\"}},{\"line\":\"tuppenny = tuppence\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"\"}},{\"line\":\"ha'penny = halfbrpenny\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"\"}},{\"line\":\"hapenny = ha'penny\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"\"}},{\"line\":\"oldpenny = oldpence\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"\"}},{\"line\":\"oldtuppence = 2 oldpence\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"\"}},{\"line\":\"oldtuppenny = oldtuppence\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"\"}},{\"line\":\"threepence = 3 oldpence\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"threepence never refers to new money\"}},{\"line\":\"threepenny = threepence\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"threepence never refers to new money\"}},{\"line\":\"oldthreepence = threepence\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"threepence never refers to new money\"}},{\"line\":\"oldthreepenny = threepence\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"threepence never refers to new money\"}},{\"line\":\"oldhalfpenny = halfoldpenny\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"\"}},{\"line\":\"oldha'penny = oldhalfpenny\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"\"}},{\"line\":\"oldhapenny = oldha'penny\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"\"}},{\"line\":\"brpony = 25 britainpound\",\"info\":{\"headingsIndex\":[22,4],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.4. British currency\"],\"comment\":\"\"}},{\"line\":\"loony = 1 canadadollar\",\"info\":{\"headingsIndex\":[22,5],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.5. Canadian currency\"],\"comment\":\"This coin depicts a loon\"}},{\"line\":\"toony = 2 canadadollar\",\"info\":{\"headingsIndex\":[22,5],\"headingLevel\":2,\"headings\":[\"22. Money\\n\\nNote that US$ is the primitive unit so other currencies are\\ngenerally given in US$.\",\"22.5. Canadian currency\"],\"comment\":\"\"}},{\"line\":\"cord = 4*4*8 ft^3\",\"info\":{\"headingsIndex\":[23],\"headingLevel\":1,\"headings\":[\"23. Units used for measuring volume of wood\"],\"comment\":\"4 ft by 4 ft by 8 ft bundle of wood\"}},{\"line\":\"facecord = 1|2 cord\",\"info\":{\"headingsIndex\":[23],\"headingLevel\":1,\"headings\":[\"23. Units used for measuring volume of wood\"],\"comment\":\"\"}},{\"line\":\"cordfoot = 1|8 cord\",\"info\":{\"headingsIndex\":[23],\"headingLevel\":1,\"headings\":[\"23. Units used for measuring volume of wood\"],\"comment\":\"One foot long section of a cord\"}},{\"line\":\"cordfeet = cordfoot\",\"info\":{\"headingsIndex\":[23],\"headingLevel\":1,\"headings\":[\"23. Units used for measuring volume of wood\"],\"comment\":\"One foot long section of a cord\"}},{\"line\":\"housecord = 1|3 cord\",\"info\":{\"headingsIndex\":[23],\"headingLevel\":1,\"headings\":[\"23. Units used for measuring volume of wood\"],\"comment\":\"Used to sell firewood for residences,\\noften confusingly called a \\\"cord\\\"\"}},{\"line\":\"boardfoot = ft^2 inch\",\"info\":{\"headingsIndex\":[23],\"headingLevel\":1,\"headings\":[\"23. Units used for measuring volume of wood\"],\"comment\":\"Usually 1 inch thick wood\"}},{\"line\":\"boardfeet = boardfoot\",\"info\":{\"headingsIndex\":[23],\"headingLevel\":1,\"headings\":[\"23. Units used for measuring volume of wood\"],\"comment\":\"\"}},{\"line\":\"fbm = boardfoot\",\"info\":{\"headingsIndex\":[23],\"headingLevel\":1,\"headings\":[\"23. Units used for measuring volume of wood\"],\"comment\":\"feet board measure\"}},{\"line\":\"stack = 4 yard^3\",\"info\":{\"headingsIndex\":[23],\"headingLevel\":1,\"headings\":[\"23. Units used for measuring volume of wood\"],\"comment\":\"British, used for firewood and coal [18]\"}},{\"line\":\"rick = 4 ft 8 ft 16 inches\",\"info\":{\"headingsIndex\":[23],\"headingLevel\":1,\"headings\":[\"23. Units used for measuring volume of wood\"],\"comment\":\"Stack of firewood, supposedly\\nsometimes called a face cord, but this\\nvalue is equal to 1|3 cord.  Name\\ncomes from an old Norse word for a\\nstack of wood.\"}},{\"line\":\"stere = m^3\",\"info\":{\"headingsIndex\":[23],\"headingLevel\":1,\"headings\":[\"23. Units used for measuring volume of wood\"],\"comment\":\"\"}},{\"line\":\"timberfoot = ft^3\",\"info\":{\"headingsIndex\":[23],\"headingLevel\":1,\"headings\":[\"23. Units used for measuring volume of wood\"],\"comment\":\"Used for measuring solid blocks of wood\"}},{\"line\":\"standard = 120 12 ft 11 in 1.5 in\",\"info\":{\"headingsIndex\":[23],\"headingLevel\":1,\"headings\":[\"23. Units used for measuring volume of wood\"],\"comment\":\"This is the St Petersburg or\\nPittsburg standard.  Apparently the\\nterm is short for \\\"standard hundred\\\"\\nwhich was meant to refer to 100 pieces\\nof wood (deals).  However, this\\nparticular standard is equal to 120\\ndeals which are 12 ft by 11 in by 1.5\\ninches (not the standard deal).\"}},{\"line\":\"hoppusfoot = (4/pi) ft^3\",\"info\":{\"headingsIndex\":[23],\"headingLevel\":1,\"headings\":[\"23. Units used for measuring volume of wood\"],\"comment\":\"Volume calculation suggested in 1736\\nforestry manual by Edward Hoppus, for\\nestimating the usable volume of a log.\\nIt results from computing the volume\\nof a cylindrical log of length, L, and\\ngirth (circumference), G, by V=L(G/4)^2.\\nThe hoppus ton is apparently still in\\nuse for shipments from Southeast Asia.\"}},{\"line\":\"hoppusboardfoot = 1|12 hoppusfoot\",\"info\":{\"headingsIndex\":[23],\"headingLevel\":1,\"headings\":[\"23. Units used for measuring volume of wood\"],\"comment\":\"Volume calculation suggested in 1736\\nforestry manual by Edward Hoppus, for\\nestimating the usable volume of a log.\\nIt results from computing the volume\\nof a cylindrical log of length, L, and\\ngirth (circumference), G, by V=L(G/4)^2.\\nThe hoppus ton is apparently still in\\nuse for shipments from Southeast Asia.\"}},{\"line\":\"hoppuston = 50 hoppusfoot\",\"info\":{\"headingsIndex\":[23],\"headingLevel\":1,\"headings\":[\"23. Units used for measuring volume of wood\"],\"comment\":\"Volume calculation suggested in 1736\\nforestry manual by Edward Hoppus, for\\nestimating the usable volume of a log.\\nIt results from computing the volume\\nof a cylindrical log of length, L, and\\ngirth (circumference), G, by V=L(G/4)^2.\\nThe hoppus ton is apparently still in\\nuse for shipments from Southeast Asia.\"}},{\"line\":\"deal = 12 ft 11 in 2.5 in\",\"info\":{\"headingsIndex\":[23,1],\"headingLevel\":2,\"headings\":[\"23. Units used for measuring volume of wood\",\"23.1. In Britain, the deal is apparently any piece of wood over 6 feet long, over\\n7 wide and 2.5 inches thick. The OED doesn't give a standard size. A piece\\nof wood less than 7 inches wide is called a \\\"batten\\\". This unit is now used\\nexclusively for fir and pine.\"],\"comment\":\"The standard North American deal [OED]\\nIf it's half as thick as the standard\\ndeal it's called a \\\"whole deal\\\"!\\nAnd half again as thick is a split deal.\"}},{\"line\":\"wholedeal = 12 ft 11 in 1.25 in\",\"info\":{\"headingsIndex\":[23,1],\"headingLevel\":2,\"headings\":[\"23. Units used for measuring volume of wood\",\"23.1. In Britain, the deal is apparently any piece of wood over 6 feet long, over\\n7 wide and 2.5 inches thick. The OED doesn't give a standard size. A piece\\nof wood less than 7 inches wide is called a \\\"batten\\\". This unit is now used\\nexclusively for fir and pine.\"],\"comment\":\"The standard North American deal [OED]\\nIf it's half as thick as the standard\\ndeal it's called a \\\"whole deal\\\"!\\nAnd half again as thick is a split deal.\"}},{\"line\":\"splitdeal = 12 ft 11 in 5|8 in\",\"info\":{\"headingsIndex\":[23,1],\"headingLevel\":2,\"headings\":[\"23. Units used for measuring volume of wood\",\"23.1. In Britain, the deal is apparently any piece of wood over 6 feet long, over\\n7 wide and 2.5 inches thick. The OED doesn't give a standard size. A piece\\nof wood less than 7 inches wide is called a \\\"batten\\\". This unit is now used\\nexclusively for fir and pine.\"],\"comment\":\"The standard North American deal [OED]\\nIf it's half as thick as the standard\\ndeal it's called a \\\"whole deal\\\"!\\nAnd half again as thick is a split deal.\"}},{\"line\":\"poundcut = pound / gallon\",\"info\":{\"headingsIndex\":[24],\"headingLevel\":1,\"headings\":[\"24. Used for shellac mixing rate\"],\"comment\":\"\"}},{\"line\":\"lbcut = poundcut\",\"info\":{\"headingsIndex\":[24],\"headingLevel\":1,\"headings\":[\"24. Used for shellac mixing rate\"],\"comment\":\"\"}},{\"line\":\"FLUID_FLOW = VOLUME / TIME\",\"info\":{\"headingsIndex\":[25],\"headingLevel\":1,\"headings\":[\"25. Gas and Liquid flow units\"],\"comment\":\"\"}},{\"line\":\"cumec = m^3/s\",\"info\":{\"headingsIndex\":[25,1],\"headingLevel\":2,\"headings\":[\"25. Gas and Liquid flow units\",\"25.1. Some obvious volumetric gas flow units (cu is short for cubic)\"],\"comment\":\"\"}},{\"line\":\"cusec = ft^3/s\",\"info\":{\"headingsIndex\":[25,1],\"headingLevel\":2,\"headings\":[\"25. Gas and Liquid flow units\",\"25.1. Some obvious volumetric gas flow units (cu is short for cubic)\"],\"comment\":\"\"}},{\"line\":\"gph = gal/hr\",\"info\":{\"headingsIndex\":[25,2],\"headingLevel\":2,\"headings\":[\"25. Gas and Liquid flow units\",\"25.2. Conventional abbreviations for fluid flow units\"],\"comment\":\"\"}},{\"line\":\"gpm = gal/min\",\"info\":{\"headingsIndex\":[25,2],\"headingLevel\":2,\"headings\":[\"25. Gas and Liquid flow units\",\"25.2. Conventional abbreviations for fluid flow units\"],\"comment\":\"\"}},{\"line\":\"mgd = megagal/day\",\"info\":{\"headingsIndex\":[25,2],\"headingLevel\":2,\"headings\":[\"25. Gas and Liquid flow units\",\"25.2. Conventional abbreviations for fluid flow units\"],\"comment\":\"\"}},{\"line\":\"cfs = ft^3/s\",\"info\":{\"headingsIndex\":[25,2],\"headingLevel\":2,\"headings\":[\"25. Gas and Liquid flow units\",\"25.2. Conventional abbreviations for fluid flow units\"],\"comment\":\"\"}},{\"line\":\"cfh = ft^3/hour\",\"info\":{\"headingsIndex\":[25,2],\"headingLevel\":2,\"headings\":[\"25. Gas and Liquid flow units\",\"25.2. Conventional abbreviations for fluid flow units\"],\"comment\":\"\"}},{\"line\":\"cfm = ft^3/min\",\"info\":{\"headingsIndex\":[25,2],\"headingLevel\":2,\"headings\":[\"25. Gas and Liquid flow units\",\"25.2. Conventional abbreviations for fluid flow units\"],\"comment\":\"\"}},{\"line\":\"lpm = liter/min\",\"info\":{\"headingsIndex\":[25,2],\"headingLevel\":2,\"headings\":[\"25. Gas and Liquid flow units\",\"25.2. Conventional abbreviations for fluid flow units\"],\"comment\":\"\"}},{\"line\":\"lfm = ft/min\",\"info\":{\"headingsIndex\":[25,2],\"headingLevel\":2,\"headings\":[\"25. Gas and Liquid flow units\",\"25.2. Conventional abbreviations for fluid flow units\"],\"comment\":\"Used to report air flow produced by fans.\\nMultiply by cross sectional area to get a\\nflow in cfm.\"}},{\"line\":\"pru = mmHg / (ml/min)\",\"info\":{\"headingsIndex\":[25,2],\"headingLevel\":2,\"headings\":[\"25. Gas and Liquid flow units\",\"25.2. Conventional abbreviations for fluid flow units\"],\"comment\":\"peripheral resistance unit, used in\\nmedicine to assess blood flow in\\nthe capillaries.\"}},{\"line\":\"minersinchAZ = 1.5 ft^3/min\",\"info\":{\"headingsIndex\":[26],\"headingLevel\":1,\"headings\":[\"26. Miner's inch: This is an old historic unit used in the Western United\\nStates. It is generally defined as the rate of flow through a one square\\ninch hole at a specified depth such as 4 inches. In the late 19th century,\\nvolume of water was sometimes measured in the \\\"24 hour inch\\\". Values for the\\nminer's inch were fixed by state statues. (This information is from a web\\nsite operated by the Nevada Division of Water Planning: The Water Words\\nDictionary at http://www.state.nv.us/cnr/ndwp/dict-1/waterwds.htm.)\"],\"comment\":\"\"}},{\"line\":\"minersinchCA = 1.5 ft^3/min\",\"info\":{\"headingsIndex\":[26],\"headingLevel\":1,\"headings\":[\"26. Miner's inch: This is an old historic unit used in the Western United\\nStates. It is generally defined as the rate of flow through a one square\\ninch hole at a specified depth such as 4 inches. In the late 19th century,\\nvolume of water was sometimes measured in the \\\"24 hour inch\\\". Values for the\\nminer's inch were fixed by state statues. (This information is from a web\\nsite operated by the Nevada Division of Water Planning: The Water Words\\nDictionary at http://www.state.nv.us/cnr/ndwp/dict-1/waterwds.htm.)\"],\"comment\":\"\"}},{\"line\":\"minersinchMT = 1.5 ft^3/min\",\"info\":{\"headingsIndex\":[26],\"headingLevel\":1,\"headings\":[\"26. Miner's inch: This is an old historic unit used in the Western United\\nStates. It is generally defined as the rate of flow through a one square\\ninch hole at a specified depth such as 4 inches. In the late 19th century,\\nvolume of water was sometimes measured in the \\\"24 hour inch\\\". Values for the\\nminer's inch were fixed by state statues. (This information is from a web\\nsite operated by the Nevada Division of Water Planning: The Water Words\\nDictionary at http://www.state.nv.us/cnr/ndwp/dict-1/waterwds.htm.)\"],\"comment\":\"\"}},{\"line\":\"minersinchNV = 1.5 ft^3/min\",\"info\":{\"headingsIndex\":[26],\"headingLevel\":1,\"headings\":[\"26. Miner's inch: This is an old historic unit used in the Western United\\nStates. It is generally defined as the rate of flow through a one square\\ninch hole at a specified depth such as 4 inches. In the late 19th century,\\nvolume of water was sometimes measured in the \\\"24 hour inch\\\". Values for the\\nminer's inch were fixed by state statues. (This information is from a web\\nsite operated by the Nevada Division of Water Planning: The Water Words\\nDictionary at http://www.state.nv.us/cnr/ndwp/dict-1/waterwds.htm.)\"],\"comment\":\"\"}},{\"line\":\"minersinchOR = 1.5 ft^3/min\",\"info\":{\"headingsIndex\":[26],\"headingLevel\":1,\"headings\":[\"26. Miner's inch: This is an old historic unit used in the Western United\\nStates. It is generally defined as the rate of flow through a one square\\ninch hole at a specified depth such as 4 inches. In the late 19th century,\\nvolume of water was sometimes measured in the \\\"24 hour inch\\\". Values for the\\nminer's inch were fixed by state statues. (This information is from a web\\nsite operated by the Nevada Division of Water Planning: The Water Words\\nDictionary at http://www.state.nv.us/cnr/ndwp/dict-1/waterwds.htm.)\"],\"comment\":\"\"}},{\"line\":\"minersinchID = 1.2 ft^3/min\",\"info\":{\"headingsIndex\":[26],\"headingLevel\":1,\"headings\":[\"26. Miner's inch: This is an old historic unit used in the Western United\\nStates. It is generally defined as the rate of flow through a one square\\ninch hole at a specified depth such as 4 inches. In the late 19th century,\\nvolume of water was sometimes measured in the \\\"24 hour inch\\\". Values for the\\nminer's inch were fixed by state statues. (This information is from a web\\nsite operated by the Nevada Division of Water Planning: The Water Words\\nDictionary at http://www.state.nv.us/cnr/ndwp/dict-1/waterwds.htm.)\"],\"comment\":\"\"}},{\"line\":\"minersinchKS = 1.2 ft^3/min\",\"info\":{\"headingsIndex\":[26],\"headingLevel\":1,\"headings\":[\"26. Miner's inch: This is an old historic unit used in the Western United\\nStates. It is generally defined as the rate of flow through a one square\\ninch hole at a specified depth such as 4 inches. In the late 19th century,\\nvolume of water was sometimes measured in the \\\"24 hour inch\\\". Values for the\\nminer's inch were fixed by state statues. (This information is from a web\\nsite operated by the Nevada Division of Water Planning: The Water Words\\nDictionary at http://www.state.nv.us/cnr/ndwp/dict-1/waterwds.htm.)\"],\"comment\":\"\"}},{\"line\":\"minersinchNE = 1.2 ft^3/min\",\"info\":{\"headingsIndex\":[26],\"headingLevel\":1,\"headings\":[\"26. Miner's inch: This is an old historic unit used in the Western United\\nStates. It is generally defined as the rate of flow through a one square\\ninch hole at a specified depth such as 4 inches. In the late 19th century,\\nvolume of water was sometimes measured in the \\\"24 hour inch\\\". Values for the\\nminer's inch were fixed by state statues. (This information is from a web\\nsite operated by the Nevada Division of Water Planning: The Water Words\\nDictionary at http://www.state.nv.us/cnr/ndwp/dict-1/waterwds.htm.)\"],\"comment\":\"\"}},{\"line\":\"minersinchNM = 1.2 ft^3/min\",\"info\":{\"headingsIndex\":[26],\"headingLevel\":1,\"headings\":[\"26. Miner's inch: This is an old historic unit used in the Western United\\nStates. It is generally defined as the rate of flow through a one square\\ninch hole at a specified depth such as 4 inches. In the late 19th century,\\nvolume of water was sometimes measured in the \\\"24 hour inch\\\". Values for the\\nminer's inch were fixed by state statues. (This information is from a web\\nsite operated by the Nevada Division of Water Planning: The Water Words\\nDictionary at http://www.state.nv.us/cnr/ndwp/dict-1/waterwds.htm.)\"],\"comment\":\"\"}},{\"line\":\"minersinchND = 1.2 ft^3/min\",\"info\":{\"headingsIndex\":[26],\"headingLevel\":1,\"headings\":[\"26. Miner's inch: This is an old historic unit used in the Western United\\nStates. It is generally defined as the rate of flow through a one square\\ninch hole at a specified depth such as 4 inches. In the late 19th century,\\nvolume of water was sometimes measured in the \\\"24 hour inch\\\". Values for the\\nminer's inch were fixed by state statues. (This information is from a web\\nsite operated by the Nevada Division of Water Planning: The Water Words\\nDictionary at http://www.state.nv.us/cnr/ndwp/dict-1/waterwds.htm.)\"],\"comment\":\"\"}},{\"line\":\"minersinchSD = 1.2 ft^3/min\",\"info\":{\"headingsIndex\":[26],\"headingLevel\":1,\"headings\":[\"26. Miner's inch: This is an old historic unit used in the Western United\\nStates. It is generally defined as the rate of flow through a one square\\ninch hole at a specified depth such as 4 inches. In the late 19th century,\\nvolume of water was sometimes measured in the \\\"24 hour inch\\\". Values for the\\nminer's inch were fixed by state statues. (This information is from a web\\nsite operated by the Nevada Division of Water Planning: The Water Words\\nDictionary at http://www.state.nv.us/cnr/ndwp/dict-1/waterwds.htm.)\"],\"comment\":\"\"}},{\"line\":\"minersinchUT = 1.2 ft^3/min\",\"info\":{\"headingsIndex\":[26],\"headingLevel\":1,\"headings\":[\"26. Miner's inch: This is an old historic unit used in the Western United\\nStates. It is generally defined as the rate of flow through a one square\\ninch hole at a specified depth such as 4 inches. In the late 19th century,\\nvolume of water was sometimes measured in the \\\"24 hour inch\\\". Values for the\\nminer's inch were fixed by state statues. (This information is from a web\\nsite operated by the Nevada Division of Water Planning: The Water Words\\nDictionary at http://www.state.nv.us/cnr/ndwp/dict-1/waterwds.htm.)\"],\"comment\":\"\"}},{\"line\":\"minersinchCO = 1 ft^3/sec / 38.4\",\"info\":{\"headingsIndex\":[26],\"headingLevel\":1,\"headings\":[\"26. Miner's inch: This is an old historic unit used in the Western United\\nStates. It is generally defined as the rate of flow through a one square\\ninch hole at a specified depth such as 4 inches. In the late 19th century,\\nvolume of water was sometimes measured in the \\\"24 hour inch\\\". Values for the\\nminer's inch were fixed by state statues. (This information is from a web\\nsite operated by the Nevada Division of Water Planning: The Water Words\\nDictionary at http://www.state.nv.us/cnr/ndwp/dict-1/waterwds.htm.)\"],\"comment\":\"38.4 miner's inches = 1 ft^3/sec\"}},{\"line\":\"minersinchBC = 1.68 ft^3/min\",\"info\":{\"headingsIndex\":[26],\"headingLevel\":1,\"headings\":[\"26. Miner's inch: This is an old historic unit used in the Western United\\nStates. It is generally defined as the rate of flow through a one square\\ninch hole at a specified depth such as 4 inches. In the late 19th century,\\nvolume of water was sometimes measured in the \\\"24 hour inch\\\". Values for the\\nminer's inch were fixed by state statues. (This information is from a web\\nsite operated by the Nevada Division of Water Planning: The Water Words\\nDictionary at http://www.state.nv.us/cnr/ndwp/dict-1/waterwds.htm.)\"],\"comment\":\"British Columbia\"}},{\"line\":\"sverdrup = 1e6 m^3 / sec\",\"info\":{\"headingsIndex\":[27],\"headingLevel\":1,\"headings\":[\"27. Oceanographic flow\"],\"comment\":\"Used to express flow of ocean\\ncurrents.  Named after Norwegian\\noceanographer H. Sverdrup.\"}},{\"line\":\"GAS_FLOW = PRESSURE FLUID_FLOW\",\"info\":{\"headingsIndex\":[28],\"headingLevel\":1,\"headings\":[\"28. In vacuum science and some other applications, gas flow is measured\\nas the product of volumetric flow and pressure. This is useful\\nbecause it makes it easy to compare with the flow at standard\\npressure (one atmosphere). It also directly relates to the number\\nof gas molecules per unit time, and hence to the mass flow if the\\nmolecular mass is known.\"],\"comment\":\"\"}},{\"line\":\"sccm = atm cc/min\",\"info\":{\"headingsIndex\":[28],\"headingLevel\":1,\"headings\":[\"28. In vacuum science and some other applications, gas flow is measured\\nas the product of volumetric flow and pressure. This is useful\\nbecause it makes it easy to compare with the flow at standard\\npressure (one atmosphere). It also directly relates to the number\\nof gas molecules per unit time, and hence to the mass flow if the\\nmolecular mass is known.\"],\"comment\":\"'s' is for \\\"standard\\\" to indicate\\nflow at standard pressure\"}},{\"line\":\"sccs = atm cc/sec\",\"info\":{\"headingsIndex\":[28],\"headingLevel\":1,\"headings\":[\"28. In vacuum science and some other applications, gas flow is measured\\nas the product of volumetric flow and pressure. This is useful\\nbecause it makes it easy to compare with the flow at standard\\npressure (one atmosphere). It also directly relates to the number\\nof gas molecules per unit time, and hence to the mass flow if the\\nmolecular mass is known.\"],\"comment\":\"'s' is for \\\"standard\\\" to indicate\\nflow at standard pressure\"}},{\"line\":\"scfh = atm ft^3/hour\",\"info\":{\"headingsIndex\":[28],\"headingLevel\":1,\"headings\":[\"28. In vacuum science and some other applications, gas flow is measured\\nas the product of volumetric flow and pressure. This is useful\\nbecause it makes it easy to compare with the flow at standard\\npressure (one atmosphere). It also directly relates to the number\\nof gas molecules per unit time, and hence to the mass flow if the\\nmolecular mass is known.\"],\"comment\":\"'s' is for \\\"standard\\\" to indicate\\nflow at standard pressure\"}},{\"line\":\"scfm = atm ft^3/min\",\"info\":{\"headingsIndex\":[28],\"headingLevel\":1,\"headings\":[\"28. In vacuum science and some other applications, gas flow is measured\\nas the product of volumetric flow and pressure. This is useful\\nbecause it makes it easy to compare with the flow at standard\\npressure (one atmosphere). It also directly relates to the number\\nof gas molecules per unit time, and hence to the mass flow if the\\nmolecular mass is known.\"],\"comment\":\"'s' is for \\\"standard\\\" to indicate\\nflow at standard pressure\"}},{\"line\":\"slpm = atm liter/min\",\"info\":{\"headingsIndex\":[28],\"headingLevel\":1,\"headings\":[\"28. In vacuum science and some other applications, gas flow is measured\\nas the product of volumetric flow and pressure. This is useful\\nbecause it makes it easy to compare with the flow at standard\\npressure (one atmosphere). It also directly relates to the number\\nof gas molecules per unit time, and hence to the mass flow if the\\nmolecular mass is known.\"],\"comment\":\"'s' is for \\\"standard\\\" to indicate\\nflow at standard pressure\"}},{\"line\":\"slph = atm liter/hour\",\"info\":{\"headingsIndex\":[28],\"headingLevel\":1,\"headings\":[\"28. In vacuum science and some other applications, gas flow is measured\\nas the product of volumetric flow and pressure. This is useful\\nbecause it makes it easy to compare with the flow at standard\\npressure (one atmosphere). It also directly relates to the number\\nof gas molecules per unit time, and hence to the mass flow if the\\nmolecular mass is known.\"],\"comment\":\"'s' is for \\\"standard\\\" to indicate\\nflow at standard pressure\"}},{\"line\":\"lusec = liter micron Hg / s\",\"info\":{\"headingsIndex\":[28],\"headingLevel\":1,\"headings\":[\"28. In vacuum science and some other applications, gas flow is measured\\nas the product of volumetric flow and pressure. This is useful\\nbecause it makes it easy to compare with the flow at standard\\npressure (one atmosphere). It also directly relates to the number\\nof gas molecules per unit time, and hence to the mass flow if the\\nmolecular mass is known.\"],\"comment\":\"Used in vacuum science\"}},{\"line\":\"lapserate = 6.5 K/km\",\"info\":{\"headingsIndex\":[29],\"headingLevel\":1,\"headings\":[\"29. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"temperature lapse rate, -dT/dz, in troposphere\\n\\nUS Std Atm (1976)\"}},{\"line\":\"air_1976 = 78.084   %    28.0134 \\t      + 20.9476  %    31.9988 \\t      + 9340     ppm  39.948 \\t      +  314     ppm  44.00995 \\t      +   18.18  ppm  20.183 \\t      +    5.24  ppm   4.0026 \\t      +    2     ppm  16.04303 \\t      +    1.14  ppm  83.80 \\t      +    0.55  ppm   2.01594 \\t      +    0.087 ppm 131.30\",\"info\":{\"headingsIndex\":[29],\"headingLevel\":1,\"headings\":[\"29. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"air molecular weight, including constituent mol wt, given\\nin Table 3, p. 3\"}},{\"line\":\"R_1976 = 8.31432e3 N m/(kmol K)\",\"info\":{\"headingsIndex\":[29],\"headingLevel\":1,\"headings\":[\"29. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"universal gas constant\"}},{\"line\":\"polyndx_1976 = air_1976 (kg/kmol) gravity/(R_1976 lapserate) - 1\",\"info\":{\"headingsIndex\":[29],\"headingLevel\":1,\"headings\":[\"29. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"polytropic index n\\n\\n\\nIf desired, redefine using current values for air mol wt and R\"}},{\"line\":\"polyndx = polyndx_1976\",\"info\":{\"headingsIndex\":[29],\"headingLevel\":1,\"headings\":[\"29. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"\"}},{\"line\":\"polyexpnt = (polyndx + 1) / polyndx\",\"info\":{\"headingsIndex\":[29],\"headingLevel\":1,\"headings\":[\"29. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"for comparison with various references\"}},{\"line\":\"stdatmT0 = 288.15 K\",\"info\":{\"headingsIndex\":[29],\"headingLevel\":1,\"headings\":[\"29. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"The model assumes the following reference values:\\nsea-level temperature and pressure\"}},{\"line\":\"stdatmP0 = atm\",\"info\":{\"headingsIndex\":[29],\"headingLevel\":1,\"headings\":[\"29. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"The model assumes the following reference values:\\nsea-level temperature and pressure\"}},{\"line\":\"earthradUSAtm = 6356766 m\",\"info\":{\"headingsIndex\":[29],\"headingLevel\":1,\"headings\":[\"29. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"\\\"effective radius\\\" for relation of geometric to geopotential height,\\nat a latitude at which g = 9.80665 m/s (approximately 45.543 deg); no\\nrelation to actual radius\"}},{\"line\":\"stdatmTH = h => stdatmT0+(-lapserate h) \",\"info\":{\"headingsIndex\":[29],\"headingLevel\":1,\"headings\":[\"29. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"Temperature vs. geopotential height h\\nAssumes 15 degC at sea level\\nBased on approx 45 deg latitude\\nLower limits of domain and upper limits of range are those of the\\ntables in US Standard Atmosphere (NASA 1976)\"}},{\"line\":\"stdatmTH^-1 = stdatmTH => (stdatmT0+(-stdatmTH))/lapserate\",\"info\":{\"headingsIndex\":[29],\"headingLevel\":1,\"headings\":[\"29. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"Temperature vs. geopotential height h\\nAssumes 15 degC at sea level\\nBased on approx 45 deg latitude\\nLower limits of domain and upper limits of range are those of the\\ntables in US Standard Atmosphere (NASA 1976)\"}},{\"line\":\"stdatmT = z => stdatmTH(geop_ht(z)) \",\"info\":{\"headingsIndex\":[29],\"headingLevel\":1,\"headings\":[\"29. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"Temperature vs. geometric height z; based on approx 45 deg latitude\"}},{\"line\":\"stdatmT^-1 = stdatmT => ~geop_ht(~stdatmTH(stdatmT))\",\"info\":{\"headingsIndex\":[29],\"headingLevel\":1,\"headings\":[\"29. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"Temperature vs. geometric height z; based on approx 45 deg latitude\"}},{\"line\":\"stdatmPH = h => atm (1 - (lapserate/stdatmT0) h)^(polyndx + 1) \",\"info\":{\"headingsIndex\":[29],\"headingLevel\":1,\"headings\":[\"29. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"Pressure vs. geopotential height h\\nAssumes 15 degC and 101325 Pa at sea level\\nBased on approx 45 deg latitude\\nLower limits of domain and upper limits of range are those of the\\ntables in US Standard Atmosphere (NASA 1976)\"}},{\"line\":\"stdatmPH^-1 = stdatmPH => (stdatmT0/lapserate) (1+(-(stdatmPH/stdatmP0)^(1/(polyndx + 1))))\",\"info\":{\"headingsIndex\":[29],\"headingLevel\":1,\"headings\":[\"29. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"Pressure vs. geopotential height h\\nAssumes 15 degC and 101325 Pa at sea level\\nBased on approx 45 deg latitude\\nLower limits of domain and upper limits of range are those of the\\ntables in US Standard Atmosphere (NASA 1976)\"}},{\"line\":\"stdatmP = z => stdatmPH(geop_ht(z))\",\"info\":{\"headingsIndex\":[29],\"headingLevel\":1,\"headings\":[\"29. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"Pressure vs. geometric height z; based on approx 45 deg latitude\"}},{\"line\":\"stdatmP^-1 = stdatmP => ~geop_ht(~stdatmPH(stdatmP))\",\"info\":{\"headingsIndex\":[29],\"headingLevel\":1,\"headings\":[\"29. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"Pressure vs. geometric height z; based on approx 45 deg latitude\"}},{\"line\":\"geop_ht = z => (earthradUSAtm z) / (earthradUSAtm + z) \",\"info\":{\"headingsIndex\":[29],\"headingLevel\":1,\"headings\":[\"29. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"Geopotential height from geometric height\\nBased on approx 45 deg latitude\\nLower limits of domain and range are somewhat arbitrary; they\\ncorrespond to the limits in the US Std Atm tables\"}},{\"line\":\"geop_ht^-1 = geop_ht => (earthradUSAtm geop_ht) / (earthradUSAtm + (-geop_ht))\",\"info\":{\"headingsIndex\":[29],\"headingLevel\":1,\"headings\":[\"29. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"Geopotential height from geometric height\\nBased on approx 45 deg latitude\\nLower limits of domain and range are somewhat arbitrary; they\\ncorrespond to the limits in the US Std Atm tables\"}},{\"line\":\"g_phi = lat => noerror      980.6160e-2 (1+(-0.0026373) cos(2 lat)+0.0000059 cos(2 lat)^2) m/s^2\",\"info\":{\"headingsIndex\":[29],\"headingLevel\":1,\"headings\":[\"29. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"The standard value for the sea-level acceleration due to gravity is\\n9.80665 m/s^2, but the actual value varies with latitude (Harrison 1949)\\nR_eff = 2 g_phi / denom\\ng_phi = 978.0356e-2 (1+0.0052885 sin(lat)^2+(-0.0000059) sin(2 lat)^2)\\nor\\ng_phi = 980.6160e-2 (1+(-0.0026373) cos(2 lat)+0.0000059 cos(2 lat)^2)\\ndenom = 3.085462e-6+2.27e-9 cos(2 lat)+(-2e-12) cos(4 lat) (minutes?)\\nThere is no inverse function; the standard value applies at a latitude\\nof about 45.543 deg\"}},{\"line\":\"earthradius_eff = lat => noerror     m 2 9.780356 (1+0.0052885 sin(lat)^2+(-0.0000059) sin(2 lat)^2) /     (3.085462e-6 + 2.27e-9 cos(2 lat) + (-2e-12) cos(4 lat))\",\"info\":{\"headingsIndex\":[29],\"headingLevel\":1,\"headings\":[\"29. US Standard Atmosphere (1976)\\nAtmospheric temperature and pressure vs. geometric height above sea level\\nThis definition covers only the troposphere (the lowest atmospheric\\nlayer, up to 11 km), and assumes the layer is polytropic.\\nA polytropic process is one for which PV^k = const, where P is the\\npressure, V is the volume, and k is the polytropic exponent. The\\npolytropic index is n = 1 / (k - 1). As noted in the Wikipedia article\\nhttps://en.wikipedia.org/wiki/Polytropic_process, some authors reverse\\nthe definitions of \\\"exponent\\\" and \\\"index.\\\" The functions below assume\\nthe following parameters:\"],\"comment\":\"effective Earth radius for relation of geometric height to\\ngeopotential height, as function of latitude (Harrison 1949)\"}},{\"line\":\"Patm = atm\",\"info\":{\"headingsIndex\":[30],\"headingLevel\":1,\"headings\":[\"30. Gauge pressure functions\\n\\nGauge pressure is measured relative to atmospheric pressure. In the English\\nsystem, where pressure is often given in pounds per square inch, gauge\\npressure is often indicated by 'psig' to distinguish it from absolute\\npressure, often indicated by 'psia'. At the standard atmospheric pressure\\nof 14.696 psia, a gauge pressure of 0 psig is an absolute pressure of 14.696\\npsia; an automobile tire inflated to 31 psig has an absolute pressure of\\n45.696 psia.\\n\\nWith gaugepressure(), the units must be specified (e.g., gaugepressure(1.5\\nbar)); with psig(), the units are taken as psi, so the example above of tire\\npressure could be given as psig(31).\\n\\nIf the normal elevation is significantly different from sea level, change\\nPatm appropriately, and adjust the lower domain limit on the gaugepressure\\ndefinition.\"],\"comment\":\"\"}},{\"line\":\"gaugepressure = x => x + Patm \",\"info\":{\"headingsIndex\":[30],\"headingLevel\":1,\"headings\":[\"30. Gauge pressure functions\\n\\nGauge pressure is measured relative to atmospheric pressure. In the English\\nsystem, where pressure is often given in pounds per square inch, gauge\\npressure is often indicated by 'psig' to distinguish it from absolute\\npressure, often indicated by 'psia'. At the standard atmospheric pressure\\nof 14.696 psia, a gauge pressure of 0 psig is an absolute pressure of 14.696\\npsia; an automobile tire inflated to 31 psig has an absolute pressure of\\n45.696 psia.\\n\\nWith gaugepressure(), the units must be specified (e.g., gaugepressure(1.5\\nbar)); with psig(), the units are taken as psi, so the example above of tire\\npressure could be given as psig(31).\\n\\nIf the normal elevation is significantly different from sea level, change\\nPatm appropriately, and adjust the lower domain limit on the gaugepressure\\ndefinition.\"],\"comment\":\"\"}},{\"line\":\"gaugepressure^-1 = gaugepressure => gaugepressure+(-Patm)\",\"info\":{\"headingsIndex\":[30],\"headingLevel\":1,\"headings\":[\"30. Gauge pressure functions\\n\\nGauge pressure is measured relative to atmospheric pressure. In the English\\nsystem, where pressure is often given in pounds per square inch, gauge\\npressure is often indicated by 'psig' to distinguish it from absolute\\npressure, often indicated by 'psia'. At the standard atmospheric pressure\\nof 14.696 psia, a gauge pressure of 0 psig is an absolute pressure of 14.696\\npsia; an automobile tire inflated to 31 psig has an absolute pressure of\\n45.696 psia.\\n\\nWith gaugepressure(), the units must be specified (e.g., gaugepressure(1.5\\nbar)); with psig(), the units are taken as psi, so the example above of tire\\npressure could be given as psig(31).\\n\\nIf the normal elevation is significantly different from sea level, change\\nPatm appropriately, and adjust the lower domain limit on the gaugepressure\\ndefinition.\"],\"comment\":\"\"}},{\"line\":\"psig = x => gaugepressure(x psi) \",\"info\":{\"headingsIndex\":[30],\"headingLevel\":1,\"headings\":[\"30. Gauge pressure functions\\n\\nGauge pressure is measured relative to atmospheric pressure. In the English\\nsystem, where pressure is often given in pounds per square inch, gauge\\npressure is often indicated by 'psig' to distinguish it from absolute\\npressure, often indicated by 'psia'. At the standard atmospheric pressure\\nof 14.696 psia, a gauge pressure of 0 psig is an absolute pressure of 14.696\\npsia; an automobile tire inflated to 31 psig has an absolute pressure of\\n45.696 psia.\\n\\nWith gaugepressure(), the units must be specified (e.g., gaugepressure(1.5\\nbar)); with psig(), the units are taken as psi, so the example above of tire\\npressure could be given as psig(31).\\n\\nIf the normal elevation is significantly different from sea level, change\\nPatm appropriately, and adjust the lower domain limit on the gaugepressure\\ndefinition.\"],\"comment\":\"\"}},{\"line\":\"psig^-1 = psig => ~gaugepressure(psig) / psi\",\"info\":{\"headingsIndex\":[30],\"headingLevel\":1,\"headings\":[\"30. Gauge pressure functions\\n\\nGauge pressure is measured relative to atmospheric pressure. In the English\\nsystem, where pressure is often given in pounds per square inch, gauge\\npressure is often indicated by 'psig' to distinguish it from absolute\\npressure, often indicated by 'psia'. At the standard atmospheric pressure\\nof 14.696 psia, a gauge pressure of 0 psig is an absolute pressure of 14.696\\npsia; an automobile tire inflated to 31 psig has an absolute pressure of\\n45.696 psia.\\n\\nWith gaugepressure(), the units must be specified (e.g., gaugepressure(1.5\\nbar)); with psig(), the units are taken as psi, so the example above of tire\\npressure could be given as psig(31).\\n\\nIf the normal elevation is significantly different from sea level, change\\nPatm appropriately, and adjust the lower domain limit on the gaugepressure\\ndefinition.\"],\"comment\":\"\"}},{\"line\":\"g00 = (-1)\",\"info\":{\"headingsIndex\":[31],\"headingLevel\":1,\"headings\":[\"31. Wire Gauge\\n\\nThis area is a nightmare with huge charts of wire gauge diameters\\nthat usually have no clear origin. There are at least 5 competing wire gauge\\nsystems to add to the confusion. The use of wire gauge is related to the\\nmanufacturing method: a metal rod is heated and drawn through a hole. The\\nsize change can't be too big. To get smaller wires, the process is repeated\\nwith a series of smaller holes. Generally larger gauges mean smaller wires.\\nThe gauges often have values such as \\\"00\\\" and \\\"000\\\" which are larger sizes\\nthan simply \\\"0\\\" gauge. In the tables that appear below, these gauges must be\\nspecified as negative numbers (e.g. \\\"00\\\" is -1, \\\"000\\\" is -2, etc).\\nAlternatively, you can use the following units:\"],\"comment\":\"\"}},{\"line\":\"g000 = (-2)\",\"info\":{\"headingsIndex\":[31],\"headingLevel\":1,\"headings\":[\"31. Wire Gauge\\n\\nThis area is a nightmare with huge charts of wire gauge diameters\\nthat usually have no clear origin. There are at least 5 competing wire gauge\\nsystems to add to the confusion. The use of wire gauge is related to the\\nmanufacturing method: a metal rod is heated and drawn through a hole. The\\nsize change can't be too big. To get smaller wires, the process is repeated\\nwith a series of smaller holes. Generally larger gauges mean smaller wires.\\nThe gauges often have values such as \\\"00\\\" and \\\"000\\\" which are larger sizes\\nthan simply \\\"0\\\" gauge. In the tables that appear below, these gauges must be\\nspecified as negative numbers (e.g. \\\"00\\\" is -1, \\\"000\\\" is -2, etc).\\nAlternatively, you can use the following units:\"],\"comment\":\"\"}},{\"line\":\"g0000 = (-3)\",\"info\":{\"headingsIndex\":[31],\"headingLevel\":1,\"headings\":[\"31. Wire Gauge\\n\\nThis area is a nightmare with huge charts of wire gauge diameters\\nthat usually have no clear origin. There are at least 5 competing wire gauge\\nsystems to add to the confusion. The use of wire gauge is related to the\\nmanufacturing method: a metal rod is heated and drawn through a hole. The\\nsize change can't be too big. To get smaller wires, the process is repeated\\nwith a series of smaller holes. Generally larger gauges mean smaller wires.\\nThe gauges often have values such as \\\"00\\\" and \\\"000\\\" which are larger sizes\\nthan simply \\\"0\\\" gauge. In the tables that appear below, these gauges must be\\nspecified as negative numbers (e.g. \\\"00\\\" is -1, \\\"000\\\" is -2, etc).\\nAlternatively, you can use the following units:\"],\"comment\":\"\"}},{\"line\":\"g00000 = (-4)\",\"info\":{\"headingsIndex\":[31],\"headingLevel\":1,\"headings\":[\"31. Wire Gauge\\n\\nThis area is a nightmare with huge charts of wire gauge diameters\\nthat usually have no clear origin. There are at least 5 competing wire gauge\\nsystems to add to the confusion. The use of wire gauge is related to the\\nmanufacturing method: a metal rod is heated and drawn through a hole. The\\nsize change can't be too big. To get smaller wires, the process is repeated\\nwith a series of smaller holes. Generally larger gauges mean smaller wires.\\nThe gauges often have values such as \\\"00\\\" and \\\"000\\\" which are larger sizes\\nthan simply \\\"0\\\" gauge. In the tables that appear below, these gauges must be\\nspecified as negative numbers (e.g. \\\"00\\\" is -1, \\\"000\\\" is -2, etc).\\nAlternatively, you can use the following units:\"],\"comment\":\"\"}},{\"line\":\"g000000 = (-5)\",\"info\":{\"headingsIndex\":[31],\"headingLevel\":1,\"headings\":[\"31. Wire Gauge\\n\\nThis area is a nightmare with huge charts of wire gauge diameters\\nthat usually have no clear origin. There are at least 5 competing wire gauge\\nsystems to add to the confusion. The use of wire gauge is related to the\\nmanufacturing method: a metal rod is heated and drawn through a hole. The\\nsize change can't be too big. To get smaller wires, the process is repeated\\nwith a series of smaller holes. Generally larger gauges mean smaller wires.\\nThe gauges often have values such as \\\"00\\\" and \\\"000\\\" which are larger sizes\\nthan simply \\\"0\\\" gauge. In the tables that appear below, these gauges must be\\nspecified as negative numbers (e.g. \\\"00\\\" is -1, \\\"000\\\" is -2, etc).\\nAlternatively, you can use the following units:\"],\"comment\":\"\"}},{\"line\":\"g0000000 = (-6)\",\"info\":{\"headingsIndex\":[31],\"headingLevel\":1,\"headings\":[\"31. Wire Gauge\\n\\nThis area is a nightmare with huge charts of wire gauge diameters\\nthat usually have no clear origin. There are at least 5 competing wire gauge\\nsystems to add to the confusion. The use of wire gauge is related to the\\nmanufacturing method: a metal rod is heated and drawn through a hole. The\\nsize change can't be too big. To get smaller wires, the process is repeated\\nwith a series of smaller holes. Generally larger gauges mean smaller wires.\\nThe gauges often have values such as \\\"00\\\" and \\\"000\\\" which are larger sizes\\nthan simply \\\"0\\\" gauge. In the tables that appear below, these gauges must be\\nspecified as negative numbers (e.g. \\\"00\\\" is -1, \\\"000\\\" is -2, etc).\\nAlternatively, you can use the following units:\"],\"comment\":\"\"}},{\"line\":\"wiregauge = g => 1|200 92^((36+(-g))/39) in\",\"info\":{\"headingsIndex\":[31,1],\"headingLevel\":2,\"headings\":[\"31. Wire Gauge\\n\\nThis area is a nightmare with huge charts of wire gauge diameters\\nthat usually have no clear origin. There are at least 5 competing wire gauge\\nsystems to add to the confusion. The use of wire gauge is related to the\\nmanufacturing method: a metal rod is heated and drawn through a hole. The\\nsize change can't be too big. To get smaller wires, the process is repeated\\nwith a series of smaller holes. Generally larger gauges mean smaller wires.\\nThe gauges often have values such as \\\"00\\\" and \\\"000\\\" which are larger sizes\\nthan simply \\\"0\\\" gauge. In the tables that appear below, these gauges must be\\nspecified as negative numbers (e.g. \\\"00\\\" is -1, \\\"000\\\" is -2, etc).\\nAlternatively, you can use the following units:\",\"31.1. American Wire Gauge (AWG) or Brown & Sharpe Gauge appears to be the most\\nimportant gauge. ASTM B-258 specifies that this gauge is based on geometric\\ninterpolation between gauge 0000, which is 0.46 inches exactly, and gauge 36\\nwhich is 0.005 inches exactly. Therefore, the diameter in inches of a wire\\nis given by the formula 1|200 92^((36-g)/39). Note that 92^(1/39) is close\\nto 2^(1/6), so diameter is approximately halved for every 6 gauges. For the\\nrepeated zero values, use negative numbers in the formula. The same document\\nalso specifies rounding rules which seem to be ignored by makers of tables.\\nGauges up to 44 are to be specified with up to 4 significant figures, but no\\ncloser than 0.0001 inch. Gauges from 44 to 56 are to be rounded to the\\nnearest 0.00001 inch.\\n\\nIn addition to being used to measure wire thickness, this gauge is used to\\nmeasure the thickness of sheets of aluminum, copper, and most metals other\\nthan steel, iron and zinc.\"],\"comment\":\"\"}},{\"line\":\"wiregauge^-1 = wiregauge => 36+(-39)ln(200 wiregauge/in)/ln(92)\",\"info\":{\"headingsIndex\":[31,1],\"headingLevel\":2,\"headings\":[\"31. Wire Gauge\\n\\nThis area is a nightmare with huge charts of wire gauge diameters\\nthat usually have no clear origin. There are at least 5 competing wire gauge\\nsystems to add to the confusion. The use of wire gauge is related to the\\nmanufacturing method: a metal rod is heated and drawn through a hole. The\\nsize change can't be too big. To get smaller wires, the process is repeated\\nwith a series of smaller holes. Generally larger gauges mean smaller wires.\\nThe gauges often have values such as \\\"00\\\" and \\\"000\\\" which are larger sizes\\nthan simply \\\"0\\\" gauge. In the tables that appear below, these gauges must be\\nspecified as negative numbers (e.g. \\\"00\\\" is -1, \\\"000\\\" is -2, etc).\\nAlternatively, you can use the following units:\",\"31.1. American Wire Gauge (AWG) or Brown & Sharpe Gauge appears to be the most\\nimportant gauge. ASTM B-258 specifies that this gauge is based on geometric\\ninterpolation between gauge 0000, which is 0.46 inches exactly, and gauge 36\\nwhich is 0.005 inches exactly. Therefore, the diameter in inches of a wire\\nis given by the formula 1|200 92^((36-g)/39). Note that 92^(1/39) is close\\nto 2^(1/6), so diameter is approximately halved for every 6 gauges. For the\\nrepeated zero values, use negative numbers in the formula. The same document\\nalso specifies rounding rules which seem to be ignored by makers of tables.\\nGauges up to 44 are to be specified with up to 4 significant figures, but no\\ncloser than 0.0001 inch. Gauges from 44 to 56 are to be rounded to the\\nnearest 0.00001 inch.\\n\\nIn addition to being used to measure wire thickness, this gauge is used to\\nmeasure the thickness of sheets of aluminum, copper, and most metals other\\nthan steel, iron and zinc.\"],\"comment\":\"\"}},{\"line\":\"awg = wiregauge\",\"info\":{\"headingsIndex\":[31,1],\"headingLevel\":2,\"headings\":[\"31. Wire Gauge\\n\\nThis area is a nightmare with huge charts of wire gauge diameters\\nthat usually have no clear origin. There are at least 5 competing wire gauge\\nsystems to add to the confusion. The use of wire gauge is related to the\\nmanufacturing method: a metal rod is heated and drawn through a hole. The\\nsize change can't be too big. To get smaller wires, the process is repeated\\nwith a series of smaller holes. Generally larger gauges mean smaller wires.\\nThe gauges often have values such as \\\"00\\\" and \\\"000\\\" which are larger sizes\\nthan simply \\\"0\\\" gauge. In the tables that appear below, these gauges must be\\nspecified as negative numbers (e.g. \\\"00\\\" is -1, \\\"000\\\" is -2, etc).\\nAlternatively, you can use the following units:\",\"31.1. American Wire Gauge (AWG) or Brown & Sharpe Gauge appears to be the most\\nimportant gauge. ASTM B-258 specifies that this gauge is based on geometric\\ninterpolation between gauge 0000, which is 0.46 inches exactly, and gauge 36\\nwhich is 0.005 inches exactly. Therefore, the diameter in inches of a wire\\nis given by the formula 1|200 92^((36-g)/39). Note that 92^(1/39) is close\\nto 2^(1/6), so diameter is approximately halved for every 6 gauges. For the\\nrepeated zero values, use negative numbers in the formula. The same document\\nalso specifies rounding rules which seem to be ignored by makers of tables.\\nGauges up to 44 are to be specified with up to 4 significant figures, but no\\ncloser than 0.0001 inch. Gauges from 44 to 56 are to be rounded to the\\nnearest 0.00001 inch.\\n\\nIn addition to being used to measure wire thickness, this gauge is used to\\nmeasure the thickness of sheets of aluminum, copper, and most metals other\\nthan steel, iron and zinc.\"],\"comment\":\"\"}},{\"line\":\"screwgauge = g => (.06 + .013 g) in \",\"info\":{\"headingsIndex\":[32],\"headingLevel\":1,\"headings\":[\"32. Screw sizes\\n\\nIn the USA, screw diameters are reported using a gauge number.\\nMetric screws are reported as Mxx where xx is the diameter in mm.\"],\"comment\":\"\"}},{\"line\":\"screwgauge^-1 = screwgauge => (screwgauge/in + (-.06)) / .013\",\"info\":{\"headingsIndex\":[32],\"headingLevel\":1,\"headings\":[\"32. Screw sizes\\n\\nIn the USA, screw diameters are reported using a gauge number.\\nMetric screws are reported as Mxx where xx is the diameter in mm.\"],\"comment\":\"\"}},{\"line\":\"dmtxxcoarse = 120 micron\",\"info\":{\"headingsIndex\":[33],\"headingLevel\":1,\"headings\":[\"33. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtsilver = dmtxxcoarse\",\"info\":{\"headingsIndex\":[33],\"headingLevel\":1,\"headings\":[\"33. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtxx = dmtxxcoarse\",\"info\":{\"headingsIndex\":[33],\"headingLevel\":1,\"headings\":[\"33. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtxcoarse = 60 micron\",\"info\":{\"headingsIndex\":[33],\"headingLevel\":1,\"headings\":[\"33. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtx = dmtxcoarse\",\"info\":{\"headingsIndex\":[33],\"headingLevel\":1,\"headings\":[\"33. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtblack = dmtxcoarse\",\"info\":{\"headingsIndex\":[33],\"headingLevel\":1,\"headings\":[\"33. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtcoarse = 45 micron\",\"info\":{\"headingsIndex\":[33],\"headingLevel\":1,\"headings\":[\"33. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtc = dmtcoarse\",\"info\":{\"headingsIndex\":[33],\"headingLevel\":1,\"headings\":[\"33. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtblue = dmtcoarse\",\"info\":{\"headingsIndex\":[33],\"headingLevel\":1,\"headings\":[\"33. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtfine = 25 micron\",\"info\":{\"headingsIndex\":[33],\"headingLevel\":1,\"headings\":[\"33. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtred = dmtfine\",\"info\":{\"headingsIndex\":[33],\"headingLevel\":1,\"headings\":[\"33. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtf = dmtfine\",\"info\":{\"headingsIndex\":[33],\"headingLevel\":1,\"headings\":[\"33. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtefine = 9 micron\",\"info\":{\"headingsIndex\":[33],\"headingLevel\":1,\"headings\":[\"33. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmte = dmtefine\",\"info\":{\"headingsIndex\":[33],\"headingLevel\":1,\"headings\":[\"33. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtgreen = dmtefine\",\"info\":{\"headingsIndex\":[33],\"headingLevel\":1,\"headings\":[\"33. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtceramic = 7 micron\",\"info\":{\"headingsIndex\":[33],\"headingLevel\":1,\"headings\":[\"33. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtcer = dmtceramic\",\"info\":{\"headingsIndex\":[33],\"headingLevel\":1,\"headings\":[\"33. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtwhite = dmtceramic\",\"info\":{\"headingsIndex\":[33],\"headingLevel\":1,\"headings\":[\"33. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmteefine = 3 micron\",\"info\":{\"headingsIndex\":[33],\"headingLevel\":1,\"headings\":[\"33. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmttan = dmteefine\",\"info\":{\"headingsIndex\":[33],\"headingLevel\":1,\"headings\":[\"33. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"dmtee = dmteefine\",\"info\":{\"headingsIndex\":[33],\"headingLevel\":1,\"headings\":[\"33. Abrasive grit size\\n\\nStandards governing abrasive grit sizes are complicated, specifying\\nfractions of particles that are passed or retained by different mesh\\nsizes. As a result, it is not possible to make precise comparisons\\nof different grit standards. The tables below allow the\\ndetermination of rough equivlants by using median particle size.\\n\\nStandards in the USA are determined by the Unified Abrasives\\nManufacturers' Association (UAMA), which resulted from the merger of\\nseveral previous organizations. One of the old organizations was\\nCAMI (Coated Abrasives Manufacturers' Institute).\\n\\nUAMA has a web page with plots showing abrasive particle ranges for\\nvarious different grits and comparisons between standards.\\n\\nhttp://www.uama.org/Abrasives101/101Standards.html\\n\\nAbrasives are grouped into \\\"bonded\\\" abrasives for use with grinding\\nwheels and \\\"coated\\\" abrasives for sandpapers and abrasive films.\\nThe industry uses different grit standards for these two\\ncategories.\\n\\nAnother division is between \\\"macrogrits\\\", grits below 240 and\\n\\\"microgrits\\\", which are above 240. Standards differ, as do methods\\nfor determining particle size. In the USA, ANSI B74.12 is the\\nstandard governing macrogrits. ANSI B74.10 covers bonded microgrit\\nabrasives, and ANSI B74.18 covers coated microgrit abrasives. It\\nappears that the coated standard is identical to the bonded standard\\nfor grits up through 600 but then diverges significantly.\\n\\nEuropean grit sizes are determined by the Federation of European\\nProducers of Abrasives. http://www.fepa-abrasives.org\\n\\nThey give two standards, the \\\"F\\\" grit for bonded abrasives and the\\n\\\"P\\\" grit for coated abrasives. This data is taken directly from\\ntheir web page.\"],\"comment\":\"Grits for DMT brand diamond sharpening stones from\\nhttp://dmtsharp.com/products/colorcode.htm\\n\\n\\n120 mesh\\n\\n\\n220 mesh\\n\\n\\n325 mesh\\n\\n\\n600 mesh\\n\\n\\n1200 mesh\\n\\n\\n2200 mesh\\n\\n\\n8000 mesh\"}},{\"line\":\"hardtranslucentarkansas = 6 micron\",\"info\":{\"headingsIndex\":[34],\"headingLevel\":1,\"headings\":[\"34. The following values come from a page in the Norton Stones catalog,\\navailable at their web page, http://www.nortonstones.com.\"],\"comment\":\"Natural novaculite (silicon quartz)\\nstones\"}},{\"line\":\"softarkansas = 22 micron\",\"info\":{\"headingsIndex\":[34],\"headingLevel\":1,\"headings\":[\"34. The following values come from a page in the Norton Stones catalog,\\navailable at their web page, http://www.nortonstones.com.\"],\"comment\":\"Natural novaculite (silicon quartz)\\nstones\"}},{\"line\":\"extrafineindia = 22 micron\",\"info\":{\"headingsIndex\":[34],\"headingLevel\":1,\"headings\":[\"34. The following values come from a page in the Norton Stones catalog,\\navailable at their web page, http://www.nortonstones.com.\"],\"comment\":\"India stones are Norton's manufactured\\naluminum oxide product\"}},{\"line\":\"fineindia = 35 micron\",\"info\":{\"headingsIndex\":[34],\"headingLevel\":1,\"headings\":[\"34. The following values come from a page in the Norton Stones catalog,\\navailable at their web page, http://www.nortonstones.com.\"],\"comment\":\"India stones are Norton's manufactured\\naluminum oxide product\"}},{\"line\":\"mediumindia = 53.5 micron\",\"info\":{\"headingsIndex\":[34],\"headingLevel\":1,\"headings\":[\"34. The following values come from a page in the Norton Stones catalog,\\navailable at their web page, http://www.nortonstones.com.\"],\"comment\":\"India stones are Norton's manufactured\\naluminum oxide product\"}},{\"line\":\"coarseindia = 97 micron\",\"info\":{\"headingsIndex\":[34],\"headingLevel\":1,\"headings\":[\"34. The following values come from a page in the Norton Stones catalog,\\navailable at their web page, http://www.nortonstones.com.\"],\"comment\":\"India stones are Norton's manufactured\\naluminum oxide product\"}},{\"line\":\"finecrystolon = 45 micron\",\"info\":{\"headingsIndex\":[34],\"headingLevel\":1,\"headings\":[\"34. The following values come from a page in the Norton Stones catalog,\\navailable at their web page, http://www.nortonstones.com.\"],\"comment\":\"Crystolon stones are Norton's\\nmanufactured silicon carbide product\"}},{\"line\":\"mediumcrystalon = 78 micron\",\"info\":{\"headingsIndex\":[34],\"headingLevel\":1,\"headings\":[\"34. The following values come from a page in the Norton Stones catalog,\\navailable at their web page, http://www.nortonstones.com.\"],\"comment\":\"Crystolon stones are Norton's\\nmanufactured silicon carbide product\"}},{\"line\":\"coarsecrystalon = 127 micron\",\"info\":{\"headingsIndex\":[34],\"headingLevel\":1,\"headings\":[\"34. The following values come from a page in the Norton Stones catalog,\\navailable at their web page, http://www.nortonstones.com.\"],\"comment\":\"Crystolon stones are Norton's\\nmanufactured silicon carbide product\"}},{\"line\":\"hardblackarkansas = 6 micron\",\"info\":{\"headingsIndex\":[34,1],\"headingLevel\":2,\"headings\":[\"34. The following values come from a page in the Norton Stones catalog,\\navailable at their web page, http://www.nortonstones.com.\",\"34.1. The following are not from the Norton catalog\"],\"comment\":\"\"}},{\"line\":\"hardwhitearkansas = 11 micron\",\"info\":{\"headingsIndex\":[34,1],\"headingLevel\":2,\"headings\":[\"34. The following values come from a page in the Norton Stones catalog,\\navailable at their web page, http://www.nortonstones.com.\",\"34.1. The following are not from the Norton catalog\"],\"comment\":\"\"}},{\"line\":\"washita = 35 micron\",\"info\":{\"headingsIndex\":[34,1],\"headingLevel\":2,\"headings\":[\"34. The following values come from a page in the Norton Stones catalog,\\navailable at their web page, http://www.nortonstones.com.\",\"34.1. The following are not from the Norton catalog\"],\"comment\":\"\"}},{\"line\":\"ringsize = n => (1.4216+.1018 n) in \",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"USA ring sizes.  Several slightly different definitions seem to be in\\ncirculation.  According to [15], the interior diameter of size n ring in\\ninches is 0.32 n + 0.458 for n ranging from 3 to 13.5 by steps of 0.5.  The\\nsize 2 ring is inconsistently 0.538in and no 2.5 size is listed.\\n\\nHowever, other sources list 0.455 + 0.0326 n and 0.4525 + 0.0324 n as the\\ndiameter and list no special case for size 2.  (Or alternatively they are\\n1.43 + .102 n and 1.4216+.1018 n for measuring circumference in inches.)  One\\nreference claimed that the original system was that each size was 1|10 inch\\ncircumference, but that source doesn't have an explanation for the modern\\nsystem which is somewhat different.\"}},{\"line\":\"ringsize^-1 = ringsize => (ringsize/in + (-1.4216))/.1018\",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"USA ring sizes.  Several slightly different definitions seem to be in\\ncirculation.  According to [15], the interior diameter of size n ring in\\ninches is 0.32 n + 0.458 for n ranging from 3 to 13.5 by steps of 0.5.  The\\nsize 2 ring is inconsistently 0.538in and no 2.5 size is listed.\\n\\nHowever, other sources list 0.455 + 0.0326 n and 0.4525 + 0.0324 n as the\\ndiameter and list no special case for size 2.  (Or alternatively they are\\n1.43 + .102 n and 1.4216+.1018 n for measuring circumference in inches.)  One\\nreference claimed that the original system was that each size was 1|10 inch\\ncircumference, but that source doesn't have an explanation for the modern\\nsystem which is somewhat different.\"}},{\"line\":\"sizeAring = 37.50 mm\",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeBring = 38.75 mm\",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeCring = 40.00 mm\",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeDring = 41.25 mm\",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeEring = 42.50 mm\",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeFring = 43.75 mm\",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeGring = 45.00 mm\",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeHring = 46.25 mm\",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeIring = 47.50 mm\",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeJring = 48.75 mm\",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeKring = 50.00 mm\",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeLring = 51.25 mm\",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeMring = 52.50 mm\",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeNring = 53.75 mm\",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeOring = 55.00 mm\",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizePring = 56.25 mm\",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeQring = 57.50 mm\",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeRring = 58.75 mm\",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeSring = 60.00 mm\",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeTring = 61.25 mm\",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeUring = 62.50 mm\",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeVring = 63.75 mm\",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeWring = 65.00 mm\",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeXring = 66.25 mm\",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeYring = 67.50 mm\",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"sizeZring = 68.75 mm\",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Old practice in the UK measured rings using the \\\"Wheatsheaf gauge\\\" with sizes\\nspecified alphabetically and based on the ring inside diameter in steps of\\n1|64 inch.  This system was replaced in 1987 by British Standard 6820 which\\nspecifies sizes based on circumference.  Each size is 1.25 mm different from\\nthe preceding size.  The baseline is size C which is 40 mm circumference.\\nThe new sizes are close to the old ones.  Sometimes it's necessary to go\\nbeyond size Z to Z+1, Z+2, etc.\"}},{\"line\":\"jpringsize = n => (38|3 + n/3) pi mm \",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Japanese sizes start with size 1 at a 13mm inside diameter and each size is\\n1|3 mm larger in diameter than the previous one.  They are multiplied by pi\\nto give circumference.\"}},{\"line\":\"jpringsize^-1 = jpringsize => 3 jpringsize/ pi mm + (-38)\",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"Japanese sizes start with size 1 at a 13mm inside diameter and each size is\\n1|3 mm larger in diameter than the previous one.  They are multiplied by pi\\nto give circumference.\"}},{\"line\":\"euringsize = n => (n+40) mm \",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"The European ring sizes are the length of the circumference in mm minus 40.\"}},{\"line\":\"euringsize^-1 = euringsize => euringsize/mm + (-40)\",\"info\":{\"headingsIndex\":[35],\"headingLevel\":1,\"headings\":[\"35. Ring size. All ring sizes are given as the circumference of the ring.\"],\"comment\":\"The European ring sizes are the length of the circumference in mm minus 40.\"}},{\"line\":\"mph = mile/hr\",\"info\":{\"headingsIndex\":[36],\"headingLevel\":1,\"headings\":[\"36. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"mpg = mile/gal\",\"info\":{\"headingsIndex\":[36],\"headingLevel\":1,\"headings\":[\"36. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"kph = km/hr\",\"info\":{\"headingsIndex\":[36],\"headingLevel\":1,\"headings\":[\"36. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"fL = footlambert\",\"info\":{\"headingsIndex\":[36],\"headingLevel\":1,\"headings\":[\"36. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"fpm = ft/min\",\"info\":{\"headingsIndex\":[36],\"headingLevel\":1,\"headings\":[\"36. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"fps = ft/s\",\"info\":{\"headingsIndex\":[36],\"headingLevel\":1,\"headings\":[\"36. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"rpm = rev/min\",\"info\":{\"headingsIndex\":[36],\"headingLevel\":1,\"headings\":[\"36. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"rps = rev/sec\",\"info\":{\"headingsIndex\":[36],\"headingLevel\":1,\"headings\":[\"36. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"mi = mile\",\"info\":{\"headingsIndex\":[36],\"headingLevel\":1,\"headings\":[\"36. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"smi = mile\",\"info\":{\"headingsIndex\":[36],\"headingLevel\":1,\"headings\":[\"36. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"nmi = nauticalmile\",\"info\":{\"headingsIndex\":[36],\"headingLevel\":1,\"headings\":[\"36. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"mbh = 1e3 btu/hour\",\"info\":{\"headingsIndex\":[36],\"headingLevel\":1,\"headings\":[\"36. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"mcm = 1e3 circularmil\",\"info\":{\"headingsIndex\":[36],\"headingLevel\":1,\"headings\":[\"36. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"ipy = inch/year\",\"info\":{\"headingsIndex\":[36],\"headingLevel\":1,\"headings\":[\"36. Abbreviations\"],\"comment\":\"used for corrosion rates\"}},{\"line\":\"ccf = 100 ft^3\",\"info\":{\"headingsIndex\":[36],\"headingLevel\":1,\"headings\":[\"36. Abbreviations\"],\"comment\":\"used for selling water [18]\"}},{\"line\":\"Mcf = 1000 ft^3\",\"info\":{\"headingsIndex\":[36],\"headingLevel\":1,\"headings\":[\"36. Abbreviations\"],\"comment\":\"not million cubic feet [18]\"}},{\"line\":\"kp = kilopond\",\"info\":{\"headingsIndex\":[36],\"headingLevel\":1,\"headings\":[\"36. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"kpm = kp meter\",\"info\":{\"headingsIndex\":[36],\"headingLevel\":1,\"headings\":[\"36. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"Wh = W hour\",\"info\":{\"headingsIndex\":[36],\"headingLevel\":1,\"headings\":[\"36. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"hph = hp hour\",\"info\":{\"headingsIndex\":[36],\"headingLevel\":1,\"headings\":[\"36. Abbreviations\"],\"comment\":\"\"}},{\"line\":\"plf = lb / foot\",\"info\":{\"headingsIndex\":[36],\"headingLevel\":1,\"headings\":[\"36. Abbreviations\"],\"comment\":\"pounds per linear foot\"}},{\"line\":\"pa = Pa\",\"info\":{\"headingsIndex\":[37],\"headingLevel\":1,\"headings\":[\"37. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"ev = eV\",\"info\":{\"headingsIndex\":[37],\"headingLevel\":1,\"headings\":[\"37. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"hg = Hg\",\"info\":{\"headingsIndex\":[37],\"headingLevel\":1,\"headings\":[\"37. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"oe = Oe\",\"info\":{\"headingsIndex\":[37],\"headingLevel\":1,\"headings\":[\"37. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"mh = mH\",\"info\":{\"headingsIndex\":[37],\"headingLevel\":1,\"headings\":[\"37. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"rd = rod\",\"info\":{\"headingsIndex\":[37],\"headingLevel\":1,\"headings\":[\"37. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"pf = pF\",\"info\":{\"headingsIndex\":[37],\"headingLevel\":1,\"headings\":[\"37. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"gr = grain\",\"info\":{\"headingsIndex\":[37],\"headingLevel\":1,\"headings\":[\"37. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"nt = N\",\"info\":{\"headingsIndex\":[37],\"headingLevel\":1,\"headings\":[\"37. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"hz = Hz\",\"info\":{\"headingsIndex\":[37],\"headingLevel\":1,\"headings\":[\"37. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"hd = hogshead\",\"info\":{\"headingsIndex\":[37],\"headingLevel\":1,\"headings\":[\"37. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"dry = drygallon/gallon\",\"info\":{\"headingsIndex\":[37],\"headingLevel\":1,\"headings\":[\"37. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"nmile = nauticalmile\",\"info\":{\"headingsIndex\":[37],\"headingLevel\":1,\"headings\":[\"37. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"beV = GeV\",\"info\":{\"headingsIndex\":[37],\"headingLevel\":1,\"headings\":[\"37. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"bev = beV\",\"info\":{\"headingsIndex\":[37],\"headingLevel\":1,\"headings\":[\"37. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"coul = C\",\"info\":{\"headingsIndex\":[37],\"headingLevel\":1,\"headings\":[\"37. Compatibility units with unix version\"],\"comment\":\"\"}},{\"line\":\"becquerel = /s\",\"info\":{\"headingsIndex\":[38],\"headingLevel\":1,\"headings\":[\"38. Radioactivity units\"],\"comment\":\"Activity of radioactive source\"}},{\"line\":\"Bq = becquerel\",\"info\":{\"headingsIndex\":[38],\"headingLevel\":1,\"headings\":[\"38. Radioactivity units\"],\"comment\":\"Activity of radioactive source\"}},{\"line\":\"curie = 3.7e10 Bq\",\"info\":{\"headingsIndex\":[38],\"headingLevel\":1,\"headings\":[\"38. Radioactivity units\"],\"comment\":\"Defined in 1910 as the radioactivity\\nemitted by the amount of radon that is\\nin equilibrium with 1 gram of radium.\"}},{\"line\":\"Ci = curie\",\"info\":{\"headingsIndex\":[38],\"headingLevel\":1,\"headings\":[\"38. Radioactivity units\"],\"comment\":\"Defined in 1910 as the radioactivity\\nemitted by the amount of radon that is\\nin equilibrium with 1 gram of radium.\"}},{\"line\":\"rutherford = 1e6 Bq\",\"info\":{\"headingsIndex\":[38],\"headingLevel\":1,\"headings\":[\"38. Radioactivity units\"],\"comment\":\"\"}},{\"line\":\"RADIATION_DOSE = gray\",\"info\":{\"headingsIndex\":[38],\"headingLevel\":1,\"headings\":[\"38. Radioactivity units\"],\"comment\":\"\"}},{\"line\":\"gray = J/kg\",\"info\":{\"headingsIndex\":[38],\"headingLevel\":1,\"headings\":[\"38. Radioactivity units\"],\"comment\":\"Absorbed dose of radiation\"}},{\"line\":\"Gy = gray\",\"info\":{\"headingsIndex\":[38],\"headingLevel\":1,\"headings\":[\"38. Radioactivity units\"],\"comment\":\"Absorbed dose of radiation\"}},{\"line\":\"rad = 1e-2 Gy\",\"info\":{\"headingsIndex\":[38],\"headingLevel\":1,\"headings\":[\"38. Radioactivity units\"],\"comment\":\"From Radiation Absorbed Dose\"}},{\"line\":\"rep = 8.38 mGy\",\"info\":{\"headingsIndex\":[38],\"headingLevel\":1,\"headings\":[\"38. Radioactivity units\"],\"comment\":\"Roentgen Equivalent Physical, the amount\\nof radiation which , absorbed in the\\nbody, would liberate the same amount\\nof energy as 1 roentgen of X rays\\nwould, or 97 ergs.\"}},{\"line\":\"sievert = J/kg\",\"info\":{\"headingsIndex\":[38],\"headingLevel\":1,\"headings\":[\"38. Radioactivity units\"],\"comment\":\"Dose equivalent:  dosage that has the\\nsame effect on human tissues as 200\\nkeV X-rays.  Different types of\\nradiation are weighted by the\\nRelative Biological Effectiveness\\n(RBE).\\n\\nRadiation type       RBE\\nX-ray, gamma ray     1\\nbeta rays, > 1 MeV   1\\nbeta rays, < 1 MeV  1.08\\nneutrons, < 1 MeV   4-5\\nneutrons, 1-10 MeV   10\\nprotons, 1 MeV      8.5\\nprotons, .1 MeV      10\\nalpha, 5 MeV         15\\nalpha, 1 MeV         20\\n\\nThe energies are the kinetic energy\\nof the particles.  Slower particles\\ninteract more, so they are more\\neffective ionizers, and hence have\\nhigher RBE values.\\n\\nrem stands for Roentgen Equivalent\\nMammal\"}},{\"line\":\"Sv = sievert\",\"info\":{\"headingsIndex\":[38],\"headingLevel\":1,\"headings\":[\"38. Radioactivity units\"],\"comment\":\"Dose equivalent:  dosage that has the\\nsame effect on human tissues as 200\\nkeV X-rays.  Different types of\\nradiation are weighted by the\\nRelative Biological Effectiveness\\n(RBE).\\n\\nRadiation type       RBE\\nX-ray, gamma ray     1\\nbeta rays, > 1 MeV   1\\nbeta rays, < 1 MeV  1.08\\nneutrons, < 1 MeV   4-5\\nneutrons, 1-10 MeV   10\\nprotons, 1 MeV      8.5\\nprotons, .1 MeV      10\\nalpha, 5 MeV         15\\nalpha, 1 MeV         20\\n\\nThe energies are the kinetic energy\\nof the particles.  Slower particles\\ninteract more, so they are more\\neffective ionizers, and hence have\\nhigher RBE values.\\n\\nrem stands for Roentgen Equivalent\\nMammal\"}},{\"line\":\"rem = 1e-2 Sv\",\"info\":{\"headingsIndex\":[38],\"headingLevel\":1,\"headings\":[\"38. Radioactivity units\"],\"comment\":\"Dose equivalent:  dosage that has the\\nsame effect on human tissues as 200\\nkeV X-rays.  Different types of\\nradiation are weighted by the\\nRelative Biological Effectiveness\\n(RBE).\\n\\nRadiation type       RBE\\nX-ray, gamma ray     1\\nbeta rays, > 1 MeV   1\\nbeta rays, < 1 MeV  1.08\\nneutrons, < 1 MeV   4-5\\nneutrons, 1-10 MeV   10\\nprotons, 1 MeV      8.5\\nprotons, .1 MeV      10\\nalpha, 5 MeV         15\\nalpha, 1 MeV         20\\n\\nThe energies are the kinetic energy\\nof the particles.  Slower particles\\ninteract more, so they are more\\neffective ionizers, and hence have\\nhigher RBE values.\\n\\nrem stands for Roentgen Equivalent\\nMammal\"}},{\"line\":\"roentgen = 2.58e-4 C / kg\",\"info\":{\"headingsIndex\":[38],\"headingLevel\":1,\"headings\":[\"38. Radioactivity units\"],\"comment\":\"Ionizing radiation that produces\\n1 statcoulomb of charge in 1 cc of\\ndry air at stp.\\nSometimes it appears spelled this way\"}},{\"line\":\"rontgen = roentgen\",\"info\":{\"headingsIndex\":[38],\"headingLevel\":1,\"headings\":[\"38. Radioactivity units\"],\"comment\":\"Ionizing radiation that produces\\n1 statcoulomb of charge in 1 cc of\\ndry air at stp.\\nSometimes it appears spelled this way\"}},{\"line\":\"sievertunit = 8.38 rontgen\",\"info\":{\"headingsIndex\":[38],\"headingLevel\":1,\"headings\":[\"38. Radioactivity units\"],\"comment\":\"Unit of gamma ray dose delivered in one\\nhour at a distance of 1 cm from a\\npoint source of 1 mg of radium\\nenclosed in platinum .5 mm thick.\"}},{\"line\":\"eman = 1e-7 Ci/m^3\",\"info\":{\"headingsIndex\":[38],\"headingLevel\":1,\"headings\":[\"38. Radioactivity units\"],\"comment\":\"radioactive concentration\"}},{\"line\":\"mache = 3.7e-7 Ci/m^3\",\"info\":{\"headingsIndex\":[38],\"headingLevel\":1,\"headings\":[\"38. Radioactivity units\"],\"comment\":\"\"}},{\"line\":\"actinium = 227.0278\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"aluminum = 26.981539\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"americium = 243.0614\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"Longest lived. 241.06\"}},{\"line\":\"antimony = 121.760\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"argon = 39.948\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"arsenic = 74.92159\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"astatine = 209.9871\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"Longest lived\"}},{\"line\":\"barium = 137.327\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"berkelium = 247.0703\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"Longest lived. 249.08\"}},{\"line\":\"beryllium = 9.012182\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"bismuth = 208.98037\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"boron = 10.811\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"bromine = 79.904\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"cadmium = 112.411\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"calcium = 40.078\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"californium = 251.0796\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"Longest lived.  252.08\"}},{\"line\":\"carbon = 12.011\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"cerium = 140.115\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"cesium = 132.90543\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"chlorine = 35.4527\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"chromium = 51.9961\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"cobalt = 58.93320\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"copper = 63.546\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"curium = 247.0703\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"deuterium = 2.0141017778\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"dysprosium = 162.50\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"einsteinium = 252.083\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"Longest lived\"}},{\"line\":\"erbium = 167.26\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"europium = 151.965\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"fermium = 257.0951\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"Longest lived\"}},{\"line\":\"fluorine = 18.9984032\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"francium = 223.0197\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"Longest lived\"}},{\"line\":\"gadolinium = 157.25\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"gallium = 69.723\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"germanium = 72.61\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"gold = 196.96654\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"hafnium = 178.49\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"helium = 4.002602\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"holmium = 164.93032\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"hydrogen = 1.00794\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"indium = 114.818\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"iodine = 126.90447\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"iridium = 192.217\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"iron = 55.845\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"krypton = 83.80\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"lanthanum = 138.9055\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"lawrencium = 262.11\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"Longest lived\"}},{\"line\":\"lead = 207.2\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"lithium = 6.941\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"lutetium = 174.967\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"magnesium = 24.3050\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"manganese = 54.93805\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"mendelevium = 258.10\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"Longest lived\"}},{\"line\":\"mercury = 200.59\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"molybdenum = 95.94\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"neodymium = 144.24\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"neon = 20.1797\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"neptunium = 237.0482\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"nickel = 58.6934\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"niobium = 92.90638\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"nitrogen = 14.00674\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"nobelium = 259.1009\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"Longest lived\"}},{\"line\":\"osmium = 190.23\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"oxygen = 15.9994\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"palladium = 106.42\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"phosphorus = 30.973762\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"platinum = 195.08\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"plutonium = 244.0642\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"Longest lived.  239.05\"}},{\"line\":\"polonium = 208.9824\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"Longest lived.  209.98\"}},{\"line\":\"potassium = 39.0983\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"praseodymium = 140.90765\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"promethium = 144.9127\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"Longest lived.  146.92\"}},{\"line\":\"protactinium = 231.03588\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"radium = 226.0254\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"radon = 222.0176\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"Longest lived\"}},{\"line\":\"rhenium = 186.207\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"rhodium = 102.90550\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"rubidium = 85.4678\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"ruthenium = 101.07\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"samarium = 150.36\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"scandium = 44.955910\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"selenium = 78.96\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"silicon = 28.0855\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"silver = 107.8682\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"sodium = 22.989768\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"strontium = 87.62\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"sulfur = 32.066\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"tantalum = 180.9479\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"technetium = 97.9072\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"Longest lived.  98.906\"}},{\"line\":\"tellurium = 127.60\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"terbium = 158.92534\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"thallium = 204.3833\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"thorium = 232.0381\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"thullium = 168.93421\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"tin = 118.710\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"titanium = 47.867\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"tungsten = 183.84\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"uranium = 238.0289\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"vanadium = 50.9415\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"xenon = 131.29\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"ytterbium = 173.04\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"yttrium = 88.90585\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"zinc = 65.39\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"zirconium = 91.224\",\"info\":{\"headingsIndex\":[39],\"headingLevel\":1,\"headings\":[\"39. Atomic weights. The atomic weight of an element is the ratio of the mass of\\na mole of the element to 1|12 of a mole of Carbon 12. The Standard Atomic\\nWeights apply to the elements as they occur naturally on earth. Elements\\nwhich do not occur naturally or which occur with wide isotopic variability do\\nnot have Standard Atomic Weights. For these elements, the atomic weight is\\nbased on the longest lived isotope, as marked in the comments. In some\\ncases, the comment for these entries also gives a number which is an atomic\\nweight for a different isotope that may be of more interest than the longest\\nlived isotope.\"],\"comment\":\"\"}},{\"line\":\"air = 78.08% nitrogen 2               + 20.95% oxygen 2               + 9340 ppm argon               +  400 ppm (carbon + oxygen 2)               +   18.18 ppm neon               +    5.24 ppm helium               +    1.7  ppm (carbon + 4 hydrogen)               +    1.14 ppm krypton               +    0.55 ppm hydrogen 2\",\"info\":{\"headingsIndex\":[40],\"headingLevel\":1,\"headings\":[\"40. Average molecular weight of air\"],\"comment\":\"The atmospheric composition listed is from NASA Earth Fact Sheet (accessed\\n28 August 2015)\\nhttp://nssdc.gsfc.nasa.gov/planetary/factsheet/earthfact.html\\nNumbers do not add up to exactly 100% due to roundoff and uncertainty Water\\nis highly variable, typically makes up about 1%\"}},{\"line\":\"people = 1\",\"info\":{\"headingsIndex\":[41],\"headingLevel\":1,\"headings\":[\"41. population units\"],\"comment\":\"\"}},{\"line\":\"person = people\",\"info\":{\"headingsIndex\":[41],\"headingLevel\":1,\"headings\":[\"41. population units\"],\"comment\":\"\"}},{\"line\":\"death = people\",\"info\":{\"headingsIndex\":[41],\"headingLevel\":1,\"headings\":[\"41. population units\"],\"comment\":\"\"}},{\"line\":\"capita = people\",\"info\":{\"headingsIndex\":[41],\"headingLevel\":1,\"headings\":[\"41. population units\"],\"comment\":\"\"}},{\"line\":\"percapita = / capita\",\"info\":{\"headingsIndex\":[41],\"headingLevel\":1,\"headings\":[\"41. population units\"],\"comment\":\"\"}},{\"line\":\"Tim = 12^-4 hour\",\"info\":{\"headingsIndex\":[42],\"headingLevel\":1,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\"],\"comment\":\"Time\"}},{\"line\":\"Grafut = gravity Tim^2\",\"info\":{\"headingsIndex\":[42],\"headingLevel\":1,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\"],\"comment\":\"Length based on gravity\"}},{\"line\":\"Surf = Grafut^2\",\"info\":{\"headingsIndex\":[42],\"headingLevel\":1,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\"],\"comment\":\"area\"}},{\"line\":\"Volm = Grafut^3\",\"info\":{\"headingsIndex\":[42],\"headingLevel\":1,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\"],\"comment\":\"volume\"}},{\"line\":\"Vlos = Grafut/Tim\",\"info\":{\"headingsIndex\":[42],\"headingLevel\":1,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\"],\"comment\":\"speed\"}},{\"line\":\"Denz = Maz/Volm\",\"info\":{\"headingsIndex\":[42],\"headingLevel\":1,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\"],\"comment\":\"density\"}},{\"line\":\"Mag = Maz gravity\",\"info\":{\"headingsIndex\":[42],\"headingLevel\":1,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\"],\"comment\":\"force\"}},{\"line\":\"Maz = Volm kg / oldliter\",\"info\":{\"headingsIndex\":[42],\"headingLevel\":1,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\"],\"comment\":\"mass based on water\"}},{\"line\":\"Tm = Tim\",\"info\":{\"headingsIndex\":[42],\"headingLevel\":1,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\"],\"comment\":\"Abbreviations\"}},{\"line\":\"Gf = Grafut\",\"info\":{\"headingsIndex\":[42],\"headingLevel\":1,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\"],\"comment\":\"Abbreviations\"}},{\"line\":\"Sf = Surf\",\"info\":{\"headingsIndex\":[42],\"headingLevel\":1,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\"],\"comment\":\"Abbreviations\"}},{\"line\":\"Vm = Volm\",\"info\":{\"headingsIndex\":[42],\"headingLevel\":1,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\"],\"comment\":\"Abbreviations\"}},{\"line\":\"Vl = Vlos\",\"info\":{\"headingsIndex\":[42],\"headingLevel\":1,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\"],\"comment\":\"Abbreviations\"}},{\"line\":\"Mz = Maz\",\"info\":{\"headingsIndex\":[42],\"headingLevel\":1,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\"],\"comment\":\"Abbreviations\"}},{\"line\":\"Dz = Denz\",\"info\":{\"headingsIndex\":[42],\"headingLevel\":1,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\"],\"comment\":\"Abbreviations\"}},{\"line\":\"Zena_ = 12\",\"info\":{\"headingsIndex\":[42,1],\"headingLevel\":2,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"42.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Duna_ = 12^2\",\"info\":{\"headingsIndex\":[42,1],\"headingLevel\":2,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"42.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Trina_ = 12^3\",\"info\":{\"headingsIndex\":[42,1],\"headingLevel\":2,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"42.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Quedra_ = 12^4\",\"info\":{\"headingsIndex\":[42,1],\"headingLevel\":2,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"42.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Quena_ = 12^5\",\"info\":{\"headingsIndex\":[42,1],\"headingLevel\":2,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"42.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Hesa_ = 12^6\",\"info\":{\"headingsIndex\":[42,1],\"headingLevel\":2,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"42.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Seva_ = 12^7\",\"info\":{\"headingsIndex\":[42,1],\"headingLevel\":2,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"42.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Aka_ = 12^8\",\"info\":{\"headingsIndex\":[42,1],\"headingLevel\":2,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"42.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Neena_ = 12^9\",\"info\":{\"headingsIndex\":[42,1],\"headingLevel\":2,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"42.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Dexa_ = 12^10\",\"info\":{\"headingsIndex\":[42,1],\"headingLevel\":2,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"42.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Lefa_ = 12^11\",\"info\":{\"headingsIndex\":[42,1],\"headingLevel\":2,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"42.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Zennila_ = 12^12\",\"info\":{\"headingsIndex\":[42,1],\"headingLevel\":2,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"42.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Zeni_ = 12^-1\",\"info\":{\"headingsIndex\":[42,1],\"headingLevel\":2,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"42.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Duni_ = 12^-2\",\"info\":{\"headingsIndex\":[42,1],\"headingLevel\":2,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"42.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Trini_ = 12^-3\",\"info\":{\"headingsIndex\":[42,1],\"headingLevel\":2,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"42.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Quedri_ = 12^-4\",\"info\":{\"headingsIndex\":[42,1],\"headingLevel\":2,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"42.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Queni_ = 12^-5\",\"info\":{\"headingsIndex\":[42,1],\"headingLevel\":2,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"42.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Hesi_ = 12^-6\",\"info\":{\"headingsIndex\":[42,1],\"headingLevel\":2,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"42.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Sevi_ = 12^-7\",\"info\":{\"headingsIndex\":[42,1],\"headingLevel\":2,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"42.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Aki_ = 12^-8\",\"info\":{\"headingsIndex\":[42,1],\"headingLevel\":2,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"42.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Neeni_ = 12^-9\",\"info\":{\"headingsIndex\":[42,1],\"headingLevel\":2,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"42.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Dexi_ = 12^-10\",\"info\":{\"headingsIndex\":[42,1],\"headingLevel\":2,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"42.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Lefi_ = 12^-11\",\"info\":{\"headingsIndex\":[42,1],\"headingLevel\":2,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"42.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"Zennili_ = 12^-12\",\"info\":{\"headingsIndex\":[42,1],\"headingLevel\":2,\"headings\":[\"42. TGM dozen based unit system listed on the \\\"dozenal\\\" forum\\nhttp://www.dozenalsociety.org.uk/apps/tgm.htm. These units are\\nproposed as an allegedly more rational alternative to the SI system.\",\"42.1. Dozen based unit prefixes\"],\"comment\":\"\"}},{\"line\":\"wari_proportion = 1|10\",\"info\":{\"headingsIndex\":[43,1],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.1. Japanese Proportions. These are still in everyday use. They also\\nget used as units to represent the proportion of the standard unit.\"],\"comment\":\"\"}},{\"line\":\"wari = wari_proportion\",\"info\":{\"headingsIndex\":[43,1],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.1. Japanese Proportions. These are still in everyday use. They also\\nget used as units to represent the proportion of the standard unit.\"],\"comment\":\"\"}},{\"line\":\"bu_proportion = 1|100\",\"info\":{\"headingsIndex\":[43,1],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.1. Japanese Proportions. These are still in everyday use. They also\\nget used as units to represent the proportion of the standard unit.\"],\"comment\":\"The character bu can also be read fun or bun\\nbut usually \\\"bu\\\" is used for units.\"}},{\"line\":\"rin_proportion = 1|1000\",\"info\":{\"headingsIndex\":[43,1],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.1. Japanese Proportions. These are still in everyday use. They also\\nget used as units to represent the proportion of the standard unit.\"],\"comment\":\"\"}},{\"line\":\"mou_proportion = 1|10000\",\"info\":{\"headingsIndex\":[43,1],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.1. Japanese Proportions. These are still in everyday use. They also\\nget used as units to represent the proportion of the standard unit.\"],\"comment\":\"\"}},{\"line\":\"shaku = 1|3.3 m\",\"info\":{\"headingsIndex\":[43,2],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\"],\"comment\":\"\"}},{\"line\":\"mou = 1|10000 shaku\",\"info\":{\"headingsIndex\":[43,2],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\"],\"comment\":\"\"}},{\"line\":\"rin = 1|1000 shaku\",\"info\":{\"headingsIndex\":[43,2],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\"],\"comment\":\"\"}},{\"line\":\"bu_distance = 1|100 shaku\",\"info\":{\"headingsIndex\":[43,2],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\"],\"comment\":\"\"}},{\"line\":\"sun = 1|10 shaku\",\"info\":{\"headingsIndex\":[43,2],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\"],\"comment\":\"\"}},{\"line\":\"jou_distance = 10 shaku\",\"info\":{\"headingsIndex\":[43,2],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\"],\"comment\":\"\"}},{\"line\":\"jou = jou_distance\",\"info\":{\"headingsIndex\":[43,2],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\"],\"comment\":\"\"}},{\"line\":\"kanejakusun = sun\",\"info\":{\"headingsIndex\":[43,2],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\"],\"comment\":\"Alias to emphasize architectural name\"}},{\"line\":\"kanejaku = shaku\",\"info\":{\"headingsIndex\":[43,2],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\"],\"comment\":\"\"}},{\"line\":\"kanejakujou = jou\",\"info\":{\"headingsIndex\":[43,2],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\"],\"comment\":\"\"}},{\"line\":\"taichi = shaku\",\"info\":{\"headingsIndex\":[43,2,1],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\",\"43.2.1. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\"],\"comment\":\"http://zh.wikipedia.org/wiki/台尺\"}},{\"line\":\"taicun = sun\",\"info\":{\"headingsIndex\":[43,2,1],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\",\"43.2.1. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\"],\"comment\":\"http://zh.wikipedia.org/wiki/台制\"}},{\"line\":\"台尺 = taichi\",\"info\":{\"headingsIndex\":[43,2,1],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\",\"43.2.1. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\"],\"comment\":\"via Hanyu Pinyin romanizations\"}},{\"line\":\"台寸 = taicun\",\"info\":{\"headingsIndex\":[43,2,1],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\",\"43.2.1. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\"],\"comment\":\"\"}},{\"line\":\"kujirajaku = 10|8 shaku\",\"info\":{\"headingsIndex\":[43,2,2],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\",\"43.2.2. In context of clothing, shaku is different from architecture\\nhttp://www.scinet.co.jp/sci/sanwa/kakizaki-essay54.html\"],\"comment\":\"\"}},{\"line\":\"kujirajakusun = 1|10 kujirajaku\",\"info\":{\"headingsIndex\":[43,2,2],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\",\"43.2.2. In context of clothing, shaku is different from architecture\\nhttp://www.scinet.co.jp/sci/sanwa/kakizaki-essay54.html\"],\"comment\":\"\"}},{\"line\":\"kujirajakubu = 1|100 kujirajaku\",\"info\":{\"headingsIndex\":[43,2,2],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\",\"43.2.2. In context of clothing, shaku is different from architecture\\nhttp://www.scinet.co.jp/sci/sanwa/kakizaki-essay54.html\"],\"comment\":\"\"}},{\"line\":\"kujirajakujou = 10 kujirajaku\",\"info\":{\"headingsIndex\":[43,2,2],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\",\"43.2.2. In context of clothing, shaku is different from architecture\\nhttp://www.scinet.co.jp/sci/sanwa/kakizaki-essay54.html\"],\"comment\":\"\"}},{\"line\":\"tan_distance = 3 kujirajakujou\",\"info\":{\"headingsIndex\":[43,2,2],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\",\"43.2.2. In context of clothing, shaku is different from architecture\\nhttp://www.scinet.co.jp/sci/sanwa/kakizaki-essay54.html\"],\"comment\":\"\"}},{\"line\":\"ken = 6 shaku\",\"info\":{\"headingsIndex\":[43,2,2],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\",\"43.2.2. In context of clothing, shaku is different from architecture\\nhttp://www.scinet.co.jp/sci/sanwa/kakizaki-essay54.html\"],\"comment\":\"Also sometimes 6.3, 6.5, or 6.6\\nhttp://www.homarewood.co.jp/syakusun.htm\"}},{\"line\":\"chou_distance = 60 ken\",\"info\":{\"headingsIndex\":[43,2,2],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\",\"43.2.2. In context of clothing, shaku is different from architecture\\nhttp://www.scinet.co.jp/sci/sanwa/kakizaki-essay54.html\"],\"comment\":\"\"}},{\"line\":\"chou = chou_distance\",\"info\":{\"headingsIndex\":[43,2,2],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\",\"43.2.2. In context of clothing, shaku is different from architecture\\nhttp://www.scinet.co.jp/sci/sanwa/kakizaki-essay54.html\"],\"comment\":\"\"}},{\"line\":\"ri = 36 chou\",\"info\":{\"headingsIndex\":[43,2,2],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.2. Japanese Length Measures\\n\\nThe length system is called kanejaku or\\nsquare and originated in China. It was\\nadopted as Japan's official measure in 701\\nby the Taiho Code. This system is still in\\ncommon use in architecture and clothing.\",\"43.2.2. In context of clothing, shaku is different from architecture\\nhttp://www.scinet.co.jp/sci/sanwa/kakizaki-essay54.html\"],\"comment\":\"\"}},{\"line\":\"gou_area = 1|10 tsubo\",\"info\":{\"headingsIndex\":[43,3,1],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.3. Japanese Area Measures\",\"43.3.1. Tsubo is still used for land size, though the others are more\\nrecognized by their homonyms in the other measurements.\"],\"comment\":\"\"}},{\"line\":\"tsubo = 36 shaku^2\",\"info\":{\"headingsIndex\":[43,3,1],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.3. Japanese Area Measures\",\"43.3.1. Tsubo is still used for land size, though the others are more\\nrecognized by their homonyms in the other measurements.\"],\"comment\":\"Size of two tatami = ken^2 ??\"}},{\"line\":\"se = 30 tsubo\",\"info\":{\"headingsIndex\":[43,3,1],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.3. Japanese Area Measures\",\"43.3.1. Tsubo is still used for land size, though the others are more\\nrecognized by their homonyms in the other measurements.\"],\"comment\":\"\"}},{\"line\":\"tan_area = 10 se\",\"info\":{\"headingsIndex\":[43,3,1],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.3. Japanese Area Measures\",\"43.3.1. Tsubo is still used for land size, though the others are more\\nrecognized by their homonyms in the other measurements.\"],\"comment\":\"\"}},{\"line\":\"chou_area = 10 tan_area\",\"info\":{\"headingsIndex\":[43,3,1],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.3. Japanese Area Measures\",\"43.3.1. Tsubo is still used for land size, though the others are more\\nrecognized by their homonyms in the other measurements.\"],\"comment\":\"\"}},{\"line\":\"ping = tsubo\",\"info\":{\"headingsIndex\":[43,3,2],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.3. Japanese Area Measures\",\"43.3.2. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\"],\"comment\":\"http://zh.wikipedia.org/wiki/坪\"}},{\"line\":\"jia = 2934 ping\",\"info\":{\"headingsIndex\":[43,3,2],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.3. Japanese Area Measures\",\"43.3.2. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\"],\"comment\":\"http://zh.wikipedia.org/wiki/甲_(单位)\"}},{\"line\":\"fen = 1|10 jia\",\"info\":{\"headingsIndex\":[43,3,2],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.3. Japanese Area Measures\",\"43.3.2. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\"],\"comment\":\"http://zh.wikipedia.org/wiki/分\\nProtection against future collisions\"}},{\"line\":\"fen_area = 1|10 jia\",\"info\":{\"headingsIndex\":[43,3,2],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.3. Japanese Area Measures\",\"43.3.2. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\"],\"comment\":\"http://zh.wikipedia.org/wiki/分\\nProtection against future collisions\"}},{\"line\":\"坪 = ping\",\"info\":{\"headingsIndex\":[43,3,2],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.3. Japanese Area Measures\",\"43.3.2. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\"],\"comment\":\"via Hanyu Pinyin romanizations\"}},{\"line\":\"甲 = jia\",\"info\":{\"headingsIndex\":[43,3,2],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.3. Japanese Area Measures\",\"43.3.2. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\"],\"comment\":\"\"}},{\"line\":\"分 = fen\",\"info\":{\"headingsIndex\":[43,3,2],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.3. Japanese Area Measures\",\"43.3.2. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\"],\"comment\":\"\"}},{\"line\":\"分地 = fen_area\",\"info\":{\"headingsIndex\":[43,3,2],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.3. Japanese Area Measures\",\"43.3.2. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\"],\"comment\":\"Protection against future collisions\"}},{\"line\":\"edoma = (5.8*2.9) shaku^2\",\"info\":{\"headingsIndex\":[43,3,3],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.3. Japanese Area Measures\",\"43.3.3. Japanese architecture is based on a \\\"standard\\\" size of tatami mat.\\nRoom sizes today are given in number of tatami, and this number\\ndetermines the spacing between colums and hence sizes of sliding\\ndoors and paper screens. However, every region has its own slightly\\ndifferent tatami size. Edoma, used in and around Tokyo and\\nHokkaido, is becoming a nationwide standard. Kyouma is used around\\nKyoto, Osaka and Kyuushu, and Chuukyouma is used around Nagoya.\\nNote that the tatami all have the aspect ratio 2:1 so that the mats\\ncan tile the room with some of them turned 90 degrees.\\n\\nhttp://www.moon2.net/tatami/infotatami/structure.html\"],\"comment\":\"\"}},{\"line\":\"kyouma = (6.3*3.15) shaku^2\",\"info\":{\"headingsIndex\":[43,3,3],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.3. Japanese Area Measures\",\"43.3.3. Japanese architecture is based on a \\\"standard\\\" size of tatami mat.\\nRoom sizes today are given in number of tatami, and this number\\ndetermines the spacing between colums and hence sizes of sliding\\ndoors and paper screens. However, every region has its own slightly\\ndifferent tatami size. Edoma, used in and around Tokyo and\\nHokkaido, is becoming a nationwide standard. Kyouma is used around\\nKyoto, Osaka and Kyuushu, and Chuukyouma is used around Nagoya.\\nNote that the tatami all have the aspect ratio 2:1 so that the mats\\ncan tile the room with some of them turned 90 degrees.\\n\\nhttp://www.moon2.net/tatami/infotatami/structure.html\"],\"comment\":\"\"}},{\"line\":\"chuukyouma = (6*3) shaku^2\",\"info\":{\"headingsIndex\":[43,3,3],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.3. Japanese Area Measures\",\"43.3.3. Japanese architecture is based on a \\\"standard\\\" size of tatami mat.\\nRoom sizes today are given in number of tatami, and this number\\ndetermines the spacing between colums and hence sizes of sliding\\ndoors and paper screens. However, every region has its own slightly\\ndifferent tatami size. Edoma, used in and around Tokyo and\\nHokkaido, is becoming a nationwide standard. Kyouma is used around\\nKyoto, Osaka and Kyuushu, and Chuukyouma is used around Nagoya.\\nNote that the tatami all have the aspect ratio 2:1 so that the mats\\ncan tile the room with some of them turned 90 degrees.\\n\\nhttp://www.moon2.net/tatami/infotatami/structure.html\"],\"comment\":\"\"}},{\"line\":\"jou_area = edoma\",\"info\":{\"headingsIndex\":[43,3,3],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.3. Japanese Area Measures\",\"43.3.3. Japanese architecture is based on a \\\"standard\\\" size of tatami mat.\\nRoom sizes today are given in number of tatami, and this number\\ndetermines the spacing between colums and hence sizes of sliding\\ndoors and paper screens. However, every region has its own slightly\\ndifferent tatami size. Edoma, used in and around Tokyo and\\nHokkaido, is becoming a nationwide standard. Kyouma is used around\\nKyoto, Osaka and Kyuushu, and Chuukyouma is used around Nagoya.\\nNote that the tatami all have the aspect ratio 2:1 so that the mats\\ncan tile the room with some of them turned 90 degrees.\\n\\nhttp://www.moon2.net/tatami/infotatami/structure.html\"],\"comment\":\"\"}},{\"line\":\"tatami = jou_area\",\"info\":{\"headingsIndex\":[43,3,3],\"headingLevel\":3,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.3. Japanese Area Measures\",\"43.3.3. Japanese architecture is based on a \\\"standard\\\" size of tatami mat.\\nRoom sizes today are given in number of tatami, and this number\\ndetermines the spacing between colums and hence sizes of sliding\\ndoors and paper screens. However, every region has its own slightly\\ndifferent tatami size. Edoma, used in and around Tokyo and\\nHokkaido, is becoming a nationwide standard. Kyouma is used around\\nKyoto, Osaka and Kyuushu, and Chuukyouma is used around Nagoya.\\nNote that the tatami all have the aspect ratio 2:1 so that the mats\\ncan tile the room with some of them turned 90 degrees.\\n\\nhttp://www.moon2.net/tatami/infotatami/structure.html\"],\"comment\":\"\"}},{\"line\":\"shaku_volume = 1|10 gou_volume\",\"info\":{\"headingsIndex\":[43,4],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.4. Japanese Volume Measures\\n\\nThe \\\"shou\\\" is still used for such things as alcohol and seasonings.\\nLarge quantities of paint are still purchased in terms of \\\"to\\\".\"],\"comment\":\"\"}},{\"line\":\"gou_volume = 1|10 shou\",\"info\":{\"headingsIndex\":[43,4],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.4. Japanese Volume Measures\\n\\nThe \\\"shou\\\" is still used for such things as alcohol and seasonings.\\nLarge quantities of paint are still purchased in terms of \\\"to\\\".\"],\"comment\":\"\"}},{\"line\":\"gou = gou_volume\",\"info\":{\"headingsIndex\":[43,4],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.4. Japanese Volume Measures\\n\\nThe \\\"shou\\\" is still used for such things as alcohol and seasonings.\\nLarge quantities of paint are still purchased in terms of \\\"to\\\".\"],\"comment\":\"\"}},{\"line\":\"shou = (4.9*4.9*2.7) sun^3\",\"info\":{\"headingsIndex\":[43,4],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.4. Japanese Volume Measures\\n\\nThe \\\"shou\\\" is still used for such things as alcohol and seasonings.\\nLarge quantities of paint are still purchased in terms of \\\"to\\\".\"],\"comment\":\"The character shou which is\\nthe same as masu refers to a\\nrectangular wooden cup used to\\nmeasure liquids and cereal.\\nSake is sometimes served in a masu\\nNote that it happens to be\\nEXACTLY 7^4/11^3 liters.\"}},{\"line\":\"rin_weight = 1|10 bu_weight\",\"info\":{\"headingsIndex\":[43,5],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.5. Japanese Weight Measures\\n\\nhttp://wyoming.hp.infoseek.co.jp/zatugaku/zamoney.html\\n\\nNot really used anymore.\"],\"comment\":\"\"}},{\"line\":\"bu_weight = 1|10 monme\",\"info\":{\"headingsIndex\":[43,5],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.5. Japanese Weight Measures\\n\\nhttp://wyoming.hp.infoseek.co.jp/zatugaku/zamoney.html\\n\\nNot really used anymore.\"],\"comment\":\"\"}},{\"line\":\"fun = 1|10 monme\",\"info\":{\"headingsIndex\":[43,5],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.5. Japanese Weight Measures\\n\\nhttp://wyoming.hp.infoseek.co.jp/zatugaku/zamoney.html\\n\\nNot really used anymore.\"],\"comment\":\"\"}},{\"line\":\"monme = momme\",\"info\":{\"headingsIndex\":[43,5],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.5. Japanese Weight Measures\\n\\nhttp://wyoming.hp.infoseek.co.jp/zatugaku/zamoney.html\\n\\nNot really used anymore.\"],\"comment\":\"\"}},{\"line\":\"kin = 160 monme\",\"info\":{\"headingsIndex\":[43,5],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.5. Japanese Weight Measures\\n\\nhttp://wyoming.hp.infoseek.co.jp/zatugaku/zamoney.html\\n\\nNot really used anymore.\"],\"comment\":\"\"}},{\"line\":\"kan = 1000 monme\",\"info\":{\"headingsIndex\":[43,5],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.5. Japanese Weight Measures\\n\\nhttp://wyoming.hp.infoseek.co.jp/zatugaku/zamoney.html\\n\\nNot really used anymore.\"],\"comment\":\"This was the old pronounciation of the unit.\\nThe old spelling persisted a few centuries\\nlonger and was not changed until around\\n1950.\"}},{\"line\":\"kwan = kan\",\"info\":{\"headingsIndex\":[43,5],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.5. Japanese Weight Measures\\n\\nhttp://wyoming.hp.infoseek.co.jp/zatugaku/zamoney.html\\n\\nNot really used anymore.\"],\"comment\":\"This was the old pronounciation of the unit.\\nThe old spelling persisted a few centuries\\nlonger and was not changed until around\\n1950.\"}},{\"line\":\"taijin = kin\",\"info\":{\"headingsIndex\":[43,6],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.6. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\\nsays: \\\"Volume measure in Taiwan is largely metric\\\".\"],\"comment\":\"http://zh.wikipedia.org/wiki/台斤\"}},{\"line\":\"tailiang = 10 monme\",\"info\":{\"headingsIndex\":[43,6],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.6. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\\nsays: \\\"Volume measure in Taiwan is largely metric\\\".\"],\"comment\":\"http://zh.wikipedia.org/wiki/台斤\"}},{\"line\":\"taiqian = monme\",\"info\":{\"headingsIndex\":[43,6],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.6. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\\nsays: \\\"Volume measure in Taiwan is largely metric\\\".\"],\"comment\":\"http://zh.wikipedia.org/wiki/台制\"}},{\"line\":\"台斤 = taijin\",\"info\":{\"headingsIndex\":[43,6],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.6. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\\nsays: \\\"Volume measure in Taiwan is largely metric\\\".\"],\"comment\":\"via Hanyu Pinyin romanizations\"}},{\"line\":\"台兩 = tailiang\",\"info\":{\"headingsIndex\":[43,6],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.6. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\\nsays: \\\"Volume measure in Taiwan is largely metric\\\".\"],\"comment\":\"\"}},{\"line\":\"台錢 = taiqian\",\"info\":{\"headingsIndex\":[43,6],\"headingLevel\":2,\"headings\":[\"43. Traditional Japanese units (shakkanhou)\\n\\nThe traditional system of weights and measures is called shakkanhou from the\\nshaku and the ken. Japan accepted SI units in 1891 and legalized conversions\\nto the traditional system. In 1909 the inch-pound system was also legalized,\\nso Japan had three legally approved systems. A change to the metric system\\nstarted in 1921 but there was a lot of resistance. The Measurement Law of\\nOctober 1999 prohibits sales in anything but SI units. However, the old\\nunits still live on in construction and as the basis for paper sizes of books\\nand tools used for handicrafts.\\n\\nNote that units below use the Hepburn romanization system. Some other\\nsystems would render \\\"mou\\\", \\\"jou\\\", and \\\"chou\\\" as \\\"mo\\\", \\\"jo\\\" and \\\"cho\\\".\\n\\n\\nhttp://hiramatu-hifuka.com/onyak/onyindx.html\",\"43.6. http://en.wikipedia.org/wiki/Taiwanese_units_of_measurement\\nsays: \\\"Volume measure in Taiwan is largely metric\\\".\"],\"comment\":\"\"}},{\"line\":\"australiasquare = (10 ft)^2\",\"info\":{\"headingsIndex\":[44],\"headingLevel\":1,\"headings\":[\"44. Australian unit\"],\"comment\":\"Used for house area\"}},{\"line\":\"zentner = 50 kg\",\"info\":{\"headingsIndex\":[45],\"headingLevel\":1,\"headings\":[\"45. A few German units as currently in use.\"],\"comment\":\"\"}},{\"line\":\"doppelzentner = 2 zentner\",\"info\":{\"headingsIndex\":[45],\"headingLevel\":1,\"headings\":[\"45. A few German units as currently in use.\"],\"comment\":\"\"}},{\"line\":\"pfund = 500 g\",\"info\":{\"headingsIndex\":[45],\"headingLevel\":1,\"headings\":[\"45. A few German units as currently in use.\"],\"comment\":\"\"}},{\"line\":\"dessiatine = 2400 sazhen^2\",\"info\":{\"headingsIndex\":[46],\"headingLevel\":1,\"headings\":[\"46. Some traditional Russian measures\\n\\nIf you would like to help expand this section and understand\\ncyrillic transliteration, let me know. These measures are meant to\\nreflect common usage, e.g. in translated literature.\"],\"comment\":\"Land measure\"}},{\"line\":\"dessjatine = dessiatine\",\"info\":{\"headingsIndex\":[46],\"headingLevel\":1,\"headings\":[\"46. Some traditional Russian measures\\n\\nIf you would like to help expand this section and understand\\ncyrillic transliteration, let me know. These measures are meant to\\nreflect common usage, e.g. in translated literature.\"],\"comment\":\"Land measure\"}},{\"line\":\"funt = 409.51718 grams\",\"info\":{\"headingsIndex\":[46],\"headingLevel\":1,\"headings\":[\"46. Some traditional Russian measures\\n\\nIf you would like to help expand this section and understand\\ncyrillic transliteration, let me know. These measures are meant to\\nreflect common usage, e.g. in translated literature.\"],\"comment\":\"similar to pound\"}},{\"line\":\"zolotnik = 1|96 funt\",\"info\":{\"headingsIndex\":[46],\"headingLevel\":1,\"headings\":[\"46. Some traditional Russian measures\\n\\nIf you would like to help expand this section and understand\\ncyrillic transliteration, let me know. These measures are meant to\\nreflect common usage, e.g. in translated literature.\"],\"comment\":\"used for precious metal measure\"}},{\"line\":\"pood = 40 funt\",\"info\":{\"headingsIndex\":[46],\"headingLevel\":1,\"headings\":[\"46. Some traditional Russian measures\\n\\nIf you would like to help expand this section and understand\\ncyrillic transliteration, let me know. These measures are meant to\\nreflect common usage, e.g. in translated literature.\"],\"comment\":\"common in agricultural measure\"}},{\"line\":\"arshin = (2 + 1|3) feet\",\"info\":{\"headingsIndex\":[46],\"headingLevel\":1,\"headings\":[\"46. Some traditional Russian measures\\n\\nIf you would like to help expand this section and understand\\ncyrillic transliteration, let me know. These measures are meant to\\nreflect common usage, e.g. in translated literature.\"],\"comment\":\"\"}},{\"line\":\"sazhen = 3 arshin\",\"info\":{\"headingsIndex\":[46],\"headingLevel\":1,\"headings\":[\"46. Some traditional Russian measures\\n\\nIf you would like to help expand this section and understand\\ncyrillic transliteration, let me know. These measures are meant to\\nreflect common usage, e.g. in translated literature.\"],\"comment\":\"analogous to fathom\"}},{\"line\":\"verst = 500 sazhen\",\"info\":{\"headingsIndex\":[46],\"headingLevel\":1,\"headings\":[\"46. Some traditional Russian measures\\n\\nIf you would like to help expand this section and understand\\ncyrillic transliteration, let me know. These measures are meant to\\nreflect common usage, e.g. in translated literature.\"],\"comment\":\"of similar use to mile\"}},{\"line\":\"versta = verst\",\"info\":{\"headingsIndex\":[46],\"headingLevel\":1,\"headings\":[\"46. Some traditional Russian measures\\n\\nIf you would like to help expand this section and understand\\ncyrillic transliteration, let me know. These measures are meant to\\nreflect common usage, e.g. in translated literature.\"],\"comment\":\"of similar use to mile\"}},{\"line\":\"borderverst = 1000 sazhen\",\"info\":{\"headingsIndex\":[46],\"headingLevel\":1,\"headings\":[\"46. Some traditional Russian measures\\n\\nIf you would like to help expand this section and understand\\ncyrillic transliteration, let me know. These measures are meant to\\nreflect common usage, e.g. in translated literature.\"],\"comment\":\"\"}},{\"line\":\"russianmile = 7 verst\",\"info\":{\"headingsIndex\":[46],\"headingLevel\":1,\"headings\":[\"46. Some traditional Russian measures\\n\\nIf you would like to help expand this section and understand\\ncyrillic transliteration, let me know. These measures are meant to\\nreflect common usage, e.g. in translated literature.\"],\"comment\":\"\"}},{\"line\":\"frenchfoot = 144|443.296 m\",\"info\":{\"headingsIndex\":[47],\"headingLevel\":1,\"headings\":[\"47. Old French distance measures, from French Weights and Measures\\nBefore the Revolution by Zupko\"],\"comment\":\"pied de roi, the standard of Paris.\\nHalf of the hashimicubit,\\ninstituted by Charlemagne.\\nThis exact definition comes from\\na law passed on 10 Dec 1799 which\\nfixed the meter at\\n3 frenchfeet + 11.296 lignes.\"}},{\"line\":\"pied = frenchfoot\",\"info\":{\"headingsIndex\":[47],\"headingLevel\":1,\"headings\":[\"47. Old French distance measures, from French Weights and Measures\\nBefore the Revolution by Zupko\"],\"comment\":\"pied de roi, the standard of Paris.\\nHalf of the hashimicubit,\\ninstituted by Charlemagne.\\nThis exact definition comes from\\na law passed on 10 Dec 1799 which\\nfixed the meter at\\n3 frenchfeet + 11.296 lignes.\"}},{\"line\":\"frenchfeet = frenchfoot\",\"info\":{\"headingsIndex\":[47],\"headingLevel\":1,\"headings\":[\"47. Old French distance measures, from French Weights and Measures\\nBefore the Revolution by Zupko\"],\"comment\":\"pied de roi, the standard of Paris.\\nHalf of the hashimicubit,\\ninstituted by Charlemagne.\\nThis exact definition comes from\\na law passed on 10 Dec 1799 which\\nfixed the meter at\\n3 frenchfeet + 11.296 lignes.\"}},{\"line\":\"frenchinch = 1|12 frenchfoot\",\"info\":{\"headingsIndex\":[47],\"headingLevel\":1,\"headings\":[\"47. Old French distance measures, from French Weights and Measures\\nBefore the Revolution by Zupko\"],\"comment\":\"pied de roi, the standard of Paris.\\nHalf of the hashimicubit,\\ninstituted by Charlemagne.\\nThis exact definition comes from\\na law passed on 10 Dec 1799 which\\nfixed the meter at\\n3 frenchfeet + 11.296 lignes.\"}},{\"line\":\"frenchthumb = frenchinch\",\"info\":{\"headingsIndex\":[47],\"headingLevel\":1,\"headings\":[\"47. Old French distance measures, from French Weights and Measures\\nBefore the Revolution by Zupko\"],\"comment\":\"pied de roi, the standard of Paris.\\nHalf of the hashimicubit,\\ninstituted by Charlemagne.\\nThis exact definition comes from\\na law passed on 10 Dec 1799 which\\nfixed the meter at\\n3 frenchfeet + 11.296 lignes.\"}},{\"line\":\"pouce = frenchthumb\",\"info\":{\"headingsIndex\":[47],\"headingLevel\":1,\"headings\":[\"47. Old French distance measures, from French Weights and Measures\\nBefore the Revolution by Zupko\"],\"comment\":\"pied de roi, the standard of Paris.\\nHalf of the hashimicubit,\\ninstituted by Charlemagne.\\nThis exact definition comes from\\na law passed on 10 Dec 1799 which\\nfixed the meter at\\n3 frenchfeet + 11.296 lignes.\"}},{\"line\":\"frenchline = 1|12 frenchinch\",\"info\":{\"headingsIndex\":[47],\"headingLevel\":1,\"headings\":[\"47. Old French distance measures, from French Weights and Measures\\nBefore the Revolution by Zupko\"],\"comment\":\"This is supposed to be the size\\nof the average barleycorn\"}},{\"line\":\"ligne = frenchline\",\"info\":{\"headingsIndex\":[47],\"headingLevel\":1,\"headings\":[\"47. Old French distance measures, from French Weights and Measures\\nBefore the Revolution by Zupko\"],\"comment\":\"This is supposed to be the size\\nof the average barleycorn\"}},{\"line\":\"frenchpoint = 1|12 frenchline\",\"info\":{\"headingsIndex\":[47],\"headingLevel\":1,\"headings\":[\"47. Old French distance measures, from French Weights and Measures\\nBefore the Revolution by Zupko\"],\"comment\":\"\"}},{\"line\":\"toise = 6 frenchfeet\",\"info\":{\"headingsIndex\":[47],\"headingLevel\":1,\"headings\":[\"47. Old French distance measures, from French Weights and Measures\\nBefore the Revolution by Zupko\"],\"comment\":\"\"}},{\"line\":\"arpent = 180^2 pied^2\",\"info\":{\"headingsIndex\":[47],\"headingLevel\":1,\"headings\":[\"47. Old French distance measures, from French Weights and Measures\\nBefore the Revolution by Zupko\"],\"comment\":\"The arpent is 100 square perches,\\nbut the perche seems to vary a lot\\nand can be 18 feet, 20 feet, or 22\\nfeet.  This measure was described\\nas being in common use in Canada in\\n1934 (Websters 2nd).  The value\\ngiven here is the Paris standard\\narpent.\"}},{\"line\":\"frenchgrain = 1|18827.15 kg\",\"info\":{\"headingsIndex\":[47],\"headingLevel\":1,\"headings\":[\"47. Old French distance measures, from French Weights and Measures\\nBefore the Revolution by Zupko\"],\"comment\":\"Weight of a wheat grain, hence\\nsmaller than the British grain.\"}},{\"line\":\"frenchpound = 9216 frenchgrain\",\"info\":{\"headingsIndex\":[47],\"headingLevel\":1,\"headings\":[\"47. Old French distance measures, from French Weights and Measures\\nBefore the Revolution by Zupko\"],\"comment\":\"\"}},{\"line\":\"scotsinch = 1.00540054 UKinch\",\"info\":{\"headingsIndex\":[48,1],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.1. Scots linear measure\"],\"comment\":\"\"}},{\"line\":\"scotslink = 1|100 scotschain\",\"info\":{\"headingsIndex\":[48,1],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.1. Scots linear measure\"],\"comment\":\"\"}},{\"line\":\"scotsfoot = 12 scotsinch\",\"info\":{\"headingsIndex\":[48,1],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.1. Scots linear measure\"],\"comment\":\"\"}},{\"line\":\"scotsfeet = scotsfoot\",\"info\":{\"headingsIndex\":[48,1],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.1. Scots linear measure\"],\"comment\":\"\"}},{\"line\":\"scotsell = 37 scotsinch\",\"info\":{\"headingsIndex\":[48,1],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.1. Scots linear measure\"],\"comment\":\"\"}},{\"line\":\"scotsfall = 6 scotsell\",\"info\":{\"headingsIndex\":[48,1],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.1. Scots linear measure\"],\"comment\":\"\"}},{\"line\":\"scotschain = 4 scotsfall\",\"info\":{\"headingsIndex\":[48,1],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.1. Scots linear measure\"],\"comment\":\"\"}},{\"line\":\"scotsfurlong = 10 scotschain\",\"info\":{\"headingsIndex\":[48,1],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.1. Scots linear measure\"],\"comment\":\"\"}},{\"line\":\"scotsmile = 8 scotsfurlong\",\"info\":{\"headingsIndex\":[48,1],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.1. Scots linear measure\"],\"comment\":\"\"}},{\"line\":\"scotsrood = 40 scotsfall^2\",\"info\":{\"headingsIndex\":[48,2],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.2. Scots area measure\"],\"comment\":\"\"}},{\"line\":\"scotsacre = 4 scotsrood\",\"info\":{\"headingsIndex\":[48,2],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.2. Scots area measure\"],\"comment\":\"\"}},{\"line\":\"irishinch = UKinch\",\"info\":{\"headingsIndex\":[48,3],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.3. Irish linear measure\"],\"comment\":\"\"}},{\"line\":\"irishpalm = 3 irishinch\",\"info\":{\"headingsIndex\":[48,3],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.3. Irish linear measure\"],\"comment\":\"\"}},{\"line\":\"irishspan = 3 irishpalm\",\"info\":{\"headingsIndex\":[48,3],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.3. Irish linear measure\"],\"comment\":\"\"}},{\"line\":\"irishfoot = 12 irishinch\",\"info\":{\"headingsIndex\":[48,3],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.3. Irish linear measure\"],\"comment\":\"\"}},{\"line\":\"irishfeet = irishfoot\",\"info\":{\"headingsIndex\":[48,3],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.3. Irish linear measure\"],\"comment\":\"\"}},{\"line\":\"irishcubit = 18 irishinch\",\"info\":{\"headingsIndex\":[48,3],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.3. Irish linear measure\"],\"comment\":\"\"}},{\"line\":\"irishyard = 3 irishfeet\",\"info\":{\"headingsIndex\":[48,3],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.3. Irish linear measure\"],\"comment\":\"\"}},{\"line\":\"irishpace = 5 irishfeet\",\"info\":{\"headingsIndex\":[48,3],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.3. Irish linear measure\"],\"comment\":\"\"}},{\"line\":\"irishfathom = 6 irishfeet\",\"info\":{\"headingsIndex\":[48,3],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.3. Irish linear measure\"],\"comment\":\"\"}},{\"line\":\"irishpole = 7 irishyard\",\"info\":{\"headingsIndex\":[48,3],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.3. Irish linear measure\"],\"comment\":\"Only these values\\nare different from\\nthe British Imperial\\nor English values for\\nthese lengths.\"}},{\"line\":\"irishperch = irishpole\",\"info\":{\"headingsIndex\":[48,3],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.3. Irish linear measure\"],\"comment\":\"Only these values\\nare different from\\nthe British Imperial\\nor English values for\\nthese lengths.\"}},{\"line\":\"irishchain = 4 irishperch\",\"info\":{\"headingsIndex\":[48,3],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.3. Irish linear measure\"],\"comment\":\"Only these values\\nare different from\\nthe British Imperial\\nor English values for\\nthese lengths.\"}},{\"line\":\"irishlink = 1|100 irishchain\",\"info\":{\"headingsIndex\":[48,3],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.3. Irish linear measure\"],\"comment\":\"Only these values\\nare different from\\nthe British Imperial\\nor English values for\\nthese lengths.\"}},{\"line\":\"irishfurlong = 10 irishchain\",\"info\":{\"headingsIndex\":[48,3],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.3. Irish linear measure\"],\"comment\":\"Only these values\\nare different from\\nthe British Imperial\\nor English values for\\nthese lengths.\"}},{\"line\":\"irishmile = 8 irishfurlong\",\"info\":{\"headingsIndex\":[48,3],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.3. Irish linear measure\"],\"comment\":\"Only these values\\nare different from\\nthe British Imperial\\nor English values for\\nthese lengths.\"}},{\"line\":\"irishrood = 40 irishpole^2\",\"info\":{\"headingsIndex\":[48,4],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.4. Irish area measure\"],\"comment\":\"\"}},{\"line\":\"irishacre = 4 irishrood\",\"info\":{\"headingsIndex\":[48,4],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.4. Irish area measure\"],\"comment\":\"\"}},{\"line\":\"winepint = 1|2 winequart\",\"info\":{\"headingsIndex\":[48,5],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.5. English wine capacity measures (Winchester measures)\"],\"comment\":\"\"}},{\"line\":\"winequart = 1|4 winegallon\",\"info\":{\"headingsIndex\":[48,5],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.5. English wine capacity measures (Winchester measures)\"],\"comment\":\"\"}},{\"line\":\"winegallon = 231 UKinch^3\",\"info\":{\"headingsIndex\":[48,5],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.5. English wine capacity measures (Winchester measures)\"],\"comment\":\"Sometimes called the Winchester Wine Gallon,\\nit was legalized in 1707 by Queen Anne, and\\ngiven the definition of 231 cubic inches.  It\\nhad been in use for a while as 8 pounds of wine\\nusing a merchant's pound, but the definition of\\nthe merchant's pound had become uncertain.  A\\npound of 15 tower ounces (6750 grains) had been\\ncommon, but then a pound of 15 troy ounces\\n(7200 grains) gained popularity.  Because of\\nthe switch in the value of the merchants pound,\\nthe size of the wine gallon was uncertain in\\nthe market, hence the official act in 1707.\\nThe act allowed that a six inch tall cylinder\\nwith a 7 inch diameter was a lawful wine\\ngallon.  (This comes out to 230.9 in^3.)\\nNote also that in Britain a legal conversion\\nwas established to the 1824 Imperial gallon\\nthen taken as 277.274 in^3 so that the wine\\ngallon was 0.8331 imperial gallons.  This is\\n231.1 cubic inches (using the international\\ninch).\"}},{\"line\":\"winerundlet = 18 winegallon\",\"info\":{\"headingsIndex\":[48,5],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.5. English wine capacity measures (Winchester measures)\"],\"comment\":\"\"}},{\"line\":\"winebarrel = 31.5 winegallon\",\"info\":{\"headingsIndex\":[48,5],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.5. English wine capacity measures (Winchester measures)\"],\"comment\":\"\"}},{\"line\":\"winetierce = 42 winegallon\",\"info\":{\"headingsIndex\":[48,5],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.5. English wine capacity measures (Winchester measures)\"],\"comment\":\"\"}},{\"line\":\"winehogshead = 2 winebarrel\",\"info\":{\"headingsIndex\":[48,5],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.5. English wine capacity measures (Winchester measures)\"],\"comment\":\"\"}},{\"line\":\"winepuncheon = 2 winetierce\",\"info\":{\"headingsIndex\":[48,5],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.5. English wine capacity measures (Winchester measures)\"],\"comment\":\"\"}},{\"line\":\"winebutt = 2 winehogshead\",\"info\":{\"headingsIndex\":[48,5],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.5. English wine capacity measures (Winchester measures)\"],\"comment\":\"\"}},{\"line\":\"winepipe = winebutt\",\"info\":{\"headingsIndex\":[48,5],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.5. English wine capacity measures (Winchester measures)\"],\"comment\":\"\"}},{\"line\":\"winetun = 2 winebutt\",\"info\":{\"headingsIndex\":[48,5],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.5. English wine capacity measures (Winchester measures)\"],\"comment\":\"\"}},{\"line\":\"beerpint = 1|2 beerquart\",\"info\":{\"headingsIndex\":[48,6],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.6. English beer and ale measures used 1803-1824 and used for beer before 1688\"],\"comment\":\"\"}},{\"line\":\"beerquart = 1|4 beergallon\",\"info\":{\"headingsIndex\":[48,6],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.6. English beer and ale measures used 1803-1824 and used for beer before 1688\"],\"comment\":\"\"}},{\"line\":\"beergallon = 282 UKinch^3\",\"info\":{\"headingsIndex\":[48,6],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.6. English beer and ale measures used 1803-1824 and used for beer before 1688\"],\"comment\":\"\"}},{\"line\":\"beerbarrel = 36 beergallon\",\"info\":{\"headingsIndex\":[48,6],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.6. English beer and ale measures used 1803-1824 and used for beer before 1688\"],\"comment\":\"\"}},{\"line\":\"beerhogshead = 1.5 beerbarrel\",\"info\":{\"headingsIndex\":[48,6],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.6. English beer and ale measures used 1803-1824 and used for beer before 1688\"],\"comment\":\"\"}},{\"line\":\"alepint = 1|2 alequart\",\"info\":{\"headingsIndex\":[48,7],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.7. English ale measures used from 1688-1803 for both ale and beer\"],\"comment\":\"\"}},{\"line\":\"alequart = 1|4 alegallon\",\"info\":{\"headingsIndex\":[48,7],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.7. English ale measures used from 1688-1803 for both ale and beer\"],\"comment\":\"\"}},{\"line\":\"alegallon = beergallon\",\"info\":{\"headingsIndex\":[48,7],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.7. English ale measures used from 1688-1803 for both ale and beer\"],\"comment\":\"\"}},{\"line\":\"alebarrel = 34 alegallon\",\"info\":{\"headingsIndex\":[48,7],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.7. English ale measures used from 1688-1803 for both ale and beer\"],\"comment\":\"\"}},{\"line\":\"alehogshead = 1.5 alebarrel\",\"info\":{\"headingsIndex\":[48,7],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.7. English ale measures used from 1688-1803 for both ale and beer\"],\"comment\":\"\"}},{\"line\":\"scotsgill = 1|4 mutchkin\",\"info\":{\"headingsIndex\":[48,8],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.8. Scots capacity measure\"],\"comment\":\"\"}},{\"line\":\"mutchkin = 1|2 choppin\",\"info\":{\"headingsIndex\":[48,8],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.8. Scots capacity measure\"],\"comment\":\"\"}},{\"line\":\"choppin = 1|2 scotspint\",\"info\":{\"headingsIndex\":[48,8],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.8. Scots capacity measure\"],\"comment\":\"\"}},{\"line\":\"scotspint = 1|2 scotsquart\",\"info\":{\"headingsIndex\":[48,8],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.8. Scots capacity measure\"],\"comment\":\"\"}},{\"line\":\"scotsquart = 1|4 scotsgallon\",\"info\":{\"headingsIndex\":[48,8],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.8. Scots capacity measure\"],\"comment\":\"\"}},{\"line\":\"scotsgallon = 827.232 UKinch^3\",\"info\":{\"headingsIndex\":[48,8],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.8. Scots capacity measure\"],\"comment\":\"\"}},{\"line\":\"scotsbarrel = 8 scotsgallon\",\"info\":{\"headingsIndex\":[48,8],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.8. Scots capacity measure\"],\"comment\":\"\"}},{\"line\":\"jug = scotspint\",\"info\":{\"headingsIndex\":[48,8],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.8. Scots capacity measure\"],\"comment\":\"\"}},{\"line\":\"scotswheatlippy = 137.333 UKinch^3\",\"info\":{\"headingsIndex\":[48,9],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.9. Scots dry capacity measure\"],\"comment\":\"Also used for peas, beans, rye, salt\"}},{\"line\":\"scotswheatlippies = scotswheatlippy\",\"info\":{\"headingsIndex\":[48,9],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.9. Scots dry capacity measure\"],\"comment\":\"Also used for peas, beans, rye, salt\"}},{\"line\":\"scotswheatpeck = 4 scotswheatlippy\",\"info\":{\"headingsIndex\":[48,9],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.9. Scots dry capacity measure\"],\"comment\":\"\"}},{\"line\":\"scotswheatfirlot = 4 scotswheatpeck\",\"info\":{\"headingsIndex\":[48,9],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.9. Scots dry capacity measure\"],\"comment\":\"\"}},{\"line\":\"scotswheatboll = 4 scotswheatfirlot\",\"info\":{\"headingsIndex\":[48,9],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.9. Scots dry capacity measure\"],\"comment\":\"\"}},{\"line\":\"scotswheatchalder = 16 scotswheatboll\",\"info\":{\"headingsIndex\":[48,9],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.9. Scots dry capacity measure\"],\"comment\":\"\"}},{\"line\":\"scotsoatlippy = 200.345 UKinch^3\",\"info\":{\"headingsIndex\":[48,9],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.9. Scots dry capacity measure\"],\"comment\":\"Also used for barley and malt\"}},{\"line\":\"scotsoatlippies = scotsoatlippy\",\"info\":{\"headingsIndex\":[48,9],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.9. Scots dry capacity measure\"],\"comment\":\"Also used for barley and malt\"}},{\"line\":\"scotsoatpeck = 4 scotsoatlippy\",\"info\":{\"headingsIndex\":[48,9],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.9. Scots dry capacity measure\"],\"comment\":\"\"}},{\"line\":\"scotsoatfirlot = 4 scotsoatpeck\",\"info\":{\"headingsIndex\":[48,9],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.9. Scots dry capacity measure\"],\"comment\":\"\"}},{\"line\":\"scotsoatboll = 4 scotsoatfirlot\",\"info\":{\"headingsIndex\":[48,9],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.9. Scots dry capacity measure\"],\"comment\":\"\"}},{\"line\":\"scotsoatchalder = 16 scotsoatboll\",\"info\":{\"headingsIndex\":[48,9],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.9. Scots dry capacity measure\"],\"comment\":\"\"}},{\"line\":\"trondrop = 1|16 tronounce\",\"info\":{\"headingsIndex\":[48,10],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.10. Scots Tron weight\"],\"comment\":\"\"}},{\"line\":\"tronounce = 1|20 tronpound\",\"info\":{\"headingsIndex\":[48,10],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.10. Scots Tron weight\"],\"comment\":\"\"}},{\"line\":\"tronpound = 9520 grain\",\"info\":{\"headingsIndex\":[48,10],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.10. Scots Tron weight\"],\"comment\":\"\"}},{\"line\":\"tronstone = 16 tronpound\",\"info\":{\"headingsIndex\":[48,10],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.10. Scots Tron weight\"],\"comment\":\"\"}},{\"line\":\"irishnoggin = 1|4 irishpint\",\"info\":{\"headingsIndex\":[48,11],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.11. Irish liquid capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishpint = 1|2 irishquart\",\"info\":{\"headingsIndex\":[48,11],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.11. Irish liquid capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishquart = 1|2 irishpottle\",\"info\":{\"headingsIndex\":[48,11],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.11. Irish liquid capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishpottle = 1|2 irishgallon\",\"info\":{\"headingsIndex\":[48,11],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.11. Irish liquid capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishgallon = 217.6 UKinch^3\",\"info\":{\"headingsIndex\":[48,11],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.11. Irish liquid capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishrundlet = 18 irishgallon\",\"info\":{\"headingsIndex\":[48,11],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.11. Irish liquid capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishbarrel = 31.5 irishgallon\",\"info\":{\"headingsIndex\":[48,11],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.11. Irish liquid capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishtierce = 42 irishgallon\",\"info\":{\"headingsIndex\":[48,11],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.11. Irish liquid capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishhogshead = 2 irishbarrel\",\"info\":{\"headingsIndex\":[48,11],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.11. Irish liquid capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishpuncheon = 2 irishtierce\",\"info\":{\"headingsIndex\":[48,11],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.11. Irish liquid capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishpipe = 2 irishhogshead\",\"info\":{\"headingsIndex\":[48,11],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.11. Irish liquid capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishtun = 2 irishpipe\",\"info\":{\"headingsIndex\":[48,11],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.11. Irish liquid capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishpeck = 2 irishgallon\",\"info\":{\"headingsIndex\":[48,12],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.12. Irish dry capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishbushel = 4 irishpeck\",\"info\":{\"headingsIndex\":[48,12],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.12. Irish dry capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishstrike = 2 irishbushel\",\"info\":{\"headingsIndex\":[48,12],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.12. Irish dry capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishdrybarrel = 2 irishstrike\",\"info\":{\"headingsIndex\":[48,12],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.12. Irish dry capacity measure\"],\"comment\":\"\"}},{\"line\":\"irishquarter = 2 irishbarrel\",\"info\":{\"headingsIndex\":[48,12],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.12. Irish dry capacity measure\"],\"comment\":\"\"}},{\"line\":\"towerpound = 5400 grain\",\"info\":{\"headingsIndex\":[48,13],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.13. English Tower weights, abolished in 1528\"],\"comment\":\"\"}},{\"line\":\"towerounce = 1|12 towerpound\",\"info\":{\"headingsIndex\":[48,13],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.13. English Tower weights, abolished in 1528\"],\"comment\":\"\"}},{\"line\":\"towerpennyweight = 1|20 towerounce\",\"info\":{\"headingsIndex\":[48,13],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.13. English Tower weights, abolished in 1528\"],\"comment\":\"\"}},{\"line\":\"towergrain = 1|32 towerpennyweight\",\"info\":{\"headingsIndex\":[48,13],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.13. English Tower weights, abolished in 1528\"],\"comment\":\"\"}},{\"line\":\"mercpound = 6750 grain\",\"info\":{\"headingsIndex\":[48,14],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.14. English Mercantile weights, used since the late 12th century\"],\"comment\":\"\"}},{\"line\":\"mercounce = 1|15 mercpound\",\"info\":{\"headingsIndex\":[48,14],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.14. English Mercantile weights, used since the late 12th century\"],\"comment\":\"\"}},{\"line\":\"mercpennyweight = 1|20 mercounce\",\"info\":{\"headingsIndex\":[48,14],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.14. English Mercantile weights, used since the late 12th century\"],\"comment\":\"\"}},{\"line\":\"leadstone = 12.5 lb\",\"info\":{\"headingsIndex\":[48,15],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.15. English weights for lead\"],\"comment\":\"\"}},{\"line\":\"fotmal = 70 lb\",\"info\":{\"headingsIndex\":[48,15],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.15. English weights for lead\"],\"comment\":\"\"}},{\"line\":\"leadwey = 14 leadstone\",\"info\":{\"headingsIndex\":[48,15],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.15. English weights for lead\"],\"comment\":\"\"}},{\"line\":\"fothers = 12 leadwey\",\"info\":{\"headingsIndex\":[48,15],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.15. English weights for lead\"],\"comment\":\"\"}},{\"line\":\"newhaytruss = 60 lb\",\"info\":{\"headingsIndex\":[48,16],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.16. English Hay measure\"],\"comment\":\"New and old here seem to refer to \\\"new\\\"\\nhay and \\\"old\\\" hay rather than a new unit\\nand an old unit.\"}},{\"line\":\"newhayload = 36 newhaytruss\",\"info\":{\"headingsIndex\":[48,16],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.16. English Hay measure\"],\"comment\":\"New and old here seem to refer to \\\"new\\\"\\nhay and \\\"old\\\" hay rather than a new unit\\nand an old unit.\"}},{\"line\":\"oldhaytruss = 56 lb\",\"info\":{\"headingsIndex\":[48,16],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.16. English Hay measure\"],\"comment\":\"New and old here seem to refer to \\\"new\\\"\\nhay and \\\"old\\\" hay rather than a new unit\\nand an old unit.\"}},{\"line\":\"oldhayload = 36 oldhaytruss\",\"info\":{\"headingsIndex\":[48,16],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.16. English Hay measure\"],\"comment\":\"New and old here seem to refer to \\\"new\\\"\\nhay and \\\"old\\\" hay rather than a new unit\\nand an old unit.\"}},{\"line\":\"woolclove = 7 lb\",\"info\":{\"headingsIndex\":[48,17],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.17. English wool measure\"],\"comment\":\"\"}},{\"line\":\"woolstone = 2 woolclove\",\"info\":{\"headingsIndex\":[48,17],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.17. English wool measure\"],\"comment\":\"\"}},{\"line\":\"wooltod = 2 woolstone\",\"info\":{\"headingsIndex\":[48,17],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.17. English wool measure\"],\"comment\":\"\"}},{\"line\":\"woolwey = 13 woolstone\",\"info\":{\"headingsIndex\":[48,17],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.17. English wool measure\"],\"comment\":\"\"}},{\"line\":\"woolsack = 2 woolwey\",\"info\":{\"headingsIndex\":[48,17],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.17. English wool measure\"],\"comment\":\"\"}},{\"line\":\"woolsarpler = 2 woolsack\",\"info\":{\"headingsIndex\":[48,17],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.17. English wool measure\"],\"comment\":\"\"}},{\"line\":\"woollast = 6 woolsarpler\",\"info\":{\"headingsIndex\":[48,17],\"headingLevel\":2,\"headings\":[\"48. Before the Imperial Weights and Measures Act of 1824, various different\\nweights and measures were in use in different places.\",\"48.17. English wool measure\"],\"comment\":\"\"}},{\"line\":\"romanfoot = 296 mm\",\"info\":{\"headingsIndex\":[49,1],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"There is some uncertainty in this definition\\nfrom which all the other units are derived.\\nThis value appears in numerous sources. In \\\"The\\nRoman Land Surveyors\\\", Dilke gives 295.7 mm.\"}},{\"line\":\"romanfeet = romanfoot\",\"info\":{\"headingsIndex\":[49,1],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"There is some uncertainty in this definition\\nfrom which all the other units are derived.\\nThis value appears in numerous sources. In \\\"The\\nRoman Land Surveyors\\\", Dilke gives 295.7 mm.\"}},{\"line\":\"pes = romanfoot\",\"info\":{\"headingsIndex\":[49,1],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"There is some uncertainty in this definition\\nfrom which all the other units are derived.\\nThis value appears in numerous sources. In \\\"The\\nRoman Land Surveyors\\\", Dilke gives 295.7 mm.\"}},{\"line\":\"pedes = romanfoot\",\"info\":{\"headingsIndex\":[49,1],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"There is some uncertainty in this definition\\nfrom which all the other units are derived.\\nThis value appears in numerous sources. In \\\"The\\nRoman Land Surveyors\\\", Dilke gives 295.7 mm.\"}},{\"line\":\"romaninch = 1|12 romanfoot\",\"info\":{\"headingsIndex\":[49,1],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"The subdivisions of the Roman foot have the\\nsame names as the subdivisions of the pound,\\nbut we can't have the names for different\\nunits.\"}},{\"line\":\"romandigit = 1|16 romanfoot\",\"info\":{\"headingsIndex\":[49,1],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"The subdivisions of the Roman foot have the\\nsame names as the subdivisions of the pound,\\nbut we can't have the names for different\\nunits.\"}},{\"line\":\"romanpalm = 1|4 romanfoot\",\"info\":{\"headingsIndex\":[49,1],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"The subdivisions of the Roman foot have the\\nsame names as the subdivisions of the pound,\\nbut we can't have the names for different\\nunits.\"}},{\"line\":\"romancubit = 18 romaninch\",\"info\":{\"headingsIndex\":[49,1],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"The subdivisions of the Roman foot have the\\nsame names as the subdivisions of the pound,\\nbut we can't have the names for different\\nunits.\"}},{\"line\":\"romanpace = 5 romanfeet\",\"info\":{\"headingsIndex\":[49,1],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"Roman double pace (basic military unit)\"}},{\"line\":\"passus = romanpace\",\"info\":{\"headingsIndex\":[49,1],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"Roman double pace (basic military unit)\"}},{\"line\":\"romanperch = 10 romanfeet\",\"info\":{\"headingsIndex\":[49,1],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"\"}},{\"line\":\"stade = 125 romanpaces\",\"info\":{\"headingsIndex\":[49,1],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"\"}},{\"line\":\"stadia = stade\",\"info\":{\"headingsIndex\":[49,1],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"\"}},{\"line\":\"stadium = stade\",\"info\":{\"headingsIndex\":[49,1],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"\"}},{\"line\":\"romanmile = 8 stadia\",\"info\":{\"headingsIndex\":[49,1],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"1000 paces\"}},{\"line\":\"romanleague = 1.5 romanmile\",\"info\":{\"headingsIndex\":[49,1],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"\"}},{\"line\":\"schoenus = 4 romanmile\",\"info\":{\"headingsIndex\":[49,1],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\"],\"comment\":\"\"}},{\"line\":\"earlyromanfoot = 29.73 cm\",\"info\":{\"headingsIndex\":[49,1,1],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.1. Other values for the Roman foot (from Dilke)\"],\"comment\":\"\"}},{\"line\":\"pesdrusianus = 33.3 cm\",\"info\":{\"headingsIndex\":[49,1,1],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.1. Other values for the Roman foot (from Dilke)\"],\"comment\":\"or 33.35 cm, used in Gaul & Germany in 1st c BC\"}},{\"line\":\"lateromanfoot = 29.42 cm\",\"info\":{\"headingsIndex\":[49,1,1],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.1. Other values for the Roman foot (from Dilke)\"],\"comment\":\"\"}},{\"line\":\"actuslength = 120 romanfeet\",\"info\":{\"headingsIndex\":[49,1,2],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.2. Roman areas\"],\"comment\":\"length of a Roman furrow\"}},{\"line\":\"actus = 120*4 romanfeet^2\",\"info\":{\"headingsIndex\":[49,1,2],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.2. Roman areas\"],\"comment\":\"area of the furrow\"}},{\"line\":\"squareactus = 120^2 romanfeet^2\",\"info\":{\"headingsIndex\":[49,1,2],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.2. Roman areas\"],\"comment\":\"actus quadratus\"}},{\"line\":\"acnua = squareactus\",\"info\":{\"headingsIndex\":[49,1,2],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.2. Roman areas\"],\"comment\":\"actus quadratus\"}},{\"line\":\"iugerum = 2 squareactus\",\"info\":{\"headingsIndex\":[49,1,2],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.2. Roman areas\"],\"comment\":\"\"}},{\"line\":\"iugera = iugerum\",\"info\":{\"headingsIndex\":[49,1,2],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.2. Roman areas\"],\"comment\":\"\"}},{\"line\":\"jugerum = iugerum\",\"info\":{\"headingsIndex\":[49,1,2],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.2. Roman areas\"],\"comment\":\"\"}},{\"line\":\"jugera = iugerum\",\"info\":{\"headingsIndex\":[49,1,2],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.2. Roman areas\"],\"comment\":\"\"}},{\"line\":\"heredium = 2 iugera\",\"info\":{\"headingsIndex\":[49,1,2],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.2. Roman areas\"],\"comment\":\"heritable plot\"}},{\"line\":\"heredia = heredium\",\"info\":{\"headingsIndex\":[49,1,2],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.2. Roman areas\"],\"comment\":\"heritable plot\"}},{\"line\":\"centuria = 100 heredia\",\"info\":{\"headingsIndex\":[49,1,2],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.2. Roman areas\"],\"comment\":\"\"}},{\"line\":\"centurium = centuria\",\"info\":{\"headingsIndex\":[49,1,2],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.2. Roman areas\"],\"comment\":\"\"}},{\"line\":\"sextarius = 35.4 in^3\",\"info\":{\"headingsIndex\":[49,1,3],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.3. Roman volumes\"],\"comment\":\"Basic unit of Roman volume.  As always,\\nthere is uncertainty.  Six large Roman\\nmeasures survive with volumes ranging from\\n34.4 in^3 to 39.55 in^3.  Three of them\\ncluster around the size given here.\\n\\nBut the values for this unit vary wildly\\nin other sources.  One reference  gives 0.547\\nliters, but then says the amphora is a\\ncubic Roman foot.  This gives a value for the\\nsextarius of 0.540 liters.  And the\\nencyclopedia Brittanica lists 0.53 liters for\\nthis unit.  Both [7] and [11], which were\\nwritten by scholars of weights and measures,\\ngive the value of 35.4 cubic inches.\"}},{\"line\":\"sextarii = sextarius\",\"info\":{\"headingsIndex\":[49,1,3],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.3. Roman volumes\"],\"comment\":\"Basic unit of Roman volume.  As always,\\nthere is uncertainty.  Six large Roman\\nmeasures survive with volumes ranging from\\n34.4 in^3 to 39.55 in^3.  Three of them\\ncluster around the size given here.\\n\\nBut the values for this unit vary wildly\\nin other sources.  One reference  gives 0.547\\nliters, but then says the amphora is a\\ncubic Roman foot.  This gives a value for the\\nsextarius of 0.540 liters.  And the\\nencyclopedia Brittanica lists 0.53 liters for\\nthis unit.  Both [7] and [11], which were\\nwritten by scholars of weights and measures,\\ngive the value of 35.4 cubic inches.\"}},{\"line\":\"cochlearia = 1|48 sextarius\",\"info\":{\"headingsIndex\":[49,1,3],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.3. Roman volumes\"],\"comment\":\"\"}},{\"line\":\"cyathi = 1|12 sextarius\",\"info\":{\"headingsIndex\":[49,1,3],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.3. Roman volumes\"],\"comment\":\"\"}},{\"line\":\"acetabula = 1|8 sextarius\",\"info\":{\"headingsIndex\":[49,1,3],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.3. Roman volumes\"],\"comment\":\"\"}},{\"line\":\"quartaria = 1|4 sextarius\",\"info\":{\"headingsIndex\":[49,1,3],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.3. Roman volumes\"],\"comment\":\"\"}},{\"line\":\"quartarius = quartaria\",\"info\":{\"headingsIndex\":[49,1,3],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.3. Roman volumes\"],\"comment\":\"\"}},{\"line\":\"heminae = 1|2 sextarius\",\"info\":{\"headingsIndex\":[49,1,3],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.3. Roman volumes\"],\"comment\":\"\"}},{\"line\":\"hemina = heminae\",\"info\":{\"headingsIndex\":[49,1,3],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.3. Roman volumes\"],\"comment\":\"\"}},{\"line\":\"cheonix = 1.5 sextarii\",\"info\":{\"headingsIndex\":[49,1,3],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.3. Roman volumes\"],\"comment\":\"\"}},{\"line\":\"semodius = 8 sextarius\",\"info\":{\"headingsIndex\":[49,1,4],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.4. Dry volume measures (usually)\"],\"comment\":\"\"}},{\"line\":\"semodii = semodius\",\"info\":{\"headingsIndex\":[49,1,4],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.4. Dry volume measures (usually)\"],\"comment\":\"\"}},{\"line\":\"modius = 16 sextarius\",\"info\":{\"headingsIndex\":[49,1,4],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.4. Dry volume measures (usually)\"],\"comment\":\"\"}},{\"line\":\"modii = modius\",\"info\":{\"headingsIndex\":[49,1,4],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.4. Dry volume measures (usually)\"],\"comment\":\"\"}},{\"line\":\"congius = 12 heminae\",\"info\":{\"headingsIndex\":[49,1,5],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.5. Liquid volume measures (usually)\"],\"comment\":\"\"}},{\"line\":\"congii = congius\",\"info\":{\"headingsIndex\":[49,1,5],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.5. Liquid volume measures (usually)\"],\"comment\":\"\"}},{\"line\":\"amphora = 8 congii\",\"info\":{\"headingsIndex\":[49,1,5],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.5. Liquid volume measures (usually)\"],\"comment\":\"Also a dry volume measure\"}},{\"line\":\"amphorae = amphora\",\"info\":{\"headingsIndex\":[49,1,5],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.5. Liquid volume measures (usually)\"],\"comment\":\"Also a dry volume measure\"}},{\"line\":\"culleus = 20 amphorae\",\"info\":{\"headingsIndex\":[49,1,5],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.5. Liquid volume measures (usually)\"],\"comment\":\"\"}},{\"line\":\"quadrantal = amphora\",\"info\":{\"headingsIndex\":[49,1,5],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.5. Liquid volume measures (usually)\"],\"comment\":\"\"}},{\"line\":\"libra = 5052 grain\",\"info\":{\"headingsIndex\":[49,1,6],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.6. Roman weights\"],\"comment\":\"The Roman pound varied significantly\\nfrom 4210 grains to 5232 grains.  Most of\\nthe standards were obtained from the weight\\nof particular coins.  The one given here is\\nbased on the Gold Aureus of Augustus which\\nwas in use from BC 27 to AD 296.\"}},{\"line\":\"librae = libra\",\"info\":{\"headingsIndex\":[49,1,6],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.6. Roman weights\"],\"comment\":\"The Roman pound varied significantly\\nfrom 4210 grains to 5232 grains.  Most of\\nthe standards were obtained from the weight\\nof particular coins.  The one given here is\\nbased on the Gold Aureus of Augustus which\\nwas in use from BC 27 to AD 296.\"}},{\"line\":\"romanpound = libra\",\"info\":{\"headingsIndex\":[49,1,6],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.6. Roman weights\"],\"comment\":\"The Roman pound varied significantly\\nfrom 4210 grains to 5232 grains.  Most of\\nthe standards were obtained from the weight\\nof particular coins.  The one given here is\\nbased on the Gold Aureus of Augustus which\\nwas in use from BC 27 to AD 296.\"}},{\"line\":\"uncia = 1|12 libra\",\"info\":{\"headingsIndex\":[49,1,6],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.6. Roman weights\"],\"comment\":\"The Roman pound varied significantly\\nfrom 4210 grains to 5232 grains.  Most of\\nthe standards were obtained from the weight\\nof particular coins.  The one given here is\\nbased on the Gold Aureus of Augustus which\\nwas in use from BC 27 to AD 296.\"}},{\"line\":\"unciae = uncia\",\"info\":{\"headingsIndex\":[49,1,6],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.6. Roman weights\"],\"comment\":\"The Roman pound varied significantly\\nfrom 4210 grains to 5232 grains.  Most of\\nthe standards were obtained from the weight\\nof particular coins.  The one given here is\\nbased on the Gold Aureus of Augustus which\\nwas in use from BC 27 to AD 296.\"}},{\"line\":\"romanounce = uncia\",\"info\":{\"headingsIndex\":[49,1,6],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.6. Roman weights\"],\"comment\":\"The Roman pound varied significantly\\nfrom 4210 grains to 5232 grains.  Most of\\nthe standards were obtained from the weight\\nof particular coins.  The one given here is\\nbased on the Gold Aureus of Augustus which\\nwas in use from BC 27 to AD 296.\"}},{\"line\":\"deunx = 11 uncia\",\"info\":{\"headingsIndex\":[49,1,6],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"dextans = 10 uncia\",\"info\":{\"headingsIndex\":[49,1,6],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"dodrans = 9 uncia\",\"info\":{\"headingsIndex\":[49,1,6],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"bes = 8 uncia\",\"info\":{\"headingsIndex\":[49,1,6],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"seprunx = 7 uncia\",\"info\":{\"headingsIndex\":[49,1,6],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"semis = 6 uncia\",\"info\":{\"headingsIndex\":[49,1,6],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"quincunx = 5 uncia\",\"info\":{\"headingsIndex\":[49,1,6],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"triens = 4 uncia\",\"info\":{\"headingsIndex\":[49,1,6],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"quadrans = 3 uncia\",\"info\":{\"headingsIndex\":[49,1,6],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"sextans = 2 uncia\",\"info\":{\"headingsIndex\":[49,1,6],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"sescuncia = 1.5 uncia\",\"info\":{\"headingsIndex\":[49,1,6],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"semuncia = 1|2 uncia\",\"info\":{\"headingsIndex\":[49,1,6],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"siscilius = 1|4 uncia\",\"info\":{\"headingsIndex\":[49,1,6],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"sextula = 1|6 uncia\",\"info\":{\"headingsIndex\":[49,1,6],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"semisextula = 1|12 uncia\",\"info\":{\"headingsIndex\":[49,1,6],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"scriptulum = 1|24 uncia\",\"info\":{\"headingsIndex\":[49,1,6],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"scrupula = scriptulum\",\"info\":{\"headingsIndex\":[49,1,6],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"romanobol = 1|2 scrupula\",\"info\":{\"headingsIndex\":[49,1,6],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.6. Roman weights\"],\"comment\":\"\"}},{\"line\":\"romanaspound = 4210 grain\",\"info\":{\"headingsIndex\":[49,1,6],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.1. Roman measure. The Romans had a well defined distance measure, but their\\nmeasures of weight were poor. They adopted local weights in different\\nregions without distinguishing among them so that there are half a dozen\\ndifferent Roman \\\"standard\\\" weight systems.\",\"49.1.6. Roman weights\"],\"comment\":\"Old pound based on bronze coinage, the\\nearliest money of Rome BC 338 to BC 268.\"}},{\"line\":\"egyptianroyalcubit = 20.63 in\",\"info\":{\"headingsIndex\":[49,2],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.2. Egyptian length measure\"],\"comment\":\"plus or minus .2 in\"}},{\"line\":\"egyptianpalm = 1|7 egyptianroyalcubit\",\"info\":{\"headingsIndex\":[49,2],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.2. Egyptian length measure\"],\"comment\":\"\"}},{\"line\":\"egyptiandigit = 1|4 egyptianpalm\",\"info\":{\"headingsIndex\":[49,2],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.2. Egyptian length measure\"],\"comment\":\"\"}},{\"line\":\"egyptianshortcubit = 6 egyptianpalm\",\"info\":{\"headingsIndex\":[49,2],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.2. Egyptian length measure\"],\"comment\":\"\"}},{\"line\":\"doubleremen = 29.16 in\",\"info\":{\"headingsIndex\":[49,2],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.2. Egyptian length measure\"],\"comment\":\"Length of the diagonal of a square with\\nside length of 1 royal egyptian cubit.\\nThis is divided into 40 digits which are\\nnot the same size as the digits based on\\nthe royal cubit.\"}},{\"line\":\"remendigit = 1|40 doubleremen\",\"info\":{\"headingsIndex\":[49,2],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.2. Egyptian length measure\"],\"comment\":\"Length of the diagonal of a square with\\nside length of 1 royal egyptian cubit.\\nThis is divided into 40 digits which are\\nnot the same size as the digits based on\\nthe royal cubit.\"}},{\"line\":\"greekfoot = 12.45 in\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"Listed as being derived from the\\nEgyptian Royal cubit in [11].  It is\\nsaid to be 3|5 of a 20.75 in cubit.\"}},{\"line\":\"greekfeet = greekfoot\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"Listed as being derived from the\\nEgyptian Royal cubit in [11].  It is\\nsaid to be 3|5 of a 20.75 in cubit.\"}},{\"line\":\"greekcubit = 1.5 greekfoot\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"Listed as being derived from the\\nEgyptian Royal cubit in [11].  It is\\nsaid to be 3|5 of a 20.75 in cubit.\"}},{\"line\":\"pous = greekfoot\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"\"}},{\"line\":\"podes = greekfoot\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"\"}},{\"line\":\"orguia = 6 greekfoot\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"\"}},{\"line\":\"greekfathom = orguia\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"\"}},{\"line\":\"stadion = 100 orguia\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"\"}},{\"line\":\"akaina = 10 greekfeet\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"\"}},{\"line\":\"plethron = 10 akaina\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"\"}},{\"line\":\"greekfinger = 1|16 greekfoot\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"\"}},{\"line\":\"homericcubit = 20 greekfingers\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"Elbow to end of knuckles.\"}},{\"line\":\"shortgreekcubit = 18 greekfingers\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"Elbow to start of fingers.\"}},{\"line\":\"ionicfoot = 296 mm\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"\"}},{\"line\":\"doricfoot = 326 mm\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"\"}},{\"line\":\"olympiccubit = 25 remendigit\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympicfoot = 2|3 olympiccubit\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympicfinger = 1|16 olympicfoot\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympicfeet = olympicfoot\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympicdakylos = olympicfinger\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympicpalm = 1|4 olympicfoot\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympicpalestra = olympicpalm\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympicspithame = 3|4 foot\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympicspan = olympicspithame\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympicbema = 2.5 olympicfeet\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympicpace = olympicbema\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympicorguia = 6 olympicfeet\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympicfathom = olympicorguia\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympiccord = 60 olympicfeet\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympicamma = olympiccord\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympicplethron = 100 olympicfeet\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"olympicstadion = 600 olympicfeet\",\"info\":{\"headingsIndex\":[49,3],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\"],\"comment\":\"These olympic measures were not as\\ncommon as the other greek measures.\\nThey were used in agriculture.\"}},{\"line\":\"greekkotyle = 270 ml\",\"info\":{\"headingsIndex\":[49,3,1],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\",\"49.3.1. Greek capacity measure\"],\"comment\":\"This approximate value is obtained\\nfrom two earthenware vessels that\\nwere reconstructed from fragments.\\nThe kotyle is a day's corn ration\\nfor one man.\"}},{\"line\":\"xestes = 2 greekkotyle\",\"info\":{\"headingsIndex\":[49,3,1],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\",\"49.3.1. Greek capacity measure\"],\"comment\":\"This approximate value is obtained\\nfrom two earthenware vessels that\\nwere reconstructed from fragments.\\nThe kotyle is a day's corn ration\\nfor one man.\"}},{\"line\":\"khous = 12 greekkotyle\",\"info\":{\"headingsIndex\":[49,3,1],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\",\"49.3.1. Greek capacity measure\"],\"comment\":\"This approximate value is obtained\\nfrom two earthenware vessels that\\nwere reconstructed from fragments.\\nThe kotyle is a day's corn ration\\nfor one man.\"}},{\"line\":\"metretes = 12 khous\",\"info\":{\"headingsIndex\":[49,3,1],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\",\"49.3.1. Greek capacity measure\"],\"comment\":\"This approximate value is obtained\\nfrom two earthenware vessels that\\nwere reconstructed from fragments.\\nThe kotyle is a day's corn ration\\nfor one man.\"}},{\"line\":\"choinix = 4 greekkotyle\",\"info\":{\"headingsIndex\":[49,3,1],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\",\"49.3.1. Greek capacity measure\"],\"comment\":\"This approximate value is obtained\\nfrom two earthenware vessels that\\nwere reconstructed from fragments.\\nThe kotyle is a day's corn ration\\nfor one man.\"}},{\"line\":\"hekteos = 8 choinix\",\"info\":{\"headingsIndex\":[49,3,1],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\",\"49.3.1. Greek capacity measure\"],\"comment\":\"This approximate value is obtained\\nfrom two earthenware vessels that\\nwere reconstructed from fragments.\\nThe kotyle is a day's corn ration\\nfor one man.\"}},{\"line\":\"medimnos = 6 hekteos\",\"info\":{\"headingsIndex\":[49,3,1],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\",\"49.3.1. Greek capacity measure\"],\"comment\":\"This approximate value is obtained\\nfrom two earthenware vessels that\\nwere reconstructed from fragments.\\nThe kotyle is a day's corn ration\\nfor one man.\"}},{\"line\":\"aeginastater = 192 grain\",\"info\":{\"headingsIndex\":[49,3,2],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\",\"49.3.2. Greek weight. Two weight standards were used, an Aegina standard based\\non the Beqa shekel and an Athens (attic) standard.\"],\"comment\":\"Varies up to 199 grain\"}},{\"line\":\"aeginadrachmae = 1|2 aeginastater\",\"info\":{\"headingsIndex\":[49,3,2],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\",\"49.3.2. Greek weight. Two weight standards were used, an Aegina standard based\\non the Beqa shekel and an Athens (attic) standard.\"],\"comment\":\"\"}},{\"line\":\"aeginaobol = 1|6 aeginadrachmae\",\"info\":{\"headingsIndex\":[49,3,2],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\",\"49.3.2. Greek weight. Two weight standards were used, an Aegina standard based\\non the Beqa shekel and an Athens (attic) standard.\"],\"comment\":\"\"}},{\"line\":\"aeginamina = 50 aeginastaters\",\"info\":{\"headingsIndex\":[49,3,2],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\",\"49.3.2. Greek weight. Two weight standards were used, an Aegina standard based\\non the Beqa shekel and an Athens (attic) standard.\"],\"comment\":\"\"}},{\"line\":\"aeginatalent = 60 aeginamina\",\"info\":{\"headingsIndex\":[49,3,2],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\",\"49.3.2. Greek weight. Two weight standards were used, an Aegina standard based\\non the Beqa shekel and an Athens (attic) standard.\"],\"comment\":\"Supposedly the mass of a cubic foot\\nof water (whichever foot was in use)\"}},{\"line\":\"atticstater = 135 grain\",\"info\":{\"headingsIndex\":[49,3,2],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\",\"49.3.2. Greek weight. Two weight standards were used, an Aegina standard based\\non the Beqa shekel and an Athens (attic) standard.\"],\"comment\":\"Varies 134-138 grain\"}},{\"line\":\"atticdrachmae = 1|2 atticstater\",\"info\":{\"headingsIndex\":[49,3,2],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\",\"49.3.2. Greek weight. Two weight standards were used, an Aegina standard based\\non the Beqa shekel and an Athens (attic) standard.\"],\"comment\":\"\"}},{\"line\":\"atticobol = 1|6 atticdrachmae\",\"info\":{\"headingsIndex\":[49,3,2],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\",\"49.3.2. Greek weight. Two weight standards were used, an Aegina standard based\\non the Beqa shekel and an Athens (attic) standard.\"],\"comment\":\"\"}},{\"line\":\"atticmina = 50 atticstaters\",\"info\":{\"headingsIndex\":[49,3,2],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\",\"49.3.2. Greek weight. Two weight standards were used, an Aegina standard based\\non the Beqa shekel and an Athens (attic) standard.\"],\"comment\":\"\"}},{\"line\":\"attictalent = 60 atticmina\",\"info\":{\"headingsIndex\":[49,3,2],\"headingLevel\":3,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.3. Greek length measures\",\"49.3.2. Greek weight. Two weight standards were used, an Aegina standard based\\non the Beqa shekel and an Athens (attic) standard.\"],\"comment\":\"Supposedly the mass of a cubic foot\\nof water (whichever foot was in use)\"}},{\"line\":\"northerncubit = 26.6 in\",\"info\":{\"headingsIndex\":[49,4],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.4. \\\"Northern\\\" cubit and foot. This was used by the pre-Aryan civilization in\\nthe Indus valley. It was used in Mesopotamia, Egypt, North Africa, China,\\ncentral and Western Europe until modern times when it was displaced by\\nthe metric system.\"],\"comment\":\"plus/minus .2 in\"}},{\"line\":\"northernfoot = 1|2 northerncubit\",\"info\":{\"headingsIndex\":[49,4],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.4. \\\"Northern\\\" cubit and foot. This was used by the pre-Aryan civilization in\\nthe Indus valley. It was used in Mesopotamia, Egypt, North Africa, China,\\ncentral and Western Europe until modern times when it was displaced by\\nthe metric system.\"],\"comment\":\"\"}},{\"line\":\"sumeriancubit = 495 mm\",\"info\":{\"headingsIndex\":[49,4],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.4. \\\"Northern\\\" cubit and foot. This was used by the pre-Aryan civilization in\\nthe Indus valley. It was used in Mesopotamia, Egypt, North Africa, China,\\ncentral and Western Europe until modern times when it was displaced by\\nthe metric system.\"],\"comment\":\"\"}},{\"line\":\"kus = sumeriancubit\",\"info\":{\"headingsIndex\":[49,4],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.4. \\\"Northern\\\" cubit and foot. This was used by the pre-Aryan civilization in\\nthe Indus valley. It was used in Mesopotamia, Egypt, North Africa, China,\\ncentral and Western Europe until modern times when it was displaced by\\nthe metric system.\"],\"comment\":\"\"}},{\"line\":\"sumerianfoot = 2|3 sumeriancubit\",\"info\":{\"headingsIndex\":[49,4],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.4. \\\"Northern\\\" cubit and foot. This was used by the pre-Aryan civilization in\\nthe Indus valley. It was used in Mesopotamia, Egypt, North Africa, China,\\ncentral and Western Europe until modern times when it was displaced by\\nthe metric system.\"],\"comment\":\"\"}},{\"line\":\"assyriancubit = 21.6 in\",\"info\":{\"headingsIndex\":[49,4],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.4. \\\"Northern\\\" cubit and foot. This was used by the pre-Aryan civilization in\\nthe Indus valley. It was used in Mesopotamia, Egypt, North Africa, China,\\ncentral and Western Europe until modern times when it was displaced by\\nthe metric system.\"],\"comment\":\"\"}},{\"line\":\"assyrianfoot = 1|2 assyriancubit\",\"info\":{\"headingsIndex\":[49,4],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.4. \\\"Northern\\\" cubit and foot. This was used by the pre-Aryan civilization in\\nthe Indus valley. It was used in Mesopotamia, Egypt, North Africa, China,\\ncentral and Western Europe until modern times when it was displaced by\\nthe metric system.\"],\"comment\":\"\"}},{\"line\":\"assyrianpalm = 1|3 assyrianfoot\",\"info\":{\"headingsIndex\":[49,4],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.4. \\\"Northern\\\" cubit and foot. This was used by the pre-Aryan civilization in\\nthe Indus valley. It was used in Mesopotamia, Egypt, North Africa, China,\\ncentral and Western Europe until modern times when it was displaced by\\nthe metric system.\"],\"comment\":\"\"}},{\"line\":\"assyriansusi = 1|20 assyrianpalm\",\"info\":{\"headingsIndex\":[49,4],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.4. \\\"Northern\\\" cubit and foot. This was used by the pre-Aryan civilization in\\nthe Indus valley. It was used in Mesopotamia, Egypt, North Africa, China,\\ncentral and Western Europe until modern times when it was displaced by\\nthe metric system.\"],\"comment\":\"\"}},{\"line\":\"susi = assyriansusi\",\"info\":{\"headingsIndex\":[49,4],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.4. \\\"Northern\\\" cubit and foot. This was used by the pre-Aryan civilization in\\nthe Indus valley. It was used in Mesopotamia, Egypt, North Africa, China,\\ncentral and Western Europe until modern times when it was displaced by\\nthe metric system.\"],\"comment\":\"\"}},{\"line\":\"persianroyalcubit = 7 assyrianpalm\",\"info\":{\"headingsIndex\":[49,4],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.4. \\\"Northern\\\" cubit and foot. This was used by the pre-Aryan civilization in\\nthe Indus valley. It was used in Mesopotamia, Egypt, North Africa, China,\\ncentral and Western Europe until modern times when it was displaced by\\nthe metric system.\"],\"comment\":\"\"}},{\"line\":\"hashimicubit = 25.56 in\",\"info\":{\"headingsIndex\":[49,5],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"Standard of linear measure used\\nin Persian dominions of the Arabic\\nempire 7-8th cent.  Is equal to two\\nFrench feet.\"}},{\"line\":\"blackcubit = 21.28 in\",\"info\":{\"headingsIndex\":[49,5],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"\"}},{\"line\":\"arabicfeet = 1|2 blackcubit\",\"info\":{\"headingsIndex\":[49,5],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"\"}},{\"line\":\"arabicfoot = arabicfeet\",\"info\":{\"headingsIndex\":[49,5],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"\"}},{\"line\":\"arabicinch = 1|12 arabicfoot\",\"info\":{\"headingsIndex\":[49,5],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"\"}},{\"line\":\"arabicmile = 4000 blackcubit\",\"info\":{\"headingsIndex\":[49,5],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"\"}},{\"line\":\"silverdirhem = 45 grain\",\"info\":{\"headingsIndex\":[49,5],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"The weights were derived from these two\\nunits with two identically named systems\\nused for silver and used for trade purposes\"}},{\"line\":\"tradedirhem = 48 grain\",\"info\":{\"headingsIndex\":[49,5],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"The weights were derived from these two\\nunits with two identically named systems\\nused for silver and used for trade purposes\"}},{\"line\":\"silverkirat = 1|16 silverdirhem\",\"info\":{\"headingsIndex\":[49,5],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"\"}},{\"line\":\"silverwukiyeh = 10 silverdirhem\",\"info\":{\"headingsIndex\":[49,5],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"\"}},{\"line\":\"silverrotl = 12 silverwukiyeh\",\"info\":{\"headingsIndex\":[49,5],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"\"}},{\"line\":\"arabicsilverpound = silverrotl\",\"info\":{\"headingsIndex\":[49,5],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"\"}},{\"line\":\"tradekirat = 1|16 tradedirhem\",\"info\":{\"headingsIndex\":[49,5],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"\"}},{\"line\":\"tradewukiyeh = 10 tradedirhem\",\"info\":{\"headingsIndex\":[49,5],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"\"}},{\"line\":\"traderotl = 12 tradewukiyeh\",\"info\":{\"headingsIndex\":[49,5],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"\"}},{\"line\":\"arabictradepound = traderotl\",\"info\":{\"headingsIndex\":[49,5],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.5. Arabic measures. The arabic standards were meticulously kept. Glass weights\\naccurate to .2 grains were made during AD 714-900.\"],\"comment\":\"\"}},{\"line\":\"parasang = 3.5 mile\",\"info\":{\"headingsIndex\":[49,6],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.6. Miscellaneous ancient units\"],\"comment\":\"Persian unit of length usually thought\\nto be between 3 and 3.5 miles\"}},{\"line\":\"biblicalcubit = 21.8 in\",\"info\":{\"headingsIndex\":[49,6],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.6. Miscellaneous ancient units\"],\"comment\":\"\"}},{\"line\":\"hebrewcubit = 17.58 in\",\"info\":{\"headingsIndex\":[49,6],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.6. Miscellaneous ancient units\"],\"comment\":\"\"}},{\"line\":\"li = 10|27.8 mile\",\"info\":{\"headingsIndex\":[49,6],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.6. Miscellaneous ancient units\"],\"comment\":\"Chinese unit of length\\n100 li is considered a day's march\"}},{\"line\":\"liang = 11|3 oz\",\"info\":{\"headingsIndex\":[49,6],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.6. Miscellaneous ancient units\"],\"comment\":\"Chinese weight unit\"}},{\"line\":\"timepoint = 1|5 hour\",\"info\":{\"headingsIndex\":[49,7],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.7. Medieval time units. According to the OED, these appear in Du Cange\\nby Papias.\"],\"comment\":\"also given as 1|4\"}},{\"line\":\"timeminute = 1|10 hour\",\"info\":{\"headingsIndex\":[49,7],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.7. Medieval time units. According to the OED, these appear in Du Cange\\nby Papias.\"],\"comment\":\"\"}},{\"line\":\"timeostent = 1|60 hour\",\"info\":{\"headingsIndex\":[49,7],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.7. Medieval time units. According to the OED, these appear in Du Cange\\nby Papias.\"],\"comment\":\"\"}},{\"line\":\"timeounce = 1|8 timeostent\",\"info\":{\"headingsIndex\":[49,7],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.7. Medieval time units. According to the OED, these appear in Du Cange\\nby Papias.\"],\"comment\":\"\"}},{\"line\":\"timeatom = 1|47 timeounce\",\"info\":{\"headingsIndex\":[49,7],\"headingLevel\":2,\"headings\":[\"49. Ancient history units: There tends to be uncertainty in the definitions\\nof the units in this section\\nThese units are from [11]\",\"49.7. Medieval time units. According to the OED, these appear in Du Cange\\nby Papias.\"],\"comment\":\"\"}},{\"line\":\"mite = 1|20 grain\",\"info\":{\"headingsIndex\":[50],\"headingLevel\":1,\"headings\":[\"50. Given in [15], these subdivisions of the grain were supposedly used\\nby jewelers. The mite may have been used but the blanc could not\\nhave been accurately measured.\"],\"comment\":\"\"}},{\"line\":\"droit = 1|24 mite\",\"info\":{\"headingsIndex\":[50],\"headingLevel\":1,\"headings\":[\"50. Given in [15], these subdivisions of the grain were supposedly used\\nby jewelers. The mite may have been used but the blanc could not\\nhave been accurately measured.\"],\"comment\":\"\"}},{\"line\":\"periot = 1|20 droit\",\"info\":{\"headingsIndex\":[50],\"headingLevel\":1,\"headings\":[\"50. Given in [15], these subdivisions of the grain were supposedly used\\nby jewelers. The mite may have been used but the blanc could not\\nhave been accurately measured.\"],\"comment\":\"\"}},{\"line\":\"blanc = 1|24 periot\",\"info\":{\"headingsIndex\":[50],\"headingLevel\":1,\"headings\":[\"50. Given in [15], these subdivisions of the grain were supposedly used\\nby jewelers. The mite may have been used but the blanc could not\\nhave been accurately measured.\"],\"comment\":\"\"}},{\"line\":\"hundredweight = ushundredweight\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"ton = uston\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"scruple = apscruple\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"fluidounce = usfluidounce\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"gallon = usgallon\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"bushel = usbushel\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"quarter = quarterweight\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"cup = uscup\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"tablespoon = ustablespoon\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"teaspoon = usteaspoon\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"dollar = US$\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"cent = $ 0.01\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"penny = cent\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"minim = minimvolume\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"pony = ponyvolume\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"grand = usgrand\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"firkin = usfirkin\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"hogshead = ushogshead\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"⅛_ = 1|8\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"¼_ = 1|4\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"⅜_ = 3|8\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"½_ = 1|2\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"⅝_ = 5|8\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"¾_ = 3|4\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"⅞_ = 7|8\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"⅙_ = 1|6\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"⅓_ = 1|3\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"⅔_ = 2|3\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"⅚_ = 5|6\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"⅕_ = 1|5\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"⅖_ = 2|5\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"⅗_ = 3|5\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"⅘_ = 4|5\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"U+2150-               1|7  For some reason these characters are getting\\nU+2151-               1|9  flagged as invalid UTF8.\\nU+2152-               1|10\"}},{\"line\":\"ℯ = exp(1)\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"U+212F, base of natural log\"}},{\"line\":\"µ_ = micro\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"micro sign U+00B5\\nsmall mu U+03BC\"}},{\"line\":\"μ_ = micro\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"micro sign U+00B5\\nsmall mu U+03BC\"}},{\"line\":\"ångström = angstrom\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"angstrom symbol U+212B\\nA with ring U+00C5\"}},{\"line\":\"Å = angstrom\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"angstrom symbol U+212B\\nA with ring U+00C5\"}},{\"line\":\"Å = angstrom\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"angstrom symbol U+212B\\nA with ring U+00C5\"}},{\"line\":\"röntgen = roentgen\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"°C = degC\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"°F = degF\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"°K = K\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"°K is incorrect notation\"}},{\"line\":\"°R = degR\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"° = degree\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"℃ = degC\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"℉ = degF\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"K = K\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"Kelvin symbol, U+212A\"}},{\"line\":\"ℓ = liter\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"unofficial abbreviation used in some places\"}},{\"line\":\"¢ = cent\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"£ = britainpound\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"¥ = japanyen\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"€ = euro\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"₩ = southkoreawon\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"₪ = israelnewshekel\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"₤ = lira\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"₨ = rupee\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"Ω = ohm\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"Ohm symbol U+2126\\nGreek capital omega U+03A9\"}},{\"line\":\"Ω = ohm\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"Ohm symbol U+2126\\nGreek capital omega U+03A9\"}},{\"line\":\"℧ = mho\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"ʒ = dram\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"U+0292\"}},{\"line\":\"℈ = scruple\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"℥ = ounce\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"℔ = lb\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"ℎ = h\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"ℏ = hbar\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"‰ = 1|1000\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"‱ = 1|10000\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"\"}},{\"line\":\"′ = '\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"U+2032\"}},{\"line\":\"″ = \\\"\",\"info\":{\"headingsIndex\":[51],\"headingLevel\":1,\"headings\":[\"51. Localization\"],\"comment\":\"U+2033\"}},{\"line\":\"㍱ = hPa\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㍲ = da\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㍳ = au\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㍴ = bar\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㍶ = pc\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"㍷                      dm      invalid on Mac\\n㍸                      dm^2    invalid on Mac\\n㍹                      dm^3    invalid on Mac\"}},{\"line\":\"㎀ = pA\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎁ = nA\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎂ = µA\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎃ = mA\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎄ = kA\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎅ = kB\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎆ = MB\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎇ = GB\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎈ = cal\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎉ = kcal\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎊ = pF\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎋ = nF\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎌ = µF\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎍ = µg\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎎ = mg\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎏ = kg\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎐ = Hz\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎑ = kHz\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎒ = MHz\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎓ = GHz\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎔ = THz\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎕ = µL\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎖ = mL\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎗ = dL\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎘ = kL\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎙ = fm\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎚ = nm\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎛ = µm\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎜ = mm\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎝ = cm\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎞ = km\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎟ = mm^2\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎠ = cm^2\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎡ = m^2\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎢ = km^2\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎣ = mm^3\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎤ = cm^3\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎥ = m^3\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎦ = km^3\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎧ = m/s\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎨ = m/s^2\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎩ = Pa\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎪ = kPa\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎫ = MPa\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎬ = GPa\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎭ = rad\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎮ = rad/s\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎯ = rad/s^2\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎰ = ps\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎱ = ns\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎲ = µs\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎳ = ms\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎴ = pV\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎵ = nV\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎶ = µV\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎷ = mV\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎸ = kV\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎹ = MV\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎺ = pW\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎻ = nW\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎼ = µW\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎽ = mW\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎾ = kW\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㎿ = MW\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏀ = kΩ\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏁ = MΩ\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏃ = Bq\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏄ = cc\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏅ = cd\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏆ = C/kg\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏈ = dB\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏉ = Gy\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏊ = ha\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"㏋  HP??\"}},{\"line\":\"㏌ = in\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏏ = kt\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏐ = lm\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏓ = lx\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏔ = mb\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏕ = mil\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏖ = mol\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏗ = pH\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏙ = ppm\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏛ = sr\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏜ = Sv\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"\"}},{\"line\":\"㏝ = Wb\",\"info\":{\"headingsIndex\":[52],\"headingLevel\":1,\"headings\":[\"52. Square unicode symbols starting at U+3371\"],\"comment\":\"㏞                      V/m     Invalid on Mac\\n㏟                      A/m     Invalid on Mac\\n㏿                      gal     Invalid on Mac\"}}]");

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = addEventListener;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _EventObject = __webpack_require__(90);

var _EventObject2 = _interopRequireDefault(_EventObject);

function addEventListener(target, eventType, callback, option) {
  function wrapCallback(e) {
    var ne = new _EventObject2['default'](e);
    callback.call(target, ne);
  }

  if (target.addEventListener) {
    var _ret = (function () {
      var useCapture = false;
      if (typeof option === 'object') {
        useCapture = option.capture || false;
      } else if (typeof option === 'boolean') {
        useCapture = option;
      }

      target.addEventListener(eventType, wrapCallback, option || false);

      return {
        v: {
          remove: function remove() {
            target.removeEventListener(eventType, wrapCallback, useCapture);
          }
        }
      };
    })();

    if (typeof _ret === 'object') return _ret.v;
  } else if (target.attachEvent) {
    target.attachEvent('on' + eventType, wrapCallback);
    return {
      remove: function remove() {
        target.detachEvent('on' + eventType, wrapCallback);
      }
    };
  }
}

module.exports = exports['default'];

/***/ }),
/* 80 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/**
 * A collection of shims that provide minimal functionality of the ES6 collections.
 *
 * These implementations are not meant to be used outside of the ResizeObserver
 * modules as they cover only a limited range of use cases.
 */
/* eslint-disable require-jsdoc, valid-jsdoc */
var MapShim = (function () {
    if (typeof Map !== 'undefined') {
        return Map;
    }
    /**
     * Returns index in provided array that matches the specified key.
     *
     * @param {Array<Array>} arr
     * @param {*} key
     * @returns {number}
     */
    function getIndex(arr, key) {
        var result = -1;
        arr.some(function (entry, index) {
            if (entry[0] === key) {
                result = index;
                return true;
            }
            return false;
        });
        return result;
    }
    return /** @class */ (function () {
        function class_1() {
            this.__entries__ = [];
        }
        Object.defineProperty(class_1.prototype, "size", {
            /**
             * @returns {boolean}
             */
            get: function () {
                return this.__entries__.length;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {*} key
         * @returns {*}
         */
        class_1.prototype.get = function (key) {
            var index = getIndex(this.__entries__, key);
            var entry = this.__entries__[index];
            return entry && entry[1];
        };
        /**
         * @param {*} key
         * @param {*} value
         * @returns {void}
         */
        class_1.prototype.set = function (key, value) {
            var index = getIndex(this.__entries__, key);
            if (~index) {
                this.__entries__[index][1] = value;
            }
            else {
                this.__entries__.push([key, value]);
            }
        };
        /**
         * @param {*} key
         * @returns {void}
         */
        class_1.prototype.delete = function (key) {
            var entries = this.__entries__;
            var index = getIndex(entries, key);
            if (~index) {
                entries.splice(index, 1);
            }
        };
        /**
         * @param {*} key
         * @returns {void}
         */
        class_1.prototype.has = function (key) {
            return !!~getIndex(this.__entries__, key);
        };
        /**
         * @returns {void}
         */
        class_1.prototype.clear = function () {
            this.__entries__.splice(0);
        };
        /**
         * @param {Function} callback
         * @param {*} [ctx=null]
         * @returns {void}
         */
        class_1.prototype.forEach = function (callback, ctx) {
            if (ctx === void 0) { ctx = null; }
            for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
                var entry = _a[_i];
                callback.call(ctx, entry[1], entry[0]);
            }
        };
        return class_1;
    }());
})();

/**
 * Detects whether window and document objects are available in current environment.
 */
var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;

// Returns global object of a current environment.
var global$1 = (function () {
    if (typeof global !== 'undefined' && global.Math === Math) {
        return global;
    }
    if (typeof self !== 'undefined' && self.Math === Math) {
        return self;
    }
    if (typeof window !== 'undefined' && window.Math === Math) {
        return window;
    }
    // eslint-disable-next-line no-new-func
    return Function('return this')();
})();

/**
 * A shim for the requestAnimationFrame which falls back to the setTimeout if
 * first one is not supported.
 *
 * @returns {number} Requests' identifier.
 */
var requestAnimationFrame$1 = (function () {
    if (typeof requestAnimationFrame === 'function') {
        // It's required to use a bounded function because IE sometimes throws
        // an "Invalid calling object" error if rAF is invoked without the global
        // object on the left hand side.
        return requestAnimationFrame.bind(global$1);
    }
    return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };
})();

// Defines minimum timeout before adding a trailing call.
var trailingTimeout = 2;
/**
 * Creates a wrapper function which ensures that provided callback will be
 * invoked only once during the specified delay period.
 *
 * @param {Function} callback - Function to be invoked after the delay period.
 * @param {number} delay - Delay after which to invoke callback.
 * @returns {Function}
 */
function throttle (callback, delay) {
    var leadingCall = false, trailingCall = false, lastCallTime = 0;
    /**
     * Invokes the original callback function and schedules new invocation if
     * the "proxy" was called during current request.
     *
     * @returns {void}
     */
    function resolvePending() {
        if (leadingCall) {
            leadingCall = false;
            callback();
        }
        if (trailingCall) {
            proxy();
        }
    }
    /**
     * Callback invoked after the specified delay. It will further postpone
     * invocation of the original function delegating it to the
     * requestAnimationFrame.
     *
     * @returns {void}
     */
    function timeoutCallback() {
        requestAnimationFrame$1(resolvePending);
    }
    /**
     * Schedules invocation of the original function.
     *
     * @returns {void}
     */
    function proxy() {
        var timeStamp = Date.now();
        if (leadingCall) {
            // Reject immediately following calls.
            if (timeStamp - lastCallTime < trailingTimeout) {
                return;
            }
            // Schedule new call to be in invoked when the pending one is resolved.
            // This is important for "transitions" which never actually start
            // immediately so there is a chance that we might miss one if change
            // happens amids the pending invocation.
            trailingCall = true;
        }
        else {
            leadingCall = true;
            trailingCall = false;
            setTimeout(timeoutCallback, delay);
        }
        lastCallTime = timeStamp;
    }
    return proxy;
}

// Minimum delay before invoking the update of observers.
var REFRESH_DELAY = 20;
// A list of substrings of CSS properties used to find transition events that
// might affect dimensions of observed elements.
var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];
// Check if MutationObserver is available.
var mutationObserverSupported = typeof MutationObserver !== 'undefined';
/**
 * Singleton controller class which handles updates of ResizeObserver instances.
 */
var ResizeObserverController = /** @class */ (function () {
    /**
     * Creates a new instance of ResizeObserverController.
     *
     * @private
     */
    function ResizeObserverController() {
        /**
         * Indicates whether DOM listeners have been added.
         *
         * @private {boolean}
         */
        this.connected_ = false;
        /**
         * Tells that controller has subscribed for Mutation Events.
         *
         * @private {boolean}
         */
        this.mutationEventsAdded_ = false;
        /**
         * Keeps reference to the instance of MutationObserver.
         *
         * @private {MutationObserver}
         */
        this.mutationsObserver_ = null;
        /**
         * A list of connected observers.
         *
         * @private {Array<ResizeObserverSPI>}
         */
        this.observers_ = [];
        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
    }
    /**
     * Adds observer to observers list.
     *
     * @param {ResizeObserverSPI} observer - Observer to be added.
     * @returns {void}
     */
    ResizeObserverController.prototype.addObserver = function (observer) {
        if (!~this.observers_.indexOf(observer)) {
            this.observers_.push(observer);
        }
        // Add listeners if they haven't been added yet.
        if (!this.connected_) {
            this.connect_();
        }
    };
    /**
     * Removes observer from observers list.
     *
     * @param {ResizeObserverSPI} observer - Observer to be removed.
     * @returns {void}
     */
    ResizeObserverController.prototype.removeObserver = function (observer) {
        var observers = this.observers_;
        var index = observers.indexOf(observer);
        // Remove observer if it's present in registry.
        if (~index) {
            observers.splice(index, 1);
        }
        // Remove listeners if controller has no connected observers.
        if (!observers.length && this.connected_) {
            this.disconnect_();
        }
    };
    /**
     * Invokes the update of observers. It will continue running updates insofar
     * it detects changes.
     *
     * @returns {void}
     */
    ResizeObserverController.prototype.refresh = function () {
        var changesDetected = this.updateObservers_();
        // Continue running updates if changes have been detected as there might
        // be future ones caused by CSS transitions.
        if (changesDetected) {
            this.refresh();
        }
    };
    /**
     * Updates every observer from observers list and notifies them of queued
     * entries.
     *
     * @private
     * @returns {boolean} Returns "true" if any observer has detected changes in
     *      dimensions of it's elements.
     */
    ResizeObserverController.prototype.updateObservers_ = function () {
        // Collect observers that have active observations.
        var activeObservers = this.observers_.filter(function (observer) {
            return observer.gatherActive(), observer.hasActive();
        });
        // Deliver notifications in a separate cycle in order to avoid any
        // collisions between observers, e.g. when multiple instances of
        // ResizeObserver are tracking the same element and the callback of one
        // of them changes content dimensions of the observed target. Sometimes
        // this may result in notifications being blocked for the rest of observers.
        activeObservers.forEach(function (observer) { return observer.broadcastActive(); });
        return activeObservers.length > 0;
    };
    /**
     * Initializes DOM listeners.
     *
     * @private
     * @returns {void}
     */
    ResizeObserverController.prototype.connect_ = function () {
        // Do nothing if running in a non-browser environment or if listeners
        // have been already added.
        if (!isBrowser || this.connected_) {
            return;
        }
        // Subscription to the "Transitionend" event is used as a workaround for
        // delayed transitions. This way it's possible to capture at least the
        // final state of an element.
        document.addEventListener('transitionend', this.onTransitionEnd_);
        window.addEventListener('resize', this.refresh);
        if (mutationObserverSupported) {
            this.mutationsObserver_ = new MutationObserver(this.refresh);
            this.mutationsObserver_.observe(document, {
                attributes: true,
                childList: true,
                characterData: true,
                subtree: true
            });
        }
        else {
            document.addEventListener('DOMSubtreeModified', this.refresh);
            this.mutationEventsAdded_ = true;
        }
        this.connected_ = true;
    };
    /**
     * Removes DOM listeners.
     *
     * @private
     * @returns {void}
     */
    ResizeObserverController.prototype.disconnect_ = function () {
        // Do nothing if running in a non-browser environment or if listeners
        // have been already removed.
        if (!isBrowser || !this.connected_) {
            return;
        }
        document.removeEventListener('transitionend', this.onTransitionEnd_);
        window.removeEventListener('resize', this.refresh);
        if (this.mutationsObserver_) {
            this.mutationsObserver_.disconnect();
        }
        if (this.mutationEventsAdded_) {
            document.removeEventListener('DOMSubtreeModified', this.refresh);
        }
        this.mutationsObserver_ = null;
        this.mutationEventsAdded_ = false;
        this.connected_ = false;
    };
    /**
     * "Transitionend" event handler.
     *
     * @private
     * @param {TransitionEvent} event
     * @returns {void}
     */
    ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {
        var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;
        // Detect whether transition may affect dimensions of an element.
        var isReflowProperty = transitionKeys.some(function (key) {
            return !!~propertyName.indexOf(key);
        });
        if (isReflowProperty) {
            this.refresh();
        }
    };
    /**
     * Returns instance of the ResizeObserverController.
     *
     * @returns {ResizeObserverController}
     */
    ResizeObserverController.getInstance = function () {
        if (!this.instance_) {
            this.instance_ = new ResizeObserverController();
        }
        return this.instance_;
    };
    /**
     * Holds reference to the controller's instance.
     *
     * @private {ResizeObserverController}
     */
    ResizeObserverController.instance_ = null;
    return ResizeObserverController;
}());

/**
 * Defines non-writable/enumerable properties of the provided target object.
 *
 * @param {Object} target - Object for which to define properties.
 * @param {Object} props - Properties to be defined.
 * @returns {Object} Target object.
 */
var defineConfigurable = (function (target, props) {
    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
        var key = _a[_i];
        Object.defineProperty(target, key, {
            value: props[key],
            enumerable: false,
            writable: false,
            configurable: true
        });
    }
    return target;
});

/**
 * Returns the global object associated with provided element.
 *
 * @param {Object} target
 * @returns {Object}
 */
var getWindowOf = (function (target) {
    // Assume that the element is an instance of Node, which means that it
    // has the "ownerDocument" property from which we can retrieve a
    // corresponding global object.
    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
    // Return the local global object if it's not possible extract one from
    // provided element.
    return ownerGlobal || global$1;
});

// Placeholder of an empty content rectangle.
var emptyRect = createRectInit(0, 0, 0, 0);
/**
 * Converts provided string to a number.
 *
 * @param {number|string} value
 * @returns {number}
 */
function toFloat(value) {
    return parseFloat(value) || 0;
}
/**
 * Extracts borders size from provided styles.
 *
 * @param {CSSStyleDeclaration} styles
 * @param {...string} positions - Borders positions (top, right, ...)
 * @returns {number}
 */
function getBordersSize(styles) {
    var positions = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        positions[_i - 1] = arguments[_i];
    }
    return positions.reduce(function (size, position) {
        var value = styles['border-' + position + '-width'];
        return size + toFloat(value);
    }, 0);
}
/**
 * Extracts paddings sizes from provided styles.
 *
 * @param {CSSStyleDeclaration} styles
 * @returns {Object} Paddings box.
 */
function getPaddings(styles) {
    var positions = ['top', 'right', 'bottom', 'left'];
    var paddings = {};
    for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
        var position = positions_1[_i];
        var value = styles['padding-' + position];
        paddings[position] = toFloat(value);
    }
    return paddings;
}
/**
 * Calculates content rectangle of provided SVG element.
 *
 * @param {SVGGraphicsElement} target - Element content rectangle of which needs
 *      to be calculated.
 * @returns {DOMRectInit}
 */
function getSVGContentRect(target) {
    var bbox = target.getBBox();
    return createRectInit(0, 0, bbox.width, bbox.height);
}
/**
 * Calculates content rectangle of provided HTMLElement.
 *
 * @param {HTMLElement} target - Element for which to calculate the content rectangle.
 * @returns {DOMRectInit}
 */
function getHTMLElementContentRect(target) {
    // Client width & height properties can't be
    // used exclusively as they provide rounded values.
    var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
    // By this condition we can catch all non-replaced inline, hidden and
    // detached elements. Though elements with width & height properties less
    // than 0.5 will be discarded as well.
    //
    // Without it we would need to implement separate methods for each of
    // those cases and it's not possible to perform a precise and performance
    // effective test for hidden elements. E.g. even jQuery's ':visible' filter
    // gives wrong results for elements with width & height less than 0.5.
    if (!clientWidth && !clientHeight) {
        return emptyRect;
    }
    var styles = getWindowOf(target).getComputedStyle(target);
    var paddings = getPaddings(styles);
    var horizPad = paddings.left + paddings.right;
    var vertPad = paddings.top + paddings.bottom;
    // Computed styles of width & height are being used because they are the
    // only dimensions available to JS that contain non-rounded values. It could
    // be possible to utilize the getBoundingClientRect if only it's data wasn't
    // affected by CSS transformations let alone paddings, borders and scroll bars.
    var width = toFloat(styles.width), height = toFloat(styles.height);
    // Width & height include paddings and borders when the 'border-box' box
    // model is applied (except for IE).
    if (styles.boxSizing === 'border-box') {
        // Following conditions are required to handle Internet Explorer which
        // doesn't include paddings and borders to computed CSS dimensions.
        //
        // We can say that if CSS dimensions + paddings are equal to the "client"
        // properties then it's either IE, and thus we don't need to subtract
        // anything, or an element merely doesn't have paddings/borders styles.
        if (Math.round(width + horizPad) !== clientWidth) {
            width -= getBordersSize(styles, 'left', 'right') + horizPad;
        }
        if (Math.round(height + vertPad) !== clientHeight) {
            height -= getBordersSize(styles, 'top', 'bottom') + vertPad;
        }
    }
    // Following steps can't be applied to the document's root element as its
    // client[Width/Height] properties represent viewport area of the window.
    // Besides, it's as well not necessary as the <html> itself neither has
    // rendered scroll bars nor it can be clipped.
    if (!isDocumentElement(target)) {
        // In some browsers (only in Firefox, actually) CSS width & height
        // include scroll bars size which can be removed at this step as scroll
        // bars are the only difference between rounded dimensions + paddings
        // and "client" properties, though that is not always true in Chrome.
        var vertScrollbar = Math.round(width + horizPad) - clientWidth;
        var horizScrollbar = Math.round(height + vertPad) - clientHeight;
        // Chrome has a rather weird rounding of "client" properties.
        // E.g. for an element with content width of 314.2px it sometimes gives
        // the client width of 315px and for the width of 314.7px it may give
        // 314px. And it doesn't happen all the time. So just ignore this delta
        // as a non-relevant.
        if (Math.abs(vertScrollbar) !== 1) {
            width -= vertScrollbar;
        }
        if (Math.abs(horizScrollbar) !== 1) {
            height -= horizScrollbar;
        }
    }
    return createRectInit(paddings.left, paddings.top, width, height);
}
/**
 * Checks whether provided element is an instance of the SVGGraphicsElement.
 *
 * @param {Element} target - Element to be checked.
 * @returns {boolean}
 */
var isSVGGraphicsElement = (function () {
    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement
    // interface.
    if (typeof SVGGraphicsElement !== 'undefined') {
        return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };
    }
    // If it's so, then check that element is at least an instance of the
    // SVGElement and that it has the "getBBox" method.
    // eslint-disable-next-line no-extra-parens
    return function (target) { return (target instanceof getWindowOf(target).SVGElement &&
        typeof target.getBBox === 'function'); };
})();
/**
 * Checks whether provided element is a document element (<html>).
 *
 * @param {Element} target - Element to be checked.
 * @returns {boolean}
 */
function isDocumentElement(target) {
    return target === getWindowOf(target).document.documentElement;
}
/**
 * Calculates an appropriate content rectangle for provided html or svg element.
 *
 * @param {Element} target - Element content rectangle of which needs to be calculated.
 * @returns {DOMRectInit}
 */
function getContentRect(target) {
    if (!isBrowser) {
        return emptyRect;
    }
    if (isSVGGraphicsElement(target)) {
        return getSVGContentRect(target);
    }
    return getHTMLElementContentRect(target);
}
/**
 * Creates rectangle with an interface of the DOMRectReadOnly.
 * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
 *
 * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
 * @returns {DOMRectReadOnly}
 */
function createReadOnlyRect(_a) {
    var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
    // If DOMRectReadOnly is available use it as a prototype for the rectangle.
    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;
    var rect = Object.create(Constr.prototype);
    // Rectangle's properties are not writable and non-enumerable.
    defineConfigurable(rect, {
        x: x, y: y, width: width, height: height,
        top: y,
        right: x + width,
        bottom: height + y,
        left: x
    });
    return rect;
}
/**
 * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
 * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
 *
 * @param {number} x - X coordinate.
 * @param {number} y - Y coordinate.
 * @param {number} width - Rectangle's width.
 * @param {number} height - Rectangle's height.
 * @returns {DOMRectInit}
 */
function createRectInit(x, y, width, height) {
    return { x: x, y: y, width: width, height: height };
}

/**
 * Class that is responsible for computations of the content rectangle of
 * provided DOM element and for keeping track of it's changes.
 */
var ResizeObservation = /** @class */ (function () {
    /**
     * Creates an instance of ResizeObservation.
     *
     * @param {Element} target - Element to be observed.
     */
    function ResizeObservation(target) {
        /**
         * Broadcasted width of content rectangle.
         *
         * @type {number}
         */
        this.broadcastWidth = 0;
        /**
         * Broadcasted height of content rectangle.
         *
         * @type {number}
         */
        this.broadcastHeight = 0;
        /**
         * Reference to the last observed content rectangle.
         *
         * @private {DOMRectInit}
         */
        this.contentRect_ = createRectInit(0, 0, 0, 0);
        this.target = target;
    }
    /**
     * Updates content rectangle and tells whether it's width or height properties
     * have changed since the last broadcast.
     *
     * @returns {boolean}
     */
    ResizeObservation.prototype.isActive = function () {
        var rect = getContentRect(this.target);
        this.contentRect_ = rect;
        return (rect.width !== this.broadcastWidth ||
            rect.height !== this.broadcastHeight);
    };
    /**
     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
     * from the corresponding properties of the last observed content rectangle.
     *
     * @returns {DOMRectInit} Last observed content rectangle.
     */
    ResizeObservation.prototype.broadcastRect = function () {
        var rect = this.contentRect_;
        this.broadcastWidth = rect.width;
        this.broadcastHeight = rect.height;
        return rect;
    };
    return ResizeObservation;
}());

var ResizeObserverEntry = /** @class */ (function () {
    /**
     * Creates an instance of ResizeObserverEntry.
     *
     * @param {Element} target - Element that is being observed.
     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.
     */
    function ResizeObserverEntry(target, rectInit) {
        var contentRect = createReadOnlyRect(rectInit);
        // According to the specification following properties are not writable
        // and are also not enumerable in the native implementation.
        //
        // Property accessors are not being used as they'd require to define a
        // private WeakMap storage which may cause memory leaks in browsers that
        // don't support this type of collections.
        defineConfigurable(this, { target: target, contentRect: contentRect });
    }
    return ResizeObserverEntry;
}());

var ResizeObserverSPI = /** @class */ (function () {
    /**
     * Creates a new instance of ResizeObserver.
     *
     * @param {ResizeObserverCallback} callback - Callback function that is invoked
     *      when one of the observed elements changes it's content dimensions.
     * @param {ResizeObserverController} controller - Controller instance which
     *      is responsible for the updates of observer.
     * @param {ResizeObserver} callbackCtx - Reference to the public
     *      ResizeObserver instance which will be passed to callback function.
     */
    function ResizeObserverSPI(callback, controller, callbackCtx) {
        /**
         * Collection of resize observations that have detected changes in dimensions
         * of elements.
         *
         * @private {Array<ResizeObservation>}
         */
        this.activeObservations_ = [];
        /**
         * Registry of the ResizeObservation instances.
         *
         * @private {Map<Element, ResizeObservation>}
         */
        this.observations_ = new MapShim();
        if (typeof callback !== 'function') {
            throw new TypeError('The callback provided as parameter 1 is not a function.');
        }
        this.callback_ = callback;
        this.controller_ = controller;
        this.callbackCtx_ = callbackCtx;
    }
    /**
     * Starts observing provided element.
     *
     * @param {Element} target - Element to be observed.
     * @returns {void}
     */
    ResizeObserverSPI.prototype.observe = function (target) {
        if (!arguments.length) {
            throw new TypeError('1 argument required, but only 0 present.');
        }
        // Do nothing if current environment doesn't have the Element interface.
        if (typeof Element === 'undefined' || !(Element instanceof Object)) {
            return;
        }
        if (!(target instanceof getWindowOf(target).Element)) {
            throw new TypeError('parameter 1 is not of type "Element".');
        }
        var observations = this.observations_;
        // Do nothing if element is already being observed.
        if (observations.has(target)) {
            return;
        }
        observations.set(target, new ResizeObservation(target));
        this.controller_.addObserver(this);
        // Force the update of observations.
        this.controller_.refresh();
    };
    /**
     * Stops observing provided element.
     *
     * @param {Element} target - Element to stop observing.
     * @returns {void}
     */
    ResizeObserverSPI.prototype.unobserve = function (target) {
        if (!arguments.length) {
            throw new TypeError('1 argument required, but only 0 present.');
        }
        // Do nothing if current environment doesn't have the Element interface.
        if (typeof Element === 'undefined' || !(Element instanceof Object)) {
            return;
        }
        if (!(target instanceof getWindowOf(target).Element)) {
            throw new TypeError('parameter 1 is not of type "Element".');
        }
        var observations = this.observations_;
        // Do nothing if element is not being observed.
        if (!observations.has(target)) {
            return;
        }
        observations.delete(target);
        if (!observations.size) {
            this.controller_.removeObserver(this);
        }
    };
    /**
     * Stops observing all elements.
     *
     * @returns {void}
     */
    ResizeObserverSPI.prototype.disconnect = function () {
        this.clearActive();
        this.observations_.clear();
        this.controller_.removeObserver(this);
    };
    /**
     * Collects observation instances the associated element of which has changed
     * it's content rectangle.
     *
     * @returns {void}
     */
    ResizeObserverSPI.prototype.gatherActive = function () {
        var _this = this;
        this.clearActive();
        this.observations_.forEach(function (observation) {
            if (observation.isActive()) {
                _this.activeObservations_.push(observation);
            }
        });
    };
    /**
     * Invokes initial callback function with a list of ResizeObserverEntry
     * instances collected from active resize observations.
     *
     * @returns {void}
     */
    ResizeObserverSPI.prototype.broadcastActive = function () {
        // Do nothing if observer doesn't have active observations.
        if (!this.hasActive()) {
            return;
        }
        var ctx = this.callbackCtx_;
        // Create ResizeObserverEntry instance for every active observation.
        var entries = this.activeObservations_.map(function (observation) {
            return new ResizeObserverEntry(observation.target, observation.broadcastRect());
        });
        this.callback_.call(ctx, entries, ctx);
        this.clearActive();
    };
    /**
     * Clears the collection of active observations.
     *
     * @returns {void}
     */
    ResizeObserverSPI.prototype.clearActive = function () {
        this.activeObservations_.splice(0);
    };
    /**
     * Tells whether observer has active observations.
     *
     * @returns {boolean}
     */
    ResizeObserverSPI.prototype.hasActive = function () {
        return this.activeObservations_.length > 0;
    };
    return ResizeObserverSPI;
}());

// Registry of internal observers. If WeakMap is not available use current shim
// for the Map collection as it has all required methods and because WeakMap
// can't be fully polyfilled anyway.
var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();
/**
 * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation
 * exposing only those methods and properties that are defined in the spec.
 */
var ResizeObserver = /** @class */ (function () {
    /**
     * Creates a new instance of ResizeObserver.
     *
     * @param {ResizeObserverCallback} callback - Callback that is invoked when
     *      dimensions of the observed elements change.
     */
    function ResizeObserver(callback) {
        if (!(this instanceof ResizeObserver)) {
            throw new TypeError('Cannot call a class as a function.');
        }
        if (!arguments.length) {
            throw new TypeError('1 argument required, but only 0 present.');
        }
        var controller = ResizeObserverController.getInstance();
        var observer = new ResizeObserverSPI(callback, controller, this);
        observers.set(this, observer);
    }
    return ResizeObserver;
}());
// Expose public methods of ResizeObserver.
[
    'observe',
    'unobserve',
    'disconnect'
].forEach(function (method) {
    ResizeObserver.prototype[method] = function () {
        var _a;
        return (_a = observers.get(this))[method].apply(_a, arguments);
    };
});

var index = (function () {
    // Export existing implementation if available.
    if (typeof global$1.ResizeObserver !== 'undefined') {
        return global$1.ResizeObserver;
    }
    return ResizeObserver;
})();

/* harmony default export */ __webpack_exports__["a"] = (index);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(19)))

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports.default = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _defineProperty = __webpack_require__(66);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typeof2 = __webpack_require__(73);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
};

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _setPrototypeOf = __webpack_require__(127);

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _create = __webpack_require__(131);

var _create2 = _interopRequireDefault(_create);

var _typeof2 = __webpack_require__(73);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
  }

  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
};

/***/ }),
/* 85 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return internalFunctions; });
/* harmony import */ var _unitNumber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);
/* harmony import */ var _globalScope__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(10);


const internalFunctions = [
    { name: "sqrt", fn: num => num.pow(0.5) },
    {
        name: "ln",
        fn: num => {
            num.dimensions.assertEmpty("argument of ln()");
            return new _unitNumber__WEBPACK_IMPORTED_MODULE_0__[/* UnitNumber */ "b"](num.value.ln());
        },
    },
    {
        name: "delete",
        fn: num => {
            if (!num.id)
                throw Error("has no ID");
            return _globalScope__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].deleteUnit(num.id) ? _unitNumber__WEBPACK_IMPORTED_MODULE_0__[/* UnitNumber */ "b"].one : _unitNumber__WEBPACK_IMPORTED_MODULE_0__[/* UnitNumber */ "b"].zero;
        },
        hasSideEffects: true,
    },
    {
        name: "log2",
        fn: num => (num.dimensions.assertEmpty(), new _unitNumber__WEBPACK_IMPORTED_MODULE_0__[/* UnitNumber */ "b"](num.value.logarithm(2))),
    },
    {
        name: "exp",
        fn: num => (num.dimensions.assertEmpty(), new _unitNumber__WEBPACK_IMPORTED_MODULE_0__[/* UnitNumber */ "b"](num.value.exp())),
    },
    {
        name: "tan",
        fn: num => (num.dimensions.assertEmpty(),
            new _unitNumber__WEBPACK_IMPORTED_MODULE_0__[/* UnitNumber */ "b"](Math.tan(num.value.toNumber()))),
    },
    {
        name: "log",
        fn: num => (num.dimensions.assertEmpty(),
            new _unitNumber__WEBPACK_IMPORTED_MODULE_0__[/* UnitNumber */ "b"](num.value.logarithm(10))),
    },
];


/***/ }),
/* 86 */,
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = str => encodeURIComponent(str).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var token = '%[a-f0-9]{2}';
var singleMatcher = new RegExp(token, 'gi');
var multiMatcher = new RegExp('(' + token + ')+', 'gi');

function decodeComponents(components, split) {
	try {
		// Try to decode the entire string first
		return decodeURIComponent(components.join(''));
	} catch (err) {
		// Do nothing
	}

	if (components.length === 1) {
		return components;
	}

	split = split || 1;

	// Split the array in 2 parts
	var left = components.slice(0, split);
	var right = components.slice(split);

	return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
}

function decode(input) {
	try {
		return decodeURIComponent(input);
	} catch (err) {
		var tokens = input.match(singleMatcher);

		for (var i = 1; i < tokens.length; i++) {
			input = decodeComponents(tokens, i).join('');

			tokens = input.match(singleMatcher);
		}

		return input;
	}
}

function customDecodeURIComponent(input) {
	// Keep track of all the replacements and prefill the map with the `BOM`
	var replaceMap = {
		'%FE%FF': '\uFFFD\uFFFD',
		'%FF%FE': '\uFFFD\uFFFD'
	};

	var match = multiMatcher.exec(input);
	while (match) {
		try {
			// Decode as big chunks as possible
			replaceMap[match[0]] = decodeURIComponent(match[0]);
		} catch (err) {
			var result = decode(match[0]);

			if (result !== match[0]) {
				replaceMap[match[0]] = result;
			}
		}

		match = multiMatcher.exec(input);
	}

	// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else
	replaceMap['%C2'] = '\uFFFD';

	var entries = Object.keys(replaceMap);

	for (var i = 0; i < entries.length; i++) {
		// Replace all decoded components
		var key = entries[i];
		input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
	}

	return input;
}

module.exports = function (encodedURI) {
	if (typeof encodedURI !== 'string') {
		throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');
	}

	try {
		encodedURI = encodedURI.replace(/\+/g, ' ');

		// Try the built in decoder first
		return decodeURIComponent(encodedURI);
	} catch (err) {
		// Fallback to a more advanced decoder
		return customDecodeURIComponent(encodedURI);
	}
};


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = (string, separator) => {
	if (!(typeof string === 'string' && typeof separator === 'string')) {
		throw new TypeError('Expected the arguments to be of type `string`');
	}

	if (separator === '') {
		return [string];
	}

	const separatorIndex = string.indexOf(separator);

	if (separatorIndex === -1) {
		return [string];
	}

	return [
		string.slice(0, separatorIndex),
		string.slice(separatorIndex + separator.length)
	];
};


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @ignore
 * event object for dom
 * @author yiminghe@gmail.com
 */



Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _EventBaseObject = __webpack_require__(91);

var _EventBaseObject2 = _interopRequireDefault(_EventBaseObject);

var _objectAssign = __webpack_require__(15);

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var TRUE = true;
var FALSE = false;
var commonProps = ['altKey', 'bubbles', 'cancelable', 'ctrlKey', 'currentTarget', 'eventPhase', 'metaKey', 'shiftKey', 'target', 'timeStamp', 'view', 'type'];

function isNullOrUndefined(w) {
  return w === null || w === undefined;
}

var eventNormalizers = [{
  reg: /^key/,
  props: ['char', 'charCode', 'key', 'keyCode', 'which'],
  fix: function fix(event, nativeEvent) {
    if (isNullOrUndefined(event.which)) {
      event.which = !isNullOrUndefined(nativeEvent.charCode) ? nativeEvent.charCode : nativeEvent.keyCode;
    }

    // add metaKey to non-Mac browsers (use ctrl for PC 's and Meta for Macs)
    if (event.metaKey === undefined) {
      event.metaKey = event.ctrlKey;
    }
  }
}, {
  reg: /^touch/,
  props: ['touches', 'changedTouches', 'targetTouches']
}, {
  reg: /^hashchange$/,
  props: ['newURL', 'oldURL']
}, {
  reg: /^gesturechange$/i,
  props: ['rotation', 'scale']
}, {
  reg: /^(mousewheel|DOMMouseScroll)$/,
  props: [],
  fix: function fix(event, nativeEvent) {
    var deltaX = undefined;
    var deltaY = undefined;
    var delta = undefined;
    var wheelDelta = nativeEvent.wheelDelta;
    var axis = nativeEvent.axis;
    var wheelDeltaY = nativeEvent.wheelDeltaY;
    var wheelDeltaX = nativeEvent.wheelDeltaX;
    var detail = nativeEvent.detail;

    // ie/webkit
    if (wheelDelta) {
      delta = wheelDelta / 120;
    }

    // gecko
    if (detail) {
      // press control e.detail == 1 else e.detail == 3
      delta = 0 - (detail % 3 === 0 ? detail / 3 : detail);
    }

    // Gecko
    if (axis !== undefined) {
      if (axis === event.HORIZONTAL_AXIS) {
        deltaY = 0;
        deltaX = 0 - delta;
      } else if (axis === event.VERTICAL_AXIS) {
        deltaX = 0;
        deltaY = delta;
      }
    }

    // Webkit
    if (wheelDeltaY !== undefined) {
      deltaY = wheelDeltaY / 120;
    }
    if (wheelDeltaX !== undefined) {
      deltaX = -1 * wheelDeltaX / 120;
    }

    // 默认 deltaY (ie)
    if (!deltaX && !deltaY) {
      deltaY = delta;
    }

    if (deltaX !== undefined) {
      /**
       * deltaX of mousewheel event
       * @property deltaX
       * @member Event.DomEvent.Object
       */
      event.deltaX = deltaX;
    }

    if (deltaY !== undefined) {
      /**
       * deltaY of mousewheel event
       * @property deltaY
       * @member Event.DomEvent.Object
       */
      event.deltaY = deltaY;
    }

    if (delta !== undefined) {
      /**
       * delta of mousewheel event
       * @property delta
       * @member Event.DomEvent.Object
       */
      event.delta = delta;
    }
  }
}, {
  reg: /^mouse|contextmenu|click|mspointer|(^DOMMouseScroll$)/i,
  props: ['buttons', 'clientX', 'clientY', 'button', 'offsetX', 'relatedTarget', 'which', 'fromElement', 'toElement', 'offsetY', 'pageX', 'pageY', 'screenX', 'screenY'],
  fix: function fix(event, nativeEvent) {
    var eventDoc = undefined;
    var doc = undefined;
    var body = undefined;
    var target = event.target;
    var button = nativeEvent.button;

    // Calculate pageX/Y if missing and clientX/Y available
    if (target && isNullOrUndefined(event.pageX) && !isNullOrUndefined(nativeEvent.clientX)) {
      eventDoc = target.ownerDocument || document;
      doc = eventDoc.documentElement;
      body = eventDoc.body;
      event.pageX = nativeEvent.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
      event.pageY = nativeEvent.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
    }

    // which for click: 1 === left; 2 === middle; 3 === right
    // do not use button
    if (!event.which && button !== undefined) {
      if (button & 1) {
        event.which = 1;
      } else if (button & 2) {
        event.which = 3;
      } else if (button & 4) {
        event.which = 2;
      } else {
        event.which = 0;
      }
    }

    // add relatedTarget, if necessary
    if (!event.relatedTarget && event.fromElement) {
      event.relatedTarget = event.fromElement === target ? event.toElement : event.fromElement;
    }

    return event;
  }
}];

function retTrue() {
  return TRUE;
}

function retFalse() {
  return FALSE;
}

function DomEventObject(nativeEvent) {
  var type = nativeEvent.type;

  var isNative = typeof nativeEvent.stopPropagation === 'function' || typeof nativeEvent.cancelBubble === 'boolean';

  _EventBaseObject2['default'].call(this);

  this.nativeEvent = nativeEvent;

  // in case dom event has been mark as default prevented by lower dom node
  var isDefaultPrevented = retFalse;
  if ('defaultPrevented' in nativeEvent) {
    isDefaultPrevented = nativeEvent.defaultPrevented ? retTrue : retFalse;
  } else if ('getPreventDefault' in nativeEvent) {
    // https://bugzilla.mozilla.org/show_bug.cgi?id=691151
    isDefaultPrevented = nativeEvent.getPreventDefault() ? retTrue : retFalse;
  } else if ('returnValue' in nativeEvent) {
    isDefaultPrevented = nativeEvent.returnValue === FALSE ? retTrue : retFalse;
  }

  this.isDefaultPrevented = isDefaultPrevented;

  var fixFns = [];
  var fixFn = undefined;
  var l = undefined;
  var prop = undefined;
  var props = commonProps.concat();

  eventNormalizers.forEach(function (normalizer) {
    if (type.match(normalizer.reg)) {
      props = props.concat(normalizer.props);
      if (normalizer.fix) {
        fixFns.push(normalizer.fix);
      }
    }
  });

  l = props.length;

  // clone properties of the original event object
  while (l) {
    prop = props[--l];
    this[prop] = nativeEvent[prop];
  }

  // fix target property, if necessary
  if (!this.target && isNative) {
    this.target = nativeEvent.srcElement || document; // srcElement might not be defined either
  }

  // check if target is a text node (safari)
  if (this.target && this.target.nodeType === 3) {
    this.target = this.target.parentNode;
  }

  l = fixFns.length;

  while (l) {
    fixFn = fixFns[--l];
    fixFn(this, nativeEvent);
  }

  this.timeStamp = nativeEvent.timeStamp || Date.now();
}

var EventBaseObjectProto = _EventBaseObject2['default'].prototype;

(0, _objectAssign2['default'])(DomEventObject.prototype, EventBaseObjectProto, {
  constructor: DomEventObject,

  preventDefault: function preventDefault() {
    var e = this.nativeEvent;

    // if preventDefault exists run it on the original event
    if (e.preventDefault) {
      e.preventDefault();
    } else {
      // otherwise set the returnValue property of the original event to FALSE (IE)
      e.returnValue = FALSE;
    }

    EventBaseObjectProto.preventDefault.call(this);
  },

  stopPropagation: function stopPropagation() {
    var e = this.nativeEvent;

    // if stopPropagation exists run it on the original event
    if (e.stopPropagation) {
      e.stopPropagation();
    } else {
      // otherwise set the cancelBubble property of the original event to TRUE (IE)
      e.cancelBubble = TRUE;
    }

    EventBaseObjectProto.stopPropagation.call(this);
  }
});

exports['default'] = DomEventObject;
module.exports = exports['default'];

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @ignore
 * base event object for custom and dom event.
 * @author yiminghe@gmail.com
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
function returnFalse() {
  return false;
}

function returnTrue() {
  return true;
}

function EventBaseObject() {
  this.timeStamp = Date.now();
  this.target = undefined;
  this.currentTarget = undefined;
}

EventBaseObject.prototype = {
  isEventObject: 1,

  constructor: EventBaseObject,

  isDefaultPrevented: returnFalse,

  isPropagationStopped: returnFalse,

  isImmediatePropagationStopped: returnFalse,

  preventDefault: function preventDefault() {
    this.isDefaultPrevented = returnTrue;
  },

  stopPropagation: function stopPropagation() {
    this.isPropagationStopped = returnTrue;
  },

  stopImmediatePropagation: function stopImmediatePropagation() {
    this.isImmediatePropagationStopped = returnTrue;
    // fixed 1.2
    // call stopPropagation implicitly
    this.stopPropagation();
  },

  halt: function halt(immediate) {
    if (immediate) {
      this.stopImmediatePropagation();
    } else {
      this.stopPropagation();
    }
    this.preventDefault();
  }
};

exports["default"] = EventBaseObject;
module.exports = exports["default"];

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = __webpack_require__(93);

function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;

module.exports = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error(
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
    err.name = 'Invariant Violation';
    throw err;
  };
  shim.isRequired = shim;
  function getShim() {
    return shim;
  };
  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,

    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };

  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Generated by CoffeeScript 1.12.2
(function() {
  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;

  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
    module.exports = function() {
      return performance.now();
    };
  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
    module.exports = function() {
      return (getNanoSeconds() - nodeLoadTime) / 1e6;
    };
    hrtime = process.hrtime;
    getNanoSeconds = function() {
      var hr;
      hr = hrtime();
      return hr[0] * 1e9 + hr[1];
    };
    moduleLoadTime = getNanoSeconds();
    upTime = process.uptime() * 1e9;
    nodeLoadTime = moduleLoadTime - upTime;
  } else if (Date.now) {
    module.exports = function() {
      return Date.now() - loadTime;
    };
    loadTime = Date.now();
  } else {
    module.exports = function() {
      return new Date().getTime() - loadTime;
    };
    loadTime = new Date().getTime();
  }

}).call(this);

//# sourceMappingURL=performance-now.js.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(23)))

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(96);
var $Object = __webpack_require__(17).Object;
module.exports = function defineProperty(it, key, desc) {
  return $Object.defineProperty(it, key, desc);
};


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(24);
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(18), 'Object', { defineProperty: __webpack_require__(20).f });


/***/ }),
/* 97 */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(99), __esModule: true };

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(100);
module.exports = __webpack_require__(17).Object.assign;


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(24);

$export($export.S + $export.F, 'Object', { assign: __webpack_require__(101) });


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var DESCRIPTORS = __webpack_require__(18);
var getKeys = __webpack_require__(43);
var gOPS = __webpack_require__(55);
var pIE = __webpack_require__(46);
var toObject = __webpack_require__(56);
var IObject = __webpack_require__(71);
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(37)(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];
    }
  } return T;
} : $assign;


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(27);
var toLength = __webpack_require__(103);
var toAbsoluteIndex = __webpack_require__(104);
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(51);
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(51);
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(106), __esModule: true };

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(107);
__webpack_require__(113);
module.exports = __webpack_require__(60).f('iterator');


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at = __webpack_require__(108)(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(74)(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(51);
var defined = __webpack_require__(50);
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create = __webpack_require__(58);
var descriptor = __webpack_require__(42);
var setToStringTag = __webpack_require__(59);
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(25)(IteratorPrototype, __webpack_require__(28)('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(20);
var anObject = __webpack_require__(36);
var getKeys = __webpack_require__(43);

module.exports = __webpack_require__(18) ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(16).document;
module.exports = document && document.documentElement;


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(21);
var toObject = __webpack_require__(56);
var IE_PROTO = __webpack_require__(52)('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(114);
var global = __webpack_require__(16);
var hide = __webpack_require__(25);
var Iterators = __webpack_require__(57);
var TO_STRING_TAG = __webpack_require__(28)('toStringTag');

var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
  'TextTrackList,TouchList').split(',');

for (var i = 0; i < DOMIterables.length; i++) {
  var NAME = DOMIterables[i];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(115);
var step = __webpack_require__(116);
var Iterators = __webpack_require__(57);
var toIObject = __webpack_require__(27);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(74)(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),
/* 115 */
/***/ (function(module, exports) {

module.exports = function () { /* empty */ };


/***/ }),
/* 116 */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return { value: value, done: !!done };
};


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(118), __esModule: true };

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(119);
__webpack_require__(124);
__webpack_require__(125);
__webpack_require__(126);
module.exports = __webpack_require__(17).Symbol;


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global = __webpack_require__(16);
var has = __webpack_require__(21);
var DESCRIPTORS = __webpack_require__(18);
var $export = __webpack_require__(24);
var redefine = __webpack_require__(75);
var META = __webpack_require__(120).KEY;
var $fails = __webpack_require__(37);
var shared = __webpack_require__(53);
var setToStringTag = __webpack_require__(59);
var uid = __webpack_require__(45);
var wks = __webpack_require__(28);
var wksExt = __webpack_require__(60);
var wksDefine = __webpack_require__(61);
var enumKeys = __webpack_require__(121);
var isArray = __webpack_require__(122);
var anObject = __webpack_require__(36);
var isObject = __webpack_require__(26);
var toObject = __webpack_require__(56);
var toIObject = __webpack_require__(27);
var toPrimitive = __webpack_require__(49);
var createDesc = __webpack_require__(42);
var _create = __webpack_require__(58);
var gOPNExt = __webpack_require__(123);
var $GOPD = __webpack_require__(77);
var $GOPS = __webpack_require__(55);
var $DP = __webpack_require__(20);
var $keys = __webpack_require__(43);
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(76).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(46).f = $propertyIsEnumerable;
  $GOPS.f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(44)) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
var FAILS_ON_PRIMITIVES = $fails(function () { $GOPS.f(1); });

$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return $GOPS.f(toObject(it));
  }
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(25)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__(45)('meta');
var isObject = __webpack_require__(26);
var has = __webpack_require__(21);
var setDesc = __webpack_require__(20).f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(37)(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(43);
var gOPS = __webpack_require__(55);
var pIE = __webpack_require__(46);
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(72);
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(27);
var gOPN = __webpack_require__(76).f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),
/* 124 */
/***/ (function(module, exports) {



/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(61)('asyncIterator');


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(61)('observable');


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(128), __esModule: true };

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(129);
module.exports = __webpack_require__(17).Object.setPrototypeOf;


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(24);
$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(130).set });


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__(26);
var anObject = __webpack_require__(36);
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = __webpack_require__(67)(Function.call, __webpack_require__(77).f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(132), __esModule: true };

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(133);
var $Object = __webpack_require__(17).Object;
module.exports = function create(P, D) {
  return $Object.create(P, D);
};


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(24);
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: __webpack_require__(58) });


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

var api = __webpack_require__(29);
            var content = __webpack_require__(135);

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.i, content, '']];
            }

var options = {};

options.insert = "head";
options.singleton = false;

var update = api(content, options);

var exported = content.locals ? content.locals : {};



module.exports = exported;

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(30);
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".rc-tooltip.rc-tooltip-zoom-enter,\n.rc-tooltip.rc-tooltip-zoom-leave {\n  display: block;\n}\n.rc-tooltip-zoom-enter,\n.rc-tooltip-zoom-appear {\n  opacity: 0;\n  animation-duration: 0.3s;\n  animation-fill-mode: both;\n  animation-timing-function: cubic-bezier(0.18, 0.89, 0.32, 1.28);\n  animation-play-state: paused;\n}\n.rc-tooltip-zoom-leave {\n  animation-duration: 0.3s;\n  animation-fill-mode: both;\n  animation-timing-function: cubic-bezier(0.6, -0.3, 0.74, 0.05);\n  animation-play-state: paused;\n}\n.rc-tooltip-zoom-enter.rc-tooltip-zoom-enter-active,\n.rc-tooltip-zoom-appear.rc-tooltip-zoom-appear-active {\n  animation-name: rcToolTipZoomIn;\n  animation-play-state: running;\n}\n.rc-tooltip-zoom-leave.rc-tooltip-zoom-leave-active {\n  animation-name: rcToolTipZoomOut;\n  animation-play-state: running;\n}\n@keyframes rcToolTipZoomIn {\n  0% {\n    opacity: 0;\n    transform-origin: 50% 50%;\n    transform: scale(0, 0);\n  }\n  100% {\n    opacity: 1;\n    transform-origin: 50% 50%;\n    transform: scale(1, 1);\n  }\n}\n@keyframes rcToolTipZoomOut {\n  0% {\n    opacity: 1;\n    transform-origin: 50% 50%;\n    transform: scale(1, 1);\n  }\n  100% {\n    opacity: 0;\n    transform-origin: 50% 50%;\n    transform: scale(0, 0);\n  }\n}\n.rc-tooltip {\n  position: absolute;\n  z-index: 1070;\n  display: block;\n  visibility: visible;\n  line-height: 1.5;\n  font-size: 12px;\n  background-color: rgba(0, 0, 0, 0.05);\n  padding: 1px;\n  opacity: 0.9;\n}\n.rc-tooltip-hidden {\n  display: none;\n}\n.rc-tooltip-inner {\n  padding: 8px 10px;\n  color: #333333;\n  text-align: left;\n  text-decoration: none;\n  background-color: #ffffff;\n  border-radius: 3px;\n  min-height: 34px;\n  border: 1px solid #b1b1b1;\n}\n.rc-tooltip-arrow,\n.rc-tooltip-arrow-inner {\n  position: absolute;\n  width: 0;\n  height: 0;\n  border-color: transparent;\n  border-style: solid;\n}\n.rc-tooltip-placement-top .rc-tooltip-arrow,\n.rc-tooltip-placement-topLeft .rc-tooltip-arrow,\n.rc-tooltip-placement-topRight .rc-tooltip-arrow {\n  bottom: -5px;\n  margin-left: -6px;\n  border-width: 6px 6px 0;\n  border-top-color: #b1b1b1;\n}\n.rc-tooltip-placement-top .rc-tooltip-arrow-inner,\n.rc-tooltip-placement-topLeft .rc-tooltip-arrow-inner,\n.rc-tooltip-placement-topRight .rc-tooltip-arrow-inner {\n  bottom: 1px;\n  margin-left: -6px;\n  border-width: 6px 6px 0;\n  border-top-color: #ffffff;\n}\n.rc-tooltip-placement-top .rc-tooltip-arrow {\n  left: 50%;\n}\n.rc-tooltip-placement-topLeft .rc-tooltip-arrow {\n  left: 15%;\n}\n.rc-tooltip-placement-topRight .rc-tooltip-arrow {\n  right: 15%;\n}\n.rc-tooltip-placement-right .rc-tooltip-arrow,\n.rc-tooltip-placement-rightTop .rc-tooltip-arrow,\n.rc-tooltip-placement-rightBottom .rc-tooltip-arrow {\n  left: -5px;\n  margin-top: -6px;\n  border-width: 6px 6px 6px 0;\n  border-right-color: #b1b1b1;\n}\n.rc-tooltip-placement-right .rc-tooltip-arrow-inner,\n.rc-tooltip-placement-rightTop .rc-tooltip-arrow-inner,\n.rc-tooltip-placement-rightBottom .rc-tooltip-arrow-inner {\n  left: 1px;\n  margin-top: -6px;\n  border-width: 6px 6px 6px 0;\n  border-right-color: #ffffff;\n}\n.rc-tooltip-placement-right .rc-tooltip-arrow {\n  top: 50%;\n}\n.rc-tooltip-placement-rightTop .rc-tooltip-arrow {\n  top: 15%;\n  margin-top: 0;\n}\n.rc-tooltip-placement-rightBottom .rc-tooltip-arrow {\n  bottom: 15%;\n}\n.rc-tooltip-placement-left .rc-tooltip-arrow,\n.rc-tooltip-placement-leftTop .rc-tooltip-arrow,\n.rc-tooltip-placement-leftBottom .rc-tooltip-arrow {\n  right: -5px;\n  margin-top: -6px;\n  border-width: 6px 0 6px 6px;\n  border-left-color: #b1b1b1;\n}\n.rc-tooltip-placement-left .rc-tooltip-arrow-inner,\n.rc-tooltip-placement-leftTop .rc-tooltip-arrow-inner,\n.rc-tooltip-placement-leftBottom .rc-tooltip-arrow-inner {\n  right: 1px;\n  margin-top: -6px;\n  border-width: 6px 0 6px 6px;\n  border-left-color: #ffffff;\n}\n.rc-tooltip-placement-left .rc-tooltip-arrow {\n  top: 50%;\n}\n.rc-tooltip-placement-leftTop .rc-tooltip-arrow {\n  top: 15%;\n  margin-top: 0;\n}\n.rc-tooltip-placement-leftBottom .rc-tooltip-arrow {\n  bottom: 15%;\n}\n.rc-tooltip-placement-bottom .rc-tooltip-arrow,\n.rc-tooltip-placement-bottomLeft .rc-tooltip-arrow,\n.rc-tooltip-placement-bottomRight .rc-tooltip-arrow {\n  top: -5px;\n  margin-left: -6px;\n  border-width: 0 6px 6px;\n  border-bottom-color: #b1b1b1;\n}\n.rc-tooltip-placement-bottom .rc-tooltip-arrow-inner,\n.rc-tooltip-placement-bottomLeft .rc-tooltip-arrow-inner,\n.rc-tooltip-placement-bottomRight .rc-tooltip-arrow-inner {\n  top: 1px;\n  margin-left: -6px;\n  border-width: 0 6px 6px;\n  border-bottom-color: #ffffff;\n}\n.rc-tooltip-placement-bottom .rc-tooltip-arrow {\n  left: 50%;\n}\n.rc-tooltip-placement-bottomLeft .rc-tooltip-arrow {\n  left: 15%;\n}\n.rc-tooltip-placement-bottomRight .rc-tooltip-arrow {\n  right: 15%;\n}\n", ""]);
// Exports
module.exports = exports;


/***/ }),
/* 136 */
/***/ (function(module) {

module.exports = JSON.parse("{\"text\":\"\\n# I use hours far more often than the planck_constant\\nplanck_constant = h\\ndelete h\\nh = hour \\n\\nAh = A h\\n\\nE = energy\\n\\ndelete °C\\n°C = tempC\\ndelete °F\\n°F = tempF\\n\\nfibonacci = x => x >= 2 && fibonacci(x-1) + fibonacci(x-2) || x\\n\\nspheresurface = r => 4 pi r^2\\n\\n\\n# people might try to write either `10 in to cm` (inches to cm) or `10 kg in pounds`, which would be syntactically different.\\n# to avoid confusion, disallow both of these\\ndelete(in)\\n\\n#\\n# computing power\\n#\\n\\nflo! # one floating point operation\\n\\nfloating_point_operation = flo\\n\\nflops = flo/s\\n\\n\\n# cryptocurrency\\n\\nbitcoin!\\nBTC = bitcoin\\nsatoshi = (1/100million) bitcoin\\n\\n\\n# logic\\n\\nok = 1\\nerror = 0\\ntrue = 1\\nfalse = 0\\n\\n# buggy if a = 0\\nif = bool => then => else => (bool && then || else)\\n\\n\\n# screen ratio calculation, i.e. how wide is a 27\\\" screen with a ratio of 16:9\\n#\\n# (1) width^2 + height^2 = (diagonal^2)\\n# (2) width = ratio height\\n# \\n# => w^2 + (w/ratio)^2 = d^2\\n# => 1 w^2 + (1/ratio^2) w^2 = d^2\\n# => (1 + 1/ratio^2) w^2 = d^2\\n# => w = d / sqrt(1 + 1/ratio^2)\\n# \\n# Example:\\n# screenwidth (27inch) (16|9) to cm ≅ 60 cm\\n\\nscreenwidth = diagonal => ratio => diagonal / sqrt (1 + 1 / ratio ^ 2)\\nscreenheight = diagonal => ratio => screenwidth diagonal (1/ratio)\\n\\npixel!\\ndpi = pixel/inch\\nppi = dpi\\nppcm = pixel/cm\\n\\nscreendensity = width => height => diagonal => (width pixel / screenwidth diagonal (width / height))\\n\"}");

/***/ }),
/* 137 */
/***/ (function(module, exports) {



/***/ }),
/* 138 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n# I use hours far more often than the planck_constant\nplanck_constant = h\ndelete h\nh = hour \n\nAh = A h\n\nE = energy\n\ndelete °C\n°C = tempC\ndelete °F\n°F = tempF\n\nfibonacci = x => x >= 2 && fibonacci(x-1) + fibonacci(x-2) || x\n\nspheresurface = r => 4 pi r^2\n\n\n# people might try to write either `10 in to cm` (inches to cm) or `10 kg in pounds`, which would be syntactically different.\n# to avoid confusion, disallow both of these\ndelete(in)\n\n#\n# computing power\n#\n\nflo! # one floating point operation\n\nfloating_point_operation = flo\n\nflops = flo/s\n\n\n# cryptocurrency\n\nbitcoin!\nBTC = bitcoin\nsatoshi = (1/100million) bitcoin\n\n\n# logic\n\nok = 1\nerror = 0\ntrue = 1\nfalse = 0\n\n# buggy if a = 0\nif = bool => then => else => (bool && then || else)\n\n\n# screen ratio calculation, i.e. how wide is a 27\" screen with a ratio of 16:9\n#\n# (1) width^2 + height^2 = (diagonal^2)\n# (2) width = ratio height\n# \n# => w^2 + (w/ratio)^2 = d^2\n# => 1 w^2 + (1/ratio^2) w^2 = d^2\n# => (1 + 1/ratio^2) w^2 = d^2\n# => w = d / sqrt(1 + 1/ratio^2)\n# \n# Example:\n# screenwidth (27inch) (16|9) to cm ≅ 60 cm\n\nscreenwidth = diagonal => ratio => diagonal / sqrt (1 + 1 / ratio ^ 2)\nscreenheight = diagonal => ratio => screenwidth diagonal (1/ratio)\n\npixel!\ndpi = pixel/inch\nppi = dpi\nppcm = pixel/cm\n\nscreendensity = width => height => diagonal => (width pixel / screenwidth diagonal (width / height))\n");

/***/ }),
/* 139 */,
/* 140 */,
/* 141 */,
/* 142 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "GUILine", function() { return /* binding */ gui_GUILine; });
__webpack_require__.d(__webpack_exports__, "GUI", function() { return /* binding */ gui_GUI; });

// EXTERNAL MODULE: ./node_modules/lz-string/libs/lz-string.js
var lz_string = __webpack_require__(62);
var lz_string_default = /*#__PURE__*/__webpack_require__.n(lz_string);

// EXTERNAL MODULE: ./node_modules/mobx/lib/mobx.module.js
var mobx_module = __webpack_require__(1);

// EXTERNAL MODULE: ./node_modules/mobx-react/dist/mobxreact.esm.js + 1 modules
var mobxreact_esm = __webpack_require__(12);

// EXTERNAL MODULE: ./node_modules/query-string/index.js
var query_string = __webpack_require__(63);

// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__(0);
var react_default = /*#__PURE__*/__webpack_require__.n(react);

// EXTERNAL MODULE: ./node_modules/react-dom/index.js
var react_dom = __webpack_require__(6);
var react_dom_default = /*#__PURE__*/__webpack_require__.n(react_dom);

// CONCATENATED MODULE: ./node_modules/rc-util/es/Dom/contains.js
function contains(root, n) {
  var node = n;

  while (node) {
    if (node === root) {
      return true;
    }

    node = node.parentNode;
  }

  return false;
}
// CONCATENATED MODULE: ./node_modules/rc-util/es/Dom/findDOMNode.js

/**
 * Return if a node is a DOM node. Else will return by `findDOMNode`
 */

function findDOMNode(node) {
  if (node instanceof HTMLElement) {
    return node;
  }

  return react_dom_default.a.findDOMNode(node);
}
// CONCATENATED MODULE: ./node_modules/rc-util/es/ref.js
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function fillRef(ref, node) {
  if (typeof ref === 'function') {
    ref(node);
  } else if (_typeof(ref) === 'object' && ref && 'current' in ref) {
    ref.current = node;
  }
}
/**
 * Merge refs into one ref function to support ref passing.
 */

function composeRef() {
  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
    refs[_key] = arguments[_key];
  }

  return function (node) {
    refs.forEach(function (ref) {
      fillRef(ref, node);
    });
  };
}
function supportRef(nodeOrComponent) {
  // Function component node
  if (nodeOrComponent.type && nodeOrComponent.type.prototype && !nodeOrComponent.type.prototype.render) {
    return false;
  } // Class component


  if (typeof nodeOrComponent === 'function' && nodeOrComponent.prototype && !nodeOrComponent.prototype.render) {
    return false;
  }

  return true;
}
/* eslint-enable */
// EXTERNAL MODULE: ./node_modules/add-dom-event-listener/lib/index.js
var lib = __webpack_require__(79);
var lib_default = /*#__PURE__*/__webpack_require__.n(lib);

// CONCATENATED MODULE: ./node_modules/rc-util/es/Dom/addEventListener.js


function addEventListenerWrap(target, eventType, cb, option) {
  /* eslint camelcase: 2 */
  var callback = react_dom_default.a.unstable_batchedUpdates ? function run(e) {
    react_dom_default.a.unstable_batchedUpdates(cb, e);
  } : cb;
  return lib_default()(target, eventType, callback, option);
}
// EXTERNAL MODULE: ./node_modules/prop-types/index.js
var prop_types = __webpack_require__(5);
var prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);

// CONCATENATED MODULE: ./node_modules/rc-util/es/Portal.js
function Portal_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { Portal_typeof = function _typeof(obj) { return typeof obj; }; } else { Portal_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return Portal_typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (Portal_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }





var Portal_Portal =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Portal, _React$Component);

  function Portal() {
    _classCallCheck(this, Portal);

    return _possibleConstructorReturn(this, _getPrototypeOf(Portal).apply(this, arguments));
  }

  _createClass(Portal, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.createContainer();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var didUpdate = this.props.didUpdate;

      if (didUpdate) {
        didUpdate(prevProps);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.removeContainer();
    }
  }, {
    key: "createContainer",
    value: function createContainer() {
      this._container = this.props.getContainer();
      this.forceUpdate();
    }
  }, {
    key: "removeContainer",
    value: function removeContainer() {
      if (this._container) {
        this._container.parentNode.removeChild(this._container);
      }
    }
  }, {
    key: "render",
    value: function render() {
      if (this._container) {
        return react_dom_default.a.createPortal(this.props.children, this._container);
      }

      return null;
    }
  }]);

  return Portal;
}(react_default.a.Component);

Portal_Portal.propTypes = {
  getContainer: prop_types_default.a.func.isRequired,
  children: prop_types_default.a.node.isRequired,
  didUpdate: prop_types_default.a.func
};

// EXTERNAL MODULE: ./node_modules/classnames/index.js
var classnames = __webpack_require__(13);
var classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);

// CONCATENATED MODULE: ./node_modules/rc-trigger/es/utils/alignUtil.js
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function isPointsEq(a1, a2, isAlignPoint) {
  if (isAlignPoint) {
    return a1[0] === a2[0];
  }

  return a1[0] === a2[0] && a1[1] === a2[1];
}

function getAlignFromPlacement(builtinPlacements, placementStr, align) {
  var baseAlign = builtinPlacements[placementStr] || {};
  return _objectSpread({}, baseAlign, {}, align);
}
function getAlignPopupClassName(builtinPlacements, prefixCls, align, isAlignPoint) {
  var points = align.points;
  var placements = Object.keys(builtinPlacements);

  for (var i = 0; i < placements.length; i += 1) {
    var placement = placements[i];

    if (isPointsEq(builtinPlacements[placement].points, points, isAlignPoint)) {
      return "".concat(prefixCls, "-placement-").concat(placement);
    }
  }

  return '';
}
// EXTERNAL MODULE: ./node_modules/raf/index.js
var raf = __webpack_require__(31);
var raf_default = /*#__PURE__*/__webpack_require__.n(raf);

// CONCATENATED MODULE: ./node_modules/dom-align/dist-web/index.js
function dist_web_typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    dist_web_typeof = function (obj) {
      return typeof obj;
    };
  } else {
    dist_web_typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return dist_web_typeof(obj);
}

function dist_web_defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function dist_web_ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      dist_web_ownKeys(source, true).forEach(function (key) {
        dist_web_defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      dist_web_ownKeys(source).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

var vendorPrefix;
var jsCssMap = {
  Webkit: '-webkit-',
  Moz: '-moz-',
  // IE did it wrong again ...
  ms: '-ms-',
  O: '-o-'
};

function getVendorPrefix() {
  if (vendorPrefix !== undefined) {
    return vendorPrefix;
  }

  vendorPrefix = '';
  var style = document.createElement('p').style;
  var testProp = 'Transform';

  for (var key in jsCssMap) {
    if (key + testProp in style) {
      vendorPrefix = key;
    }
  }

  return vendorPrefix;
}

function getTransitionName() {
  return getVendorPrefix() ? "".concat(getVendorPrefix(), "TransitionProperty") : 'transitionProperty';
}

function getTransformName() {
  return getVendorPrefix() ? "".concat(getVendorPrefix(), "Transform") : 'transform';
}
function setTransitionProperty(node, value) {
  var name = getTransitionName();

  if (name) {
    node.style[name] = value;

    if (name !== 'transitionProperty') {
      node.style.transitionProperty = value;
    }
  }
}

function setTransform(node, value) {
  var name = getTransformName();

  if (name) {
    node.style[name] = value;

    if (name !== 'transform') {
      node.style.transform = value;
    }
  }
}

function getTransitionProperty(node) {
  return node.style.transitionProperty || node.style[getTransitionName()];
}
function getTransformXY(node) {
  var style = window.getComputedStyle(node, null);
  var transform = style.getPropertyValue('transform') || style.getPropertyValue(getTransformName());

  if (transform && transform !== 'none') {
    var matrix = transform.replace(/[^0-9\-.,]/g, '').split(',');
    return {
      x: parseFloat(matrix[12] || matrix[4], 0),
      y: parseFloat(matrix[13] || matrix[5], 0)
    };
  }

  return {
    x: 0,
    y: 0
  };
}
var matrix2d = /matrix\((.*)\)/;
var matrix3d = /matrix3d\((.*)\)/;
function setTransformXY(node, xy) {
  var style = window.getComputedStyle(node, null);
  var transform = style.getPropertyValue('transform') || style.getPropertyValue(getTransformName());

  if (transform && transform !== 'none') {
    var arr;
    var match2d = transform.match(matrix2d);

    if (match2d) {
      match2d = match2d[1];
      arr = match2d.split(',').map(function (item) {
        return parseFloat(item, 10);
      });
      arr[4] = xy.x;
      arr[5] = xy.y;
      setTransform(node, "matrix(".concat(arr.join(','), ")"));
    } else {
      var match3d = transform.match(matrix3d)[1];
      arr = match3d.split(',').map(function (item) {
        return parseFloat(item, 10);
      });
      arr[12] = xy.x;
      arr[13] = xy.y;
      setTransform(node, "matrix3d(".concat(arr.join(','), ")"));
    }
  } else {
    setTransform(node, "translateX(".concat(xy.x, "px) translateY(").concat(xy.y, "px) translateZ(0)"));
  }
}

var RE_NUM = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source;
var getComputedStyleX; // https://stackoverflow.com/a/3485654/3040605

function forceRelayout(elem) {
  var originalStyle = elem.style.display;
  elem.style.display = 'none';
  elem.offsetHeight; // eslint-disable-line

  elem.style.display = originalStyle;
}

function css(el, name, v) {
  var value = v;

  if (dist_web_typeof(name) === 'object') {
    for (var i in name) {
      if (name.hasOwnProperty(i)) {
        css(el, i, name[i]);
      }
    }

    return undefined;
  }

  if (typeof value !== 'undefined') {
    if (typeof value === 'number') {
      value = "".concat(value, "px");
    }

    el.style[name] = value;
    return undefined;
  }

  return getComputedStyleX(el, name);
}

function getClientPosition(elem) {
  var box;
  var x;
  var y;
  var doc = elem.ownerDocument;
  var body = doc.body;
  var docElem = doc && doc.documentElement; // 根据 GBS 最新数据，A-Grade Browsers 都已支持 getBoundingClientRect 方法，不用再考虑传统的实现方式

  box = elem.getBoundingClientRect(); // 注：jQuery 还考虑减去 docElem.clientLeft/clientTop
  // 但测试发现，这样反而会导致当 html 和 body 有边距/边框样式时，获取的值不正确
  // 此外，ie6 会忽略 html 的 margin 值，幸运地是没有谁会去设置 html 的 margin

  x = box.left;
  y = box.top; // In IE, most of the time, 2 extra pixels are added to the top and left
  // due to the implicit 2-pixel inset border.  In IE6/7 quirks mode and
  // IE6 standards mode, this border can be overridden by setting the
  // document element's border to zero -- thus, we cannot rely on the
  // offset always being 2 pixels.
  // In quirks mode, the offset can be determined by querying the body's
  // clientLeft/clientTop, but in standards mode, it is found by querying
  // the document element's clientLeft/clientTop.  Since we already called
  // getClientBoundingRect we have already forced a reflow, so it is not
  // too expensive just to query them all.
  // ie 下应该减去窗口的边框吧，毕竟默认 absolute 都是相对窗口定位的
  // 窗口边框标准是设 documentElement ,quirks 时设置 body
  // 最好禁止在 body 和 html 上边框 ，但 ie < 9 html 默认有 2px ，减去
  // 但是非 ie 不可能设置窗口边框，body html 也不是窗口 ,ie 可以通过 html,body 设置
  // 标准 ie 下 docElem.clientTop 就是 border-top
  // ie7 html 即窗口边框改变不了。永远为 2
  // 但标准 firefox/chrome/ie9 下 docElem.clientTop 是窗口边框，即使设了 border-top 也为 0

  x -= docElem.clientLeft || body.clientLeft || 0;
  y -= docElem.clientTop || body.clientTop || 0;
  return {
    left: x,
    top: y
  };
}

function getScroll(w, top) {
  var ret = w["page".concat(top ? 'Y' : 'X', "Offset")];
  var method = "scroll".concat(top ? 'Top' : 'Left');

  if (typeof ret !== 'number') {
    var d = w.document; // ie6,7,8 standard mode

    ret = d.documentElement[method];

    if (typeof ret !== 'number') {
      // quirks mode
      ret = d.body[method];
    }
  }

  return ret;
}

function getScrollLeft(w) {
  return getScroll(w);
}

function getScrollTop(w) {
  return getScroll(w, true);
}

function getOffset(el) {
  var pos = getClientPosition(el);
  var doc = el.ownerDocument;
  var w = doc.defaultView || doc.parentWindow;
  pos.left += getScrollLeft(w);
  pos.top += getScrollTop(w);
  return pos;
}
/**
 * A crude way of determining if an object is a window
 * @member util
 */


function isWindow(obj) {
  // must use == for ie8

  /* eslint eqeqeq:0 */
  return obj !== null && obj !== undefined && obj == obj.window;
}

function getDocument(node) {
  if (isWindow(node)) {
    return node.document;
  }

  if (node.nodeType === 9) {
    return node;
  }

  return node.ownerDocument;
}

function _getComputedStyle(elem, name, cs) {
  var computedStyle = cs;
  var val = '';
  var d = getDocument(elem);
  computedStyle = computedStyle || d.defaultView.getComputedStyle(elem, null); // https://github.com/kissyteam/kissy/issues/61

  if (computedStyle) {
    val = computedStyle.getPropertyValue(name) || computedStyle[name];
  }

  return val;
}

var _RE_NUM_NO_PX = new RegExp("^(".concat(RE_NUM, ")(?!px)[a-z%]+$"), 'i');

var RE_POS = /^(top|right|bottom|left)$/;
var CURRENT_STYLE = 'currentStyle';
var RUNTIME_STYLE = 'runtimeStyle';
var LEFT = 'left';
var PX = 'px';

function _getComputedStyleIE(elem, name) {
  // currentStyle maybe null
  // http://msdn.microsoft.com/en-us/library/ms535231.aspx
  var ret = elem[CURRENT_STYLE] && elem[CURRENT_STYLE][name]; // 当 width/height 设置为百分比时，通过 pixelLeft 方式转换的 width/height 值
  // 一开始就处理了! CUSTOM_STYLE.height,CUSTOM_STYLE.width ,cssHook 解决@2011-08-19
  // 在 ie 下不对，需要直接用 offset 方式
  // borderWidth 等值也有问题，但考虑到 borderWidth 设为百分比的概率很小，这里就不考虑了
  // From the awesome hack by Dean Edwards
  // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
  // If we're not dealing with a regular pixel number
  // but a number that has a weird ending, we need to convert it to pixels
  // exclude left right for relativity

  if (_RE_NUM_NO_PX.test(ret) && !RE_POS.test(name)) {
    // Remember the original values
    var style = elem.style;
    var left = style[LEFT];
    var rsLeft = elem[RUNTIME_STYLE][LEFT]; // prevent flashing of content

    elem[RUNTIME_STYLE][LEFT] = elem[CURRENT_STYLE][LEFT]; // Put in the new values to get a computed value out

    style[LEFT] = name === 'fontSize' ? '1em' : ret || 0;
    ret = style.pixelLeft + PX; // Revert the changed values

    style[LEFT] = left;
    elem[RUNTIME_STYLE][LEFT] = rsLeft;
  }

  return ret === '' ? 'auto' : ret;
}

if (typeof window !== 'undefined') {
  getComputedStyleX = window.getComputedStyle ? _getComputedStyle : _getComputedStyleIE;
}

function getOffsetDirection(dir, option) {
  if (dir === 'left') {
    return option.useCssRight ? 'right' : dir;
  }

  return option.useCssBottom ? 'bottom' : dir;
}

function oppositeOffsetDirection(dir) {
  if (dir === 'left') {
    return 'right';
  } else if (dir === 'right') {
    return 'left';
  } else if (dir === 'top') {
    return 'bottom';
  } else if (dir === 'bottom') {
    return 'top';
  }
} // 设置 elem 相对 elem.ownerDocument 的坐标


function setLeftTop(elem, offset, option) {
  // set position first, in-case top/left are set even on static elem
  if (css(elem, 'position') === 'static') {
    elem.style.position = 'relative';
  }

  var presetH = -999;
  var presetV = -999;
  var horizontalProperty = getOffsetDirection('left', option);
  var verticalProperty = getOffsetDirection('top', option);
  var oppositeHorizontalProperty = oppositeOffsetDirection(horizontalProperty);
  var oppositeVerticalProperty = oppositeOffsetDirection(verticalProperty);

  if (horizontalProperty !== 'left') {
    presetH = 999;
  }

  if (verticalProperty !== 'top') {
    presetV = 999;
  }

  var originalTransition = '';
  var originalOffset = getOffset(elem);

  if ('left' in offset || 'top' in offset) {
    originalTransition = getTransitionProperty(elem) || '';
    setTransitionProperty(elem, 'none');
  }

  if ('left' in offset) {
    elem.style[oppositeHorizontalProperty] = '';
    elem.style[horizontalProperty] = "".concat(presetH, "px");
  }

  if ('top' in offset) {
    elem.style[oppositeVerticalProperty] = '';
    elem.style[verticalProperty] = "".concat(presetV, "px");
  } // force relayout


  forceRelayout(elem);
  var old = getOffset(elem);
  var originalStyle = {};

  for (var key in offset) {
    if (offset.hasOwnProperty(key)) {
      var dir = getOffsetDirection(key, option);
      var preset = key === 'left' ? presetH : presetV;
      var off = originalOffset[key] - old[key];

      if (dir === key) {
        originalStyle[dir] = preset + off;
      } else {
        originalStyle[dir] = preset - off;
      }
    }
  }

  css(elem, originalStyle); // force relayout

  forceRelayout(elem);

  if ('left' in offset || 'top' in offset) {
    setTransitionProperty(elem, originalTransition);
  }

  var ret = {};

  for (var _key in offset) {
    if (offset.hasOwnProperty(_key)) {
      var _dir = getOffsetDirection(_key, option);

      var _off = offset[_key] - originalOffset[_key];

      if (_key === _dir) {
        ret[_dir] = originalStyle[_dir] + _off;
      } else {
        ret[_dir] = originalStyle[_dir] - _off;
      }
    }
  }

  css(elem, ret);
}

function setTransform$1(elem, offset) {
  var originalOffset = getOffset(elem);
  var originalXY = getTransformXY(elem);
  var resultXY = {
    x: originalXY.x,
    y: originalXY.y
  };

  if ('left' in offset) {
    resultXY.x = originalXY.x + offset.left - originalOffset.left;
  }

  if ('top' in offset) {
    resultXY.y = originalXY.y + offset.top - originalOffset.top;
  }

  setTransformXY(elem, resultXY);
}

function setOffset(elem, offset, option) {
  if (option.ignoreShake) {
    var oriOffset = getOffset(elem);
    var oLeft = oriOffset.left.toFixed(0);
    var oTop = oriOffset.top.toFixed(0);
    var tLeft = offset.left.toFixed(0);
    var tTop = offset.top.toFixed(0);

    if (oLeft === tLeft && oTop === tTop) {
      return;
    }
  }

  if (option.useCssRight || option.useCssBottom) {
    setLeftTop(elem, offset, option);
  } else if (option.useCssTransform && getTransformName() in document.body.style) {
    setTransform$1(elem, offset);
  } else {
    setLeftTop(elem, offset, option);
  }
}

function each(arr, fn) {
  for (var i = 0; i < arr.length; i++) {
    fn(arr[i]);
  }
}

function isBorderBoxFn(elem) {
  return getComputedStyleX(elem, 'boxSizing') === 'border-box';
}

var BOX_MODELS = ['margin', 'border', 'padding'];
var CONTENT_INDEX = -1;
var PADDING_INDEX = 2;
var BORDER_INDEX = 1;
var MARGIN_INDEX = 0;

function swap(elem, options, callback) {
  var old = {};
  var style = elem.style;
  var name; // Remember the old values, and insert the new ones

  for (name in options) {
    if (options.hasOwnProperty(name)) {
      old[name] = style[name];
      style[name] = options[name];
    }
  }

  callback.call(elem); // Revert the old values

  for (name in options) {
    if (options.hasOwnProperty(name)) {
      style[name] = old[name];
    }
  }
}

function getPBMWidth(elem, props, which) {
  var value = 0;
  var prop;
  var j;
  var i;

  for (j = 0; j < props.length; j++) {
    prop = props[j];

    if (prop) {
      for (i = 0; i < which.length; i++) {
        var cssProp = void 0;

        if (prop === 'border') {
          cssProp = "".concat(prop).concat(which[i], "Width");
        } else {
          cssProp = prop + which[i];
        }

        value += parseFloat(getComputedStyleX(elem, cssProp)) || 0;
      }
    }
  }

  return value;
}

var domUtils = {
  getParent: function getParent(element) {
    var parent = element;

    do {
      if (parent.nodeType === 11 && parent.host) {
        parent = parent.host;
      } else {
        parent = parent.parentNode;
      }
    } while (parent && parent.nodeType !== 1 && parent.nodeType !== 9);

    return parent;
  }
};
each(['Width', 'Height'], function (name) {
  domUtils["doc".concat(name)] = function (refWin) {
    var d = refWin.document;
    return Math.max( // firefox chrome documentElement.scrollHeight< body.scrollHeight
    // ie standard mode : documentElement.scrollHeight> body.scrollHeight
    d.documentElement["scroll".concat(name)], // quirks : documentElement.scrollHeight 最大等于可视窗口多一点？
    d.body["scroll".concat(name)], domUtils["viewport".concat(name)](d));
  };

  domUtils["viewport".concat(name)] = function (win) {
    // pc browser includes scrollbar in window.innerWidth
    var prop = "client".concat(name);
    var doc = win.document;
    var body = doc.body;
    var documentElement = doc.documentElement;
    var documentElementProp = documentElement[prop]; // 标准模式取 documentElement
    // backcompat 取 body

    return doc.compatMode === 'CSS1Compat' && documentElementProp || body && body[prop] || documentElementProp;
  };
});
/*
 得到元素的大小信息
 @param elem
 @param name
 @param {String} [extra]  'padding' : (css width) + padding
 'border' : (css width) + padding + border
 'margin' : (css width) + padding + border + margin
 */

function getWH(elem, name, ex) {
  var extra = ex;

  if (isWindow(elem)) {
    return name === 'width' ? domUtils.viewportWidth(elem) : domUtils.viewportHeight(elem);
  } else if (elem.nodeType === 9) {
    return name === 'width' ? domUtils.docWidth(elem) : domUtils.docHeight(elem);
  }

  var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];
  var borderBoxValue = name === 'width' ? elem.getBoundingClientRect().width : elem.getBoundingClientRect().height;
  var computedStyle = getComputedStyleX(elem);
  var isBorderBox = isBorderBoxFn(elem);
  var cssBoxValue = 0;

  if (borderBoxValue === null || borderBoxValue === undefined || borderBoxValue <= 0) {
    borderBoxValue = undefined; // Fall back to computed then un computed css if necessary

    cssBoxValue = getComputedStyleX(elem, name);

    if (cssBoxValue === null || cssBoxValue === undefined || Number(cssBoxValue) < 0) {
      cssBoxValue = elem.style[name] || 0;
    } // Normalize '', auto, and prepare for extra


    cssBoxValue = parseFloat(cssBoxValue) || 0;
  }

  if (extra === undefined) {
    extra = isBorderBox ? BORDER_INDEX : CONTENT_INDEX;
  }

  var borderBoxValueOrIsBorderBox = borderBoxValue !== undefined || isBorderBox;
  var val = borderBoxValue || cssBoxValue;

  if (extra === CONTENT_INDEX) {
    if (borderBoxValueOrIsBorderBox) {
      return val - getPBMWidth(elem, ['border', 'padding'], which);
    }

    return cssBoxValue;
  } else if (borderBoxValueOrIsBorderBox) {
    if (extra === BORDER_INDEX) {
      return val;
    }

    return val + (extra === PADDING_INDEX ? -getPBMWidth(elem, ['border'], which) : getPBMWidth(elem, ['margin'], which));
  }

  return cssBoxValue + getPBMWidth(elem, BOX_MODELS.slice(extra), which);
}

var cssShow = {
  position: 'absolute',
  visibility: 'hidden',
  display: 'block'
}; // fix #119 : https://github.com/kissyteam/kissy/issues/119

function getWHIgnoreDisplay() {
  for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
    args[_key2] = arguments[_key2];
  }

  var val;
  var elem = args[0]; // in case elem is window
  // elem.offsetWidth === undefined

  if (elem.offsetWidth !== 0) {
    val = getWH.apply(undefined, args);
  } else {
    swap(elem, cssShow, function () {
      val = getWH.apply(undefined, args);
    });
  }

  return val;
}

each(['width', 'height'], function (name) {
  var first = name.charAt(0).toUpperCase() + name.slice(1);

  domUtils["outer".concat(first)] = function (el, includeMargin) {
    return el && getWHIgnoreDisplay(el, name, includeMargin ? MARGIN_INDEX : BORDER_INDEX);
  };

  var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];

  domUtils[name] = function (elem, v) {
    var val = v;

    if (val !== undefined) {
      if (elem) {
        var computedStyle = getComputedStyleX(elem);
        var isBorderBox = isBorderBoxFn(elem);

        if (isBorderBox) {
          val += getPBMWidth(elem, ['padding', 'border'], which);
        }

        return css(elem, name, val);
      }

      return undefined;
    }

    return elem && getWHIgnoreDisplay(elem, name, CONTENT_INDEX);
  };
});

function mix(to, from) {
  for (var i in from) {
    if (from.hasOwnProperty(i)) {
      to[i] = from[i];
    }
  }

  return to;
}

var utils = {
  getWindow: function getWindow(node) {
    if (node && node.document && node.setTimeout) {
      return node;
    }

    var doc = node.ownerDocument || node;
    return doc.defaultView || doc.parentWindow;
  },
  getDocument: getDocument,
  offset: function offset(el, value, option) {
    if (typeof value !== 'undefined') {
      setOffset(el, value, option || {});
    } else {
      return getOffset(el);
    }
  },
  isWindow: isWindow,
  each: each,
  css: css,
  clone: function clone(obj) {
    var i;
    var ret = {};

    for (i in obj) {
      if (obj.hasOwnProperty(i)) {
        ret[i] = obj[i];
      }
    }

    var overflow = obj.overflow;

    if (overflow) {
      for (i in obj) {
        if (obj.hasOwnProperty(i)) {
          ret.overflow[i] = obj.overflow[i];
        }
      }
    }

    return ret;
  },
  mix: mix,
  getWindowScrollLeft: function getWindowScrollLeft(w) {
    return getScrollLeft(w);
  },
  getWindowScrollTop: function getWindowScrollTop(w) {
    return getScrollTop(w);
  },
  merge: function merge() {
    var ret = {};

    for (var i = 0; i < arguments.length; i++) {
      utils.mix(ret, i < 0 || arguments.length <= i ? undefined : arguments[i]);
    }

    return ret;
  },
  viewportWidth: 0,
  viewportHeight: 0
};
mix(utils, domUtils);

/**
 * 得到会导致元素显示不全的祖先元素
 */

var getParent = utils.getParent;

function getOffsetParent(element) {
  if (utils.isWindow(element) || element.nodeType === 9) {
    return null;
  } // ie 这个也不是完全可行

  /*
   <div style="width: 50px;height: 100px;overflow: hidden">
   <div style="width: 50px;height: 100px;position: relative;" id="d6">
   元素 6 高 100px 宽 50px<br/>
   </div>
   </div>
   */
  // element.offsetParent does the right thing in ie7 and below. Return parent with layout!
  //  In other browsers it only includes elements with position absolute, relative or
  // fixed, not elements with overflow set to auto or scroll.
  //        if (UA.ie && ieMode < 8) {
  //            return element.offsetParent;
  //        }
  // 统一的 offsetParent 方法


  var doc = utils.getDocument(element);
  var body = doc.body;
  var parent;
  var positionStyle = utils.css(element, 'position');
  var skipStatic = positionStyle === 'fixed' || positionStyle === 'absolute';

  if (!skipStatic) {
    return element.nodeName.toLowerCase() === 'html' ? null : getParent(element);
  }

  for (parent = getParent(element); parent && parent !== body && parent.nodeType !== 9; parent = getParent(parent)) {
    positionStyle = utils.css(parent, 'position');

    if (positionStyle !== 'static') {
      return parent;
    }
  }

  return null;
}

var getParent$1 = utils.getParent;
function isAncestorFixed(element) {
  if (utils.isWindow(element) || element.nodeType === 9) {
    return false;
  }

  var doc = utils.getDocument(element);
  var body = doc.body;
  var parent = null;

  for (parent = getParent$1(element); parent && parent !== body; parent = getParent$1(parent)) {
    var positionStyle = utils.css(parent, 'position');

    if (positionStyle === 'fixed') {
      return true;
    }
  }

  return false;
}

/**
 * 获得元素的显示部分的区域
 */

function getVisibleRectForElement(element, alwaysByViewport) {
  var visibleRect = {
    left: 0,
    right: Infinity,
    top: 0,
    bottom: Infinity
  };
  var el = getOffsetParent(element);
  var doc = utils.getDocument(element);
  var win = doc.defaultView || doc.parentWindow;
  var body = doc.body;
  var documentElement = doc.documentElement; // Determine the size of the visible rect by climbing the dom accounting for
  // all scrollable containers.

  while (el) {
    // clientWidth is zero for inline block elements in ie.
    if ((navigator.userAgent.indexOf('MSIE') === -1 || el.clientWidth !== 0) && // body may have overflow set on it, yet we still get the entire
    // viewport. In some browsers, el.offsetParent may be
    // document.documentElement, so check for that too.
    el !== body && el !== documentElement && utils.css(el, 'overflow') !== 'visible') {
      var pos = utils.offset(el); // add border

      pos.left += el.clientLeft;
      pos.top += el.clientTop;
      visibleRect.top = Math.max(visibleRect.top, pos.top);
      visibleRect.right = Math.min(visibleRect.right, // consider area without scrollBar
      pos.left + el.clientWidth);
      visibleRect.bottom = Math.min(visibleRect.bottom, pos.top + el.clientHeight);
      visibleRect.left = Math.max(visibleRect.left, pos.left);
    } else if (el === body || el === documentElement) {
      break;
    }

    el = getOffsetParent(el);
  } // Set element position to fixed
  // make sure absolute element itself don't affect it's visible area
  // https://github.com/ant-design/ant-design/issues/7601


  var originalPosition = null;

  if (!utils.isWindow(element) && element.nodeType !== 9) {
    originalPosition = element.style.position;
    var position = utils.css(element, 'position');

    if (position === 'absolute') {
      element.style.position = 'fixed';
    }
  }

  var scrollX = utils.getWindowScrollLeft(win);
  var scrollY = utils.getWindowScrollTop(win);
  var viewportWidth = utils.viewportWidth(win);
  var viewportHeight = utils.viewportHeight(win);
  var documentWidth = documentElement.scrollWidth;
  var documentHeight = documentElement.scrollHeight; // scrollXXX on html is sync with body which means overflow: hidden on body gets wrong scrollXXX.
  // We should cut this ourself.

  var bodyStyle = window.getComputedStyle(body);

  if (bodyStyle.overflowX === 'hidden') {
    documentWidth = win.innerWidth;
  }

  if (bodyStyle.overflowY === 'hidden') {
    documentHeight = win.innerHeight;
  } // Reset element position after calculate the visible area


  if (element.style) {
    element.style.position = originalPosition;
  }

  if (alwaysByViewport || isAncestorFixed(element)) {
    // Clip by viewport's size.
    visibleRect.left = Math.max(visibleRect.left, scrollX);
    visibleRect.top = Math.max(visibleRect.top, scrollY);
    visibleRect.right = Math.min(visibleRect.right, scrollX + viewportWidth);
    visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + viewportHeight);
  } else {
    // Clip by document's size.
    var maxVisibleWidth = Math.max(documentWidth, scrollX + viewportWidth);
    visibleRect.right = Math.min(visibleRect.right, maxVisibleWidth);
    var maxVisibleHeight = Math.max(documentHeight, scrollY + viewportHeight);
    visibleRect.bottom = Math.min(visibleRect.bottom, maxVisibleHeight);
  }

  return visibleRect.top >= 0 && visibleRect.left >= 0 && visibleRect.bottom > visibleRect.top && visibleRect.right > visibleRect.left ? visibleRect : null;
}

function adjustForViewport(elFuturePos, elRegion, visibleRect, overflow) {
  var pos = utils.clone(elFuturePos);
  var size = {
    width: elRegion.width,
    height: elRegion.height
  };

  if (overflow.adjustX && pos.left < visibleRect.left) {
    pos.left = visibleRect.left;
  } // Left edge inside and right edge outside viewport, try to resize it.


  if (overflow.resizeWidth && pos.left >= visibleRect.left && pos.left + size.width > visibleRect.right) {
    size.width -= pos.left + size.width - visibleRect.right;
  } // Right edge outside viewport, try to move it.


  if (overflow.adjustX && pos.left + size.width > visibleRect.right) {
    // 保证左边界和可视区域左边界对齐
    pos.left = Math.max(visibleRect.right - size.width, visibleRect.left);
  } // Top edge outside viewport, try to move it.


  if (overflow.adjustY && pos.top < visibleRect.top) {
    pos.top = visibleRect.top;
  } // Top edge inside and bottom edge outside viewport, try to resize it.


  if (overflow.resizeHeight && pos.top >= visibleRect.top && pos.top + size.height > visibleRect.bottom) {
    size.height -= pos.top + size.height - visibleRect.bottom;
  } // Bottom edge outside viewport, try to move it.


  if (overflow.adjustY && pos.top + size.height > visibleRect.bottom) {
    // 保证上边界和可视区域上边界对齐
    pos.top = Math.max(visibleRect.bottom - size.height, visibleRect.top);
  }

  return utils.mix(pos, size);
}

function getRegion(node) {
  var offset;
  var w;
  var h;

  if (!utils.isWindow(node) && node.nodeType !== 9) {
    offset = utils.offset(node);
    w = utils.outerWidth(node);
    h = utils.outerHeight(node);
  } else {
    var win = utils.getWindow(node);
    offset = {
      left: utils.getWindowScrollLeft(win),
      top: utils.getWindowScrollTop(win)
    };
    w = utils.viewportWidth(win);
    h = utils.viewportHeight(win);
  }

  offset.width = w;
  offset.height = h;
  return offset;
}

/**
 * 获取 node 上的 align 对齐点 相对于页面的坐标
 */
function getAlignOffset(region, align) {
  var V = align.charAt(0);
  var H = align.charAt(1);
  var w = region.width;
  var h = region.height;
  var x = region.left;
  var y = region.top;

  if (V === 'c') {
    y += h / 2;
  } else if (V === 'b') {
    y += h;
  }

  if (H === 'c') {
    x += w / 2;
  } else if (H === 'r') {
    x += w;
  }

  return {
    left: x,
    top: y
  };
}

function getElFuturePos(elRegion, refNodeRegion, points, offset, targetOffset) {
  var p1 = getAlignOffset(refNodeRegion, points[1]);
  var p2 = getAlignOffset(elRegion, points[0]);
  var diff = [p2.left - p1.left, p2.top - p1.top];
  return {
    left: Math.round(elRegion.left - diff[0] + offset[0] - targetOffset[0]),
    top: Math.round(elRegion.top - diff[1] + offset[1] - targetOffset[1])
  };
}

/**
 * align dom node flexibly
 * @author yiminghe@gmail.com
 */

function isFailX(elFuturePos, elRegion, visibleRect) {
  return elFuturePos.left < visibleRect.left || elFuturePos.left + elRegion.width > visibleRect.right;
}

function isFailY(elFuturePos, elRegion, visibleRect) {
  return elFuturePos.top < visibleRect.top || elFuturePos.top + elRegion.height > visibleRect.bottom;
}

function isCompleteFailX(elFuturePos, elRegion, visibleRect) {
  return elFuturePos.left > visibleRect.right || elFuturePos.left + elRegion.width < visibleRect.left;
}

function isCompleteFailY(elFuturePos, elRegion, visibleRect) {
  return elFuturePos.top > visibleRect.bottom || elFuturePos.top + elRegion.height < visibleRect.top;
}

function flip(points, reg, map) {
  var ret = [];
  utils.each(points, function (p) {
    ret.push(p.replace(reg, function (m) {
      return map[m];
    }));
  });
  return ret;
}

function flipOffset(offset, index) {
  offset[index] = -offset[index];
  return offset;
}

function convertOffset(str, offsetLen) {
  var n;

  if (/%$/.test(str)) {
    n = parseInt(str.substring(0, str.length - 1), 10) / 100 * offsetLen;
  } else {
    n = parseInt(str, 10);
  }

  return n || 0;
}

function normalizeOffset(offset, el) {
  offset[0] = convertOffset(offset[0], el.width);
  offset[1] = convertOffset(offset[1], el.height);
}
/**
 * @param el
 * @param tgtRegion 参照节点所占的区域: { left, top, width, height }
 * @param align
 */


function doAlign(el, tgtRegion, align, isTgtRegionVisible) {
  var points = align.points;
  var offset = align.offset || [0, 0];
  var targetOffset = align.targetOffset || [0, 0];
  var overflow = align.overflow;
  var source = align.source || el;
  offset = [].concat(offset);
  targetOffset = [].concat(targetOffset);
  overflow = overflow || {};
  var newOverflowCfg = {};
  var fail = 0;
  var alwaysByViewport = !!(overflow && overflow.alwaysByViewport); // 当前节点可以被放置的显示区域

  var visibleRect = getVisibleRectForElement(source, alwaysByViewport); // 当前节点所占的区域, left/top/width/height

  var elRegion = getRegion(source); // 将 offset 转换成数值，支持百分比

  normalizeOffset(offset, elRegion);
  normalizeOffset(targetOffset, tgtRegion); // 当前节点将要被放置的位置

  var elFuturePos = getElFuturePos(elRegion, tgtRegion, points, offset, targetOffset); // 当前节点将要所处的区域

  var newElRegion = utils.merge(elRegion, elFuturePos); // 如果可视区域不能完全放置当前节点时允许调整

  if (visibleRect && (overflow.adjustX || overflow.adjustY) && isTgtRegionVisible) {
    if (overflow.adjustX) {
      // 如果横向不能放下
      if (isFailX(elFuturePos, elRegion, visibleRect)) {
        // 对齐位置反下
        var newPoints = flip(points, /[lr]/gi, {
          l: 'r',
          r: 'l'
        }); // 偏移量也反下

        var newOffset = flipOffset(offset, 0);
        var newTargetOffset = flipOffset(targetOffset, 0);
        var newElFuturePos = getElFuturePos(elRegion, tgtRegion, newPoints, newOffset, newTargetOffset);

        if (!isCompleteFailX(newElFuturePos, elRegion, visibleRect)) {
          fail = 1;
          points = newPoints;
          offset = newOffset;
          targetOffset = newTargetOffset;
        }
      }
    }

    if (overflow.adjustY) {
      // 如果纵向不能放下
      if (isFailY(elFuturePos, elRegion, visibleRect)) {
        // 对齐位置反下
        var _newPoints = flip(points, /[tb]/gi, {
          t: 'b',
          b: 't'
        }); // 偏移量也反下


        var _newOffset = flipOffset(offset, 1);

        var _newTargetOffset = flipOffset(targetOffset, 1);

        var _newElFuturePos = getElFuturePos(elRegion, tgtRegion, _newPoints, _newOffset, _newTargetOffset);

        if (!isCompleteFailY(_newElFuturePos, elRegion, visibleRect)) {
          fail = 1;
          points = _newPoints;
          offset = _newOffset;
          targetOffset = _newTargetOffset;
        }
      }
    } // 如果失败，重新计算当前节点将要被放置的位置


    if (fail) {
      elFuturePos = getElFuturePos(elRegion, tgtRegion, points, offset, targetOffset);
      utils.mix(newElRegion, elFuturePos);
    }

    var isStillFailX = isFailX(elFuturePos, elRegion, visibleRect);
    var isStillFailY = isFailY(elFuturePos, elRegion, visibleRect); // 检查反下后的位置是否可以放下了，如果仍然放不下：
    // 1. 复原修改过的定位参数

    if (isStillFailX || isStillFailY) {
      points = align.points;
      offset = align.offset || [0, 0];
      targetOffset = align.targetOffset || [0, 0];
    } // 2. 只有指定了可以调整当前方向才调整


    newOverflowCfg.adjustX = overflow.adjustX && isStillFailX;
    newOverflowCfg.adjustY = overflow.adjustY && isStillFailY; // 确实要调整，甚至可能会调整高度宽度

    if (newOverflowCfg.adjustX || newOverflowCfg.adjustY) {
      newElRegion = adjustForViewport(elFuturePos, elRegion, visibleRect, newOverflowCfg);
    }
  } // need judge to in case set fixed with in css on height auto element


  if (newElRegion.width !== elRegion.width) {
    utils.css(source, 'width', utils.width(source) + newElRegion.width - elRegion.width);
  }

  if (newElRegion.height !== elRegion.height) {
    utils.css(source, 'height', utils.height(source) + newElRegion.height - elRegion.height);
  } // https://github.com/kissyteam/kissy/issues/190
  // 相对于屏幕位置没变，而 left/top 变了
  // 例如 <div 'relative'><el absolute></div>


  utils.offset(source, {
    left: newElRegion.left,
    top: newElRegion.top
  }, {
    useCssRight: align.useCssRight,
    useCssBottom: align.useCssBottom,
    useCssTransform: align.useCssTransform,
    ignoreShake: align.ignoreShake
  });
  return {
    points: points,
    offset: offset,
    targetOffset: targetOffset,
    overflow: newOverflowCfg
  };
}
/**
 *  2012-04-26 yiminghe@gmail.com
 *   - 优化智能对齐算法
 *   - 慎用 resizeXX
 *
 *  2011-07-13 yiminghe@gmail.com note:
 *   - 增加智能对齐，以及大小调整选项
 **/

function isOutOfVisibleRect(target, alwaysByViewport) {
  var visibleRect = getVisibleRectForElement(target, alwaysByViewport);
  var targetRegion = getRegion(target);
  return !visibleRect || targetRegion.left + targetRegion.width <= visibleRect.left || targetRegion.top + targetRegion.height <= visibleRect.top || targetRegion.left >= visibleRect.right || targetRegion.top >= visibleRect.bottom;
}

function alignElement(el, refNode, align) {
  var target = align.target || refNode;
  var refNodeRegion = getRegion(target);
  var isTargetNotOutOfVisible = !isOutOfVisibleRect(target, align.overflow && align.overflow.alwaysByViewport);
  return doAlign(el, refNodeRegion, align, isTargetNotOutOfVisible);
}

alignElement.__getOffsetParent = getOffsetParent;
alignElement.__getVisibleRectForElement = getVisibleRectForElement;

/**
 * `tgtPoint`: { pageX, pageY } or { clientX, clientY }.
 * If client position provided, will internal convert to page position.
 */

function dist_web_alignPoint(el, tgtPoint, align) {
  var pageX;
  var pageY;
  var doc = utils.getDocument(el);
  var win = doc.defaultView || doc.parentWindow;
  var scrollX = utils.getWindowScrollLeft(win);
  var scrollY = utils.getWindowScrollTop(win);
  var viewportWidth = utils.viewportWidth(win);
  var viewportHeight = utils.viewportHeight(win);

  if ('pageX' in tgtPoint) {
    pageX = tgtPoint.pageX;
  } else {
    pageX = scrollX + tgtPoint.clientX;
  }

  if ('pageY' in tgtPoint) {
    pageY = tgtPoint.pageY;
  } else {
    pageY = scrollY + tgtPoint.clientY;
  }

  var tgtRegion = {
    left: pageX,
    top: pageY,
    width: 0,
    height: 0
  };
  var pointInView = pageX >= 0 && pageX <= scrollX + viewportWidth && pageY >= 0 && pageY <= scrollY + viewportHeight; // Provide default target point

  var points = [align.points[0], 'cc'];
  return doAlign(el, tgtRegion, _objectSpread2({}, align, {
    points: points
  }), pointInView);
}

/* harmony default export */ var dist_web = (alignElement);

//# sourceMappingURL=index.js.map

// EXTERNAL MODULE: ./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js
var ResizeObserver_es = __webpack_require__(80);

// CONCATENATED MODULE: ./node_modules/rc-align/es/util.js
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }



function isSamePoint(prev, next) {
  if (prev === next) return true;
  if (!prev || !next) return false;

  if ('pageX' in next && 'pageY' in next) {
    return prev.pageX === next.pageX && prev.pageY === next.pageY;
  }

  if ('clientX' in next && 'clientY' in next) {
    return prev.clientX === next.clientX && prev.clientY === next.clientY;
  }

  return false;
}
function restoreFocus(activeElement, container) {
  // Focus back if is in the container
  if (activeElement !== document.activeElement && contains(container, activeElement)) {
    activeElement.focus();
  }
}
function monitorResize(element, callback) {
  var prevWidth = null;
  var prevHeight = null;

  function onResize(_ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        target = _ref2[0].target;

    var _target$getBoundingCl = target.getBoundingClientRect(),
        width = _target$getBoundingCl.width,
        height = _target$getBoundingCl.height;

    var fixedWidth = Math.floor(width);
    var fixedHeight = Math.floor(height);

    if (prevWidth !== fixedWidth || prevHeight !== fixedHeight) {
      callback({
        width: fixedWidth,
        height: fixedHeight
      });
    }

    prevWidth = fixedWidth;
    prevHeight = fixedHeight;
  }

  var resizeObserver = new ResizeObserver_es["a" /* default */](onResize);

  if (element) {
    resizeObserver.observe(element);
  }

  return function () {
    resizeObserver.disconnect();
  };
}
// CONCATENATED MODULE: ./node_modules/rc-align/es/hooks/useBuffer.js

/* harmony default export */ var useBuffer = (function (callback, buffer) {
  var calledRef = react_default.a.useRef(false);
  var timeoutRef = react_default.a.useRef(null);

  function cancelTrigger() {
    window.clearTimeout(timeoutRef.current);
  }

  function trigger(force) {
    if (!calledRef.current || force === true) {
      if (callback() === false) {
        // Not delay since callback cancelled self
        return;
      }

      calledRef.current = true;
      cancelTrigger();
      timeoutRef.current = window.setTimeout(function () {
        calledRef.current = false;
      }, buffer);
    } else {
      cancelTrigger();
      timeoutRef.current = window.setTimeout(function () {
        calledRef.current = false;
        trigger();
      }, buffer);
    }
  }

  return [trigger, function () {
    calledRef.current = false;
    cancelTrigger();
  }];
});
// CONCATENATED MODULE: ./node_modules/rc-align/es/Align.js
function Align_slicedToArray(arr, i) { return Align_arrayWithHoles(arr) || Align_iterableToArrayLimit(arr, i) || Align_nonIterableRest(); }

function Align_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function Align_iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function Align_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function Align_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { Align_typeof = function _typeof(obj) { return typeof obj; }; } else { Align_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return Align_typeof(obj); }

/**
 * Removed props:
 *  - childrenProps
 */







function getElement(func) {
  if (typeof func !== 'function') return null;
  return func();
}

function getPoint(point) {
  if (Align_typeof(point) !== 'object' || !point) return null;
  return point;
}

var Align_Align = function Align(_ref, ref) {
  var children = _ref.children,
      disabled = _ref.disabled,
      target = _ref.target,
      align = _ref.align,
      onAlign = _ref.onAlign,
      monitorWindowResize = _ref.monitorWindowResize,
      _ref$monitorBufferTim = _ref.monitorBufferTime,
      monitorBufferTime = _ref$monitorBufferTim === void 0 ? 0 : _ref$monitorBufferTim;
  var cacheRef = react_default.a.useRef({});
  var nodeRef = react_default.a.useRef();
  var childNode = react_default.a.Children.only(children); // ===================== Align ======================
  // We save the props here to avoid closure makes props ood

  var forceAlignPropsRef = react_default.a.useRef({});
  forceAlignPropsRef.current.disabled = disabled;
  forceAlignPropsRef.current.target = target;
  forceAlignPropsRef.current.onAlign = onAlign;

  var _useBuffer = useBuffer(function () {
    var _forceAlignPropsRef$c = forceAlignPropsRef.current,
        latestDisabled = _forceAlignPropsRef$c.disabled,
        latestTarget = _forceAlignPropsRef$c.target;

    if (!latestDisabled && latestTarget) {
      var source = nodeRef.current;
      var result;
      var element = getElement(latestTarget);
      var point = getPoint(latestTarget);
      cacheRef.current.element = element;
      cacheRef.current.point = point; // IE lose focus after element realign
      // We should record activeElement and restore later

      var _document = document,
          activeElement = _document.activeElement;

      if (element) {
        result = alignElement(source, element, align);
      } else if (point) {
        result = dist_web_alignPoint(source, point, align);
      }

      restoreFocus(activeElement, source);

      if (onAlign) {
        onAlign(source, result);
      }

      return true;
    }

    return false;
  }, monitorBufferTime),
      _useBuffer2 = Align_slicedToArray(_useBuffer, 2),
      _forceAlign = _useBuffer2[0],
      cancelForceAlign = _useBuffer2[1]; // ===================== Effect =====================
  // Listen for target updated


  var resizeMonitor = react_default.a.useRef({
    cancel: function cancel() {}
  }); // Listen for source updated

  var sourceResizeMonitor = react_default.a.useRef({
    cancel: function cancel() {}
  });
  react_default.a.useEffect(function () {
    var element = getElement(target);
    var point = getPoint(target);

    if (nodeRef.current !== sourceResizeMonitor.current.element) {
      sourceResizeMonitor.current.cancel();
      sourceResizeMonitor.current.element = nodeRef.current;
      sourceResizeMonitor.current.cancel = monitorResize(nodeRef.current, _forceAlign);
    }

    if (cacheRef.current.element !== element || !isSamePoint(cacheRef.current.point, point)) {
      _forceAlign(); // Add resize observer


      if (resizeMonitor.current.element !== element) {
        resizeMonitor.current.cancel();
        resizeMonitor.current.element = element;
        resizeMonitor.current.cancel = monitorResize(element, _forceAlign);
      }
    }
  }); // Listen for disabled change

  react_default.a.useEffect(function () {
    if (!disabled) {
      _forceAlign();
    } else {
      cancelForceAlign();
    }
  }, [disabled]); // Listen for window resize

  var winResizeRef = react_default.a.useRef(null);
  react_default.a.useEffect(function () {
    if (monitorWindowResize) {
      if (!winResizeRef.current) {
        winResizeRef.current = addEventListenerWrap(window, 'resize', _forceAlign);
      }
    } else if (winResizeRef.current) {
      winResizeRef.current.remove();
      winResizeRef.current = null;
    }
  }, [monitorWindowResize]); // Clear all if unmount

  react_default.a.useEffect(function () {
    return function () {
      resizeMonitor.current.cancel();
      sourceResizeMonitor.current.cancel();
      if (winResizeRef.current) winResizeRef.current.remove();
      cancelForceAlign();
    };
  }, []); // ====================== Ref =======================

  react_default.a.useImperativeHandle(ref, function () {
    return {
      forceAlign: function forceAlign() {
        return _forceAlign(true);
      }
    };
  }); // ===================== Render =====================

  if (react_default.a.isValidElement(childNode)) {
    childNode = react_default.a.cloneElement(childNode, {
      ref: composeRef(childNode.ref, nodeRef)
    });
  }

  return childNode;
};

var RefAlign = react_default.a.forwardRef(Align_Align);
RefAlign.displayName = 'Align';
/* harmony default export */ var es_Align = (RefAlign);
// CONCATENATED MODULE: ./node_modules/rc-align/es/index.js
// export this package's api

/* harmony default export */ var es = (es_Align);
// EXTERNAL MODULE: ./node_modules/babel-runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(48);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// EXTERNAL MODULE: ./node_modules/babel-runtime/helpers/extends.js
var helpers_extends = __webpack_require__(22);
var extends_default = /*#__PURE__*/__webpack_require__.n(helpers_extends);

// EXTERNAL MODULE: ./node_modules/babel-runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(81);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/babel-runtime/helpers/createClass.js
var createClass = __webpack_require__(82);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/babel-runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(83);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/babel-runtime/helpers/inherits.js
var inherits = __webpack_require__(84);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// CONCATENATED MODULE: ./node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

function componentWillMount() {
  // Call this.constructor.gDSFP to support sub-classes.
  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
  if (state !== null && state !== undefined) {
    this.setState(state);
  }
}

function componentWillReceiveProps(nextProps) {
  // Call this.constructor.gDSFP to support sub-classes.
  // Use the setState() updater to ensure state isn't stale in certain edge cases.
  function updater(prevState) {
    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
    return state !== null && state !== undefined ? state : null;
  }
  // Binding "this" is important for shallow renderer support.
  this.setState(updater.bind(this));
}

function componentWillUpdate(nextProps, nextState) {
  try {
    var prevProps = this.props;
    var prevState = this.state;
    this.props = nextProps;
    this.state = nextState;
    this.__reactInternalSnapshotFlag = true;
    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(
      prevProps,
      prevState
    );
  } finally {
    this.props = prevProps;
    this.state = prevState;
  }
}

// React may warn about cWM/cWRP/cWU methods being deprecated.
// Add a flag to suppress these warnings for this special case.
componentWillMount.__suppressDeprecationWarning = true;
componentWillReceiveProps.__suppressDeprecationWarning = true;
componentWillUpdate.__suppressDeprecationWarning = true;

function polyfill(Component) {
  var prototype = Component.prototype;

  if (!prototype || !prototype.isReactComponent) {
    throw new Error('Can only polyfill class components');
  }

  if (
    typeof Component.getDerivedStateFromProps !== 'function' &&
    typeof prototype.getSnapshotBeforeUpdate !== 'function'
  ) {
    return Component;
  }

  // If new component APIs are defined, "unsafe" lifecycles won't be called.
  // Error if any of these lifecycles are present,
  // Because they would work differently between older and newer (16.3+) versions of React.
  var foundWillMountName = null;
  var foundWillReceivePropsName = null;
  var foundWillUpdateName = null;
  if (typeof prototype.componentWillMount === 'function') {
    foundWillMountName = 'componentWillMount';
  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {
    foundWillMountName = 'UNSAFE_componentWillMount';
  }
  if (typeof prototype.componentWillReceiveProps === 'function') {
    foundWillReceivePropsName = 'componentWillReceiveProps';
  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {
    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
  }
  if (typeof prototype.componentWillUpdate === 'function') {
    foundWillUpdateName = 'componentWillUpdate';
  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {
    foundWillUpdateName = 'UNSAFE_componentWillUpdate';
  }
  if (
    foundWillMountName !== null ||
    foundWillReceivePropsName !== null ||
    foundWillUpdateName !== null
  ) {
    var componentName = Component.displayName || Component.name;
    var newApiName =
      typeof Component.getDerivedStateFromProps === 'function'
        ? 'getDerivedStateFromProps()'
        : 'getSnapshotBeforeUpdate()';

    throw Error(
      'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' +
        componentName +
        ' uses ' +
        newApiName +
        ' but also contains the following legacy lifecycles:' +
        (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') +
        (foundWillReceivePropsName !== null
          ? '\n  ' + foundWillReceivePropsName
          : '') +
        (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') +
        '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' +
        'https://fb.me/react-async-component-lifecycle-hooks'
    );
  }

  // React <= 16.2 does not support static getDerivedStateFromProps.
  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
  // Newer versions of React will ignore these lifecycles if gDSFP exists.
  if (typeof Component.getDerivedStateFromProps === 'function') {
    prototype.componentWillMount = componentWillMount;
    prototype.componentWillReceiveProps = componentWillReceiveProps;
  }

  // React <= 16.2 does not support getSnapshotBeforeUpdate.
  // As a workaround, use cWU to invoke the new lifecycle.
  // Newer versions of React will ignore that lifecycle if gSBU exists.
  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
    if (typeof prototype.componentDidUpdate !== 'function') {
      throw new Error(
        'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'
      );
    }

    prototype.componentWillUpdate = componentWillUpdate;

    var componentDidUpdate = prototype.componentDidUpdate;

    prototype.componentDidUpdate = function componentDidUpdatePolyfill(
      prevProps,
      prevState,
      maybeSnapshot
    ) {
      // 16.3+ will not execute our will-update method;
      // It will pass a snapshot value to did-update though.
      // Older versions will require our polyfilled will-update value.
      // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
      // Because for <= 15.x versions this might be a "prevContext" object.
      // We also can't just check "__reactInternalSnapshot",
      // Because get-snapshot might return a falsy value.
      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
      var snapshot = this.__reactInternalSnapshotFlag
        ? this.__reactInternalSnapshot
        : maybeSnapshot;

      componentDidUpdate.call(this, prevProps, prevState, snapshot);
    };
  }

  return Component;
}



// CONCATENATED MODULE: ./node_modules/rc-animate/es/util/motion.js
var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

// ================= Transition =================
// Event wrapper. Copy from react source code
function makePrefixMap(styleProp, eventName) {
  var prefixes = {};

  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  prefixes['ms' + styleProp] = 'MS' + eventName;
  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

  return prefixes;
}

function getVendorPrefixes(domSupport, win) {
  var prefixes = {
    animationend: makePrefixMap('Animation', 'AnimationEnd'),
    transitionend: makePrefixMap('Transition', 'TransitionEnd')
  };

  if (domSupport) {
    if (!('AnimationEvent' in win)) {
      delete prefixes.animationend.animation;
    }

    if (!('TransitionEvent' in win)) {
      delete prefixes.transitionend.transition;
    }
  }

  return prefixes;
}

var vendorPrefixes = getVendorPrefixes(canUseDOM, typeof window !== 'undefined' ? window : {});

var motion_style = {};

if (canUseDOM) {
  motion_style = document.createElement('div').style;
}

var prefixedEventNames = {};

function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  }

  var prefixMap = vendorPrefixes[eventName];

  if (prefixMap) {
    var stylePropList = Object.keys(prefixMap);
    var len = stylePropList.length;
    for (var i = 0; i < len; i += 1) {
      var styleProp = stylePropList[i];
      if (Object.prototype.hasOwnProperty.call(prefixMap, styleProp) && styleProp in motion_style) {
        prefixedEventNames[eventName] = prefixMap[styleProp];
        return prefixedEventNames[eventName];
      }
    }
  }

  return '';
}

var animationEndName = getVendorPrefixedEventName('animationend');
var transitionEndName = getVendorPrefixedEventName('transitionend');
var supportTransition = !!(animationEndName && transitionEndName);

function motion_getTransitionName(transitionName, transitionType) {
  if (!transitionName) return null;

  if (typeof transitionName === 'object') {
    var type = transitionType.replace(/-\w/g, function (match) {
      return match[1].toUpperCase();
    });
    return transitionName[type];
  }

  return transitionName + '-' + transitionType;
}
// CONCATENATED MODULE: ./node_modules/rc-animate/es/CSSMotion.js






/* eslint-disable react/default-props-match-prop-types, react/no-multi-comp */








var STATUS_NONE = 'none';
var STATUS_APPEAR = 'appear';
var STATUS_ENTER = 'enter';
var STATUS_LEAVE = 'leave';

var MotionPropTypes = {
  eventProps: prop_types_default.a.object, // Internal usage. Only pass by CSSMotionList
  visible: prop_types_default.a.bool,
  children: prop_types_default.a.func,
  motionName: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.object]),
  motionAppear: prop_types_default.a.bool,
  motionEnter: prop_types_default.a.bool,
  motionLeave: prop_types_default.a.bool,
  motionLeaveImmediately: prop_types_default.a.bool, // Trigger leave motion immediately
  removeOnLeave: prop_types_default.a.bool,
  leavedClassName: prop_types_default.a.string,
  onAppearStart: prop_types_default.a.func,
  onAppearActive: prop_types_default.a.func,
  onAppearEnd: prop_types_default.a.func,
  onEnterStart: prop_types_default.a.func,
  onEnterActive: prop_types_default.a.func,
  onEnterEnd: prop_types_default.a.func,
  onLeaveStart: prop_types_default.a.func,
  onLeaveActive: prop_types_default.a.func,
  onLeaveEnd: prop_types_default.a.func
};

/**
 * `transitionSupport` is used for none transition test case.
 * Default we use browser transition event support check.
 */
function genCSSMotion(config) {
  var transitionSupport = config;
  var forwardRef = !!react_default.a.forwardRef;

  if (typeof config === 'object') {
    transitionSupport = config.transitionSupport;
    forwardRef = 'forwardRef' in config ? config.forwardRef : forwardRef;
  }

  function isSupportTransition(props) {
    return !!(props.motionName && transitionSupport);
  }

  var CSSMotion = function (_React$Component) {
    inherits_default()(CSSMotion, _React$Component);

    function CSSMotion() {
      classCallCheck_default()(this, CSSMotion);

      var _this = possibleConstructorReturn_default()(this, (CSSMotion.__proto__ || Object.getPrototypeOf(CSSMotion)).call(this));

      _this.onDomUpdate = function () {
        var _this$state = _this.state,
            status = _this$state.status,
            newStatus = _this$state.newStatus;
        var _this$props = _this.props,
            onAppearStart = _this$props.onAppearStart,
            onEnterStart = _this$props.onEnterStart,
            onLeaveStart = _this$props.onLeaveStart,
            onAppearActive = _this$props.onAppearActive,
            onEnterActive = _this$props.onEnterActive,
            onLeaveActive = _this$props.onLeaveActive,
            motionAppear = _this$props.motionAppear,
            motionEnter = _this$props.motionEnter,
            motionLeave = _this$props.motionLeave;


        if (!isSupportTransition(_this.props)) {
          return;
        }

        // Event injection
        var $ele = _this.getElement();
        if (_this.$cacheEle !== $ele) {
          _this.removeEventListener(_this.$cacheEle);
          _this.addEventListener($ele);
          _this.$cacheEle = $ele;
        }

        // Init status
        if (newStatus && status === STATUS_APPEAR && motionAppear) {
          _this.updateStatus(onAppearStart, null, null, function () {
            _this.updateActiveStatus(onAppearActive, STATUS_APPEAR);
          });
        } else if (newStatus && status === STATUS_ENTER && motionEnter) {
          _this.updateStatus(onEnterStart, null, null, function () {
            _this.updateActiveStatus(onEnterActive, STATUS_ENTER);
          });
        } else if (newStatus && status === STATUS_LEAVE && motionLeave) {
          _this.updateStatus(onLeaveStart, null, null, function () {
            _this.updateActiveStatus(onLeaveActive, STATUS_LEAVE);
          });
        }
      };

      _this.onMotionEnd = function (event) {
        var _this$state2 = _this.state,
            status = _this$state2.status,
            statusActive = _this$state2.statusActive;
        var _this$props2 = _this.props,
            onAppearEnd = _this$props2.onAppearEnd,
            onEnterEnd = _this$props2.onEnterEnd,
            onLeaveEnd = _this$props2.onLeaveEnd;

        if (status === STATUS_APPEAR && statusActive) {
          _this.updateStatus(onAppearEnd, { status: STATUS_NONE }, event);
        } else if (status === STATUS_ENTER && statusActive) {
          _this.updateStatus(onEnterEnd, { status: STATUS_NONE }, event);
        } else if (status === STATUS_LEAVE && statusActive) {
          _this.updateStatus(onLeaveEnd, { status: STATUS_NONE }, event);
        }
      };

      _this.setNodeRef = function (node) {
        var internalRef = _this.props.internalRef;

        _this.node = node;

        if (typeof internalRef === 'function') {
          internalRef(node);
        } else if (internalRef && 'current' in internalRef) {
          internalRef.current = node;
        }
      };

      _this.getElement = function () {
        return findDOMNode(_this.node || _this);
      };

      _this.addEventListener = function ($ele) {
        if (!$ele) return;

        $ele.addEventListener(transitionEndName, _this.onMotionEnd);
        $ele.addEventListener(animationEndName, _this.onMotionEnd);
      };

      _this.removeEventListener = function ($ele) {
        if (!$ele) return;

        $ele.removeEventListener(transitionEndName, _this.onMotionEnd);
        $ele.removeEventListener(animationEndName, _this.onMotionEnd);
      };

      _this.updateStatus = function (styleFunc, additionalState, event, callback) {
        var statusStyle = styleFunc ? styleFunc(_this.getElement(), event) : null;

        if (statusStyle === false || _this._destroyed) return;

        var nextStep = void 0;
        if (callback) {
          nextStep = function nextStep() {
            _this.nextFrame(callback);
          };
        }

        _this.setState(extends_default()({
          statusStyle: typeof statusStyle === 'object' ? statusStyle : null,
          newStatus: false
        }, additionalState), nextStep); // Trigger before next frame & after `componentDidMount`
      };

      _this.updateActiveStatus = function (styleFunc, currentStatus) {
        // `setState` use `postMessage` to trigger at the end of frame.
        // Let's use requestAnimationFrame to update new state in next frame.
        _this.nextFrame(function () {
          var status = _this.state.status;

          if (status !== currentStatus) return;

          _this.updateStatus(styleFunc, { statusActive: true });
        });
      };

      _this.nextFrame = function (func) {
        _this.cancelNextFrame();
        _this.raf = raf_default()(func);
      };

      _this.cancelNextFrame = function () {
        if (_this.raf) {
          raf_default.a.cancel(_this.raf);
          _this.raf = null;
        }
      };

      _this.state = {
        status: STATUS_NONE,
        statusActive: false,
        newStatus: false,
        statusStyle: null
      };
      _this.$cacheEle = null;
      _this.node = null;
      _this.raf = null;
      return _this;
    }

    createClass_default()(CSSMotion, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        this.onDomUpdate();
      }
    }, {
      key: 'componentDidUpdate',
      value: function componentDidUpdate() {
        this.onDomUpdate();
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this._destroyed = true;
        this.removeEventListener(this.$cacheEle);
        this.cancelNextFrame();
      }
    }, {
      key: 'render',
      value: function render() {
        var _classNames;

        var _state = this.state,
            status = _state.status,
            statusActive = _state.statusActive,
            statusStyle = _state.statusStyle;
        var _props = this.props,
            children = _props.children,
            motionName = _props.motionName,
            visible = _props.visible,
            removeOnLeave = _props.removeOnLeave,
            leavedClassName = _props.leavedClassName,
            eventProps = _props.eventProps;


        if (!children) return null;

        if (status === STATUS_NONE || !isSupportTransition(this.props)) {
          if (visible) {
            return children(extends_default()({}, eventProps), this.setNodeRef);
          } else if (!removeOnLeave) {
            return children(extends_default()({}, eventProps, { className: leavedClassName }), this.setNodeRef);
          }

          return null;
        }

        return children(extends_default()({}, eventProps, {
          className: classnames_default()((_classNames = {}, defineProperty_default()(_classNames, motion_getTransitionName(motionName, status), status !== STATUS_NONE), defineProperty_default()(_classNames, motion_getTransitionName(motionName, status + '-active'), status !== STATUS_NONE && statusActive), defineProperty_default()(_classNames, motionName, typeof motionName === 'string'), _classNames)),
          style: statusStyle
        }), this.setNodeRef);
      }
    }], [{
      key: 'getDerivedStateFromProps',
      value: function getDerivedStateFromProps(props, _ref) {
        var prevProps = _ref.prevProps,
            prevStatus = _ref.status;

        if (!isSupportTransition(props)) return {};

        var visible = props.visible,
            motionAppear = props.motionAppear,
            motionEnter = props.motionEnter,
            motionLeave = props.motionLeave,
            motionLeaveImmediately = props.motionLeaveImmediately;

        var newState = {
          prevProps: props
        };

        // Clean up status if prop set to false
        if (prevStatus === STATUS_APPEAR && !motionAppear || prevStatus === STATUS_ENTER && !motionEnter || prevStatus === STATUS_LEAVE && !motionLeave) {
          newState.status = STATUS_NONE;
          newState.statusActive = false;
          newState.newStatus = false;
        }

        // Appear
        if (!prevProps && visible && motionAppear) {
          newState.status = STATUS_APPEAR;
          newState.statusActive = false;
          newState.newStatus = true;
        }

        // Enter
        if (prevProps && !prevProps.visible && visible && motionEnter) {
          newState.status = STATUS_ENTER;
          newState.statusActive = false;
          newState.newStatus = true;
        }

        // Leave
        if (prevProps && prevProps.visible && !visible && motionLeave || !prevProps && motionLeaveImmediately && !visible && motionLeave) {
          newState.status = STATUS_LEAVE;
          newState.statusActive = false;
          newState.newStatus = true;
        }

        return newState;
      }
    }]);

    return CSSMotion;
  }(react_default.a.Component);

  CSSMotion.propTypes = extends_default()({}, MotionPropTypes, {

    internalRef: prop_types_default.a.oneOfType([prop_types_default.a.object, prop_types_default.a.func])
  });
  CSSMotion.defaultProps = {
    visible: true,
    motionEnter: true,
    motionAppear: true,
    motionLeave: true,
    removeOnLeave: true
  };


  polyfill(CSSMotion);

  if (!forwardRef) {
    return CSSMotion;
  }

  return react_default.a.forwardRef(function (props, ref) {
    return react_default.a.createElement(CSSMotion, extends_default()({ internalRef: ref }, props));
  });
}

/* harmony default export */ var es_CSSMotion = (genCSSMotion(supportTransition));
// CONCATENATED MODULE: ./node_modules/rc-trigger/es/PopupInner.js



var PopupInner_PopupInner = function PopupInner(props, ref) {
  var prefixCls = props.prefixCls,
      className = props.className,
      visible = props.visible,
      style = props.style,
      children = props.children,
      onMouseEnter = props.onMouseEnter,
      onMouseLeave = props.onMouseLeave,
      onMouseDown = props.onMouseDown,
      onTouchStart = props.onTouchStart;
  var childNode = children;

  if (react_default.a.Children.count(children) > 1) {
    childNode = react_default.a.createElement("div", {
      className: "".concat(prefixCls, "-content")
    }, children);
  }

  return react_default.a.createElement("div", {
    ref: ref,
    className: classnames_default()(className, !visible && "".concat(props.hiddenClassName)),
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onMouseDown: onMouseDown,
    onTouchStart: onTouchStart,
    style: style
  }, childNode);
};

var RefPopupInner = react_default.a.forwardRef(PopupInner_PopupInner);
RefPopupInner.displayName = 'PopupInner';
/* harmony default export */ var es_PopupInner = (RefPopupInner);
// CONCATENATED MODULE: ./node_modules/rc-trigger/es/utils/legacyUtil.js
function getMotion(_ref) {
  var prefixCls = _ref.prefixCls,
      motion = _ref.motion,
      animation = _ref.animation,
      transitionName = _ref.transitionName;

  if (motion) {
    return motion;
  }

  if (animation) {
    return {
      motionName: "".concat(prefixCls, "-").concat(animation)
    };
  }

  if (transitionName) {
    return {
      motionName: transitionName
    };
  }

  return null;
}
// CONCATENATED MODULE: ./node_modules/rc-trigger/es/Popup.js
function Popup_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { Popup_typeof = function _typeof(obj) { return typeof obj; }; } else { Popup_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return Popup_typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function Popup_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function Popup_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Popup_ownKeys(source, true).forEach(function (key) { Popup_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Popup_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function Popup_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function Popup_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function Popup_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function Popup_createClass(Constructor, protoProps, staticProps) { if (protoProps) Popup_defineProperties(Constructor.prototype, protoProps); if (staticProps) Popup_defineProperties(Constructor, staticProps); return Constructor; }

function Popup_possibleConstructorReturn(self, call) { if (call && (Popup_typeof(call) === "object" || typeof call === "function")) { return call; } return Popup_assertThisInitialized(self); }

function Popup_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function Popup_getPrototypeOf(o) { Popup_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Popup_getPrototypeOf(o); }

function Popup_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) Popup_setPrototypeOf(subClass, superClass); }

function Popup_setPrototypeOf(o, p) { Popup_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Popup_setPrototypeOf(o, p); }

/* eslint-disable no-param-reassign */








var Popup_CSSMotion = es_CSSMotion;

function supportMotion(motion) {
  return motion && motion.motionName;
}

var Popup_Popup =
/*#__PURE__*/
function (_Component) {
  Popup_inherits(Popup, _Component);

  function Popup() {
    var _this;

    Popup_classCallCheck(this, Popup);

    _this = Popup_possibleConstructorReturn(this, Popup_getPrototypeOf(Popup).apply(this, arguments));
    _this.state = {
      targetWidth: undefined,
      targetHeight: undefined,
      status: null,
      prevVisible: null,
      alignClassName: null
    };
    _this.popupRef = react_default.a.createRef();
    _this.alignRef = react_default.a.createRef();
    _this.nextFrameState = null;
    _this.nextFrameId = null;

    _this.onAlign = function (popupDomNode, align) {
      var status = _this.state.status;
      var _this$props = _this.props,
          getClassNameFromAlign = _this$props.getClassNameFromAlign,
          onAlign = _this$props.onAlign;
      var alignClassName = getClassNameFromAlign(align);

      if (status === 'align') {
        _this.setState({
          alignClassName: alignClassName,
          status: 'aligned'
        }, function () {
          _this.alignRef.current.forceAlign();
        });
      } else if (status === 'aligned') {
        _this.setState({
          alignClassName: alignClassName,
          status: 'afterAlign'
        });

        onAlign(popupDomNode, align);
      } else {
        _this.setState({
          alignClassName: alignClassName
        });
      }
    };

    _this.onMotionEnd = function () {
      var visible = _this.props.visible;

      _this.setState({
        status: visible ? 'AfterMotion' : 'stable'
      });
    };

    _this.setStateOnNextFrame = function (state) {
      _this.cancelFrameState();

      _this.nextFrameState = Popup_objectSpread({}, _this.nextFrameState, {}, state);
      _this.nextFrameId = raf_default()(function () {
        var submitState = Popup_objectSpread({}, _this.nextFrameState);

        _this.nextFrameState = null;

        _this.setState(submitState);
      });
    };

    _this.getMotion = function () {
      return Popup_objectSpread({}, getMotion(_this.props));
    }; // `target` on `rc-align` can accept as a function to get the bind element or a point.
    // ref: https://www.npmjs.com/package/rc-align


    _this.getAlignTarget = function () {
      var _this$props2 = _this.props,
          point = _this$props2.point,
          getRootDomNode = _this$props2.getRootDomNode;

      if (point) {
        return point;
      }

      return getRootDomNode;
    };

    _this.cancelFrameState = function () {
      raf_default.a.cancel(_this.nextFrameId);
    };

    _this.renderPopupElement = function () {
      var _this$state = _this.state,
          status = _this$state.status,
          targetHeight = _this$state.targetHeight,
          targetWidth = _this$state.targetWidth,
          alignClassName = _this$state.alignClassName;
      var _this$props3 = _this.props,
          prefixCls = _this$props3.prefixCls,
          className = _this$props3.className,
          style = _this$props3.style,
          stretch = _this$props3.stretch,
          visible = _this$props3.visible,
          align = _this$props3.align,
          destroyPopupOnHide = _this$props3.destroyPopupOnHide,
          onMouseEnter = _this$props3.onMouseEnter,
          onMouseLeave = _this$props3.onMouseLeave,
          onMouseDown = _this$props3.onMouseDown,
          onTouchStart = _this$props3.onTouchStart,
          children = _this$props3.children;
      var mergedClassName = classnames_default()(prefixCls, className, alignClassName);
      var hiddenClassName = "".concat(prefixCls, "-hidden"); // ================== Style ==================

      var sizeStyle = {};

      if (stretch) {
        // Stretch with target
        if (stretch.indexOf('height') !== -1) {
          sizeStyle.height = targetHeight;
        } else if (stretch.indexOf('minHeight') !== -1) {
          sizeStyle.minHeight = targetHeight;
        }

        if (stretch.indexOf('width') !== -1) {
          sizeStyle.width = targetWidth;
        } else if (stretch.indexOf('minWidth') !== -1) {
          sizeStyle.minWidth = targetWidth;
        }
      }

      var mergedStyle = Popup_objectSpread({}, sizeStyle, {}, _this.getZIndexStyle(), {}, style, {
        opacity: status === 'stable' || !visible ? undefined : 0
      }); // ================= Motions =================


      var mergedMotion = _this.getMotion();

      var mergedMotionVisible = visible;

      if (visible && status !== 'beforeMotion' && status !== 'motion' && status !== 'stable') {
        mergedMotion.motionAppear = false;
        mergedMotion.motionEnter = false;
        mergedMotion.motionLeave = false;
      }

      if (status === 'afterAlign' || status === 'beforeMotion') {
        mergedMotionVisible = false;
      } // ================== Align ==================


      var mergedAlignDisabled = !visible || status !== 'align' && status !== 'aligned' && status !== 'stable'; // ================== Popup ==================

      var mergedPopupVisible = true;

      if (status === 'stable') {
        mergedPopupVisible = visible;
      } // Only remove popup since mask may still need animation


      if (destroyPopupOnHide && !mergedPopupVisible) {
        return null;
      }

      return react_default.a.createElement(Popup_CSSMotion, Object.assign({
        visible: mergedMotionVisible
      }, mergedMotion, {
        removeOnLeave: false,
        onEnterEnd: _this.onMotionEnd,
        onLeaveEnd: _this.onMotionEnd
      }), function (_ref, motionRef) {
        var motionStyle = _ref.style,
            motionClassName = _ref.className;
        return react_default.a.createElement(es, {
          target: _this.getAlignTarget(),
          key: "popup",
          ref: _this.alignRef,
          monitorWindowResize: true,
          disabled: mergedAlignDisabled,
          align: align,
          onAlign: _this.onAlign
        }, react_default.a.createElement(es_PopupInner, {
          prefixCls: prefixCls,
          visible: mergedPopupVisible,
          hiddenClassName: hiddenClassName,
          className: classnames_default()(mergedClassName, motionClassName),
          ref: composeRef(motionRef, _this.popupRef),
          onMouseEnter: onMouseEnter,
          onMouseLeave: onMouseLeave,
          onMouseDown: onMouseDown,
          onTouchStart: onTouchStart,
          style: Popup_objectSpread({}, mergedStyle, {}, motionStyle)
        }, children));
      });
    };

    _this.renderMaskElement = function () {
      var _this$props4 = _this.props,
          mask = _this$props4.mask,
          maskMotion = _this$props4.maskMotion,
          maskTransitionName = _this$props4.maskTransitionName,
          maskAnimation = _this$props4.maskAnimation,
          prefixCls = _this$props4.prefixCls,
          visible = _this$props4.visible;

      if (!mask) {
        return null;
      }

      var motion = {};

      if (maskMotion && maskMotion.motionName) {
        motion = Popup_objectSpread({
          motionAppear: true
        }, getMotion({
          motion: maskMotion,
          prefixCls: prefixCls,
          transitionName: maskTransitionName,
          animation: maskAnimation
        }));
      }

      return react_default.a.createElement(Popup_CSSMotion, Object.assign({}, motion, {
        visible: visible,
        removeOnLeave: true
      }), function (_ref2) {
        var className = _ref2.className;
        return react_default.a.createElement("div", {
          style: _this.getZIndexStyle(),
          key: "mask",
          className: classnames_default()("".concat(prefixCls, "-mask"), className)
        });
      });
    };

    return _this;
  }

  Popup_createClass(Popup, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.componentDidUpdate();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var status = this.state.status;
      var _this$props5 = this.props,
          getRootDomNode = _this$props5.getRootDomNode,
          visible = _this$props5.visible,
          stretch = _this$props5.stretch; // If there is a pending state update, cancel it, a new one will be set if necessary

      this.cancelFrameState();

      if (visible && status !== 'stable') {
        switch (status) {
          case null:
            {
              this.setStateOnNextFrame({
                status: stretch ? 'measure' : 'align'
              });
              break;
            }

          case 'afterAlign':
            {
              this.setStateOnNextFrame({
                status: supportMotion(this.getMotion()) ? 'beforeMotion' : 'stable'
              });
              break;
            }

          case 'AfterMotion':
            {
              this.setStateOnNextFrame({
                status: 'stable'
              });
              break;
            }

          default:
            {
              // Go to next status
              var queue = ['measure', 'align', null, 'beforeMotion', 'motion'];
              var index = queue.indexOf(status);
              var nextStatus = queue[index + 1];

              if (index !== -1 && nextStatus) {
                this.setStateOnNextFrame({
                  status: nextStatus
                });
              }
            }
        }
      } // Measure stretch size


      if (status === 'measure') {
        var $ele = getRootDomNode();

        if ($ele) {
          this.setStateOnNextFrame({
            targetHeight: $ele.offsetHeight,
            targetWidth: $ele.offsetWidth
          });
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.cancelFrameState();
    }
  }, {
    key: "getZIndexStyle",
    value: function getZIndexStyle() {
      var zIndex = this.props.zIndex;
      return {
        zIndex: zIndex
      };
    }
  }, {
    key: "render",
    value: function render() {
      return react_default.a.createElement("div", null, this.renderMaskElement(), this.renderPopupElement());
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(_ref3, _ref4) {
      var visible = _ref3.visible,
          props = _objectWithoutProperties(_ref3, ["visible"]);

      var prevVisible = _ref4.prevVisible,
          status = _ref4.status;
      var newState = {
        prevVisible: visible,
        status: status
      };
      var mergedMotion = getMotion(props);

      if (prevVisible === null && visible === false) {
        // Init render should always be stable
        newState.status = 'stable';
      } else if (visible !== prevVisible) {
        if (visible || supportMotion(mergedMotion) && ['motion', 'AfterMotion', 'stable'].includes(status)) {
          newState.status = null;
        } else {
          newState.status = 'stable';
        }

        if (visible) {
          newState.alignClassName = null;
        }
      }

      return newState;
    }
  }]);

  return Popup;
}(react["Component"]);

/* harmony default export */ var es_Popup = (Popup_Popup);
/* eslint-enable */
// CONCATENATED MODULE: ./node_modules/rc-trigger/es/context.js

var TriggerContext = react_default.a.createContext(null);
/* harmony default export */ var context = (TriggerContext);
// CONCATENATED MODULE: ./node_modules/rc-trigger/es/index.js
function es_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { es_typeof = function _typeof(obj) { return typeof obj; }; } else { es_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return es_typeof(obj); }

function es_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function es_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { es_ownKeys(source, true).forEach(function (key) { es_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { es_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function es_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function es_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function es_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function es_createClass(Constructor, protoProps, staticProps) { if (protoProps) es_defineProperties(Constructor.prototype, protoProps); if (staticProps) es_defineProperties(Constructor, staticProps); return Constructor; }

function es_possibleConstructorReturn(self, call) { if (call && (es_typeof(call) === "object" || typeof call === "function")) { return call; } return es_assertThisInitialized(self); }

function es_getPrototypeOf(o) { es_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return es_getPrototypeOf(o); }

function es_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function es_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) es_setPrototypeOf(subClass, superClass); }

function es_setPrototypeOf(o, p) { es_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return es_setPrototypeOf(o, p); }













function noop() {}

function returnEmptyString() {
  return '';
}

function returnDocument() {
  return window.document;
}

var ALL_HANDLERS = ['onClick', 'onMouseDown', 'onTouchStart', 'onMouseEnter', 'onMouseLeave', 'onFocus', 'onBlur', 'onContextMenu'];
/**
 * Internal usage. Do not use in your code since this will be removed.
 */

function generateTrigger(PortalComponent) {
  var Trigger =
  /*#__PURE__*/
  function (_React$Component) {
    es_inherits(Trigger, _React$Component);

    function Trigger(props) {
      var _this;

      es_classCallCheck(this, Trigger);

      _this = es_possibleConstructorReturn(this, es_getPrototypeOf(Trigger).call(this, props));
      _this.popupRef = react_default.a.createRef();
      _this.triggerRef = react_default.a.createRef();

      _this.onMouseEnter = function (e) {
        var mouseEnterDelay = _this.props.mouseEnterDelay;

        _this.fireEvents('onMouseEnter', e);

        _this.delaySetPopupVisible(true, mouseEnterDelay, mouseEnterDelay ? null : e);
      };

      _this.onMouseMove = function (e) {
        _this.fireEvents('onMouseMove', e);

        _this.setPoint(e);
      };

      _this.onMouseLeave = function (e) {
        _this.fireEvents('onMouseLeave', e);

        _this.delaySetPopupVisible(false, _this.props.mouseLeaveDelay);
      };

      _this.onPopupMouseEnter = function () {
        _this.clearDelayTimer();
      };

      _this.onPopupMouseLeave = function (e) {
        // https://github.com/react-component/trigger/pull/13
        // react bug?
        if (e.relatedTarget && !e.relatedTarget.setTimeout && _this.popupRef.current && _this.popupRef.current.popupRef.current && contains(_this.popupRef.current.popupRef.current, e.relatedTarget)) {
          return;
        }

        _this.delaySetPopupVisible(false, _this.props.mouseLeaveDelay);
      };

      _this.onFocus = function (e) {
        _this.fireEvents('onFocus', e); // incase focusin and focusout


        _this.clearDelayTimer();

        if (_this.isFocusToShow()) {
          _this.focusTime = Date.now();

          _this.delaySetPopupVisible(true, _this.props.focusDelay);
        }
      };

      _this.onMouseDown = function (e) {
        _this.fireEvents('onMouseDown', e);

        _this.preClickTime = Date.now();
      };

      _this.onTouchStart = function (e) {
        _this.fireEvents('onTouchStart', e);

        _this.preTouchTime = Date.now();
      };

      _this.onBlur = function (e) {
        _this.fireEvents('onBlur', e);

        _this.clearDelayTimer();

        if (_this.isBlurToHide()) {
          _this.delaySetPopupVisible(false, _this.props.blurDelay);
        }
      };

      _this.onContextMenu = function (e) {
        e.preventDefault();

        _this.fireEvents('onContextMenu', e);

        _this.setPopupVisible(true, e);
      };

      _this.onContextMenuClose = function () {
        if (_this.isContextMenuToShow()) {
          _this.close();
        }
      };

      _this.onClick = function (event) {
        _this.fireEvents('onClick', event); // focus will trigger click


        if (_this.focusTime) {
          var preTime;

          if (_this.preClickTime && _this.preTouchTime) {
            preTime = Math.min(_this.preClickTime, _this.preTouchTime);
          } else if (_this.preClickTime) {
            preTime = _this.preClickTime;
          } else if (_this.preTouchTime) {
            preTime = _this.preTouchTime;
          }

          if (Math.abs(preTime - _this.focusTime) < 20) {
            return;
          }

          _this.focusTime = 0;
        }

        _this.preClickTime = 0;
        _this.preTouchTime = 0; // Only prevent default when all the action is click.
        // https://github.com/ant-design/ant-design/issues/17043
        // https://github.com/ant-design/ant-design/issues/17291

        if (_this.isClickToShow() && (_this.isClickToHide() || _this.isBlurToHide()) && event && event.preventDefault) {
          event.preventDefault();
        }

        var nextVisible = !_this.state.popupVisible;

        if (_this.isClickToHide() && !nextVisible || nextVisible && _this.isClickToShow()) {
          _this.setPopupVisible(!_this.state.popupVisible, event);
        }
      };

      _this.onPopupMouseDown = function () {
        _this.hasPopupMouseDown = true;
        clearTimeout(_this.mouseDownTimeout);
        _this.mouseDownTimeout = window.setTimeout(function () {
          _this.hasPopupMouseDown = false;
        }, 0);

        if (_this.context) {
          var _this$context;

          (_this$context = _this.context).onPopupMouseDown.apply(_this$context, arguments);
        }
      };

      _this.onDocumentClick = function (event) {
        if (_this.props.mask && !_this.props.maskClosable) {
          return;
        }

        var target = event.target;

        var root = _this.getRootDomNode();

        var popupNode = _this.getPopupDomNode();

        if (!contains(root, target) && !contains(popupNode, target) && !_this.hasPopupMouseDown) {
          _this.close();
        }
      };

      _this.getRootDomNode = function () {
        var getTriggerDOMNode = _this.props.getTriggerDOMNode;

        if (getTriggerDOMNode) {
          return getTriggerDOMNode(_this.triggerRef.current);
        }

        try {
          var domNode = findDOMNode(_this.triggerRef.current);

          if (domNode) {
            return domNode;
          }
        } catch (err) {// Do nothing
        }

        return react_dom_default.a.findDOMNode(es_assertThisInitialized(_this));
      };

      _this.getPopupClassNameFromAlign = function (align) {
        var className = [];
        var _this$props = _this.props,
            popupPlacement = _this$props.popupPlacement,
            builtinPlacements = _this$props.builtinPlacements,
            prefixCls = _this$props.prefixCls,
            alignPoint = _this$props.alignPoint,
            getPopupClassNameFromAlign = _this$props.getPopupClassNameFromAlign;

        if (popupPlacement && builtinPlacements) {
          className.push(getAlignPopupClassName(builtinPlacements, prefixCls, align, alignPoint));
        }

        if (getPopupClassNameFromAlign) {
          className.push(getPopupClassNameFromAlign(align));
        }

        return className.join(' ');
      };

      _this.getComponent = function () {
        var _this$props2 = _this.props,
            prefixCls = _this$props2.prefixCls,
            destroyPopupOnHide = _this$props2.destroyPopupOnHide,
            popupClassName = _this$props2.popupClassName,
            onPopupAlign = _this$props2.onPopupAlign,
            popupMotion = _this$props2.popupMotion,
            popupAnimation = _this$props2.popupAnimation,
            popupTransitionName = _this$props2.popupTransitionName,
            popupStyle = _this$props2.popupStyle,
            mask = _this$props2.mask,
            maskAnimation = _this$props2.maskAnimation,
            maskTransitionName = _this$props2.maskTransitionName,
            maskMotion = _this$props2.maskMotion,
            zIndex = _this$props2.zIndex,
            popup = _this$props2.popup,
            stretch = _this$props2.stretch,
            alignPoint = _this$props2.alignPoint;
        var _this$state = _this.state,
            popupVisible = _this$state.popupVisible,
            point = _this$state.point;

        var align = _this.getPopupAlign();

        var mouseProps = {};

        if (_this.isMouseEnterToShow()) {
          mouseProps.onMouseEnter = _this.onPopupMouseEnter;
        }

        if (_this.isMouseLeaveToHide()) {
          mouseProps.onMouseLeave = _this.onPopupMouseLeave;
        }

        mouseProps.onMouseDown = _this.onPopupMouseDown;
        mouseProps.onTouchStart = _this.onPopupMouseDown;
        return react_default.a.createElement(es_Popup, Object.assign({
          prefixCls: prefixCls,
          destroyPopupOnHide: destroyPopupOnHide,
          visible: popupVisible,
          point: alignPoint && point,
          className: popupClassName,
          align: align,
          onAlign: onPopupAlign,
          animation: popupAnimation,
          getClassNameFromAlign: _this.getPopupClassNameFromAlign
        }, mouseProps, {
          stretch: stretch,
          getRootDomNode: _this.getRootDomNode,
          style: popupStyle,
          mask: mask,
          zIndex: zIndex,
          transitionName: popupTransitionName,
          maskAnimation: maskAnimation,
          maskTransitionName: maskTransitionName,
          maskMotion: maskMotion,
          ref: _this.popupRef,
          motion: popupMotion
        }), typeof popup === 'function' ? popup() : popup);
      };

      _this.getContainer = function () {
        var _assertThisInitialize = es_assertThisInitialized(_this),
            props = _assertThisInitialize.props;

        var popupContainer = document.createElement('div'); // Make sure default popup container will never cause scrollbar appearing
        // https://github.com/react-component/trigger/issues/41

        popupContainer.style.position = 'absolute';
        popupContainer.style.top = '0';
        popupContainer.style.left = '0';
        popupContainer.style.width = '100%';
        var mountNode = props.getPopupContainer ? props.getPopupContainer(_this.getRootDomNode()) : props.getDocument().body;
        mountNode.appendChild(popupContainer);
        return popupContainer;
      };

      _this.setPoint = function (point) {
        var alignPoint = _this.props.alignPoint;
        if (!alignPoint || !point) return;

        _this.setState({
          point: {
            pageX: point.pageX,
            pageY: point.pageY
          }
        });
      };

      _this.handlePortalUpdate = function () {
        if (_this.state.prevPopupVisible !== _this.state.popupVisible) {
          _this.props.afterPopupVisibleChange(_this.state.popupVisible);
        }
      };

      var popupVisible;

      if ('popupVisible' in props) {
        popupVisible = !!props.popupVisible;
      } else {
        popupVisible = !!props.defaultPopupVisible;
      }

      _this.state = {
        prevPopupVisible: popupVisible,
        popupVisible: popupVisible
      };
      ALL_HANDLERS.forEach(function (h) {
        _this["fire".concat(h)] = function (e) {
          _this.fireEvents(h, e);
        };
      });
      return _this;
    }

    es_createClass(Trigger, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.componentDidUpdate();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        var props = this.props;
        var state = this.state; // We must listen to `mousedown` or `touchstart`, edge case:
        // https://github.com/ant-design/ant-design/issues/5804
        // https://github.com/react-component/calendar/issues/250
        // https://github.com/react-component/trigger/issues/50

        if (state.popupVisible) {
          var currentDocument;

          if (!this.clickOutsideHandler && (this.isClickToHide() || this.isContextMenuToShow())) {
            currentDocument = props.getDocument();
            this.clickOutsideHandler = addEventListenerWrap(currentDocument, 'mousedown', this.onDocumentClick);
          } // always hide on mobile


          if (!this.touchOutsideHandler) {
            currentDocument = currentDocument || props.getDocument();
            this.touchOutsideHandler = addEventListenerWrap(currentDocument, 'touchstart', this.onDocumentClick);
          } // close popup when trigger type contains 'onContextMenu' and document is scrolling.


          if (!this.contextMenuOutsideHandler1 && this.isContextMenuToShow()) {
            currentDocument = currentDocument || props.getDocument();
            this.contextMenuOutsideHandler1 = addEventListenerWrap(currentDocument, 'scroll', this.onContextMenuClose);
          } // close popup when trigger type contains 'onContextMenu' and window is blur.


          if (!this.contextMenuOutsideHandler2 && this.isContextMenuToShow()) {
            this.contextMenuOutsideHandler2 = addEventListenerWrap(window, 'blur', this.onContextMenuClose);
          }

          return;
        }

        this.clearOutsideHandler();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.clearDelayTimer();
        this.clearOutsideHandler();
        clearTimeout(this.mouseDownTimeout);
      }
    }, {
      key: "getPopupDomNode",
      value: function getPopupDomNode() {
        // for test
        if (this.popupRef.current && this.popupRef.current.popupRef.current) {
          return this.popupRef.current.popupRef.current;
        }

        return null;
      }
    }, {
      key: "getPopupAlign",
      value: function getPopupAlign() {
        var props = this.props;
        var popupPlacement = props.popupPlacement,
            popupAlign = props.popupAlign,
            builtinPlacements = props.builtinPlacements;

        if (popupPlacement && builtinPlacements) {
          return getAlignFromPlacement(builtinPlacements, popupPlacement, popupAlign);
        }

        return popupAlign;
      }
      /**
       * @param popupVisible    Show or not the popup element
       * @param event           SyntheticEvent, used for `pointAlign`
       */

    }, {
      key: "setPopupVisible",
      value: function setPopupVisible(popupVisible, event) {
        var alignPoint = this.props.alignPoint;
        var prevPopupVisible = this.state.popupVisible;
        this.clearDelayTimer();

        if (prevPopupVisible !== popupVisible) {
          if (!('popupVisible' in this.props)) {
            this.setState({
              popupVisible: popupVisible,
              prevPopupVisible: prevPopupVisible
            });
          }

          this.props.onPopupVisibleChange(popupVisible);
        } // Always record the point position since mouseEnterDelay will delay the show


        if (alignPoint && event) {
          this.setPoint(event);
        }
      }
    }, {
      key: "delaySetPopupVisible",
      value: function delaySetPopupVisible(visible, delayS, event) {
        var _this2 = this;

        var delay = delayS * 1000;
        this.clearDelayTimer();

        if (delay) {
          var point = event ? {
            pageX: event.pageX,
            pageY: event.pageY
          } : null;
          this.delayTimer = window.setTimeout(function () {
            _this2.setPopupVisible(visible, point);

            _this2.clearDelayTimer();
          }, delay);
        } else {
          this.setPopupVisible(visible, event);
        }
      }
    }, {
      key: "clearDelayTimer",
      value: function clearDelayTimer() {
        if (this.delayTimer) {
          clearTimeout(this.delayTimer);
          this.delayTimer = null;
        }
      }
    }, {
      key: "clearOutsideHandler",
      value: function clearOutsideHandler() {
        if (this.clickOutsideHandler) {
          this.clickOutsideHandler.remove();
          this.clickOutsideHandler = null;
        }

        if (this.contextMenuOutsideHandler1) {
          this.contextMenuOutsideHandler1.remove();
          this.contextMenuOutsideHandler1 = null;
        }

        if (this.contextMenuOutsideHandler2) {
          this.contextMenuOutsideHandler2.remove();
          this.contextMenuOutsideHandler2 = null;
        }

        if (this.touchOutsideHandler) {
          this.touchOutsideHandler.remove();
          this.touchOutsideHandler = null;
        }
      }
    }, {
      key: "createTwoChains",
      value: function createTwoChains(event) {
        var childPros = this.props.children.props;
        var props = this.props;

        if (childPros[event] && props[event]) {
          return this["fire".concat(event)];
        }

        return childPros[event] || props[event];
      }
    }, {
      key: "isClickToShow",
      value: function isClickToShow() {
        var _this$props3 = this.props,
            action = _this$props3.action,
            showAction = _this$props3.showAction;
        return action.indexOf('click') !== -1 || showAction.indexOf('click') !== -1;
      }
    }, {
      key: "isContextMenuToShow",
      value: function isContextMenuToShow() {
        var _this$props4 = this.props,
            action = _this$props4.action,
            showAction = _this$props4.showAction;
        return action.indexOf('contextMenu') !== -1 || showAction.indexOf('contextMenu') !== -1;
      }
    }, {
      key: "isClickToHide",
      value: function isClickToHide() {
        var _this$props5 = this.props,
            action = _this$props5.action,
            hideAction = _this$props5.hideAction;
        return action.indexOf('click') !== -1 || hideAction.indexOf('click') !== -1;
      }
    }, {
      key: "isMouseEnterToShow",
      value: function isMouseEnterToShow() {
        var _this$props6 = this.props,
            action = _this$props6.action,
            showAction = _this$props6.showAction;
        return action.indexOf('hover') !== -1 || showAction.indexOf('mouseEnter') !== -1;
      }
    }, {
      key: "isMouseLeaveToHide",
      value: function isMouseLeaveToHide() {
        var _this$props7 = this.props,
            action = _this$props7.action,
            hideAction = _this$props7.hideAction;
        return action.indexOf('hover') !== -1 || hideAction.indexOf('mouseLeave') !== -1;
      }
    }, {
      key: "isFocusToShow",
      value: function isFocusToShow() {
        var _this$props8 = this.props,
            action = _this$props8.action,
            showAction = _this$props8.showAction;
        return action.indexOf('focus') !== -1 || showAction.indexOf('focus') !== -1;
      }
    }, {
      key: "isBlurToHide",
      value: function isBlurToHide() {
        var _this$props9 = this.props,
            action = _this$props9.action,
            hideAction = _this$props9.hideAction;
        return action.indexOf('focus') !== -1 || hideAction.indexOf('blur') !== -1;
      }
    }, {
      key: "forcePopupAlign",
      value: function forcePopupAlign() {
        if (this.state.popupVisible && this.popupRef.current && this.popupRef.current.alignRef.current) {
          this.popupRef.current.alignRef.current.forceAlign();
        }
      }
    }, {
      key: "fireEvents",
      value: function fireEvents(type, e) {
        var childCallback = this.props.children.props[type];

        if (childCallback) {
          childCallback(e);
        }

        var callback = this.props[type];

        if (callback) {
          callback(e);
        }
      }
    }, {
      key: "close",
      value: function close() {
        this.setPopupVisible(false);
      }
    }, {
      key: "render",
      value: function render() {
        var popupVisible = this.state.popupVisible;
        var _this$props10 = this.props,
            children = _this$props10.children,
            forceRender = _this$props10.forceRender,
            alignPoint = _this$props10.alignPoint,
            className = _this$props10.className;
        var child = react_default.a.Children.only(children);
        var newChildProps = {
          key: 'trigger'
        };

        if (this.isContextMenuToShow()) {
          newChildProps.onContextMenu = this.onContextMenu;
        } else {
          newChildProps.onContextMenu = this.createTwoChains('onContextMenu');
        }

        if (this.isClickToHide() || this.isClickToShow()) {
          newChildProps.onClick = this.onClick;
          newChildProps.onMouseDown = this.onMouseDown;
          newChildProps.onTouchStart = this.onTouchStart;
        } else {
          newChildProps.onClick = this.createTwoChains('onClick');
          newChildProps.onMouseDown = this.createTwoChains('onMouseDown');
          newChildProps.onTouchStart = this.createTwoChains('onTouchStart');
        }

        if (this.isMouseEnterToShow()) {
          newChildProps.onMouseEnter = this.onMouseEnter;

          if (alignPoint) {
            newChildProps.onMouseMove = this.onMouseMove;
          }
        } else {
          newChildProps.onMouseEnter = this.createTwoChains('onMouseEnter');
        }

        if (this.isMouseLeaveToHide()) {
          newChildProps.onMouseLeave = this.onMouseLeave;
        } else {
          newChildProps.onMouseLeave = this.createTwoChains('onMouseLeave');
        }

        if (this.isFocusToShow() || this.isBlurToHide()) {
          newChildProps.onFocus = this.onFocus;
          newChildProps.onBlur = this.onBlur;
        } else {
          newChildProps.onFocus = this.createTwoChains('onFocus');
          newChildProps.onBlur = this.createTwoChains('onBlur');
        }

        var childrenClassName = classnames_default()(child && child.props && child.props.className, className);

        if (childrenClassName) {
          newChildProps.className = childrenClassName;
        }

        var cloneProps = es_objectSpread({}, newChildProps);

        if (supportRef(child)) {
          cloneProps.ref = composeRef(this.triggerRef, child.ref);
        }

        var trigger = react_default.a.cloneElement(child, cloneProps);
        var portal; // prevent unmounting after it's rendered

        if (popupVisible || this.popupRef.current || forceRender) {
          portal = react_default.a.createElement(PortalComponent, {
            key: "portal",
            getContainer: this.getContainer,
            didUpdate: this.handlePortalUpdate
          }, this.getComponent());
        }

        return react_default.a.createElement(context.Provider, {
          value: {
            onPopupMouseDown: this.onPopupMouseDown
          }
        }, trigger, portal);
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(_ref, prevState) {
        var popupVisible = _ref.popupVisible;
        var newState = {};

        if (popupVisible !== undefined && prevState.popupVisible !== popupVisible) {
          newState.popupVisible = popupVisible;
          newState.prevPopupVisible = prevState.popupVisible;
        }

        return newState;
      }
    }]);

    return Trigger;
  }(react_default.a.Component);

  Trigger.contextType = context;
  Trigger.defaultProps = {
    prefixCls: 'rc-trigger-popup',
    getPopupClassNameFromAlign: returnEmptyString,
    getDocument: returnDocument,
    onPopupVisibleChange: noop,
    afterPopupVisibleChange: noop,
    onPopupAlign: noop,
    popupClassName: '',
    mouseEnterDelay: 0,
    mouseLeaveDelay: 0.1,
    focusDelay: 0,
    blurDelay: 0.15,
    popupStyle: {},
    destroyPopupOnHide: false,
    popupAlign: {},
    defaultPopupVisible: false,
    mask: false,
    maskClosable: true,
    action: [],
    showAction: [],
    hideAction: []
  };
  return Trigger;
}
/* harmony default export */ var rc_trigger_es = (generateTrigger(Portal_Portal));
// CONCATENATED MODULE: ./node_modules/rc-tooltip/es/placements.js
var autoAdjustOverflow = {
  adjustX: 1,
  adjustY: 1
};
var targetOffset = [0, 0];
var placements = {
  left: {
    points: ['cr', 'cl'],
    overflow: autoAdjustOverflow,
    offset: [-4, 0],
    targetOffset: targetOffset
  },
  right: {
    points: ['cl', 'cr'],
    overflow: autoAdjustOverflow,
    offset: [4, 0],
    targetOffset: targetOffset
  },
  top: {
    points: ['bc', 'tc'],
    overflow: autoAdjustOverflow,
    offset: [0, -4],
    targetOffset: targetOffset
  },
  bottom: {
    points: ['tc', 'bc'],
    overflow: autoAdjustOverflow,
    offset: [0, 4],
    targetOffset: targetOffset
  },
  topLeft: {
    points: ['bl', 'tl'],
    overflow: autoAdjustOverflow,
    offset: [0, -4],
    targetOffset: targetOffset
  },
  leftTop: {
    points: ['tr', 'tl'],
    overflow: autoAdjustOverflow,
    offset: [-4, 0],
    targetOffset: targetOffset
  },
  topRight: {
    points: ['br', 'tr'],
    overflow: autoAdjustOverflow,
    offset: [0, -4],
    targetOffset: targetOffset
  },
  rightTop: {
    points: ['tl', 'tr'],
    overflow: autoAdjustOverflow,
    offset: [4, 0],
    targetOffset: targetOffset
  },
  bottomRight: {
    points: ['tr', 'br'],
    overflow: autoAdjustOverflow,
    offset: [0, 4],
    targetOffset: targetOffset
  },
  rightBottom: {
    points: ['bl', 'br'],
    overflow: autoAdjustOverflow,
    offset: [4, 0],
    targetOffset: targetOffset
  },
  bottomLeft: {
    points: ['tl', 'bl'],
    overflow: autoAdjustOverflow,
    offset: [0, 4],
    targetOffset: targetOffset
  },
  leftBottom: {
    points: ['br', 'bl'],
    overflow: autoAdjustOverflow,
    offset: [-4, 0],
    targetOffset: targetOffset
  }
};
/* harmony default export */ var es_placements = (placements);
// CONCATENATED MODULE: ./node_modules/rc-tooltip/es/Content.js


var Content_Content = function Content(props) {
  var overlay = props.overlay,
      prefixCls = props.prefixCls,
      id = props.id;
  return react_default.a.createElement("div", {
    className: "".concat(prefixCls, "-inner"),
    id: id,
    role: "tooltip"
  }, typeof overlay === 'function' ? overlay() : overlay);
};

/* harmony default export */ var es_Content = (Content_Content);
// CONCATENATED MODULE: ./node_modules/rc-tooltip/es/Tooltip.js
function Tooltip_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function Tooltip_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Tooltip_ownKeys(Object(source), true).forEach(function (key) { Tooltip_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Tooltip_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function Tooltip_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function Tooltip_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Tooltip_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function Tooltip_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }






var Tooltip_Tooltip = function Tooltip(props, ref) {
  var overlayClassName = props.overlayClassName,
      _props$trigger = props.trigger,
      trigger = _props$trigger === void 0 ? ['hover'] : _props$trigger,
      _props$mouseEnterDela = props.mouseEnterDelay,
      mouseEnterDelay = _props$mouseEnterDela === void 0 ? 0 : _props$mouseEnterDela,
      _props$mouseLeaveDela = props.mouseLeaveDelay,
      mouseLeaveDelay = _props$mouseLeaveDela === void 0 ? 0.1 : _props$mouseLeaveDela,
      overlayStyle = props.overlayStyle,
      _props$prefixCls = props.prefixCls,
      prefixCls = _props$prefixCls === void 0 ? 'rc-tooltip' : _props$prefixCls,
      children = props.children,
      onVisibleChange = props.onVisibleChange,
      afterVisibleChange = props.afterVisibleChange,
      transitionName = props.transitionName,
      animation = props.animation,
      _props$placement = props.placement,
      placement = _props$placement === void 0 ? 'right' : _props$placement,
      _props$align = props.align,
      align = _props$align === void 0 ? {} : _props$align,
      _props$destroyTooltip = props.destroyTooltipOnHide,
      destroyTooltipOnHide = _props$destroyTooltip === void 0 ? false : _props$destroyTooltip,
      defaultVisible = props.defaultVisible,
      getTooltipContainer = props.getTooltipContainer,
      restProps = Tooltip_objectWithoutProperties(props, ["overlayClassName", "trigger", "mouseEnterDelay", "mouseLeaveDelay", "overlayStyle", "prefixCls", "children", "onVisibleChange", "afterVisibleChange", "transitionName", "animation", "placement", "align", "destroyTooltipOnHide", "defaultVisible", "getTooltipContainer"]);

  var domRef = Object(react["useRef"])(null);
  Object(react["useImperativeHandle"])(ref, function () {
    return domRef.current;
  });

  var extraProps = Tooltip_objectSpread({}, restProps);

  if ('visible' in props) {
    extraProps.popupVisible = props.visible;
  }

  var getPopupElement = function getPopupElement() {
    var _props$arrowContent = props.arrowContent,
        arrowContent = _props$arrowContent === void 0 ? null : _props$arrowContent,
        overlay = props.overlay,
        id = props.id;
    return [react_default.a.createElement("div", {
      className: "".concat(prefixCls, "-arrow"),
      key: "arrow"
    }, arrowContent), react_default.a.createElement(es_Content, {
      key: "content",
      prefixCls: prefixCls,
      id: id,
      overlay: overlay
    })];
  };

  return react_default.a.createElement(rc_trigger_es, Object.assign({
    popupClassName: overlayClassName,
    prefixCls: prefixCls,
    popup: getPopupElement,
    action: trigger,
    builtinPlacements: placements,
    popupPlacement: placement,
    ref: domRef,
    popupAlign: align,
    getPopupContainer: getTooltipContainer,
    onPopupVisibleChange: onVisibleChange,
    afterPopupVisibleChange: afterVisibleChange,
    popupTransitionName: transitionName,
    popupAnimation: animation,
    defaultPopupVisible: defaultVisible,
    destroyPopupOnHide: destroyTooltipOnHide,
    mouseLeaveDelay: mouseLeaveDelay,
    popupStyle: overlayStyle,
    mouseEnterDelay: mouseEnterDelay
  }, extraProps), children);
};

/* harmony default export */ var es_Tooltip = (Object(react["forwardRef"])(Tooltip_Tooltip));
// CONCATENATED MODULE: ./node_modules/rc-tooltip/es/index.js

/* harmony default export */ var rc_tooltip_es = (es_Tooltip);
// EXTERNAL MODULE: ./node_modules/rc-tooltip/assets/bootstrap_white.css
var bootstrap_white = __webpack_require__(134);

// EXTERNAL MODULE: ./src/unitNumber/output.ts
var unitNumber_output = __webpack_require__(2);

// EXTERNAL MODULE: ./src/libqalc/Tree.ts
var Tree = __webpack_require__(3);

// EXTERNAL MODULE: ./src/libqalc/parser.ts
var parser = __webpack_require__(7);

// EXTERNAL MODULE: ./src/libqalc/globalScope.ts + 2 modules
var globalScope = __webpack_require__(10);

// EXTERNAL MODULE: ./src/libqalc/evaluator.ts + 1 modules
var evaluator = __webpack_require__(9);

// EXTERNAL MODULE: ./src/libqalc/init.ts
var init = __webpack_require__(47);

// CONCATENATED MODULE: ./src/libqalc/index.ts
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





function unitConvertedTaggedString(node, scope) {
    if (node instanceof Tree["a" /* FunctionCallNode */] && node.fnname === "to") {
        const unit = Object(evaluator["b" /* evaluate */])(node.operands[1], scope);
        const numericValue = Object(evaluator["b" /* evaluate */])(node.operands[0], scope).value.div(unit.value);
        return unitNumber_output["a" /* TaggedString */].t `${numericValue.toString()} ${unit.toTaggedString()}`;
    }
    else
        return Object(evaluator["b" /* evaluate */])(node, scope).value.toTaggedString();
}
function libqalc_isDefinition(node) {
    if (node.value.id && node instanceof Tree["b" /* IdentifierNode */])
        return true;
}
function qalculationHasSideeffect(input) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const tree = Tree["g" /* rpnToTree */](parser["e" /* toRPN */](parser["d" /* preprocess */](parser["g" /* tokenize */](input))));
            return Object(evaluator["c" /* evaluationHasSideeffect */])(tree, globalScope["a" /* default */]);
        }
        catch (e) {
            // can't parse -> cant execute -> no sideeffects
            return false;
        }
    });
}
function qalculate(_input, debug = false) {
    return __awaiter(this, void 0, void 0, function* () {
        const scope = globalScope["a" /* default */];
        if (debug)
            return qalculateDebug(_input);
        const { code, comment } = Object(evaluator["e" /* stripCommentsTrim */])(_input);
        const inputTree = Tree["g" /* rpnToTree */](parser["e" /* toRPN */](parser["d" /* preprocess */](parser["g" /* tokenize */](code))));
        const evaled = Object(evaluator["b" /* evaluate */])(inputTree, scope);
        if (libqalc_isDefinition(evaled))
            return {
                input: inputTree.toTaggedString(),
                output: Object(evaluator["a" /* define */])(evaled, scope),
                type: "definition",
                comment,
            };
        return {
            input: inputTree.toTaggedString(),
            output: unitNumber_output["a" /* TaggedString */].t `${unitConvertedTaggedString(evaled, scope)}`,
            type: "result",
            comment,
        };
    });
}
function qalculateDebug(_input) {
    return __awaiter(this, void 0, void 0, function* () {
        const scope = globalScope["a" /* default */];
        const { code, comment } = Object(evaluator["e" /* stripCommentsTrim */])(_input);
        if (code.length === 0)
            return {
                input: unitNumber_output["a" /* TaggedString */].t ``,
                output: unitNumber_output["a" /* TaggedString */].t ``,
                type: "result",
                comment,
            };
        let error = "";
        let tokens = null;
        try {
            tokens = [...parser["g" /* tokenize */](code)];
        }
        catch (e) {
            console.error(e);
            error += e + "\n";
        }
        const pre = (e) => (e.stack || e) + "\n";
        let preproc = null;
        if (tokens)
            try {
                preproc = [...parser["d" /* preprocess */](tokens)];
            }
            catch (e) {
                console.error(e);
                error += pre(e);
            }
        let rpn = null;
        if (preproc)
            try {
                rpn = [...parser["e" /* toRPN */](preproc)];
            }
            catch (e) {
                error += pre(e);
            }
        let parsed = null;
        if (rpn)
            try {
                parsed = Tree["g" /* rpnToTree */](rpn);
            }
            catch (e) {
                error += pre(e);
            }
        let evaled = null;
        if (parsed)
            try {
                evaled = Object(evaluator["b" /* evaluate */])(parsed, scope);
            }
            catch (e) {
                error += pre(e);
            }
        if (evaled && libqalc_isDefinition(evaled))
            return {
                input: parsed.toTaggedString(),
                output: Object(evaluator["a" /* define */])(evaled, scope),
                type: "definition",
                comment,
            };
        const output = unitNumber_output["a" /* TaggedString */].t `
res = ${evaled
            ? unitNumber_output["a" /* TaggedString */].t `${evaled.toTaggedString()} = ${unitConvertedTaggedString(evaled, scope)}`
            : "err"}
tokens = ${tokens ? tokens.map(t => parser["f" /* tokenToDebugString */](t)).join(" ") : "err"}
preproc = ${preproc
            ? preproc.map(t => parser["f" /* tokenToDebugString */](t)).join(" ")
            : "err"}
rpn = ${rpn ? rpn.map(t => parser["f" /* tokenToDebugString */](t)).join(" ") : "err"}
parsed = ${parsed ? parsed.toDebugString() : "err"}
${error ? "error = " + error : ""}`;
        return {
            input: parsed ? parsed.toTaggedString() : unitNumber_output["a" /* TaggedString */].t ``,
            output,
            type: "result",
            comment,
        };
    });
}



// EXTERNAL MODULE: ./style.scss
var style_0 = __webpack_require__(38);

// EXTERNAL MODULE: ./src/unitNumber/index.ts + 4 modules
var unitNumber = __webpack_require__(8);

// EXTERNAL MODULE: ./src/libqalc/TokenType.ts
var TokenType = __webpack_require__(4);

// CONCATENATED MODULE: ./src/ui/gui-store.ts
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var gui_store_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






class GuiLineElement {
    constructor(data) {
        this.data = data;
        this.id = GuiLineElement.idCounter++;
    }
}
GuiLineElement.idCounter = 0;
class gui_store_GuiState {
    constructor() {
        this.lines = [];
        this.currentInput = "";
        this.currentOutput = new unitNumber_output["a" /* TaggedString */]();
    }
    addLine(line) {
        this.lines.unshift(line);
    }
    removeLine(index) {
        this.lines.splice(index, 1);
    }
    submit() {
        const input = this.currentInput;
        if (input.trim().length > 0)
            qalculate(input)
                .then(data => this.addLine(new GuiLineElement(data)))
                .catch(reason => {
                console.error("could not qalc", input, reason);
                this.addLine(new GuiLineElement({
                    input: unitNumber_output["a" /* TaggedString */].t `${input}`,
                    output: new unitNumber_output["a" /* TaggedString */]("" + reason),
                    type: "error",
                }));
            });
        this.currentInput = "";
        this.currentOutput = new unitNumber_output["a" /* TaggedString */]();
    }
    loadPresets(presets) {
        return gui_store_awaiter(this, void 0, void 0, function* () {
            const lines = yield Promise.all(presets.map(input => qalculate(input)
                .then(data => new GuiLineElement(data))
                .catch(error => new GuiLineElement({
                input: unitNumber_output["a" /* TaggedString */].t `${input}`,
                output: new unitNumber_output["a" /* TaggedString */]("" + error),
                type: "error",
            }))));
            for (const line of lines)
                this.addLine(line);
        });
    }
    setInput(input) {
        return gui_store_awaiter(this, void 0, void 0, function* () {
            this.currentInput = input;
            if (yield qalculationHasSideeffect(input))
                this.currentOutput = new unitNumber_output["a" /* TaggedString */]("press enter to execute");
            else {
                this.currentOutput = yield this.calcToString(input);
            }
        });
    }
    calcToString(input) {
        return gui_store_awaiter(this, void 0, void 0, function* () {
            return qalculate(input)
                .then(({ output }) => output)
                .catch(reason => new unitNumber_output["a" /* TaggedString */]("" + reason));
        });
    }
}
__decorate([
    mobx_module["observable"]
], gui_store_GuiState.prototype, "lines", void 0);
__decorate([
    mobx_module["observable"]
], gui_store_GuiState.prototype, "currentInput", void 0);
__decorate([
    mobx_module["observable"]
], gui_store_GuiState.prototype, "currentOutput", void 0);
class gui_store_UnitCompleter {
    constructor(target) {
        this.target = target;
        this.cursorIndexChars = null;
        this.replaceCurrent = (u) => {
            let { tokens, cursorIndex } = this.tokens;
            if (cursorIndex !== null) {
                const before = tokens[cursorIndex];
                if (before.str === "to ")
                    cursorIndex++;
                tokens[cursorIndex] = {
                    str: u,
                    type: TokenType["a" /* Identifier */],
                    start: 0,
                };
            }
            this.target.currentInput = tokens.map(x => x.str).join("");
        };
    }
    get tokens() {
        const tokens = [...Object(parser["g" /* tokenize */])(this.target.currentInput)];
        if (!this.cursorIndexChars)
            return { tokens, cursorIndex: null };
        const cursorIndex = tokens.findIndex(t => t.type !== TokenType["g" /* Whitespace */] &&
            t.start + t.str.length >= this.cursorIndexChars);
        return {
            tokens,
            cursorIndex: cursorIndex !== null ? cursorIndex : null,
        };
    }
    getPossibleUnits() {
        const { tokens, cursorIndex } = this.tokens;
        const cursorToken = cursorIndex !== null ? tokens[cursorIndex] : null;
        const poss = [];
        if (cursorToken) {
            if (cursorIndex === tokens.length - 1 &&
                cursorToken.str === "to ") {
                try {
                    const evaled = Object(evaluator["d" /* parseEvaluate */])(tokens
                        .slice(0, cursorIndex)
                        .map(x => x.str)
                        .join(""));
                    const val = evaled.value;
                    for (const name of globalScope["a" /* default */].getAllUnits()) {
                        const unit = globalScope["a" /* default */].getUnit(name).value;
                        if (!unit.isSpecial() &&
                            unit.dimensions.equals(val.dimensions))
                            poss.push(name);
                    }
                }
                catch (e) {
                    console.log(e);
                }
            }
            if (cursorToken.type === TokenType["a" /* Identifier */]) {
                const units = poss.length > 0 ? poss.splice(0) : globalScope["a" /* default */].getAllUnits();
                for (const unitName of units) {
                    if (unitName.indexOf(cursorToken.str) >= 0 &&
                        unitName !== cursorToken.str)
                        poss.push(unitName);
                    if (poss.length > 30)
                        break;
                }
            }
        }
        return poss;
    }
}
__decorate([
    mobx_module["observable"]
], gui_store_UnitCompleter.prototype, "cursorIndexChars", void 0);
__decorate([
    mobx_module["computed"]
], gui_store_UnitCompleter.prototype, "tokens", null);

// CONCATENATED MODULE: ./src/ui/gui.tsx
var gui_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var gui_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};













let gui_DefinitionOvelay = class DefinitionOvelay extends react["Component"] {
    constructor(p) {
        super(p);
        this.definition = null;
        this.load();
    }
    load() {
        return gui_awaiter(this, void 0, void 0, function* () {
            try {
                this.definition = (yield qalculate(this.props.unit.id)).output;
            }
            catch (e) {
                this.definition = new unitNumber_output["a" /* TaggedString */](e.message);
            }
        });
    }
    render() {
        if (this.definition)
            return (react["createElement"](gui_TaggedStringDisplay, { text: this.definition, ignore: [this.props.unit], onClickUnit: this.props.onClickUnit }));
        return react["createElement"]("div", null, "Loading");
    }
};
gui_decorate([
    mobx_module["observable"]
], gui_DefinitionOvelay.prototype, "definition", void 0);
gui_DefinitionOvelay = gui_decorate([
    mobxreact_esm["observer"]
], gui_DefinitionOvelay);
class gui_TaggedStringDisplay extends react["Component"] {
    constructor(props) {
        super(props);
    }
    taggedStringToHtml(str) {
        return str.vals.map((x, i) => {
            if (typeof x === "string")
                return react["createElement"]("span", { key: i }, x);
            else if (x instanceof unitNumber["b" /* UnitNumber */]) {
                if (this.props.ignore &&
                    this.props.ignore.some(i => i.id === x.id))
                    return react["createElement"]("span", { key: i }, x.toString());
                return (react["createElement"](rc_tooltip_es, { key: i, placement: "bottom", overlay: () => (react["createElement"](gui_DefinitionOvelay, { unit: x, onClickUnit: this.props.onClickUnit })) },
                    react["createElement"]("a", { href: "#", className: "unit-href", onClick: e => {
                            this.props.onClickUnit(x);
                            e.preventDefault();
                        } }, x.toString())));
            }
            else if (x instanceof unitNumber_output["a" /* TaggedString */])
                return this.taggedStringToHtml(x);
            else
                throw Error("unknown value");
        });
    }
    render() {
        return (react["createElement"]("div", { className: `tagged-string-display ${this.props.className ||
                ""}` }, this.taggedStringToHtml(this.props.text)));
    }
}
class gui_GUILine extends react["Component"] {
    constructor(props) {
        super(props);
        this.state = { displayDepth: 0 };
    }
    render() {
        const { type, comment, input, output } = this.props.line.data;
        const isDefinition = type === "definition";
        return (react["createElement"]("div", { className: "gui-line" },
            " ",
            comment ? react["createElement"]("h4", { className: "comment" }, comment) : "",
            react["createElement"]("button", { className: "btn pull-right close", onClick: () => this.props.onClickRemove() }, "\u00D7"),
            !isDefinition && (react["createElement"]("div", { style: { cursor: "pointer" }, onClick: () => this.props.onClickInput(this.props.line) },
                react["createElement"](gui_TaggedStringDisplay, { text: input, onClickUnit: this.props.onClickUnit }))),
            react["createElement"](gui_TaggedStringDisplay, { className: "block-response", text: isDefinition ? output : unitNumber_output["a" /* TaggedString */].t ` = ${output}`, onClickUnit: this.props.onClickUnit }),
            react["createElement"]("hr", null)));
    }
}
let guiInst;
const presetLines = `
sqrt(2 * ((100000 pound uranium_pure + 6 million tons * uranium_natural)) / (100000 pounds + 0.7% * 6 million tons)) to c   # speed a rocket could get with all the uranium on earth (E=1/2 mv^2 ⇒ v = sqrt(2E/m))
1 kg charcoal to liter gasoline # energy density conversion
solarluminosity / spheresurface(astronomicalunit) to kW/m^2 # maximum amount of energy a square meter on earth can get from the sun
3200 mAh * 3.7 V to Wh # energy in a phone battery
100W * 10 days * 0.25€/kWh to € # cost of energy consumption of a 100W device over 10 days
16Mbit/s * 2h to Gbyte # How much can you download in 2 hours with a 16Mbit connection?
88 mph to km/h
100°F to °C
`
    .split("\n")
    .map(line => line.trim())
    .filter(line => line.length > 0);
function loadPresetLines() {
    return gui_awaiter(this, void 0, void 0, function* () {
        let presets = presetLines;
        let { state } = query_string["parse"](location.hash);
        if (state) {
            const ser = JSON.parse(lz_string_default.a.decompressFromEncodedURIComponent(state));
            presets = ser.lines;
        }
        guiInst.guist.loadPresets(presets);
    });
}
let gui_UnitCompleteInput = class UnitCompleteInput extends react["Component"] {
    constructor() {
        super(...arguments);
        this.focused = false;
        this.inpRef = react["createRef"]();
        this.onSelect = e => ((this.focused = true),
            (this.props.completer.cursorIndexChars = e.currentTarget.selectionStart));
    }
    render() {
        const poss = this.focused
            ? this.props.completer.getPossibleUnits()
            : [];
        return (react["createElement"]("div", { className: "unit-complete-input inline-query" },
            react["createElement"]("span", { className: "prompt" }, "> "),
            react["createElement"]("input", { value: this.props.completer.target.currentInput, onChange: e => this.props.completer.target.setInput(e.currentTarget.value), onSelect: this.onSelect, onBlur: () => setTimeout(() => (this.focused = false), 500), onFocus: this.onSelect, ref: this.inpRef, size: this.props.completer.target.currentInput.length, autoCorrect: "off", autoComplete: "off", autoCapitalize: "none", placeholder: "enter formula" }),
            poss.length > 0 ? (react["createElement"]("ul", { className: "dropdown-menu" }, poss.map(unit => (react["createElement"]("li", { key: unit },
                react["createElement"]("a", { href: "#", onClick: () => this.props.completer.replaceCurrent(unit) }, unit)))))) : ("")));
    }
};
gui_decorate([
    mobx_module["observable"]
], gui_UnitCompleteInput.prototype, "focused", void 0);
gui_decorate([
    mobx_module["observable"]
], gui_UnitCompleteInput.prototype, "inpRef", void 0);
gui_UnitCompleteInput = gui_decorate([
    mobxreact_esm["observer"]
], gui_UnitCompleteInput);
let gui_GUI = class GUI extends react["Component"] {
    constructor(props) {
        super(props);
        this.guist = new gui_store_GuiState();
        this.completer = new gui_store_UnitCompleter(this.guist);
        this.onSubmit = (evt) => {
            evt.preventDefault();
            this.guist.submit();
        };
        this.onChange = (v) => {
            this.guist.setInput(v);
        };
        guiInst = this;
        loadPresetLines();
    }
    showUnit(unit) {
        console.log("showing", unit);
        this.guist.setInput(unit.toString());
    }
    render() {
        return (react["createElement"]("div", { className: "container calc-ui" },
            react["createElement"]("div", { className: "page-header" },
                react["createElement"]("h1", null, "Qalc")),
            react["createElement"]("div", { className: "gui-line unit-complete" },
                react["createElement"]("form", { onSubmit: this.onSubmit },
                    react["createElement"](gui_UnitCompleteInput, { completer: this.completer }),
                    this.guist.currentOutput.vals.length > 0 ? (react["createElement"](gui_TaggedStringDisplay, { className: "inline-response", text: unitNumber_output["a" /* TaggedString */].t ` = ${this.guist.currentOutput}`, onClickUnit: unit => this.showUnit(unit) })) : ("")),
                react["createElement"]("hr", null)),
            this.guist.lines.map((line, i) => (react["createElement"](gui_GUILine, { key: line.id, index: i, line: line, onClickInput: () => this.guist.setInput(line.data.input.toString()), onClickUnit: unit => this.showUnit(unit), onClickRemove: () => this.guist.removeLine(i) }))),
            react["createElement"]("footer", null,
                react["createElement"]("small", null,
                    react["createElement"]("a", { href: "#", onClick: e => {
                            e.preventDefault();
                            this.exportToUrl();
                        } }, "Export to URL"),
                    " ",
                    "|",
                    " ",
                    react["createElement"]("a", { href: "https://github.com/phiresky/qalc-react" }, "Source code on GitHub")))));
    }
    exportToUrl() {
        history.replaceState({}, "", "#" + query_string["stringify"]({ state: this.serialize() }));
    }
    serialize() {
        return lz_string_default.a.compressToEncodedURIComponent(JSON.stringify({
            lines: this.guist.lines
                .map(line => line.data.input.toString())
                .reverse(),
        }));
    }
};
gui_decorate([
    mobx_module["observable"]
], gui_GUI.prototype, "guist", void 0);
gui_decorate([
    mobx_module["observable"]
], gui_GUI.prototype, "completer", void 0);
gui_GUI = gui_decorate([
    mobxreact_esm["observer"]
], gui_GUI);

const gui = Object(react_dom["render"])(react["createElement"](gui_GUI, null), document.getElementById("app"));
Object.assign(window, { gui, qalculationHasSideeffect: qalculationHasSideeffect, qalculate: qalculate });


/***/ })
/******/ ]);
//# sourceMappingURL=gui.06a9c311901661b8d585.js.map