!function(e){function r(e,r,o){return 4===arguments.length?t.apply(this,arguments):void n(e,{declarative:!0,deps:r,declare:o})}function t(e,r,t,o){n(e,{declarative:!1,deps:r,executingRequire:t,execute:o})}function n(e,r){r.name=e,e in p||(p[e]=r),r.normalizedDeps=r.deps}function o(e,r){if(r[e.groupIndex]=r[e.groupIndex]||[],-1==v.call(r[e.groupIndex],e)){r[e.groupIndex].push(e);for(var t=0,n=e.normalizedDeps.length;n>t;t++){var a=e.normalizedDeps[t],u=p[a];if(u&&!u.evaluated){var d=e.groupIndex+(u.declarative!=e.declarative);if(void 0===u.groupIndex||u.groupIndex<d){if(void 0!==u.groupIndex&&(r[u.groupIndex].splice(v.call(r[u.groupIndex],u),1),0==r[u.groupIndex].length))throw new TypeError("Mixed dependency cycle detected");u.groupIndex=d}o(u,r)}}}}function a(e){var r=p[e];r.groupIndex=0;var t=[];o(r,t);for(var n=!!r.declarative==t.length%2,a=t.length-1;a>=0;a--){for(var u=t[a],i=0;i<u.length;i++){var s=u[i];n?d(s):l(s)}n=!n}}function u(e){return x[e]||(x[e]={name:e,dependencies:[],exports:{},importers:[]})}function d(r){if(!r.module){var t=r.module=u(r.name),n=r.module.exports,o=r.declare.call(e,function(e,r){if(t.locked=!0,"object"==typeof e)for(var o in e)n[o]=e[o];else n[e]=r;for(var a=0,u=t.importers.length;u>a;a++){var d=t.importers[a];if(!d.locked)for(var i=0;i<d.dependencies.length;++i)d.dependencies[i]===t&&d.setters[i](n)}return t.locked=!1,r},r.name);t.setters=o.setters,t.execute=o.execute;for(var a=0,i=r.normalizedDeps.length;i>a;a++){var l,s=r.normalizedDeps[a],c=p[s],v=x[s];v?l=v.exports:c&&!c.declarative?l=c.esModule:c?(d(c),v=c.module,l=v.exports):l=f(s),v&&v.importers?(v.importers.push(t),t.dependencies.push(v)):t.dependencies.push(null),t.setters[a]&&t.setters[a](l)}}}function i(e){var r,t=p[e];if(t)t.declarative?c(e,[]):t.evaluated||l(t),r=t.module.exports;else if(r=f(e),!r)throw new Error("Unable to load dependency "+e+".");return(!t||t.declarative)&&r&&r.__useDefault?r["default"]:r}function l(r){if(!r.module){var t={},n=r.module={exports:t,id:r.name};if(!r.executingRequire)for(var o=0,a=r.normalizedDeps.length;a>o;o++){var u=r.normalizedDeps[o],d=p[u];d&&l(d)}r.evaluated=!0;var c=r.execute.call(e,function(e){for(var t=0,n=r.deps.length;n>t;t++)if(r.deps[t]==e)return i(r.normalizedDeps[t]);throw new TypeError("Module "+e+" not declared as a dependency.")},t,n);c&&(n.exports=c),t=n.exports,t&&t.__esModule?r.esModule=t:r.esModule=s(t)}}function s(r){if(r===e)return r;var t={};if("object"==typeof r||"function"==typeof r)if(g){var n;for(var o in r)(n=Object.getOwnPropertyDescriptor(r,o))&&h(t,o,n)}else{var a=r&&r.hasOwnProperty;for(var o in r)(!a||r.hasOwnProperty(o))&&(t[o]=r[o])}return t["default"]=r,h(t,"__useDefault",{value:!0}),t}function c(r,t){var n=p[r];if(n&&!n.evaluated&&n.declarative){t.push(r);for(var o=0,a=n.normalizedDeps.length;a>o;o++){var u=n.normalizedDeps[o];-1==v.call(t,u)&&(p[u]?c(u,t):f(u))}n.evaluated||(n.evaluated=!0,n.module.execute.call(e))}}function f(e){if(D[e])return D[e];if("@node/"==e.substr(0,6))return y(e.substr(6));var r=p[e];if(!r)throw"Module "+e+" not present.";return a(e),c(e,[]),p[e]=void 0,r.declarative&&h(r.module.exports,"__esModule",{value:!0}),D[e]=r.declarative?r.module.exports:r.esModule}var p={},v=Array.prototype.indexOf||function(e){for(var r=0,t=this.length;t>r;r++)if(this[r]===e)return r;return-1},g=!0;try{Object.getOwnPropertyDescriptor({a:0},"a")}catch(m){g=!1}var h;!function(){try{Object.defineProperty({},"a",{})&&(h=Object.defineProperty)}catch(e){h=function(e,r,t){try{e[r]=t.value||t.get.call(e)}catch(n){}}}}();var x={},y="undefined"!=typeof System&&System._nodeRequire||"undefined"!=typeof require&&require.resolve&&"undefined"!=typeof process&&require,D={"@empty":{}};return function(e,n,o){return function(a){a(function(a){for(var u={_nodeRequire:y,register:r,registerDynamic:t,get:f,set:function(e,r){D[e]=r},newModule:function(e){return e}},d=0;d<n.length;d++)(function(e,r){r&&r.__esModule?D[e]=r:D[e]=s(r)})(n[d],arguments[d]);o(u);var i=f(e[0]);if(e.length>1)for(var d=1;d<e.length;d++)f(e[d]);return i.__useDefault?i["default"]:i})}}}("undefined"!=typeof self?self:global)

(["1","1"], [], function($__System) {

!function(e){function n(e,n){e=e.replace(l,"");var r=e.match(u),t=(r[1].split(",")[n]||"require").replace(s,""),i=p[t]||(p[t]=new RegExp(a+t+f,"g"));i.lastIndex=0;for(var o,c=[];o=i.exec(e);)c.push(o[2]||o[3]);return c}function r(e,n,t,o){if("object"==typeof e&&!(e instanceof Array))return r.apply(null,Array.prototype.splice.call(arguments,1,arguments.length-1));if("string"==typeof e&&"function"==typeof n&&(e=[e]),!(e instanceof Array)){if("string"==typeof e){var l=i.get(e);return l.__useDefault?l["default"]:l}throw new TypeError("Invalid require")}for(var a=[],f=0;f<e.length;f++)a.push(i["import"](e[f],o));Promise.all(a).then(function(e){n&&n.apply(null,e)},t)}function t(t,l,a){"string"!=typeof t&&(a=l,l=t,t=null),l instanceof Array||(a=l,l=["require","exports","module"].splice(0,a.length)),"function"!=typeof a&&(a=function(e){return function(){return e}}(a)),void 0===l[l.length-1]&&l.pop();var f,u,s;-1!=(f=o.call(l,"require"))&&(l.splice(f,1),t||(l=l.concat(n(a.toString(),f)))),-1!=(u=o.call(l,"exports"))&&l.splice(u,1),-1!=(s=o.call(l,"module"))&&l.splice(s,1);var p={name:t,deps:l,execute:function(n,t,o){for(var p=[],c=0;c<l.length;c++)p.push(n(l[c]));o.uri=o.id,o.config=function(){},-1!=s&&p.splice(s,0,o),-1!=u&&p.splice(u,0,t),-1!=f&&p.splice(f,0,function(e,t,l){return"string"==typeof e&&"function"!=typeof t?n(e):r.call(i,e,t,l,o.id)});var d=a.apply(-1==u?e:t,p);return"undefined"==typeof d&&o&&(d=o.exports),"undefined"!=typeof d?d:void 0}};if(t)c.anonDefine||c.isBundle?c.anonDefine&&c.anonDefine.name&&(c.anonDefine=null):c.anonDefine=p,c.isBundle=!0,i.registerDynamic(p.name,p.deps,!1,p.execute);else{if(c.anonDefine&&!c.anonDefine.name)throw new Error("Multiple anonymous defines in module "+t);c.anonDefine=p}}var i=$__System,o=Array.prototype.indexOf||function(e){for(var n=0,r=this.length;r>n;n++)if(this[n]===e)return n;return-1},l=/(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/gm,a="(?:^|[^$_a-zA-Z\\xA0-\\uFFFF.])",f="\\s*\\(\\s*(\"([^\"]+)\"|'([^']+)')\\s*\\)",u=/\(([^\)]*)\)/,s=/^\s+|\s+$/g,p={};t.amd={};var c={isBundle:!1,anonDefine:null};i.amdDefine=t,i.amdRequire=r}("undefined"!=typeof self?self:global);
$__System.registerDynamic("2", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactServerBatchingStrategy = {
    isBatchingUpdates: false,
    batchedUpdates: function(callback) {}
  };
  module.exports = ReactServerBatchingStrategy;
  return module.exports;
});

$__System.registerDynamic("4", ["5", "6", "7", "8", "9", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var PooledClass = $__require('5');
  var CallbackQueue = $__require('6');
  var Transaction = $__require('7');
  var assign = $__require('8');
  var emptyFunction = $__require('9');
  var ON_DOM_READY_QUEUEING = {
    initialize: function() {
      this.reactMountReady.reset();
    },
    close: emptyFunction
  };
  var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];
  function ReactServerRenderingTransaction(renderToStaticMarkup) {
    this.reinitializeTransaction();
    this.renderToStaticMarkup = renderToStaticMarkup;
    this.reactMountReady = CallbackQueue.getPooled(null);
    this.useCreateElement = false;
  }
  var Mixin = {
    getTransactionWrappers: function() {
      return TRANSACTION_WRAPPERS;
    },
    getReactMountReady: function() {
      return this.reactMountReady;
    },
    destructor: function() {
      CallbackQueue.release(this.reactMountReady);
      this.reactMountReady = null;
    }
  };
  assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);
  PooledClass.addPoolingTo(ReactServerRenderingTransaction);
  module.exports = ReactServerRenderingTransaction;
  return module.exports;
});

$__System.registerDynamic("a", ["b", "c", "d", "e", "2", "4", "f", "11", "10", "12", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactDefaultBatchingStrategy = $__require('b');
  var ReactElement = $__require('c');
  var ReactInstanceHandles = $__require('d');
  var ReactMarkupChecksum = $__require('e');
  var ReactServerBatchingStrategy = $__require('2');
  var ReactServerRenderingTransaction = $__require('4');
  var ReactUpdates = $__require('f');
  var emptyObject = $__require('11');
  var instantiateReactComponent = $__require('10');
  var invariant = $__require('12');
  function renderToString(element) {
    !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;
    var transaction;
    try {
      ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);
      var id = ReactInstanceHandles.createReactRootID();
      transaction = ReactServerRenderingTransaction.getPooled(false);
      return transaction.perform(function() {
        var componentInstance = instantiateReactComponent(element, null);
        var markup = componentInstance.mountComponent(id, transaction, emptyObject);
        return ReactMarkupChecksum.addChecksumToMarkup(markup);
      }, null);
    } finally {
      ReactServerRenderingTransaction.release(transaction);
      ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
    }
  }
  function renderToStaticMarkup(element) {
    !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;
    var transaction;
    try {
      ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);
      var id = ReactInstanceHandles.createReactRootID();
      transaction = ReactServerRenderingTransaction.getPooled(true);
      return transaction.perform(function() {
        var componentInstance = instantiateReactComponent(element, null);
        return componentInstance.mountComponent(id, transaction, emptyObject);
      }, null);
    } finally {
      ReactServerRenderingTransaction.release(transaction);
      ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
    }
  }
  module.exports = {
    renderToString: renderToString,
    renderToStaticMarkup: renderToStaticMarkup
  };
  return module.exports;
});

$__System.registerDynamic("13", ["14", "a", "15", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactDefaultInjection = $__require('14');
  var ReactServerRendering = $__require('a');
  var ReactVersion = $__require('15');
  ReactDefaultInjection.inject();
  var ReactDOMServer = {
    renderToString: ReactServerRendering.renderToString,
    renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
    version: ReactVersion
  };
  module.exports = ReactDOMServer;
  return module.exports;
});

$__System.registerDynamic("16", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  function mapObject(object, callback, context) {
    if (!object) {
      return null;
    }
    var result = {};
    for (var name in object) {
      if (hasOwnProperty.call(object, name)) {
        result[name] = callback.call(context, object[name], name, object);
      }
    }
    return result;
  }
  module.exports = mapObject;
  return module.exports;
});

$__System.registerDynamic("17", ["c", "18", "16", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactElement = $__require('c');
  var ReactElementValidator = $__require('18');
  var mapObject = $__require('16');
  function createDOMFactory(tag) {
    if (process.env.NODE_ENV !== 'production') {
      return ReactElementValidator.createFactory(tag);
    }
    return ReactElement.createFactory(tag);
  }
  var ReactDOMFactories = mapObject({
    a: 'a',
    abbr: 'abbr',
    address: 'address',
    area: 'area',
    article: 'article',
    aside: 'aside',
    audio: 'audio',
    b: 'b',
    base: 'base',
    bdi: 'bdi',
    bdo: 'bdo',
    big: 'big',
    blockquote: 'blockquote',
    body: 'body',
    br: 'br',
    button: 'button',
    canvas: 'canvas',
    caption: 'caption',
    cite: 'cite',
    code: 'code',
    col: 'col',
    colgroup: 'colgroup',
    data: 'data',
    datalist: 'datalist',
    dd: 'dd',
    del: 'del',
    details: 'details',
    dfn: 'dfn',
    dialog: 'dialog',
    div: 'div',
    dl: 'dl',
    dt: 'dt',
    em: 'em',
    embed: 'embed',
    fieldset: 'fieldset',
    figcaption: 'figcaption',
    figure: 'figure',
    footer: 'footer',
    form: 'form',
    h1: 'h1',
    h2: 'h2',
    h3: 'h3',
    h4: 'h4',
    h5: 'h5',
    h6: 'h6',
    head: 'head',
    header: 'header',
    hgroup: 'hgroup',
    hr: 'hr',
    html: 'html',
    i: 'i',
    iframe: 'iframe',
    img: 'img',
    input: 'input',
    ins: 'ins',
    kbd: 'kbd',
    keygen: 'keygen',
    label: 'label',
    legend: 'legend',
    li: 'li',
    link: 'link',
    main: 'main',
    map: 'map',
    mark: 'mark',
    menu: 'menu',
    menuitem: 'menuitem',
    meta: 'meta',
    meter: 'meter',
    nav: 'nav',
    noscript: 'noscript',
    object: 'object',
    ol: 'ol',
    optgroup: 'optgroup',
    option: 'option',
    output: 'output',
    p: 'p',
    param: 'param',
    picture: 'picture',
    pre: 'pre',
    progress: 'progress',
    q: 'q',
    rp: 'rp',
    rt: 'rt',
    ruby: 'ruby',
    s: 's',
    samp: 'samp',
    script: 'script',
    section: 'section',
    select: 'select',
    small: 'small',
    source: 'source',
    span: 'span',
    strong: 'strong',
    style: 'style',
    sub: 'sub',
    summary: 'summary',
    sup: 'sup',
    table: 'table',
    tbody: 'tbody',
    td: 'td',
    textarea: 'textarea',
    tfoot: 'tfoot',
    th: 'th',
    thead: 'thead',
    time: 'time',
    title: 'title',
    tr: 'tr',
    track: 'track',
    u: 'u',
    ul: 'ul',
    'var': 'var',
    video: 'video',
    wbr: 'wbr',
    circle: 'circle',
    clipPath: 'clipPath',
    defs: 'defs',
    ellipse: 'ellipse',
    g: 'g',
    image: 'image',
    line: 'line',
    linearGradient: 'linearGradient',
    mask: 'mask',
    path: 'path',
    pattern: 'pattern',
    polygon: 'polygon',
    polyline: 'polyline',
    radialGradient: 'radialGradient',
    rect: 'rect',
    stop: 'stop',
    svg: 'svg',
    text: 'text',
    tspan: 'tspan'
  }, createDOMFactory);
  module.exports = ReactDOMFactories;
  return module.exports;
});

$__System.registerDynamic("18", ["c", "19", "1a", "1b", "1c", "1d", "12", "1e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactElement = $__require('c');
  var ReactPropTypeLocations = $__require('19');
  var ReactPropTypeLocationNames = $__require('1a');
  var ReactCurrentOwner = $__require('1b');
  var canDefineProperty = $__require('1c');
  var getIteratorFn = $__require('1d');
  var invariant = $__require('12');
  var warning = $__require('1e');
  function getDeclarationErrorAddendum() {
    if (ReactCurrentOwner.current) {
      var name = ReactCurrentOwner.current.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  }
  var ownerHasKeyUseWarning = {};
  var loggedTypeFailures = {};
  function validateExplicitKey(element, parentType) {
    if (!element._store || element._store.validated || element.key != null) {
      return;
    }
    element._store.validated = true;
    var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
    if (addenda === null) {
      return;
    }
    process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;
  }
  function getAddendaForKeyUse(messageType, element, parentType) {
    var addendum = getDeclarationErrorAddendum();
    if (!addendum) {
      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
      if (parentName) {
        addendum = ' Check the top-level render call using <' + parentName + '>.';
      }
    }
    var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
    if (memoizer[addendum]) {
      return null;
    }
    memoizer[addendum] = true;
    var addenda = {
      parentOrOwner: addendum,
      url: ' See https://fb.me/react-warning-keys for more information.',
      childOwner: null
    };
    if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
      addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
    }
    return addenda;
  }
  function validateChildKeys(node, parentType) {
    if (typeof node !== 'object') {
      return;
    }
    if (Array.isArray(node)) {
      for (var i = 0; i < node.length; i++) {
        var child = node[i];
        if (ReactElement.isValidElement(child)) {
          validateExplicitKey(child, parentType);
        }
      }
    } else if (ReactElement.isValidElement(node)) {
      if (node._store) {
        node._store.validated = true;
      }
    } else if (node) {
      var iteratorFn = getIteratorFn(node);
      if (iteratorFn) {
        if (iteratorFn !== node.entries) {
          var iterator = iteratorFn.call(node);
          var step;
          while (!(step = iterator.next()).done) {
            if (ReactElement.isValidElement(step.value)) {
              validateExplicitKey(step.value, parentType);
            }
          }
        }
      }
    }
  }
  function checkPropTypes(componentName, propTypes, props, location) {
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error;
        try {
          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
          error = propTypes[propName](props, propName, componentName, location);
        } catch (ex) {
          error = ex;
        }
        process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : undefined;
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          loggedTypeFailures[error.message] = true;
          var addendum = getDeclarationErrorAddendum();
          process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;
        }
      }
    }
  }
  function validatePropTypes(element) {
    var componentClass = element.type;
    if (typeof componentClass !== 'function') {
      return;
    }
    var name = componentClass.displayName || componentClass.name;
    if (componentClass.propTypes) {
      checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
    }
    if (typeof componentClass.getDefaultProps === 'function') {
      process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;
    }
  }
  var ReactElementValidator = {
    createElement: function(type, props, children) {
      var validType = typeof type === 'string' || typeof type === 'function';
      process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;
      var element = ReactElement.createElement.apply(this, arguments);
      if (element == null) {
        return element;
      }
      if (validType) {
        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], type);
        }
      }
      validatePropTypes(element);
      return element;
    },
    createFactory: function(type) {
      var validatedFactory = ReactElementValidator.createElement.bind(null, type);
      validatedFactory.type = type;
      if (process.env.NODE_ENV !== 'production') {
        if (canDefineProperty) {
          Object.defineProperty(validatedFactory, 'type', {
            enumerable: false,
            get: function() {
              process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;
              Object.defineProperty(this, 'type', {value: type});
              return type;
            }
          });
        }
      }
      return validatedFactory;
    },
    cloneElement: function(element, props, children) {
      var newElement = ReactElement.cloneElement.apply(this, arguments);
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], newElement.type);
      }
      validatePropTypes(newElement);
      return newElement;
    }
  };
  module.exports = ReactElementValidator;
  return module.exports;
});

$__System.registerDynamic("1f", ["c", "12", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactElement = $__require('c');
  var invariant = $__require('12');
  function onlyChild(children) {
    !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;
    return children;
  }
  module.exports = onlyChild;
  return module.exports;
});

$__System.registerDynamic("20", ["21", "22", "23", "17", "c", "18", "24", "15", "8", "1f", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactChildren = $__require('21');
  var ReactComponent = $__require('22');
  var ReactClass = $__require('23');
  var ReactDOMFactories = $__require('17');
  var ReactElement = $__require('c');
  var ReactElementValidator = $__require('18');
  var ReactPropTypes = $__require('24');
  var ReactVersion = $__require('15');
  var assign = $__require('8');
  var onlyChild = $__require('1f');
  var createElement = ReactElement.createElement;
  var createFactory = ReactElement.createFactory;
  var cloneElement = ReactElement.cloneElement;
  if (process.env.NODE_ENV !== 'production') {
    createElement = ReactElementValidator.createElement;
    createFactory = ReactElementValidator.createFactory;
    cloneElement = ReactElementValidator.cloneElement;
  }
  var React = {
    Children: {
      map: ReactChildren.map,
      forEach: ReactChildren.forEach,
      count: ReactChildren.count,
      toArray: ReactChildren.toArray,
      only: onlyChild
    },
    Component: ReactComponent,
    createElement: createElement,
    cloneElement: cloneElement,
    isValidElement: ReactElement.isValidElement,
    PropTypes: ReactPropTypes,
    createClass: ReactClass.createClass,
    createFactory: createFactory,
    createMixin: function(mixin) {
      return mixin;
    },
    DOM: ReactDOMFactories,
    version: ReactVersion,
    __spread: assign
  };
  module.exports = React;
  return module.exports;
});

$__System.registerDynamic("25", ["8", "1e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var assign = $__require('8');
  var warning = $__require('1e');
  function deprecated(fnName, newModule, newPackage, ctx, fn) {
    var warned = false;
    if (process.env.NODE_ENV !== 'production') {
      var newFn = function() {
        process.env.NODE_ENV !== 'production' ? warning(warned, 'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;
        warned = true;
        return fn.apply(ctx, arguments);
      };
      return assign(newFn, fn);
    }
    return fn;
  }
  module.exports = deprecated;
  return module.exports;
});

$__System.registerDynamic("26", ["27", "13", "20", "8", "25", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactDOM = $__require('27');
  var ReactDOMServer = $__require('13');
  var ReactIsomorphic = $__require('20');
  var assign = $__require('8');
  var deprecated = $__require('25');
  var React = {};
  assign(React, ReactIsomorphic);
  assign(React, {
    findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),
    render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),
    unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),
    renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),
    renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)
  });
  React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;
  React.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMServer;
  module.exports = React;
  return module.exports;
});

$__System.registerDynamic("28", ["26", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = $__require('26');
  return module.exports;
});

$__System.registerDynamic("29", ["5", "8", "2a", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var PooledClass = $__require('5');
  var assign = $__require('8');
  var getTextContentAccessor = $__require('2a');
  function FallbackCompositionState(root) {
    this._root = root;
    this._startText = this.getText();
    this._fallbackText = null;
  }
  assign(FallbackCompositionState.prototype, {
    destructor: function() {
      this._root = null;
      this._startText = null;
      this._fallbackText = null;
    },
    getText: function() {
      if ('value' in this._root) {
        return this._root.value;
      }
      return this._root[getTextContentAccessor()];
    },
    getData: function() {
      if (this._fallbackText) {
        return this._fallbackText;
      }
      var start;
      var startValue = this._startText;
      var startLength = startValue.length;
      var end;
      var endValue = this.getText();
      var endLength = endValue.length;
      for (start = 0; start < startLength; start++) {
        if (startValue[start] !== endValue[start]) {
          break;
        }
      }
      var minEnd = startLength - start;
      for (end = 1; end <= minEnd; end++) {
        if (startValue[startLength - end] !== endValue[endLength - end]) {
          break;
        }
      }
      var sliceTail = end > 1 ? 1 - end : undefined;
      this._fallbackText = endValue.slice(start, sliceTail);
      return this._fallbackText;
    }
  });
  PooledClass.addPoolingTo(FallbackCompositionState);
  module.exports = FallbackCompositionState;
  return module.exports;
});

$__System.registerDynamic("2b", ["2c", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var SyntheticEvent = $__require('2c');
  var CompositionEventInterface = {data: null};
  function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);
  module.exports = SyntheticCompositionEvent;
  return module.exports;
});

$__System.registerDynamic("2d", ["2c", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var SyntheticEvent = $__require('2c');
  var InputEventInterface = {data: null};
  function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);
  module.exports = SyntheticInputEvent;
  return module.exports;
});

$__System.registerDynamic("2e", ["2f", "30", "31", "29", "2b", "2d", "32", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var EventConstants = $__require('2f');
  var EventPropagators = $__require('30');
  var ExecutionEnvironment = $__require('31');
  var FallbackCompositionState = $__require('29');
  var SyntheticCompositionEvent = $__require('2b');
  var SyntheticInputEvent = $__require('2d');
  var keyOf = $__require('32');
  var END_KEYCODES = [9, 13, 27, 32];
  var START_KEYCODE = 229;
  var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;
  var documentMode = null;
  if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
    documentMode = document.documentMode;
  }
  var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();
  var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
  function isPresto() {
    var opera = window.opera;
    return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
  }
  var SPACEBAR_CODE = 32;
  var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
  var topLevelTypes = EventConstants.topLevelTypes;
  var eventTypes = {
    beforeInput: {
      phasedRegistrationNames: {
        bubbled: keyOf({onBeforeInput: null}),
        captured: keyOf({onBeforeInputCapture: null})
      },
      dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
    },
    compositionEnd: {
      phasedRegistrationNames: {
        bubbled: keyOf({onCompositionEnd: null}),
        captured: keyOf({onCompositionEndCapture: null})
      },
      dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
    },
    compositionStart: {
      phasedRegistrationNames: {
        bubbled: keyOf({onCompositionStart: null}),
        captured: keyOf({onCompositionStartCapture: null})
      },
      dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
    },
    compositionUpdate: {
      phasedRegistrationNames: {
        bubbled: keyOf({onCompositionUpdate: null}),
        captured: keyOf({onCompositionUpdateCapture: null})
      },
      dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
    }
  };
  var hasSpaceKeypress = false;
  function isKeypressCommand(nativeEvent) {
    return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
  }
  function getCompositionEventType(topLevelType) {
    switch (topLevelType) {
      case topLevelTypes.topCompositionStart:
        return eventTypes.compositionStart;
      case topLevelTypes.topCompositionEnd:
        return eventTypes.compositionEnd;
      case topLevelTypes.topCompositionUpdate:
        return eventTypes.compositionUpdate;
    }
  }
  function isFallbackCompositionStart(topLevelType, nativeEvent) {
    return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
  }
  function isFallbackCompositionEnd(topLevelType, nativeEvent) {
    switch (topLevelType) {
      case topLevelTypes.topKeyUp:
        return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
      case topLevelTypes.topKeyDown:
        return nativeEvent.keyCode !== START_KEYCODE;
      case topLevelTypes.topKeyPress:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topBlur:
        return true;
      default:
        return false;
    }
  }
  function getDataFromCustomEvent(nativeEvent) {
    var detail = nativeEvent.detail;
    if (typeof detail === 'object' && 'data' in detail) {
      return detail.data;
    }
    return null;
  }
  var currentComposition = null;
  function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    var eventType;
    var fallbackData;
    if (canUseCompositionEvent) {
      eventType = getCompositionEventType(topLevelType);
    } else if (!currentComposition) {
      if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionStart;
      }
    } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionEnd;
    }
    if (!eventType) {
      return null;
    }
    if (useFallbackCompositionData) {
      if (!currentComposition && eventType === eventTypes.compositionStart) {
        currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
      } else if (eventType === eventTypes.compositionEnd) {
        if (currentComposition) {
          fallbackData = currentComposition.getData();
        }
      }
    }
    var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);
    if (fallbackData) {
      event.data = fallbackData;
    } else {
      var customData = getDataFromCustomEvent(nativeEvent);
      if (customData !== null) {
        event.data = customData;
      }
    }
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }
  function getNativeBeforeInputChars(topLevelType, nativeEvent) {
    switch (topLevelType) {
      case topLevelTypes.topCompositionEnd:
        return getDataFromCustomEvent(nativeEvent);
      case topLevelTypes.topKeyPress:
        var which = nativeEvent.which;
        if (which !== SPACEBAR_CODE) {
          return null;
        }
        hasSpaceKeypress = true;
        return SPACEBAR_CHAR;
      case topLevelTypes.topTextInput:
        var chars = nativeEvent.data;
        if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
          return null;
        }
        return chars;
      default:
        return null;
    }
  }
  function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
    if (currentComposition) {
      if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
        var chars = currentComposition.getData();
        FallbackCompositionState.release(currentComposition);
        currentComposition = null;
        return chars;
      }
      return null;
    }
    switch (topLevelType) {
      case topLevelTypes.topPaste:
        return null;
      case topLevelTypes.topKeyPress:
        if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
          return String.fromCharCode(nativeEvent.which);
        }
        return null;
      case topLevelTypes.topCompositionEnd:
        return useFallbackCompositionData ? null : nativeEvent.data;
      default:
        return null;
    }
  }
  function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    var chars;
    if (canUseTextInputEvent) {
      chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
    } else {
      chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
    }
    if (!chars) {
      return null;
    }
    var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);
    event.data = chars;
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }
  var BeforeInputEventPlugin = {
    eventTypes: eventTypes,
    extractEvents: function(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
      return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];
    }
  };
  module.exports = BeforeInputEventPlugin;
  return module.exports;
});

$__System.registerDynamic("33", ["2f", "34", "30", "31", "f", "2c", "35", "36", "37", "32", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var EventConstants = $__require('2f');
  var EventPluginHub = $__require('34');
  var EventPropagators = $__require('30');
  var ExecutionEnvironment = $__require('31');
  var ReactUpdates = $__require('f');
  var SyntheticEvent = $__require('2c');
  var getEventTarget = $__require('35');
  var isEventSupported = $__require('36');
  var isTextInputElement = $__require('37');
  var keyOf = $__require('32');
  var topLevelTypes = EventConstants.topLevelTypes;
  var eventTypes = {change: {
      phasedRegistrationNames: {
        bubbled: keyOf({onChange: null}),
        captured: keyOf({onChangeCapture: null})
      },
      dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
    }};
  var activeElement = null;
  var activeElementID = null;
  var activeElementValue = null;
  var activeElementValueProp = null;
  function shouldUseChangeEvent(elem) {
    var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
  }
  var doesChangeEventBubble = false;
  if (ExecutionEnvironment.canUseDOM) {
    doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
  }
  function manualDispatchChangeEvent(nativeEvent) {
    var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
    EventPropagators.accumulateTwoPhaseDispatches(event);
    ReactUpdates.batchedUpdates(runEventInBatch, event);
  }
  function runEventInBatch(event) {
    EventPluginHub.enqueueEvents(event);
    EventPluginHub.processEventQueue(false);
  }
  function startWatchingForChangeEventIE8(target, targetID) {
    activeElement = target;
    activeElementID = targetID;
    activeElement.attachEvent('onchange', manualDispatchChangeEvent);
  }
  function stopWatchingForChangeEventIE8() {
    if (!activeElement) {
      return;
    }
    activeElement.detachEvent('onchange', manualDispatchChangeEvent);
    activeElement = null;
    activeElementID = null;
  }
  function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
    if (topLevelType === topLevelTypes.topChange) {
      return topLevelTargetID;
    }
  }
  function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
    if (topLevelType === topLevelTypes.topFocus) {
      stopWatchingForChangeEventIE8();
      startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
    } else if (topLevelType === topLevelTypes.topBlur) {
      stopWatchingForChangeEventIE8();
    }
  }
  var isInputEventSupported = false;
  if (ExecutionEnvironment.canUseDOM) {
    isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
  }
  var newValueProp = {
    get: function() {
      return activeElementValueProp.get.call(this);
    },
    set: function(val) {
      activeElementValue = '' + val;
      activeElementValueProp.set.call(this, val);
    }
  };
  function startWatchingForValueChange(target, targetID) {
    activeElement = target;
    activeElementID = targetID;
    activeElementValue = target.value;
    activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');
    Object.defineProperty(activeElement, 'value', newValueProp);
    activeElement.attachEvent('onpropertychange', handlePropertyChange);
  }
  function stopWatchingForValueChange() {
    if (!activeElement) {
      return;
    }
    delete activeElement.value;
    activeElement.detachEvent('onpropertychange', handlePropertyChange);
    activeElement = null;
    activeElementID = null;
    activeElementValue = null;
    activeElementValueProp = null;
  }
  function handlePropertyChange(nativeEvent) {
    if (nativeEvent.propertyName !== 'value') {
      return;
    }
    var value = nativeEvent.srcElement.value;
    if (value === activeElementValue) {
      return;
    }
    activeElementValue = value;
    manualDispatchChangeEvent(nativeEvent);
  }
  function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
    if (topLevelType === topLevelTypes.topInput) {
      return topLevelTargetID;
    }
  }
  function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
    if (topLevelType === topLevelTypes.topFocus) {
      stopWatchingForValueChange();
      startWatchingForValueChange(topLevelTarget, topLevelTargetID);
    } else if (topLevelType === topLevelTypes.topBlur) {
      stopWatchingForValueChange();
    }
  }
  function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
    if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
      if (activeElement && activeElement.value !== activeElementValue) {
        activeElementValue = activeElement.value;
        return activeElementID;
      }
    }
  }
  function shouldUseClickEvent(elem) {
    return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
  }
  function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
    if (topLevelType === topLevelTypes.topClick) {
      return topLevelTargetID;
    }
  }
  var ChangeEventPlugin = {
    eventTypes: eventTypes,
    extractEvents: function(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
      var getTargetIDFunc,
          handleEventFunc;
      if (shouldUseChangeEvent(topLevelTarget)) {
        if (doesChangeEventBubble) {
          getTargetIDFunc = getTargetIDForChangeEvent;
        } else {
          handleEventFunc = handleEventsForChangeEventIE8;
        }
      } else if (isTextInputElement(topLevelTarget)) {
        if (isInputEventSupported) {
          getTargetIDFunc = getTargetIDForInputEvent;
        } else {
          getTargetIDFunc = getTargetIDForInputEventIE;
          handleEventFunc = handleEventsForInputEventIE;
        }
      } else if (shouldUseClickEvent(topLevelTarget)) {
        getTargetIDFunc = getTargetIDForClickEvent;
      }
      if (getTargetIDFunc) {
        var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
        if (targetID) {
          var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
          event.type = 'change';
          EventPropagators.accumulateTwoPhaseDispatches(event);
          return event;
        }
      }
      if (handleEventFunc) {
        handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
      }
    }
  };
  module.exports = ChangeEventPlugin;
  return module.exports;
});

$__System.registerDynamic("38", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var nextReactRootIndex = 0;
  var ClientReactRootIndex = {createReactRootIndex: function() {
      return nextReactRootIndex++;
    }};
  module.exports = ClientReactRootIndex;
  return module.exports;
});

$__System.registerDynamic("39", ["32", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var keyOf = $__require('32');
  var DefaultEventPluginOrder = [keyOf({ResponderEventPlugin: null}), keyOf({SimpleEventPlugin: null}), keyOf({TapEventPlugin: null}), keyOf({EnterLeaveEventPlugin: null}), keyOf({ChangeEventPlugin: null}), keyOf({SelectEventPlugin: null}), keyOf({BeforeInputEventPlugin: null})];
  module.exports = DefaultEventPluginOrder;
  return module.exports;
});

$__System.registerDynamic("3a", ["2f", "30", "3b", "3c", "32", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var EventConstants = $__require('2f');
  var EventPropagators = $__require('30');
  var SyntheticMouseEvent = $__require('3b');
  var ReactMount = $__require('3c');
  var keyOf = $__require('32');
  var topLevelTypes = EventConstants.topLevelTypes;
  var getFirstReactDOM = ReactMount.getFirstReactDOM;
  var eventTypes = {
    mouseEnter: {
      registrationName: keyOf({onMouseEnter: null}),
      dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
    },
    mouseLeave: {
      registrationName: keyOf({onMouseLeave: null}),
      dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
    }
  };
  var extractedEvents = [null, null];
  var EnterLeaveEventPlugin = {
    eventTypes: eventTypes,
    extractEvents: function(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
      if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
        return null;
      }
      if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
        return null;
      }
      var win;
      if (topLevelTarget.window === topLevelTarget) {
        win = topLevelTarget;
      } else {
        var doc = topLevelTarget.ownerDocument;
        if (doc) {
          win = doc.defaultView || doc.parentWindow;
        } else {
          win = window;
        }
      }
      var from;
      var to;
      var fromID = '';
      var toID = '';
      if (topLevelType === topLevelTypes.topMouseOut) {
        from = topLevelTarget;
        fromID = topLevelTargetID;
        to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
        if (to) {
          toID = ReactMount.getID(to);
        } else {
          to = win;
        }
        to = to || win;
      } else {
        from = win;
        to = topLevelTarget;
        toID = topLevelTargetID;
      }
      if (from === to) {
        return null;
      }
      var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
      leave.type = 'mouseleave';
      leave.target = from;
      leave.relatedTarget = to;
      var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
      enter.type = 'mouseenter';
      enter.target = to;
      enter.relatedTarget = from;
      EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);
      extractedEvents[0] = leave;
      extractedEvents[1] = enter;
      return extractedEvents;
    }
  };
  module.exports = EnterLeaveEventPlugin;
  return module.exports;
});

$__System.registerDynamic("3d", ["3e", "31", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var DOMProperty = $__require('3e');
  var ExecutionEnvironment = $__require('31');
  var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
  var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
  var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
  var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
  var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
  var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
  var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;
  var hasSVG;
  if (ExecutionEnvironment.canUseDOM) {
    var implementation = document.implementation;
    hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
  }
  var HTMLDOMPropertyConfig = {
    isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
    Properties: {
      accept: null,
      acceptCharset: null,
      accessKey: null,
      action: null,
      allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
      allowTransparency: MUST_USE_ATTRIBUTE,
      alt: null,
      async: HAS_BOOLEAN_VALUE,
      autoComplete: null,
      autoPlay: HAS_BOOLEAN_VALUE,
      capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
      cellPadding: null,
      cellSpacing: null,
      charSet: MUST_USE_ATTRIBUTE,
      challenge: MUST_USE_ATTRIBUTE,
      checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
      classID: MUST_USE_ATTRIBUTE,
      className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
      cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
      colSpan: null,
      content: null,
      contentEditable: null,
      contextMenu: MUST_USE_ATTRIBUTE,
      controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
      coords: null,
      crossOrigin: null,
      data: null,
      dateTime: MUST_USE_ATTRIBUTE,
      'default': HAS_BOOLEAN_VALUE,
      defer: HAS_BOOLEAN_VALUE,
      dir: null,
      disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
      download: HAS_OVERLOADED_BOOLEAN_VALUE,
      draggable: null,
      encType: null,
      form: MUST_USE_ATTRIBUTE,
      formAction: MUST_USE_ATTRIBUTE,
      formEncType: MUST_USE_ATTRIBUTE,
      formMethod: MUST_USE_ATTRIBUTE,
      formNoValidate: HAS_BOOLEAN_VALUE,
      formTarget: MUST_USE_ATTRIBUTE,
      frameBorder: MUST_USE_ATTRIBUTE,
      headers: null,
      height: MUST_USE_ATTRIBUTE,
      hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
      high: null,
      href: null,
      hrefLang: null,
      htmlFor: null,
      httpEquiv: null,
      icon: null,
      id: MUST_USE_PROPERTY,
      inputMode: MUST_USE_ATTRIBUTE,
      integrity: null,
      is: MUST_USE_ATTRIBUTE,
      keyParams: MUST_USE_ATTRIBUTE,
      keyType: MUST_USE_ATTRIBUTE,
      kind: null,
      label: null,
      lang: null,
      list: MUST_USE_ATTRIBUTE,
      loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
      low: null,
      manifest: MUST_USE_ATTRIBUTE,
      marginHeight: null,
      marginWidth: null,
      max: null,
      maxLength: MUST_USE_ATTRIBUTE,
      media: MUST_USE_ATTRIBUTE,
      mediaGroup: null,
      method: null,
      min: null,
      minLength: MUST_USE_ATTRIBUTE,
      multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
      muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
      name: null,
      nonce: MUST_USE_ATTRIBUTE,
      noValidate: HAS_BOOLEAN_VALUE,
      open: HAS_BOOLEAN_VALUE,
      optimum: null,
      pattern: null,
      placeholder: null,
      poster: null,
      preload: null,
      radioGroup: null,
      readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
      rel: null,
      required: HAS_BOOLEAN_VALUE,
      reversed: HAS_BOOLEAN_VALUE,
      role: MUST_USE_ATTRIBUTE,
      rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
      rowSpan: null,
      sandbox: null,
      scope: null,
      scoped: HAS_BOOLEAN_VALUE,
      scrolling: null,
      seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
      selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
      shape: null,
      size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
      sizes: MUST_USE_ATTRIBUTE,
      span: HAS_POSITIVE_NUMERIC_VALUE,
      spellCheck: null,
      src: null,
      srcDoc: MUST_USE_PROPERTY,
      srcLang: null,
      srcSet: MUST_USE_ATTRIBUTE,
      start: HAS_NUMERIC_VALUE,
      step: null,
      style: null,
      summary: null,
      tabIndex: null,
      target: null,
      title: null,
      type: null,
      useMap: null,
      value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
      width: MUST_USE_ATTRIBUTE,
      wmode: MUST_USE_ATTRIBUTE,
      wrap: null,
      about: MUST_USE_ATTRIBUTE,
      datatype: MUST_USE_ATTRIBUTE,
      inlist: MUST_USE_ATTRIBUTE,
      prefix: MUST_USE_ATTRIBUTE,
      property: MUST_USE_ATTRIBUTE,
      resource: MUST_USE_ATTRIBUTE,
      'typeof': MUST_USE_ATTRIBUTE,
      vocab: MUST_USE_ATTRIBUTE,
      autoCapitalize: MUST_USE_ATTRIBUTE,
      autoCorrect: MUST_USE_ATTRIBUTE,
      autoSave: null,
      color: null,
      itemProp: MUST_USE_ATTRIBUTE,
      itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
      itemType: MUST_USE_ATTRIBUTE,
      itemID: MUST_USE_ATTRIBUTE,
      itemRef: MUST_USE_ATTRIBUTE,
      results: null,
      security: MUST_USE_ATTRIBUTE,
      unselectable: MUST_USE_ATTRIBUTE
    },
    DOMAttributeNames: {
      acceptCharset: 'accept-charset',
      className: 'class',
      htmlFor: 'for',
      httpEquiv: 'http-equiv'
    },
    DOMPropertyNames: {
      autoComplete: 'autocomplete',
      autoFocus: 'autofocus',
      autoPlay: 'autoplay',
      autoSave: 'autosave',
      encType: 'encoding',
      hrefLang: 'hreflang',
      radioGroup: 'radiogroup',
      spellCheck: 'spellcheck',
      srcDoc: 'srcdoc',
      srcSet: 'srcset'
    }
  };
  module.exports = HTMLDOMPropertyConfig;
  return module.exports;
});

$__System.registerDynamic("3f", ["40", "41", "1e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactInstanceMap = $__require('40');
  var findDOMNode = $__require('41');
  var warning = $__require('1e');
  var didWarnKey = '_getDOMNodeDidWarn';
  var ReactBrowserComponentMixin = {getDOMNode: function() {
      process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
      this.constructor[didWarnKey] = true;
      return findDOMNode(this);
    }};
  module.exports = ReactBrowserComponentMixin;
  return module.exports;
});

$__System.registerDynamic("b", ["f", "7", "8", "9", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactUpdates = $__require('f');
  var Transaction = $__require('7');
  var assign = $__require('8');
  var emptyFunction = $__require('9');
  var RESET_BATCHED_UPDATES = {
    initialize: emptyFunction,
    close: function() {
      ReactDefaultBatchingStrategy.isBatchingUpdates = false;
    }
  };
  var FLUSH_BATCHED_UPDATES = {
    initialize: emptyFunction,
    close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
  };
  var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];
  function ReactDefaultBatchingStrategyTransaction() {
    this.reinitializeTransaction();
  }
  assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {getTransactionWrappers: function() {
      return TRANSACTION_WRAPPERS;
    }});
  var transaction = new ReactDefaultBatchingStrategyTransaction();
  var ReactDefaultBatchingStrategy = {
    isBatchingUpdates: false,
    batchedUpdates: function(callback, a, b, c, d, e) {
      var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;
      ReactDefaultBatchingStrategy.isBatchingUpdates = true;
      if (alreadyBatchingUpdates) {
        callback(a, b, c, d, e);
      } else {
        transaction.perform(callback, null, a, b, c, d, e);
      }
    }
  };
  module.exports = ReactDefaultBatchingStrategy;
  return module.exports;
});

$__System.registerDynamic("42", ["3c", "41", "43", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactMount = $__require('3c');
  var findDOMNode = $__require('41');
  var focusNode = $__require('43');
  var Mixin = {componentDidMount: function() {
      if (this.props.autoFocus) {
        focusNode(findDOMNode(this));
      }
    }};
  var AutoFocusUtils = {
    Mixin: Mixin,
    focusDOMComponent: function() {
      focusNode(ReactMount.getNode(this._rootNodeID));
    }
  };
  module.exports = AutoFocusUtils;
  return module.exports;
});

$__System.registerDynamic("44", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var _hyphenPattern = /-(.)/g;
  function camelize(string) {
    return string.replace(_hyphenPattern, function(_, character) {
      return character.toUpperCase();
    });
  }
  module.exports = camelize;
  return module.exports;
});

$__System.registerDynamic("45", ["44", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var camelize = $__require('44');
  var msPattern = /^-ms-/;
  function camelizeStyleName(string) {
    return camelize(string.replace(msPattern, 'ms-'));
  }
  module.exports = camelizeStyleName;
  return module.exports;
});

$__System.registerDynamic("46", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var isUnitlessNumber = {
    animationIterationCount: true,
    boxFlex: true,
    boxFlexGroup: true,
    boxOrdinalGroup: true,
    columnCount: true,
    flex: true,
    flexGrow: true,
    flexPositive: true,
    flexShrink: true,
    flexNegative: true,
    flexOrder: true,
    fontWeight: true,
    lineClamp: true,
    lineHeight: true,
    opacity: true,
    order: true,
    orphans: true,
    tabSize: true,
    widows: true,
    zIndex: true,
    zoom: true,
    fillOpacity: true,
    stopOpacity: true,
    strokeDashoffset: true,
    strokeOpacity: true,
    strokeWidth: true
  };
  function prefixKey(prefix, key) {
    return prefix + key.charAt(0).toUpperCase() + key.substring(1);
  }
  var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
  Object.keys(isUnitlessNumber).forEach(function(prop) {
    prefixes.forEach(function(prefix) {
      isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
    });
  });
  var shorthandPropertyExpansions = {
    background: {
      backgroundAttachment: true,
      backgroundColor: true,
      backgroundImage: true,
      backgroundPositionX: true,
      backgroundPositionY: true,
      backgroundRepeat: true
    },
    backgroundPosition: {
      backgroundPositionX: true,
      backgroundPositionY: true
    },
    border: {
      borderWidth: true,
      borderStyle: true,
      borderColor: true
    },
    borderBottom: {
      borderBottomWidth: true,
      borderBottomStyle: true,
      borderBottomColor: true
    },
    borderLeft: {
      borderLeftWidth: true,
      borderLeftStyle: true,
      borderLeftColor: true
    },
    borderRight: {
      borderRightWidth: true,
      borderRightStyle: true,
      borderRightColor: true
    },
    borderTop: {
      borderTopWidth: true,
      borderTopStyle: true,
      borderTopColor: true
    },
    font: {
      fontStyle: true,
      fontVariant: true,
      fontWeight: true,
      fontSize: true,
      lineHeight: true,
      fontFamily: true
    },
    outline: {
      outlineWidth: true,
      outlineStyle: true,
      outlineColor: true
    }
  };
  var CSSProperty = {
    isUnitlessNumber: isUnitlessNumber,
    shorthandPropertyExpansions: shorthandPropertyExpansions
  };
  module.exports = CSSProperty;
  return module.exports;
});

$__System.registerDynamic("47", ["46", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var CSSProperty = $__require('46');
  var isUnitlessNumber = CSSProperty.isUnitlessNumber;
  function dangerousStyleValue(name, value) {
    var isEmpty = value == null || typeof value === 'boolean' || value === '';
    if (isEmpty) {
      return '';
    }
    var isNonNumeric = isNaN(value);
    if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
      return '' + value;
    }
    if (typeof value === 'string') {
      value = value.trim();
    }
    return value + 'px';
  }
  module.exports = dangerousStyleValue;
  return module.exports;
});

$__System.registerDynamic("48", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var _uppercasePattern = /([A-Z])/g;
  function hyphenate(string) {
    return string.replace(_uppercasePattern, '-$1').toLowerCase();
  }
  module.exports = hyphenate;
  return module.exports;
});

$__System.registerDynamic("49", ["48", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var hyphenate = $__require('48');
  var msPattern = /^ms-/;
  function hyphenateStyleName(string) {
    return hyphenate(string).replace(msPattern, '-ms-');
  }
  module.exports = hyphenateStyleName;
  return module.exports;
});

$__System.registerDynamic("4a", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function memoizeStringOnly(callback) {
    var cache = {};
    return function(string) {
      if (!cache.hasOwnProperty(string)) {
        cache[string] = callback.call(this, string);
      }
      return cache[string];
    };
  }
  module.exports = memoizeStringOnly;
  return module.exports;
});

$__System.registerDynamic("4b", ["46", "31", "4c", "45", "47", "49", "4a", "1e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var CSSProperty = $__require('46');
  var ExecutionEnvironment = $__require('31');
  var ReactPerf = $__require('4c');
  var camelizeStyleName = $__require('45');
  var dangerousStyleValue = $__require('47');
  var hyphenateStyleName = $__require('49');
  var memoizeStringOnly = $__require('4a');
  var warning = $__require('1e');
  var processStyleName = memoizeStringOnly(function(styleName) {
    return hyphenateStyleName(styleName);
  });
  var hasShorthandPropertyBug = false;
  var styleFloatAccessor = 'cssFloat';
  if (ExecutionEnvironment.canUseDOM) {
    var tempStyle = document.createElement('div').style;
    try {
      tempStyle.font = '';
    } catch (e) {
      hasShorthandPropertyBug = true;
    }
    if (document.documentElement.style.cssFloat === undefined) {
      styleFloatAccessor = 'styleFloat';
    }
  }
  if (process.env.NODE_ENV !== 'production') {
    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
    var badStyleValueWithSemicolonPattern = /;\s*$/;
    var warnedStyleNames = {};
    var warnedStyleValues = {};
    var warnHyphenatedStyleName = function(name) {
      if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
        return;
      }
      warnedStyleNames[name] = true;
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
    };
    var warnBadVendoredStyleName = function(name) {
      if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
        return;
      }
      warnedStyleNames[name] = true;
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
    };
    var warnStyleValueWithSemicolon = function(name, value) {
      if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
        return;
      }
      warnedStyleValues[value] = true;
      process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
    };
    var warnValidStyle = function(name, value) {
      if (name.indexOf('-') > -1) {
        warnHyphenatedStyleName(name);
      } else if (badVendoredStyleNamePattern.test(name)) {
        warnBadVendoredStyleName(name);
      } else if (badStyleValueWithSemicolonPattern.test(value)) {
        warnStyleValueWithSemicolon(name, value);
      }
    };
  }
  var CSSPropertyOperations = {
    createMarkupForStyles: function(styles) {
      var serialized = '';
      for (var styleName in styles) {
        if (!styles.hasOwnProperty(styleName)) {
          continue;
        }
        var styleValue = styles[styleName];
        if (process.env.NODE_ENV !== 'production') {
          warnValidStyle(styleName, styleValue);
        }
        if (styleValue != null) {
          serialized += processStyleName(styleName) + ':';
          serialized += dangerousStyleValue(styleName, styleValue) + ';';
        }
      }
      return serialized || null;
    },
    setValueForStyles: function(node, styles) {
      var style = node.style;
      for (var styleName in styles) {
        if (!styles.hasOwnProperty(styleName)) {
          continue;
        }
        if (process.env.NODE_ENV !== 'production') {
          warnValidStyle(styleName, styles[styleName]);
        }
        var styleValue = dangerousStyleValue(styleName, styles[styleName]);
        if (styleName === 'float') {
          styleName = styleFloatAccessor;
        }
        if (styleValue) {
          style[styleName] = styleValue;
        } else {
          var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
          if (expansion) {
            for (var individualStyleName in expansion) {
              style[individualStyleName] = '';
            }
          } else {
            style[styleName] = '';
          }
        }
      }
    }
  };
  ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {setValueForStyles: 'setValueForStyles'});
  module.exports = CSSPropertyOperations;
  return module.exports;
});

$__System.registerDynamic("4d", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var mouseListenerNames = {
    onClick: true,
    onDoubleClick: true,
    onMouseDown: true,
    onMouseMove: true,
    onMouseUp: true,
    onClickCapture: true,
    onDoubleClickCapture: true,
    onMouseDownCapture: true,
    onMouseMoveCapture: true,
    onMouseUpCapture: true
  };
  var ReactDOMButton = {getNativeProps: function(inst, props, context) {
      if (!props.disabled) {
        return props;
      }
      var nativeProps = {};
      for (var key in props) {
        if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
          nativeProps[key] = props[key];
        }
      }
      return nativeProps;
    }};
  module.exports = ReactDOMButton;
  return module.exports;
});

$__System.registerDynamic("4e", ["4f", "50", "3c", "f", "8", "12", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactDOMIDOperations = $__require('4f');
  var LinkedValueUtils = $__require('50');
  var ReactMount = $__require('3c');
  var ReactUpdates = $__require('f');
  var assign = $__require('8');
  var invariant = $__require('12');
  var instancesByReactID = {};
  function forceUpdateIfMounted() {
    if (this._rootNodeID) {
      ReactDOMInput.updateWrapper(this);
    }
  }
  var ReactDOMInput = {
    getNativeProps: function(inst, props, context) {
      var value = LinkedValueUtils.getValue(props);
      var checked = LinkedValueUtils.getChecked(props);
      var nativeProps = assign({}, props, {
        defaultChecked: undefined,
        defaultValue: undefined,
        value: value != null ? value : inst._wrapperState.initialValue,
        checked: checked != null ? checked : inst._wrapperState.initialChecked,
        onChange: inst._wrapperState.onChange
      });
      return nativeProps;
    },
    mountWrapper: function(inst, props) {
      if (process.env.NODE_ENV !== 'production') {
        LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
      }
      var defaultValue = props.defaultValue;
      inst._wrapperState = {
        initialChecked: props.defaultChecked || false,
        initialValue: defaultValue != null ? defaultValue : null,
        onChange: _handleChange.bind(inst)
      };
    },
    mountReadyWrapper: function(inst) {
      instancesByReactID[inst._rootNodeID] = inst;
    },
    unmountWrapper: function(inst) {
      delete instancesByReactID[inst._rootNodeID];
    },
    updateWrapper: function(inst) {
      var props = inst._currentElement.props;
      var checked = props.checked;
      if (checked != null) {
        ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
      }
      var value = LinkedValueUtils.getValue(props);
      if (value != null) {
        ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
      }
    }
  };
  function _handleChange(event) {
    var props = this._currentElement.props;
    var returnValue = LinkedValueUtils.executeOnChange(props, event);
    ReactUpdates.asap(forceUpdateIfMounted, this);
    var name = props.name;
    if (props.type === 'radio' && name != null) {
      var rootNode = ReactMount.getNode(this._rootNodeID);
      var queryRoot = rootNode;
      while (queryRoot.parentNode) {
        queryRoot = queryRoot.parentNode;
      }
      var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
      for (var i = 0; i < group.length; i++) {
        var otherNode = group[i];
        if (otherNode === rootNode || otherNode.form !== rootNode.form) {
          continue;
        }
        var otherID = ReactMount.getID(otherNode);
        !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
        var otherInstance = instancesByReactID[otherID];
        !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
      }
    }
    return returnValue;
  }
  module.exports = ReactDOMInput;
  return module.exports;
});

$__System.registerDynamic("21", ["5", "c", "9", "51", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var PooledClass = $__require('5');
  var ReactElement = $__require('c');
  var emptyFunction = $__require('9');
  var traverseAllChildren = $__require('51');
  var twoArgumentPooler = PooledClass.twoArgumentPooler;
  var fourArgumentPooler = PooledClass.fourArgumentPooler;
  var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
  function escapeUserProvidedKey(text) {
    return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
  }
  function ForEachBookKeeping(forEachFunction, forEachContext) {
    this.func = forEachFunction;
    this.context = forEachContext;
    this.count = 0;
  }
  ForEachBookKeeping.prototype.destructor = function() {
    this.func = null;
    this.context = null;
    this.count = 0;
  };
  PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);
  function forEachSingleChild(bookKeeping, child, name) {
    var func = bookKeeping.func;
    var context = bookKeeping.context;
    func.call(context, child, bookKeeping.count++);
  }
  function forEachChildren(children, forEachFunc, forEachContext) {
    if (children == null) {
      return children;
    }
    var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
    traverseAllChildren(children, forEachSingleChild, traverseContext);
    ForEachBookKeeping.release(traverseContext);
  }
  function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
    this.result = mapResult;
    this.keyPrefix = keyPrefix;
    this.func = mapFunction;
    this.context = mapContext;
    this.count = 0;
  }
  MapBookKeeping.prototype.destructor = function() {
    this.result = null;
    this.keyPrefix = null;
    this.func = null;
    this.context = null;
    this.count = 0;
  };
  PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);
  function mapSingleChildIntoContext(bookKeeping, child, childKey) {
    var result = bookKeeping.result;
    var keyPrefix = bookKeeping.keyPrefix;
    var func = bookKeeping.func;
    var context = bookKeeping.context;
    var mappedChild = func.call(context, child, bookKeeping.count++);
    if (Array.isArray(mappedChild)) {
      mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
    } else if (mappedChild != null) {
      if (ReactElement.isValidElement(mappedChild)) {
        mappedChild = ReactElement.cloneAndReplaceKey(mappedChild, keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
      }
      result.push(mappedChild);
    }
  }
  function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
    var escapedPrefix = '';
    if (prefix != null) {
      escapedPrefix = escapeUserProvidedKey(prefix) + '/';
    }
    var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
    traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
    MapBookKeeping.release(traverseContext);
  }
  function mapChildren(children, func, context) {
    if (children == null) {
      return children;
    }
    var result = [];
    mapIntoWithKeyPrefixInternal(children, result, null, func, context);
    return result;
  }
  function forEachSingleChildDummy(traverseContext, child, name) {
    return null;
  }
  function countChildren(children, context) {
    return traverseAllChildren(children, forEachSingleChildDummy, null);
  }
  function toArray(children) {
    var result = [];
    mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
    return result;
  }
  var ReactChildren = {
    forEach: forEachChildren,
    map: mapChildren,
    mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
    count: countChildren,
    toArray: toArray
  };
  module.exports = ReactChildren;
  return module.exports;
});

$__System.registerDynamic("52", ["21", "53", "8", "1e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactChildren = $__require('21');
  var ReactDOMSelect = $__require('53');
  var assign = $__require('8');
  var warning = $__require('1e');
  var valueContextKey = ReactDOMSelect.valueContextKey;
  var ReactDOMOption = {
    mountWrapper: function(inst, props, context) {
      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
      }
      var selectValue = context[valueContextKey];
      var selected = null;
      if (selectValue != null) {
        selected = false;
        if (Array.isArray(selectValue)) {
          for (var i = 0; i < selectValue.length; i++) {
            if ('' + selectValue[i] === '' + props.value) {
              selected = true;
              break;
            }
          }
        } else {
          selected = '' + selectValue === '' + props.value;
        }
      }
      inst._wrapperState = {selected: selected};
    },
    getNativeProps: function(inst, props, context) {
      var nativeProps = assign({
        selected: undefined,
        children: undefined
      }, props);
      if (inst._wrapperState.selected != null) {
        nativeProps.selected = inst._wrapperState.selected;
      }
      var content = '';
      ReactChildren.forEach(props.children, function(child) {
        if (child == null) {
          return;
        }
        if (typeof child === 'string' || typeof child === 'number') {
          content += child;
        } else {
          process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
        }
      });
      if (content) {
        nativeProps.children = content;
      }
      return nativeProps;
    }
  };
  module.exports = ReactDOMOption;
  return module.exports;
});

$__System.registerDynamic("53", ["50", "3c", "f", "8", "1e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var LinkedValueUtils = $__require('50');
  var ReactMount = $__require('3c');
  var ReactUpdates = $__require('f');
  var assign = $__require('8');
  var warning = $__require('1e');
  var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);
  function updateOptionsIfPendingUpdateAndMounted() {
    if (this._rootNodeID && this._wrapperState.pendingUpdate) {
      this._wrapperState.pendingUpdate = false;
      var props = this._currentElement.props;
      var value = LinkedValueUtils.getValue(props);
      if (value != null) {
        updateOptions(this, Boolean(props.multiple), value);
      }
    }
  }
  function getDeclarationErrorAddendum(owner) {
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  }
  var valuePropNames = ['value', 'defaultValue'];
  function checkSelectPropTypes(inst, props) {
    var owner = inst._currentElement._owner;
    LinkedValueUtils.checkPropTypes('select', props, owner);
    for (var i = 0; i < valuePropNames.length; i++) {
      var propName = valuePropNames[i];
      if (props[propName] == null) {
        continue;
      }
      if (props.multiple) {
        process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
      } else {
        process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
      }
    }
  }
  function updateOptions(inst, multiple, propValue) {
    var selectedValue,
        i;
    var options = ReactMount.getNode(inst._rootNodeID).options;
    if (multiple) {
      selectedValue = {};
      for (i = 0; i < propValue.length; i++) {
        selectedValue['' + propValue[i]] = true;
      }
      for (i = 0; i < options.length; i++) {
        var selected = selectedValue.hasOwnProperty(options[i].value);
        if (options[i].selected !== selected) {
          options[i].selected = selected;
        }
      }
    } else {
      selectedValue = '' + propValue;
      for (i = 0; i < options.length; i++) {
        if (options[i].value === selectedValue) {
          options[i].selected = true;
          return;
        }
      }
      if (options.length) {
        options[0].selected = true;
      }
    }
  }
  var ReactDOMSelect = {
    valueContextKey: valueContextKey,
    getNativeProps: function(inst, props, context) {
      return assign({}, props, {
        onChange: inst._wrapperState.onChange,
        value: undefined
      });
    },
    mountWrapper: function(inst, props) {
      if (process.env.NODE_ENV !== 'production') {
        checkSelectPropTypes(inst, props);
      }
      var value = LinkedValueUtils.getValue(props);
      inst._wrapperState = {
        pendingUpdate: false,
        initialValue: value != null ? value : props.defaultValue,
        onChange: _handleChange.bind(inst),
        wasMultiple: Boolean(props.multiple)
      };
    },
    processChildContext: function(inst, props, context) {
      var childContext = assign({}, context);
      childContext[valueContextKey] = inst._wrapperState.initialValue;
      return childContext;
    },
    postUpdateWrapper: function(inst) {
      var props = inst._currentElement.props;
      inst._wrapperState.initialValue = undefined;
      var wasMultiple = inst._wrapperState.wasMultiple;
      inst._wrapperState.wasMultiple = Boolean(props.multiple);
      var value = LinkedValueUtils.getValue(props);
      if (value != null) {
        inst._wrapperState.pendingUpdate = false;
        updateOptions(inst, Boolean(props.multiple), value);
      } else if (wasMultiple !== Boolean(props.multiple)) {
        if (props.defaultValue != null) {
          updateOptions(inst, Boolean(props.multiple), props.defaultValue);
        } else {
          updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
        }
      }
    }
  };
  function _handleChange(event) {
    var props = this._currentElement.props;
    var returnValue = LinkedValueUtils.executeOnChange(props, event);
    this._wrapperState.pendingUpdate = true;
    ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
    return returnValue;
  }
  module.exports = ReactDOMSelect;
  return module.exports;
});

$__System.registerDynamic("24", ["c", "1a", "9", "1d", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactElement = $__require('c');
  var ReactPropTypeLocationNames = $__require('1a');
  var emptyFunction = $__require('9');
  var getIteratorFn = $__require('1d');
  var ANONYMOUS = '<<anonymous>>';
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker
  };
  function createChainableTypeChecker(validate) {
    function checkType(isRequired, props, propName, componentName, location, propFullName) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;
      if (props[propName] == null) {
        var locationName = ReactPropTypeLocationNames[location];
        if (isRequired) {
          return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }
    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }
  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        var locationName = ReactPropTypeLocationNames[location];
        var preciseType = getPreciseType(propValue);
        return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunction.thatReturns(null));
  }
  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var locationName = ReactPropTypeLocationNames[location];
        var propType = getPropType(propValue);
        return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!ReactElement.isValidElement(props[propName])) {
        var locationName = ReactPropTypeLocationNames[location];
        return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var locationName = ReactPropTypeLocationNames[location];
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      return createChainableTypeChecker(function() {
        return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
      });
    }
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (propValue === expectedValues[i]) {
          return null;
        }
      }
      var locationName = ReactPropTypeLocationNames[location];
      var valuesString = JSON.stringify(expectedValues);
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }
  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        var locationName = ReactPropTypeLocationNames[location];
        return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      return createChainableTypeChecker(function() {
        return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
      });
    }
    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName) == null) {
          return null;
        }
      }
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }
  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        var locationName = ReactPropTypeLocationNames[location];
        return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        var locationName = ReactPropTypeLocationNames[location];
        return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || ReactElement.isValidElement(propValue)) {
          return true;
        }
        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }
        return true;
      default:
        return false;
    }
  }
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      return 'object';
    }
    return propType;
  }
  function getPreciseType(propValue) {
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return '<<anonymous>>';
    }
    return propValue.constructor.name;
  }
  module.exports = ReactPropTypes;
  return module.exports;
});

$__System.registerDynamic("50", ["24", "19", "12", "1e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactPropTypes = $__require('24');
  var ReactPropTypeLocations = $__require('19');
  var invariant = $__require('12');
  var warning = $__require('1e');
  var hasReadOnlyValue = {
    'button': true,
    'checkbox': true,
    'image': true,
    'hidden': true,
    'radio': true,
    'reset': true,
    'submit': true
  };
  function _assertSingleLink(inputProps) {
    !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
  }
  function _assertValueLink(inputProps) {
    _assertSingleLink(inputProps);
    !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
  }
  function _assertCheckedLink(inputProps) {
    _assertSingleLink(inputProps);
    !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
  }
  var propTypes = {
    value: function(props, propName, componentName) {
      if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
        return null;
      }
      return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    },
    checked: function(props, propName, componentName) {
      if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
        return null;
      }
      return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    },
    onChange: ReactPropTypes.func
  };
  var loggedTypeFailures = {};
  function getDeclarationErrorAddendum(owner) {
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  }
  var LinkedValueUtils = {
    checkPropTypes: function(tagName, props, owner) {
      for (var propName in propTypes) {
        if (propTypes.hasOwnProperty(propName)) {
          var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          loggedTypeFailures[error.message] = true;
          var addendum = getDeclarationErrorAddendum(owner);
          process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
        }
      }
    },
    getValue: function(inputProps) {
      if (inputProps.valueLink) {
        _assertValueLink(inputProps);
        return inputProps.valueLink.value;
      }
      return inputProps.value;
    },
    getChecked: function(inputProps) {
      if (inputProps.checkedLink) {
        _assertCheckedLink(inputProps);
        return inputProps.checkedLink.value;
      }
      return inputProps.checked;
    },
    executeOnChange: function(inputProps, event) {
      if (inputProps.valueLink) {
        _assertValueLink(inputProps);
        return inputProps.valueLink.requestChange(event.target.value);
      } else if (inputProps.checkedLink) {
        _assertCheckedLink(inputProps);
        return inputProps.checkedLink.requestChange(event.target.checked);
      } else if (inputProps.onChange) {
        return inputProps.onChange.call(undefined, event);
      }
    }
  };
  module.exports = LinkedValueUtils;
  return module.exports;
});

$__System.registerDynamic("54", ["50", "4f", "f", "8", "12", "1e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var LinkedValueUtils = $__require('50');
  var ReactDOMIDOperations = $__require('4f');
  var ReactUpdates = $__require('f');
  var assign = $__require('8');
  var invariant = $__require('12');
  var warning = $__require('1e');
  function forceUpdateIfMounted() {
    if (this._rootNodeID) {
      ReactDOMTextarea.updateWrapper(this);
    }
  }
  var ReactDOMTextarea = {
    getNativeProps: function(inst, props, context) {
      !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;
      var nativeProps = assign({}, props, {
        defaultValue: undefined,
        value: undefined,
        children: inst._wrapperState.initialValue,
        onChange: inst._wrapperState.onChange
      });
      return nativeProps;
    },
    mountWrapper: function(inst, props) {
      if (process.env.NODE_ENV !== 'production') {
        LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
      }
      var defaultValue = props.defaultValue;
      var children = props.children;
      if (children != null) {
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
        }
        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
        if (Array.isArray(children)) {
          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
          children = children[0];
        }
        defaultValue = '' + children;
      }
      if (defaultValue == null) {
        defaultValue = '';
      }
      var value = LinkedValueUtils.getValue(props);
      inst._wrapperState = {
        initialValue: '' + (value != null ? value : defaultValue),
        onChange: _handleChange.bind(inst)
      };
    },
    updateWrapper: function(inst) {
      var props = inst._currentElement.props;
      var value = LinkedValueUtils.getValue(props);
      if (value != null) {
        ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
      }
    }
  };
  function _handleChange(event) {
    var props = this._currentElement.props;
    var returnValue = LinkedValueUtils.executeOnChange(props, event);
    ReactUpdates.asap(forceUpdateIfMounted, this);
    return returnValue;
  }
  module.exports = ReactDOMTextarea;
  return module.exports;
});

$__System.registerDynamic("55", ["56", "10", "57", "51", "1e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactReconciler = $__require('56');
  var instantiateReactComponent = $__require('10');
  var shouldUpdateReactComponent = $__require('57');
  var traverseAllChildren = $__require('51');
  var warning = $__require('1e');
  function instantiateChild(childInstances, child, name) {
    var keyUnique = childInstances[name] === undefined;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
    }
    if (child != null && keyUnique) {
      childInstances[name] = instantiateReactComponent(child, null);
    }
  }
  var ReactChildReconciler = {
    instantiateChildren: function(nestedChildNodes, transaction, context) {
      if (nestedChildNodes == null) {
        return null;
      }
      var childInstances = {};
      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
      return childInstances;
    },
    updateChildren: function(prevChildren, nextChildren, transaction, context) {
      if (!nextChildren && !prevChildren) {
        return null;
      }
      var name;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var prevElement = prevChild && prevChild._currentElement;
        var nextElement = nextChildren[name];
        if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
          ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
          nextChildren[name] = prevChild;
        } else {
          if (prevChild) {
            ReactReconciler.unmountComponent(prevChild, name);
          }
          var nextChildInstance = instantiateReactComponent(nextElement, null);
          nextChildren[name] = nextChildInstance;
        }
      }
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
          ReactReconciler.unmountComponent(prevChildren[name]);
        }
      }
      return nextChildren;
    },
    unmountChildren: function(renderedChildren) {
      for (var name in renderedChildren) {
        if (renderedChildren.hasOwnProperty(name)) {
          var renderedChild = renderedChildren[name];
          ReactReconciler.unmountComponent(renderedChild);
        }
      }
    }
  };
  module.exports = ReactChildReconciler;
  return module.exports;
});

$__System.registerDynamic("1d", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator';
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }
  module.exports = getIteratorFn;
  return module.exports;
});

$__System.registerDynamic("51", ["1b", "c", "d", "1d", "12", "1e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactCurrentOwner = $__require('1b');
  var ReactElement = $__require('c');
  var ReactInstanceHandles = $__require('d');
  var getIteratorFn = $__require('1d');
  var invariant = $__require('12');
  var warning = $__require('1e');
  var SEPARATOR = ReactInstanceHandles.SEPARATOR;
  var SUBSEPARATOR = ':';
  var userProvidedKeyEscaperLookup = {
    '=': '=0',
    '.': '=1',
    ':': '=2'
  };
  var userProvidedKeyEscapeRegex = /[=.:]/g;
  var didWarnAboutMaps = false;
  function userProvidedKeyEscaper(match) {
    return userProvidedKeyEscaperLookup[match];
  }
  function getComponentKey(component, index) {
    if (component && component.key != null) {
      return wrapUserProvidedKey(component.key);
    }
    return index.toString(36);
  }
  function escapeUserProvidedKey(text) {
    return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
  }
  function wrapUserProvidedKey(key) {
    return '$' + escapeUserProvidedKey(key);
  }
  function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
    var type = typeof children;
    if (type === 'undefined' || type === 'boolean') {
      children = null;
    }
    if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
      callback(traverseContext, children, nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
      return 1;
    }
    var child;
    var nextName;
    var subtreeCount = 0;
    var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        child = children[i];
        nextName = nextNamePrefix + getComponentKey(child, i);
        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
      }
    } else {
      var iteratorFn = getIteratorFn(children);
      if (iteratorFn) {
        var iterator = iteratorFn.call(children);
        var step;
        if (iteratorFn !== children.entries) {
          var ii = 0;
          while (!(step = iterator.next()).done) {
            child = step.value;
            nextName = nextNamePrefix + getComponentKey(child, ii++);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        } else {
          if (process.env.NODE_ENV !== 'production') {
            process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
            didWarnAboutMaps = true;
          }
          while (!(step = iterator.next()).done) {
            var entry = step.value;
            if (entry) {
              child = entry[1];
              nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
              subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
            }
          }
        }
      } else if (type === 'object') {
        var addendum = '';
        if (process.env.NODE_ENV !== 'production') {
          addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
          if (children._isReactElement) {
            addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
          }
          if (ReactCurrentOwner.current) {
            var name = ReactCurrentOwner.current.getName();
            if (name) {
              addendum += ' Check the render method of `' + name + '`.';
            }
          }
        }
        var childrenString = String(children);
        !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
      }
    }
    return subtreeCount;
  }
  function traverseAllChildren(children, callback, traverseContext) {
    if (children == null) {
      return 0;
    }
    return traverseAllChildrenImpl(children, '', callback, traverseContext);
  }
  module.exports = traverseAllChildren;
  return module.exports;
});

$__System.registerDynamic("58", ["51", "1e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var traverseAllChildren = $__require('51');
  var warning = $__require('1e');
  function flattenSingleChildIntoContext(traverseContext, child, name) {
    var result = traverseContext;
    var keyUnique = result[name] === undefined;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
    }
    if (keyUnique && child != null) {
      result[name] = child;
    }
  }
  function flattenChildren(children) {
    if (children == null) {
      return children;
    }
    var result = {};
    traverseAllChildren(children, flattenSingleChildIntoContext, result);
    return result;
  }
  module.exports = flattenChildren;
  return module.exports;
});

$__System.registerDynamic("59", ["5a", "5b", "1b", "56", "55", "58", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactComponentEnvironment = $__require('5a');
  var ReactMultiChildUpdateTypes = $__require('5b');
  var ReactCurrentOwner = $__require('1b');
  var ReactReconciler = $__require('56');
  var ReactChildReconciler = $__require('55');
  var flattenChildren = $__require('58');
  var updateDepth = 0;
  var updateQueue = [];
  var markupQueue = [];
  function enqueueInsertMarkup(parentID, markup, toIndex) {
    updateQueue.push({
      parentID: parentID,
      parentNode: null,
      type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
      markupIndex: markupQueue.push(markup) - 1,
      content: null,
      fromIndex: null,
      toIndex: toIndex
    });
  }
  function enqueueMove(parentID, fromIndex, toIndex) {
    updateQueue.push({
      parentID: parentID,
      parentNode: null,
      type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
      markupIndex: null,
      content: null,
      fromIndex: fromIndex,
      toIndex: toIndex
    });
  }
  function enqueueRemove(parentID, fromIndex) {
    updateQueue.push({
      parentID: parentID,
      parentNode: null,
      type: ReactMultiChildUpdateTypes.REMOVE_NODE,
      markupIndex: null,
      content: null,
      fromIndex: fromIndex,
      toIndex: null
    });
  }
  function enqueueSetMarkup(parentID, markup) {
    updateQueue.push({
      parentID: parentID,
      parentNode: null,
      type: ReactMultiChildUpdateTypes.SET_MARKUP,
      markupIndex: null,
      content: markup,
      fromIndex: null,
      toIndex: null
    });
  }
  function enqueueTextContent(parentID, textContent) {
    updateQueue.push({
      parentID: parentID,
      parentNode: null,
      type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
      markupIndex: null,
      content: textContent,
      fromIndex: null,
      toIndex: null
    });
  }
  function processQueue() {
    if (updateQueue.length) {
      ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
      clearQueue();
    }
  }
  function clearQueue() {
    updateQueue.length = 0;
    markupQueue.length = 0;
  }
  var ReactMultiChild = {Mixin: {
      _reconcilerInstantiateChildren: function(nestedChildren, transaction, context) {
        if (process.env.NODE_ENV !== 'production') {
          if (this._currentElement) {
            try {
              ReactCurrentOwner.current = this._currentElement._owner;
              return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
            } finally {
              ReactCurrentOwner.current = null;
            }
          }
        }
        return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
      },
      _reconcilerUpdateChildren: function(prevChildren, nextNestedChildrenElements, transaction, context) {
        var nextChildren;
        if (process.env.NODE_ENV !== 'production') {
          if (this._currentElement) {
            try {
              ReactCurrentOwner.current = this._currentElement._owner;
              nextChildren = flattenChildren(nextNestedChildrenElements);
            } finally {
              ReactCurrentOwner.current = null;
            }
            return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
          }
        }
        nextChildren = flattenChildren(nextNestedChildrenElements);
        return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
      },
      mountChildren: function(nestedChildren, transaction, context) {
        var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
        this._renderedChildren = children;
        var mountImages = [];
        var index = 0;
        for (var name in children) {
          if (children.hasOwnProperty(name)) {
            var child = children[name];
            var rootID = this._rootNodeID + name;
            var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
            child._mountIndex = index++;
            mountImages.push(mountImage);
          }
        }
        return mountImages;
      },
      updateTextContent: function(nextContent) {
        updateDepth++;
        var errorThrown = true;
        try {
          var prevChildren = this._renderedChildren;
          ReactChildReconciler.unmountChildren(prevChildren);
          for (var name in prevChildren) {
            if (prevChildren.hasOwnProperty(name)) {
              this._unmountChild(prevChildren[name]);
            }
          }
          this.setTextContent(nextContent);
          errorThrown = false;
        } finally {
          updateDepth--;
          if (!updateDepth) {
            if (errorThrown) {
              clearQueue();
            } else {
              processQueue();
            }
          }
        }
      },
      updateMarkup: function(nextMarkup) {
        updateDepth++;
        var errorThrown = true;
        try {
          var prevChildren = this._renderedChildren;
          ReactChildReconciler.unmountChildren(prevChildren);
          for (var name in prevChildren) {
            if (prevChildren.hasOwnProperty(name)) {
              this._unmountChildByName(prevChildren[name], name);
            }
          }
          this.setMarkup(nextMarkup);
          errorThrown = false;
        } finally {
          updateDepth--;
          if (!updateDepth) {
            if (errorThrown) {
              clearQueue();
            } else {
              processQueue();
            }
          }
        }
      },
      updateChildren: function(nextNestedChildrenElements, transaction, context) {
        updateDepth++;
        var errorThrown = true;
        try {
          this._updateChildren(nextNestedChildrenElements, transaction, context);
          errorThrown = false;
        } finally {
          updateDepth--;
          if (!updateDepth) {
            if (errorThrown) {
              clearQueue();
            } else {
              processQueue();
            }
          }
        }
      },
      _updateChildren: function(nextNestedChildrenElements, transaction, context) {
        var prevChildren = this._renderedChildren;
        var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
        this._renderedChildren = nextChildren;
        if (!nextChildren && !prevChildren) {
          return;
        }
        var name;
        var lastIndex = 0;
        var nextIndex = 0;
        for (name in nextChildren) {
          if (!nextChildren.hasOwnProperty(name)) {
            continue;
          }
          var prevChild = prevChildren && prevChildren[name];
          var nextChild = nextChildren[name];
          if (prevChild === nextChild) {
            this.moveChild(prevChild, nextIndex, lastIndex);
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            prevChild._mountIndex = nextIndex;
          } else {
            if (prevChild) {
              lastIndex = Math.max(prevChild._mountIndex, lastIndex);
              this._unmountChild(prevChild);
            }
            this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
          }
          nextIndex++;
        }
        for (name in prevChildren) {
          if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
            this._unmountChild(prevChildren[name]);
          }
        }
      },
      unmountChildren: function() {
        var renderedChildren = this._renderedChildren;
        ReactChildReconciler.unmountChildren(renderedChildren);
        this._renderedChildren = null;
      },
      moveChild: function(child, toIndex, lastIndex) {
        if (child._mountIndex < lastIndex) {
          enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
        }
      },
      createChild: function(child, mountImage) {
        enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
      },
      removeChild: function(child) {
        enqueueRemove(this._rootNodeID, child._mountIndex);
      },
      setTextContent: function(textContent) {
        enqueueTextContent(this._rootNodeID, textContent);
      },
      setMarkup: function(markup) {
        enqueueSetMarkup(this._rootNodeID, markup);
      },
      _mountChildByNameAtIndex: function(child, name, index, transaction, context) {
        var rootID = this._rootNodeID + name;
        var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
        child._mountIndex = index;
        this.createChild(child, mountImage);
      },
      _unmountChild: function(child) {
        this.removeChild(child);
        child._mountIndex = null;
      }
    }};
  module.exports = ReactMultiChild;
  return module.exports;
});

$__System.registerDynamic("5c", ["42", "4b", "3e", "5d", "2f", "5e", "5f", "4d", "4e", "52", "53", "54", "3c", "59", "4c", "60", "8", "1c", "61", "12", "36", "32", "62", "63", "65", "64", "1e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var AutoFocusUtils = $__require('42');
  var CSSPropertyOperations = $__require('4b');
  var DOMProperty = $__require('3e');
  var DOMPropertyOperations = $__require('5d');
  var EventConstants = $__require('2f');
  var ReactBrowserEventEmitter = $__require('5e');
  var ReactComponentBrowserEnvironment = $__require('5f');
  var ReactDOMButton = $__require('4d');
  var ReactDOMInput = $__require('4e');
  var ReactDOMOption = $__require('52');
  var ReactDOMSelect = $__require('53');
  var ReactDOMTextarea = $__require('54');
  var ReactMount = $__require('3c');
  var ReactMultiChild = $__require('59');
  var ReactPerf = $__require('4c');
  var ReactUpdateQueue = $__require('60');
  var assign = $__require('8');
  var canDefineProperty = $__require('1c');
  var escapeTextContentForBrowser = $__require('61');
  var invariant = $__require('12');
  var isEventSupported = $__require('36');
  var keyOf = $__require('32');
  var setInnerHTML = $__require('62');
  var setTextContent = $__require('63');
  var shallowEqual = $__require('65');
  var validateDOMNesting = $__require('64');
  var warning = $__require('1e');
  var deleteListener = ReactBrowserEventEmitter.deleteListener;
  var listenTo = ReactBrowserEventEmitter.listenTo;
  var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;
  var CONTENT_TYPES = {
    'string': true,
    'number': true
  };
  var CHILDREN = keyOf({children: null});
  var STYLE = keyOf({style: null});
  var HTML = keyOf({__html: null});
  var ELEMENT_NODE_TYPE = 1;
  function getDeclarationErrorAddendum(internalInstance) {
    if (internalInstance) {
      var owner = internalInstance._currentElement._owner || null;
      if (owner) {
        var name = owner.getName();
        if (name) {
          return ' This DOM node was rendered by `' + name + '`.';
        }
      }
    }
    return '';
  }
  var legacyPropsDescriptor;
  if (process.env.NODE_ENV !== 'production') {
    legacyPropsDescriptor = {props: {
        enumerable: false,
        get: function() {
          var component = this._reactInternalComponent;
          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
          return component._currentElement.props;
        }
      }};
  }
  function legacyGetDOMNode() {
    if (process.env.NODE_ENV !== 'production') {
      var component = this._reactInternalComponent;
      process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
    }
    return this;
  }
  function legacyIsMounted() {
    var component = this._reactInternalComponent;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
    }
    return !!component;
  }
  function legacySetStateEtc() {
    if (process.env.NODE_ENV !== 'production') {
      var component = this._reactInternalComponent;
      process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
    }
  }
  function legacySetProps(partialProps, callback) {
    var component = this._reactInternalComponent;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
    }
    if (!component) {
      return;
    }
    ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
    if (callback) {
      ReactUpdateQueue.enqueueCallbackInternal(component, callback);
    }
  }
  function legacyReplaceProps(partialProps, callback) {
    var component = this._reactInternalComponent;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
    }
    if (!component) {
      return;
    }
    ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
    if (callback) {
      ReactUpdateQueue.enqueueCallbackInternal(component, callback);
    }
  }
  function friendlyStringify(obj) {
    if (typeof obj === 'object') {
      if (Array.isArray(obj)) {
        return '[' + obj.map(friendlyStringify).join(', ') + ']';
      } else {
        var pairs = [];
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
            pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
          }
        }
        return '{' + pairs.join(', ') + '}';
      }
    } else if (typeof obj === 'string') {
      return JSON.stringify(obj);
    } else if (typeof obj === 'function') {
      return '[function object]';
    }
    return String(obj);
  }
  var styleMutationWarning = {};
  function checkAndWarnForMutatedStyle(style1, style2, component) {
    if (style1 == null || style2 == null) {
      return;
    }
    if (shallowEqual(style1, style2)) {
      return;
    }
    var componentName = component._tag;
    var owner = component._currentElement._owner;
    var ownerName;
    if (owner) {
      ownerName = owner.getName();
    }
    var hash = ownerName + '|' + componentName;
    if (styleMutationWarning.hasOwnProperty(hash)) {
      return;
    }
    styleMutationWarning[hash] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
  }
  function assertValidProps(component, props) {
    if (!props) {
      return;
    }
    if (process.env.NODE_ENV !== 'production') {
      if (voidElementTags[component._tag]) {
        process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
      }
    }
    if (props.dangerouslySetInnerHTML != null) {
      !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
      !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
    }
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
    }
    !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
  }
  function enqueuePutListener(id, registrationName, listener, transaction) {
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
    }
    var container = ReactMount.findReactContainerForID(id);
    if (container) {
      var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
      listenTo(registrationName, doc);
    }
    transaction.getReactMountReady().enqueue(putListener, {
      id: id,
      registrationName: registrationName,
      listener: listener
    });
  }
  function putListener() {
    var listenerToPut = this;
    ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
  }
  var mediaEvents = {
    topAbort: 'abort',
    topCanPlay: 'canplay',
    topCanPlayThrough: 'canplaythrough',
    topDurationChange: 'durationchange',
    topEmptied: 'emptied',
    topEncrypted: 'encrypted',
    topEnded: 'ended',
    topError: 'error',
    topLoadedData: 'loadeddata',
    topLoadedMetadata: 'loadedmetadata',
    topLoadStart: 'loadstart',
    topPause: 'pause',
    topPlay: 'play',
    topPlaying: 'playing',
    topProgress: 'progress',
    topRateChange: 'ratechange',
    topSeeked: 'seeked',
    topSeeking: 'seeking',
    topStalled: 'stalled',
    topSuspend: 'suspend',
    topTimeUpdate: 'timeupdate',
    topVolumeChange: 'volumechange',
    topWaiting: 'waiting'
  };
  function trapBubbledEventsLocal() {
    var inst = this;
    !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
    var node = ReactMount.getNode(inst._rootNodeID);
    !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;
    switch (inst._tag) {
      case 'iframe':
        inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
        break;
      case 'video':
      case 'audio':
        inst._wrapperState.listeners = [];
        for (var event in mediaEvents) {
          if (mediaEvents.hasOwnProperty(event)) {
            inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
          }
        }
        break;
      case 'img':
        inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
        break;
      case 'form':
        inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
        break;
    }
  }
  function mountReadyInputWrapper() {
    ReactDOMInput.mountReadyWrapper(this);
  }
  function postUpdateSelectWrapper() {
    ReactDOMSelect.postUpdateWrapper(this);
  }
  var omittedCloseTags = {
    'area': true,
    'base': true,
    'br': true,
    'col': true,
    'embed': true,
    'hr': true,
    'img': true,
    'input': true,
    'keygen': true,
    'link': true,
    'meta': true,
    'param': true,
    'source': true,
    'track': true,
    'wbr': true
  };
  var newlineEatingTags = {
    'listing': true,
    'pre': true,
    'textarea': true
  };
  var voidElementTags = assign({'menuitem': true}, omittedCloseTags);
  var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
  var validatedTagCache = {};
  var hasOwnProperty = ({}).hasOwnProperty;
  function validateDangerousTag(tag) {
    if (!hasOwnProperty.call(validatedTagCache, tag)) {
      !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
      validatedTagCache[tag] = true;
    }
  }
  function processChildContextDev(context, inst) {
    context = assign({}, context);
    var info = context[validateDOMNesting.ancestorInfoContextKey];
    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
    return context;
  }
  function isCustomComponent(tagName, props) {
    return tagName.indexOf('-') >= 0 || props.is != null;
  }
  function ReactDOMComponent(tag) {
    validateDangerousTag(tag);
    this._tag = tag.toLowerCase();
    this._renderedChildren = null;
    this._previousStyle = null;
    this._previousStyleCopy = null;
    this._rootNodeID = null;
    this._wrapperState = null;
    this._topLevelWrapper = null;
    this._nodeWithLegacyProperties = null;
    if (process.env.NODE_ENV !== 'production') {
      this._unprocessedContextDev = null;
      this._processedContextDev = null;
    }
  }
  ReactDOMComponent.displayName = 'ReactDOMComponent';
  ReactDOMComponent.Mixin = {
    construct: function(element) {
      this._currentElement = element;
    },
    mountComponent: function(rootID, transaction, context) {
      this._rootNodeID = rootID;
      var props = this._currentElement.props;
      switch (this._tag) {
        case 'iframe':
        case 'img':
        case 'form':
        case 'video':
        case 'audio':
          this._wrapperState = {listeners: null};
          transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
          break;
        case 'button':
          props = ReactDOMButton.getNativeProps(this, props, context);
          break;
        case 'input':
          ReactDOMInput.mountWrapper(this, props, context);
          props = ReactDOMInput.getNativeProps(this, props, context);
          break;
        case 'option':
          ReactDOMOption.mountWrapper(this, props, context);
          props = ReactDOMOption.getNativeProps(this, props, context);
          break;
        case 'select':
          ReactDOMSelect.mountWrapper(this, props, context);
          props = ReactDOMSelect.getNativeProps(this, props, context);
          context = ReactDOMSelect.processChildContext(this, props, context);
          break;
        case 'textarea':
          ReactDOMTextarea.mountWrapper(this, props, context);
          props = ReactDOMTextarea.getNativeProps(this, props, context);
          break;
      }
      assertValidProps(this, props);
      if (process.env.NODE_ENV !== 'production') {
        if (context[validateDOMNesting.ancestorInfoContextKey]) {
          validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
        }
      }
      if (process.env.NODE_ENV !== 'production') {
        this._unprocessedContextDev = context;
        this._processedContextDev = processChildContextDev(context, this);
        context = this._processedContextDev;
      }
      var mountImage;
      if (transaction.useCreateElement) {
        var ownerDocument = context[ReactMount.ownerDocumentContextKey];
        var el = ownerDocument.createElement(this._currentElement.type);
        DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
        ReactMount.getID(el);
        this._updateDOMProperties({}, props, transaction, el);
        this._createInitialChildren(transaction, props, context, el);
        mountImage = el;
      } else {
        var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
        var tagContent = this._createContentMarkup(transaction, props, context);
        if (!tagContent && omittedCloseTags[this._tag]) {
          mountImage = tagOpen + '/>';
        } else {
          mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
        }
      }
      switch (this._tag) {
        case 'input':
          transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
        case 'button':
        case 'select':
        case 'textarea':
          if (props.autoFocus) {
            transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
          }
          break;
      }
      return mountImage;
    },
    _createOpenTagMarkupAndPutListeners: function(transaction, props) {
      var ret = '<' + this._currentElement.type;
      for (var propKey in props) {
        if (!props.hasOwnProperty(propKey)) {
          continue;
        }
        var propValue = props[propKey];
        if (propValue == null) {
          continue;
        }
        if (registrationNameModules.hasOwnProperty(propKey)) {
          if (propValue) {
            enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
          }
        } else {
          if (propKey === STYLE) {
            if (propValue) {
              if (process.env.NODE_ENV !== 'production') {
                this._previousStyle = propValue;
              }
              propValue = this._previousStyleCopy = assign({}, props.style);
            }
            propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
          }
          var markup = null;
          if (this._tag != null && isCustomComponent(this._tag, props)) {
            if (propKey !== CHILDREN) {
              markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
            }
          } else {
            markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
          }
          if (markup) {
            ret += ' ' + markup;
          }
        }
      }
      if (transaction.renderToStaticMarkup) {
        return ret;
      }
      var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
      return ret + ' ' + markupForID;
    },
    _createContentMarkup: function(transaction, props, context) {
      var ret = '';
      var innerHTML = props.dangerouslySetInnerHTML;
      if (innerHTML != null) {
        if (innerHTML.__html != null) {
          ret = innerHTML.__html;
        }
      } else {
        var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
        var childrenToUse = contentToUse != null ? null : props.children;
        if (contentToUse != null) {
          ret = escapeTextContentForBrowser(contentToUse);
        } else if (childrenToUse != null) {
          var mountImages = this.mountChildren(childrenToUse, transaction, context);
          ret = mountImages.join('');
        }
      }
      if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
        return '\n' + ret;
      } else {
        return ret;
      }
    },
    _createInitialChildren: function(transaction, props, context, el) {
      var innerHTML = props.dangerouslySetInnerHTML;
      if (innerHTML != null) {
        if (innerHTML.__html != null) {
          setInnerHTML(el, innerHTML.__html);
        }
      } else {
        var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
        var childrenToUse = contentToUse != null ? null : props.children;
        if (contentToUse != null) {
          setTextContent(el, contentToUse);
        } else if (childrenToUse != null) {
          var mountImages = this.mountChildren(childrenToUse, transaction, context);
          for (var i = 0; i < mountImages.length; i++) {
            el.appendChild(mountImages[i]);
          }
        }
      }
    },
    receiveComponent: function(nextElement, transaction, context) {
      var prevElement = this._currentElement;
      this._currentElement = nextElement;
      this.updateComponent(transaction, prevElement, nextElement, context);
    },
    updateComponent: function(transaction, prevElement, nextElement, context) {
      var lastProps = prevElement.props;
      var nextProps = this._currentElement.props;
      switch (this._tag) {
        case 'button':
          lastProps = ReactDOMButton.getNativeProps(this, lastProps);
          nextProps = ReactDOMButton.getNativeProps(this, nextProps);
          break;
        case 'input':
          ReactDOMInput.updateWrapper(this);
          lastProps = ReactDOMInput.getNativeProps(this, lastProps);
          nextProps = ReactDOMInput.getNativeProps(this, nextProps);
          break;
        case 'option':
          lastProps = ReactDOMOption.getNativeProps(this, lastProps);
          nextProps = ReactDOMOption.getNativeProps(this, nextProps);
          break;
        case 'select':
          lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
          nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
          break;
        case 'textarea':
          ReactDOMTextarea.updateWrapper(this);
          lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
          nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
          break;
      }
      if (process.env.NODE_ENV !== 'production') {
        if (this._unprocessedContextDev !== context) {
          this._unprocessedContextDev = context;
          this._processedContextDev = processChildContextDev(context, this);
        }
        context = this._processedContextDev;
      }
      assertValidProps(this, nextProps);
      this._updateDOMProperties(lastProps, nextProps, transaction, null);
      this._updateDOMChildren(lastProps, nextProps, transaction, context);
      if (!canDefineProperty && this._nodeWithLegacyProperties) {
        this._nodeWithLegacyProperties.props = nextProps;
      }
      if (this._tag === 'select') {
        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
      }
    },
    _updateDOMProperties: function(lastProps, nextProps, transaction, node) {
      var propKey;
      var styleName;
      var styleUpdates;
      for (propKey in lastProps) {
        if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
          continue;
        }
        if (propKey === STYLE) {
          var lastStyle = this._previousStyleCopy;
          for (styleName in lastStyle) {
            if (lastStyle.hasOwnProperty(styleName)) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          this._previousStyleCopy = null;
        } else if (registrationNameModules.hasOwnProperty(propKey)) {
          if (lastProps[propKey]) {
            deleteListener(this._rootNodeID, propKey);
          }
        } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
          if (!node) {
            node = ReactMount.getNode(this._rootNodeID);
          }
          DOMPropertyOperations.deleteValueForProperty(node, propKey);
        }
      }
      for (propKey in nextProps) {
        var nextProp = nextProps[propKey];
        var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
        if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
          continue;
        }
        if (propKey === STYLE) {
          if (nextProp) {
            if (process.env.NODE_ENV !== 'production') {
              checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
              this._previousStyle = nextProp;
            }
            nextProp = this._previousStyleCopy = assign({}, nextProp);
          } else {
            this._previousStyleCopy = null;
          }
          if (lastProp) {
            for (styleName in lastProp) {
              if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                styleUpdates = styleUpdates || {};
                styleUpdates[styleName] = '';
              }
            }
            for (styleName in nextProp) {
              if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                styleUpdates = styleUpdates || {};
                styleUpdates[styleName] = nextProp[styleName];
              }
            }
          } else {
            styleUpdates = nextProp;
          }
        } else if (registrationNameModules.hasOwnProperty(propKey)) {
          if (nextProp) {
            enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
          } else if (lastProp) {
            deleteListener(this._rootNodeID, propKey);
          }
        } else if (isCustomComponent(this._tag, nextProps)) {
          if (!node) {
            node = ReactMount.getNode(this._rootNodeID);
          }
          if (propKey === CHILDREN) {
            nextProp = null;
          }
          DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
        } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
          if (!node) {
            node = ReactMount.getNode(this._rootNodeID);
          }
          if (nextProp != null) {
            DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
          } else {
            DOMPropertyOperations.deleteValueForProperty(node, propKey);
          }
        }
      }
      if (styleUpdates) {
        if (!node) {
          node = ReactMount.getNode(this._rootNodeID);
        }
        CSSPropertyOperations.setValueForStyles(node, styleUpdates);
      }
    },
    _updateDOMChildren: function(lastProps, nextProps, transaction, context) {
      var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
      var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;
      var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
      var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;
      var lastChildren = lastContent != null ? null : lastProps.children;
      var nextChildren = nextContent != null ? null : nextProps.children;
      var lastHasContentOrHtml = lastContent != null || lastHtml != null;
      var nextHasContentOrHtml = nextContent != null || nextHtml != null;
      if (lastChildren != null && nextChildren == null) {
        this.updateChildren(null, transaction, context);
      } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
        this.updateTextContent('');
      }
      if (nextContent != null) {
        if (lastContent !== nextContent) {
          this.updateTextContent('' + nextContent);
        }
      } else if (nextHtml != null) {
        if (lastHtml !== nextHtml) {
          this.updateMarkup('' + nextHtml);
        }
      } else if (nextChildren != null) {
        this.updateChildren(nextChildren, transaction, context);
      }
    },
    unmountComponent: function() {
      switch (this._tag) {
        case 'iframe':
        case 'img':
        case 'form':
        case 'video':
        case 'audio':
          var listeners = this._wrapperState.listeners;
          if (listeners) {
            for (var i = 0; i < listeners.length; i++) {
              listeners[i].remove();
            }
          }
          break;
        case 'input':
          ReactDOMInput.unmountWrapper(this);
          break;
        case 'html':
        case 'head':
        case 'body':
          !false ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
          break;
      }
      this.unmountChildren();
      ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
      ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
      this._rootNodeID = null;
      this._wrapperState = null;
      if (this._nodeWithLegacyProperties) {
        var node = this._nodeWithLegacyProperties;
        node._reactInternalComponent = null;
        this._nodeWithLegacyProperties = null;
      }
    },
    getPublicInstance: function() {
      if (!this._nodeWithLegacyProperties) {
        var node = ReactMount.getNode(this._rootNodeID);
        node._reactInternalComponent = this;
        node.getDOMNode = legacyGetDOMNode;
        node.isMounted = legacyIsMounted;
        node.setState = legacySetStateEtc;
        node.replaceState = legacySetStateEtc;
        node.forceUpdate = legacySetStateEtc;
        node.setProps = legacySetProps;
        node.replaceProps = legacyReplaceProps;
        if (process.env.NODE_ENV !== 'production') {
          if (canDefineProperty) {
            Object.defineProperties(node, legacyPropsDescriptor);
          } else {
            node.props = this._currentElement.props;
          }
        } else {
          node.props = this._currentElement.props;
        }
        this._nodeWithLegacyProperties = node;
      }
      return this._nodeWithLegacyProperties;
    }
  };
  ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
    mountComponent: 'mountComponent',
    updateComponent: 'updateComponent'
  });
  assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);
  module.exports = ReactDOMComponent;
  return module.exports;
});

$__System.registerDynamic("66", ["12", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var invariant = $__require('12');
  function toArray(obj) {
    var length = obj.length;
    !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;
    !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;
    !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;
    if (obj.hasOwnProperty) {
      try {
        return Array.prototype.slice.call(obj);
      } catch (e) {}
    }
    var ret = Array(length);
    for (var ii = 0; ii < length; ii++) {
      ret[ii] = obj[ii];
    }
    return ret;
  }
  module.exports = toArray;
  return module.exports;
});

$__System.registerDynamic("67", ["66", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var toArray = $__require('66');
  function hasArrayNature(obj) {
    return (!!obj && (typeof obj == 'object' || typeof obj == 'function') && 'length' in obj && !('setInterval' in obj) && typeof obj.nodeType != 'number' && (Array.isArray(obj) || 'callee' in obj || 'item' in obj));
  }
  function createArrayFromMixed(obj) {
    if (!hasArrayNature(obj)) {
      return [obj];
    } else if (Array.isArray(obj)) {
      return obj.slice();
    } else {
      return toArray(obj);
    }
  }
  module.exports = createArrayFromMixed;
  return module.exports;
});

$__System.registerDynamic("68", ["31", "67", "69", "12", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ExecutionEnvironment = $__require('31');
  var createArrayFromMixed = $__require('67');
  var getMarkupWrap = $__require('69');
  var invariant = $__require('12');
  var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
  var nodeNamePattern = /^\s*<(\w+)/;
  function getNodeName(markup) {
    var nodeNameMatch = markup.match(nodeNamePattern);
    return nodeNameMatch && nodeNameMatch[1].toLowerCase();
  }
  function createNodesFromMarkup(markup, handleScript) {
    var node = dummyNode;
    !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
    var nodeName = getNodeName(markup);
    var wrap = nodeName && getMarkupWrap(nodeName);
    if (wrap) {
      node.innerHTML = wrap[1] + markup + wrap[2];
      var wrapDepth = wrap[0];
      while (wrapDepth--) {
        node = node.lastChild;
      }
    } else {
      node.innerHTML = markup;
    }
    var scripts = node.getElementsByTagName('script');
    if (scripts.length) {
      !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
      createArrayFromMixed(scripts).forEach(handleScript);
    }
    var nodes = createArrayFromMixed(node.childNodes);
    while (node.lastChild) {
      node.removeChild(node.lastChild);
    }
    return nodes;
  }
  module.exports = createNodesFromMarkup;
  return module.exports;
});

$__System.registerDynamic("69", ["31", "12", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ExecutionEnvironment = $__require('31');
  var invariant = $__require('12');
  var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
  var shouldWrap = {};
  var selectWrap = [1, '<select multiple="true">', '</select>'];
  var tableWrap = [1, '<table>', '</table>'];
  var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];
  var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];
  var markupWrap = {
    '*': [1, '?<div>', '</div>'],
    'area': [1, '<map>', '</map>'],
    'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
    'legend': [1, '<fieldset>', '</fieldset>'],
    'param': [1, '<object>', '</object>'],
    'tr': [2, '<table><tbody>', '</tbody></table>'],
    'optgroup': selectWrap,
    'option': selectWrap,
    'caption': tableWrap,
    'colgroup': tableWrap,
    'tbody': tableWrap,
    'tfoot': tableWrap,
    'thead': tableWrap,
    'td': trWrap,
    'th': trWrap
  };
  var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
  svgElements.forEach(function(nodeName) {
    markupWrap[nodeName] = svgWrap;
    shouldWrap[nodeName] = true;
  });
  function getMarkupWrap(nodeName) {
    !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
    if (!markupWrap.hasOwnProperty(nodeName)) {
      nodeName = '*';
    }
    if (!shouldWrap.hasOwnProperty(nodeName)) {
      if (nodeName === '*') {
        dummyNode.innerHTML = '<link />';
      } else {
        dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
      }
      shouldWrap[nodeName] = !dummyNode.firstChild;
    }
    return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
  }
  module.exports = getMarkupWrap;
  return module.exports;
});

$__System.registerDynamic("6a", ["31", "68", "9", "69", "12", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ExecutionEnvironment = $__require('31');
  var createNodesFromMarkup = $__require('68');
  var emptyFunction = $__require('9');
  var getMarkupWrap = $__require('69');
  var invariant = $__require('12');
  var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
  var RESULT_INDEX_ATTR = 'data-danger-index';
  function getNodeName(markup) {
    return markup.substring(1, markup.indexOf(' '));
  }
  var Danger = {
    dangerouslyRenderMarkup: function(markupList) {
      !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
      var nodeName;
      var markupByNodeName = {};
      for (var i = 0; i < markupList.length; i++) {
        !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
        nodeName = getNodeName(markupList[i]);
        nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
        markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
        markupByNodeName[nodeName][i] = markupList[i];
      }
      var resultList = [];
      var resultListAssignmentCount = 0;
      for (nodeName in markupByNodeName) {
        if (!markupByNodeName.hasOwnProperty(nodeName)) {
          continue;
        }
        var markupListByNodeName = markupByNodeName[nodeName];
        var resultIndex;
        for (resultIndex in markupListByNodeName) {
          if (markupListByNodeName.hasOwnProperty(resultIndex)) {
            var markup = markupListByNodeName[resultIndex];
            markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP, '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
          }
        }
        var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction);
        for (var j = 0; j < renderNodes.length; ++j) {
          var renderNode = renderNodes[j];
          if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {
            resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
            renderNode.removeAttribute(RESULT_INDEX_ATTR);
            !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;
            resultList[resultIndex] = renderNode;
            resultListAssignmentCount += 1;
          } else if (process.env.NODE_ENV !== 'production') {
            console.error('Danger: Discarding unexpected node:', renderNode);
          }
        }
      }
      !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;
      !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;
      return resultList;
    },
    dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
      !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
      !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
      !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;
      var newChild;
      if (typeof markup === 'string') {
        newChild = createNodesFromMarkup(markup, emptyFunction)[0];
      } else {
        newChild = markup;
      }
      oldChild.parentNode.replaceChild(newChild, oldChild);
    }
  };
  module.exports = Danger;
  return module.exports;
});

$__System.registerDynamic("5b", ["6b", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var keyMirror = $__require('6b');
  var ReactMultiChildUpdateTypes = keyMirror({
    INSERT_MARKUP: null,
    MOVE_EXISTING: null,
    REMOVE_NODE: null,
    SET_MARKUP: null,
    TEXT_CONTENT: null
  });
  module.exports = ReactMultiChildUpdateTypes;
  return module.exports;
});

$__System.registerDynamic("6c", ["6a", "5b", "4c", "62", "63", "12", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var Danger = $__require('6a');
  var ReactMultiChildUpdateTypes = $__require('5b');
  var ReactPerf = $__require('4c');
  var setInnerHTML = $__require('62');
  var setTextContent = $__require('63');
  var invariant = $__require('12');
  function insertChildAt(parentNode, childNode, index) {
    var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);
    parentNode.insertBefore(childNode, beforeChild);
  }
  var DOMChildrenOperations = {
    dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,
    updateTextContent: setTextContent,
    processUpdates: function(updates, markupList) {
      var update;
      var initialChildren = null;
      var updatedChildren = null;
      for (var i = 0; i < updates.length; i++) {
        update = updates[i];
        if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
          var updatedIndex = update.fromIndex;
          var updatedChild = update.parentNode.childNodes[updatedIndex];
          var parentID = update.parentID;
          !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;
          initialChildren = initialChildren || {};
          initialChildren[parentID] = initialChildren[parentID] || [];
          initialChildren[parentID][updatedIndex] = updatedChild;
          updatedChildren = updatedChildren || [];
          updatedChildren.push(updatedChild);
        }
      }
      var renderedMarkup;
      if (markupList.length && typeof markupList[0] === 'string') {
        renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
      } else {
        renderedMarkup = markupList;
      }
      if (updatedChildren) {
        for (var j = 0; j < updatedChildren.length; j++) {
          updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
        }
      }
      for (var k = 0; k < updates.length; k++) {
        update = updates[k];
        switch (update.type) {
          case ReactMultiChildUpdateTypes.INSERT_MARKUP:
            insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
            break;
          case ReactMultiChildUpdateTypes.MOVE_EXISTING:
            insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
            break;
          case ReactMultiChildUpdateTypes.SET_MARKUP:
            setInnerHTML(update.parentNode, update.content);
            break;
          case ReactMultiChildUpdateTypes.TEXT_CONTENT:
            setTextContent(update.parentNode, update.content);
            break;
          case ReactMultiChildUpdateTypes.REMOVE_NODE:
            break;
        }
      }
    }
  };
  ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {updateTextContent: 'updateTextContent'});
  module.exports = DOMChildrenOperations;
  return module.exports;
});

$__System.registerDynamic("6d", ["61", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var escapeTextContentForBrowser = $__require('61');
  function quoteAttributeValueForBrowser(value) {
    return '"' + escapeTextContentForBrowser(value) + '"';
  }
  module.exports = quoteAttributeValueForBrowser;
  return module.exports;
});

$__System.registerDynamic("5d", ["3e", "4c", "6d", "1e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var DOMProperty = $__require('3e');
  var ReactPerf = $__require('4c');
  var quoteAttributeValueForBrowser = $__require('6d');
  var warning = $__require('1e');
  var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
  var illegalAttributeNameCache = {};
  var validatedAttributeNameCache = {};
  function isAttributeNameSafe(attributeName) {
    if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
      return true;
    }
    if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
      return false;
    }
    if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
      validatedAttributeNameCache[attributeName] = true;
      return true;
    }
    illegalAttributeNameCache[attributeName] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
    return false;
  }
  function shouldIgnoreValue(propertyInfo, value) {
    return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
  }
  if (process.env.NODE_ENV !== 'production') {
    var reactProps = {
      children: true,
      dangerouslySetInnerHTML: true,
      key: true,
      ref: true
    };
    var warnedProperties = {};
    var warnUnknownProperty = function(name) {
      if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
        return;
      }
      warnedProperties[name] = true;
      var lowerCasedName = name.toLowerCase();
      var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;
      process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
    };
  }
  var DOMPropertyOperations = {
    createMarkupForID: function(id) {
      return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
    },
    setAttributeForID: function(node, id) {
      node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
    },
    createMarkupForProperty: function(name, value) {
      var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
      if (propertyInfo) {
        if (shouldIgnoreValue(propertyInfo, value)) {
          return '';
        }
        var attributeName = propertyInfo.attributeName;
        if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
          return attributeName + '=""';
        }
        return attributeName + '=' + quoteAttributeValueForBrowser(value);
      } else if (DOMProperty.isCustomAttribute(name)) {
        if (value == null) {
          return '';
        }
        return name + '=' + quoteAttributeValueForBrowser(value);
      } else if (process.env.NODE_ENV !== 'production') {
        warnUnknownProperty(name);
      }
      return null;
    },
    createMarkupForCustomAttribute: function(name, value) {
      if (!isAttributeNameSafe(name) || value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    },
    setValueForProperty: function(node, name, value) {
      var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
      if (propertyInfo) {
        var mutationMethod = propertyInfo.mutationMethod;
        if (mutationMethod) {
          mutationMethod(node, value);
        } else if (shouldIgnoreValue(propertyInfo, value)) {
          this.deleteValueForProperty(node, name);
        } else if (propertyInfo.mustUseAttribute) {
          var attributeName = propertyInfo.attributeName;
          var namespace = propertyInfo.attributeNamespace;
          if (namespace) {
            node.setAttributeNS(namespace, attributeName, '' + value);
          } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
            node.setAttribute(attributeName, '');
          } else {
            node.setAttribute(attributeName, '' + value);
          }
        } else {
          var propName = propertyInfo.propertyName;
          if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
            node[propName] = value;
          }
        }
      } else if (DOMProperty.isCustomAttribute(name)) {
        DOMPropertyOperations.setValueForAttribute(node, name, value);
      } else if (process.env.NODE_ENV !== 'production') {
        warnUnknownProperty(name);
      }
    },
    setValueForAttribute: function(node, name, value) {
      if (!isAttributeNameSafe(name)) {
        return;
      }
      if (value == null) {
        node.removeAttribute(name);
      } else {
        node.setAttribute(name, '' + value);
      }
    },
    deleteValueForProperty: function(node, name) {
      var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
      if (propertyInfo) {
        var mutationMethod = propertyInfo.mutationMethod;
        if (mutationMethod) {
          mutationMethod(node, undefined);
        } else if (propertyInfo.mustUseAttribute) {
          node.removeAttribute(propertyInfo.attributeName);
        } else {
          var propName = propertyInfo.propertyName;
          var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
          if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
            node[propName] = defaultValue;
          }
        }
      } else if (DOMProperty.isCustomAttribute(name)) {
        node.removeAttribute(name);
      } else if (process.env.NODE_ENV !== 'production') {
        warnUnknownProperty(name);
      }
    }
  };
  ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
    setValueForProperty: 'setValueForProperty',
    setValueForAttribute: 'setValueForAttribute',
    deleteValueForProperty: 'deleteValueForProperty'
  });
  module.exports = DOMPropertyOperations;
  return module.exports;
});

$__System.registerDynamic("4f", ["6c", "5d", "3c", "4c", "12", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var DOMChildrenOperations = $__require('6c');
  var DOMPropertyOperations = $__require('5d');
  var ReactMount = $__require('3c');
  var ReactPerf = $__require('4c');
  var invariant = $__require('12');
  var INVALID_PROPERTY_ERRORS = {
    dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
    style: '`style` must be set using `updateStylesByID()`.'
  };
  var ReactDOMIDOperations = {
    updatePropertyByID: function(id, name, value) {
      var node = ReactMount.getNode(id);
      !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;
      if (value != null) {
        DOMPropertyOperations.setValueForProperty(node, name, value);
      } else {
        DOMPropertyOperations.deleteValueForProperty(node, name);
      }
    },
    dangerouslyReplaceNodeWithMarkupByID: function(id, markup) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
    },
    dangerouslyProcessChildrenUpdates: function(updates, markup) {
      for (var i = 0; i < updates.length; i++) {
        updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
      }
      DOMChildrenOperations.processUpdates(updates, markup);
    }
  };
  ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
    dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
    dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
  });
  module.exports = ReactDOMIDOperations;
  return module.exports;
});

$__System.registerDynamic("5f", ["4f", "3c", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactDOMIDOperations = $__require('4f');
  var ReactMount = $__require('3c');
  var ReactComponentBrowserEnvironment = {
    processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,
    replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,
    unmountIDFromEnvironment: function(rootNodeID) {
      ReactMount.purgeID(rootNodeID);
    }
  };
  module.exports = ReactComponentBrowserEnvironment;
  return module.exports;
});

$__System.registerDynamic("61", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ESCAPE_LOOKUP = {
    '&': '&amp;',
    '>': '&gt;',
    '<': '&lt;',
    '"': '&quot;',
    '\'': '&#x27;'
  };
  var ESCAPE_REGEX = /[&><"']/g;
  function escaper(match) {
    return ESCAPE_LOOKUP[match];
  }
  function escapeTextContentForBrowser(text) {
    return ('' + text).replace(ESCAPE_REGEX, escaper);
  }
  module.exports = escapeTextContentForBrowser;
  return module.exports;
});

$__System.registerDynamic("63", ["31", "61", "62", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ExecutionEnvironment = $__require('31');
  var escapeTextContentForBrowser = $__require('61');
  var setInnerHTML = $__require('62');
  var setTextContent = function(node, text) {
    node.textContent = text;
  };
  if (ExecutionEnvironment.canUseDOM) {
    if (!('textContent' in document.documentElement)) {
      setTextContent = function(node, text) {
        setInnerHTML(node, escapeTextContentForBrowser(text));
      };
    }
  }
  module.exports = setTextContent;
  return module.exports;
});

$__System.registerDynamic("6e", ["6c", "5d", "5f", "3c", "8", "61", "63", "64", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var DOMChildrenOperations = $__require('6c');
  var DOMPropertyOperations = $__require('5d');
  var ReactComponentBrowserEnvironment = $__require('5f');
  var ReactMount = $__require('3c');
  var assign = $__require('8');
  var escapeTextContentForBrowser = $__require('61');
  var setTextContent = $__require('63');
  var validateDOMNesting = $__require('64');
  var ReactDOMTextComponent = function(props) {};
  assign(ReactDOMTextComponent.prototype, {
    construct: function(text) {
      this._currentElement = text;
      this._stringText = '' + text;
      this._rootNodeID = null;
      this._mountIndex = 0;
    },
    mountComponent: function(rootID, transaction, context) {
      if (process.env.NODE_ENV !== 'production') {
        if (context[validateDOMNesting.ancestorInfoContextKey]) {
          validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
        }
      }
      this._rootNodeID = rootID;
      if (transaction.useCreateElement) {
        var ownerDocument = context[ReactMount.ownerDocumentContextKey];
        var el = ownerDocument.createElement('span');
        DOMPropertyOperations.setAttributeForID(el, rootID);
        ReactMount.getID(el);
        setTextContent(el, this._stringText);
        return el;
      } else {
        var escapedText = escapeTextContentForBrowser(this._stringText);
        if (transaction.renderToStaticMarkup) {
          return escapedText;
        }
        return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
      }
    },
    receiveComponent: function(nextText, transaction) {
      if (nextText !== this._currentElement) {
        this._currentElement = nextText;
        var nextStringText = '' + nextText;
        if (nextStringText !== this._stringText) {
          this._stringText = nextStringText;
          var node = ReactMount.getNode(this._rootNodeID);
          DOMChildrenOperations.updateTextContent(node, nextStringText);
        }
      }
    },
    unmountComponent: function() {
      ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
    }
  });
  module.exports = ReactDOMTextComponent;
  return module.exports;
});

$__System.registerDynamic("6f", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function getUnboundedScrollPosition(scrollable) {
    if (scrollable === window) {
      return {
        x: window.pageXOffset || document.documentElement.scrollLeft,
        y: window.pageYOffset || document.documentElement.scrollTop
      };
    }
    return {
      x: scrollable.scrollLeft,
      y: scrollable.scrollTop
    };
  }
  module.exports = getUnboundedScrollPosition;
  return module.exports;
});

$__System.registerDynamic("70", ["71", "31", "5", "d", "3c", "f", "8", "35", "6f", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var EventListener = $__require('71');
  var ExecutionEnvironment = $__require('31');
  var PooledClass = $__require('5');
  var ReactInstanceHandles = $__require('d');
  var ReactMount = $__require('3c');
  var ReactUpdates = $__require('f');
  var assign = $__require('8');
  var getEventTarget = $__require('35');
  var getUnboundedScrollPosition = $__require('6f');
  var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
  function findParent(node) {
    var nodeID = ReactMount.getID(node);
    var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
    var container = ReactMount.findReactContainerForID(rootID);
    var parent = ReactMount.getFirstReactDOM(container);
    return parent;
  }
  function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
    this.topLevelType = topLevelType;
    this.nativeEvent = nativeEvent;
    this.ancestors = [];
  }
  assign(TopLevelCallbackBookKeeping.prototype, {destructor: function() {
      this.topLevelType = null;
      this.nativeEvent = null;
      this.ancestors.length = 0;
    }});
  PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);
  function handleTopLevelImpl(bookKeeping) {
    void handleTopLevelWithPath;
    handleTopLevelWithoutPath(bookKeeping);
  }
  function handleTopLevelWithoutPath(bookKeeping) {
    var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;
    var ancestor = topLevelTarget;
    while (ancestor) {
      bookKeeping.ancestors.push(ancestor);
      ancestor = findParent(ancestor);
    }
    for (var i = 0; i < bookKeeping.ancestors.length; i++) {
      topLevelTarget = bookKeeping.ancestors[i];
      var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
    }
  }
  function handleTopLevelWithPath(bookKeeping) {
    var path = bookKeeping.nativeEvent.path;
    var currentNativeTarget = path[0];
    var eventsFired = 0;
    for (var i = 0; i < path.length; i++) {
      var currentPathElement = path[i];
      if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
        currentNativeTarget = path[i + 1];
      }
      var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
      if (reactParent === currentPathElement) {
        var currentPathElementID = ReactMount.getID(currentPathElement);
        var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
        bookKeeping.ancestors.push(currentPathElement);
        var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
        eventsFired++;
        ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);
        while (currentPathElementID !== newRootID) {
          i++;
          currentPathElement = path[i];
          currentPathElementID = ReactMount.getID(currentPathElement);
        }
      }
    }
    if (eventsFired === 0) {
      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
    }
  }
  function scrollValueMonitor(cb) {
    var scrollPosition = getUnboundedScrollPosition(window);
    cb(scrollPosition);
  }
  var ReactEventListener = {
    _enabled: true,
    _handleTopLevel: null,
    WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,
    setHandleTopLevel: function(handleTopLevel) {
      ReactEventListener._handleTopLevel = handleTopLevel;
    },
    setEnabled: function(enabled) {
      ReactEventListener._enabled = !!enabled;
    },
    isEnabled: function() {
      return ReactEventListener._enabled;
    },
    trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
      var element = handle;
      if (!element) {
        return null;
      }
      return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
    },
    trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
      var element = handle;
      if (!element) {
        return null;
      }
      return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
    },
    monitorScrollValue: function(refresh) {
      var callback = scrollValueMonitor.bind(null, refresh);
      EventListener.listen(window, 'scroll', callback);
    },
    dispatchEvent: function(topLevelType, nativeEvent) {
      if (!ReactEventListener._enabled) {
        return;
      }
      var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
      try {
        ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
      } finally {
        TopLevelCallbackBookKeeping.release(bookKeeping);
      }
    }
  };
  module.exports = ReactEventListener;
  return module.exports;
});

$__System.registerDynamic("22", ["72", "1c", "11", "12", "1e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactNoopUpdateQueue = $__require('72');
  var canDefineProperty = $__require('1c');
  var emptyObject = $__require('11');
  var invariant = $__require('12');
  var warning = $__require('1e');
  function ReactComponent(props, context, updater) {
    this.props = props;
    this.context = context;
    this.refs = emptyObject;
    this.updater = updater || ReactNoopUpdateQueue;
  }
  ReactComponent.prototype.isReactComponent = {};
  ReactComponent.prototype.setState = function(partialState, callback) {
    !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
    }
    this.updater.enqueueSetState(this, partialState);
    if (callback) {
      this.updater.enqueueCallback(this, callback);
    }
  };
  ReactComponent.prototype.forceUpdate = function(callback) {
    this.updater.enqueueForceUpdate(this);
    if (callback) {
      this.updater.enqueueCallback(this, callback);
    }
  };
  if (process.env.NODE_ENV !== 'production') {
    var deprecatedAPIs = {
      getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],
      isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
      replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],
      replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
      setProps: ['setProps', 'Instead, call render again at the top level.']
    };
    var defineDeprecationWarning = function(methodName, info) {
      if (canDefineProperty) {
        Object.defineProperty(ReactComponent.prototype, methodName, {get: function() {
            process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
            return undefined;
          }});
      }
    };
    for (var fnName in deprecatedAPIs) {
      if (deprecatedAPIs.hasOwnProperty(fnName)) {
        defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
      }
    }
  }
  module.exports = ReactComponent;
  return module.exports;
});

$__System.registerDynamic("72", ["1e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var warning = $__require('1e');
  function warnTDZ(publicInstance, callerName) {
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
    }
  }
  var ReactNoopUpdateQueue = {
    isMounted: function(publicInstance) {
      return false;
    },
    enqueueCallback: function(publicInstance, callback) {},
    enqueueForceUpdate: function(publicInstance) {
      warnTDZ(publicInstance, 'forceUpdate');
    },
    enqueueReplaceState: function(publicInstance, completeState) {
      warnTDZ(publicInstance, 'replaceState');
    },
    enqueueSetState: function(publicInstance, partialState) {
      warnTDZ(publicInstance, 'setState');
    },
    enqueueSetProps: function(publicInstance, partialProps) {
      warnTDZ(publicInstance, 'setProps');
    },
    enqueueReplaceProps: function(publicInstance, props) {
      warnTDZ(publicInstance, 'replaceProps');
    }
  };
  module.exports = ReactNoopUpdateQueue;
  return module.exports;
});

$__System.registerDynamic("23", ["22", "c", "19", "1a", "72", "8", "11", "12", "6b", "32", "1e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactComponent = $__require('22');
  var ReactElement = $__require('c');
  var ReactPropTypeLocations = $__require('19');
  var ReactPropTypeLocationNames = $__require('1a');
  var ReactNoopUpdateQueue = $__require('72');
  var assign = $__require('8');
  var emptyObject = $__require('11');
  var invariant = $__require('12');
  var keyMirror = $__require('6b');
  var keyOf = $__require('32');
  var warning = $__require('1e');
  var MIXINS_KEY = keyOf({mixins: null});
  var SpecPolicy = keyMirror({
    DEFINE_ONCE: null,
    DEFINE_MANY: null,
    OVERRIDE_BASE: null,
    DEFINE_MANY_MERGED: null
  });
  var injectedMixins = [];
  var warnedSetProps = false;
  function warnSetProps() {
    if (!warnedSetProps) {
      warnedSetProps = true;
      process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
    }
  }
  var ReactClassInterface = {
    mixins: SpecPolicy.DEFINE_MANY,
    statics: SpecPolicy.DEFINE_MANY,
    propTypes: SpecPolicy.DEFINE_MANY,
    contextTypes: SpecPolicy.DEFINE_MANY,
    childContextTypes: SpecPolicy.DEFINE_MANY,
    getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,
    getInitialState: SpecPolicy.DEFINE_MANY_MERGED,
    getChildContext: SpecPolicy.DEFINE_MANY_MERGED,
    render: SpecPolicy.DEFINE_ONCE,
    componentWillMount: SpecPolicy.DEFINE_MANY,
    componentDidMount: SpecPolicy.DEFINE_MANY,
    componentWillReceiveProps: SpecPolicy.DEFINE_MANY,
    shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,
    componentWillUpdate: SpecPolicy.DEFINE_MANY,
    componentDidUpdate: SpecPolicy.DEFINE_MANY,
    componentWillUnmount: SpecPolicy.DEFINE_MANY,
    updateComponent: SpecPolicy.OVERRIDE_BASE
  };
  var RESERVED_SPEC_KEYS = {
    displayName: function(Constructor, displayName) {
      Constructor.displayName = displayName;
    },
    mixins: function(Constructor, mixins) {
      if (mixins) {
        for (var i = 0; i < mixins.length; i++) {
          mixSpecIntoComponent(Constructor, mixins[i]);
        }
      }
    },
    childContextTypes: function(Constructor, childContextTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
      }
      Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);
    },
    contextTypes: function(Constructor, contextTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
      }
      Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);
    },
    getDefaultProps: function(Constructor, getDefaultProps) {
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
      } else {
        Constructor.getDefaultProps = getDefaultProps;
      }
    },
    propTypes: function(Constructor, propTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
      }
      Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);
    },
    statics: function(Constructor, statics) {
      mixStaticSpecIntoComponent(Constructor, statics);
    },
    autobind: function() {}
  };
  function validateTypeDef(Constructor, typeDef, location) {
    for (var propName in typeDef) {
      if (typeDef.hasOwnProperty(propName)) {
        process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
      }
    }
  }
  function validateMethodOverride(proto, name) {
    var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;
    if (ReactClassMixin.hasOwnProperty(name)) {
      !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
    }
    if (proto.hasOwnProperty(name)) {
      !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
    }
  }
  function mixSpecIntoComponent(Constructor, spec) {
    if (!spec) {
      return;
    }
    !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
    !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
    var proto = Constructor.prototype;
    if (spec.hasOwnProperty(MIXINS_KEY)) {
      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
    }
    for (var name in spec) {
      if (!spec.hasOwnProperty(name)) {
        continue;
      }
      if (name === MIXINS_KEY) {
        continue;
      }
      var property = spec[name];
      validateMethodOverride(proto, name);
      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
        RESERVED_SPEC_KEYS[name](Constructor, property);
      } else {
        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
        var isAlreadyDefined = proto.hasOwnProperty(name);
        var isFunction = typeof property === 'function';
        var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;
        if (shouldAutoBind) {
          if (!proto.__reactAutoBindMap) {
            proto.__reactAutoBindMap = {};
          }
          proto.__reactAutoBindMap[name] = property;
          proto[name] = property;
        } else {
          if (isAlreadyDefined) {
            var specPolicy = ReactClassInterface[name];
            !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;
            if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
              proto[name] = createMergedResultFunction(proto[name], property);
            } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
              proto[name] = createChainedFunction(proto[name], property);
            }
          } else {
            proto[name] = property;
            if (process.env.NODE_ENV !== 'production') {
              if (typeof property === 'function' && spec.displayName) {
                proto[name].displayName = spec.displayName + '_' + name;
              }
            }
          }
        }
      }
    }
  }
  function mixStaticSpecIntoComponent(Constructor, statics) {
    if (!statics) {
      return;
    }
    for (var name in statics) {
      var property = statics[name];
      if (!statics.hasOwnProperty(name)) {
        continue;
      }
      var isReserved = (name in RESERVED_SPEC_KEYS);
      !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;
      var isInherited = (name in Constructor);
      !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
      Constructor[name] = property;
    }
  }
  function mergeIntoWithNoDuplicateKeys(one, two) {
    !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;
    for (var key in two) {
      if (two.hasOwnProperty(key)) {
        !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
        one[key] = two[key];
      }
    }
    return one;
  }
  function createMergedResultFunction(one, two) {
    return function mergedResult() {
      var a = one.apply(this, arguments);
      var b = two.apply(this, arguments);
      if (a == null) {
        return b;
      } else if (b == null) {
        return a;
      }
      var c = {};
      mergeIntoWithNoDuplicateKeys(c, a);
      mergeIntoWithNoDuplicateKeys(c, b);
      return c;
    };
  }
  function createChainedFunction(one, two) {
    return function chainedFunction() {
      one.apply(this, arguments);
      two.apply(this, arguments);
    };
  }
  function bindAutoBindMethod(component, method) {
    var boundMethod = method.bind(component);
    if (process.env.NODE_ENV !== 'production') {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function(newThis) {
        for (var _len = arguments.length,
            args = Array(_len > 1 ? _len - 1 : 0),
            _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        if (newThis !== component && newThis !== null) {
          process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
        } else if (!args.length) {
          process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }
  function bindAutoBindMethods(component) {
    for (var autoBindKey in component.__reactAutoBindMap) {
      if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
        var method = component.__reactAutoBindMap[autoBindKey];
        component[autoBindKey] = bindAutoBindMethod(component, method);
      }
    }
  }
  var ReactClassMixin = {
    replaceState: function(newState, callback) {
      this.updater.enqueueReplaceState(this, newState);
      if (callback) {
        this.updater.enqueueCallback(this, callback);
      }
    },
    isMounted: function() {
      return this.updater.isMounted(this);
    },
    setProps: function(partialProps, callback) {
      if (process.env.NODE_ENV !== 'production') {
        warnSetProps();
      }
      this.updater.enqueueSetProps(this, partialProps);
      if (callback) {
        this.updater.enqueueCallback(this, callback);
      }
    },
    replaceProps: function(newProps, callback) {
      if (process.env.NODE_ENV !== 'production') {
        warnSetProps();
      }
      this.updater.enqueueReplaceProps(this, newProps);
      if (callback) {
        this.updater.enqueueCallback(this, callback);
      }
    }
  };
  var ReactClassComponent = function() {};
  assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);
  var ReactClass = {
    createClass: function(spec) {
      var Constructor = function(props, context, updater) {
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
        }
        if (this.__reactAutoBindMap) {
          bindAutoBindMethods(this);
        }
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
        this.state = null;
        var initialState = this.getInitialState ? this.getInitialState() : null;
        if (process.env.NODE_ENV !== 'production') {
          if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
            initialState = null;
          }
        }
        !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;
        this.state = initialState;
      };
      Constructor.prototype = new ReactClassComponent();
      Constructor.prototype.constructor = Constructor;
      injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
      mixSpecIntoComponent(Constructor, spec);
      if (Constructor.getDefaultProps) {
        Constructor.defaultProps = Constructor.getDefaultProps();
      }
      if (process.env.NODE_ENV !== 'production') {
        if (Constructor.getDefaultProps) {
          Constructor.getDefaultProps.isReactClassApproved = {};
        }
        if (Constructor.prototype.getInitialState) {
          Constructor.prototype.getInitialState.isReactClassApproved = {};
        }
      }
      !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;
      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
        process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
      }
      for (var methodName in ReactClassInterface) {
        if (!Constructor.prototype[methodName]) {
          Constructor.prototype[methodName] = null;
        }
      }
      return Constructor;
    },
    injection: {injectMixin: function(mixin) {
        injectedMixins.push(mixin);
      }}
  };
  module.exports = ReactClass;
  return module.exports;
});

$__System.registerDynamic("73", ["3e", "34", "5a", "23", "74", "5e", "75", "4c", "76", "f", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var DOMProperty = $__require('3e');
  var EventPluginHub = $__require('34');
  var ReactComponentEnvironment = $__require('5a');
  var ReactClass = $__require('23');
  var ReactEmptyComponent = $__require('74');
  var ReactBrowserEventEmitter = $__require('5e');
  var ReactNativeComponent = $__require('75');
  var ReactPerf = $__require('4c');
  var ReactRootIndex = $__require('76');
  var ReactUpdates = $__require('f');
  var ReactInjection = {
    Component: ReactComponentEnvironment.injection,
    Class: ReactClass.injection,
    DOMProperty: DOMProperty.injection,
    EmptyComponent: ReactEmptyComponent.injection,
    EventPluginHub: EventPluginHub.injection,
    EventEmitter: ReactBrowserEventEmitter.injection,
    NativeComponent: ReactNativeComponent.injection,
    Perf: ReactPerf.injection,
    RootIndex: ReactRootIndex.injection,
    Updates: ReactUpdates.injection
  };
  module.exports = ReactInjection;
  return module.exports;
});

$__System.registerDynamic("77", ["6", "5", "5e", "78", "79", "7", "8", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var CallbackQueue = $__require('6');
  var PooledClass = $__require('5');
  var ReactBrowserEventEmitter = $__require('5e');
  var ReactDOMFeatureFlags = $__require('78');
  var ReactInputSelection = $__require('79');
  var Transaction = $__require('7');
  var assign = $__require('8');
  var SELECTION_RESTORATION = {
    initialize: ReactInputSelection.getSelectionInformation,
    close: ReactInputSelection.restoreSelection
  };
  var EVENT_SUPPRESSION = {
    initialize: function() {
      var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
      ReactBrowserEventEmitter.setEnabled(false);
      return currentlyEnabled;
    },
    close: function(previouslyEnabled) {
      ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
    }
  };
  var ON_DOM_READY_QUEUEING = {
    initialize: function() {
      this.reactMountReady.reset();
    },
    close: function() {
      this.reactMountReady.notifyAll();
    }
  };
  var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];
  function ReactReconcileTransaction(forceHTML) {
    this.reinitializeTransaction();
    this.renderToStaticMarkup = false;
    this.reactMountReady = CallbackQueue.getPooled(null);
    this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
  }
  var Mixin = {
    getTransactionWrappers: function() {
      return TRANSACTION_WRAPPERS;
    },
    getReactMountReady: function() {
      return this.reactMountReady;
    },
    destructor: function() {
      CallbackQueue.release(this.reactMountReady);
      this.reactMountReady = null;
    }
  };
  assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);
  PooledClass.addPoolingTo(ReactReconcileTransaction);
  module.exports = ReactReconcileTransaction;
  return module.exports;
});

$__System.registerDynamic("7a", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function getLeafNode(node) {
    while (node && node.firstChild) {
      node = node.firstChild;
    }
    return node;
  }
  function getSiblingNode(node) {
    while (node) {
      if (node.nextSibling) {
        return node.nextSibling;
      }
      node = node.parentNode;
    }
  }
  function getNodeForCharacterOffset(root, offset) {
    var node = getLeafNode(root);
    var nodeStart = 0;
    var nodeEnd = 0;
    while (node) {
      if (node.nodeType === 3) {
        nodeEnd = nodeStart + node.textContent.length;
        if (nodeStart <= offset && nodeEnd >= offset) {
          return {
            node: node,
            offset: offset - nodeStart
          };
        }
        nodeStart = nodeEnd;
      }
      node = getLeafNode(getSiblingNode(node));
    }
  }
  module.exports = getNodeForCharacterOffset;
  return module.exports;
});

$__System.registerDynamic("2a", ["31", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ExecutionEnvironment = $__require('31');
  var contentKey = null;
  function getTextContentAccessor() {
    if (!contentKey && ExecutionEnvironment.canUseDOM) {
      contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
    }
    return contentKey;
  }
  module.exports = getTextContentAccessor;
  return module.exports;
});

$__System.registerDynamic("7b", ["31", "7a", "2a", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ExecutionEnvironment = $__require('31');
  var getNodeForCharacterOffset = $__require('7a');
  var getTextContentAccessor = $__require('2a');
  function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
    return anchorNode === focusNode && anchorOffset === focusOffset;
  }
  function getIEOffsets(node) {
    var selection = document.selection;
    var selectedRange = selection.createRange();
    var selectedLength = selectedRange.text.length;
    var fromStart = selectedRange.duplicate();
    fromStart.moveToElementText(node);
    fromStart.setEndPoint('EndToStart', selectedRange);
    var startOffset = fromStart.text.length;
    var endOffset = startOffset + selectedLength;
    return {
      start: startOffset,
      end: endOffset
    };
  }
  function getModernOffsets(node) {
    var selection = window.getSelection && window.getSelection();
    if (!selection || selection.rangeCount === 0) {
      return null;
    }
    var anchorNode = selection.anchorNode;
    var anchorOffset = selection.anchorOffset;
    var focusNode = selection.focusNode;
    var focusOffset = selection.focusOffset;
    var currentRange = selection.getRangeAt(0);
    try {
      currentRange.startContainer.nodeType;
      currentRange.endContainer.nodeType;
    } catch (e) {
      return null;
    }
    var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);
    var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;
    var tempRange = currentRange.cloneRange();
    tempRange.selectNodeContents(node);
    tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);
    var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);
    var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
    var end = start + rangeLength;
    var detectionRange = document.createRange();
    detectionRange.setStart(anchorNode, anchorOffset);
    detectionRange.setEnd(focusNode, focusOffset);
    var isBackward = detectionRange.collapsed;
    return {
      start: isBackward ? end : start,
      end: isBackward ? start : end
    };
  }
  function setIEOffsets(node, offsets) {
    var range = document.selection.createRange().duplicate();
    var start,
        end;
    if (typeof offsets.end === 'undefined') {
      start = offsets.start;
      end = start;
    } else if (offsets.start > offsets.end) {
      start = offsets.end;
      end = offsets.start;
    } else {
      start = offsets.start;
      end = offsets.end;
    }
    range.moveToElementText(node);
    range.moveStart('character', start);
    range.setEndPoint('EndToStart', range);
    range.moveEnd('character', end - start);
    range.select();
  }
  function setModernOffsets(node, offsets) {
    if (!window.getSelection) {
      return;
    }
    var selection = window.getSelection();
    var length = node[getTextContentAccessor()].length;
    var start = Math.min(offsets.start, length);
    var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);
    if (!selection.extend && start > end) {
      var temp = end;
      end = start;
      start = temp;
    }
    var startMarker = getNodeForCharacterOffset(node, start);
    var endMarker = getNodeForCharacterOffset(node, end);
    if (startMarker && endMarker) {
      var range = document.createRange();
      range.setStart(startMarker.node, startMarker.offset);
      selection.removeAllRanges();
      if (start > end) {
        selection.addRange(range);
        selection.extend(endMarker.node, endMarker.offset);
      } else {
        range.setEnd(endMarker.node, endMarker.offset);
        selection.addRange(range);
      }
    }
  }
  var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);
  var ReactDOMSelection = {
    getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,
    setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
  };
  module.exports = ReactDOMSelection;
  return module.exports;
});

$__System.registerDynamic("43", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function focusNode(node) {
    try {
      node.focus();
    } catch (e) {}
  }
  module.exports = focusNode;
  return module.exports;
});

$__System.registerDynamic("79", ["7b", "7c", "43", "7d", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactDOMSelection = $__require('7b');
  var containsNode = $__require('7c');
  var focusNode = $__require('43');
  var getActiveElement = $__require('7d');
  function isInDocument(node) {
    return containsNode(document.documentElement, node);
  }
  var ReactInputSelection = {
    hasSelectionCapabilities: function(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
    },
    getSelectionInformation: function() {
      var focusedElem = getActiveElement();
      return {
        focusedElem: focusedElem,
        selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
      };
    },
    restoreSelection: function(priorSelectionInformation) {
      var curFocusedElem = getActiveElement();
      var priorFocusedElem = priorSelectionInformation.focusedElem;
      var priorSelectionRange = priorSelectionInformation.selectionRange;
      if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
        if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
          ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
        }
        focusNode(priorFocusedElem);
      }
    },
    getSelection: function(input) {
      var selection;
      if ('selectionStart' in input) {
        selection = {
          start: input.selectionStart,
          end: input.selectionEnd
        };
      } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
        var range = document.selection.createRange();
        if (range.parentElement() === input) {
          selection = {
            start: -range.moveStart('character', -input.value.length),
            end: -range.moveEnd('character', -input.value.length)
          };
        }
      } else {
        selection = ReactDOMSelection.getOffsets(input);
      }
      return selection || {
        start: 0,
        end: 0
      };
    },
    setSelection: function(input, offsets) {
      var start = offsets.start;
      var end = offsets.end;
      if (typeof end === 'undefined') {
        end = start;
      }
      if ('selectionStart' in input) {
        input.selectionStart = start;
        input.selectionEnd = Math.min(end, input.value.length);
      } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
        var range = input.createTextRange();
        range.collapse(true);
        range.moveStart('character', start);
        range.moveEnd('character', end - start);
        range.select();
      } else {
        ReactDOMSelection.setOffsets(input, offsets);
      }
    }
  };
  module.exports = ReactInputSelection;
  return module.exports;
});

$__System.registerDynamic("7d", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function getActiveElement() {
    if (typeof document === 'undefined') {
      return null;
    }
    try {
      return document.activeElement || document.body;
    } catch (e) {
      return document.body;
    }
  }
  module.exports = getActiveElement;
  return module.exports;
});

$__System.registerDynamic("37", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var supportedInputTypes = {
    'color': true,
    'date': true,
    'datetime': true,
    'datetime-local': true,
    'email': true,
    'month': true,
    'number': true,
    'password': true,
    'range': true,
    'search': true,
    'tel': true,
    'text': true,
    'time': true,
    'url': true,
    'week': true
  };
  function isTextInputElement(elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
  }
  module.exports = isTextInputElement;
  return module.exports;
});

$__System.registerDynamic("65", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  function shallowEqual(objA, objB) {
    if (objA === objB) {
      return true;
    }
    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
      return false;
    }
    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) {
      return false;
    }
    var bHasOwnProperty = hasOwnProperty.bind(objB);
    for (var i = 0; i < keysA.length; i++) {
      if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
        return false;
      }
    }
    return true;
  }
  module.exports = shallowEqual;
  return module.exports;
});

$__System.registerDynamic("7e", ["2f", "30", "31", "79", "2c", "7d", "37", "32", "65", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var EventConstants = $__require('2f');
  var EventPropagators = $__require('30');
  var ExecutionEnvironment = $__require('31');
  var ReactInputSelection = $__require('79');
  var SyntheticEvent = $__require('2c');
  var getActiveElement = $__require('7d');
  var isTextInputElement = $__require('37');
  var keyOf = $__require('32');
  var shallowEqual = $__require('65');
  var topLevelTypes = EventConstants.topLevelTypes;
  var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;
  var eventTypes = {select: {
      phasedRegistrationNames: {
        bubbled: keyOf({onSelect: null}),
        captured: keyOf({onSelectCapture: null})
      },
      dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
    }};
  var activeElement = null;
  var activeElementID = null;
  var lastSelection = null;
  var mouseDown = false;
  var hasListener = false;
  var ON_SELECT_KEY = keyOf({onSelect: null});
  function getSelection(node) {
    if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
      return {
        start: node.selectionStart,
        end: node.selectionEnd
      };
    } else if (window.getSelection) {
      var selection = window.getSelection();
      return {
        anchorNode: selection.anchorNode,
        anchorOffset: selection.anchorOffset,
        focusNode: selection.focusNode,
        focusOffset: selection.focusOffset
      };
    } else if (document.selection) {
      var range = document.selection.createRange();
      return {
        parentElement: range.parentElement(),
        text: range.text,
        top: range.boundingTop,
        left: range.boundingLeft
      };
    }
  }
  function constructSelectEvent(nativeEvent, nativeEventTarget) {
    if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
      return null;
    }
    var currentSelection = getSelection(activeElement);
    if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
      lastSelection = currentSelection;
      var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);
      syntheticEvent.type = 'select';
      syntheticEvent.target = activeElement;
      EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);
      return syntheticEvent;
    }
    return null;
  }
  var SelectEventPlugin = {
    eventTypes: eventTypes,
    extractEvents: function(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
      if (!hasListener) {
        return null;
      }
      switch (topLevelType) {
        case topLevelTypes.topFocus:
          if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
            activeElement = topLevelTarget;
            activeElementID = topLevelTargetID;
            lastSelection = null;
          }
          break;
        case topLevelTypes.topBlur:
          activeElement = null;
          activeElementID = null;
          lastSelection = null;
          break;
        case topLevelTypes.topMouseDown:
          mouseDown = true;
          break;
        case topLevelTypes.topContextMenu:
        case topLevelTypes.topMouseUp:
          mouseDown = false;
          return constructSelectEvent(nativeEvent, nativeEventTarget);
        case topLevelTypes.topSelectionChange:
          if (skipSelectionChangeEvent) {
            break;
          }
        case topLevelTypes.topKeyDown:
        case topLevelTypes.topKeyUp:
          return constructSelectEvent(nativeEvent, nativeEventTarget);
      }
      return null;
    },
    didPutListener: function(id, registrationName, listener) {
      if (registrationName === ON_SELECT_KEY) {
        hasListener = true;
      }
    }
  };
  module.exports = SelectEventPlugin;
  return module.exports;
});

$__System.registerDynamic("7f", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);
  var ServerReactRootIndex = {createReactRootIndex: function() {
      return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
    }};
  module.exports = ServerReactRootIndex;
  return module.exports;
});

$__System.registerDynamic("71", ["9", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var emptyFunction = $__require('9');
  var EventListener = {
    listen: function(target, eventType, callback) {
      if (target.addEventListener) {
        target.addEventListener(eventType, callback, false);
        return {remove: function() {
            target.removeEventListener(eventType, callback, false);
          }};
      } else if (target.attachEvent) {
        target.attachEvent('on' + eventType, callback);
        return {remove: function() {
            target.detachEvent('on' + eventType, callback);
          }};
      }
    },
    capture: function(target, eventType, callback) {
      if (target.addEventListener) {
        target.addEventListener(eventType, callback, true);
        return {remove: function() {
            target.removeEventListener(eventType, callback, true);
          }};
      } else {
        if (process.env.NODE_ENV !== 'production') {
          console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
        }
        return {remove: emptyFunction};
      }
    },
    registerDefault: function() {}
  };
  module.exports = EventListener;
  return module.exports;
});

$__System.registerDynamic("30", ["2f", "34", "1e", "80", "81", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var EventConstants = $__require('2f');
  var EventPluginHub = $__require('34');
  var warning = $__require('1e');
  var accumulateInto = $__require('80');
  var forEachAccumulated = $__require('81');
  var PropagationPhases = EventConstants.PropagationPhases;
  var getListener = EventPluginHub.getListener;
  function listenerAtPhase(id, event, propagationPhase) {
    var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
    return getListener(id, registrationName);
  }
  function accumulateDirectionalDispatches(domID, upwards, event) {
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
    }
    var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
    var listener = listenerAtPhase(domID, event, phase);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
    }
  }
  function accumulateTwoPhaseDispatchesSingle(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
    }
  }
  function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
    }
  }
  function accumulateDispatches(id, ignoredDirection, event) {
    if (event && event.dispatchConfig.registrationName) {
      var registrationName = event.dispatchConfig.registrationName;
      var listener = getListener(id, registrationName);
      if (listener) {
        event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
        event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
      }
    }
  }
  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      accumulateDispatches(event.dispatchMarker, null, event);
    }
  }
  function accumulateTwoPhaseDispatches(events) {
    forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
  }
  function accumulateTwoPhaseDispatchesSkipTarget(events) {
    forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
  }
  function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
    EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
  }
  function accumulateDirectDispatches(events) {
    forEachAccumulated(events, accumulateDirectDispatchesSingle);
  }
  var EventPropagators = {
    accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
    accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
    accumulateDirectDispatches: accumulateDirectDispatches,
    accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
  };
  module.exports = EventPropagators;
  return module.exports;
});

$__System.registerDynamic("82", ["2c", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var SyntheticEvent = $__require('2c');
  var ClipboardEventInterface = {clipboardData: function(event) {
      return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
    }};
  function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);
  module.exports = SyntheticClipboardEvent;
  return module.exports;
});

$__System.registerDynamic("83", ["84", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var SyntheticUIEvent = $__require('84');
  var FocusEventInterface = {relatedTarget: null};
  function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);
  module.exports = SyntheticFocusEvent;
  return module.exports;
});

$__System.registerDynamic("85", ["86", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var getEventCharCode = $__require('86');
  var normalizeKey = {
    'Esc': 'Escape',
    'Spacebar': ' ',
    'Left': 'ArrowLeft',
    'Up': 'ArrowUp',
    'Right': 'ArrowRight',
    'Down': 'ArrowDown',
    'Del': 'Delete',
    'Win': 'OS',
    'Menu': 'ContextMenu',
    'Apps': 'ContextMenu',
    'Scroll': 'ScrollLock',
    'MozPrintableKey': 'Unidentified'
  };
  var translateToKey = {
    8: 'Backspace',
    9: 'Tab',
    12: 'Clear',
    13: 'Enter',
    16: 'Shift',
    17: 'Control',
    18: 'Alt',
    19: 'Pause',
    20: 'CapsLock',
    27: 'Escape',
    32: ' ',
    33: 'PageUp',
    34: 'PageDown',
    35: 'End',
    36: 'Home',
    37: 'ArrowLeft',
    38: 'ArrowUp',
    39: 'ArrowRight',
    40: 'ArrowDown',
    45: 'Insert',
    46: 'Delete',
    112: 'F1',
    113: 'F2',
    114: 'F3',
    115: 'F4',
    116: 'F5',
    117: 'F6',
    118: 'F7',
    119: 'F8',
    120: 'F9',
    121: 'F10',
    122: 'F11',
    123: 'F12',
    144: 'NumLock',
    145: 'ScrollLock',
    224: 'Meta'
  };
  function getEventKey(nativeEvent) {
    if (nativeEvent.key) {
      var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
      if (key !== 'Unidentified') {
        return key;
      }
    }
    if (nativeEvent.type === 'keypress') {
      var charCode = getEventCharCode(nativeEvent);
      return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
    }
    if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
      return translateToKey[nativeEvent.keyCode] || 'Unidentified';
    }
    return '';
  }
  module.exports = getEventKey;
  return module.exports;
});

$__System.registerDynamic("87", ["84", "86", "85", "88", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var SyntheticUIEvent = $__require('84');
  var getEventCharCode = $__require('86');
  var getEventKey = $__require('85');
  var getEventModifierState = $__require('88');
  var KeyboardEventInterface = {
    key: getEventKey,
    location: null,
    ctrlKey: null,
    shiftKey: null,
    altKey: null,
    metaKey: null,
    repeat: null,
    locale: null,
    getModifierState: getEventModifierState,
    charCode: function(event) {
      if (event.type === 'keypress') {
        return getEventCharCode(event);
      }
      return 0;
    },
    keyCode: function(event) {
      if (event.type === 'keydown' || event.type === 'keyup') {
        return event.keyCode;
      }
      return 0;
    },
    which: function(event) {
      if (event.type === 'keypress') {
        return getEventCharCode(event);
      }
      if (event.type === 'keydown' || event.type === 'keyup') {
        return event.keyCode;
      }
      return 0;
    }
  };
  function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);
  module.exports = SyntheticKeyboardEvent;
  return module.exports;
});

$__System.registerDynamic("89", ["3b", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var SyntheticMouseEvent = $__require('3b');
  var DragEventInterface = {dataTransfer: null};
  function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);
  module.exports = SyntheticDragEvent;
  return module.exports;
});

$__System.registerDynamic("8a", ["84", "88", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var SyntheticUIEvent = $__require('84');
  var getEventModifierState = $__require('88');
  var TouchEventInterface = {
    touches: null,
    targetTouches: null,
    changedTouches: null,
    altKey: null,
    metaKey: null,
    ctrlKey: null,
    shiftKey: null,
    getModifierState: getEventModifierState
  };
  function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);
  module.exports = SyntheticTouchEvent;
  return module.exports;
});

$__System.registerDynamic("2c", ["5", "8", "9", "1e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var PooledClass = $__require('5');
  var assign = $__require('8');
  var emptyFunction = $__require('9');
  var warning = $__require('1e');
  var EventInterface = {
    type: null,
    target: null,
    currentTarget: emptyFunction.thatReturnsNull,
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function(event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };
  function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig;
    this.dispatchMarker = dispatchMarker;
    this.nativeEvent = nativeEvent;
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      if (!Interface.hasOwnProperty(propName)) {
        continue;
      }
      var normalize = Interface[propName];
      if (normalize) {
        this[propName] = normalize(nativeEvent);
      } else {
        if (propName === 'target') {
          this.target = nativeEventTarget;
        } else {
          this[propName] = nativeEvent[propName];
        }
      }
    }
    var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
    if (defaultPrevented) {
      this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
    } else {
      this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
    }
    this.isPropagationStopped = emptyFunction.thatReturnsFalse;
  }
  assign(SyntheticEvent.prototype, {
    preventDefault: function() {
      this.defaultPrevented = true;
      var event = this.nativeEvent;
      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
      }
      if (!event) {
        return;
      }
      if (event.preventDefault) {
        event.preventDefault();
      } else {
        event.returnValue = false;
      }
      this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
    },
    stopPropagation: function() {
      var event = this.nativeEvent;
      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
      }
      if (!event) {
        return;
      }
      if (event.stopPropagation) {
        event.stopPropagation();
      } else {
        event.cancelBubble = true;
      }
      this.isPropagationStopped = emptyFunction.thatReturnsTrue;
    },
    persist: function() {
      this.isPersistent = emptyFunction.thatReturnsTrue;
    },
    isPersistent: emptyFunction.thatReturnsFalse,
    destructor: function() {
      var Interface = this.constructor.Interface;
      for (var propName in Interface) {
        this[propName] = null;
      }
      this.dispatchConfig = null;
      this.dispatchMarker = null;
      this.nativeEvent = null;
    }
  });
  SyntheticEvent.Interface = EventInterface;
  SyntheticEvent.augmentClass = function(Class, Interface) {
    var Super = this;
    var prototype = Object.create(Super.prototype);
    assign(prototype, Class.prototype);
    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.Interface = assign({}, Super.Interface, Interface);
    Class.augmentClass = Super.augmentClass;
    PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
  };
  PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);
  module.exports = SyntheticEvent;
  return module.exports;
});

$__System.registerDynamic("35", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function getEventTarget(nativeEvent) {
    var target = nativeEvent.target || nativeEvent.srcElement || window;
    return target.nodeType === 3 ? target.parentNode : target;
  }
  module.exports = getEventTarget;
  return module.exports;
});

$__System.registerDynamic("84", ["2c", "35", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var SyntheticEvent = $__require('2c');
  var getEventTarget = $__require('35');
  var UIEventInterface = {
    view: function(event) {
      if (event.view) {
        return event.view;
      }
      var target = getEventTarget(event);
      if (target != null && target.window === target) {
        return target;
      }
      var doc = target.ownerDocument;
      if (doc) {
        return doc.defaultView || doc.parentWindow;
      } else {
        return window;
      }
    },
    detail: function(event) {
      return event.detail || 0;
    }
  };
  function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);
  module.exports = SyntheticUIEvent;
  return module.exports;
});

$__System.registerDynamic("88", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var modifierKeyToProp = {
    'Alt': 'altKey',
    'Control': 'ctrlKey',
    'Meta': 'metaKey',
    'Shift': 'shiftKey'
  };
  function modifierStateGetter(keyArg) {
    var syntheticEvent = this;
    var nativeEvent = syntheticEvent.nativeEvent;
    if (nativeEvent.getModifierState) {
      return nativeEvent.getModifierState(keyArg);
    }
    var keyProp = modifierKeyToProp[keyArg];
    return keyProp ? !!nativeEvent[keyProp] : false;
  }
  function getEventModifierState(nativeEvent) {
    return modifierStateGetter;
  }
  module.exports = getEventModifierState;
  return module.exports;
});

$__System.registerDynamic("3b", ["84", "8b", "88", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var SyntheticUIEvent = $__require('84');
  var ViewportMetrics = $__require('8b');
  var getEventModifierState = $__require('88');
  var MouseEventInterface = {
    screenX: null,
    screenY: null,
    clientX: null,
    clientY: null,
    ctrlKey: null,
    shiftKey: null,
    altKey: null,
    metaKey: null,
    getModifierState: getEventModifierState,
    button: function(event) {
      var button = event.button;
      if ('which' in event) {
        return button;
      }
      return button === 2 ? 2 : button === 4 ? 1 : 0;
    },
    buttons: null,
    relatedTarget: function(event) {
      return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
    },
    pageX: function(event) {
      return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
    },
    pageY: function(event) {
      return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
    }
  };
  function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);
  module.exports = SyntheticMouseEvent;
  return module.exports;
});

$__System.registerDynamic("8c", ["3b", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var SyntheticMouseEvent = $__require('3b');
  var WheelEventInterface = {
    deltaX: function(event) {
      return 'deltaX' in event ? event.deltaX : 'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
    },
    deltaY: function(event) {
      return 'deltaY' in event ? event.deltaY : 'wheelDeltaY' in event ? -event.wheelDeltaY : 'wheelDelta' in event ? -event.wheelDelta : 0;
    },
    deltaZ: null,
    deltaMode: null
  };
  function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);
  module.exports = SyntheticWheelEvent;
  return module.exports;
});

$__System.registerDynamic("86", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function getEventCharCode(nativeEvent) {
    var charCode;
    var keyCode = nativeEvent.keyCode;
    if ('charCode' in nativeEvent) {
      charCode = nativeEvent.charCode;
      if (charCode === 0 && keyCode === 13) {
        charCode = 13;
      }
    } else {
      charCode = keyCode;
    }
    if (charCode >= 32 || charCode === 13) {
      return charCode;
    }
    return 0;
  }
  module.exports = getEventCharCode;
  return module.exports;
});

$__System.registerDynamic("32", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var keyOf = function(oneKeyObj) {
    var key;
    for (key in oneKeyObj) {
      if (!oneKeyObj.hasOwnProperty(key)) {
        continue;
      }
      return key;
    }
    return null;
  };
  module.exports = keyOf;
  return module.exports;
});

$__System.registerDynamic("8d", ["2f", "71", "30", "3c", "82", "2c", "83", "87", "3b", "89", "8a", "84", "8c", "9", "86", "12", "32", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var EventConstants = $__require('2f');
  var EventListener = $__require('71');
  var EventPropagators = $__require('30');
  var ReactMount = $__require('3c');
  var SyntheticClipboardEvent = $__require('82');
  var SyntheticEvent = $__require('2c');
  var SyntheticFocusEvent = $__require('83');
  var SyntheticKeyboardEvent = $__require('87');
  var SyntheticMouseEvent = $__require('3b');
  var SyntheticDragEvent = $__require('89');
  var SyntheticTouchEvent = $__require('8a');
  var SyntheticUIEvent = $__require('84');
  var SyntheticWheelEvent = $__require('8c');
  var emptyFunction = $__require('9');
  var getEventCharCode = $__require('86');
  var invariant = $__require('12');
  var keyOf = $__require('32');
  var topLevelTypes = EventConstants.topLevelTypes;
  var eventTypes = {
    abort: {phasedRegistrationNames: {
        bubbled: keyOf({onAbort: true}),
        captured: keyOf({onAbortCapture: true})
      }},
    blur: {phasedRegistrationNames: {
        bubbled: keyOf({onBlur: true}),
        captured: keyOf({onBlurCapture: true})
      }},
    canPlay: {phasedRegistrationNames: {
        bubbled: keyOf({onCanPlay: true}),
        captured: keyOf({onCanPlayCapture: true})
      }},
    canPlayThrough: {phasedRegistrationNames: {
        bubbled: keyOf({onCanPlayThrough: true}),
        captured: keyOf({onCanPlayThroughCapture: true})
      }},
    click: {phasedRegistrationNames: {
        bubbled: keyOf({onClick: true}),
        captured: keyOf({onClickCapture: true})
      }},
    contextMenu: {phasedRegistrationNames: {
        bubbled: keyOf({onContextMenu: true}),
        captured: keyOf({onContextMenuCapture: true})
      }},
    copy: {phasedRegistrationNames: {
        bubbled: keyOf({onCopy: true}),
        captured: keyOf({onCopyCapture: true})
      }},
    cut: {phasedRegistrationNames: {
        bubbled: keyOf({onCut: true}),
        captured: keyOf({onCutCapture: true})
      }},
    doubleClick: {phasedRegistrationNames: {
        bubbled: keyOf({onDoubleClick: true}),
        captured: keyOf({onDoubleClickCapture: true})
      }},
    drag: {phasedRegistrationNames: {
        bubbled: keyOf({onDrag: true}),
        captured: keyOf({onDragCapture: true})
      }},
    dragEnd: {phasedRegistrationNames: {
        bubbled: keyOf({onDragEnd: true}),
        captured: keyOf({onDragEndCapture: true})
      }},
    dragEnter: {phasedRegistrationNames: {
        bubbled: keyOf({onDragEnter: true}),
        captured: keyOf({onDragEnterCapture: true})
      }},
    dragExit: {phasedRegistrationNames: {
        bubbled: keyOf({onDragExit: true}),
        captured: keyOf({onDragExitCapture: true})
      }},
    dragLeave: {phasedRegistrationNames: {
        bubbled: keyOf({onDragLeave: true}),
        captured: keyOf({onDragLeaveCapture: true})
      }},
    dragOver: {phasedRegistrationNames: {
        bubbled: keyOf({onDragOver: true}),
        captured: keyOf({onDragOverCapture: true})
      }},
    dragStart: {phasedRegistrationNames: {
        bubbled: keyOf({onDragStart: true}),
        captured: keyOf({onDragStartCapture: true})
      }},
    drop: {phasedRegistrationNames: {
        bubbled: keyOf({onDrop: true}),
        captured: keyOf({onDropCapture: true})
      }},
    durationChange: {phasedRegistrationNames: {
        bubbled: keyOf({onDurationChange: true}),
        captured: keyOf({onDurationChangeCapture: true})
      }},
    emptied: {phasedRegistrationNames: {
        bubbled: keyOf({onEmptied: true}),
        captured: keyOf({onEmptiedCapture: true})
      }},
    encrypted: {phasedRegistrationNames: {
        bubbled: keyOf({onEncrypted: true}),
        captured: keyOf({onEncryptedCapture: true})
      }},
    ended: {phasedRegistrationNames: {
        bubbled: keyOf({onEnded: true}),
        captured: keyOf({onEndedCapture: true})
      }},
    error: {phasedRegistrationNames: {
        bubbled: keyOf({onError: true}),
        captured: keyOf({onErrorCapture: true})
      }},
    focus: {phasedRegistrationNames: {
        bubbled: keyOf({onFocus: true}),
        captured: keyOf({onFocusCapture: true})
      }},
    input: {phasedRegistrationNames: {
        bubbled: keyOf({onInput: true}),
        captured: keyOf({onInputCapture: true})
      }},
    keyDown: {phasedRegistrationNames: {
        bubbled: keyOf({onKeyDown: true}),
        captured: keyOf({onKeyDownCapture: true})
      }},
    keyPress: {phasedRegistrationNames: {
        bubbled: keyOf({onKeyPress: true}),
        captured: keyOf({onKeyPressCapture: true})
      }},
    keyUp: {phasedRegistrationNames: {
        bubbled: keyOf({onKeyUp: true}),
        captured: keyOf({onKeyUpCapture: true})
      }},
    load: {phasedRegistrationNames: {
        bubbled: keyOf({onLoad: true}),
        captured: keyOf({onLoadCapture: true})
      }},
    loadedData: {phasedRegistrationNames: {
        bubbled: keyOf({onLoadedData: true}),
        captured: keyOf({onLoadedDataCapture: true})
      }},
    loadedMetadata: {phasedRegistrationNames: {
        bubbled: keyOf({onLoadedMetadata: true}),
        captured: keyOf({onLoadedMetadataCapture: true})
      }},
    loadStart: {phasedRegistrationNames: {
        bubbled: keyOf({onLoadStart: true}),
        captured: keyOf({onLoadStartCapture: true})
      }},
    mouseDown: {phasedRegistrationNames: {
        bubbled: keyOf({onMouseDown: true}),
        captured: keyOf({onMouseDownCapture: true})
      }},
    mouseMove: {phasedRegistrationNames: {
        bubbled: keyOf({onMouseMove: true}),
        captured: keyOf({onMouseMoveCapture: true})
      }},
    mouseOut: {phasedRegistrationNames: {
        bubbled: keyOf({onMouseOut: true}),
        captured: keyOf({onMouseOutCapture: true})
      }},
    mouseOver: {phasedRegistrationNames: {
        bubbled: keyOf({onMouseOver: true}),
        captured: keyOf({onMouseOverCapture: true})
      }},
    mouseUp: {phasedRegistrationNames: {
        bubbled: keyOf({onMouseUp: true}),
        captured: keyOf({onMouseUpCapture: true})
      }},
    paste: {phasedRegistrationNames: {
        bubbled: keyOf({onPaste: true}),
        captured: keyOf({onPasteCapture: true})
      }},
    pause: {phasedRegistrationNames: {
        bubbled: keyOf({onPause: true}),
        captured: keyOf({onPauseCapture: true})
      }},
    play: {phasedRegistrationNames: {
        bubbled: keyOf({onPlay: true}),
        captured: keyOf({onPlayCapture: true})
      }},
    playing: {phasedRegistrationNames: {
        bubbled: keyOf({onPlaying: true}),
        captured: keyOf({onPlayingCapture: true})
      }},
    progress: {phasedRegistrationNames: {
        bubbled: keyOf({onProgress: true}),
        captured: keyOf({onProgressCapture: true})
      }},
    rateChange: {phasedRegistrationNames: {
        bubbled: keyOf({onRateChange: true}),
        captured: keyOf({onRateChangeCapture: true})
      }},
    reset: {phasedRegistrationNames: {
        bubbled: keyOf({onReset: true}),
        captured: keyOf({onResetCapture: true})
      }},
    scroll: {phasedRegistrationNames: {
        bubbled: keyOf({onScroll: true}),
        captured: keyOf({onScrollCapture: true})
      }},
    seeked: {phasedRegistrationNames: {
        bubbled: keyOf({onSeeked: true}),
        captured: keyOf({onSeekedCapture: true})
      }},
    seeking: {phasedRegistrationNames: {
        bubbled: keyOf({onSeeking: true}),
        captured: keyOf({onSeekingCapture: true})
      }},
    stalled: {phasedRegistrationNames: {
        bubbled: keyOf({onStalled: true}),
        captured: keyOf({onStalledCapture: true})
      }},
    submit: {phasedRegistrationNames: {
        bubbled: keyOf({onSubmit: true}),
        captured: keyOf({onSubmitCapture: true})
      }},
    suspend: {phasedRegistrationNames: {
        bubbled: keyOf({onSuspend: true}),
        captured: keyOf({onSuspendCapture: true})
      }},
    timeUpdate: {phasedRegistrationNames: {
        bubbled: keyOf({onTimeUpdate: true}),
        captured: keyOf({onTimeUpdateCapture: true})
      }},
    touchCancel: {phasedRegistrationNames: {
        bubbled: keyOf({onTouchCancel: true}),
        captured: keyOf({onTouchCancelCapture: true})
      }},
    touchEnd: {phasedRegistrationNames: {
        bubbled: keyOf({onTouchEnd: true}),
        captured: keyOf({onTouchEndCapture: true})
      }},
    touchMove: {phasedRegistrationNames: {
        bubbled: keyOf({onTouchMove: true}),
        captured: keyOf({onTouchMoveCapture: true})
      }},
    touchStart: {phasedRegistrationNames: {
        bubbled: keyOf({onTouchStart: true}),
        captured: keyOf({onTouchStartCapture: true})
      }},
    volumeChange: {phasedRegistrationNames: {
        bubbled: keyOf({onVolumeChange: true}),
        captured: keyOf({onVolumeChangeCapture: true})
      }},
    waiting: {phasedRegistrationNames: {
        bubbled: keyOf({onWaiting: true}),
        captured: keyOf({onWaitingCapture: true})
      }},
    wheel: {phasedRegistrationNames: {
        bubbled: keyOf({onWheel: true}),
        captured: keyOf({onWheelCapture: true})
      }}
  };
  var topLevelEventsToDispatchConfig = {
    topAbort: eventTypes.abort,
    topBlur: eventTypes.blur,
    topCanPlay: eventTypes.canPlay,
    topCanPlayThrough: eventTypes.canPlayThrough,
    topClick: eventTypes.click,
    topContextMenu: eventTypes.contextMenu,
    topCopy: eventTypes.copy,
    topCut: eventTypes.cut,
    topDoubleClick: eventTypes.doubleClick,
    topDrag: eventTypes.drag,
    topDragEnd: eventTypes.dragEnd,
    topDragEnter: eventTypes.dragEnter,
    topDragExit: eventTypes.dragExit,
    topDragLeave: eventTypes.dragLeave,
    topDragOver: eventTypes.dragOver,
    topDragStart: eventTypes.dragStart,
    topDrop: eventTypes.drop,
    topDurationChange: eventTypes.durationChange,
    topEmptied: eventTypes.emptied,
    topEncrypted: eventTypes.encrypted,
    topEnded: eventTypes.ended,
    topError: eventTypes.error,
    topFocus: eventTypes.focus,
    topInput: eventTypes.input,
    topKeyDown: eventTypes.keyDown,
    topKeyPress: eventTypes.keyPress,
    topKeyUp: eventTypes.keyUp,
    topLoad: eventTypes.load,
    topLoadedData: eventTypes.loadedData,
    topLoadedMetadata: eventTypes.loadedMetadata,
    topLoadStart: eventTypes.loadStart,
    topMouseDown: eventTypes.mouseDown,
    topMouseMove: eventTypes.mouseMove,
    topMouseOut: eventTypes.mouseOut,
    topMouseOver: eventTypes.mouseOver,
    topMouseUp: eventTypes.mouseUp,
    topPaste: eventTypes.paste,
    topPause: eventTypes.pause,
    topPlay: eventTypes.play,
    topPlaying: eventTypes.playing,
    topProgress: eventTypes.progress,
    topRateChange: eventTypes.rateChange,
    topReset: eventTypes.reset,
    topScroll: eventTypes.scroll,
    topSeeked: eventTypes.seeked,
    topSeeking: eventTypes.seeking,
    topStalled: eventTypes.stalled,
    topSubmit: eventTypes.submit,
    topSuspend: eventTypes.suspend,
    topTimeUpdate: eventTypes.timeUpdate,
    topTouchCancel: eventTypes.touchCancel,
    topTouchEnd: eventTypes.touchEnd,
    topTouchMove: eventTypes.touchMove,
    topTouchStart: eventTypes.touchStart,
    topVolumeChange: eventTypes.volumeChange,
    topWaiting: eventTypes.waiting,
    topWheel: eventTypes.wheel
  };
  for (var type in topLevelEventsToDispatchConfig) {
    topLevelEventsToDispatchConfig[type].dependencies = [type];
  }
  var ON_CLICK_KEY = keyOf({onClick: null});
  var onClickListeners = {};
  var SimpleEventPlugin = {
    eventTypes: eventTypes,
    extractEvents: function(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
      var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
      if (!dispatchConfig) {
        return null;
      }
      var EventConstructor;
      switch (topLevelType) {
        case topLevelTypes.topAbort:
        case topLevelTypes.topCanPlay:
        case topLevelTypes.topCanPlayThrough:
        case topLevelTypes.topDurationChange:
        case topLevelTypes.topEmptied:
        case topLevelTypes.topEncrypted:
        case topLevelTypes.topEnded:
        case topLevelTypes.topError:
        case topLevelTypes.topInput:
        case topLevelTypes.topLoad:
        case topLevelTypes.topLoadedData:
        case topLevelTypes.topLoadedMetadata:
        case topLevelTypes.topLoadStart:
        case topLevelTypes.topPause:
        case topLevelTypes.topPlay:
        case topLevelTypes.topPlaying:
        case topLevelTypes.topProgress:
        case topLevelTypes.topRateChange:
        case topLevelTypes.topReset:
        case topLevelTypes.topSeeked:
        case topLevelTypes.topSeeking:
        case topLevelTypes.topStalled:
        case topLevelTypes.topSubmit:
        case topLevelTypes.topSuspend:
        case topLevelTypes.topTimeUpdate:
        case topLevelTypes.topVolumeChange:
        case topLevelTypes.topWaiting:
          EventConstructor = SyntheticEvent;
          break;
        case topLevelTypes.topKeyPress:
          if (getEventCharCode(nativeEvent) === 0) {
            return null;
          }
        case topLevelTypes.topKeyDown:
        case topLevelTypes.topKeyUp:
          EventConstructor = SyntheticKeyboardEvent;
          break;
        case topLevelTypes.topBlur:
        case topLevelTypes.topFocus:
          EventConstructor = SyntheticFocusEvent;
          break;
        case topLevelTypes.topClick:
          if (nativeEvent.button === 2) {
            return null;
          }
        case topLevelTypes.topContextMenu:
        case topLevelTypes.topDoubleClick:
        case topLevelTypes.topMouseDown:
        case topLevelTypes.topMouseMove:
        case topLevelTypes.topMouseOut:
        case topLevelTypes.topMouseOver:
        case topLevelTypes.topMouseUp:
          EventConstructor = SyntheticMouseEvent;
          break;
        case topLevelTypes.topDrag:
        case topLevelTypes.topDragEnd:
        case topLevelTypes.topDragEnter:
        case topLevelTypes.topDragExit:
        case topLevelTypes.topDragLeave:
        case topLevelTypes.topDragOver:
        case topLevelTypes.topDragStart:
        case topLevelTypes.topDrop:
          EventConstructor = SyntheticDragEvent;
          break;
        case topLevelTypes.topTouchCancel:
        case topLevelTypes.topTouchEnd:
        case topLevelTypes.topTouchMove:
        case topLevelTypes.topTouchStart:
          EventConstructor = SyntheticTouchEvent;
          break;
        case topLevelTypes.topScroll:
          EventConstructor = SyntheticUIEvent;
          break;
        case topLevelTypes.topWheel:
          EventConstructor = SyntheticWheelEvent;
          break;
        case topLevelTypes.topCopy:
        case topLevelTypes.topCut:
        case topLevelTypes.topPaste:
          EventConstructor = SyntheticClipboardEvent;
          break;
      }
      !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
      var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
      EventPropagators.accumulateTwoPhaseDispatches(event);
      return event;
    },
    didPutListener: function(id, registrationName, listener) {
      if (registrationName === ON_CLICK_KEY) {
        var node = ReactMount.getNode(id);
        if (!onClickListeners[id]) {
          onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
        }
      }
    },
    willDeleteListener: function(id, registrationName) {
      if (registrationName === ON_CLICK_KEY) {
        onClickListeners[id].remove();
        delete onClickListeners[id];
      }
    }
  };
  module.exports = SimpleEventPlugin;
  return module.exports;
});

$__System.registerDynamic("8e", ["3e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var DOMProperty = $__require('3e');
  var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
  var NS = {
    xlink: 'http://www.w3.org/1999/xlink',
    xml: 'http://www.w3.org/XML/1998/namespace'
  };
  var SVGDOMPropertyConfig = {
    Properties: {
      clipPath: MUST_USE_ATTRIBUTE,
      cx: MUST_USE_ATTRIBUTE,
      cy: MUST_USE_ATTRIBUTE,
      d: MUST_USE_ATTRIBUTE,
      dx: MUST_USE_ATTRIBUTE,
      dy: MUST_USE_ATTRIBUTE,
      fill: MUST_USE_ATTRIBUTE,
      fillOpacity: MUST_USE_ATTRIBUTE,
      fontFamily: MUST_USE_ATTRIBUTE,
      fontSize: MUST_USE_ATTRIBUTE,
      fx: MUST_USE_ATTRIBUTE,
      fy: MUST_USE_ATTRIBUTE,
      gradientTransform: MUST_USE_ATTRIBUTE,
      gradientUnits: MUST_USE_ATTRIBUTE,
      markerEnd: MUST_USE_ATTRIBUTE,
      markerMid: MUST_USE_ATTRIBUTE,
      markerStart: MUST_USE_ATTRIBUTE,
      offset: MUST_USE_ATTRIBUTE,
      opacity: MUST_USE_ATTRIBUTE,
      patternContentUnits: MUST_USE_ATTRIBUTE,
      patternUnits: MUST_USE_ATTRIBUTE,
      points: MUST_USE_ATTRIBUTE,
      preserveAspectRatio: MUST_USE_ATTRIBUTE,
      r: MUST_USE_ATTRIBUTE,
      rx: MUST_USE_ATTRIBUTE,
      ry: MUST_USE_ATTRIBUTE,
      spreadMethod: MUST_USE_ATTRIBUTE,
      stopColor: MUST_USE_ATTRIBUTE,
      stopOpacity: MUST_USE_ATTRIBUTE,
      stroke: MUST_USE_ATTRIBUTE,
      strokeDasharray: MUST_USE_ATTRIBUTE,
      strokeLinecap: MUST_USE_ATTRIBUTE,
      strokeOpacity: MUST_USE_ATTRIBUTE,
      strokeWidth: MUST_USE_ATTRIBUTE,
      textAnchor: MUST_USE_ATTRIBUTE,
      transform: MUST_USE_ATTRIBUTE,
      version: MUST_USE_ATTRIBUTE,
      viewBox: MUST_USE_ATTRIBUTE,
      x1: MUST_USE_ATTRIBUTE,
      x2: MUST_USE_ATTRIBUTE,
      x: MUST_USE_ATTRIBUTE,
      xlinkActuate: MUST_USE_ATTRIBUTE,
      xlinkArcrole: MUST_USE_ATTRIBUTE,
      xlinkHref: MUST_USE_ATTRIBUTE,
      xlinkRole: MUST_USE_ATTRIBUTE,
      xlinkShow: MUST_USE_ATTRIBUTE,
      xlinkTitle: MUST_USE_ATTRIBUTE,
      xlinkType: MUST_USE_ATTRIBUTE,
      xmlBase: MUST_USE_ATTRIBUTE,
      xmlLang: MUST_USE_ATTRIBUTE,
      xmlSpace: MUST_USE_ATTRIBUTE,
      y1: MUST_USE_ATTRIBUTE,
      y2: MUST_USE_ATTRIBUTE,
      y: MUST_USE_ATTRIBUTE
    },
    DOMAttributeNamespaces: {
      xlinkActuate: NS.xlink,
      xlinkArcrole: NS.xlink,
      xlinkHref: NS.xlink,
      xlinkRole: NS.xlink,
      xlinkShow: NS.xlink,
      xlinkTitle: NS.xlink,
      xlinkType: NS.xlink,
      xmlBase: NS.xml,
      xmlLang: NS.xml,
      xmlSpace: NS.xml
    },
    DOMAttributeNames: {
      clipPath: 'clip-path',
      fillOpacity: 'fill-opacity',
      fontFamily: 'font-family',
      fontSize: 'font-size',
      gradientTransform: 'gradientTransform',
      gradientUnits: 'gradientUnits',
      markerEnd: 'marker-end',
      markerMid: 'marker-mid',
      markerStart: 'marker-start',
      patternContentUnits: 'patternContentUnits',
      patternUnits: 'patternUnits',
      preserveAspectRatio: 'preserveAspectRatio',
      spreadMethod: 'spreadMethod',
      stopColor: 'stop-color',
      stopOpacity: 'stop-opacity',
      strokeDasharray: 'stroke-dasharray',
      strokeLinecap: 'stroke-linecap',
      strokeOpacity: 'stroke-opacity',
      strokeWidth: 'stroke-width',
      textAnchor: 'text-anchor',
      viewBox: 'viewBox',
      xlinkActuate: 'xlink:actuate',
      xlinkArcrole: 'xlink:arcrole',
      xlinkHref: 'xlink:href',
      xlinkRole: 'xlink:role',
      xlinkShow: 'xlink:show',
      xlinkTitle: 'xlink:title',
      xlinkType: 'xlink:type',
      xmlBase: 'xml:base',
      xmlLang: 'xml:lang',
      xmlSpace: 'xml:space'
    }
  };
  module.exports = SVGDOMPropertyConfig;
  return module.exports;
});

$__System.registerDynamic("8f", ["8", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var assign = $__require('8');
  var DONT_CARE_THRESHOLD = 1.2;
  var DOM_OPERATION_TYPES = {
    '_mountImageIntoNode': 'set innerHTML',
    INSERT_MARKUP: 'set innerHTML',
    MOVE_EXISTING: 'move',
    REMOVE_NODE: 'remove',
    SET_MARKUP: 'set innerHTML',
    TEXT_CONTENT: 'set textContent',
    'setValueForProperty': 'update attribute',
    'setValueForAttribute': 'update attribute',
    'deleteValueForProperty': 'remove attribute',
    'setValueForStyles': 'update styles',
    'replaceNodeWithMarkup': 'replace',
    'updateTextContent': 'set textContent'
  };
  function getTotalTime(measurements) {
    var totalTime = 0;
    for (var i = 0; i < measurements.length; i++) {
      var measurement = measurements[i];
      totalTime += measurement.totalTime;
    }
    return totalTime;
  }
  function getDOMSummary(measurements) {
    var items = [];
    measurements.forEach(function(measurement) {
      Object.keys(measurement.writes).forEach(function(id) {
        measurement.writes[id].forEach(function(write) {
          items.push({
            id: id,
            type: DOM_OPERATION_TYPES[write.type] || write.type,
            args: write.args
          });
        });
      });
    });
    return items;
  }
  function getExclusiveSummary(measurements) {
    var candidates = {};
    var displayName;
    for (var i = 0; i < measurements.length; i++) {
      var measurement = measurements[i];
      var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
      for (var id in allIDs) {
        displayName = measurement.displayNames[id].current;
        candidates[displayName] = candidates[displayName] || {
          componentName: displayName,
          inclusive: 0,
          exclusive: 0,
          render: 0,
          count: 0
        };
        if (measurement.render[id]) {
          candidates[displayName].render += measurement.render[id];
        }
        if (measurement.exclusive[id]) {
          candidates[displayName].exclusive += measurement.exclusive[id];
        }
        if (measurement.inclusive[id]) {
          candidates[displayName].inclusive += measurement.inclusive[id];
        }
        if (measurement.counts[id]) {
          candidates[displayName].count += measurement.counts[id];
        }
      }
    }
    var arr = [];
    for (displayName in candidates) {
      if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
        arr.push(candidates[displayName]);
      }
    }
    arr.sort(function(a, b) {
      return b.exclusive - a.exclusive;
    });
    return arr;
  }
  function getInclusiveSummary(measurements, onlyClean) {
    var candidates = {};
    var inclusiveKey;
    for (var i = 0; i < measurements.length; i++) {
      var measurement = measurements[i];
      var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
      var cleanComponents;
      if (onlyClean) {
        cleanComponents = getUnchangedComponents(measurement);
      }
      for (var id in allIDs) {
        if (onlyClean && !cleanComponents[id]) {
          continue;
        }
        var displayName = measurement.displayNames[id];
        inclusiveKey = displayName.owner + ' > ' + displayName.current;
        candidates[inclusiveKey] = candidates[inclusiveKey] || {
          componentName: inclusiveKey,
          time: 0,
          count: 0
        };
        if (measurement.inclusive[id]) {
          candidates[inclusiveKey].time += measurement.inclusive[id];
        }
        if (measurement.counts[id]) {
          candidates[inclusiveKey].count += measurement.counts[id];
        }
      }
    }
    var arr = [];
    for (inclusiveKey in candidates) {
      if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
        arr.push(candidates[inclusiveKey]);
      }
    }
    arr.sort(function(a, b) {
      return b.time - a.time;
    });
    return arr;
  }
  function getUnchangedComponents(measurement) {
    var cleanComponents = {};
    var dirtyLeafIDs = Object.keys(measurement.writes);
    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
    for (var id in allIDs) {
      var isDirty = false;
      for (var i = 0; i < dirtyLeafIDs.length; i++) {
        if (dirtyLeafIDs[i].indexOf(id) === 0) {
          isDirty = true;
          break;
        }
      }
      if (measurement.created[id]) {
        isDirty = true;
      }
      if (!isDirty && measurement.counts[id] > 0) {
        cleanComponents[id] = true;
      }
    }
    return cleanComponents;
  }
  var ReactDefaultPerfAnalysis = {
    getExclusiveSummary: getExclusiveSummary,
    getInclusiveSummary: getInclusiveSummary,
    getDOMSummary: getDOMSummary,
    getTotalTime: getTotalTime
  };
  module.exports = ReactDefaultPerfAnalysis;
  return module.exports;
});

$__System.registerDynamic("90", ["31", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ExecutionEnvironment = $__require('31');
  var performance;
  if (ExecutionEnvironment.canUseDOM) {
    performance = window.performance || window.msPerformance || window.webkitPerformance;
  }
  module.exports = performance || {};
  return module.exports;
});

$__System.registerDynamic("91", ["90", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var performance = $__require('90');
  var performanceNow;
  if (performance.now) {
    performanceNow = function() {
      return performance.now();
    };
  } else {
    performanceNow = function() {
      return Date.now();
    };
  }
  module.exports = performanceNow;
  return module.exports;
});

$__System.registerDynamic("92", ["3e", "8f", "3c", "4c", "91", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var DOMProperty = $__require('3e');
  var ReactDefaultPerfAnalysis = $__require('8f');
  var ReactMount = $__require('3c');
  var ReactPerf = $__require('4c');
  var performanceNow = $__require('91');
  function roundFloat(val) {
    return Math.floor(val * 100) / 100;
  }
  function addValue(obj, key, val) {
    obj[key] = (obj[key] || 0) + val;
  }
  var ReactDefaultPerf = {
    _allMeasurements: [],
    _mountStack: [0],
    _injected: false,
    start: function() {
      if (!ReactDefaultPerf._injected) {
        ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
      }
      ReactDefaultPerf._allMeasurements.length = 0;
      ReactPerf.enableMeasure = true;
    },
    stop: function() {
      ReactPerf.enableMeasure = false;
    },
    getLastMeasurements: function() {
      return ReactDefaultPerf._allMeasurements;
    },
    printExclusive: function(measurements) {
      measurements = measurements || ReactDefaultPerf._allMeasurements;
      var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
      console.table(summary.map(function(item) {
        return {
          'Component class name': item.componentName,
          'Total inclusive time (ms)': roundFloat(item.inclusive),
          'Exclusive mount time (ms)': roundFloat(item.exclusive),
          'Exclusive render time (ms)': roundFloat(item.render),
          'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
          'Render time per instance (ms)': roundFloat(item.render / item.count),
          'Instances': item.count
        };
      }));
    },
    printInclusive: function(measurements) {
      measurements = measurements || ReactDefaultPerf._allMeasurements;
      var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
      console.table(summary.map(function(item) {
        return {
          'Owner > component': item.componentName,
          'Inclusive time (ms)': roundFloat(item.time),
          'Instances': item.count
        };
      }));
      console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
    },
    getMeasurementsSummaryMap: function(measurements) {
      var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
      return summary.map(function(item) {
        return {
          'Owner > component': item.componentName,
          'Wasted time (ms)': item.time,
          'Instances': item.count
        };
      });
    },
    printWasted: function(measurements) {
      measurements = measurements || ReactDefaultPerf._allMeasurements;
      console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
      console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
    },
    printDOM: function(measurements) {
      measurements = measurements || ReactDefaultPerf._allMeasurements;
      var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
      console.table(summary.map(function(item) {
        var result = {};
        result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
        result.type = item.type;
        result.args = JSON.stringify(item.args);
        return result;
      }));
      console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
    },
    _recordWrite: function(id, fnName, totalTime, args) {
      var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
      writes[id] = writes[id] || [];
      writes[id].push({
        type: fnName,
        time: totalTime,
        args: args
      });
    },
    measure: function(moduleName, fnName, func) {
      return function() {
        for (var _len = arguments.length,
            args = Array(_len),
            _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        var totalTime;
        var rv;
        var start;
        if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
          ReactDefaultPerf._allMeasurements.push({
            exclusive: {},
            inclusive: {},
            render: {},
            counts: {},
            writes: {},
            displayNames: {},
            totalTime: 0,
            created: {}
          });
          start = performanceNow();
          rv = func.apply(this, args);
          ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
          return rv;
        } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {
          start = performanceNow();
          rv = func.apply(this, args);
          totalTime = performanceNow() - start;
          if (fnName === '_mountImageIntoNode') {
            var mountID = ReactMount.getID(args[1]);
            ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
          } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
            args[0].forEach(function(update) {
              var writeArgs = {};
              if (update.fromIndex !== null) {
                writeArgs.fromIndex = update.fromIndex;
              }
              if (update.toIndex !== null) {
                writeArgs.toIndex = update.toIndex;
              }
              if (update.textContent !== null) {
                writeArgs.textContent = update.textContent;
              }
              if (update.markupIndex !== null) {
                writeArgs.markup = args[1][update.markupIndex];
              }
              ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
            });
          } else {
            var id = args[0];
            if (typeof id === 'object') {
              id = ReactMount.getID(args[0]);
            }
            ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
          }
          return rv;
        } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || fnName === '_renderValidatedComponent')) {
          if (this._currentElement.type === ReactMount.TopLevelWrapper) {
            return func.apply(this, args);
          }
          var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;
          var isRender = fnName === '_renderValidatedComponent';
          var isMount = fnName === 'mountComponent';
          var mountStack = ReactDefaultPerf._mountStack;
          var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];
          if (isRender) {
            addValue(entry.counts, rootNodeID, 1);
          } else if (isMount) {
            entry.created[rootNodeID] = true;
            mountStack.push(0);
          }
          start = performanceNow();
          rv = func.apply(this, args);
          totalTime = performanceNow() - start;
          if (isRender) {
            addValue(entry.render, rootNodeID, totalTime);
          } else if (isMount) {
            var subMountTime = mountStack.pop();
            mountStack[mountStack.length - 1] += totalTime;
            addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
            addValue(entry.inclusive, rootNodeID, totalTime);
          } else {
            addValue(entry.inclusive, rootNodeID, totalTime);
          }
          entry.displayNames[rootNodeID] = {
            current: this.getName(),
            owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
          };
          return rv;
        } else {
          return func.apply(this, args);
        }
      };
    }
  };
  module.exports = ReactDefaultPerf;
  return module.exports;
});

$__System.registerDynamic("14", ["2e", "33", "38", "39", "3a", "31", "3d", "3f", "5f", "b", "5c", "6e", "70", "73", "d", "3c", "77", "7e", "7f", "8d", "8e", "92", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var BeforeInputEventPlugin = $__require('2e');
  var ChangeEventPlugin = $__require('33');
  var ClientReactRootIndex = $__require('38');
  var DefaultEventPluginOrder = $__require('39');
  var EnterLeaveEventPlugin = $__require('3a');
  var ExecutionEnvironment = $__require('31');
  var HTMLDOMPropertyConfig = $__require('3d');
  var ReactBrowserComponentMixin = $__require('3f');
  var ReactComponentBrowserEnvironment = $__require('5f');
  var ReactDefaultBatchingStrategy = $__require('b');
  var ReactDOMComponent = $__require('5c');
  var ReactDOMTextComponent = $__require('6e');
  var ReactEventListener = $__require('70');
  var ReactInjection = $__require('73');
  var ReactInstanceHandles = $__require('d');
  var ReactMount = $__require('3c');
  var ReactReconcileTransaction = $__require('77');
  var SelectEventPlugin = $__require('7e');
  var ServerReactRootIndex = $__require('7f');
  var SimpleEventPlugin = $__require('8d');
  var SVGDOMPropertyConfig = $__require('8e');
  var alreadyInjected = false;
  function inject() {
    if (alreadyInjected) {
      return;
    }
    alreadyInjected = true;
    ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);
    ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
    ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
    ReactInjection.EventPluginHub.injectMount(ReactMount);
    ReactInjection.EventPluginHub.injectEventPluginsByName({
      SimpleEventPlugin: SimpleEventPlugin,
      EnterLeaveEventPlugin: EnterLeaveEventPlugin,
      ChangeEventPlugin: ChangeEventPlugin,
      SelectEventPlugin: SelectEventPlugin,
      BeforeInputEventPlugin: BeforeInputEventPlugin
    });
    ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);
    ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);
    ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);
    ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
    ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);
    ReactInjection.EmptyComponent.injectEmptyComponent('noscript');
    ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
    ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);
    ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);
    ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
    if (process.env.NODE_ENV !== 'production') {
      var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
      if (/[?&]react_perf\b/.test(url)) {
        var ReactDefaultPerf = $__require('92');
        ReactDefaultPerf.start();
      }
    }
  }
  module.exports = {inject: inject};
  return module.exports;
});

$__System.registerDynamic("15", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = '0.14.7';
  return module.exports;
});

$__System.registerDynamic("41", ["1b", "40", "3c", "12", "1e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactCurrentOwner = $__require('1b');
  var ReactInstanceMap = $__require('40');
  var ReactMount = $__require('3c');
  var invariant = $__require('12');
  var warning = $__require('1e');
  function findDOMNode(componentOrElement) {
    if (process.env.NODE_ENV !== 'production') {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
        owner._warnedAboutRefsInRender = true;
      }
    }
    if (componentOrElement == null) {
      return null;
    }
    if (componentOrElement.nodeType === 1) {
      return componentOrElement;
    }
    if (ReactInstanceMap.has(componentOrElement)) {
      return ReactMount.getNodeFromInstance(componentOrElement);
    }
    !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
  }
  module.exports = findDOMNode;
  return module.exports;
});

$__System.registerDynamic("3e", ["12", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var invariant = $__require('12');
  function checkMask(value, bitmask) {
    return (value & bitmask) === bitmask;
  }
  var DOMPropertyInjection = {
    MUST_USE_ATTRIBUTE: 0x1,
    MUST_USE_PROPERTY: 0x2,
    HAS_SIDE_EFFECTS: 0x4,
    HAS_BOOLEAN_VALUE: 0x8,
    HAS_NUMERIC_VALUE: 0x10,
    HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
    HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,
    injectDOMPropertyConfig: function(domPropertyConfig) {
      var Injection = DOMPropertyInjection;
      var Properties = domPropertyConfig.Properties || {};
      var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
      var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
      var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
      var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};
      if (domPropertyConfig.isCustomAttribute) {
        DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
      }
      for (var propName in Properties) {
        !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;
        var lowerCased = propName.toLowerCase();
        var propConfig = Properties[propName];
        var propertyInfo = {
          attributeName: lowerCased,
          attributeNamespace: null,
          propertyName: propName,
          mutationMethod: null,
          mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
          mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
          hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
          hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
          hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
          hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
          hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
        };
        !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
        !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
        !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;
        if (process.env.NODE_ENV !== 'production') {
          DOMProperty.getPossibleStandardName[lowerCased] = propName;
        }
        if (DOMAttributeNames.hasOwnProperty(propName)) {
          var attributeName = DOMAttributeNames[propName];
          propertyInfo.attributeName = attributeName;
          if (process.env.NODE_ENV !== 'production') {
            DOMProperty.getPossibleStandardName[attributeName] = propName;
          }
        }
        if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
          propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
        }
        if (DOMPropertyNames.hasOwnProperty(propName)) {
          propertyInfo.propertyName = DOMPropertyNames[propName];
        }
        if (DOMMutationMethods.hasOwnProperty(propName)) {
          propertyInfo.mutationMethod = DOMMutationMethods[propName];
        }
        DOMProperty.properties[propName] = propertyInfo;
      }
    }
  };
  var defaultValueCache = {};
  var DOMProperty = {
    ID_ATTRIBUTE_NAME: 'data-reactid',
    properties: {},
    getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,
    _isCustomAttributeFunctions: [],
    isCustomAttribute: function(attributeName) {
      for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
        var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
        if (isCustomAttributeFn(attributeName)) {
          return true;
        }
      }
      return false;
    },
    getDefaultValueForProperty: function(nodeName, prop) {
      var nodeDefaults = defaultValueCache[nodeName];
      var testElement;
      if (!nodeDefaults) {
        defaultValueCache[nodeName] = nodeDefaults = {};
      }
      if (!(prop in nodeDefaults)) {
        testElement = document.createElement(nodeName);
        nodeDefaults[prop] = testElement[prop];
      }
      return nodeDefaults[prop];
    },
    injection: DOMPropertyInjection
  };
  module.exports = DOMProperty;
  return module.exports;
});

$__System.registerDynamic("93", ["12", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var invariant = $__require('12');
  var EventPluginOrder = null;
  var namesToPlugins = {};
  function recomputePluginOrdering() {
    if (!EventPluginOrder) {
      return;
    }
    for (var pluginName in namesToPlugins) {
      var PluginModule = namesToPlugins[pluginName];
      var pluginIndex = EventPluginOrder.indexOf(pluginName);
      !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
      if (EventPluginRegistry.plugins[pluginIndex]) {
        continue;
      }
      !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
      EventPluginRegistry.plugins[pluginIndex] = PluginModule;
      var publishedEvents = PluginModule.eventTypes;
      for (var eventName in publishedEvents) {
        !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
      }
    }
  }
  function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
    !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
    EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
    var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
    if (phasedRegistrationNames) {
      for (var phaseName in phasedRegistrationNames) {
        if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
          var phasedRegistrationName = phasedRegistrationNames[phaseName];
          publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
        }
      }
      return true;
    } else if (dispatchConfig.registrationName) {
      publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
      return true;
    }
    return false;
  }
  function publishRegistrationName(registrationName, PluginModule, eventName) {
    !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
    EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
    EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
  }
  var EventPluginRegistry = {
    plugins: [],
    eventNameDispatchConfigs: {},
    registrationNameModules: {},
    registrationNameDependencies: {},
    injectEventPluginOrder: function(InjectedEventPluginOrder) {
      !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
      EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
      recomputePluginOrdering();
    },
    injectEventPluginsByName: function(injectedNamesToPlugins) {
      var isOrderingDirty = false;
      for (var pluginName in injectedNamesToPlugins) {
        if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
          continue;
        }
        var PluginModule = injectedNamesToPlugins[pluginName];
        if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
          !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
          namesToPlugins[pluginName] = PluginModule;
          isOrderingDirty = true;
        }
      }
      if (isOrderingDirty) {
        recomputePluginOrdering();
      }
    },
    getPluginModuleForEvent: function(event) {
      var dispatchConfig = event.dispatchConfig;
      if (dispatchConfig.registrationName) {
        return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
      }
      for (var phase in dispatchConfig.phasedRegistrationNames) {
        if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
          continue;
        }
        var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
        if (PluginModule) {
          return PluginModule;
        }
      }
      return null;
    },
    _resetEventPlugins: function() {
      EventPluginOrder = null;
      for (var pluginName in namesToPlugins) {
        if (namesToPlugins.hasOwnProperty(pluginName)) {
          delete namesToPlugins[pluginName];
        }
      }
      EventPluginRegistry.plugins.length = 0;
      var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
      for (var eventName in eventNameDispatchConfigs) {
        if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
          delete eventNameDispatchConfigs[eventName];
        }
      }
      var registrationNameModules = EventPluginRegistry.registrationNameModules;
      for (var registrationName in registrationNameModules) {
        if (registrationNameModules.hasOwnProperty(registrationName)) {
          delete registrationNameModules[registrationName];
        }
      }
    }
  };
  module.exports = EventPluginRegistry;
  return module.exports;
});

$__System.registerDynamic("2f", ["6b", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var keyMirror = $__require('6b');
  var PropagationPhases = keyMirror({
    bubbled: null,
    captured: null
  });
  var topLevelTypes = keyMirror({
    topAbort: null,
    topBlur: null,
    topCanPlay: null,
    topCanPlayThrough: null,
    topChange: null,
    topClick: null,
    topCompositionEnd: null,
    topCompositionStart: null,
    topCompositionUpdate: null,
    topContextMenu: null,
    topCopy: null,
    topCut: null,
    topDoubleClick: null,
    topDrag: null,
    topDragEnd: null,
    topDragEnter: null,
    topDragExit: null,
    topDragLeave: null,
    topDragOver: null,
    topDragStart: null,
    topDrop: null,
    topDurationChange: null,
    topEmptied: null,
    topEncrypted: null,
    topEnded: null,
    topError: null,
    topFocus: null,
    topInput: null,
    topKeyDown: null,
    topKeyPress: null,
    topKeyUp: null,
    topLoad: null,
    topLoadedData: null,
    topLoadedMetadata: null,
    topLoadStart: null,
    topMouseDown: null,
    topMouseMove: null,
    topMouseOut: null,
    topMouseOver: null,
    topMouseUp: null,
    topPaste: null,
    topPause: null,
    topPlay: null,
    topPlaying: null,
    topProgress: null,
    topRateChange: null,
    topReset: null,
    topScroll: null,
    topSeeked: null,
    topSeeking: null,
    topSelectionChange: null,
    topStalled: null,
    topSubmit: null,
    topSuspend: null,
    topTextInput: null,
    topTimeUpdate: null,
    topTouchCancel: null,
    topTouchEnd: null,
    topTouchMove: null,
    topTouchStart: null,
    topVolumeChange: null,
    topWaiting: null,
    topWheel: null
  });
  var EventConstants = {
    topLevelTypes: topLevelTypes,
    PropagationPhases: PropagationPhases
  };
  module.exports = EventConstants;
  return module.exports;
});

$__System.registerDynamic("94", ["2f", "95", "12", "1e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var EventConstants = $__require('2f');
  var ReactErrorUtils = $__require('95');
  var invariant = $__require('12');
  var warning = $__require('1e');
  var injection = {
    Mount: null,
    injectMount: function(InjectedMount) {
      injection.Mount = InjectedMount;
      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
      }
    }
  };
  var topLevelTypes = EventConstants.topLevelTypes;
  function isEndish(topLevelType) {
    return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
  }
  function isMoveish(topLevelType) {
    return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
  }
  function isStartish(topLevelType) {
    return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
  }
  var validateEventDispatches;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches = function(event) {
      var dispatchListeners = event._dispatchListeners;
      var dispatchIDs = event._dispatchIDs;
      var listenersIsArr = Array.isArray(dispatchListeners);
      var idsIsArr = Array.isArray(dispatchIDs);
      var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
      var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
      process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
    };
  }
  function executeDispatch(event, simulated, listener, domID) {
    var type = event.type || 'unknown-event';
    event.currentTarget = injection.Mount.getNode(domID);
    if (simulated) {
      ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
    } else {
      ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
    }
    event.currentTarget = null;
  }
  function executeDispatchesInOrder(event, simulated) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;
    if (process.env.NODE_ENV !== 'production') {
      validateEventDispatches(event);
    }
    if (Array.isArray(dispatchListeners)) {
      for (var i = 0; i < dispatchListeners.length; i++) {
        if (event.isPropagationStopped()) {
          break;
        }
        executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
      }
    } else if (dispatchListeners) {
      executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
    }
    event._dispatchListeners = null;
    event._dispatchIDs = null;
  }
  function executeDispatchesInOrderStopAtTrueImpl(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;
    if (process.env.NODE_ENV !== 'production') {
      validateEventDispatches(event);
    }
    if (Array.isArray(dispatchListeners)) {
      for (var i = 0; i < dispatchListeners.length; i++) {
        if (event.isPropagationStopped()) {
          break;
        }
        if (dispatchListeners[i](event, dispatchIDs[i])) {
          return dispatchIDs[i];
        }
      }
    } else if (dispatchListeners) {
      if (dispatchListeners(event, dispatchIDs)) {
        return dispatchIDs;
      }
    }
    return null;
  }
  function executeDispatchesInOrderStopAtTrue(event) {
    var ret = executeDispatchesInOrderStopAtTrueImpl(event);
    event._dispatchIDs = null;
    event._dispatchListeners = null;
    return ret;
  }
  function executeDirectDispatch(event) {
    if (process.env.NODE_ENV !== 'production') {
      validateEventDispatches(event);
    }
    var dispatchListener = event._dispatchListeners;
    var dispatchID = event._dispatchIDs;
    !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
    var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
    event._dispatchListeners = null;
    event._dispatchIDs = null;
    return res;
  }
  function hasDispatches(event) {
    return !!event._dispatchListeners;
  }
  var EventPluginUtils = {
    isEndish: isEndish,
    isMoveish: isMoveish,
    isStartish: isStartish,
    executeDirectDispatch: executeDirectDispatch,
    executeDispatchesInOrder: executeDispatchesInOrder,
    executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
    hasDispatches: hasDispatches,
    getNode: function(id) {
      return injection.Mount.getNode(id);
    },
    getID: function(node) {
      return injection.Mount.getID(node);
    },
    injection: injection
  };
  module.exports = EventPluginUtils;
  return module.exports;
});

$__System.registerDynamic("95", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var caughtError = null;
  function invokeGuardedCallback(name, func, a, b) {
    try {
      return func(a, b);
    } catch (x) {
      if (caughtError === null) {
        caughtError = x;
      }
      return undefined;
    }
  }
  var ReactErrorUtils = {
    invokeGuardedCallback: invokeGuardedCallback,
    invokeGuardedCallbackWithCatch: invokeGuardedCallback,
    rethrowCaughtError: function() {
      if (caughtError) {
        var error = caughtError;
        caughtError = null;
        throw error;
      }
    }
  };
  if (process.env.NODE_ENV !== 'production') {
    if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
      var fakeNode = document.createElement('react');
      ReactErrorUtils.invokeGuardedCallback = function(name, func, a, b) {
        var boundFunc = func.bind(null, a, b);
        var evtType = 'react-' + name;
        fakeNode.addEventListener(evtType, boundFunc, false);
        var evt = document.createEvent('Event');
        evt.initEvent(evtType, false, false);
        fakeNode.dispatchEvent(evt);
        fakeNode.removeEventListener(evtType, boundFunc, false);
      };
    }
  }
  module.exports = ReactErrorUtils;
  return module.exports;
});

$__System.registerDynamic("80", ["12", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var invariant = $__require('12');
  function accumulateInto(current, next) {
    !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
    if (current == null) {
      return next;
    }
    var currentIsArray = Array.isArray(current);
    var nextIsArray = Array.isArray(next);
    if (currentIsArray && nextIsArray) {
      current.push.apply(current, next);
      return current;
    }
    if (currentIsArray) {
      current.push(next);
      return current;
    }
    if (nextIsArray) {
      return [current].concat(next);
    }
    return [current, next];
  }
  module.exports = accumulateInto;
  return module.exports;
});

$__System.registerDynamic("81", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var forEachAccumulated = function(arr, cb, scope) {
    if (Array.isArray(arr)) {
      arr.forEach(cb, scope);
    } else if (arr) {
      cb.call(scope, arr);
    }
  };
  module.exports = forEachAccumulated;
  return module.exports;
});

$__System.registerDynamic("34", ["93", "94", "95", "80", "81", "12", "1e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var EventPluginRegistry = $__require('93');
  var EventPluginUtils = $__require('94');
  var ReactErrorUtils = $__require('95');
  var accumulateInto = $__require('80');
  var forEachAccumulated = $__require('81');
  var invariant = $__require('12');
  var warning = $__require('1e');
  var listenerBank = {};
  var eventQueue = null;
  var executeDispatchesAndRelease = function(event, simulated) {
    if (event) {
      EventPluginUtils.executeDispatchesInOrder(event, simulated);
      if (!event.isPersistent()) {
        event.constructor.release(event);
      }
    }
  };
  var executeDispatchesAndReleaseSimulated = function(e) {
    return executeDispatchesAndRelease(e, true);
  };
  var executeDispatchesAndReleaseTopLevel = function(e) {
    return executeDispatchesAndRelease(e, false);
  };
  var InstanceHandle = null;
  function validateInstanceHandle() {
    var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
    process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
  }
  var EventPluginHub = {
    injection: {
      injectMount: EventPluginUtils.injection.injectMount,
      injectInstanceHandle: function(InjectedInstanceHandle) {
        InstanceHandle = InjectedInstanceHandle;
        if (process.env.NODE_ENV !== 'production') {
          validateInstanceHandle();
        }
      },
      getInstanceHandle: function() {
        if (process.env.NODE_ENV !== 'production') {
          validateInstanceHandle();
        }
        return InstanceHandle;
      },
      injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,
      injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
    },
    eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,
    registrationNameModules: EventPluginRegistry.registrationNameModules,
    putListener: function(id, registrationName, listener) {
      !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;
      var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
      bankForRegistrationName[id] = listener;
      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.didPutListener) {
        PluginModule.didPutListener(id, registrationName, listener);
      }
    },
    getListener: function(id, registrationName) {
      var bankForRegistrationName = listenerBank[registrationName];
      return bankForRegistrationName && bankForRegistrationName[id];
    },
    deleteListener: function(id, registrationName) {
      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.willDeleteListener) {
        PluginModule.willDeleteListener(id, registrationName);
      }
      var bankForRegistrationName = listenerBank[registrationName];
      if (bankForRegistrationName) {
        delete bankForRegistrationName[id];
      }
    },
    deleteAllListeners: function(id) {
      for (var registrationName in listenerBank) {
        if (!listenerBank[registrationName][id]) {
          continue;
        }
        var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
        if (PluginModule && PluginModule.willDeleteListener) {
          PluginModule.willDeleteListener(id, registrationName);
        }
        delete listenerBank[registrationName][id];
      }
    },
    extractEvents: function(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
      var events;
      var plugins = EventPluginRegistry.plugins;
      for (var i = 0; i < plugins.length; i++) {
        var possiblePlugin = plugins[i];
        if (possiblePlugin) {
          var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
          if (extractedEvents) {
            events = accumulateInto(events, extractedEvents);
          }
        }
      }
      return events;
    },
    enqueueEvents: function(events) {
      if (events) {
        eventQueue = accumulateInto(eventQueue, events);
      }
    },
    processEventQueue: function(simulated) {
      var processingEventQueue = eventQueue;
      eventQueue = null;
      if (simulated) {
        forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
      } else {
        forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
      }
      !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
      ReactErrorUtils.rethrowCaughtError();
    },
    __purge: function() {
      listenerBank = {};
    },
    __getListenerBank: function() {
      return listenerBank;
    }
  };
  module.exports = EventPluginHub;
  return module.exports;
});

$__System.registerDynamic("96", ["34", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var EventPluginHub = $__require('34');
  function runEventQueueInBatch(events) {
    EventPluginHub.enqueueEvents(events);
    EventPluginHub.processEventQueue(false);
  }
  var ReactEventEmitterMixin = {handleTopLevel: function(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
      var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
      runEventQueueInBatch(events);
    }};
  module.exports = ReactEventEmitterMixin;
  return module.exports;
});

$__System.registerDynamic("8b", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ViewportMetrics = {
    currentScrollLeft: 0,
    currentScrollTop: 0,
    refreshScrollValues: function(scrollPosition) {
      ViewportMetrics.currentScrollLeft = scrollPosition.x;
      ViewportMetrics.currentScrollTop = scrollPosition.y;
    }
  };
  module.exports = ViewportMetrics;
  return module.exports;
});

$__System.registerDynamic("36", ["31", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ExecutionEnvironment = $__require('31');
  var useHasFeature;
  if (ExecutionEnvironment.canUseDOM) {
    useHasFeature = document.implementation && document.implementation.hasFeature && document.implementation.hasFeature('', '') !== true;
  }
  function isEventSupported(eventNameSuffix, capture) {
    if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
      return false;
    }
    var eventName = 'on' + eventNameSuffix;
    var isSupported = (eventName in document);
    if (!isSupported) {
      var element = document.createElement('div');
      element.setAttribute(eventName, 'return;');
      isSupported = typeof element[eventName] === 'function';
    }
    if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
      isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
    }
    return isSupported;
  }
  module.exports = isEventSupported;
  return module.exports;
});

$__System.registerDynamic("5e", ["2f", "34", "93", "96", "4c", "8b", "8", "36", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var EventConstants = $__require('2f');
  var EventPluginHub = $__require('34');
  var EventPluginRegistry = $__require('93');
  var ReactEventEmitterMixin = $__require('96');
  var ReactPerf = $__require('4c');
  var ViewportMetrics = $__require('8b');
  var assign = $__require('8');
  var isEventSupported = $__require('36');
  var alreadyListeningTo = {};
  var isMonitoringScrollValue = false;
  var reactTopListenersCounter = 0;
  var topEventMapping = {
    topAbort: 'abort',
    topBlur: 'blur',
    topCanPlay: 'canplay',
    topCanPlayThrough: 'canplaythrough',
    topChange: 'change',
    topClick: 'click',
    topCompositionEnd: 'compositionend',
    topCompositionStart: 'compositionstart',
    topCompositionUpdate: 'compositionupdate',
    topContextMenu: 'contextmenu',
    topCopy: 'copy',
    topCut: 'cut',
    topDoubleClick: 'dblclick',
    topDrag: 'drag',
    topDragEnd: 'dragend',
    topDragEnter: 'dragenter',
    topDragExit: 'dragexit',
    topDragLeave: 'dragleave',
    topDragOver: 'dragover',
    topDragStart: 'dragstart',
    topDrop: 'drop',
    topDurationChange: 'durationchange',
    topEmptied: 'emptied',
    topEncrypted: 'encrypted',
    topEnded: 'ended',
    topError: 'error',
    topFocus: 'focus',
    topInput: 'input',
    topKeyDown: 'keydown',
    topKeyPress: 'keypress',
    topKeyUp: 'keyup',
    topLoadedData: 'loadeddata',
    topLoadedMetadata: 'loadedmetadata',
    topLoadStart: 'loadstart',
    topMouseDown: 'mousedown',
    topMouseMove: 'mousemove',
    topMouseOut: 'mouseout',
    topMouseOver: 'mouseover',
    topMouseUp: 'mouseup',
    topPaste: 'paste',
    topPause: 'pause',
    topPlay: 'play',
    topPlaying: 'playing',
    topProgress: 'progress',
    topRateChange: 'ratechange',
    topScroll: 'scroll',
    topSeeked: 'seeked',
    topSeeking: 'seeking',
    topSelectionChange: 'selectionchange',
    topStalled: 'stalled',
    topSuspend: 'suspend',
    topTextInput: 'textInput',
    topTimeUpdate: 'timeupdate',
    topTouchCancel: 'touchcancel',
    topTouchEnd: 'touchend',
    topTouchMove: 'touchmove',
    topTouchStart: 'touchstart',
    topVolumeChange: 'volumechange',
    topWaiting: 'waiting',
    topWheel: 'wheel'
  };
  var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);
  function getListeningForDocument(mountAt) {
    if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
      mountAt[topListenersIDKey] = reactTopListenersCounter++;
      alreadyListeningTo[mountAt[topListenersIDKey]] = {};
    }
    return alreadyListeningTo[mountAt[topListenersIDKey]];
  }
  var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {
    ReactEventListener: null,
    injection: {injectReactEventListener: function(ReactEventListener) {
        ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
        ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
      }},
    setEnabled: function(enabled) {
      if (ReactBrowserEventEmitter.ReactEventListener) {
        ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
      }
    },
    isEnabled: function() {
      return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
    },
    listenTo: function(registrationName, contentDocumentHandle) {
      var mountAt = contentDocumentHandle;
      var isListening = getListeningForDocument(mountAt);
      var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];
      var topLevelTypes = EventConstants.topLevelTypes;
      for (var i = 0; i < dependencies.length; i++) {
        var dependency = dependencies[i];
        if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
          if (dependency === topLevelTypes.topWheel) {
            if (isEventSupported('wheel')) {
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
            } else if (isEventSupported('mousewheel')) {
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
            } else {
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
            }
          } else if (dependency === topLevelTypes.topScroll) {
            if (isEventSupported('scroll', true)) {
              ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
            } else {
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
            }
          } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {
            if (isEventSupported('focus', true)) {
              ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
              ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
            } else if (isEventSupported('focusin')) {
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
            }
            isListening[topLevelTypes.topBlur] = true;
            isListening[topLevelTypes.topFocus] = true;
          } else if (topEventMapping.hasOwnProperty(dependency)) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
          }
          isListening[dependency] = true;
        }
      }
    },
    trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
      return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
    },
    trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
      return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
    },
    ensureScrollValueMonitoring: function() {
      if (!isMonitoringScrollValue) {
        var refresh = ViewportMetrics.refreshScrollValues;
        ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
        isMonitoringScrollValue = true;
      }
    },
    eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,
    registrationNameModules: EventPluginHub.registrationNameModules,
    putListener: EventPluginHub.putListener,
    getListener: EventPluginHub.getListener,
    deleteListener: EventPluginHub.deleteListener,
    deleteAllListeners: EventPluginHub.deleteAllListeners
  });
  ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
    putListener: 'putListener',
    deleteListener: 'deleteListener'
  });
  module.exports = ReactBrowserEventEmitter;
  return module.exports;
});

$__System.registerDynamic("78", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactDOMFeatureFlags = {useCreateElement: false};
  module.exports = ReactDOMFeatureFlags;
  return module.exports;
});

$__System.registerDynamic("76", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactRootIndexInjection = {injectCreateReactRootIndex: function(_createReactRootIndex) {
      ReactRootIndex.createReactRootIndex = _createReactRootIndex;
    }};
  var ReactRootIndex = {
    createReactRootIndex: null,
    injection: ReactRootIndexInjection
  };
  module.exports = ReactRootIndex;
  return module.exports;
});

$__System.registerDynamic("d", ["76", "12", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactRootIndex = $__require('76');
  var invariant = $__require('12');
  var SEPARATOR = '.';
  var SEPARATOR_LENGTH = SEPARATOR.length;
  var MAX_TREE_DEPTH = 10000;
  function getReactRootIDString(index) {
    return SEPARATOR + index.toString(36);
  }
  function isBoundary(id, index) {
    return id.charAt(index) === SEPARATOR || index === id.length;
  }
  function isValidID(id) {
    return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
  }
  function isAncestorIDOf(ancestorID, descendantID) {
    return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
  }
  function getParentID(id) {
    return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
  }
  function getNextDescendantID(ancestorID, destinationID) {
    !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
    !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
    if (ancestorID === destinationID) {
      return ancestorID;
    }
    var start = ancestorID.length + SEPARATOR_LENGTH;
    var i;
    for (i = start; i < destinationID.length; i++) {
      if (isBoundary(destinationID, i)) {
        break;
      }
    }
    return destinationID.substr(0, i);
  }
  function getFirstCommonAncestorID(oneID, twoID) {
    var minLength = Math.min(oneID.length, twoID.length);
    if (minLength === 0) {
      return '';
    }
    var lastCommonMarkerIndex = 0;
    for (var i = 0; i <= minLength; i++) {
      if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
        lastCommonMarkerIndex = i;
      } else if (oneID.charAt(i) !== twoID.charAt(i)) {
        break;
      }
    }
    var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
    !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
    return longestCommonID;
  }
  function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
    start = start || '';
    stop = stop || '';
    !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
    var traverseUp = isAncestorIDOf(stop, start);
    !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
    var depth = 0;
    var traverse = traverseUp ? getParentID : getNextDescendantID;
    for (var id = start; ; id = traverse(id, stop)) {
      var ret;
      if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
        ret = cb(id, traverseUp, arg);
      }
      if (ret === false || id === stop) {
        break;
      }
      !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
    }
  }
  var ReactInstanceHandles = {
    createReactRootID: function() {
      return getReactRootIDString(ReactRootIndex.createReactRootIndex());
    },
    createReactID: function(rootID, name) {
      return rootID + name;
    },
    getReactRootIDFromNodeID: function(id) {
      if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
        var index = id.indexOf(SEPARATOR, 1);
        return index > -1 ? id.substr(0, index) : id;
      }
      return null;
    },
    traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
      var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
      if (ancestorID !== leaveID) {
        traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
      }
      if (ancestorID !== enterID) {
        traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
      }
    },
    traverseTwoPhase: function(targetID, cb, arg) {
      if (targetID) {
        traverseParentPath('', targetID, cb, arg, true, false);
        traverseParentPath(targetID, '', cb, arg, false, true);
      }
    },
    traverseTwoPhaseSkipTarget: function(targetID, cb, arg) {
      if (targetID) {
        traverseParentPath('', targetID, cb, arg, true, true);
        traverseParentPath(targetID, '', cb, arg, true, true);
      }
    },
    traverseAncestors: function(targetID, cb, arg) {
      traverseParentPath('', targetID, cb, arg, true, false);
    },
    getFirstCommonAncestorID: getFirstCommonAncestorID,
    _getNextDescendantID: getNextDescendantID,
    isAncestorIDOf: isAncestorIDOf,
    SEPARATOR: SEPARATOR
  };
  module.exports = ReactInstanceHandles;
  return module.exports;
});

$__System.registerDynamic("97", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var MOD = 65521;
  function adler32(data) {
    var a = 1;
    var b = 0;
    var i = 0;
    var l = data.length;
    var m = l & ~0x3;
    while (i < m) {
      for (; i < Math.min(i + 4096, m); i += 4) {
        b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
      }
      a %= MOD;
      b %= MOD;
    }
    for (; i < l; i++) {
      b += a += data.charCodeAt(i);
    }
    a %= MOD;
    b %= MOD;
    return a | b << 16;
  }
  module.exports = adler32;
  return module.exports;
});

$__System.registerDynamic("e", ["97", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var adler32 = $__require('97');
  var TAG_END = /\/?>/;
  var ReactMarkupChecksum = {
    CHECKSUM_ATTR_NAME: 'data-react-checksum',
    addChecksumToMarkup: function(markup) {
      var checksum = adler32(markup);
      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
    },
    canReuseMarkup: function(markup, element) {
      var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
      existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
      var markupChecksum = adler32(markup);
      return markupChecksum === existingChecksum;
    }
  };
  module.exports = ReactMarkupChecksum;
  return module.exports;
});

$__System.registerDynamic("98", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function isNode(object) {
    return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
  }
  module.exports = isNode;
  return module.exports;
});

$__System.registerDynamic("99", ["98", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var isNode = $__require('98');
  function isTextNode(object) {
    return isNode(object) && object.nodeType == 3;
  }
  module.exports = isTextNode;
  return module.exports;
});

$__System.registerDynamic("7c", ["99", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var isTextNode = $__require('99');
  function containsNode(_x, _x2) {
    var _again = true;
    _function: while (_again) {
      var outerNode = _x,
          innerNode = _x2;
      _again = false;
      if (!outerNode || !innerNode) {
        return false;
      } else if (outerNode === innerNode) {
        return true;
      } else if (isTextNode(outerNode)) {
        return false;
      } else if (isTextNode(innerNode)) {
        _x = outerNode;
        _x2 = innerNode.parentNode;
        _again = true;
        continue _function;
      } else if (outerNode.contains) {
        return outerNode.contains(innerNode);
      } else if (outerNode.compareDocumentPosition) {
        return !!(outerNode.compareDocumentPosition(innerNode) & 16);
      } else {
        return false;
      }
    }
  }
  module.exports = containsNode;
  return module.exports;
});

$__System.registerDynamic("5a", ["12", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var invariant = $__require('12');
  var injected = false;
  var ReactComponentEnvironment = {
    unmountIDFromEnvironment: null,
    replaceNodeWithMarkupByID: null,
    processChildrenUpdates: null,
    injection: {injectEnvironment: function(environment) {
        !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
        ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
        ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
        ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
        injected = true;
      }}
  };
  module.exports = ReactComponentEnvironment;
  return module.exports;
});

$__System.registerDynamic("6b", ["12", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var invariant = $__require('12');
  var keyMirror = function(obj) {
    var ret = {};
    var key;
    !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
    for (key in obj) {
      if (!obj.hasOwnProperty(key)) {
        continue;
      }
      ret[key] = key;
    }
    return ret;
  };
  module.exports = keyMirror;
  return module.exports;
});

$__System.registerDynamic("19", ["6b", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var keyMirror = $__require('6b');
  var ReactPropTypeLocations = keyMirror({
    prop: null,
    context: null,
    childContext: null
  });
  module.exports = ReactPropTypeLocations;
  return module.exports;
});

$__System.registerDynamic("1a", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactPropTypeLocationNames = {};
  if (process.env.NODE_ENV !== 'production') {
    ReactPropTypeLocationNames = {
      prop: 'prop',
      context: 'context',
      childContext: 'child context'
    };
  }
  module.exports = ReactPropTypeLocationNames;
  return module.exports;
});

$__System.registerDynamic("40", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactInstanceMap = {
    remove: function(key) {
      key._reactInternalInstance = undefined;
    },
    get: function(key) {
      return key._reactInternalInstance;
    },
    has: function(key) {
      return key._reactInternalInstance !== undefined;
    },
    set: function(key, value) {
      key._reactInternalInstance = value;
    }
  };
  module.exports = ReactInstanceMap;
  return module.exports;
});

$__System.registerDynamic("6", ["5", "8", "12", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var PooledClass = $__require('5');
  var assign = $__require('8');
  var invariant = $__require('12');
  function CallbackQueue() {
    this._callbacks = null;
    this._contexts = null;
  }
  assign(CallbackQueue.prototype, {
    enqueue: function(callback, context) {
      this._callbacks = this._callbacks || [];
      this._contexts = this._contexts || [];
      this._callbacks.push(callback);
      this._contexts.push(context);
    },
    notifyAll: function() {
      var callbacks = this._callbacks;
      var contexts = this._contexts;
      if (callbacks) {
        !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
        this._callbacks = null;
        this._contexts = null;
        for (var i = 0; i < callbacks.length; i++) {
          callbacks[i].call(contexts[i]);
        }
        callbacks.length = 0;
        contexts.length = 0;
      }
    },
    reset: function() {
      this._callbacks = null;
      this._contexts = null;
    },
    destructor: function() {
      this.reset();
    }
  });
  PooledClass.addPoolingTo(CallbackQueue);
  module.exports = CallbackQueue;
  return module.exports;
});

$__System.registerDynamic("5", ["12", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var invariant = $__require('12');
  var oneArgumentPooler = function(copyFieldsFrom) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, copyFieldsFrom);
      return instance;
    } else {
      return new Klass(copyFieldsFrom);
    }
  };
  var twoArgumentPooler = function(a1, a2) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2);
      return instance;
    } else {
      return new Klass(a1, a2);
    }
  };
  var threeArgumentPooler = function(a1, a2, a3) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2, a3);
      return instance;
    } else {
      return new Klass(a1, a2, a3);
    }
  };
  var fourArgumentPooler = function(a1, a2, a3, a4) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2, a3, a4);
      return instance;
    } else {
      return new Klass(a1, a2, a3, a4);
    }
  };
  var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2, a3, a4, a5);
      return instance;
    } else {
      return new Klass(a1, a2, a3, a4, a5);
    }
  };
  var standardReleaser = function(instance) {
    var Klass = this;
    !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
    instance.destructor();
    if (Klass.instancePool.length < Klass.poolSize) {
      Klass.instancePool.push(instance);
    }
  };
  var DEFAULT_POOL_SIZE = 10;
  var DEFAULT_POOLER = oneArgumentPooler;
  var addPoolingTo = function(CopyConstructor, pooler) {
    var NewKlass = CopyConstructor;
    NewKlass.instancePool = [];
    NewKlass.getPooled = pooler || DEFAULT_POOLER;
    if (!NewKlass.poolSize) {
      NewKlass.poolSize = DEFAULT_POOL_SIZE;
    }
    NewKlass.release = standardReleaser;
    return NewKlass;
  };
  var PooledClass = {
    addPoolingTo: addPoolingTo,
    oneArgumentPooler: oneArgumentPooler,
    twoArgumentPooler: twoArgumentPooler,
    threeArgumentPooler: threeArgumentPooler,
    fourArgumentPooler: fourArgumentPooler,
    fiveArgumentPooler: fiveArgumentPooler
  };
  module.exports = PooledClass;
  return module.exports;
});

$__System.registerDynamic("4c", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactPerf = {
    enableMeasure: false,
    storedMeasure: _noMeasure,
    measureMethods: function(object, objectName, methodNames) {
      if (process.env.NODE_ENV !== 'production') {
        for (var key in methodNames) {
          if (!methodNames.hasOwnProperty(key)) {
            continue;
          }
          object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
        }
      }
    },
    measure: function(objName, fnName, func) {
      if (process.env.NODE_ENV !== 'production') {
        var measuredFunc = null;
        var wrapper = function() {
          if (ReactPerf.enableMeasure) {
            if (!measuredFunc) {
              measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
            }
            return measuredFunc.apply(this, arguments);
          }
          return func.apply(this, arguments);
        };
        wrapper.displayName = objName + '_' + fnName;
        return wrapper;
      }
      return func;
    },
    injection: {injectMeasure: function(measure) {
        ReactPerf.storedMeasure = measure;
      }}
  };
  function _noMeasure(objName, fnName, func) {
    return func;
  }
  module.exports = ReactPerf;
  return module.exports;
});

$__System.registerDynamic("7", ["12", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var invariant = $__require('12');
  var Mixin = {
    reinitializeTransaction: function() {
      this.transactionWrappers = this.getTransactionWrappers();
      if (this.wrapperInitData) {
        this.wrapperInitData.length = 0;
      } else {
        this.wrapperInitData = [];
      }
      this._isInTransaction = false;
    },
    _isInTransaction: false,
    getTransactionWrappers: null,
    isInTransaction: function() {
      return !!this._isInTransaction;
    },
    perform: function(method, scope, a, b, c, d, e, f) {
      !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
      var errorThrown;
      var ret;
      try {
        this._isInTransaction = true;
        errorThrown = true;
        this.initializeAll(0);
        ret = method.call(scope, a, b, c, d, e, f);
        errorThrown = false;
      } finally {
        try {
          if (errorThrown) {
            try {
              this.closeAll(0);
            } catch (err) {}
          } else {
            this.closeAll(0);
          }
        } finally {
          this._isInTransaction = false;
        }
      }
      return ret;
    },
    initializeAll: function(startIndex) {
      var transactionWrappers = this.transactionWrappers;
      for (var i = startIndex; i < transactionWrappers.length; i++) {
        var wrapper = transactionWrappers[i];
        try {
          this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
          this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
        } finally {
          if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
            try {
              this.initializeAll(i + 1);
            } catch (err) {}
          }
        }
      }
    },
    closeAll: function(startIndex) {
      !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
      var transactionWrappers = this.transactionWrappers;
      for (var i = startIndex; i < transactionWrappers.length; i++) {
        var wrapper = transactionWrappers[i];
        var initData = this.wrapperInitData[i];
        var errorThrown;
        try {
          errorThrown = true;
          if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
            wrapper.close.call(this, initData);
          }
          errorThrown = false;
        } finally {
          if (errorThrown) {
            try {
              this.closeAll(i + 1);
            } catch (e) {}
          }
        }
      }
      this.wrapperInitData.length = 0;
    }
  };
  var Transaction = {
    Mixin: Mixin,
    OBSERVED_ERROR: {}
  };
  module.exports = Transaction;
  return module.exports;
});

$__System.registerDynamic("f", ["6", "5", "4c", "56", "7", "8", "12", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var CallbackQueue = $__require('6');
  var PooledClass = $__require('5');
  var ReactPerf = $__require('4c');
  var ReactReconciler = $__require('56');
  var Transaction = $__require('7');
  var assign = $__require('8');
  var invariant = $__require('12');
  var dirtyComponents = [];
  var asapCallbackQueue = CallbackQueue.getPooled();
  var asapEnqueued = false;
  var batchingStrategy = null;
  function ensureInjected() {
    !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
  }
  var NESTED_UPDATES = {
    initialize: function() {
      this.dirtyComponentsLength = dirtyComponents.length;
    },
    close: function() {
      if (this.dirtyComponentsLength !== dirtyComponents.length) {
        dirtyComponents.splice(0, this.dirtyComponentsLength);
        flushBatchedUpdates();
      } else {
        dirtyComponents.length = 0;
      }
    }
  };
  var UPDATE_QUEUEING = {
    initialize: function() {
      this.callbackQueue.reset();
    },
    close: function() {
      this.callbackQueue.notifyAll();
    }
  };
  var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];
  function ReactUpdatesFlushTransaction() {
    this.reinitializeTransaction();
    this.dirtyComponentsLength = null;
    this.callbackQueue = CallbackQueue.getPooled();
    this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(false);
  }
  assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
    getTransactionWrappers: function() {
      return TRANSACTION_WRAPPERS;
    },
    destructor: function() {
      this.dirtyComponentsLength = null;
      CallbackQueue.release(this.callbackQueue);
      this.callbackQueue = null;
      ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
      this.reconcileTransaction = null;
    },
    perform: function(method, scope, a) {
      return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
    }
  });
  PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);
  function batchedUpdates(callback, a, b, c, d, e) {
    ensureInjected();
    batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
  }
  function mountOrderComparator(c1, c2) {
    return c1._mountOrder - c2._mountOrder;
  }
  function runBatchedUpdates(transaction) {
    var len = transaction.dirtyComponentsLength;
    !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;
    dirtyComponents.sort(mountOrderComparator);
    for (var i = 0; i < len; i++) {
      var component = dirtyComponents[i];
      var callbacks = component._pendingCallbacks;
      component._pendingCallbacks = null;
      ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);
      if (callbacks) {
        for (var j = 0; j < callbacks.length; j++) {
          transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
        }
      }
    }
  }
  var flushBatchedUpdates = function() {
    while (dirtyComponents.length || asapEnqueued) {
      if (dirtyComponents.length) {
        var transaction = ReactUpdatesFlushTransaction.getPooled();
        transaction.perform(runBatchedUpdates, null, transaction);
        ReactUpdatesFlushTransaction.release(transaction);
      }
      if (asapEnqueued) {
        asapEnqueued = false;
        var queue = asapCallbackQueue;
        asapCallbackQueue = CallbackQueue.getPooled();
        queue.notifyAll();
        CallbackQueue.release(queue);
      }
    }
  };
  flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);
  function enqueueUpdate(component) {
    ensureInjected();
    if (!batchingStrategy.isBatchingUpdates) {
      batchingStrategy.batchedUpdates(enqueueUpdate, component);
      return;
    }
    dirtyComponents.push(component);
  }
  function asap(callback, context) {
    !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
    asapCallbackQueue.enqueue(callback, context);
    asapEnqueued = true;
  }
  var ReactUpdatesInjection = {
    injectReconcileTransaction: function(ReconcileTransaction) {
      !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
      ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
    },
    injectBatchingStrategy: function(_batchingStrategy) {
      !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
      !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
      !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
      batchingStrategy = _batchingStrategy;
    }
  };
  var ReactUpdates = {
    ReactReconcileTransaction: null,
    batchedUpdates: batchedUpdates,
    enqueueUpdate: enqueueUpdate,
    flushBatchedUpdates: flushBatchedUpdates,
    injection: ReactUpdatesInjection,
    asap: asap
  };
  module.exports = ReactUpdates;
  return module.exports;
});

$__System.registerDynamic("60", ["1b", "c", "40", "f", "8", "12", "1e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactCurrentOwner = $__require('1b');
  var ReactElement = $__require('c');
  var ReactInstanceMap = $__require('40');
  var ReactUpdates = $__require('f');
  var assign = $__require('8');
  var invariant = $__require('12');
  var warning = $__require('1e');
  function enqueueUpdate(internalInstance) {
    ReactUpdates.enqueueUpdate(internalInstance);
  }
  function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
    var internalInstance = ReactInstanceMap.get(publicInstance);
    if (!internalInstance) {
      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
      }
      return null;
    }
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
    }
    return internalInstance;
  }
  var ReactUpdateQueue = {
    isMounted: function(publicInstance) {
      if (process.env.NODE_ENV !== 'production') {
        var owner = ReactCurrentOwner.current;
        if (owner !== null) {
          process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
          owner._warnedAboutRefsInRender = true;
        }
      }
      var internalInstance = ReactInstanceMap.get(publicInstance);
      if (internalInstance) {
        return !!internalInstance._renderedComponent;
      } else {
        return false;
      }
    },
    enqueueCallback: function(publicInstance, callback) {
      !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
      var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
      if (!internalInstance) {
        return null;
      }
      if (internalInstance._pendingCallbacks) {
        internalInstance._pendingCallbacks.push(callback);
      } else {
        internalInstance._pendingCallbacks = [callback];
      }
      enqueueUpdate(internalInstance);
    },
    enqueueCallbackInternal: function(internalInstance, callback) {
      !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
      if (internalInstance._pendingCallbacks) {
        internalInstance._pendingCallbacks.push(callback);
      } else {
        internalInstance._pendingCallbacks = [callback];
      }
      enqueueUpdate(internalInstance);
    },
    enqueueForceUpdate: function(publicInstance) {
      var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');
      if (!internalInstance) {
        return;
      }
      internalInstance._pendingForceUpdate = true;
      enqueueUpdate(internalInstance);
    },
    enqueueReplaceState: function(publicInstance, completeState) {
      var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');
      if (!internalInstance) {
        return;
      }
      internalInstance._pendingStateQueue = [completeState];
      internalInstance._pendingReplaceState = true;
      enqueueUpdate(internalInstance);
    },
    enqueueSetState: function(publicInstance, partialState) {
      var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');
      if (!internalInstance) {
        return;
      }
      var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
      queue.push(partialState);
      enqueueUpdate(internalInstance);
    },
    enqueueSetProps: function(publicInstance, partialProps) {
      var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
      if (!internalInstance) {
        return;
      }
      ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
    },
    enqueueSetPropsInternal: function(internalInstance, partialProps) {
      var topLevelWrapper = internalInstance._topLevelWrapper;
      !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;
      var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
      var element = wrapElement.props;
      var props = assign({}, element.props, partialProps);
      topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));
      enqueueUpdate(topLevelWrapper);
    },
    enqueueReplaceProps: function(publicInstance, props) {
      var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
      if (!internalInstance) {
        return;
      }
      ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
    },
    enqueueReplacePropsInternal: function(internalInstance, props) {
      var topLevelWrapper = internalInstance._topLevelWrapper;
      !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;
      var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
      var element = wrapElement.props;
      topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));
      enqueueUpdate(topLevelWrapper);
    },
    enqueueElementInternal: function(internalInstance, newElement) {
      internalInstance._pendingElement = newElement;
      enqueueUpdate(internalInstance);
    }
  };
  module.exports = ReactUpdateQueue;
  return module.exports;
});

$__System.registerDynamic("11", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var emptyObject = {};
  if (process.env.NODE_ENV !== 'production') {
    Object.freeze(emptyObject);
  }
  module.exports = emptyObject;
  return module.exports;
});

$__System.registerDynamic("9a", ["5a", "1b", "c", "40", "4c", "19", "1a", "56", "60", "8", "11", "12", "57", "1e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactComponentEnvironment = $__require('5a');
  var ReactCurrentOwner = $__require('1b');
  var ReactElement = $__require('c');
  var ReactInstanceMap = $__require('40');
  var ReactPerf = $__require('4c');
  var ReactPropTypeLocations = $__require('19');
  var ReactPropTypeLocationNames = $__require('1a');
  var ReactReconciler = $__require('56');
  var ReactUpdateQueue = $__require('60');
  var assign = $__require('8');
  var emptyObject = $__require('11');
  var invariant = $__require('12');
  var shouldUpdateReactComponent = $__require('57');
  var warning = $__require('1e');
  function getDeclarationErrorAddendum(component) {
    var owner = component._currentElement._owner || null;
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  }
  function StatelessComponent(Component) {}
  StatelessComponent.prototype.render = function() {
    var Component = ReactInstanceMap.get(this)._currentElement.type;
    return Component(this.props, this.context, this.updater);
  };
  var nextMountID = 1;
  var ReactCompositeComponentMixin = {
    construct: function(element) {
      this._currentElement = element;
      this._rootNodeID = null;
      this._instance = null;
      this._pendingElement = null;
      this._pendingStateQueue = null;
      this._pendingReplaceState = false;
      this._pendingForceUpdate = false;
      this._renderedComponent = null;
      this._context = null;
      this._mountOrder = 0;
      this._topLevelWrapper = null;
      this._pendingCallbacks = null;
    },
    mountComponent: function(rootID, transaction, context) {
      this._context = context;
      this._mountOrder = nextMountID++;
      this._rootNodeID = rootID;
      var publicProps = this._processProps(this._currentElement.props);
      var publicContext = this._processContext(context);
      var Component = this._currentElement.type;
      var inst;
      var renderedElement;
      var canInstantiate = ('prototype' in Component);
      if (canInstantiate) {
        if (process.env.NODE_ENV !== 'production') {
          ReactCurrentOwner.current = this;
          try {
            inst = new Component(publicProps, publicContext, ReactUpdateQueue);
          } finally {
            ReactCurrentOwner.current = null;
          }
        } else {
          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
        }
      }
      if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
        renderedElement = inst;
        inst = new StatelessComponent(Component);
      }
      if (process.env.NODE_ENV !== 'production') {
        if (inst.render == null) {
          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
        } else {
          process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
        }
      }
      inst.props = publicProps;
      inst.context = publicContext;
      inst.refs = emptyObject;
      inst.updater = ReactUpdateQueue;
      this._instance = inst;
      ReactInstanceMap.set(inst, this);
      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
        process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
        process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
        process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
        process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
        process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
        process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
      }
      var initialState = inst.state;
      if (initialState === undefined) {
        inst.state = initialState = null;
      }
      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
      this._pendingStateQueue = null;
      this._pendingReplaceState = false;
      this._pendingForceUpdate = false;
      if (inst.componentWillMount) {
        inst.componentWillMount();
        if (this._pendingStateQueue) {
          inst.state = this._processPendingState(inst.props, inst.context);
        }
      }
      if (renderedElement === undefined) {
        renderedElement = this._renderValidatedComponent();
      }
      this._renderedComponent = this._instantiateReactComponent(renderedElement);
      var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
      if (inst.componentDidMount) {
        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
      }
      return markup;
    },
    unmountComponent: function() {
      var inst = this._instance;
      if (inst.componentWillUnmount) {
        inst.componentWillUnmount();
      }
      ReactReconciler.unmountComponent(this._renderedComponent);
      this._renderedComponent = null;
      this._instance = null;
      this._pendingStateQueue = null;
      this._pendingReplaceState = false;
      this._pendingForceUpdate = false;
      this._pendingCallbacks = null;
      this._pendingElement = null;
      this._context = null;
      this._rootNodeID = null;
      this._topLevelWrapper = null;
      ReactInstanceMap.remove(inst);
    },
    _maskContext: function(context) {
      var maskedContext = null;
      var Component = this._currentElement.type;
      var contextTypes = Component.contextTypes;
      if (!contextTypes) {
        return emptyObject;
      }
      maskedContext = {};
      for (var contextName in contextTypes) {
        maskedContext[contextName] = context[contextName];
      }
      return maskedContext;
    },
    _processContext: function(context) {
      var maskedContext = this._maskContext(context);
      if (process.env.NODE_ENV !== 'production') {
        var Component = this._currentElement.type;
        if (Component.contextTypes) {
          this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
        }
      }
      return maskedContext;
    },
    _processChildContext: function(currentContext) {
      var Component = this._currentElement.type;
      var inst = this._instance;
      var childContext = inst.getChildContext && inst.getChildContext();
      if (childContext) {
        !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
        if (process.env.NODE_ENV !== 'production') {
          this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
        }
        for (var name in childContext) {
          !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
        }
        return assign({}, currentContext, childContext);
      }
      return currentContext;
    },
    _processProps: function(newProps) {
      if (process.env.NODE_ENV !== 'production') {
        var Component = this._currentElement.type;
        if (Component.propTypes) {
          this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
        }
      }
      return newProps;
    },
    _checkPropTypes: function(propTypes, props, location) {
      var componentName = this.getName();
      for (var propName in propTypes) {
        if (propTypes.hasOwnProperty(propName)) {
          var error;
          try {
            !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
            error = propTypes[propName](props, propName, componentName, location);
          } catch (ex) {
            error = ex;
          }
          if (error instanceof Error) {
            var addendum = getDeclarationErrorAddendum(this);
            if (location === ReactPropTypeLocations.prop) {
              process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
            } else {
              process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
            }
          }
        }
      }
    },
    receiveComponent: function(nextElement, transaction, nextContext) {
      var prevElement = this._currentElement;
      var prevContext = this._context;
      this._pendingElement = null;
      this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
    },
    performUpdateIfNecessary: function(transaction) {
      if (this._pendingElement != null) {
        ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
      }
      if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
        this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
      }
    },
    updateComponent: function(transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
      var inst = this._instance;
      var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
      var nextProps;
      if (prevParentElement === nextParentElement) {
        nextProps = nextParentElement.props;
      } else {
        nextProps = this._processProps(nextParentElement.props);
        if (inst.componentWillReceiveProps) {
          inst.componentWillReceiveProps(nextProps, nextContext);
        }
      }
      var nextState = this._processPendingState(nextProps, nextContext);
      var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);
      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
      }
      if (shouldUpdate) {
        this._pendingForceUpdate = false;
        this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
      } else {
        this._currentElement = nextParentElement;
        this._context = nextUnmaskedContext;
        inst.props = nextProps;
        inst.state = nextState;
        inst.context = nextContext;
      }
    },
    _processPendingState: function(props, context) {
      var inst = this._instance;
      var queue = this._pendingStateQueue;
      var replace = this._pendingReplaceState;
      this._pendingReplaceState = false;
      this._pendingStateQueue = null;
      if (!queue) {
        return inst.state;
      }
      if (replace && queue.length === 1) {
        return queue[0];
      }
      var nextState = assign({}, replace ? queue[0] : inst.state);
      for (var i = replace ? 1 : 0; i < queue.length; i++) {
        var partial = queue[i];
        assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
      }
      return nextState;
    },
    _performComponentUpdate: function(nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
      var inst = this._instance;
      var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
      var prevProps;
      var prevState;
      var prevContext;
      if (hasComponentDidUpdate) {
        prevProps = inst.props;
        prevState = inst.state;
        prevContext = inst.context;
      }
      if (inst.componentWillUpdate) {
        inst.componentWillUpdate(nextProps, nextState, nextContext);
      }
      this._currentElement = nextElement;
      this._context = unmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
      this._updateRenderedComponent(transaction, unmaskedContext);
      if (hasComponentDidUpdate) {
        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
      }
    },
    _updateRenderedComponent: function(transaction, context) {
      var prevComponentInstance = this._renderedComponent;
      var prevRenderedElement = prevComponentInstance._currentElement;
      var nextRenderedElement = this._renderValidatedComponent();
      if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
        ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
      } else {
        var thisID = this._rootNodeID;
        var prevComponentID = prevComponentInstance._rootNodeID;
        ReactReconciler.unmountComponent(prevComponentInstance);
        this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
        var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
        this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
      }
    },
    _replaceNodeWithMarkupByID: function(prevComponentID, nextMarkup) {
      ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
    },
    _renderValidatedComponentWithoutOwnerOrContext: function() {
      var inst = this._instance;
      var renderedComponent = inst.render();
      if (process.env.NODE_ENV !== 'production') {
        if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
          renderedComponent = null;
        }
      }
      return renderedComponent;
    },
    _renderValidatedComponent: function() {
      var renderedComponent;
      ReactCurrentOwner.current = this;
      try {
        renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
      } finally {
        ReactCurrentOwner.current = null;
      }
      !(renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
      return renderedComponent;
    },
    attachRef: function(ref, component) {
      var inst = this.getPublicInstance();
      !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
      var publicComponentInstance = component.getPublicInstance();
      if (process.env.NODE_ENV !== 'production') {
        var componentName = component && component.getName ? component.getName() : 'a component';
        process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
      }
      var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
      refs[ref] = publicComponentInstance;
    },
    detachRef: function(ref) {
      var refs = this.getPublicInstance().refs;
      delete refs[ref];
    },
    getName: function() {
      var type = this._currentElement.type;
      var constructor = this._instance && this._instance.constructor;
      return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
    },
    getPublicInstance: function() {
      var inst = this._instance;
      if (inst instanceof StatelessComponent) {
        return null;
      }
      return inst;
    },
    _instantiateReactComponent: null
  };
  ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
    mountComponent: 'mountComponent',
    updateComponent: 'updateComponent',
    _renderValidatedComponent: '_renderValidatedComponent'
  });
  var ReactCompositeComponent = {Mixin: ReactCompositeComponentMixin};
  module.exports = ReactCompositeComponent;
  return module.exports;
});

$__System.registerDynamic("1b", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactCurrentOwner = {current: null};
  module.exports = ReactCurrentOwner;
  return module.exports;
});

$__System.registerDynamic("1c", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var canDefineProperty = false;
  if (process.env.NODE_ENV !== 'production') {
    try {
      Object.defineProperty({}, 'x', {get: function() {}});
      canDefineProperty = true;
    } catch (x) {}
  }
  module.exports = canDefineProperty;
  return module.exports;
});

$__System.registerDynamic("c", ["1b", "8", "1c", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactCurrentOwner = $__require('1b');
  var assign = $__require('8');
  var canDefineProperty = $__require('1c');
  var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;
  var RESERVED_PROPS = {
    key: true,
    ref: true,
    __self: true,
    __source: true
  };
  var ReactElement = function(type, key, ref, self, source, owner, props) {
    var element = {
      $$typeof: REACT_ELEMENT_TYPE,
      type: type,
      key: key,
      ref: ref,
      props: props,
      _owner: owner
    };
    if (process.env.NODE_ENV !== 'production') {
      element._store = {};
      if (canDefineProperty) {
        Object.defineProperty(element._store, 'validated', {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        });
        Object.defineProperty(element, '_self', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: self
        });
        Object.defineProperty(element, '_source', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: source
        });
      } else {
        element._store.validated = false;
        element._self = self;
        element._source = source;
      }
      Object.freeze(element.props);
      Object.freeze(element);
    }
    return element;
  };
  ReactElement.createElement = function(type, config, children) {
    var propName;
    var props = {};
    var key = null;
    var ref = null;
    var self = null;
    var source = null;
    if (config != null) {
      ref = config.ref === undefined ? null : config.ref;
      key = config.key === undefined ? null : '' + config.key;
      self = config.__self === undefined ? null : config.__self;
      source = config.__source === undefined ? null : config.__source;
      for (propName in config) {
        if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
          props[propName] = config[propName];
        }
      }
    }
    var childrenLength = arguments.length - 2;
    if (childrenLength === 1) {
      props.children = children;
    } else if (childrenLength > 1) {
      var childArray = Array(childrenLength);
      for (var i = 0; i < childrenLength; i++) {
        childArray[i] = arguments[i + 2];
      }
      props.children = childArray;
    }
    if (type && type.defaultProps) {
      var defaultProps = type.defaultProps;
      for (propName in defaultProps) {
        if (typeof props[propName] === 'undefined') {
          props[propName] = defaultProps[propName];
        }
      }
    }
    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
  };
  ReactElement.createFactory = function(type) {
    var factory = ReactElement.createElement.bind(null, type);
    factory.type = type;
    return factory;
  };
  ReactElement.cloneAndReplaceKey = function(oldElement, newKey) {
    var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
    return newElement;
  };
  ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
    var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);
    if (process.env.NODE_ENV !== 'production') {
      newElement._store.validated = oldElement._store.validated;
    }
    return newElement;
  };
  ReactElement.cloneElement = function(element, config, children) {
    var propName;
    var props = assign({}, element.props);
    var key = element.key;
    var ref = element.ref;
    var self = element._self;
    var source = element._source;
    var owner = element._owner;
    if (config != null) {
      if (config.ref !== undefined) {
        ref = config.ref;
        owner = ReactCurrentOwner.current;
      }
      if (config.key !== undefined) {
        key = '' + config.key;
      }
      for (propName in config) {
        if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
          props[propName] = config[propName];
        }
      }
    }
    var childrenLength = arguments.length - 2;
    if (childrenLength === 1) {
      props.children = children;
    } else if (childrenLength > 1) {
      var childArray = Array(childrenLength);
      for (var i = 0; i < childrenLength; i++) {
        childArray[i] = arguments[i + 2];
      }
      props.children = childArray;
    }
    return ReactElement(element.type, key, ref, self, source, owner, props);
  };
  ReactElement.isValidElement = function(object) {
    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
  };
  module.exports = ReactElement;
  return module.exports;
});

$__System.registerDynamic("9b", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var nullComponentIDsRegistry = {};
  function isNullComponentID(id) {
    return !!nullComponentIDsRegistry[id];
  }
  function registerNullComponentID(id) {
    nullComponentIDsRegistry[id] = true;
  }
  function deregisterNullComponentID(id) {
    delete nullComponentIDsRegistry[id];
  }
  var ReactEmptyComponentRegistry = {
    isNullComponentID: isNullComponentID,
    registerNullComponentID: registerNullComponentID,
    deregisterNullComponentID: deregisterNullComponentID
  };
  module.exports = ReactEmptyComponentRegistry;
  return module.exports;
});

$__System.registerDynamic("9c", ["12", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var invariant = $__require('12');
  var ReactOwner = {
    isValidOwner: function(object) {
      return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
    },
    addComponentAsRefTo: function(component, ref, owner) {
      !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
      owner.attachRef(ref, component);
    },
    removeComponentAsRefFrom: function(component, ref, owner) {
      !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
      if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
        owner.detachRef(ref);
      }
    }
  };
  module.exports = ReactOwner;
  return module.exports;
});

$__System.registerDynamic("9d", ["9c", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactOwner = $__require('9c');
  var ReactRef = {};
  function attachRef(ref, component, owner) {
    if (typeof ref === 'function') {
      ref(component.getPublicInstance());
    } else {
      ReactOwner.addComponentAsRefTo(component, ref, owner);
    }
  }
  function detachRef(ref, component, owner) {
    if (typeof ref === 'function') {
      ref(null);
    } else {
      ReactOwner.removeComponentAsRefFrom(component, ref, owner);
    }
  }
  ReactRef.attachRefs = function(instance, element) {
    if (element === null || element === false) {
      return;
    }
    var ref = element.ref;
    if (ref != null) {
      attachRef(ref, instance, element._owner);
    }
  };
  ReactRef.shouldUpdateRefs = function(prevElement, nextElement) {
    var prevEmpty = prevElement === null || prevElement === false;
    var nextEmpty = nextElement === null || nextElement === false;
    return (prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref);
  };
  ReactRef.detachRefs = function(instance, element) {
    if (element === null || element === false) {
      return;
    }
    var ref = element.ref;
    if (ref != null) {
      detachRef(ref, instance, element._owner);
    }
  };
  module.exports = ReactRef;
  return module.exports;
});

$__System.registerDynamic("56", ["9d", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactRef = $__require('9d');
  function attachRefs() {
    ReactRef.attachRefs(this, this._currentElement);
  }
  var ReactReconciler = {
    mountComponent: function(internalInstance, rootID, transaction, context) {
      var markup = internalInstance.mountComponent(rootID, transaction, context);
      if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
        transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
      }
      return markup;
    },
    unmountComponent: function(internalInstance) {
      ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
      internalInstance.unmountComponent();
    },
    receiveComponent: function(internalInstance, nextElement, transaction, context) {
      var prevElement = internalInstance._currentElement;
      if (nextElement === prevElement && context === internalInstance._context) {
        return;
      }
      var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);
      if (refsChanged) {
        ReactRef.detachRefs(internalInstance, prevElement);
      }
      internalInstance.receiveComponent(nextElement, transaction, context);
      if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
        transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
      }
    },
    performUpdateIfNecessary: function(internalInstance, transaction) {
      internalInstance.performUpdateIfNecessary(transaction);
    }
  };
  module.exports = ReactReconciler;
  return module.exports;
});

$__System.registerDynamic("74", ["c", "9b", "56", "8", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactElement = $__require('c');
  var ReactEmptyComponentRegistry = $__require('9b');
  var ReactReconciler = $__require('56');
  var assign = $__require('8');
  var placeholderElement;
  var ReactEmptyComponentInjection = {injectEmptyComponent: function(component) {
      placeholderElement = ReactElement.createElement(component);
    }};
  var ReactEmptyComponent = function(instantiate) {
    this._currentElement = null;
    this._rootNodeID = null;
    this._renderedComponent = instantiate(placeholderElement);
  };
  assign(ReactEmptyComponent.prototype, {
    construct: function(element) {},
    mountComponent: function(rootID, transaction, context) {
      ReactEmptyComponentRegistry.registerNullComponentID(rootID);
      this._rootNodeID = rootID;
      return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
    },
    receiveComponent: function() {},
    unmountComponent: function(rootID, transaction, context) {
      ReactReconciler.unmountComponent(this._renderedComponent);
      ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
      this._rootNodeID = null;
      this._renderedComponent = null;
    }
  });
  ReactEmptyComponent.injection = ReactEmptyComponentInjection;
  module.exports = ReactEmptyComponent;
  return module.exports;
});

$__System.registerDynamic("75", ["8", "12", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var assign = $__require('8');
  var invariant = $__require('12');
  var autoGenerateWrapperClass = null;
  var genericComponentClass = null;
  var tagToComponentClass = {};
  var textComponentClass = null;
  var ReactNativeComponentInjection = {
    injectGenericComponentClass: function(componentClass) {
      genericComponentClass = componentClass;
    },
    injectTextComponentClass: function(componentClass) {
      textComponentClass = componentClass;
    },
    injectComponentClasses: function(componentClasses) {
      assign(tagToComponentClass, componentClasses);
    }
  };
  function getComponentClassForElement(element) {
    if (typeof element.type === 'function') {
      return element.type;
    }
    var tag = element.type;
    var componentClass = tagToComponentClass[tag];
    if (componentClass == null) {
      tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
    }
    return componentClass;
  }
  function createInternalComponent(element) {
    !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
    return new genericComponentClass(element.type, element.props);
  }
  function createInstanceForText(text) {
    return new textComponentClass(text);
  }
  function isTextComponent(component) {
    return component instanceof textComponentClass;
  }
  var ReactNativeComponent = {
    getComponentClassForElement: getComponentClassForElement,
    createInternalComponent: createInternalComponent,
    createInstanceForText: createInstanceForText,
    isTextComponent: isTextComponent,
    injection: ReactNativeComponentInjection
  };
  module.exports = ReactNativeComponent;
  return module.exports;
});

$__System.registerDynamic("10", ["9a", "74", "75", "8", "12", "1e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactCompositeComponent = $__require('9a');
  var ReactEmptyComponent = $__require('74');
  var ReactNativeComponent = $__require('75');
  var assign = $__require('8');
  var invariant = $__require('12');
  var warning = $__require('1e');
  var ReactCompositeComponentWrapper = function() {};
  assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {_instantiateReactComponent: instantiateReactComponent});
  function getDeclarationErrorAddendum(owner) {
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  }
  function isInternalComponentType(type) {
    return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
  }
  function instantiateReactComponent(node) {
    var instance;
    if (node === null || node === false) {
      instance = new ReactEmptyComponent(instantiateReactComponent);
    } else if (typeof node === 'object') {
      var element = node;
      !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;
      if (typeof element.type === 'string') {
        instance = ReactNativeComponent.createInternalComponent(element);
      } else if (isInternalComponentType(element.type)) {
        instance = new element.type(element);
      } else {
        instance = new ReactCompositeComponentWrapper();
      }
    } else if (typeof node === 'string' || typeof node === 'number') {
      instance = ReactNativeComponent.createInstanceForText(node);
    } else {
      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;
    }
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
    }
    instance.construct(node);
    instance._mountIndex = 0;
    instance._mountImage = null;
    if (process.env.NODE_ENV !== 'production') {
      instance._isOwnerNecessary = false;
      instance._warnedAboutRefsInRender = false;
    }
    if (process.env.NODE_ENV !== 'production') {
      if (Object.preventExtensions) {
        Object.preventExtensions(instance);
      }
    }
    return instance;
  }
  module.exports = instantiateReactComponent;
  return module.exports;
});

$__System.registerDynamic("12", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function invariant(condition, format, a, b, c, d, e, f) {
    if (process.env.NODE_ENV !== 'production') {
      if (format === undefined) {
        throw new Error('invariant requires an error message argument');
      }
    }
    if (!condition) {
      var error;
      if (format === undefined) {
        error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function() {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }
      error.framesToPop = 1;
      throw error;
    }
  }
  module.exports = invariant;
  return module.exports;
});

$__System.registerDynamic("62", ["31", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ExecutionEnvironment = $__require('31');
  var WHITESPACE_TEST = /^[ \r\n\t\f]/;
  var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;
  var setInnerHTML = function(node, html) {
    node.innerHTML = html;
  };
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    setInnerHTML = function(node, html) {
      MSApp.execUnsafeLocalFunction(function() {
        node.innerHTML = html;
      });
    };
  }
  if (ExecutionEnvironment.canUseDOM) {
    var testElement = document.createElement('div');
    testElement.innerHTML = ' ';
    if (testElement.innerHTML === '') {
      setInnerHTML = function(node, html) {
        if (node.parentNode) {
          node.parentNode.replaceChild(node, node);
        }
        if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
          node.innerHTML = String.fromCharCode(0xFEFF) + html;
          var textNode = node.firstChild;
          if (textNode.data.length === 1) {
            node.removeChild(textNode);
          } else {
            textNode.deleteData(0, 1);
          }
        } else {
          node.innerHTML = html;
        }
      };
    }
  }
  module.exports = setInnerHTML;
  return module.exports;
});

$__System.registerDynamic("57", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function shouldUpdateReactComponent(prevElement, nextElement) {
    var prevEmpty = prevElement === null || prevElement === false;
    var nextEmpty = nextElement === null || nextElement === false;
    if (prevEmpty || nextEmpty) {
      return prevEmpty === nextEmpty;
    }
    var prevType = typeof prevElement;
    var nextType = typeof nextElement;
    if (prevType === 'string' || prevType === 'number') {
      return nextType === 'string' || nextType === 'number';
    } else {
      return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
    }
    return false;
  }
  module.exports = shouldUpdateReactComponent;
  return module.exports;
});

$__System.registerDynamic("8", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function assign(target, sources) {
    if (target == null) {
      throw new TypeError('Object.assign target cannot be null or undefined');
    }
    var to = Object(target);
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
      var nextSource = arguments[nextIndex];
      if (nextSource == null) {
        continue;
      }
      var from = Object(nextSource);
      for (var key in from) {
        if (hasOwnProperty.call(from, key)) {
          to[key] = from[key];
        }
      }
    }
    return to;
  }
  module.exports = assign;
  return module.exports;
});

$__System.registerDynamic("64", ["8", "9", "1e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var assign = $__require('8');
  var emptyFunction = $__require('9');
  var warning = $__require('1e');
  var validateDOMNesting = emptyFunction;
  if (process.env.NODE_ENV !== 'production') {
    var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];
    var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', 'foreignObject', 'desc', 'title'];
    var buttonScopeTags = inScopeTags.concat(['button']);
    var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
    var emptyAncestorInfo = {
      parentTag: null,
      formTag: null,
      aTagInScope: null,
      buttonTagInScope: null,
      nobrTagInScope: null,
      pTagInButtonScope: null,
      listItemTagAutoclosing: null,
      dlItemTagAutoclosing: null
    };
    var updatedAncestorInfo = function(oldInfo, tag, instance) {
      var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
      var info = {
        tag: tag,
        instance: instance
      };
      if (inScopeTags.indexOf(tag) !== -1) {
        ancestorInfo.aTagInScope = null;
        ancestorInfo.buttonTagInScope = null;
        ancestorInfo.nobrTagInScope = null;
      }
      if (buttonScopeTags.indexOf(tag) !== -1) {
        ancestorInfo.pTagInButtonScope = null;
      }
      if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
        ancestorInfo.listItemTagAutoclosing = null;
        ancestorInfo.dlItemTagAutoclosing = null;
      }
      ancestorInfo.parentTag = info;
      if (tag === 'form') {
        ancestorInfo.formTag = info;
      }
      if (tag === 'a') {
        ancestorInfo.aTagInScope = info;
      }
      if (tag === 'button') {
        ancestorInfo.buttonTagInScope = info;
      }
      if (tag === 'nobr') {
        ancestorInfo.nobrTagInScope = info;
      }
      if (tag === 'p') {
        ancestorInfo.pTagInButtonScope = info;
      }
      if (tag === 'li') {
        ancestorInfo.listItemTagAutoclosing = info;
      }
      if (tag === 'dd' || tag === 'dt') {
        ancestorInfo.dlItemTagAutoclosing = info;
      }
      return ancestorInfo;
    };
    var isTagValidWithParent = function(tag, parentTag) {
      switch (parentTag) {
        case 'select':
          return tag === 'option' || tag === 'optgroup' || tag === '#text';
        case 'optgroup':
          return tag === 'option' || tag === '#text';
        case 'option':
          return tag === '#text';
        case 'tr':
          return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
        case 'tbody':
        case 'thead':
        case 'tfoot':
          return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
        case 'colgroup':
          return tag === 'col' || tag === 'template';
        case 'table':
          return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
        case 'head':
          return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
        case 'html':
          return tag === 'head' || tag === 'body';
      }
      switch (tag) {
        case 'h1':
        case 'h2':
        case 'h3':
        case 'h4':
        case 'h5':
        case 'h6':
          return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
        case 'rp':
        case 'rt':
          return impliedEndTags.indexOf(parentTag) === -1;
        case 'caption':
        case 'col':
        case 'colgroup':
        case 'frame':
        case 'head':
        case 'tbody':
        case 'td':
        case 'tfoot':
        case 'th':
        case 'thead':
        case 'tr':
          return parentTag == null;
      }
      return true;
    };
    var findInvalidAncestorForTag = function(tag, ancestorInfo) {
      switch (tag) {
        case 'address':
        case 'article':
        case 'aside':
        case 'blockquote':
        case 'center':
        case 'details':
        case 'dialog':
        case 'dir':
        case 'div':
        case 'dl':
        case 'fieldset':
        case 'figcaption':
        case 'figure':
        case 'footer':
        case 'header':
        case 'hgroup':
        case 'main':
        case 'menu':
        case 'nav':
        case 'ol':
        case 'p':
        case 'section':
        case 'summary':
        case 'ul':
        case 'pre':
        case 'listing':
        case 'table':
        case 'hr':
        case 'xmp':
        case 'h1':
        case 'h2':
        case 'h3':
        case 'h4':
        case 'h5':
        case 'h6':
          return ancestorInfo.pTagInButtonScope;
        case 'form':
          return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
        case 'li':
          return ancestorInfo.listItemTagAutoclosing;
        case 'dd':
        case 'dt':
          return ancestorInfo.dlItemTagAutoclosing;
        case 'button':
          return ancestorInfo.buttonTagInScope;
        case 'a':
          return ancestorInfo.aTagInScope;
        case 'nobr':
          return ancestorInfo.nobrTagInScope;
      }
      return null;
    };
    var findOwnerStack = function(instance) {
      if (!instance) {
        return [];
      }
      var stack = [];
      do {
        stack.push(instance);
      } while (instance = instance._currentElement._owner);
      stack.reverse();
      return stack;
    };
    var didWarn = {};
    validateDOMNesting = function(childTag, childInstance, ancestorInfo) {
      ancestorInfo = ancestorInfo || emptyAncestorInfo;
      var parentInfo = ancestorInfo.parentTag;
      var parentTag = parentInfo && parentInfo.tag;
      var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
      var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
      var problematic = invalidParent || invalidAncestor;
      if (problematic) {
        var ancestorTag = problematic.tag;
        var ancestorInstance = problematic.instance;
        var childOwner = childInstance && childInstance._currentElement._owner;
        var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;
        var childOwners = findOwnerStack(childOwner);
        var ancestorOwners = findOwnerStack(ancestorOwner);
        var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
        var i;
        var deepestCommon = -1;
        for (i = 0; i < minStackLen; i++) {
          if (childOwners[i] === ancestorOwners[i]) {
            deepestCommon = i;
          } else {
            break;
          }
        }
        var UNKNOWN = '(unknown)';
        var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function(inst) {
          return inst.getName() || UNKNOWN;
        });
        var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function(inst) {
          return inst.getName() || UNKNOWN;
        });
        var ownerInfo = [].concat(deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag, invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');
        var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
        if (didWarn[warnKey]) {
          return;
        }
        didWarn[warnKey] = true;
        if (invalidParent) {
          var info = '';
          if (ancestorTag === 'table' && childTag === 'tr') {
            info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
          }
          process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
        } else {
          process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
        }
      }
    };
    validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);
    validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;
    validateDOMNesting.isTagValidInContext = function(tag, ancestorInfo) {
      ancestorInfo = ancestorInfo || emptyAncestorInfo;
      var parentInfo = ancestorInfo.parentTag;
      var parentTag = parentInfo && parentInfo.tag;
      return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
    };
  }
  module.exports = validateDOMNesting;
  return module.exports;
});

$__System.registerDynamic("3c", ["3e", "5e", "1b", "78", "c", "9b", "d", "40", "e", "4c", "56", "60", "f", "8", "11", "7c", "10", "12", "62", "57", "64", "1e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var DOMProperty = $__require('3e');
  var ReactBrowserEventEmitter = $__require('5e');
  var ReactCurrentOwner = $__require('1b');
  var ReactDOMFeatureFlags = $__require('78');
  var ReactElement = $__require('c');
  var ReactEmptyComponentRegistry = $__require('9b');
  var ReactInstanceHandles = $__require('d');
  var ReactInstanceMap = $__require('40');
  var ReactMarkupChecksum = $__require('e');
  var ReactPerf = $__require('4c');
  var ReactReconciler = $__require('56');
  var ReactUpdateQueue = $__require('60');
  var ReactUpdates = $__require('f');
  var assign = $__require('8');
  var emptyObject = $__require('11');
  var containsNode = $__require('7c');
  var instantiateReactComponent = $__require('10');
  var invariant = $__require('12');
  var setInnerHTML = $__require('62');
  var shouldUpdateReactComponent = $__require('57');
  var validateDOMNesting = $__require('64');
  var warning = $__require('1e');
  var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
  var nodeCache = {};
  var ELEMENT_NODE_TYPE = 1;
  var DOC_NODE_TYPE = 9;
  var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
  var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);
  var instancesByReactRootID = {};
  var containersByReactRootID = {};
  if (process.env.NODE_ENV !== 'production') {
    var rootElementsByReactRootID = {};
  }
  var findComponentRootReusableArray = [];
  function firstDifferenceIndex(string1, string2) {
    var minLen = Math.min(string1.length, string2.length);
    for (var i = 0; i < minLen; i++) {
      if (string1.charAt(i) !== string2.charAt(i)) {
        return i;
      }
    }
    return string1.length === string2.length ? -1 : minLen;
  }
  function getReactRootElementInContainer(container) {
    if (!container) {
      return null;
    }
    if (container.nodeType === DOC_NODE_TYPE) {
      return container.documentElement;
    } else {
      return container.firstChild;
    }
  }
  function getReactRootID(container) {
    var rootElement = getReactRootElementInContainer(container);
    return rootElement && ReactMount.getID(rootElement);
  }
  function getID(node) {
    var id = internalGetID(node);
    if (id) {
      if (nodeCache.hasOwnProperty(id)) {
        var cached = nodeCache[id];
        if (cached !== node) {
          !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;
          nodeCache[id] = node;
        }
      } else {
        nodeCache[id] = node;
      }
    }
    return id;
  }
  function internalGetID(node) {
    return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
  }
  function setID(node, id) {
    var oldID = internalGetID(node);
    if (oldID !== id) {
      delete nodeCache[oldID];
    }
    node.setAttribute(ATTR_NAME, id);
    nodeCache[id] = node;
  }
  function getNode(id) {
    if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
      nodeCache[id] = ReactMount.findReactNodeByID(id);
    }
    return nodeCache[id];
  }
  function getNodeFromInstance(instance) {
    var id = ReactInstanceMap.get(instance)._rootNodeID;
    if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
      return null;
    }
    if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
      nodeCache[id] = ReactMount.findReactNodeByID(id);
    }
    return nodeCache[id];
  }
  function isValid(node, id) {
    if (node) {
      !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;
      var container = ReactMount.findReactContainerForID(id);
      if (container && containsNode(container, node)) {
        return true;
      }
    }
    return false;
  }
  function purgeID(id) {
    delete nodeCache[id];
  }
  var deepestNodeSoFar = null;
  function findDeepestCachedAncestorImpl(ancestorID) {
    var ancestor = nodeCache[ancestorID];
    if (ancestor && isValid(ancestor, ancestorID)) {
      deepestNodeSoFar = ancestor;
    } else {
      return false;
    }
  }
  function findDeepestCachedAncestor(targetID) {
    deepestNodeSoFar = null;
    ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);
    var foundNode = deepestNodeSoFar;
    deepestNodeSoFar = null;
    return foundNode;
  }
  function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
    if (ReactDOMFeatureFlags.useCreateElement) {
      context = assign({}, context);
      if (container.nodeType === DOC_NODE_TYPE) {
        context[ownerDocumentContextKey] = container;
      } else {
        context[ownerDocumentContextKey] = container.ownerDocument;
      }
    }
    if (process.env.NODE_ENV !== 'production') {
      if (context === emptyObject) {
        context = {};
      }
      var tag = container.nodeName.toLowerCase();
      context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
    }
    var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
    componentInstance._renderedComponent._topLevelWrapper = componentInstance;
    ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
  }
  function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
    var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(shouldReuseMarkup);
    transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
    ReactUpdates.ReactReconcileTransaction.release(transaction);
  }
  function unmountComponentFromNode(instance, container) {
    ReactReconciler.unmountComponent(instance);
    if (container.nodeType === DOC_NODE_TYPE) {
      container = container.documentElement;
    }
    while (container.lastChild) {
      container.removeChild(container.lastChild);
    }
  }
  function hasNonRootReactChild(node) {
    var reactRootID = getReactRootID(node);
    return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
  }
  function findFirstReactDOMImpl(node) {
    for (; node && node.parentNode !== node; node = node.parentNode) {
      if (node.nodeType !== 1) {
        continue;
      }
      var nodeID = internalGetID(node);
      if (!nodeID) {
        continue;
      }
      var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
      var current = node;
      var lastID;
      do {
        lastID = internalGetID(current);
        current = current.parentNode;
        if (current == null) {
          return null;
        }
      } while (lastID !== reactRootID);
      if (current === containersByReactRootID[reactRootID]) {
        return node;
      }
    }
    return null;
  }
  var TopLevelWrapper = function() {};
  TopLevelWrapper.prototype.isReactComponent = {};
  if (process.env.NODE_ENV !== 'production') {
    TopLevelWrapper.displayName = 'TopLevelWrapper';
  }
  TopLevelWrapper.prototype.render = function() {
    return this.props;
  };
  var ReactMount = {
    TopLevelWrapper: TopLevelWrapper,
    _instancesByReactRootID: instancesByReactRootID,
    scrollMonitor: function(container, renderCallback) {
      renderCallback();
    },
    _updateRootComponent: function(prevComponent, nextElement, container, callback) {
      ReactMount.scrollMonitor(container, function() {
        ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
        if (callback) {
          ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
        }
      });
      if (process.env.NODE_ENV !== 'production') {
        rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
      }
      return prevComponent;
    },
    _registerComponent: function(nextComponent, container) {
      !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;
      ReactBrowserEventEmitter.ensureScrollValueMonitoring();
      var reactRootID = ReactMount.registerContainer(container);
      instancesByReactRootID[reactRootID] = nextComponent;
      return reactRootID;
    },
    _renderNewRootComponent: function(nextElement, container, shouldReuseMarkup, context) {
      process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;
      var componentInstance = instantiateReactComponent(nextElement, null);
      var reactRootID = ReactMount._registerComponent(componentInstance, container);
      ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);
      if (process.env.NODE_ENV !== 'production') {
        rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
      }
      return componentInstance;
    },
    renderSubtreeIntoContainer: function(parentComponent, nextElement, container, callback) {
      !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
      return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
    },
    _renderSubtreeIntoContainer: function(parentComponent, nextElement, container, callback) {
      !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;
      process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;
      var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);
      var prevComponent = instancesByReactRootID[getReactRootID(container)];
      if (prevComponent) {
        var prevWrappedElement = prevComponent._currentElement;
        var prevElement = prevWrappedElement.props;
        if (shouldUpdateReactComponent(prevElement, nextElement)) {
          var publicInst = prevComponent._renderedComponent.getPublicInstance();
          var updatedCallback = callback && function() {
            callback.call(publicInst);
          };
          ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
          return publicInst;
        } else {
          ReactMount.unmountComponentAtNode(container);
        }
      }
      var reactRootElement = getReactRootElementInContainer(container);
      var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
      var containerHasNonRootReactChild = hasNonRootReactChild(container);
      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;
        if (!containerHasReactMarkup || reactRootElement.nextSibling) {
          var rootElementSibling = reactRootElement;
          while (rootElementSibling) {
            if (internalGetID(rootElementSibling)) {
              process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
              break;
            }
            rootElementSibling = rootElementSibling.nextSibling;
          }
        }
      }
      var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
      var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
      if (callback) {
        callback.call(component);
      }
      return component;
    },
    render: function(nextElement, container, callback) {
      return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
    },
    registerContainer: function(container) {
      var reactRootID = getReactRootID(container);
      if (reactRootID) {
        reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
      }
      if (!reactRootID) {
        reactRootID = ReactInstanceHandles.createReactRootID();
      }
      containersByReactRootID[reactRootID] = container;
      return reactRootID;
    },
    unmountComponentAtNode: function(container) {
      process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;
      !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;
      var reactRootID = getReactRootID(container);
      var component = instancesByReactRootID[reactRootID];
      if (!component) {
        var containerHasNonRootReactChild = hasNonRootReactChild(container);
        var containerID = internalGetID(container);
        var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
        }
        return false;
      }
      ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
      delete instancesByReactRootID[reactRootID];
      delete containersByReactRootID[reactRootID];
      if (process.env.NODE_ENV !== 'production') {
        delete rootElementsByReactRootID[reactRootID];
      }
      return true;
    },
    findReactContainerForID: function(id) {
      var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
      var container = containersByReactRootID[reactRootID];
      if (process.env.NODE_ENV !== 'production') {
        var rootElement = rootElementsByReactRootID[reactRootID];
        if (rootElement && rootElement.parentNode !== container) {
          process.env.NODE_ENV !== 'production' ? warning(internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
          var containerChild = container.firstChild;
          if (containerChild && reactRootID === internalGetID(containerChild)) {
            rootElementsByReactRootID[reactRootID] = containerChild;
          } else {
            process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
          }
        }
      }
      return container;
    },
    findReactNodeByID: function(id) {
      var reactRoot = ReactMount.findReactContainerForID(id);
      return ReactMount.findComponentRoot(reactRoot, id);
    },
    getFirstReactDOM: function(node) {
      return findFirstReactDOMImpl(node);
    },
    findComponentRoot: function(ancestorNode, targetID) {
      var firstChildren = findComponentRootReusableArray;
      var childIndex = 0;
      var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;
      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
      }
      firstChildren[0] = deepestAncestor.firstChild;
      firstChildren.length = 1;
      while (childIndex < firstChildren.length) {
        var child = firstChildren[childIndex++];
        var targetChild;
        while (child) {
          var childID = ReactMount.getID(child);
          if (childID) {
            if (targetID === childID) {
              targetChild = child;
            } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
              firstChildren.length = childIndex = 0;
              firstChildren.push(child.firstChild);
            }
          } else {
            firstChildren.push(child.firstChild);
          }
          child = child.nextSibling;
        }
        if (targetChild) {
          firstChildren.length = 0;
          return targetChild;
        }
      }
      firstChildren.length = 0;
      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
    },
    _mountImageIntoNode: function(markup, container, shouldReuseMarkup, transaction) {
      !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;
      if (shouldReuseMarkup) {
        var rootElement = getReactRootElementInContainer(container);
        if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
          return;
        } else {
          var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
          rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
          var rootMarkup = rootElement.outerHTML;
          rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);
          var normalizedMarkup = markup;
          if (process.env.NODE_ENV !== 'production') {
            var normalizer;
            if (container.nodeType === ELEMENT_NODE_TYPE) {
              normalizer = document.createElement('div');
              normalizer.innerHTML = markup;
              normalizedMarkup = normalizer.innerHTML;
            } else {
              normalizer = document.createElement('iframe');
              document.body.appendChild(normalizer);
              normalizer.contentDocument.write(markup);
              normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
              document.body.removeChild(normalizer);
            }
          }
          var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
          var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);
          !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;
          if (process.env.NODE_ENV !== 'production') {
            process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
          }
        }
      }
      !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
      if (transaction.useCreateElement) {
        while (container.lastChild) {
          container.removeChild(container.lastChild);
        }
        container.appendChild(markup);
      } else {
        setInnerHTML(container, markup);
      }
    },
    ownerDocumentContextKey: ownerDocumentContextKey,
    getReactRootID: getReactRootID,
    getID: getID,
    setID: setID,
    getNode: getNode,
    getNodeFromInstance: getNodeFromInstance,
    isValid: isValid,
    purgeID: purgeID
  };
  ReactPerf.measureMethods(ReactMount, 'ReactMount', {
    _renderNewRootComponent: '_renderNewRootComponent',
    _mountImageIntoNode: '_mountImageIntoNode'
  });
  module.exports = ReactMount;
  return module.exports;
});

$__System.registerDynamic("9e", ["3c", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactMount = $__require('3c');
  module.exports = ReactMount.renderSubtreeIntoContainer;
  return module.exports;
});

$__System.registerDynamic("9", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function makeEmptyFunction(arg) {
    return function() {
      return arg;
    };
  }
  function emptyFunction() {}
  emptyFunction.thatReturns = makeEmptyFunction;
  emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
  emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
  emptyFunction.thatReturnsNull = makeEmptyFunction(null);
  emptyFunction.thatReturnsThis = function() {
    return this;
  };
  emptyFunction.thatReturnsArgument = function(arg) {
    return arg;
  };
  module.exports = emptyFunction;
  return module.exports;
});

$__System.registerDynamic("1e", ["9", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var emptyFunction = $__require('9');
  var warning = emptyFunction;
  if (process.env.NODE_ENV !== 'production') {
    warning = function(condition, format) {
      for (var _len = arguments.length,
          args = Array(_len > 2 ? _len - 2 : 0),
          _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }
      if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
      }
      if (format.indexOf('Failed Composite propType: ') === 0) {
        return;
      }
      if (!condition) {
        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function() {
          return args[argIndex++];
        });
        if (typeof console !== 'undefined') {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {}
      }
    };
  }
  module.exports = warning;
  return module.exports;
});

$__System.registerDynamic("31", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
  var ExecutionEnvironment = {
    canUseDOM: canUseDOM,
    canUseWorkers: typeof Worker !== 'undefined',
    canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
    canUseViewport: canUseDOM && !!window.screen,
    isInWorker: !canUseDOM
  };
  module.exports = ExecutionEnvironment;
  return module.exports;
});

$__System.registerDynamic("27", ["1b", "6e", "14", "d", "3c", "4c", "56", "f", "15", "41", "9e", "1e", "31", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ReactCurrentOwner = $__require('1b');
  var ReactDOMTextComponent = $__require('6e');
  var ReactDefaultInjection = $__require('14');
  var ReactInstanceHandles = $__require('d');
  var ReactMount = $__require('3c');
  var ReactPerf = $__require('4c');
  var ReactReconciler = $__require('56');
  var ReactUpdates = $__require('f');
  var ReactVersion = $__require('15');
  var findDOMNode = $__require('41');
  var renderSubtreeIntoContainer = $__require('9e');
  var warning = $__require('1e');
  ReactDefaultInjection.inject();
  var render = ReactPerf.measure('React', 'render', ReactMount.render);
  var React = {
    findDOMNode: findDOMNode,
    render: render,
    unmountComponentAtNode: ReactMount.unmountComponentAtNode,
    version: ReactVersion,
    unstable_batchedUpdates: ReactUpdates.batchedUpdates,
    unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
  };
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
    __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
      CurrentOwner: ReactCurrentOwner,
      InstanceHandles: ReactInstanceHandles,
      Mount: ReactMount,
      Reconciler: ReactReconciler,
      TextComponent: ReactDOMTextComponent
    });
  }
  if (process.env.NODE_ENV !== 'production') {
    var ExecutionEnvironment = $__require('31');
    if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
          console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');
        }
      }
      var ieCompatibilityMode = document.documentMode && document.documentMode < 8;
      process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : undefined;
      var expectedFeatures = [Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim, Object.create, Object.freeze];
      for (var i = 0; i < expectedFeatures.length; i++) {
        if (!expectedFeatures[i]) {
          console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
          break;
        }
      }
    }
  }
  module.exports = React;
  return module.exports;
});

$__System.registerDynamic("9f", ["27", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = $__require('27');
  return module.exports;
});

$__System.registerDynamic("a0", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  (function(factory) {
    if (typeof define === 'function' && define.amd) {
      define([], factory);
    } else if (typeof exports === 'object') {
      module.exports = factory();
    } else {
      window.typed = factory();
    }
  }(function() {
    function create() {
      function getTypeTest(name) {
        var test;
        for (var i = 0; i < typed.types.length; i++) {
          var entry = typed.types[i];
          if (entry.name === name) {
            test = entry.test;
            break;
          }
        }
        if (!test) {
          var hint;
          for (i = 0; i < typed.types.length; i++) {
            entry = typed.types[i];
            if (entry.name.toLowerCase() == name.toLowerCase()) {
              hint = entry.name;
              break;
            }
          }
          throw new Error('Unknown type "' + name + '"' + (hint ? ('. Did you mean "' + hint + '"?') : ''));
        }
        return test;
      }
      function getName(fns) {
        var name = '';
        for (var i = 0; i < fns.length; i++) {
          var fn = fns[i];
          if (fn.name != '') {
            if (name == '') {
              name = fn.name;
            } else if (name != fn.name) {
              var err = new Error('Function names do not match (expected: ' + name + ', actual: ' + fn.name + ')');
              err.data = {
                actual: fn.name,
                expected: name
              };
              throw err;
            }
          }
        }
        return name;
      }
      function createError(fn, argCount, index, actual, expected) {
        var actualType = getTypeOf(actual);
        var _expected = expected ? expected.split(',') : null;
        var _fn = (fn || 'unnamed');
        var anyType = _expected && contains(_expected, 'any');
        var message;
        var data = {
          fn: fn,
          index: index,
          actual: actual,
          expected: _expected
        };
        if (_expected) {
          if (argCount > index && !anyType) {
            message = 'Unexpected type of argument in function ' + _fn + ' (expected: ' + _expected.join(' or ') + ', actual: ' + actualType + ', index: ' + index + ')';
          } else {
            message = 'Too few arguments in function ' + _fn + ' (expected: ' + _expected.join(' or ') + ', index: ' + index + ')';
          }
        } else {
          message = 'Too many arguments in function ' + _fn + ' (expected: ' + index + ', actual: ' + argCount + ')';
        }
        var err = new TypeError(message);
        err.data = data;
        return err;
      }
      function Refs(name) {
        this.name = name || 'refs';
        this.categories = {};
      }
      Refs.prototype.add = function(fn, category) {
        var cat = category || 'fn';
        if (!this.categories[cat])
          this.categories[cat] = [];
        var index = this.categories[cat].indexOf(fn);
        if (index == -1) {
          index = this.categories[cat].length;
          this.categories[cat].push(fn);
        }
        return cat + index;
      };
      Refs.prototype.toCode = function() {
        var code = [];
        var path = this.name + '.categories';
        var categories = this.categories;
        for (var cat in categories) {
          if (categories.hasOwnProperty(cat)) {
            var category = categories[cat];
            for (var i = 0; i < category.length; i++) {
              code.push('var ' + cat + i + ' = ' + path + '[\'' + cat + '\'][' + i + '];');
            }
          }
        }
        return code.join('\n');
      };
      function Param(types, varArgs) {
        if (typeof types === 'string') {
          var _types = types.trim();
          var _varArgs = _types.substr(0, 3) === '...';
          if (_varArgs) {
            _types = _types.substr(3);
          }
          if (_types === '') {
            this.types = ['any'];
          } else {
            this.types = _types.split('|');
            for (var i = 0; i < this.types.length; i++) {
              this.types[i] = this.types[i].trim();
            }
          }
        } else if (Array.isArray(types)) {
          this.types = types;
        } else if (types instanceof Param) {
          return types.clone();
        } else {
          throw new Error('String or Array expected');
        }
        this.conversions = [];
        this.varArgs = _varArgs || varArgs || false;
        this.anyType = this.types.indexOf('any') !== -1;
      }
      Param.compare = function(a, b) {
        if (a.anyType)
          return 1;
        if (b.anyType)
          return -1;
        if (contains(a.types, 'Object'))
          return 1;
        if (contains(b.types, 'Object'))
          return -1;
        if (a.hasConversions()) {
          if (b.hasConversions()) {
            var i,
                ac,
                bc;
            for (i = 0; i < a.conversions.length; i++) {
              if (a.conversions[i] !== undefined) {
                ac = a.conversions[i];
                break;
              }
            }
            for (i = 0; i < b.conversions.length; i++) {
              if (b.conversions[i] !== undefined) {
                bc = b.conversions[i];
                break;
              }
            }
            return typed.conversions.indexOf(ac) - typed.conversions.indexOf(bc);
          } else {
            return 1;
          }
        } else {
          if (b.hasConversions()) {
            return -1;
          } else {
            var ai,
                bi;
            for (i = 0; i < typed.types.length; i++) {
              if (typed.types[i].name === a.types[0]) {
                ai = i;
                break;
              }
            }
            for (i = 0; i < typed.types.length; i++) {
              if (typed.types[i].name === b.types[0]) {
                bi = i;
                break;
              }
            }
            return ai - bi;
          }
        }
      };
      Param.prototype.overlapping = function(other) {
        for (var i = 0; i < this.types.length; i++) {
          if (contains(other.types, this.types[i])) {
            return true;
          }
        }
        return false;
      };
      Param.prototype.clone = function() {
        var param = new Param(this.types.slice(), this.varArgs);
        param.conversions = this.conversions.slice();
        return param;
      };
      Param.prototype.hasConversions = function() {
        return this.conversions.length > 0;
      };
      Param.prototype.contains = function(types) {
        for (var i = 0; i < this.types.length; i++) {
          if (types[this.types[i]]) {
            return true;
          }
        }
        return false;
      };
      Param.prototype.toString = function(toConversion) {
        var types = [];
        var keys = {};
        for (var i = 0; i < this.types.length; i++) {
          var conversion = this.conversions[i];
          var type = toConversion && conversion ? conversion.to : this.types[i];
          if (!(type in keys)) {
            keys[type] = true;
            types.push(type);
          }
        }
        return (this.varArgs ? '...' : '') + types.join('|');
      };
      function Signature(params, fn) {
        var _params;
        if (typeof params === 'string') {
          _params = (params !== '') ? params.split(',') : [];
        } else if (Array.isArray(params)) {
          _params = params;
        } else {
          throw new Error('string or Array expected');
        }
        this.params = new Array(_params.length);
        for (var i = 0; i < _params.length; i++) {
          var param = new Param(_params[i]);
          this.params[i] = param;
          if (i === _params.length - 1) {
            this.varArgs = param.varArgs;
          } else {
            if (param.varArgs) {
              throw new SyntaxError('Unexpected variable arguments operator "..."');
            }
          }
        }
        this.fn = fn;
      }
      Signature.prototype.clone = function() {
        return new Signature(this.params.slice(), this.fn);
      };
      Signature.prototype.expand = function() {
        var signatures = [];
        function recurse(signature, path) {
          if (path.length < signature.params.length) {
            var i,
                newParam,
                conversion;
            var param = signature.params[path.length];
            if (param.varArgs) {
              newParam = param.clone();
              for (i = 0; i < typed.conversions.length; i++) {
                conversion = typed.conversions[i];
                if (!contains(param.types, conversion.from) && contains(param.types, conversion.to)) {
                  var j = newParam.types.length;
                  newParam.types[j] = conversion.from;
                  newParam.conversions[j] = conversion;
                }
              }
              recurse(signature, path.concat(newParam));
            } else {
              for (i = 0; i < param.types.length; i++) {
                recurse(signature, path.concat(new Param(param.types[i])));
              }
              for (i = 0; i < typed.conversions.length; i++) {
                conversion = typed.conversions[i];
                if (!contains(param.types, conversion.from) && contains(param.types, conversion.to)) {
                  newParam = new Param(conversion.from);
                  newParam.conversions[0] = conversion;
                  recurse(signature, path.concat(newParam));
                }
              }
            }
          } else {
            signatures.push(new Signature(path, signature.fn));
          }
        }
        recurse(this, []);
        return signatures;
      };
      Signature.compare = function(a, b) {
        if (a.params.length > b.params.length)
          return 1;
        if (a.params.length < b.params.length)
          return -1;
        var i;
        var len = a.params.length;
        var ac = 0;
        var bc = 0;
        for (i = 0; i < len; i++) {
          if (a.params[i].hasConversions())
            ac++;
          if (b.params[i].hasConversions())
            bc++;
        }
        if (ac > bc)
          return 1;
        if (ac < bc)
          return -1;
        for (i = 0; i < a.params.length; i++) {
          var cmp = Param.compare(a.params[i], b.params[i]);
          if (cmp !== 0) {
            return cmp;
          }
        }
        return 0;
      };
      Signature.prototype.hasConversions = function() {
        for (var i = 0; i < this.params.length; i++) {
          if (this.params[i].hasConversions()) {
            return true;
          }
        }
        return false;
      };
      Signature.prototype.ignore = function() {
        var types = {};
        for (var i = 0; i < typed.ignore.length; i++) {
          types[typed.ignore[i]] = true;
        }
        for (i = 0; i < this.params.length; i++) {
          if (this.params[i].contains(types)) {
            return true;
          }
        }
        return false;
      };
      Signature.prototype.toCode = function(refs, prefix) {
        var code = [];
        var args = new Array(this.params.length);
        for (var i = 0; i < this.params.length; i++) {
          var param = this.params[i];
          var conversion = param.conversions[0];
          if (param.varArgs) {
            args[i] = 'varArgs';
          } else if (conversion) {
            args[i] = refs.add(conversion.convert, 'convert') + '(arg' + i + ')';
          } else {
            args[i] = 'arg' + i;
          }
        }
        var ref = this.fn ? refs.add(this.fn, 'signature') : undefined;
        if (ref) {
          return prefix + 'return ' + ref + '(' + args.join(', ') + '); // signature: ' + this.params.join(', ');
        }
        return code.join('\n');
      };
      Signature.prototype.toString = function() {
        return this.params.join(', ');
      };
      function Node(path, signature, childs) {
        this.path = path || [];
        this.param = path[path.length - 1] || null;
        this.signature = signature || null;
        this.childs = childs || [];
      }
      Node.prototype.toCode = function(refs, prefix, anyType) {
        var code = [];
        if (this.param) {
          var index = this.path.length - 1;
          var conversion = this.param.conversions[0];
          var comment = '// type: ' + (conversion ? (conversion.from + ' (convert to ' + conversion.to + ')') : this.param);
          if (this.param.varArgs) {
            if (this.param.anyType) {
              code.push(prefix + 'if (arguments.length > ' + index + ') {');
              code.push(prefix + '  var varArgs = [];');
              code.push(prefix + '  for (var i = ' + index + '; i < arguments.length; i++) {');
              code.push(prefix + '    varArgs.push(arguments[i]);');
              code.push(prefix + '  }');
              code.push(this.signature.toCode(refs, prefix + '  '));
              code.push(prefix + '}');
            } else {
              var getTests = function(types, arg) {
                var tests = [];
                for (var i = 0; i < types.length; i++) {
                  tests[i] = refs.add(getTypeTest(types[i]), 'test') + '(' + arg + ')';
                }
                return tests.join(' || ');
              }.bind(this);
              var allTypes = this.param.types;
              var exactTypes = [];
              for (var i = 0; i < allTypes.length; i++) {
                if (this.param.conversions[i] === undefined) {
                  exactTypes.push(allTypes[i]);
                }
              }
              code.push(prefix + 'if (' + getTests(allTypes, 'arg' + index) + ') { ' + comment);
              code.push(prefix + '  var varArgs = [arg' + index + '];');
              code.push(prefix + '  for (var i = ' + (index + 1) + '; i < arguments.length; i++) {');
              code.push(prefix + '    if (' + getTests(exactTypes, 'arguments[i]') + ') {');
              code.push(prefix + '      varArgs.push(arguments[i]);');
              for (var i = 0; i < allTypes.length; i++) {
                var conversion_i = this.param.conversions[i];
                if (conversion_i) {
                  var test = refs.add(getTypeTest(allTypes[i]), 'test');
                  var convert = refs.add(conversion_i.convert, 'convert');
                  code.push(prefix + '    }');
                  code.push(prefix + '    else if (' + test + '(arguments[i])) {');
                  code.push(prefix + '      varArgs.push(' + convert + '(arguments[i]));');
                }
              }
              code.push(prefix + '    } else {');
              code.push(prefix + '      throw createError(name, arguments.length, i, arguments[i], \'' + exactTypes.join(',') + '\');');
              code.push(prefix + '    }');
              code.push(prefix + '  }');
              code.push(this.signature.toCode(refs, prefix + '  '));
              code.push(prefix + '}');
            }
          } else {
            if (this.param.anyType) {
              code.push(prefix + '// type: any');
              code.push(this._innerCode(refs, prefix, anyType));
            } else {
              var type = this.param.types[0];
              var test = type !== 'any' ? refs.add(getTypeTest(type), 'test') : null;
              code.push(prefix + 'if (' + test + '(arg' + index + ')) { ' + comment);
              code.push(this._innerCode(refs, prefix + '  ', anyType));
              code.push(prefix + '}');
            }
          }
        } else {
          code.push(this._innerCode(refs, prefix, anyType));
        }
        return code.join('\n');
      };
      Node.prototype._innerCode = function(refs, prefix, anyType) {
        var code = [];
        var i;
        if (this.signature) {
          code.push(prefix + 'if (arguments.length === ' + this.path.length + ') {');
          code.push(this.signature.toCode(refs, prefix + '  '));
          code.push(prefix + '}');
        }
        var nextAnyType;
        for (i = 0; i < this.childs.length; i++) {
          if (this.childs[i].param.anyType) {
            nextAnyType = this.childs[i];
            break;
          }
        }
        for (i = 0; i < this.childs.length; i++) {
          code.push(this.childs[i].toCode(refs, prefix, nextAnyType));
        }
        if (anyType && !this.param.anyType) {
          code.push(anyType.toCode(refs, prefix, nextAnyType));
        }
        var exceptions = this._exceptions(refs, prefix);
        if (exceptions) {
          code.push(exceptions);
        }
        return code.join('\n');
      };
      Node.prototype._exceptions = function(refs, prefix) {
        var index = this.path.length;
        if (this.childs.length === 0) {
          return [prefix + 'if (arguments.length > ' + index + ') {', prefix + '  throw createError(name, arguments.length, ' + index + ', arguments[' + index + ']);', prefix + '}'].join('\n');
        } else {
          var keys = {};
          var types = [];
          for (var i = 0; i < this.childs.length; i++) {
            var node = this.childs[i];
            if (node.param) {
              for (var j = 0; j < node.param.types.length; j++) {
                var type = node.param.types[j];
                if (!(type in keys) && !node.param.conversions[j]) {
                  keys[type] = true;
                  types.push(type);
                }
              }
            }
          }
          return prefix + 'throw createError(name, arguments.length, ' + index + ', arguments[' + index + '], \'' + types.join(',') + '\');';
        }
      };
      function parseSignatures(rawSignatures) {
        var signature;
        var keys = {};
        var signatures = [];
        var i;
        for (var types in rawSignatures) {
          if (rawSignatures.hasOwnProperty(types)) {
            var fn = rawSignatures[types];
            signature = new Signature(types, fn);
            if (signature.ignore()) {
              continue;
            }
            var expanded = signature.expand();
            for (i = 0; i < expanded.length; i++) {
              var signature_i = expanded[i];
              var key = signature_i.toString();
              var existing = keys[key];
              if (!existing) {
                keys[key] = signature_i;
              } else {
                var cmp = Signature.compare(signature_i, existing);
                if (cmp < 0) {
                  keys[key] = signature_i;
                } else if (cmp === 0) {
                  throw new Error('Signature "' + key + '" is defined twice');
                }
              }
            }
          }
        }
        for (key in keys) {
          if (keys.hasOwnProperty(key)) {
            signatures.push(keys[key]);
          }
        }
        signatures.sort(function(a, b) {
          return Signature.compare(a, b);
        });
        for (i = 0; i < signatures.length; i++) {
          signature = signatures[i];
          if (signature.varArgs) {
            var index = signature.params.length - 1;
            var param = signature.params[index];
            var t = 0;
            while (t < param.types.length) {
              if (param.conversions[t]) {
                var type = param.types[t];
                for (var j = 0; j < signatures.length; j++) {
                  var other = signatures[j];
                  var p = other.params[index];
                  if (other !== signature && p && contains(p.types, type) && !p.conversions[index]) {
                    param.types.splice(t, 1);
                    param.conversions.splice(t, 1);
                    t--;
                    break;
                  }
                }
              }
              t++;
            }
          }
        }
        return signatures;
      }
      function mapSignatures(signatures) {
        var normalized = {};
        for (var i = 0; i < signatures.length; i++) {
          var signature = signatures[i];
          if (signature.fn && !signature.hasConversions()) {
            var params = signature.params.join(',');
            normalized[params] = signature.fn;
          }
        }
        return normalized;
      }
      function parseTree(signatures, path) {
        var i,
            signature;
        var index = path.length;
        var nodeSignature;
        var filtered = [];
        for (i = 0; i < signatures.length; i++) {
          signature = signatures[i];
          if (signature.params.length === index && !nodeSignature) {
            nodeSignature = signature;
          }
          if (signature.params[index] != undefined) {
            filtered.push(signature);
          }
        }
        filtered.sort(function(a, b) {
          return Param.compare(a.params[index], b.params[index]);
        });
        var entries = [];
        for (i = 0; i < filtered.length; i++) {
          signature = filtered[i];
          var param = signature.params[index];
          var existing = entries.filter(function(entry) {
            return entry.param.overlapping(param);
          })[0];
          if (existing) {
            if (existing.param.varArgs) {
              throw new Error('Conflicting types "' + existing.param + '" and "' + param + '"');
            }
            existing.signatures.push(signature);
          } else {
            entries.push({
              param: param,
              signatures: [signature]
            });
          }
        }
        var childs = new Array(entries.length);
        for (i = 0; i < entries.length; i++) {
          var entry = entries[i];
          childs[i] = parseTree(entry.signatures, path.concat(entry.param));
        }
        return new Node(path, nodeSignature, childs);
      }
      function getArgs(count) {
        var args = [];
        for (var i = 0; i < count; i++) {
          args[i] = 'arg' + i;
        }
        return args;
      }
      function _typed(name, signatures) {
        var refs = new Refs();
        var _signatures = parseSignatures(signatures);
        if (_signatures.length == 0) {
          throw new Error('No signatures provided');
        }
        var node = parseTree(_signatures, []);
        var code = [];
        var _name = name || '';
        var _args = getArgs(maxParams(_signatures));
        code.push('function ' + _name + '(' + _args.join(', ') + ') {');
        code.push('  "use strict";');
        code.push('  var name = \'' + _name + '\';');
        code.push(node.toCode(refs, '  '));
        code.push('}');
        var body = [refs.toCode(), 'return ' + code.join('\n')].join('\n');
        var factory = (new Function(refs.name, 'createError', body));
        var fn = factory(refs, createError);
        fn.signatures = mapSignatures(_signatures);
        return fn;
      }
      function maxParams(signatures) {
        var max = 0;
        for (var i = 0; i < signatures.length; i++) {
          var len = signatures[i].params.length;
          if (len > max) {
            max = len;
          }
        }
        return max;
      }
      function getTypeOf(x) {
        var obj;
        for (var i = 0; i < typed.types.length; i++) {
          var entry = typed.types[i];
          if (entry.name === 'Object') {
            obj = entry;
          } else {
            if (entry.test(x))
              return entry.name;
          }
        }
        if (obj && obj.test(x))
          return obj.name;
        return 'unknown';
      }
      function contains(array, entry) {
        return array.indexOf(entry) !== -1;
      }
      var types = [{
        name: 'number',
        test: function(x) {
          return typeof x === 'number';
        }
      }, {
        name: 'string',
        test: function(x) {
          return typeof x === 'string';
        }
      }, {
        name: 'boolean',
        test: function(x) {
          return typeof x === 'boolean';
        }
      }, {
        name: 'Function',
        test: function(x) {
          return typeof x === 'function';
        }
      }, {
        name: 'Array',
        test: Array.isArray
      }, {
        name: 'Date',
        test: function(x) {
          return x instanceof Date;
        }
      }, {
        name: 'RegExp',
        test: function(x) {
          return x instanceof RegExp;
        }
      }, {
        name: 'Object',
        test: function(x) {
          return typeof x === 'object';
        }
      }, {
        name: 'null',
        test: function(x) {
          return x === null;
        }
      }, {
        name: 'undefined',
        test: function(x) {
          return x === undefined;
        }
      }];
      var config = {};
      var conversions = [];
      var ignore = [];
      var typed = {
        config: config,
        types: types,
        conversions: conversions,
        ignore: ignore
      };
      typed = _typed('typed', {
        'Object': function(signatures) {
          var fns = [];
          for (var signature in signatures) {
            if (signatures.hasOwnProperty(signature)) {
              fns.push(signatures[signature]);
            }
          }
          var name = getName(fns);
          return _typed(name, signatures);
        },
        'string, Object': _typed,
        '...Function': function(fns) {
          var err;
          var name = getName(fns);
          var signatures = {};
          for (var i = 0; i < fns.length; i++) {
            var fn = fns[i];
            if (!(typeof fn.signatures === 'object')) {
              err = new TypeError('Function is no typed-function (index: ' + i + ')');
              err.data = {index: i};
              throw err;
            }
            for (var signature in fn.signatures) {
              if (fn.signatures.hasOwnProperty(signature)) {
                if (signatures.hasOwnProperty(signature)) {
                  if (fn.signatures[signature] !== signatures[signature]) {
                    err = new Error('Signature "' + signature + '" is defined twice');
                    err.data = {signature: signature};
                    throw err;
                  }
                } else {
                  signatures[signature] = fn.signatures[signature];
                }
              }
            }
          }
          return _typed(name, signatures);
        }
      });
      function find(fn, signature) {
        if (!fn.signatures) {
          throw new TypeError('Function is no typed-function');
        }
        var arr;
        if (typeof signature === 'string') {
          arr = signature.split(',');
          for (var i = 0; i < arr.length; i++) {
            arr[i] = arr[i].trim();
          }
        } else if (Array.isArray(signature)) {
          arr = signature;
        } else {
          throw new TypeError('String array or a comma separated string expected');
        }
        var str = arr.join(',');
        var match = fn.signatures[str];
        if (match) {
          return match;
        }
        throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + arr.join(', ') + '))');
      }
      function convert(value, type) {
        var from = getTypeOf(value);
        if (type === from) {
          return value;
        }
        for (var i = 0; i < typed.conversions.length; i++) {
          var conversion = typed.conversions[i];
          if (conversion.from === from && conversion.to === type) {
            return conversion.convert(value);
          }
        }
        throw new Error('Cannot convert from ' + from + ' to ' + type);
      }
      typed.config = config;
      typed.types = types;
      typed.conversions = conversions;
      typed.ignore = ignore;
      typed.create = create;
      typed.find = find;
      typed.convert = convert;
      typed.addType = function(type) {
        if (!type || typeof type.name !== 'string' || typeof type.test !== 'function') {
          throw new TypeError('Object with properties {name: string, test: function} expected');
        }
        typed.types.push(type);
      };
      typed.addConversion = function(conversion) {
        if (!conversion || typeof conversion.from !== 'string' || typeof conversion.to !== 'string' || typeof conversion.convert !== 'function') {
          throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');
        }
        typed.conversions.push(conversion);
      };
      return typed;
    }
    return create();
  }));
  return module.exports;
});

$__System.registerDynamic("a1", ["a0", "a2", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var typedFunction = $__require('a0');
  var digits = $__require('a2').digits;
  var createTyped = function() {
    createTyped = typedFunction.create;
    return typedFunction;
  };
  exports.create = function create(type) {
    var typed = createTyped();
    typed.types = [{
      name: 'number',
      test: function(x) {
        return typeof x === 'number';
      }
    }, {
      name: 'Complex',
      test: function(x) {
        return x && x.isComplex;
      }
    }, {
      name: 'BigNumber',
      test: function(x) {
        return x && x.isBigNumber;
      }
    }, {
      name: 'Fraction',
      test: function(x) {
        return x && x.isFraction;
      }
    }, {
      name: 'Unit',
      test: function(x) {
        return x && x.isUnit;
      }
    }, {
      name: 'string',
      test: function(x) {
        return typeof x === 'string';
      }
    }, {
      name: 'Array',
      test: Array.isArray
    }, {
      name: 'Matrix',
      test: function(x) {
        return x && x.isMatrix;
      }
    }, {
      name: 'DenseMatrix',
      test: function(x) {
        return x && x.isDenseMatrix;
      }
    }, {
      name: 'SparseMatrix',
      test: function(x) {
        return x && x.isSparseMatrix;
      }
    }, {
      name: 'ImmutableDenseMatrix',
      test: function(x) {
        return x && x.isImmutableDenseMatrix;
      }
    }, {
      name: 'Range',
      test: function(x) {
        return x && x.isRange;
      }
    }, {
      name: 'Index',
      test: function(x) {
        return x && x.isIndex;
      }
    }, {
      name: 'boolean',
      test: function(x) {
        return typeof x === 'boolean';
      }
    }, {
      name: 'ResultSet',
      test: function(x) {
        return x && x.isResultSet;
      }
    }, {
      name: 'Help',
      test: function(x) {
        return x && x.isHelp;
      }
    }, {
      name: 'function',
      test: function(x) {
        return typeof x === 'function';
      }
    }, {
      name: 'Date',
      test: function(x) {
        return x instanceof Date;
      }
    }, {
      name: 'RegExp',
      test: function(x) {
        return x instanceof RegExp;
      }
    }, {
      name: 'Object',
      test: function(x) {
        return typeof x === 'object';
      }
    }, {
      name: 'null',
      test: function(x) {
        return x === null;
      }
    }, {
      name: 'undefined',
      test: function(x) {
        return x === undefined;
      }
    }];
    typed.conversions = [{
      from: 'number',
      to: 'BigNumber',
      convert: function(x) {
        if (digits(x) > 15) {
          throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' + '(value: ' + x + '). ' + 'Use function bignumber(x) to convert to BigNumber.');
        }
        return new type.BigNumber(x);
      }
    }, {
      from: 'number',
      to: 'Complex',
      convert: function(x) {
        return new type.Complex(x, 0);
      }
    }, {
      from: 'number',
      to: 'string',
      convert: function(x) {
        return x + '';
      }
    }, {
      from: 'BigNumber',
      to: 'Complex',
      convert: function(x) {
        return new type.Complex(x.toNumber(), 0);
      }
    }, {
      from: 'Fraction',
      to: 'Complex',
      convert: function(x) {
        return new type.Complex(x.valueOf(), 0);
      }
    }, {
      from: 'number',
      to: 'Fraction',
      convert: function(x) {
        if (digits(x) > 15) {
          throw new TypeError('Cannot implicitly convert a number with >15 significant digits to Fraction ' + '(value: ' + x + '). ' + 'Use function fraction(x) to convert to Fraction.');
        }
        return new type.Fraction(x);
      }
    }, {
      from: 'string',
      to: 'number',
      convert: function(x) {
        var n = Number(x);
        if (isNaN(n)) {
          throw new Error('Cannot convert "' + x + '" to a number');
        }
        return n;
      }
    }, {
      from: 'boolean',
      to: 'number',
      convert: function(x) {
        return +x;
      }
    }, {
      from: 'boolean',
      to: 'BigNumber',
      convert: function(x) {
        return new type.BigNumber(+x);
      }
    }, {
      from: 'boolean',
      to: 'Fraction',
      convert: function(x) {
        return new type.Fraction(+x);
      }
    }, {
      from: 'boolean',
      to: 'string',
      convert: function(x) {
        return +x;
      }
    }, {
      from: 'null',
      to: 'number',
      convert: function() {
        return 0;
      }
    }, {
      from: 'null',
      to: 'string',
      convert: function() {
        return 'null';
      }
    }, {
      from: 'null',
      to: 'BigNumber',
      convert: function() {
        return new type.BigNumber(0);
      }
    }, {
      from: 'null',
      to: 'Fraction',
      convert: function() {
        return new type.Fraction(0);
      }
    }, {
      from: 'Array',
      to: 'Matrix',
      convert: function(array) {
        return new type.DenseMatrix(array);
      }
    }, {
      from: 'Matrix',
      to: 'Array',
      convert: function(matrix) {
        return matrix.valueOf();
      }
    }];
    return typed;
  };
  return module.exports;
});

$__System.registerDynamic("a3", ["a4", "a5", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var lazy = $__require('a4').lazy;
  var isFactory = $__require('a4').isFactory;
  var traverse = $__require('a4').traverse;
  var extend = $__require('a4').extend;
  var ArgumentsError = $__require('a5');
  function factory(type, config, load, typed, math) {
    function math_import(object, options) {
      var num = arguments.length;
      if (num != 1 && num != 2) {
        throw new ArgumentsError('import', num, 1, 2);
      }
      if (!options) {
        options = {};
      }
      if (isFactory(object)) {
        _importFactory(object, options);
      } else if (Array.isArray(object)) {
        object.forEach(function(entry) {
          math_import(entry, options);
        });
      } else if (typeof object === 'object') {
        for (var name in object) {
          if (object.hasOwnProperty(name)) {
            var value = object[name];
            if (isSupportedType(value)) {
              _import(name, value, options);
            } else if (isFactory(object)) {
              _importFactory(object, options);
            } else {
              math_import(value, options);
            }
          }
        }
      } else {
        if (!options.silent) {
          throw new TypeError('Factory, Object, or Array expected');
        }
      }
    }
    function _import(name, value, options) {
      if (options.wrap && typeof value === 'function') {
        value = _wrap(value);
      }
      if (isTypedFunction(math[name]) && isTypedFunction(value)) {
        if (options.override) {
          value = typed(name, value.signatures);
        } else {
          value = typed(math[name], value);
        }
        math[name] = value;
        _importTransform(name, value);
        math.emit('import', name, function resolver() {
          return value;
        });
        return;
      }
      if (math[name] === undefined || options.override) {
        math[name] = value;
        _importTransform(name, value);
        math.emit('import', name, function resolver() {
          return value;
        });
        return;
      }
      if (!options.silent) {
        throw new Error('Cannot import "' + name + '": already exists');
      }
    }
    function _importTransform(name, value) {
      if (value && typeof value.transform === 'function') {
        math.expression.transform[name] = value.transform;
      }
    }
    function _wrap(fn) {
      var wrapper = function wrapper() {
        var args = [];
        for (var i = 0,
            len = arguments.length; i < len; i++) {
          var arg = arguments[i];
          args[i] = arg && arg.valueOf();
        }
        return fn.apply(math, args);
      };
      if (fn.transform) {
        wrapper.transform = fn.transform;
      }
      return wrapper;
    }
    function _importFactory(factory, options) {
      if (typeof factory.name === 'string') {
        var name = factory.name;
        var namespace = factory.path ? traverse(math, factory.path) : math;
        var existing = namespace.hasOwnProperty(name) ? namespace[name] : undefined;
        var resolver = function() {
          var instance = load(factory);
          if (isTypedFunction(existing) && isTypedFunction(instance)) {
            if (options.override) {} else {
              instance = typed(existing, instance);
            }
            return instance;
          }
          if (existing === undefined || options.override) {
            return instance;
          }
          if (!options.silent) {
            throw new Error('Cannot import "' + name + '": already exists');
          }
        };
        if (factory.lazy !== false) {
          lazy(namespace, name, resolver);
        } else {
          namespace[name] = resolver();
        }
        math.emit('import', name, resolver, factory.path);
      } else {
        load(factory);
      }
    }
    function isSupportedType(object) {
      return typeof object == 'function' || typeof object === 'number' || typeof object === 'string' || typeof object === 'boolean' || object === null || (object && object.isUnit === true) || (object && object.isComplex === true) || (object && object.isBigNumber === true) || (object && object.isFraction === true) || (object && object.isMatrix === true) || (object && Array.isArray(object) === true);
    }
    function isTypedFunction(fn) {
      return typeof fn === 'function' && typeof fn.signatures === 'object';
    }
    return math_import;
  }
  exports.math = true;
  exports.name = 'import';
  exports.factory = factory;
  exports.lazy = true;
  return module.exports;
});

$__System.registerDynamic("a6", ["a4", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var object = $__require('a4');
  function factory(type, config, load, typed, math) {
    var MATRIX = ['Matrix', 'Array'];
    var NUMBER = ['number', 'BigNumber', 'Fraction'];
    function _config(options) {
      if (options) {
        var prev = object.clone(config);
        validateOption(options, 'matrix', MATRIX);
        validateOption(options, 'number', NUMBER);
        object.deepExtend(config, options);
        var curr = object.clone(config);
        math.emit('config', curr, prev);
        return curr;
      } else {
        return object.clone(config);
      }
    }
    _config.MATRIX = MATRIX;
    _config.NUMBER = NUMBER;
    return _config;
  }
  function contains(array, item) {
    return array.indexOf(item) !== -1;
  }
  function findIndex(array, item) {
    return array.map(function(i) {
      return i.toLowerCase();
    }).indexOf(item.toLowerCase());
  }
  function validateOption(options, name, values) {
    if (options[name] !== undefined && !contains(values, options[name])) {
      var index = findIndex(values, options[name]);
      if (index !== -1) {
        console.warn('Warning: Wrong casing for configuration option "' + name + '", should be "' + values[index] + '" instead of "' + options[name] + '".');
        options[name] = values[index];
      } else {
        console.warn('Warning: Unknown value "' + options[name] + '" for configuration option "' + name + '". Available options: ' + values.map(JSON.stringify).join(', ') + '.');
      }
    }
  }
  exports.name = 'config';
  exports.math = true;
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("a7", ["a4", "a1", "a8", "a3", "a6", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var isFactory = $__require('a4').isFactory;
  var deepExtend = $__require('a4').deepExtend;
  var typedFactory = $__require('a1');
  var emitter = $__require('a8');
  var importFactory = $__require('a3');
  var configFactory = $__require('a6');
  exports.create = function create(options) {
    if (typeof Object.create !== 'function') {
      throw new Error('ES5 not supported by this JavaScript engine. ' + 'Please load the es5-shim and es5-sham library for compatibility.');
    }
    var factories = [];
    var instances = [];
    var math = emitter.mixin({});
    math.type = {};
    math.expression = {transform: Object.create(math)};
    math.typed = typedFactory.create(math.type);
    var _config = {
      epsilon: 1e-12,
      matrix: 'Matrix',
      number: 'number',
      precision: 64,
      predictable: false
    };
    function load(factory) {
      if (!isFactory(factory)) {
        throw new Error('Factory object with properties `type`, `name`, and `factory` expected');
      }
      var index = factories.indexOf(factory);
      var instance;
      if (index === -1) {
        if (factory.math === true) {
          instance = factory.factory(math.type, _config, load, math.typed, math);
        } else {
          instance = factory.factory(math.type, _config, load, math.typed);
        }
        factories.push(factory);
        instances.push(instance);
      } else {
        instance = instances[index];
      }
      return instance;
    }
    math['import'] = load(importFactory);
    math['config'] = load(configFactory);
    if (options) {
      math.config(options);
    }
    return math;
  };
  return module.exports;
});

$__System.registerDynamic("a9", ["a7", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = $__require('a7');
  return module.exports;
});

$__System.registerDynamic("aa", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  ;
  (function(globalScope) {
    'use strict';
    var EXP_LIMIT = 9e15,
        MAX_DIGITS = 1e9,
        NUMERALS = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%()*+,-./:;=?@[]^_`{|}~',
        LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',
        PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',
        Decimal = {
          precision: 20,
          rounding: 4,
          modulo: 1,
          toExpNeg: -7,
          toExpPos: 21,
          minE: -EXP_LIMIT,
          maxE: EXP_LIMIT,
          crypto: void 0
        },
        inexact,
        noConflict,
        quadrant,
        cryptoObject = typeof crypto != 'undefined' ? crypto : null,
        external = true,
        decimalError = '[DecimalError] ',
        invalidArgument = decimalError + 'Invalid argument: ',
        precisionLimitExceeded = decimalError + 'Precision limit exceeded',
        mathfloor = Math.floor,
        mathpow = Math.pow,
        isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,
        isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,
        isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,
        isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
        BASE = 1e7,
        LOG_BASE = 7,
        MAX_SAFE_INTEGER = 9007199254740991,
        LN10_PRECISION = LN10.length - 1,
        PI_PRECISION = PI.length - 1,
        P = {};
    P.absoluteValue = P.abs = function() {
      var x = new this.constructor(this);
      if (x.s < 0)
        x.s = 1;
      return finalise(x);
    };
    P.ceil = function() {
      return finalise(new this.constructor(this), this.e + 1, 2);
    };
    P.comparedTo = P.cmp = function(y) {
      var i,
          j,
          xdL,
          ydL,
          x = this,
          xd = x.d,
          yd = (y = new x.constructor(y)).d,
          xs = x.s,
          ys = y.s;
      if (!xd || !yd) {
        return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
      }
      if (!xd[0] || !yd[0])
        return xd[0] ? xs : yd[0] ? -ys : 0;
      if (xs !== ys)
        return xs;
      if (x.e !== y.e)
        return x.e > y.e ^ xs < 0 ? 1 : -1;
      xdL = xd.length;
      ydL = yd.length;
      for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
        if (xd[i] !== yd[i])
          return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;
      }
      return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
    };
    P.cosine = P.cos = function() {
      var pr,
          rm,
          x = this,
          Ctor = x.constructor;
      if (!x.d)
        return new Ctor(NaN);
      if (!x.d[0])
        return new Ctor(1);
      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
      Ctor.rounding = 1;
      x = cosine(Ctor, toLessThanHalfPi(Ctor, x));
      Ctor.precision = pr;
      Ctor.rounding = rm;
      return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
    };
    P.cubeRoot = P.cbrt = function() {
      var e,
          m,
          n,
          r,
          rep,
          s,
          sd,
          t,
          t3,
          t3plusx,
          x = this,
          Ctor = x.constructor;
      if (!x.isFinite() || x.isZero())
        return new Ctor(x);
      external = false;
      s = x.s * Math.pow(x.s * x, 1 / 3);
      if (!s || Math.abs(s) == 1 / 0) {
        n = digitsToString(x.d);
        e = x.e;
        if (s = (e - n.length + 1) % 3)
          n += (s == 1 || s == -2 ? '0' : '00');
        s = Math.pow(n, 1 / 3);
        e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));
        if (s == 1 / 0) {
          n = '5e' + e;
        } else {
          n = s.toExponential();
          n = n.slice(0, n.indexOf('e') + 1) + e;
        }
        r = new Ctor(n);
        r.s = x.s;
      } else {
        r = new Ctor(s.toString());
      }
      sd = (e = Ctor.precision) + 3;
      for (; ; ) {
        t = r;
        t3 = t.times(t).times(t);
        t3plusx = t3.plus(x);
        r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);
        if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
          n = n.slice(sd - 3, sd + 1);
          if (n == '9999' || !rep && n == '4999') {
            if (!rep) {
              finalise(t, e + 1, 0);
              if (t.times(t).times(t).eq(x)) {
                r = t;
                break;
              }
            }
            sd += 4;
            rep = 1;
          } else {
            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
              finalise(r, e + 1, 1);
              m = !r.times(r).times(r).eq(x);
            }
            break;
          }
        }
      }
      external = true;
      return finalise(r, e, Ctor.rounding, m);
    };
    P.decimalPlaces = P.dp = function() {
      var w,
          d = this.d,
          n = NaN;
      if (d) {
        w = d.length - 1;
        n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;
        w = d[w];
        if (w)
          for (; w % 10 == 0; w /= 10)
            n--;
        if (n < 0)
          n = 0;
      }
      return n;
    };
    P.dividedBy = P.div = function(y) {
      return divide(this, new this.constructor(y));
    };
    P.dividedToIntegerBy = P.divToInt = function(y) {
      var x = this,
          Ctor = x.constructor;
      return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
    };
    P.equals = P.eq = function(y) {
      return this.cmp(y) === 0;
    };
    P.floor = function() {
      return finalise(new this.constructor(this), this.e + 1, 3);
    };
    P.greaterThan = P.gt = function(y) {
      return this.cmp(y) > 0;
    };
    P.greaterThanOrEqualTo = P.gte = function(y) {
      var k = this.cmp(y);
      return k == 1 || k === 0;
    };
    P.hyperbolicCosine = P.cosh = function() {
      var k,
          n,
          pr,
          rm,
          len,
          x = this,
          Ctor = x.constructor,
          one = new Ctor(1);
      if (!x.isFinite())
        return new Ctor(x.s ? 1 / 0 : NaN);
      if (x.isZero())
        return one;
      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
      Ctor.rounding = 1;
      len = x.d.length;
      if (len < 32) {
        k = Math.ceil(len / 3);
        n = Math.pow(4, -k).toString();
      } else {
        k = 16;
        n = '2.3283064365386962890625e-10';
      }
      x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);
      var cosh2_x,
          i = k,
          d8 = new Ctor(8);
      for (; i--; ) {
        cosh2_x = x.times(x);
        x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
      }
      return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
    };
    P.hyperbolicSine = P.sinh = function() {
      var k,
          pr,
          rm,
          len,
          x = this,
          Ctor = x.constructor;
      if (!x.isFinite() || x.isZero())
        return new Ctor(x);
      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
      Ctor.rounding = 1;
      len = x.d.length;
      if (len < 3) {
        x = taylorSeries(Ctor, 2, x, x, true);
      } else {
        k = 1.4 * Math.sqrt(len);
        k = k > 16 ? 16 : k | 0;
        x = x.times(Math.pow(5, -k));
        x = taylorSeries(Ctor, 2, x, x, true);
        var sinh2_x,
            d5 = new Ctor(5),
            d16 = new Ctor(16),
            d20 = new Ctor(20);
        for (; k--; ) {
          sinh2_x = x.times(x);
          x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
        }
      }
      Ctor.precision = pr;
      Ctor.rounding = rm;
      return finalise(x, pr, rm, true);
    };
    P.hyperbolicTangent = P.tanh = function() {
      var pr,
          rm,
          x = this,
          Ctor = x.constructor;
      if (!x.isFinite())
        return new Ctor(x.s);
      if (x.isZero())
        return new Ctor(x);
      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + 7;
      Ctor.rounding = 1;
      return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
    };
    P.inverseCosine = P.acos = function() {
      var halfPi,
          x = this,
          Ctor = x.constructor,
          k = x.abs().cmp(1),
          pr = Ctor.precision,
          rm = Ctor.rounding;
      if (k !== -1) {
        return k === 0 ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0) : new Ctor(NaN);
      }
      if (x.isZero())
        return getPi(Ctor, pr + 4, rm).times(0.5);
      Ctor.precision = pr + 6;
      Ctor.rounding = 1;
      x = x.asin();
      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
      Ctor.precision = pr;
      Ctor.rounding = rm;
      return halfPi.minus(x);
    };
    P.inverseHyperbolicCosine = P.acosh = function() {
      var pr,
          rm,
          x = this,
          Ctor = x.constructor;
      if (x.lte(1))
        return new Ctor(x.eq(1) ? 0 : NaN);
      if (!x.isFinite())
        return new Ctor(x);
      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
      Ctor.rounding = 1;
      external = false;
      x = x.times(x).minus(1).sqrt().plus(x);
      external = true;
      Ctor.precision = pr;
      Ctor.rounding = rm;
      return x.ln();
    };
    P.inverseHyperbolicSine = P.asinh = function() {
      var pr,
          rm,
          x = this,
          Ctor = x.constructor;
      if (!x.isFinite() || x.isZero())
        return new Ctor(x);
      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
      Ctor.rounding = 1;
      external = false;
      x = x.times(x).plus(1).sqrt().plus(x);
      external = true;
      Ctor.precision = pr;
      Ctor.rounding = rm;
      return x.ln();
    };
    P.inverseHyperbolicTangent = P.atanh = function() {
      var pr,
          rm,
          wpr,
          xsd,
          x = this,
          Ctor = x.constructor;
      if (!x.isFinite())
        return new Ctor(NaN);
      if (x.e >= 0)
        return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);
      pr = Ctor.precision;
      rm = Ctor.rounding;
      xsd = x.sd();
      if (Math.max(xsd, pr) < 2 * -x.e - 1)
        return finalise(new Ctor(x), pr, rm, true);
      Ctor.precision = wpr = xsd - x.e;
      x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);
      Ctor.precision = pr + 4;
      Ctor.rounding = 1;
      x = x.ln();
      Ctor.precision = pr;
      Ctor.rounding = rm;
      return x.times(0.5);
    };
    P.inverseSine = P.asin = function() {
      var halfPi,
          k,
          pr,
          rm,
          x = this,
          Ctor = x.constructor;
      if (x.isZero())
        return new Ctor(x);
      k = x.abs().cmp(1);
      pr = Ctor.precision;
      rm = Ctor.rounding;
      if (k !== -1) {
        if (k === 0) {
          halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
          halfPi.s = x.s;
          return halfPi;
        }
        return new Ctor(NaN);
      }
      Ctor.precision = pr + 6;
      Ctor.rounding = 1;
      x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();
      Ctor.precision = pr;
      Ctor.rounding = rm;
      return x.times(2);
    };
    P.inverseTangent = P.atan = function() {
      var i,
          j,
          k,
          n,
          px,
          t,
          r,
          wpr,
          x2,
          x = this,
          Ctor = x.constructor,
          pr = Ctor.precision,
          rm = Ctor.rounding;
      if (!x.isFinite()) {
        if (!x.s)
          return new Ctor(NaN);
        if (pr + 4 <= PI_PRECISION) {
          r = getPi(Ctor, pr + 4, rm).times(0.5);
          r.s = x.s;
          return r;
        }
      } else if (x.isZero()) {
        return new Ctor(x);
      } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
        r = getPi(Ctor, pr + 4, rm).times(0.25);
        r.s = x.s;
        return r;
      }
      Ctor.precision = wpr = pr + 10;
      Ctor.rounding = 1;
      k = Math.min(28, wpr / LOG_BASE + 2 | 0);
      for (i = k; i; --i)
        x = x.div(x.times(x).plus(1).sqrt().plus(1));
      external = false;
      j = Math.ceil(wpr / LOG_BASE);
      n = 1;
      x2 = x.times(x);
      r = new Ctor(x);
      px = x;
      for (; i !== -1; ) {
        px = px.times(x2);
        t = r.minus(px.div(n += 2));
        px = px.times(x2);
        r = t.plus(px.div(n += 2));
        if (r.d[j] !== void 0)
          for (i = j; r.d[i] === t.d[i] && i--; )
            ;
      }
      if (k)
        r = r.times(2 << (k - 1));
      external = true;
      return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
    };
    P.isFinite = function() {
      return !!this.d;
    };
    P.isInteger = P.isInt = function() {
      return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
    };
    P.isNaN = function() {
      return !this.s;
    };
    P.isNegative = P.isNeg = function() {
      return this.s < 0;
    };
    P.isPositive = P.isPos = function() {
      return this.s > 0;
    };
    P.isZero = function() {
      return !!this.d && this.d[0] === 0;
    };
    P.lessThan = P.lt = function(y) {
      return this.cmp(y) < 0;
    };
    P.lessThanOrEqualTo = P.lte = function(y) {
      return this.cmp(y) < 1;
    };
    P.logarithm = P.log = function(base) {
      var isBase10,
          d,
          denominator,
          k,
          inf,
          num,
          sd,
          r,
          arg = this,
          Ctor = arg.constructor,
          pr = Ctor.precision,
          rm = Ctor.rounding,
          guard = 5;
      if (base == null) {
        base = new Ctor(10);
        isBase10 = true;
      } else {
        base = new Ctor(base);
        d = base.d;
        if (base.s < 0 || !d || !d[0] || base.eq(1))
          return new Ctor(NaN);
        isBase10 = base.eq(10);
      }
      d = arg.d;
      if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {
        return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);
      }
      if (isBase10) {
        if (d.length > 1) {
          inf = true;
        } else {
          for (k = d[0]; k % 10 === 0; )
            k /= 10;
          inf = k !== 1;
        }
      }
      external = false;
      sd = pr + guard;
      num = naturalLogarithm(arg, sd);
      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
      r = divide(num, denominator, sd, 1);
      if (checkRoundingDigits(r.d, k = pr, rm)) {
        do {
          sd += 10;
          num = naturalLogarithm(arg, sd);
          denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
          r = divide(num, denominator, sd, 1);
          if (!inf) {
            if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {
              r = finalise(r, pr + 1, 0);
            }
            break;
          }
        } while (checkRoundingDigits(r.d, k += 10, rm));
      }
      external = true;
      return finalise(r, pr, rm);
    };
    P.minus = P.sub = function(y) {
      var d,
          e,
          i,
          j,
          k,
          len,
          pr,
          rm,
          xd,
          xe,
          xLTy,
          yd,
          x = this,
          Ctor = x.constructor;
      y = new Ctor(y);
      if (!x.d || !y.d) {
        if (!x.s || !y.s)
          y = new Ctor(NaN);
        else if (x.d)
          y.s = -y.s;
        else
          y = new Ctor(y.d || x.s !== y.s ? x : NaN);
        return y;
      }
      if (x.s != y.s) {
        y.s = -y.s;
        return x.plus(y);
      }
      xd = x.d;
      yd = y.d;
      pr = Ctor.precision;
      rm = Ctor.rounding;
      if (!xd[0] || !yd[0]) {
        if (yd[0])
          y.s = -y.s;
        else if (xd[0])
          y = new Ctor(x);
        else
          return new Ctor(rm === 3 ? -0 : 0);
        return external ? finalise(y, pr, rm) : y;
      }
      e = mathfloor(y.e / LOG_BASE);
      xe = mathfloor(x.e / LOG_BASE);
      xd = xd.slice();
      k = xe - e;
      if (k) {
        xLTy = k < 0;
        if (xLTy) {
          d = xd;
          k = -k;
          len = yd.length;
        } else {
          d = yd;
          e = xe;
          len = xd.length;
        }
        i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;
        if (k > i) {
          k = i;
          d.length = 1;
        }
        d.reverse();
        for (i = k; i--; )
          d.push(0);
        d.reverse();
      } else {
        i = xd.length;
        len = yd.length;
        xLTy = i < len;
        if (xLTy)
          len = i;
        for (i = 0; i < len; i++) {
          if (xd[i] != yd[i]) {
            xLTy = xd[i] < yd[i];
            break;
          }
        }
        k = 0;
      }
      if (xLTy) {
        d = xd;
        xd = yd;
        yd = d;
        y.s = -y.s;
      }
      len = xd.length;
      for (i = yd.length - len; i > 0; --i)
        xd[len++] = 0;
      for (i = yd.length; i > k; ) {
        if (xd[--i] < yd[i]) {
          for (j = i; j && xd[--j] === 0; )
            xd[j] = BASE - 1;
          --xd[j];
          xd[i] += BASE;
        }
        xd[i] -= yd[i];
      }
      for (; xd[--len] === 0; )
        xd.pop();
      for (; xd[0] === 0; xd.shift())
        --e;
      if (!xd[0])
        return new Ctor(rm === 3 ? -0 : 0);
      y.d = xd;
      y.e = getBase10Exponent(xd, e);
      return external ? finalise(y, pr, rm) : y;
    };
    P.modulo = P.mod = function(y) {
      var q,
          x = this,
          Ctor = x.constructor;
      y = new Ctor(y);
      if (!x.d || !y.s || y.d && !y.d[0])
        return new Ctor(NaN);
      if (!y.d || x.d && !x.d[0]) {
        return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
      }
      external = false;
      if (Ctor.modulo == 9) {
        q = divide(x, y.abs(), 0, 3, 1);
        q.s *= y.s;
      } else {
        q = divide(x, y, 0, Ctor.modulo, 1);
      }
      q = q.times(y);
      external = true;
      return x.minus(q);
    };
    P.naturalExponential = P.exp = function() {
      return naturalExponential(this);
    };
    P.naturalLogarithm = P.ln = function() {
      return naturalLogarithm(this);
    };
    P.negated = P.neg = function() {
      var x = new this.constructor(this);
      x.s = -x.s;
      return finalise(x);
    };
    P.plus = P.add = function(y) {
      var carry,
          d,
          e,
          i,
          k,
          len,
          pr,
          rm,
          xd,
          yd,
          x = this,
          Ctor = x.constructor;
      y = new Ctor(y);
      if (!x.d || !y.d) {
        if (!x.s || !y.s)
          y = new Ctor(NaN);
        else if (!x.d)
          y = new Ctor(y.d || x.s === y.s ? x : NaN);
        return y;
      }
      if (x.s != y.s) {
        y.s = -y.s;
        return x.minus(y);
      }
      xd = x.d;
      yd = y.d;
      pr = Ctor.precision;
      rm = Ctor.rounding;
      if (!xd[0] || !yd[0]) {
        if (!yd[0])
          y = new Ctor(x);
        return external ? finalise(y, pr, rm) : y;
      }
      k = mathfloor(x.e / LOG_BASE);
      e = mathfloor(y.e / LOG_BASE);
      xd = xd.slice();
      i = k - e;
      if (i) {
        if (i < 0) {
          d = xd;
          i = -i;
          len = yd.length;
        } else {
          d = yd;
          e = k;
          len = xd.length;
        }
        k = Math.ceil(pr / LOG_BASE);
        len = k > len ? k + 1 : len + 1;
        if (i > len) {
          i = len;
          d.length = 1;
        }
        d.reverse();
        for (; i--; )
          d.push(0);
        d.reverse();
      }
      len = xd.length;
      i = yd.length;
      if (len - i < 0) {
        i = len;
        d = yd;
        yd = xd;
        xd = d;
      }
      for (carry = 0; i; ) {
        carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
        xd[i] %= BASE;
      }
      if (carry) {
        xd.unshift(carry);
        ++e;
      }
      for (len = xd.length; xd[--len] == 0; )
        xd.pop();
      y.d = xd;
      y.e = getBase10Exponent(xd, e);
      return external ? finalise(y, pr, rm) : y;
    };
    P.precision = P.sd = function(z) {
      var k,
          x = this;
      if (z !== void 0 && z !== !!z && z !== 1 && z !== 0)
        throw Error(invalidArgument + z);
      if (x.d) {
        k = getPrecision(x.d);
        if (z && x.e + 1 > k)
          k = x.e + 1;
      } else {
        k = NaN;
      }
      return k;
    };
    P.round = function() {
      var x = this,
          Ctor = x.constructor;
      return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
    };
    P.sine = P.sin = function() {
      var pr,
          rm,
          x = this,
          Ctor = x.constructor;
      if (!x.isFinite())
        return new Ctor(NaN);
      if (x.isZero())
        return new Ctor(x);
      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
      Ctor.rounding = 1;
      x = sine(Ctor, toLessThanHalfPi(Ctor, x));
      Ctor.precision = pr;
      Ctor.rounding = rm;
      return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
    };
    P.squareRoot = P.sqrt = function() {
      var m,
          n,
          sd,
          r,
          rep,
          t,
          x = this,
          d = x.d,
          e = x.e,
          s = x.s,
          Ctor = x.constructor;
      if (s !== 1 || !d || !d[0]) {
        return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
      }
      external = false;
      s = Math.sqrt(+x);
      if (s == 0 || s == 1 / 0) {
        n = digitsToString(d);
        if ((n.length + e) % 2 == 0)
          n += '0';
        s = Math.sqrt(n);
        e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);
        if (s == 1 / 0) {
          n = '1e' + e;
        } else {
          n = s.toExponential();
          n = n.slice(0, n.indexOf('e') + 1) + e;
        }
        r = new Ctor(n);
      } else {
        r = new Ctor(s.toString());
      }
      sd = (e = Ctor.precision) + 3;
      for (; ; ) {
        t = r;
        r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);
        if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
          n = n.slice(sd - 3, sd + 1);
          if (n == '9999' || !rep && n == '4999') {
            if (!rep) {
              finalise(t, e + 1, 0);
              if (t.times(t).eq(x)) {
                r = t;
                break;
              }
            }
            sd += 4;
            rep = 1;
          } else {
            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
              finalise(r, e + 1, 1);
              m = !r.times(r).eq(x);
            }
            break;
          }
        }
      }
      external = true;
      return finalise(r, e, Ctor.rounding, m);
    };
    P.tangent = P.tan = function() {
      var pr,
          rm,
          x = this,
          Ctor = x.constructor;
      if (!x.isFinite())
        return new Ctor(NaN);
      if (x.isZero())
        return new Ctor(x);
      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + 10;
      Ctor.rounding = 1;
      x = x.sin();
      x.s = 1;
      x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);
      Ctor.precision = pr;
      Ctor.rounding = rm;
      return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
    };
    P.times = P.mul = function(y) {
      var carry,
          e,
          i,
          k,
          r,
          rL,
          t,
          xdL,
          ydL,
          x = this,
          Ctor = x.constructor,
          xd = x.d,
          yd = (y = new Ctor(y)).d;
      y.s *= x.s;
      if (!xd || !xd[0] || !yd || !yd[0]) {
        return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd ? NaN : !xd || !yd ? y.s / 0 : y.s * 0);
      }
      e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
      xdL = xd.length;
      ydL = yd.length;
      if (xdL < ydL) {
        r = xd;
        xd = yd;
        yd = r;
        rL = xdL;
        xdL = ydL;
        ydL = rL;
      }
      r = [];
      rL = xdL + ydL;
      for (i = rL; i--; )
        r.push(0);
      for (i = ydL; --i >= 0; ) {
        carry = 0;
        for (k = xdL + i; k > i; ) {
          t = r[k] + yd[i] * xd[k - i - 1] + carry;
          r[k--] = t % BASE | 0;
          carry = t / BASE | 0;
        }
        r[k] = (r[k] + carry) % BASE | 0;
      }
      for (; !r[--rL]; )
        r.pop();
      if (carry)
        ++e;
      else
        r.shift();
      for (i = r.length; !r[--i]; )
        r.pop();
      y.d = r;
      y.e = getBase10Exponent(r, e);
      return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
    };
    P.toBinary = function(sd, rm) {
      return toStringBinary(this, 2, sd, rm);
    };
    P.toDecimalPlaces = P.toDP = function(dp, rm) {
      var x = this,
          Ctor = x.constructor;
      x = new Ctor(x);
      if (dp === void 0)
        return x;
      checkInt32(dp, 0, MAX_DIGITS);
      if (rm === void 0)
        rm = Ctor.rounding;
      else
        checkInt32(rm, 0, 8);
      return finalise(x, dp + x.e + 1, rm);
    };
    P.toExponential = function(dp, rm) {
      var str,
          x = this,
          Ctor = x.constructor;
      if (dp === void 0) {
        str = finiteToString(x, true);
      } else {
        checkInt32(dp, 0, MAX_DIGITS);
        if (rm === void 0)
          rm = Ctor.rounding;
        else
          checkInt32(rm, 0, 8);
        x = finalise(new Ctor(x), dp + 1, rm);
        str = finiteToString(x, true, dp + 1);
      }
      return x.isNeg() && !x.isZero() ? '-' + str : str;
    };
    P.toFixed = function(dp, rm) {
      var str,
          y,
          x = this,
          Ctor = x.constructor;
      if (dp === void 0) {
        str = finiteToString(x);
      } else {
        checkInt32(dp, 0, MAX_DIGITS);
        if (rm === void 0)
          rm = Ctor.rounding;
        else
          checkInt32(rm, 0, 8);
        y = finalise(new Ctor(x), dp + x.e + 1, rm);
        str = finiteToString(y, false, dp + y.e + 1);
      }
      return x.isNeg() && !x.isZero() ? '-' + str : str;
    };
    P.toFraction = function(maxD) {
      var d,
          d0,
          d1,
          d2,
          e,
          k,
          n,
          n0,
          n1,
          pr,
          q,
          r,
          x = this,
          xd = x.d,
          Ctor = x.constructor;
      if (!xd)
        return new Ctor(x);
      n1 = d0 = new Ctor(1);
      d1 = n0 = new Ctor(0);
      d = new Ctor(d1);
      e = d.e = getPrecision(xd) - x.e - 1;
      k = e % LOG_BASE;
      d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);
      if (maxD == null) {
        maxD = e > 0 ? d : n1;
      } else {
        n = new Ctor(maxD);
        if (!n.isInt() || n.lt(n1))
          throw Error(invalidArgument + n);
        maxD = n.gt(d) ? (e > 0 ? d : n1) : n;
      }
      external = false;
      n = new Ctor(digitsToString(xd));
      pr = Ctor.precision;
      Ctor.precision = e = xd.length * LOG_BASE * 2;
      for (; ; ) {
        q = divide(n, d, 0, 1, 1);
        d2 = d0.plus(q.times(d1));
        if (d2.cmp(maxD) == 1)
          break;
        d0 = d1;
        d1 = d2;
        d2 = n1;
        n1 = n0.plus(q.times(d2));
        n0 = d2;
        d2 = d;
        d = n.minus(q.times(d2));
        n = d2;
      }
      d2 = divide(maxD.minus(d0), d1, 0, 1, 1);
      n0 = n0.plus(d2.times(n1));
      d0 = d0.plus(d2.times(d1));
      n0.s = n1.s = x.s;
      r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];
      Ctor.precision = pr;
      external = true;
      return r;
    };
    P.toHexadecimal = P.toHex = function(sd, rm) {
      return toStringBinary(this, 16, sd, rm);
    };
    P.toJSON = function() {
      var arr,
          e,
          i,
          k,
          len,
          n,
          r,
          str,
          x = this,
          isNeg = x.s < 0;
      if (!x.d)
        return NUMERALS.charAt(x.s ? isNeg ? 82 : 83 : 84);
      e = x.e;
      if (x.d.length === 1 && e < 4 && e >= 0) {
        n = x.d[0];
        if (n < 2857) {
          if (n < 41)
            return NUMERALS.charAt(isNeg ? n + 41 : n);
          n -= 41;
          if (isNeg)
            n += 2816;
          k = n / 88 | 0;
          return NUMERALS.charAt(k) + NUMERALS.charAt(n - k * 88);
        }
      }
      str = digitsToString(x.d);
      r = '';
      if (!isNeg && e <= 8 && e >= -7) {
        k = 64 + e + 7;
      } else if (isNeg && e <= 4 && e >= -3) {
        k = 64 + 16 + e + 3;
      } else if (str.length === e + 1) {
        k = 32 * isNeg;
      } else {
        k = 32 * isNeg + 16 * (e < 0);
        e = Math.abs(e);
        if (e < 88) {
          k += 1;
          r = NUMERALS.charAt(e);
        } else if (e < 7744) {
          k += 2;
          n = e / 88 | 0;
          r = NUMERALS.charAt(n) + NUMERALS.charAt(e - n * 88);
        } else {
          arr = convertBase(String(e), 10, 88);
          len = arr.length;
          k += len;
          for (i = 0; i < len; i++)
            r += NUMERALS.charAt(arr[i]);
        }
      }
      r = NUMERALS.charAt(k) + r;
      arr = convertBase(str, 10, 88);
      len = arr.length;
      for (i = 0; i < len; i++)
        r += NUMERALS.charAt(arr[i]);
      return r;
    };
    P.toNearest = function(y, rm) {
      var x = this,
          Ctor = x.constructor;
      x = new Ctor(x);
      if (y == null) {
        if (!x.d)
          return x;
        y = new Ctor(1);
        rm = Ctor.rounding;
      } else {
        y = new Ctor(y);
        if (rm !== void 0)
          checkInt32(rm, 0, 8);
        if (!x.d)
          return y.s ? x : y;
        if (!y.d) {
          if (y.s)
            y.s = x.s;
          return y;
        }
      }
      if (y.d[0]) {
        external = false;
        if (rm < 4)
          rm = [4, 5, 7, 8][rm];
        x = divide(x, y, 0, rm, 1).times(y);
        external = true;
        finalise(x);
      } else {
        y.s = x.s;
        x = y;
      }
      return x;
    };
    P.toNumber = function() {
      return +this;
    };
    P.toOctal = function(sd, rm) {
      return toStringBinary(this, 8, sd, rm);
    };
    P.toPower = P.pow = function(y) {
      var e,
          k,
          pr,
          r,
          rm,
          sign,
          yIsInt,
          x = this,
          Ctor = x.constructor,
          yn = +(y = new Ctor(y));
      if (!x.d || !y.d || !x.d[0] || !y.d[0])
        return new Ctor(mathpow(+x, yn));
      x = new Ctor(x);
      if (x.eq(1))
        return x;
      pr = Ctor.precision;
      rm = Ctor.rounding;
      if (y.eq(1))
        return finalise(x, pr, rm);
      e = mathfloor(y.e / LOG_BASE);
      k = y.d.length - 1;
      yIsInt = e >= k;
      sign = x.s;
      if (!yIsInt) {
        if (sign < 0)
          return new Ctor(NaN);
      } else if ((k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
        r = intPow(Ctor, x, k, pr);
        return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
      }
      sign = sign < 0 && y.d[Math.max(e, k)] & 1 ? -1 : 1;
      k = mathpow(+x, yn);
      e = k == 0 || !isFinite(k) ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1)) : new Ctor(k + '').e;
      if (e > Ctor.maxE + 1 || e < Ctor.minE - 1)
        return new Ctor(e > 0 ? sign / 0 : 0);
      external = false;
      Ctor.rounding = x.s = 1;
      k = Math.min(12, (e + '').length);
      r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);
      r = finalise(r, pr + 5, 1);
      if (checkRoundingDigits(r.d, pr, rm)) {
        e = pr + 10;
        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);
        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {
          r = finalise(r, pr + 1, 0);
        }
      }
      r.s = sign;
      external = true;
      Ctor.rounding = rm;
      return finalise(r, pr, rm);
    };
    P.toPrecision = function(sd, rm) {
      var str,
          x = this,
          Ctor = x.constructor;
      if (sd === void 0) {
        str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
      } else {
        checkInt32(sd, 1, MAX_DIGITS);
        if (rm === void 0)
          rm = Ctor.rounding;
        else
          checkInt32(rm, 0, 8);
        x = finalise(new Ctor(x), sd, rm);
        str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
      }
      return x.isNeg() && !x.isZero() ? '-' + str : str;
    };
    P.toSignificantDigits = P.toSD = function(sd, rm) {
      var x = this,
          Ctor = x.constructor;
      if (sd === void 0) {
        sd = Ctor.precision;
        rm = Ctor.rounding;
      } else {
        checkInt32(sd, 1, MAX_DIGITS);
        if (rm === void 0)
          rm = Ctor.rounding;
        else
          checkInt32(rm, 0, 8);
      }
      return finalise(new Ctor(x), sd, rm);
    };
    P.toString = function() {
      var x = this,
          Ctor = x.constructor,
          str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
      return x.isNeg() && !x.isZero() ? '-' + str : str;
    };
    P.truncated = P.trunc = function() {
      return finalise(new this.constructor(this), this.e + 1, 1);
    };
    P.valueOf = function() {
      var x = this,
          Ctor = x.constructor,
          str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
      return x.isNeg() ? '-' + str : str;
    };
    function digitsToString(d) {
      var i,
          k,
          ws,
          indexOfLastWord = d.length - 1,
          str = '',
          w = d[0];
      if (indexOfLastWord > 0) {
        str += w;
        for (i = 1; i < indexOfLastWord; i++) {
          ws = d[i] + '';
          k = LOG_BASE - ws.length;
          if (k)
            str += getZeroString(k);
          str += ws;
        }
        w = d[i];
        ws = w + '';
        k = LOG_BASE - ws.length;
        if (k)
          str += getZeroString(k);
      } else if (w === 0) {
        return '0';
      }
      for (; w % 10 === 0; )
        w /= 10;
      return str + w;
    }
    function checkInt32(i, min, max) {
      if (i !== ~~i || i < min || i > max) {
        throw Error(invalidArgument + i);
      }
    }
    function checkRoundingDigits(d, i, rm, repeating) {
      var di,
          k,
          r,
          rd;
      for (k = d[0]; k >= 10; k /= 10)
        --i;
      if (--i < 0) {
        i += LOG_BASE;
        di = 0;
      } else {
        di = Math.ceil((i + 1) / LOG_BASE);
        i %= LOG_BASE;
      }
      k = mathpow(10, LOG_BASE - i);
      rd = d[di] % k | 0;
      if (repeating == null) {
        if (i < 3) {
          if (i == 0)
            rd = rd / 100 | 0;
          else if (i == 1)
            rd = rd / 10 | 0;
          r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;
        } else {
          r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 || (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
        }
      } else {
        if (i < 4) {
          if (i == 0)
            rd = rd / 1000 | 0;
          else if (i == 1)
            rd = rd / 100 | 0;
          else if (i == 2)
            rd = rd / 10 | 0;
          r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
        } else {
          r = ((repeating || rm < 4) && rd + 1 == k || (!repeating && rm > 3) && rd + 1 == k / 2) && (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;
        }
      }
      return r;
    }
    function convertBase(str, baseIn, baseOut) {
      var j,
          arr = [0],
          arrL,
          i = 0,
          strL = str.length;
      for (; i < strL; ) {
        for (arrL = arr.length; arrL--; )
          arr[arrL] *= baseIn;
        arr[0] += NUMERALS.indexOf(str.charAt(i++));
        for (j = 0; j < arr.length; j++) {
          if (arr[j] > baseOut - 1) {
            if (arr[j + 1] === void 0)
              arr[j + 1] = 0;
            arr[j + 1] += arr[j] / baseOut | 0;
            arr[j] %= baseOut;
          }
        }
      }
      return arr.reverse();
    }
    function cosine(Ctor, x) {
      var k,
          y,
          len = x.d.length;
      if (len < 32) {
        k = Math.ceil(len / 3);
        y = Math.pow(4, -k).toString();
      } else {
        k = 16;
        y = '2.3283064365386962890625e-10';
      }
      Ctor.precision += k;
      x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));
      for (var i = k; i--; ) {
        var cos2x = x.times(x);
        x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
      }
      Ctor.precision -= k;
      return x;
    }
    var divide = (function() {
      function multiplyInteger(x, k, base) {
        var temp,
            carry = 0,
            i = x.length;
        for (x = x.slice(); i--; ) {
          temp = x[i] * k + carry;
          x[i] = temp % base | 0;
          carry = temp / base | 0;
        }
        if (carry)
          x.unshift(carry);
        return x;
      }
      function compare(a, b, aL, bL) {
        var i,
            r;
        if (aL != bL) {
          r = aL > bL ? 1 : -1;
        } else {
          for (i = r = 0; i < aL; i++) {
            if (a[i] != b[i]) {
              r = a[i] > b[i] ? 1 : -1;
              break;
            }
          }
        }
        return r;
      }
      function subtract(a, b, aL, base) {
        var i = 0;
        for (; aL--; ) {
          a[aL] -= i;
          i = a[aL] < b[aL] ? 1 : 0;
          a[aL] = i * base + a[aL] - b[aL];
        }
        for (; !a[0] && a.length > 1; )
          a.shift();
      }
      return function(x, y, pr, rm, dp, base) {
        var cmp,
            e,
            i,
            k,
            logBase,
            more,
            prod,
            prodL,
            q,
            qd,
            rem,
            remL,
            rem0,
            sd,
            t,
            xi,
            xL,
            yd0,
            yL,
            yz,
            Ctor = x.constructor,
            sign = x.s == y.s ? 1 : -1,
            xd = x.d,
            yd = y.d;
        if (!xd || !xd[0] || !yd || !yd[0]) {
          return new Ctor(!x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN : xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);
        }
        if (base) {
          logBase = 1;
          e = x.e - y.e;
        } else {
          base = BASE;
          logBase = LOG_BASE;
          e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
        }
        yL = yd.length;
        xL = xd.length;
        q = new Ctor(sign);
        qd = q.d = [];
        for (i = 0; yd[i] == (xd[i] || 0); i++)
          ;
        if (yd[i] > (xd[i] || 0))
          e--;
        if (pr == null) {
          sd = pr = Ctor.precision;
          rm = Ctor.rounding;
        } else if (dp) {
          sd = pr + (x.e - y.e) + 1;
        } else {
          sd = pr;
        }
        if (sd < 0) {
          qd.push(1);
          more = true;
        } else {
          sd = sd / logBase + 2 | 0;
          i = 0;
          if (yL == 1) {
            k = 0;
            yd = yd[0];
            sd++;
            for (; (i < xL || k) && sd--; i++) {
              t = k * base + (xd[i] || 0);
              qd[i] = t / yd | 0;
              k = t % yd | 0;
            }
            more = k || i < xL;
          } else {
            k = base / (yd[0] + 1) | 0;
            if (k > 1) {
              yd = multiplyInteger(yd, k, base);
              xd = multiplyInteger(xd, k, base);
              yL = yd.length;
              xL = xd.length;
            }
            xi = yL;
            rem = xd.slice(0, yL);
            remL = rem.length;
            for (; remL < yL; )
              rem[remL++] = 0;
            yz = yd.slice();
            yz.unshift(0);
            yd0 = yd[0];
            if (yd[1] >= base / 2)
              ++yd0;
            do {
              k = 0;
              cmp = compare(yd, rem, yL, remL);
              if (cmp < 0) {
                rem0 = rem[0];
                if (yL != remL)
                  rem0 = rem0 * base + (rem[1] || 0);
                k = rem0 / yd0 | 0;
                if (k > 1) {
                  if (k >= base)
                    k = base - 1;
                  prod = multiplyInteger(yd, k, base);
                  prodL = prod.length;
                  remL = rem.length;
                  cmp = compare(prod, rem, prodL, remL);
                  if (cmp == 1) {
                    k--;
                    subtract(prod, yL < prodL ? yz : yd, prodL, base);
                  }
                } else {
                  if (k == 0)
                    cmp = k = 1;
                  prod = yd.slice();
                }
                prodL = prod.length;
                if (prodL < remL)
                  prod.unshift(0);
                subtract(rem, prod, remL, base);
                if (cmp == -1) {
                  remL = rem.length;
                  cmp = compare(yd, rem, yL, remL);
                  if (cmp < 1) {
                    k++;
                    subtract(rem, yL < remL ? yz : yd, remL, base);
                  }
                }
                remL = rem.length;
              } else if (cmp === 0) {
                k++;
                rem = [0];
              }
              qd[i++] = k;
              if (cmp && rem[0]) {
                rem[remL++] = xd[xi] || 0;
              } else {
                rem = [xd[xi]];
                remL = 1;
              }
            } while ((xi++ < xL || rem[0] !== void 0) && sd--);
            more = rem[0] !== void 0;
          }
          if (!qd[0])
            qd.shift();
        }
        if (logBase == 1) {
          q.e = e;
          inexact = more;
        } else {
          for (i = 1, k = qd[0]; k >= 10; k /= 10)
            i++;
          q.e = i + e * logBase - 1;
          finalise(q, dp ? pr + q.e + 1 : pr, rm, more);
        }
        return q;
      };
    })();
    function finalise(x, sd, rm, isTruncated) {
      var digits,
          i,
          j,
          k,
          rd,
          roundUp,
          w,
          xd,
          xdi,
          Ctor = x.constructor;
      out: if (sd != null) {
        xd = x.d;
        if (!xd)
          return x;
        for (digits = 1, k = xd[0]; k >= 10; k /= 10)
          digits++;
        i = sd - digits;
        if (i < 0) {
          i += LOG_BASE;
          j = sd;
          w = xd[xdi = 0];
          rd = w / mathpow(10, digits - j - 1) % 10 | 0;
        } else {
          xdi = Math.ceil((i + 1) / LOG_BASE);
          k = xd.length;
          if (xdi >= k) {
            if (isTruncated) {
              for (; k++ <= xdi; )
                xd.push(0);
              w = rd = 0;
              digits = 1;
              i %= LOG_BASE;
              j = i - LOG_BASE + 1;
            } else {
              break out;
            }
          } else {
            w = k = xd[xdi];
            for (digits = 1; k >= 10; k /= 10)
              digits++;
            i %= LOG_BASE;
            j = i - LOG_BASE + digits;
            rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
          }
        }
        isTruncated = isTruncated || sd < 0 || xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));
        roundUp = rm < 4 ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 && ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 || rm == (x.s < 0 ? 8 : 7));
        if (sd < 1 || !xd[0]) {
          xd.length = 0;
          if (roundUp) {
            sd -= x.e + 1;
            xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
            x.e = -sd || 0;
          } else {
            xd[0] = x.e = 0;
          }
          return x;
        }
        if (i == 0) {
          xd.length = xdi;
          k = 1;
          xdi--;
        } else {
          xd.length = xdi + 1;
          k = mathpow(10, LOG_BASE - i);
          xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
        }
        if (roundUp) {
          for (; ; ) {
            if (xdi == 0) {
              for (i = 1, j = xd[0]; j >= 10; j /= 10)
                i++;
              j = xd[0] += k;
              for (k = 1; j >= 10; j /= 10)
                k++;
              if (i != k) {
                x.e++;
                if (xd[0] == BASE)
                  xd[0] = 1;
              }
              break;
            } else {
              xd[xdi] += k;
              if (xd[xdi] != BASE)
                break;
              xd[xdi--] = 0;
              k = 1;
            }
          }
        }
        for (i = xd.length; xd[--i] === 0; )
          xd.pop();
      }
      if (external) {
        if (x.e > Ctor.maxE) {
          x.d = null;
          x.e = NaN;
        } else if (x.e < Ctor.minE) {
          x.e = 0;
          x.d = [0];
        }
      }
      return x;
    }
    function finiteToString(x, isExp, sd) {
      if (!x.isFinite())
        return nonFiniteToString(x);
      var k,
          e = x.e,
          str = digitsToString(x.d),
          len = str.length;
      if (isExp) {
        if (sd && (k = sd - len) > 0) {
          str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);
        } else if (len > 1) {
          str = str.charAt(0) + '.' + str.slice(1);
        }
        str = str + (x.e < 0 ? 'e' : 'e+') + x.e;
      } else if (e < 0) {
        str = '0.' + getZeroString(-e - 1) + str;
        if (sd && (k = sd - len) > 0)
          str += getZeroString(k);
      } else if (e >= len) {
        str += getZeroString(e + 1 - len);
        if (sd && (k = sd - e - 1) > 0)
          str = str + '.' + getZeroString(k);
      } else {
        if ((k = e + 1) < len)
          str = str.slice(0, k) + '.' + str.slice(k);
        if (sd && (k = sd - len) > 0) {
          if (e + 1 === len)
            str += '.';
          str += getZeroString(k);
        }
      }
      return str;
    }
    function getBase10Exponent(digits, e) {
      for (var i = 1,
          w = digits[0]; w >= 10; w /= 10)
        i++;
      return i + e * LOG_BASE - 1;
    }
    function getLn10(Ctor, sd, pr) {
      if (sd > LN10_PRECISION) {
        external = true;
        if (pr)
          Ctor.precision = pr;
        throw Error(precisionLimitExceeded);
      }
      return finalise(new Ctor(LN10), sd, 1, true);
    }
    function getPi(Ctor, sd, rm) {
      if (sd > PI_PRECISION)
        throw Error(precisionLimitExceeded);
      return finalise(new Ctor(PI), sd, rm, true);
    }
    function getPrecision(digits) {
      var w = digits.length - 1,
          len = w * LOG_BASE + 1;
      w = digits[w];
      if (w) {
        for (; w % 10 == 0; w /= 10)
          len--;
        for (w = digits[0]; w >= 10; w /= 10)
          len++;
      }
      return len;
    }
    function getZeroString(k) {
      var zs = '';
      for (; k--; )
        zs += '0';
      return zs;
    }
    function intPow(Ctor, x, n, pr) {
      var isTruncated,
          r = new Ctor(1),
          k = Math.ceil(pr / LOG_BASE + 4);
      external = false;
      for (; ; ) {
        if (n % 2) {
          r = r.times(x);
          if (truncate(r.d, k))
            isTruncated = true;
        }
        n = mathfloor(n / 2);
        if (n === 0) {
          n = r.d.length - 1;
          if (isTruncated && r.d[n] === 0)
            ++r.d[n];
          break;
        }
        x = x.times(x);
        truncate(x.d, k);
      }
      external = true;
      return r;
    }
    function isOdd(n) {
      return n.d[n.d.length - 1] & 1;
    }
    function maxOrMin(Ctor, args, ltgt) {
      var y,
          x = new Ctor(args[0]),
          i = 0;
      for (; ++i < args.length; ) {
        y = new Ctor(args[i]);
        if (!y.s) {
          x = y;
          break;
        } else if (x[ltgt](y)) {
          x = y;
        }
      }
      return x;
    }
    function naturalExponential(x, sd) {
      var denominator,
          guard,
          j,
          pow,
          sum,
          t,
          wpr,
          rep = 0,
          i = 0,
          k = 0,
          Ctor = x.constructor,
          rm = Ctor.rounding,
          pr = Ctor.precision;
      if (!x.d || !x.d[0] || x.e > 17) {
        return new Ctor(x.d ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0 : x.s ? x.s < 0 ? 0 : x : 0 / 0);
      }
      if (sd == null) {
        external = false;
        wpr = pr;
      } else {
        wpr = sd;
      }
      t = new Ctor(0.03125);
      while (x.e > -2) {
        x = x.times(t);
        k += 5;
      }
      guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
      wpr += guard;
      denominator = pow = sum = new Ctor(1);
      Ctor.precision = wpr;
      for (; ; ) {
        pow = finalise(pow.times(x), wpr, 1);
        denominator = denominator.times(++i);
        t = sum.plus(divide(pow, denominator, wpr, 1));
        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
          j = k;
          while (j--)
            sum = finalise(sum.times(sum), wpr, 1);
          if (sd == null) {
            if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
              Ctor.precision = wpr += 10;
              denominator = pow = t = new Ctor(1);
              i = 0;
              rep++;
            } else {
              return finalise(sum, Ctor.precision = pr, rm, external = true);
            }
          } else {
            Ctor.precision = pr;
            return sum;
          }
        }
        sum = t;
      }
    }
    function naturalLogarithm(y, sd) {
      var c,
          c0,
          denominator,
          e,
          numerator,
          rep,
          sum,
          t,
          wpr,
          x1,
          x2,
          n = 1,
          guard = 10,
          x = y,
          xd = x.d,
          Ctor = x.constructor,
          rm = Ctor.rounding,
          pr = Ctor.precision;
      if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {
        return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
      }
      if (sd == null) {
        external = false;
        wpr = pr;
      } else {
        wpr = sd;
      }
      Ctor.precision = wpr += guard;
      c = digitsToString(xd);
      c0 = c.charAt(0);
      if (Math.abs(e = x.e) < 1.5e15) {
        while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
          x = x.times(y);
          c = digitsToString(x.d);
          c0 = c.charAt(0);
          n++;
        }
        e = x.e;
        if (c0 > 1) {
          x = new Ctor('0.' + c);
          e++;
        } else {
          x = new Ctor(c0 + '.' + c.slice(1));
        }
      } else {
        t = getLn10(Ctor, wpr + 2, pr).times(e + '');
        x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);
        Ctor.precision = pr;
        return sd == null ? finalise(x, pr, rm, external = true) : x;
      }
      x1 = x;
      sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);
      x2 = finalise(x.times(x), wpr, 1);
      denominator = 3;
      for (; ; ) {
        numerator = finalise(numerator.times(x2), wpr, 1);
        t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));
        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
          sum = sum.times(2);
          if (e !== 0)
            sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));
          sum = divide(sum, new Ctor(n), wpr, 1);
          if (sd == null) {
            if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
              Ctor.precision = wpr += guard;
              t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);
              x2 = finalise(x.times(x), wpr, 1);
              denominator = rep = 1;
            } else {
              return finalise(sum, Ctor.precision = pr, rm, external = true);
            }
          } else {
            Ctor.precision = pr;
            return sum;
          }
        }
        sum = t;
        denominator += 2;
      }
    }
    function nonFiniteToString(x) {
      return String(x.s * x.s / 0);
    }
    function parseDecimal(x, str) {
      var e,
          i,
          len;
      if ((e = str.indexOf('.')) > -1)
        str = str.replace('.', '');
      if ((i = str.search(/e/i)) > 0) {
        if (e < 0)
          e = i;
        e += +str.slice(i + 1);
        str = str.substring(0, i);
      } else if (e < 0) {
        e = str.length;
      }
      for (i = 0; str.charCodeAt(i) === 48; i++)
        ;
      for (len = str.length; str.charCodeAt(len - 1) === 48; --len)
        ;
      str = str.slice(i, len);
      if (str) {
        len -= i;
        x.e = e = e - i - 1;
        x.d = [];
        i = (e + 1) % LOG_BASE;
        if (e < 0)
          i += LOG_BASE;
        if (i < len) {
          if (i)
            x.d.push(+str.slice(0, i));
          for (len -= LOG_BASE; i < len; )
            x.d.push(+str.slice(i, i += LOG_BASE));
          str = str.slice(i);
          i = LOG_BASE - str.length;
        } else {
          i -= len;
        }
        for (; i--; )
          str += '0';
        x.d.push(+str);
        if (external) {
          if (x.e > x.constructor.maxE) {
            x.d = null;
            x.e = NaN;
          } else if (x.e < x.constructor.minE) {
            x.e = 0;
            x.d = [0];
          }
        }
      } else {
        x.e = 0;
        x.d = [0];
      }
      return x;
    }
    function parseOther(x, str) {
      var base,
          Ctor,
          divisor,
          i,
          isFloat,
          len,
          p,
          xd,
          xe;
      if (str === 'Infinity' || str === 'NaN') {
        if (!+str)
          x.s = NaN;
        x.e = NaN;
        x.d = null;
        return x;
      }
      if (isHex.test(str)) {
        base = 16;
        str = str.toLowerCase();
      } else if (isBinary.test(str)) {
        base = 2;
      } else if (isOctal.test(str)) {
        base = 8;
      } else {
        throw Error(invalidArgument + str);
      }
      i = str.search(/p/i);
      if (i > 0) {
        p = +str.slice(i + 1);
        str = str.substring(2, i);
      } else {
        str = str.slice(2);
      }
      i = str.indexOf('.');
      isFloat = i >= 0;
      Ctor = x.constructor;
      if (isFloat) {
        str = str.replace('.', '');
        len = str.length;
        i = len - i;
        divisor = intPow(Ctor, new Ctor(base), i, i * 2);
      }
      xd = convertBase(str, base, BASE);
      xe = xd.length - 1;
      for (i = xe; xd[i] === 0; --i)
        xd.pop();
      if (i < 0)
        return new Ctor(x.s * 0);
      x.e = getBase10Exponent(xd, xe);
      x.d = xd;
      external = false;
      if (isFloat)
        x = divide(x, divisor, len * 4);
      if (p)
        x = x.times(Math.abs(p) < 54 ? Math.pow(2, p) : Decimal.pow(2, p));
      external = true;
      return x;
    }
    function sine(Ctor, x) {
      var k,
          len = x.d.length;
      if (len < 3)
        return taylorSeries(Ctor, 2, x, x);
      k = 1.4 * Math.sqrt(len);
      k = k > 16 ? 16 : k | 0;
      x = x.times(Math.pow(5, -k));
      x = taylorSeries(Ctor, 2, x, x);
      var sin2_x,
          d5 = new Ctor(5),
          d16 = new Ctor(16),
          d20 = new Ctor(20);
      for (; k--; ) {
        sin2_x = x.times(x);
        x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
      }
      return x;
    }
    function taylorSeries(Ctor, n, x, y, isHyperbolic) {
      var j,
          t,
          u,
          x2,
          i = 1,
          pr = Ctor.precision,
          k = Math.ceil(pr / LOG_BASE);
      external = false;
      x2 = x.times(x);
      u = new Ctor(y);
      for (; ; ) {
        t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);
        u = isHyperbolic ? y.plus(t) : y.minus(t);
        y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);
        t = u.plus(y);
        if (t.d[k] !== void 0) {
          for (j = k; t.d[j] === u.d[j] && j--; )
            ;
          if (j == -1)
            break;
        }
        j = u;
        u = y;
        y = t;
        t = j;
        i++;
      }
      external = true;
      t.d.length = k + 1;
      return t;
    }
    function toLessThanHalfPi(Ctor, x) {
      var t,
          isNeg = x.s < 0,
          pi = getPi(Ctor, Ctor.precision, 1),
          halfPi = pi.times(0.5);
      x = x.abs();
      if (x.lte(halfPi)) {
        quadrant = isNeg ? 4 : 1;
        return x;
      }
      t = x.divToInt(pi);
      if (t.isZero()) {
        quadrant = isNeg ? 3 : 2;
      } else {
        x = x.minus(t.times(pi));
        if (x.lte(halfPi)) {
          quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);
          return x;
        }
        quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);
      }
      return x.minus(pi).abs();
    }
    function toStringBinary(x, baseOut, sd, rm) {
      var base,
          e,
          i,
          k,
          len,
          roundUp,
          str,
          xd,
          y,
          Ctor = x.constructor,
          isExp = sd !== void 0;
      if (isExp) {
        checkInt32(sd, 1, MAX_DIGITS);
        if (rm === void 0)
          rm = Ctor.rounding;
        else
          checkInt32(rm, 0, 8);
      } else {
        sd = Ctor.precision;
        rm = Ctor.rounding;
      }
      if (!x.isFinite()) {
        str = nonFiniteToString(x);
      } else {
        str = finiteToString(x);
        i = str.indexOf('.');
        if (isExp) {
          base = 2;
          if (baseOut == 16) {
            sd = sd * 4 - 3;
          } else if (baseOut == 8) {
            sd = sd * 3 - 2;
          }
        } else {
          base = baseOut;
        }
        if (i >= 0) {
          str = str.replace('.', '');
          y = new Ctor(1);
          y.e = str.length - i;
          y.d = convertBase(finiteToString(y), 10, base);
          y.e = y.d.length;
        }
        xd = convertBase(str, 10, base);
        e = len = xd.length;
        for (; xd[--len] == 0; )
          xd.pop();
        if (!xd[0]) {
          str = isExp ? '0p+0' : '0';
        } else {
          if (i < 0) {
            e--;
          } else {
            x = new Ctor(x);
            x.d = xd;
            x.e = e;
            x = divide(x, y, sd, rm, 0, base);
            xd = x.d;
            e = x.e;
            roundUp = inexact;
          }
          i = xd[sd];
          k = base / 2;
          roundUp = roundUp || xd[sd + 1] !== void 0;
          roundUp = rm < 4 ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2)) : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 || rm === (x.s < 0 ? 8 : 7));
          xd.length = sd;
          if (roundUp) {
            for (; ++xd[--sd] > base - 1; ) {
              xd[sd] = 0;
              if (!sd) {
                ++e;
                xd.unshift(1);
              }
            }
          }
          for (len = xd.length; !xd[len - 1]; --len)
            ;
          for (i = 0, str = ''; i < len; i++)
            str += NUMERALS.charAt(xd[i]);
          if (isExp) {
            if (len > 1) {
              if (baseOut == 16 || baseOut == 8) {
                i = baseOut == 16 ? 4 : 3;
                for (--len; len % i; len++)
                  str += '0';
                xd = convertBase(str, base, baseOut);
                for (len = xd.length; !xd[len - 1]; --len)
                  ;
                for (i = 1, str = '1.'; i < len; i++)
                  str += NUMERALS.charAt(xd[i]);
              } else {
                str = str.charAt(0) + '.' + str.slice(1);
              }
            }
            str = str + (e < 0 ? 'p' : 'p+') + e;
          } else if (e < 0) {
            for (; ++e; )
              str = '0' + str;
            str = '0.' + str;
          } else {
            if (++e > len)
              for (e -= len; e--; )
                str += '0';
            else if (e < len)
              str = str.slice(0, e) + '.' + str.slice(e);
          }
        }
        str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;
      }
      return x.s < 0 ? '-' + str : str;
    }
    function truncate(arr, len) {
      if (arr.length > len) {
        arr.length = len;
        return true;
      }
    }
    function abs(x) {
      return new this(x).abs();
    }
    function acos(x) {
      return new this(x).acos();
    }
    function acosh(x) {
      return new this(x).acosh();
    }
    function add(x, y) {
      return new this(x).plus(y);
    }
    function asin(x) {
      return new this(x).asin();
    }
    function asinh(x) {
      return new this(x).asinh();
    }
    function atan(x) {
      return new this(x).atan();
    }
    function atanh(x) {
      return new this(x).atanh();
    }
    function atan2(y, x) {
      y = new this(y);
      x = new this(x);
      var r,
          pr = this.precision,
          rm = this.rounding,
          wpr = pr + 4;
      if (!y.s || !x.s) {
        r = new this(NaN);
      } else if (!y.d && !x.d) {
        r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
        r.s = y.s;
      } else if (!x.d || y.isZero()) {
        r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
        r.s = y.s;
      } else if (!y.d || x.isZero()) {
        r = getPi(this, wpr, 1).times(0.5);
        r.s = y.s;
      } else if (x.s < 0) {
        this.precision = wpr;
        this.rounding = 1;
        r = this.atan(divide(y, x, wpr, 1));
        x = getPi(this, wpr, 1);
        this.precision = pr;
        this.rounding = rm;
        r = y.s < 0 ? r.minus(x) : r.plus(x);
      } else {
        r = this.atan(divide(y, x, wpr, 1));
      }
      return r;
    }
    function cbrt(x) {
      return new this(x).cbrt();
    }
    function ceil(x) {
      return finalise(x = new this(x), x.e + 1, 2);
    }
    function config(obj) {
      if (!obj || typeof obj !== 'object')
        throw Error(decimalError + 'Object expected');
      var i,
          p,
          v,
          ps = ['precision', 1, MAX_DIGITS, 'rounding', 0, 8, 'toExpNeg', -EXP_LIMIT, 0, 'toExpPos', 0, EXP_LIMIT, 'maxE', 0, EXP_LIMIT, 'minE', -EXP_LIMIT, 0, 'modulo', 0, 9];
      for (i = 0; i < ps.length; i += 3) {
        if ((v = obj[p = ps[i]]) !== void 0) {
          if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2])
            this[p] = v;
          else
            throw Error(invalidArgument + p + ': ' + v);
        }
      }
      if (obj.hasOwnProperty(p = 'crypto')) {
        if ((v = obj[p]) === void 0) {
          this[p] = v;
        } else if (v === true || v === false || v === 0 || v === 1) {
          this[p] = !!(v && cryptoObject && (cryptoObject.getRandomValues || cryptoObject.randomBytes));
        } else {
          throw Error(invalidArgument + p + ': ' + v);
        }
      }
      return this;
    }
    function cos(x) {
      return new this(x).cos();
    }
    function cosh(x) {
      return new this(x).cosh();
    }
    function clone(obj) {
      var i,
          p,
          ps;
      function Decimal(v) {
        var e,
            i,
            t,
            x = this;
        if (!(x instanceof Decimal))
          return new Decimal(v);
        x.constructor = Decimal;
        if (v instanceof Decimal) {
          x.s = v.s;
          x.e = v.e;
          x.d = (v = v.d) ? v.slice() : v;
          return;
        }
        t = typeof v;
        if (t === 'number') {
          if (v === 0) {
            x.s = 1 / v < 0 ? -1 : 1;
            x.e = 0;
            x.d = [0];
            return;
          }
          if (v < 0) {
            v = -v;
            x.s = -1;
          } else {
            x.s = 1;
          }
          if (v === ~~v && v < 1e7) {
            for (e = 0, i = v; i >= 10; i /= 10)
              e++;
            x.e = e;
            x.d = [v];
            return;
          } else if (v * 0 !== 0) {
            if (!v)
              x.s = NaN;
            x.e = NaN;
            x.d = null;
            return;
          }
          return parseDecimal(x, v.toString());
        } else if (t !== 'string') {
          throw Error(invalidArgument + v);
        }
        if (v.charCodeAt(0) === 45) {
          v = v.slice(1);
          x.s = -1;
        } else {
          x.s = 1;
        }
        return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
      }
      Decimal.prototype = P;
      Decimal.ROUND_UP = 0;
      Decimal.ROUND_DOWN = 1;
      Decimal.ROUND_CEIL = 2;
      Decimal.ROUND_FLOOR = 3;
      Decimal.ROUND_HALF_UP = 4;
      Decimal.ROUND_HALF_DOWN = 5;
      Decimal.ROUND_HALF_EVEN = 6;
      Decimal.ROUND_HALF_CEIL = 7;
      Decimal.ROUND_HALF_FLOOR = 8;
      Decimal.EUCLID = 9;
      Decimal.config = config;
      Decimal.clone = clone;
      Decimal.abs = abs;
      Decimal.acos = acos;
      Decimal.acosh = acosh;
      Decimal.add = add;
      Decimal.asin = asin;
      Decimal.asinh = asinh;
      Decimal.atan = atan;
      Decimal.atanh = atanh;
      Decimal.atan2 = atan2;
      Decimal.cbrt = cbrt;
      Decimal.ceil = ceil;
      Decimal.cos = cos;
      Decimal.cosh = cosh;
      Decimal.div = div;
      Decimal.exp = exp;
      Decimal.floor = floor;
      Decimal.fromJSON = fromJSON;
      Decimal.hypot = hypot;
      Decimal.ln = ln;
      Decimal.log = log;
      Decimal.log10 = log10;
      Decimal.log2 = log2;
      Decimal.max = max;
      Decimal.min = min;
      Decimal.mod = mod;
      Decimal.mul = mul;
      Decimal.pow = pow;
      Decimal.random = random;
      Decimal.round = round;
      Decimal.sign = sign;
      Decimal.sin = sin;
      Decimal.sinh = sinh;
      Decimal.sqrt = sqrt;
      Decimal.sub = sub;
      Decimal.tan = tan;
      Decimal.tanh = tanh;
      Decimal.trunc = trunc;
      if (obj === void 0)
        obj = {};
      if (obj) {
        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];
        for (i = 0; i < ps.length; )
          if (!obj.hasOwnProperty(p = ps[i++]))
            obj[p] = this[p];
      }
      Decimal.config(obj);
      return Decimal;
    }
    function div(x, y) {
      return new this(x).div(y);
    }
    function exp(x) {
      return new this(x).exp();
    }
    function floor(x) {
      return finalise(x = new this(x), x.e + 1, 3);
    }
    function fromJSON(str) {
      var e,
          isNeg,
          k,
          n;
      if (typeof str !== 'string' || !str)
        throw Error(invalidArgument + str);
      k = str.length;
      n = NUMERALS.indexOf(str.charAt(0));
      if (k === 1) {
        return new this(n > 81 ? [-1 / 0, 1 / 0, 0 / 0][n - 82] : n > 40 ? -(n - 41) : n);
      } else if (n & 64) {
        isNeg = n & 16;
        e = isNeg ? (n & 7) - 3 : (n & 15) - 7;
        k = 1;
      } else if (k === 2) {
        n = n * 88 + NUMERALS.indexOf(str.charAt(1));
        return new this(n >= 2816 ? -(n - 2816) - 41 : n + 41);
      } else {
        isNeg = n & 32;
        if (n & 31) {
          e = n & 15;
          k = e + 1;
          if (e === 1) {
            e = NUMERALS.indexOf(str.charAt(1));
          } else if (e === 2) {
            e = NUMERALS.indexOf(str.charAt(1)) * 88 + NUMERALS.indexOf(str.charAt(2));
          } else {
            e = +convertBase(str.slice(1, k), 88, 10).join('');
          }
          if (n & 16)
            e = -e;
        } else {
          str = convertBase(str.slice(1), 88, 10).join('');
          return new this(isNeg ? '-' + str : str);
        }
      }
      str = convertBase(str.slice(k), 88, 10).join('');
      e = e - str.length + 1;
      str = str + 'e' + e;
      return new this(isNeg ? '-' + str : str);
    }
    function hypot() {
      var i,
          n,
          t = new this(0);
      external = false;
      for (i = 0; i < arguments.length; ) {
        n = new this(arguments[i++]);
        if (!n.d) {
          if (n.s) {
            external = true;
            return new this(1 / 0);
          }
          t = n;
        } else if (t.d) {
          t = t.plus(n.times(n));
        }
      }
      external = true;
      return t.sqrt();
    }
    function ln(x) {
      return new this(x).ln();
    }
    function log(x, y) {
      return new this(x).log(y);
    }
    function log2(x) {
      return new this(x).log(2);
    }
    function log10(x) {
      return new this(x).log(10);
    }
    function max() {
      return maxOrMin(this, arguments, 'lt');
    }
    function min() {
      return maxOrMin(this, arguments, 'gt');
    }
    function mod(x, y) {
      return new this(x).mod(y);
    }
    function mul(x, y) {
      return new this(x).mul(y);
    }
    function pow(x, y) {
      return new this(x).pow(y);
    }
    function random(sd) {
      var d,
          e,
          k,
          n,
          i = 0,
          r = new this(1),
          rd = [];
      if (sd === void 0)
        sd = this.precision;
      else
        checkInt32(sd, 1, MAX_DIGITS);
      k = Math.ceil(sd / LOG_BASE);
      if (this.crypto === false) {
        for (; i < k; )
          rd[i++] = Math.random() * 1e7 | 0;
      } else if (cryptoObject && cryptoObject.getRandomValues) {
        d = cryptoObject.getRandomValues(new Uint32Array(k));
        for (; i < k; ) {
          n = d[i];
          if (n >= 4.29e9) {
            d[i] = cryptoObject.getRandomValues(new Uint32Array(1))[0];
          } else {
            rd[i++] = n % 1e7;
          }
        }
      } else if (cryptoObject && cryptoObject.randomBytes) {
        d = cryptoObject.randomBytes(k *= 4);
        for (; i < k; ) {
          n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);
          if (n >= 2.14e9) {
            cryptoObject.randomBytes(4).copy(d, i);
          } else {
            rd.push(n % 1e7);
            i += 4;
          }
        }
        i = k / 4;
      } else if (this.crypto) {
        throw Error(decimalError + 'crypto unavailable');
      } else {
        for (; i < k; )
          rd[i++] = Math.random() * 1e7 | 0;
      }
      k = rd[--i];
      sd %= LOG_BASE;
      if (k && sd) {
        n = mathpow(10, LOG_BASE - sd);
        rd[i] = (k / n | 0) * n;
      }
      for (; rd[i] === 0; i--)
        rd.pop();
      if (i < 0) {
        e = 0;
        rd = [0];
      } else {
        e = -1;
        for (; rd[0] === 0; e -= LOG_BASE)
          rd.shift();
        for (k = 1, n = rd[0]; n >= 10; n /= 10)
          k++;
        if (k < LOG_BASE)
          e -= LOG_BASE - k;
      }
      r.e = e;
      r.d = rd;
      return r;
    }
    function round(x) {
      return finalise(x = new this(x), x.e + 1, this.rounding);
    }
    function sign(x) {
      x = new this(x);
      return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;
    }
    function sin(x) {
      return new this(x).sin();
    }
    function sinh(x) {
      return new this(x).sinh();
    }
    function sqrt(x) {
      return new this(x).sqrt();
    }
    function sub(x, y) {
      return new this(x).sub(y);
    }
    function tan(x) {
      return new this(x).tan();
    }
    function tanh(x) {
      return new this(x).tanh();
    }
    function trunc(x) {
      return finalise(x = new this(x), x.e + 1, 1);
    }
    Decimal = clone(Decimal);
    LN10 = new Decimal(LN10);
    PI = new Decimal(PI);
    if (typeof define == 'function' && define.amd) {
      define(function() {
        return Decimal;
      });
    } else if (typeof module != 'undefined' && module.exports) {
      module.exports = Decimal;
      if (!cryptoObject) {
        try {
          cryptoObject = $__require('cry' + 'pto');
        } catch (e) {}
      }
    } else {
      if (!globalScope) {
        globalScope = typeof self != 'undefined' && self && self.self == self ? self : Function('return this')();
      }
      noConflict = globalScope.Decimal;
      Decimal.noConflict = function() {
        globalScope.Decimal = noConflict;
        return Decimal;
      };
      globalScope.Decimal = Decimal;
    }
  })(this);
  return module.exports;
});

$__System.registerDynamic("ab", ["aa", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var Decimal = $__require('aa');
  function factory(type, config, load, typed, math) {
    var BigNumber = Decimal.clone({precision: config.precision});
    BigNumber.prototype.type = 'BigNumber';
    BigNumber.prototype.isBigNumber = true;
    BigNumber.prototype.toJSON = function() {
      return {
        mathjs: 'BigNumber',
        value: this.toString()
      };
    };
    BigNumber.fromJSON = function(json) {
      return new BigNumber(json.value);
    };
    math.on('config', function(curr, prev) {
      if (curr.precision !== prev.precision) {
        BigNumber.config({precision: curr.precision});
      }
    });
    return BigNumber;
  }
  exports.name = 'BigNumber';
  exports.path = 'type';
  exports.factory = factory;
  exports.math = true;
  return module.exports;
});

$__System.registerDynamic("ac", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var bignumber = typed('bignumber', {
      '': function() {
        return new type.BigNumber(0);
      },
      'number': function(x) {
        return new type.BigNumber(x + '');
      },
      'string': function(x) {
        return new type.BigNumber(x);
      },
      'BigNumber': function(x) {
        return x;
      },
      'Fraction': function(x) {
        return new type.BigNumber(x.n).div(x.d);
      },
      'Array | Matrix': function(x) {
        return deepMap(x, bignumber);
      }
    });
    bignumber.toTex = {
      0: '0',
      1: '\\left(${args[0]}\\right)'
    };
    return bignumber;
  }
  exports.name = 'bignumber';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("ae", ["ab", "ac", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = [$__require('ab'), $__require('ac')];
  return module.exports;
});

$__System.registerDynamic("af", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var bool = typed('bool', {
      '': function() {
        return false;
      },
      'boolean': function(x) {
        return x;
      },
      'number': function(x) {
        return !!x;
      },
      'BigNumber': function(x) {
        return !x.isZero();
      },
      'string': function(x) {
        var lcase = x.toLowerCase();
        if (lcase === 'true') {
          return true;
        } else if (lcase === 'false') {
          return false;
        }
        var num = Number(x);
        if (x != '' && !isNaN(num)) {
          return !!num;
        }
        throw new Error('Cannot convert "' + x + '" to a boolean');
      },
      'Array | Matrix': function(x) {
        return deepMap(x, bool);
      }
    });
    return bool;
  }
  exports.name = 'boolean';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("b0", ["b1", "a4", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var format = $__require('b1').format;
  var lazy = $__require('a4').lazy;
  function factory(type, config, load, typed, math) {
    function Chain(value) {
      if (!(this instanceof Chain)) {
        throw new SyntaxError('Constructor must be called with the new operator');
      }
      if (value && value.isChain) {
        this.value = value.value;
      } else {
        this.value = value;
      }
    }
    Chain.prototype.type = 'Chain';
    Chain.prototype.isChain = true;
    Chain.prototype.done = function() {
      return this.value;
    };
    Chain.prototype.valueOf = function() {
      return this.value;
    };
    Chain.prototype.toString = function() {
      return format(this.value);
    };
    function createProxy(name, fn) {
      if (typeof fn === 'function') {
        Chain.prototype[name] = chainify(fn);
      }
    }
    function createLazyProxy(name, resolver) {
      lazy(Chain.prototype, name, function outerResolver() {
        var fn = resolver();
        if (typeof fn === 'function') {
          return chainify(fn);
        }
        return undefined;
      });
    }
    function chainify(fn) {
      return function() {
        var args = [this.value];
        for (var i = 0; i < arguments.length; i++) {
          args[i + 1] = arguments[i];
        }
        return new Chain(fn.apply(fn, args));
      };
    }
    Chain.createProxy = function(arg0, arg1) {
      if (typeof arg0 === 'string') {
        createProxy(arg0, arg1);
      } else {
        for (var prop in arg0) {
          if (arg0.hasOwnProperty(prop)) {
            createProxy(prop, arg0[prop]);
          }
        }
      }
    };
    Chain.createProxy(math);
    math.on('import', function(name, resolver, path) {
      if (path === undefined) {
        createLazyProxy(name, resolver);
      }
    });
    return Chain;
  }
  exports.name = 'Chain';
  exports.path = 'type';
  exports.factory = factory;
  exports.math = true;
  exports.lazy = false;
  return module.exports;
});

$__System.registerDynamic("b2", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    return typed('chain', {
      '': function() {
        return new type.Chain();
      },
      'any': function(value) {
        return new type.Chain(value);
      }
    });
  }
  exports.name = 'chain';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("b3", ["b0", "b2", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = [$__require('b0'), $__require('b2')];
  return module.exports;
});

$__System.registerDynamic("b4", ["ad", "b5", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var latex = $__require('b5');
    var complex = typed('complex', {
      '': function() {
        return type.Complex.ZERO;
      },
      'number': function(x) {
        return new type.Complex(x, 0);
      },
      'number, number': function(re, im) {
        return new type.Complex(re, im);
      },
      'BigNumber, BigNumber': function(re, im) {
        return new type.Complex(re.toNumber(), im.toNumber());
      },
      'Complex': function(x) {
        return x.clone();
      },
      'string': function(x) {
        return type.Complex(x);
      },
      'Object': function(x) {
        if ('re' in x && 'im' in x) {
          return new type.Complex(x.re, x.im);
        }
        if ('r' in x && 'phi' in x) {
          return new type.Complex(x);
        }
        throw new Error('Expected object with either properties re and im, or properties r and phi.');
      },
      'Array | Matrix': function(x) {
        return deepMap(x, complex);
      }
    });
    complex.toTex = {
      0: '0',
      1: '\\left(${args[0]}\\right)',
      2: '\\left(\\left(${args[0]}\\right)+' + latex.symbols['i'] + '\\cdot\\left(${args[1]}\\right)\\right)'
    };
    return complex;
  }
  exports.name = 'complex';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("b6", ["b7", "b4", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = [$__require('b7'), $__require('b4')];
  return module.exports;
});

$__System.registerDynamic("b8", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  (function(root) {
    "use strict";
    var MAX_CYCLE_LEN = 2000;
    var P = {
      "s": 1,
      "n": 0,
      "d": 1
    };
    function assign(n, s) {
      if (isNaN(n = parseInt(n, 10))) {
        thorwInvalidParam();
      }
      return n * s;
    }
    function thorwInvalidParam() {
      throw "Invalid Param";
    }
    var parse = function(p1, p2) {
      var n = 0,
          d = 1,
          s = 1;
      var v = 0,
          w = 0,
          x = 0,
          y = 1,
          z = 1;
      var A = 0,
          B = 1;
      var C = 1,
          D = 1;
      var N = 10000000;
      var M;
      if (p1 === undefined || p1 === null) {} else if (p2 !== undefined) {
        n = p1;
        d = p2;
        s = n * d;
      } else
        switch (typeof p1) {
          case "object":
            {
              if ("d" in p1 && "n" in p1) {
                n = p1["n"];
                d = p1["d"];
                if ("s" in p1)
                  n *= p1["s"];
              } else if (0 in p1) {
                n = p1[0];
                if (1 in p1)
                  d = p1[1];
              } else {
                thorwInvalidParam();
              }
              s = n * d;
              break;
            }
          case "number":
            {
              if (p1 < 0) {
                s = p1;
                p1 = -p1;
              }
              if (p1 % 1 === 0) {
                n = p1;
              } else if (p1 > 0) {
                if (p1 >= 1) {
                  z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));
                  p1 /= z;
                }
                while (B <= N && D <= N) {
                  M = (A + C) / (B + D);
                  if (p1 === M) {
                    if (B + D <= N) {
                      n = A + C;
                      d = B + D;
                    } else if (D > B) {
                      n = C;
                      d = D;
                    } else {
                      n = A;
                      d = B;
                    }
                    break;
                  } else {
                    if (p1 > M) {
                      A += C;
                      B += D;
                    } else {
                      C += A;
                      D += B;
                    }
                    if (B > N) {
                      n = C;
                      d = D;
                    } else {
                      n = A;
                      d = B;
                    }
                  }
                }
                n *= z;
              } else if (isNaN(p1) || isNaN(p2)) {
                d = n = NaN;
              }
              break;
            }
          case "string":
            {
              B = p1.match(/\d+|./g);
              if (B[A] === '-') {
                s = -1;
                A++;
              } else if (B[A] === '+') {
                A++;
              }
              if (B.length === A + 1) {
                w = assign(B[A++], s);
              } else if (B[A + 1] === '.' || B[A] === '.') {
                if (B[A] !== '.') {
                  v = assign(B[A++], s);
                }
                A++;
                if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === "'" && B[A + 3] === "'") {
                  w = assign(B[A], s);
                  y = Math.pow(10, B[A].length);
                  A++;
                }
                if (B[A] === '(' && B[A + 2] === ')' || B[A] === "'" && B[A + 2] === "'") {
                  x = assign(B[A + 1], s);
                  z = Math.pow(10, B[A + 1].length) - 1;
                  A += 3;
                }
              } else if (B[A + 1] === '/' || B[A + 1] === ':') {
                w = assign(B[A], s);
                y = assign(B[A + 2], 1);
                A += 3;
              } else if (B[A + 3] === '/' && B[A + 1] === ' ') {
                v = assign(B[A], s);
                w = assign(B[A + 2], s);
                y = assign(B[A + 4], 1);
                A += 5;
              }
              if (B.length <= A) {
                d = y * z;
                s = n = x + d * v + z * w;
                break;
              }
            }
          default:
            thorwInvalidParam();
        }
      if (d === 0) {
        throw "DIV/0";
      }
      P["s"] = s < 0 ? -1 : 1;
      P["n"] = Math.abs(n);
      P["d"] = Math.abs(d);
    };
    var modpow = function(b, e, m) {
      for (var r = 1; e > 0; b = (b * b) % m, e >>= 1) {
        if (e & 1) {
          r = (r * b) % m;
        }
      }
      return r;
    };
    var cycleLen = function(n, d) {
      for (; d % 2 === 0; d /= 2) {}
      for (; d % 5 === 0; d /= 5) {}
      if (d === 1)
        return 0;
      var rem = 10 % d;
      for (var t = 1; rem !== 1; t++) {
        rem = rem * 10 % d;
        if (t > MAX_CYCLE_LEN)
          return 0;
      }
      return t;
    };
    var cycleStart = function(n, d, len) {
      var rem1 = 1;
      var rem2 = modpow(10, len, d);
      for (var t = 0; t < 300; t++) {
        if (rem1 === rem2)
          return t;
        rem1 = rem1 * 10 % d;
        rem2 = rem2 * 10 % d;
      }
      return 0;
    };
    var gcd = function(a, b) {
      if (!a)
        return b;
      if (!b)
        return a;
      while (1) {
        a %= b;
        if (!a)
          return b;
        b %= a;
        if (!b)
          return a;
      }
    };
    function Fraction(a, b) {
      if (!(this instanceof Fraction)) {
        return new Fraction(a, b);
      }
      parse(a, b);
      if (Fraction['REDUCE']) {
        a = gcd(P["d"], P["n"]);
      } else {
        a = 1;
      }
      this["s"] = P["s"];
      this["n"] = P["n"] / a;
      this["d"] = P["d"] / a;
    }
    Fraction['REDUCE'] = 1;
    Fraction.prototype = {
      "s": 1,
      "n": 0,
      "d": 1,
      "abs": function() {
        return new Fraction(this["n"], this["d"]);
      },
      "neg": function() {
        return new Fraction(-this["s"] * this["n"], this["d"]);
      },
      "add": function(a, b) {
        parse(a, b);
        return new Fraction(this["s"] * this["n"] * P["d"] + P["s"] * this["d"] * P["n"], this["d"] * P["d"]);
      },
      "sub": function(a, b) {
        parse(a, b);
        return new Fraction(this["s"] * this["n"] * P["d"] - P["s"] * this["d"] * P["n"], this["d"] * P["d"]);
      },
      "mul": function(a, b) {
        parse(a, b);
        return new Fraction(this["s"] * P["s"] * this["n"] * P["n"], this["d"] * P["d"]);
      },
      "div": function(a, b) {
        parse(a, b);
        return new Fraction(this["s"] * P["s"] * this["n"] * P["d"], this["d"] * P["n"]);
      },
      "clone": function() {
        return new Fraction(this);
      },
      "mod": function(a, b) {
        if (isNaN(this['n']) || isNaN(this['d'])) {
          return new Fraction(NaN);
        }
        if (a === undefined) {
          return new Fraction(this["s"] * this["n"] % this["d"], 1);
        }
        parse(a, b);
        if (0 === P["n"] && 0 === this["d"]) {
          Fraction(0, 0);
        }
        return new Fraction((this["s"] * P["d"] * this["n"]) % (P["n"] * this["d"]), P["d"] * this["d"]);
      },
      "gcd": function(a, b) {
        parse(a, b);
        return new Fraction(gcd(P["n"], this["n"]), P["d"] * this["d"] / gcd(P["d"], this["d"]));
      },
      "lcm": function(a, b) {
        parse(a, b);
        if (P["n"] === 0 && this["n"] === 0) {
          return new Fraction;
        }
        return new Fraction(P["n"] * this["n"] / gcd(P["n"], this["n"]), gcd(P["d"], this["d"]));
      },
      "ceil": function(places) {
        places = Math.pow(10, places || 0);
        if (isNaN(this["n"]) || isNaN(this["d"])) {
          return new Fraction(NaN);
        }
        return new Fraction(Math.ceil(places * this["s"] * this["n"] / this["d"]), places);
      },
      "floor": function(places) {
        places = Math.pow(10, places || 0);
        if (isNaN(this["n"]) || isNaN(this["d"])) {
          return new Fraction(NaN);
        }
        return new Fraction(Math.floor(places * this["s"] * this["n"] / this["d"]), places);
      },
      "round": function(places) {
        places = Math.pow(10, places || 0);
        if (isNaN(this["n"]) || isNaN(this["d"])) {
          return new Fraction(NaN);
        }
        return new Fraction(Math.round(places * this["s"] * this["n"] / this["d"]), places);
      },
      "inverse": function() {
        return new Fraction(this["s"] * this["d"], this["n"]);
      },
      "pow": function(m) {
        if (m < 0) {
          return new Fraction(Math.pow(this['s'] * this["d"], -m), Math.pow(this["n"], -m));
        } else {
          return new Fraction(Math.pow(this['s'] * this["n"], m), Math.pow(this["d"], m));
        }
      },
      "equals": function(a, b) {
        parse(a, b);
        return this["s"] * this["n"] * P["d"] === P["s"] * P["n"] * this["d"];
      },
      "compare": function(a, b) {
        parse(a, b);
        var t = (this["s"] * this["n"] * P["d"] - P["s"] * P["n"] * this["d"]);
        return (0 < t) - (t < 0);
      },
      "divisible": function(a, b) {
        parse(a, b);
        return !(!(P["n"] * this["d"]) || ((this["n"] * P["d"]) % (P["n"] * this["d"])));
      },
      'valueOf': function() {
        return this["s"] * this["n"] / this["d"];
      },
      'toFraction': function(excludeWhole) {
        var whole,
            str = "";
        var n = this["n"];
        var d = this["d"];
        if (this["s"] < 0) {
          str += '-';
        }
        if (d === 1) {
          str += n;
        } else {
          if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
            str += whole;
            str += " ";
            n %= d;
          }
          str += n;
          str += '/';
          str += d;
        }
        return str;
      },
      'toLatex': function(excludeWhole) {
        var whole,
            str = "";
        var n = this["n"];
        var d = this["d"];
        if (this["s"] < 0) {
          str += '-';
        }
        if (d === 1) {
          str += n;
        } else {
          if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
            str += whole;
            n %= d;
          }
          str += "\\frac{";
          str += n;
          str += '}{';
          str += d;
          str += '}';
        }
        return str;
      },
      'toContinued': function() {
        var t;
        var a = this['n'];
        var b = this['d'];
        var res = [];
        do {
          res.push(Math.floor(a / b));
          t = a % b;
          a = b;
          b = t;
        } while (a !== 1);
        return res;
      },
      'toString': function() {
        var g;
        var N = this["n"];
        var D = this["d"];
        if (isNaN(N) || isNaN(D)) {
          return "NaN";
        }
        if (!Fraction['REDUCE']) {
          g = gcd(N, D);
          N /= g;
          D /= g;
        }
        var p = String(N).split("");
        var t = 0;
        var ret = [~this["s"] ? "" : "-", "", ""];
        var zeros = "";
        var cycLen = cycleLen(N, D);
        var cycOff = cycleStart(N, D, cycLen);
        var j = -1;
        var n = 1;
        var length = 10 + cycLen + cycOff + p.length;
        for (var i = 0; i < length; i++, t *= 10) {
          if (i < p.length) {
            t += Number(p[i]);
          } else {
            n = 2;
            j++;
          }
          if (cycLen > 0) {
            if (j === cycOff) {
              ret[n] += zeros + "(";
              zeros = "";
            } else if (j === cycLen + cycOff) {
              ret[n] += zeros + ")";
              break;
            }
          }
          if (t >= D) {
            ret[n] += zeros + ((t / D) | 0);
            zeros = "";
            t = t % D;
          } else if (n > 1) {
            zeros += "0";
          } else if (ret[n]) {
            ret[n] += "0";
          }
        }
        ret[0] += ret[1] || "0";
        if (ret[2]) {
          return ret[0] + "." + ret[2];
        }
        return ret[0];
      }
    };
    if (typeof define === "function" && define["amd"]) {
      define([], function() {
        return Fraction;
      });
    } else if (typeof exports === "object") {
      module["exports"] = Fraction;
    } else {
      root['Fraction'] = Fraction;
    }
  })(this);
  return module.exports;
});

$__System.registerDynamic("b9", ["b8", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var Fraction = $__require('b8');
  Fraction.prototype.type = 'Fraction';
  Fraction.prototype.isFraction = true;
  Fraction.prototype.toJSON = function() {
    return {
      mathjs: 'Fraction',
      n: this.s * this.n,
      d: this.d
    };
  };
  Fraction.fromJSON = function(json) {
    return new Fraction(json);
  };
  function factory(type, config, load, typed) {
    return Fraction;
  }
  exports.name = 'Fraction';
  exports.path = 'type';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("ba", ["b9", "bb", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = [$__require('b9'), $__require('bb')];
  return module.exports;
});

$__System.registerDynamic("bc", ["bd", "be", "bf", "c0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var util = $__require('bd');
  var DimensionError = $__require('be');
  var array = util.array;
  var object = util.object;
  var string = util.string;
  var number = util.number;
  var isArray = Array.isArray;
  var isNumber = number.isNumber;
  var isInteger = number.isInteger;
  var isString = string.isString;
  var validateIndex = array.validateIndex;
  function factory(type, config, load, typed) {
    var Matrix = load($__require('bf'));
    var equalScalar = load($__require('c0'));
    function SparseMatrix(data, datatype) {
      if (!(this instanceof SparseMatrix))
        throw new SyntaxError('Constructor must be called with the new operator');
      if (datatype && !isString(datatype))
        throw new Error('Invalid datatype: ' + datatype);
      if (data && data.isMatrix === true) {
        _createFromMatrix(this, data, datatype);
      } else if (data && isArray(data.index) && isArray(data.ptr) && isArray(data.size)) {
        this._values = data.values;
        this._index = data.index;
        this._ptr = data.ptr;
        this._size = data.size;
        this._datatype = datatype || data.datatype;
      } else if (isArray(data)) {
        _createFromArray(this, data, datatype);
      } else if (data) {
        throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');
      } else {
        this._values = [];
        this._index = [];
        this._ptr = [0];
        this._size = [0, 0];
        this._datatype = datatype;
      }
    }
    var _createFromMatrix = function(matrix, source, datatype) {
      if (source.type === 'SparseMatrix') {
        matrix._values = source._values ? object.clone(source._values) : undefined;
        matrix._index = object.clone(source._index);
        matrix._ptr = object.clone(source._ptr);
        matrix._size = object.clone(source._size);
        matrix._datatype = datatype || source._datatype;
      } else {
        _createFromArray(matrix, source.valueOf(), datatype || source._datatype);
      }
    };
    var _createFromArray = function(matrix, data, datatype) {
      matrix._values = [];
      matrix._index = [];
      matrix._ptr = [];
      matrix._datatype = datatype;
      var rows = data.length;
      var columns = 0;
      var eq = equalScalar;
      var zero = 0;
      if (isString(datatype)) {
        eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;
        zero = typed.convert(0, datatype);
      }
      if (rows > 0) {
        var j = 0;
        do {
          matrix._ptr.push(matrix._index.length);
          for (var i = 0; i < rows; i++) {
            var row = data[i];
            if (isArray(row)) {
              if (j === 0 && columns < row.length)
                columns = row.length;
              if (j < row.length) {
                var v = row[j];
                if (!eq(v, zero)) {
                  matrix._values.push(v);
                  matrix._index.push(i);
                }
              }
            } else {
              if (j === 0 && columns < 1)
                columns = 1;
              if (!eq(row, zero)) {
                matrix._values.push(row);
                matrix._index.push(i);
              }
            }
          }
          j++;
        } while (j < columns);
      }
      matrix._ptr.push(matrix._index.length);
      matrix._size = [rows, columns];
    };
    SparseMatrix.prototype = new Matrix();
    SparseMatrix.prototype.type = 'SparseMatrix';
    SparseMatrix.prototype.isSparseMatrix = true;
    SparseMatrix.prototype.storage = function() {
      return 'sparse';
    };
    SparseMatrix.prototype.datatype = function() {
      return this._datatype;
    };
    SparseMatrix.prototype.create = function(data, datatype) {
      return new SparseMatrix(data, datatype);
    };
    SparseMatrix.prototype.density = function() {
      var rows = this._size[0];
      var columns = this._size[1];
      return rows !== 0 && columns !== 0 ? (this._index.length / (rows * columns)) : 0;
    };
    SparseMatrix.prototype.subset = function(index, replacement, defaultValue) {
      if (!this._values)
        throw new Error('Cannot invoke subset on a Pattern only matrix');
      switch (arguments.length) {
        case 1:
          return _getsubset(this, index);
        case 2:
        case 3:
          return _setsubset(this, index, replacement, defaultValue);
        default:
          throw new SyntaxError('Wrong number of arguments');
      }
    };
    var _getsubset = function(matrix, idx) {
      if (!idx || idx.isIndex !== true) {
        throw new TypeError('Invalid index');
      }
      var isScalar = idx.isScalar();
      if (isScalar) {
        return matrix.get(idx.min());
      }
      var size = idx.size();
      if (size.length != matrix._size.length) {
        throw new DimensionError(size.length, matrix._size.length);
      }
      var i,
          ii,
          k,
          kk;
      var min = idx.min();
      var max = idx.max();
      for (i = 0, ii = matrix._size.length; i < ii; i++) {
        validateIndex(min[i], matrix._size[i]);
        validateIndex(max[i], matrix._size[i]);
      }
      var mvalues = matrix._values;
      var mindex = matrix._index;
      var mptr = matrix._ptr;
      var rows = idx.dimension(0);
      var columns = idx.dimension(1);
      var w = [];
      var pv = [];
      rows.forEach(function(i, r) {
        pv[i] = r[0];
        w[i] = true;
      });
      var values = mvalues ? [] : undefined;
      var index = [];
      var ptr = [];
      columns.forEach(function(j) {
        ptr.push(index.length);
        for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {
          i = mindex[k];
          if (w[i] === true) {
            index.push(pv[i]);
            if (values)
              values.push(mvalues[k]);
          }
        }
      });
      ptr.push(index.length);
      return new SparseMatrix({
        values: values,
        index: index,
        ptr: ptr,
        size: size,
        datatype: matrix._datatype
      });
    };
    var _setsubset = function(matrix, index, submatrix, defaultValue) {
      if (!index || index.isIndex !== true) {
        throw new TypeError('Invalid index');
      }
      var iSize = index.size(),
          isScalar = index.isScalar();
      var sSize;
      if (submatrix && submatrix.isMatrix === true) {
        sSize = submatrix.size();
        submatrix = submatrix.toArray();
      } else {
        sSize = array.size(submatrix);
      }
      if (isScalar) {
        if (sSize.length !== 0) {
          throw new TypeError('Scalar expected');
        }
        matrix.set(index.min(), submatrix, defaultValue);
      } else {
        if (iSize.length !== 1 && iSize.length !== 2) {
          throw new DimensionError(iSize.length, matrix._size.length, '<');
        }
        if (sSize.length < iSize.length) {
          var i = 0;
          var outer = 0;
          while (iSize[i] === 1 && sSize[i] === 1) {
            i++;
          }
          while (iSize[i] === 1) {
            outer++;
            i++;
          }
          submatrix = array.unsqueeze(submatrix, iSize.length, outer, sSize);
        }
        if (!object.deepEqual(iSize, sSize)) {
          throw new DimensionError(iSize, sSize, '>');
        }
        var x0 = index.min()[0];
        var y0 = index.min()[1];
        var m = sSize[0];
        var n = sSize[1];
        for (var x = 0; x < m; x++) {
          for (var y = 0; y < n; y++) {
            var v = submatrix[x][y];
            matrix.set([x + x0, y + y0], v, defaultValue);
          }
        }
      }
      return matrix;
    };
    SparseMatrix.prototype.get = function(index) {
      if (!isArray(index))
        throw new TypeError('Array expected');
      if (index.length != this._size.length)
        throw new DimensionError(index.length, this._size.length);
      if (!this._values)
        throw new Error('Cannot invoke get on a Pattern only matrix');
      var i = index[0];
      var j = index[1];
      validateIndex(i, this._size[0]);
      validateIndex(j, this._size[1]);
      var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);
      if (k < this._ptr[j + 1] && this._index[k] === i)
        return this._values[k];
      return 0;
    };
    SparseMatrix.prototype.set = function(index, v, defaultValue) {
      if (!isArray(index))
        throw new TypeError('Array expected');
      if (index.length != this._size.length)
        throw new DimensionError(index.length, this._size.length);
      if (!this._values)
        throw new Error('Cannot invoke set on a Pattern only matrix');
      var i = index[0];
      var j = index[1];
      var rows = this._size[0];
      var columns = this._size[1];
      var eq = equalScalar;
      var zero = 0;
      if (isString(this._datatype)) {
        eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar;
        zero = typed.convert(0, this._datatype);
      }
      if (i > rows - 1 || j > columns - 1) {
        _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue);
        rows = this._size[0];
        columns = this._size[1];
      }
      validateIndex(i, rows);
      validateIndex(j, columns);
      var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);
      if (k < this._ptr[j + 1] && this._index[k] === i) {
        if (!eq(v, zero)) {
          this._values[k] = v;
        } else {
          _remove(k, j, this._values, this._index, this._ptr);
        }
      } else {
        _insert(k, i, j, v, this._values, this._index, this._ptr);
      }
      return this;
    };
    var _getValueIndex = function(i, top, bottom, index) {
      if (bottom - top === 0)
        return bottom;
      for (var r = top; r < bottom; r++) {
        if (index[r] === i)
          return r;
      }
      return top;
    };
    var _remove = function(k, j, values, index, ptr) {
      values.splice(k, 1);
      index.splice(k, 1);
      for (var x = j + 1; x < ptr.length; x++)
        ptr[x]--;
    };
    var _insert = function(k, i, j, v, values, index, ptr) {
      values.splice(k, 0, v);
      index.splice(k, 0, i);
      for (var x = j + 1; x < ptr.length; x++)
        ptr[x]++;
    };
    SparseMatrix.prototype.resize = function(size, defaultValue, copy) {
      if (!isArray(size))
        throw new TypeError('Array expected');
      if (size.length !== 2)
        throw new Error('Only two dimensions matrix are supported');
      size.forEach(function(value) {
        if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {
          throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + string.format(size) + ')');
        }
      });
      var m = copy ? this.clone() : this;
      return _resize(m, size[0], size[1], defaultValue);
    };
    var _resize = function(matrix, rows, columns, defaultValue) {
      var value = defaultValue || 0;
      var eq = equalScalar;
      var zero = 0;
      if (isString(matrix._datatype)) {
        eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;
        zero = typed.convert(0, matrix._datatype);
        value = typed.convert(value, matrix._datatype);
      }
      var ins = !eq(value, zero);
      var r = matrix._size[0];
      var c = matrix._size[1];
      var i,
          j,
          k;
      if (columns > c) {
        for (j = c; j < columns; j++) {
          matrix._ptr[j] = matrix._values.length;
          if (ins) {
            for (i = 0; i < r; i++) {
              matrix._values.push(value);
              matrix._index.push(i);
            }
          }
        }
        matrix._ptr[columns] = matrix._values.length;
      } else if (columns < c) {
        matrix._ptr.splice(columns + 1, c - columns);
        matrix._values.splice(matrix._ptr[columns], matrix._values.length);
        matrix._index.splice(matrix._ptr[columns], matrix._index.length);
      }
      c = columns;
      if (rows > r) {
        if (ins) {
          var n = 0;
          for (j = 0; j < c; j++) {
            matrix._ptr[j] = matrix._ptr[j] + n;
            k = matrix._ptr[j + 1] + n;
            var p = 0;
            for (i = r; i < rows; i++, p++) {
              matrix._values.splice(k + p, 0, value);
              matrix._index.splice(k + p, 0, i);
              n++;
            }
          }
          matrix._ptr[c] = matrix._values.length;
        }
      } else if (rows < r) {
        var d = 0;
        for (j = 0; j < c; j++) {
          matrix._ptr[j] = matrix._ptr[j] - d;
          var k0 = matrix._ptr[j];
          var k1 = matrix._ptr[j + 1] - d;
          for (k = k0; k < k1; k++) {
            i = matrix._index[k];
            if (i > rows - 1) {
              matrix._values.splice(k, 1);
              matrix._index.splice(k, 1);
              d++;
            }
          }
        }
        matrix._ptr[j] = matrix._values.length;
      }
      matrix._size[0] = rows;
      matrix._size[1] = columns;
      return matrix;
    };
    SparseMatrix.prototype.clone = function() {
      var m = new SparseMatrix({
        values: this._values ? object.clone(this._values) : undefined,
        index: object.clone(this._index),
        ptr: object.clone(this._ptr),
        size: object.clone(this._size),
        datatype: this._datatype
      });
      return m;
    };
    SparseMatrix.prototype.size = function() {
      return this._size.slice(0);
    };
    SparseMatrix.prototype.map = function(callback, skipZeros) {
      if (!this._values)
        throw new Error('Cannot invoke map on a Pattern only matrix');
      var me = this;
      var rows = this._size[0];
      var columns = this._size[1];
      var invoke = function(v, i, j) {
        return callback(v, [i, j], me);
      };
      return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);
    };
    var _map = function(matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {
      var values = [];
      var index = [];
      var ptr = [];
      var eq = equalScalar;
      var zero = 0;
      if (isString(matrix._datatype)) {
        eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;
        zero = typed.convert(0, matrix._datatype);
      }
      var invoke = function(v, x, y) {
        v = callback(v, x, y);
        if (!eq(v, zero)) {
          values.push(v);
          index.push(x);
        }
      };
      for (var j = minColumn; j <= maxColumn; j++) {
        ptr.push(values.length);
        var k0 = matrix._ptr[j];
        var k1 = matrix._ptr[j + 1];
        var p = minRow;
        for (var k = k0; k < k1; k++) {
          var i = matrix._index[k];
          if (i >= minRow && i <= maxRow) {
            if (!skipZeros) {
              for (var x = p; x < i; x++)
                invoke(0, x - minRow, j - minColumn);
            }
            invoke(matrix._values[k], i - minRow, j - minColumn);
          }
          p = i + 1;
        }
        if (!skipZeros) {
          for (var y = p; y <= maxRow; y++)
            invoke(0, y - minRow, j - minColumn);
        }
      }
      ptr.push(values.length);
      return new SparseMatrix({
        values: values,
        index: index,
        ptr: ptr,
        size: [maxRow - minRow + 1, maxColumn - minColumn + 1]
      });
    };
    SparseMatrix.prototype.forEach = function(callback, skipZeros) {
      if (!this._values)
        throw new Error('Cannot invoke forEach on a Pattern only matrix');
      var me = this;
      var rows = this._size[0];
      var columns = this._size[1];
      for (var j = 0; j < columns; j++) {
        var k0 = this._ptr[j];
        var k1 = this._ptr[j + 1];
        var p = 0;
        for (var k = k0; k < k1; k++) {
          var i = this._index[k];
          if (!skipZeros) {
            for (var x = p; x < i; x++)
              callback(0, [x, j], me);
          }
          callback(this._values[k], [i, j], me);
          p = i + 1;
        }
        if (!skipZeros) {
          for (var y = p; y < rows; y++)
            callback(0, [y, j], me);
        }
      }
    };
    SparseMatrix.prototype.toArray = function() {
      return _toArray(this._values, this._index, this._ptr, this._size, true);
    };
    SparseMatrix.prototype.valueOf = function() {
      return _toArray(this._values, this._index, this._ptr, this._size, false);
    };
    var _toArray = function(values, index, ptr, size, copy) {
      var rows = size[0];
      var columns = size[1];
      var a = [];
      var i,
          j;
      for (i = 0; i < rows; i++) {
        a[i] = [];
        for (j = 0; j < columns; j++)
          a[i][j] = 0;
      }
      for (j = 0; j < columns; j++) {
        var k0 = ptr[j];
        var k1 = ptr[j + 1];
        for (var k = k0; k < k1; k++) {
          i = index[k];
          a[i][j] = values ? (copy ? object.clone(values[k]) : values[k]) : 1;
        }
      }
      return a;
    };
    SparseMatrix.prototype.format = function(options) {
      var rows = this._size[0];
      var columns = this._size[1];
      var density = this.density();
      var str = 'Sparse Matrix [' + string.format(rows, options) + ' x ' + string.format(columns, options) + '] density: ' + string.format(density, options) + '\n';
      for (var j = 0; j < columns; j++) {
        var k0 = this._ptr[j];
        var k1 = this._ptr[j + 1];
        for (var k = k0; k < k1; k++) {
          var i = this._index[k];
          str += '\n    (' + string.format(i, options) + ', ' + string.format(j, options) + ') ==> ' + (this._values ? string.format(this._values[k], options) : 'X');
        }
      }
      return str;
    };
    SparseMatrix.prototype.toString = function() {
      return string.format(this.toArray());
    };
    SparseMatrix.prototype.toJSON = function() {
      return {
        mathjs: 'SparseMatrix',
        values: this._values,
        index: this._index,
        ptr: this._ptr,
        size: this._size,
        datatype: this._datatype
      };
    };
    SparseMatrix.prototype.diagonal = function(k) {
      if (k) {
        if (k.isBigNumber === true)
          k = k.toNumber();
        if (!isNumber(k) || !isInteger(k)) {
          throw new TypeError('The parameter k must be an integer number');
        }
      } else {
        k = 0;
      }
      var kSuper = k > 0 ? k : 0;
      var kSub = k < 0 ? -k : 0;
      var rows = this._size[0];
      var columns = this._size[1];
      var n = Math.min(rows - kSub, columns - kSuper);
      var values = [];
      var index = [];
      var ptr = [];
      ptr[0] = 0;
      for (var j = kSuper; j < columns && values.length < n; j++) {
        var k0 = this._ptr[j];
        var k1 = this._ptr[j + 1];
        for (var x = k0; x < k1; x++) {
          var i = this._index[x];
          if (i === j - kSuper + kSub) {
            values.push(this._values[x]);
            index[values.length - 1] = i - kSub;
            break;
          }
        }
      }
      ptr.push(values.length);
      return new SparseMatrix({
        values: values,
        index: index,
        ptr: ptr,
        size: [n, 1]
      });
    };
    SparseMatrix.fromJSON = function(json) {
      return new SparseMatrix(json);
    };
    SparseMatrix.diagonal = function(size, value, k, defaultValue, datatype) {
      if (!isArray(size))
        throw new TypeError('Array expected, size parameter');
      if (size.length !== 2)
        throw new Error('Only two dimensions matrix are supported');
      size = size.map(function(s) {
        if (s && s.isBigNumber === true) {
          s = s.toNumber();
        }
        if (!isNumber(s) || !isInteger(s) || s < 1) {
          throw new Error('Size values must be positive integers');
        }
        return s;
      });
      if (k) {
        if (k.isBigNumber === true)
          k = k.toNumber();
        if (!isNumber(k) || !isInteger(k)) {
          throw new TypeError('The parameter k must be an integer number');
        }
      } else {
        k = 0;
      }
      var eq = equalScalar;
      var zero = 0;
      if (isString(datatype)) {
        eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;
        zero = typed.convert(0, datatype);
      }
      var kSuper = k > 0 ? k : 0;
      var kSub = k < 0 ? -k : 0;
      var rows = size[0];
      var columns = size[1];
      var n = Math.min(rows - kSub, columns - kSuper);
      var _value;
      if (isArray(value)) {
        if (value.length !== n) {
          throw new Error('Invalid value array length');
        }
        _value = function(i) {
          return value[i];
        };
      } else if (value && value.isMatrix === true) {
        var ms = value.size();
        if (ms.length !== 1 || ms[0] !== n) {
          throw new Error('Invalid matrix length');
        }
        _value = function(i) {
          return value.get([i]);
        };
      } else {
        _value = function() {
          return value;
        };
      }
      var values = [];
      var index = [];
      var ptr = [];
      for (var j = 0; j < columns; j++) {
        ptr.push(values.length);
        var i = j - kSuper;
        if (i >= 0 && i < n) {
          var v = _value(i);
          if (!eq(v, zero)) {
            index.push(i + kSub);
            values.push(v);
          }
        }
      }
      ptr.push(values.length);
      return new SparseMatrix({
        values: values,
        index: index,
        ptr: ptr,
        size: [rows, columns]
      });
    };
    SparseMatrix.prototype.swapRows = function(i, j) {
      if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {
        throw new Error('Row index must be positive integers');
      }
      if (this._size.length !== 2) {
        throw new Error('Only two dimensional matrix is supported');
      }
      validateIndex(i, this._size[0]);
      validateIndex(j, this._size[0]);
      SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr);
      return this;
    };
    SparseMatrix._forEachRow = function(j, values, index, ptr, callback) {
      var k0 = ptr[j];
      var k1 = ptr[j + 1];
      for (var k = k0; k < k1; k++) {
        callback(index[k], values[k]);
      }
    };
    SparseMatrix._swapRows = function(x, y, columns, values, index, ptr) {
      for (var j = 0; j < columns; j++) {
        var k0 = ptr[j];
        var k1 = ptr[j + 1];
        var kx = _getValueIndex(x, k0, k1, index);
        var ky = _getValueIndex(y, k0, k1, index);
        if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {
          if (values) {
            var v = values[kx];
            values[kx] = values[ky];
            values[ky] = v;
          }
          continue;
        }
        if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {
          var vx = values ? values[kx] : undefined;
          index.splice(ky, 0, y);
          if (values)
            values.splice(ky, 0, vx);
          index.splice(ky <= kx ? kx + 1 : kx, 1);
          if (values)
            values.splice(ky <= kx ? kx + 1 : kx, 1);
          continue;
        }
        if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {
          var vy = values ? values[ky] : undefined;
          index.splice(kx, 0, x);
          if (values)
            values.splice(kx, 0, vy);
          index.splice(kx <= ky ? ky + 1 : ky, 1);
          if (values)
            values.splice(kx <= ky ? ky + 1 : ky, 1);
        }
      }
    };
    type.Matrix._storage.sparse = SparseMatrix;
    return SparseMatrix;
  }
  exports.name = 'SparseMatrix';
  exports.path = 'type';
  exports.factory = factory;
  exports.lazy = false;
  return module.exports;
});

$__System.registerDynamic("c1", ["c2", "c0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load) {
    var add = load($__require('c2'));
    var equalScalar = load($__require('c0'));
    function Spa() {
      if (!(this instanceof Spa))
        throw new SyntaxError('Constructor must be called with the new operator');
      this._values = [];
      this._heap = new type.FibonacciHeap();
    }
    Spa.prototype.type = 'Spa';
    Spa.prototype.isSpa = true;
    Spa.prototype.set = function(i, v) {
      if (!this._values[i]) {
        var node = this._heap.insert(i, v);
        this._values[i] = node;
      } else {
        this._values[i].value = v;
      }
    };
    Spa.prototype.get = function(i) {
      var node = this._values[i];
      if (node)
        return node.value;
      return 0;
    };
    Spa.prototype.accumulate = function(i, v) {
      var node = this._values[i];
      if (!node) {
        node = this._heap.insert(i, v);
        this._values[i] = node;
      } else {
        node.value = add(node.value, v);
      }
    };
    Spa.prototype.forEach = function(from, to, callback) {
      var heap = this._heap;
      var values = this._values;
      var nodes = [];
      var node = heap.extractMinimum();
      if (node)
        nodes.push(node);
      while (node && node.key <= to) {
        if (node.key >= from) {
          if (!equalScalar(node.value, 0)) {
            callback(node.key, node.value, this);
          }
        }
        node = heap.extractMinimum();
        if (node)
          nodes.push(node);
      }
      for (var i = 0; i < nodes.length; i++) {
        var n = nodes[i];
        node = heap.insert(n.key, n.value);
        values[node.key] = node;
      }
    };
    Spa.prototype.swap = function(i, j) {
      var nodei = this._values[i];
      var nodej = this._values[j];
      if (!nodei && nodej) {
        nodei = this._heap.insert(i, nodej.value);
        this._heap.remove(nodej);
        this._values[i] = nodei;
        this._values[j] = undefined;
      } else if (nodei && !nodej) {
        nodej = this._heap.insert(j, nodei.value);
        this._heap.remove(nodei);
        this._values[j] = nodej;
        this._values[i] = undefined;
      } else if (nodei && nodej) {
        var v = nodei.value;
        nodei.value = nodej.value;
        nodej.value = v;
      }
    };
    return Spa;
  }
  exports.name = 'Spa';
  exports.path = 'type';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("c3", ["c4", "c5", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var smaller = load($__require('c4'));
    var larger = load($__require('c5'));
    var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);
    function FibonacciHeap() {
      if (!(this instanceof FibonacciHeap))
        throw new SyntaxError('Constructor must be called with the new operator');
      this._minimum = null;
      this._size = 0;
    }
    FibonacciHeap.prototype.type = 'FibonacciHeap';
    FibonacciHeap.prototype.isFibonacciHeap = true;
    FibonacciHeap.prototype.insert = function(key, value) {
      var node = {
        key: key,
        value: value,
        degree: 0
      };
      if (this._minimum) {
        var minimum = this._minimum;
        node.left = minimum;
        node.right = minimum.right;
        minimum.right = node;
        node.right.left = node;
        if (smaller(key, minimum.key)) {
          this._minimum = node;
        }
      } else {
        node.left = node;
        node.right = node;
        this._minimum = node;
      }
      this._size++;
      return node;
    };
    FibonacciHeap.prototype.size = function() {
      return this._size;
    };
    FibonacciHeap.prototype.clear = function() {
      this._minimum = null;
      this._size = 0;
    };
    FibonacciHeap.prototype.isEmpty = function() {
      return !!this._minimum;
    };
    FibonacciHeap.prototype.extractMinimum = function() {
      var node = this._minimum;
      if (node === null)
        return node;
      var minimum = this._minimum;
      var numberOfChildren = node.degree;
      var x = node.child;
      while (numberOfChildren > 0) {
        var tempRight = x.right;
        x.left.right = x.right;
        x.right.left = x.left;
        x.left = minimum;
        x.right = minimum.right;
        minimum.right = x;
        x.right.left = x;
        x.parent = null;
        x = tempRight;
        numberOfChildren--;
      }
      node.left.right = node.right;
      node.right.left = node.left;
      if (node == node.right) {
        minimum = null;
      } else {
        minimum = node.right;
        minimum = _findMinimumNode(minimum, this._size);
      }
      this._size--;
      this._minimum = minimum;
      return node;
    };
    FibonacciHeap.prototype.remove = function(node) {
      this._minimum = _decreaseKey(this._minimum, node, -1);
      this.extractMinimum();
    };
    var _decreaseKey = function(minimum, node, key) {
      node.key = key;
      var parent = node.parent;
      if (parent && smaller(node.key, parent.key)) {
        _cut(minimum, node, parent);
        _cascadingCut(minimum, parent);
      }
      if (smaller(node.key, minimum.key))
        minimum = node;
      return minimum;
    };
    var _cut = function(minimum, node, parent) {
      node.left.right = node.right;
      node.right.left = node.left;
      parent.degree--;
      if (parent.child == node)
        parent.child = node.right;
      if (parent.degree === 0)
        parent.child = null;
      node.left = minimum;
      node.right = minimum.right;
      minimum.right = node;
      node.right.left = node;
      node.parent = null;
      node.mark = false;
    };
    var _cascadingCut = function(minimum, node) {
      var parent = node.parent;
      if (!parent)
        return;
      if (!node.mark) {
        node.mark = true;
      } else {
        _cut(minimum, node, parent);
        _cascadingCut(parent);
      }
    };
    var _linkNodes = function(node, parent) {
      node.left.right = node.right;
      node.right.left = node.left;
      node.parent = parent;
      if (!parent.child) {
        parent.child = node;
        node.right = node;
        node.left = node;
      } else {
        node.left = parent.child;
        node.right = parent.child.right;
        parent.child.right = node;
        node.right.left = node;
      }
      parent.degree++;
      node.mark = false;
    };
    var _findMinimumNode = function(minimum, size) {
      var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1;
      var array = new Array(arraySize);
      var numRoots = 0;
      var x = minimum;
      if (x) {
        numRoots++;
        x = x.right;
        while (x !== minimum) {
          numRoots++;
          x = x.right;
        }
      }
      var y;
      while (numRoots > 0) {
        var d = x.degree;
        var next = x.right;
        while (true) {
          y = array[d];
          if (!y)
            break;
          if (larger(x.key, y.key)) {
            var temp = y;
            y = x;
            x = temp;
          }
          _linkNodes(y, x);
          array[d] = null;
          d++;
        }
        array[d] = x;
        x = next;
        numRoots--;
      }
      minimum = null;
      for (var i = 0; i < arraySize; i++) {
        y = array[i];
        if (!y)
          continue;
        if (minimum) {
          y.left.right = y.right;
          y.right.left = y.left;
          y.left = minimum;
          y.right = minimum.right;
          minimum.right = y;
          y.right.left = y;
          if (smaller(y.key, minimum.key))
            minimum = y;
        } else
          minimum = y;
      }
      return minimum;
    };
    return FibonacciHeap;
  }
  exports.name = 'FibonacciHeap';
  exports.path = 'type';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("bf", ["bd", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var util = $__require('bd');
  var string = util.string;
  var isString = string.isString;
  function factory(type, config, load, typed) {
    function Matrix() {
      if (!(this instanceof Matrix)) {
        throw new SyntaxError('Constructor must be called with the new operator');
      }
    }
    Matrix.prototype.type = 'Matrix';
    Matrix.prototype.isMatrix = true;
    Matrix.storage = function(format) {
      if (!isString(format)) {
        throw new TypeError('format must be a string value');
      }
      var constructor = Matrix._storage[format];
      if (!constructor) {
        throw new SyntaxError('Unsupported matrix storage format: ' + format);
      }
      return constructor;
    };
    Matrix._storage = {};
    Matrix.prototype.storage = function() {
      throw new Error('Cannot invoke storage on a Matrix interface');
    };
    Matrix.prototype.datatype = function() {
      throw new Error('Cannot invoke datatype on a Matrix interface');
    };
    Matrix.prototype.create = function(data, datatype) {
      throw new Error('Cannot invoke create on a Matrix interface');
    };
    Matrix.prototype.subset = function(index, replacement, defaultValue) {
      throw new Error('Cannot invoke subset on a Matrix interface');
    };
    Matrix.prototype.get = function(index) {
      throw new Error('Cannot invoke get on a Matrix interface');
    };
    Matrix.prototype.set = function(index, value, defaultValue) {
      throw new Error('Cannot invoke set on a Matrix interface');
    };
    Matrix.prototype.resize = function(size, defaultValue) {
      throw new Error('Cannot invoke resize on a Matrix interface');
    };
    Matrix.prototype.clone = function() {
      throw new Error('Cannot invoke clone on a Matrix interface');
    };
    Matrix.prototype.size = function() {
      throw new Error('Cannot invoke size on a Matrix interface');
    };
    Matrix.prototype.map = function(callback, skipZeros) {
      throw new Error('Cannot invoke map on a Matrix interface');
    };
    Matrix.prototype.forEach = function(callback) {
      throw new Error('Cannot invoke forEach on a Matrix interface');
    };
    Matrix.prototype.toArray = function() {
      throw new Error('Cannot invoke toArray on a Matrix interface');
    };
    Matrix.prototype.valueOf = function() {
      throw new Error('Cannot invoke valueOf on a Matrix interface');
    };
    Matrix.prototype.format = function(options) {
      throw new Error('Cannot invoke format on a Matrix interface');
    };
    Matrix.prototype.toString = function() {
      throw new Error('Cannot invoke toString on a Matrix interface');
    };
    return Matrix;
  }
  exports.name = 'Matrix';
  exports.path = 'type';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("c6", ["bd", "be", "bf", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var util = $__require('bd');
  var DimensionError = $__require('be');
  var string = util.string;
  var array = util.array;
  var object = util.object;
  var number = util.number;
  var isArray = Array.isArray;
  var isNumber = number.isNumber;
  var isInteger = number.isInteger;
  var isString = string.isString;
  var validateIndex = array.validateIndex;
  function factory(type, config, load, typed) {
    var Matrix = load($__require('bf'));
    function DenseMatrix(data, datatype) {
      if (!(this instanceof DenseMatrix))
        throw new SyntaxError('Constructor must be called with the new operator');
      if (datatype && !isString(datatype))
        throw new Error('Invalid datatype: ' + datatype);
      if (data && data.isMatrix === true) {
        if (data.type === 'DenseMatrix') {
          this._data = object.clone(data._data);
          this._size = object.clone(data._size);
          this._datatype = datatype || data._datatype;
        } else {
          this._data = data.toArray();
          this._size = data.size();
          this._datatype = datatype || data._datatype;
        }
      } else if (data && isArray(data.data) && isArray(data.size)) {
        this._data = data.data;
        this._size = data.size;
        this._datatype = datatype || data.datatype;
      } else if (isArray(data)) {
        this._data = preprocess(data);
        this._size = array.size(this._data);
        array.validate(this._data, this._size);
        this._datatype = datatype;
      } else if (data) {
        throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');
      } else {
        this._data = [];
        this._size = [0];
        this._datatype = datatype;
      }
    }
    DenseMatrix.prototype = new Matrix();
    DenseMatrix.prototype.type = 'DenseMatrix';
    DenseMatrix.prototype.isDenseMatrix = true;
    DenseMatrix.prototype.storage = function() {
      return 'dense';
    };
    DenseMatrix.prototype.datatype = function() {
      return this._datatype;
    };
    DenseMatrix.prototype.create = function(data, datatype) {
      return new DenseMatrix(data, datatype);
    };
    DenseMatrix.prototype.subset = function(index, replacement, defaultValue) {
      switch (arguments.length) {
        case 1:
          return _get(this, index);
        case 2:
        case 3:
          return _set(this, index, replacement, defaultValue);
        default:
          throw new SyntaxError('Wrong number of arguments');
      }
    };
    DenseMatrix.prototype.get = function(index) {
      if (!isArray(index))
        throw new TypeError('Array expected');
      if (index.length != this._size.length)
        throw new DimensionError(index.length, this._size.length);
      for (var x = 0; x < index.length; x++)
        validateIndex(index[x], this._size[x]);
      var data = this._data;
      for (var i = 0,
          ii = index.length; i < ii; i++) {
        var index_i = index[i];
        validateIndex(index_i, data.length);
        data = data[index_i];
      }
      return data;
    };
    DenseMatrix.prototype.set = function(index, value, defaultValue) {
      if (!isArray(index))
        throw new TypeError('Array expected');
      if (index.length < this._size.length)
        throw new DimensionError(index.length, this._size.length, '<');
      var i,
          ii,
          index_i;
      var size = index.map(function(i) {
        return i + 1;
      });
      _fit(this, size, defaultValue);
      var data = this._data;
      for (i = 0, ii = index.length - 1; i < ii; i++) {
        index_i = index[i];
        validateIndex(index_i, data.length);
        data = data[index_i];
      }
      index_i = index[index.length - 1];
      validateIndex(index_i, data.length);
      data[index_i] = value;
      return this;
    };
    function _get(matrix, index) {
      if (!index || index.isIndex !== true) {
        throw new TypeError('Invalid index');
      }
      var isScalar = index.isScalar();
      if (isScalar) {
        return matrix.get(index.min());
      } else {
        var size = index.size();
        if (size.length != matrix._size.length) {
          throw new DimensionError(size.length, matrix._size.length);
        }
        var min = index.min();
        var max = index.max();
        for (var i = 0,
            ii = matrix._size.length; i < ii; i++) {
          validateIndex(min[i], matrix._size[i]);
          validateIndex(max[i], matrix._size[i]);
        }
        return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);
      }
    }
    function _getSubmatrix(data, index, dims, dim) {
      var last = (dim == dims - 1);
      var range = index.dimension(dim);
      if (last) {
        return range.map(function(i) {
          return data[i];
        }).valueOf();
      } else {
        return range.map(function(i) {
          var child = data[i];
          return _getSubmatrix(child, index, dims, dim + 1);
        }).valueOf();
      }
    }
    function _set(matrix, index, submatrix, defaultValue) {
      if (!index || index.isIndex !== true) {
        throw new TypeError('Invalid index');
      }
      var iSize = index.size(),
          isScalar = index.isScalar();
      var sSize;
      if (submatrix && submatrix.isMatrix === true) {
        sSize = submatrix.size();
        submatrix = submatrix.valueOf();
      } else {
        sSize = array.size(submatrix);
      }
      if (isScalar) {
        if (sSize.length !== 0) {
          throw new TypeError('Scalar expected');
        }
        matrix.set(index.min(), submatrix, defaultValue);
      } else {
        if (iSize.length < matrix._size.length) {
          throw new DimensionError(iSize.length, matrix._size.length, '<');
        }
        if (sSize.length < iSize.length) {
          var i = 0;
          var outer = 0;
          while (iSize[i] === 1 && sSize[i] === 1) {
            i++;
          }
          while (iSize[i] === 1) {
            outer++;
            i++;
          }
          submatrix = array.unsqueeze(submatrix, iSize.length, outer, sSize);
        }
        if (!object.deepEqual(iSize, sSize)) {
          throw new DimensionError(iSize, sSize, '>');
        }
        var size = index.max().map(function(i) {
          return i + 1;
        });
        _fit(matrix, size, defaultValue);
        var dims = iSize.length,
            dim = 0;
        _setSubmatrix(matrix._data, index, submatrix, dims, dim);
      }
      return matrix;
    }
    function _setSubmatrix(data, index, submatrix, dims, dim) {
      var last = (dim == dims - 1),
          range = index.dimension(dim);
      if (last) {
        range.forEach(function(dataIndex, subIndex) {
          validateIndex(dataIndex);
          data[dataIndex] = submatrix[subIndex[0]];
        });
      } else {
        range.forEach(function(dataIndex, subIndex) {
          validateIndex(dataIndex);
          _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);
        });
      }
    }
    DenseMatrix.prototype.resize = function(size, defaultValue, copy) {
      if (!isArray(size))
        throw new TypeError('Array expected');
      var m = copy ? this.clone() : this;
      return _resize(m, size, defaultValue);
    };
    var _resize = function(matrix, size, defaultValue) {
      if (size.length === 0) {
        var v = matrix._data;
        while (isArray(v)) {
          v = v[0];
        }
        return v;
      }
      matrix._size = size.slice(0);
      matrix._data = array.resize(matrix._data, matrix._size, defaultValue);
      return matrix;
    };
    function _fit(matrix, size, defaultValue) {
      var newSize = matrix._size.slice(0),
          changed = false;
      while (newSize.length < size.length) {
        newSize.push(0);
        changed = true;
      }
      for (var i = 0,
          ii = size.length; i < ii; i++) {
        if (size[i] > newSize[i]) {
          newSize[i] = size[i];
          changed = true;
        }
      }
      if (changed) {
        _resize(matrix, newSize, defaultValue);
      }
    }
    DenseMatrix.prototype.clone = function() {
      var m = new DenseMatrix({
        data: object.clone(this._data),
        size: object.clone(this._size),
        datatype: this._datatype
      });
      return m;
    };
    DenseMatrix.prototype.size = function() {
      return this._size;
    };
    DenseMatrix.prototype.map = function(callback) {
      var me = this;
      var recurse = function(value, index) {
        if (isArray(value)) {
          return value.map(function(child, i) {
            return recurse(child, index.concat(i));
          });
        } else {
          return callback(value, index, me);
        }
      };
      return new DenseMatrix({
        data: recurse(this._data, []),
        size: object.clone(this._size),
        datatype: this._datatype
      });
    };
    DenseMatrix.prototype.forEach = function(callback) {
      var me = this;
      var recurse = function(value, index) {
        if (isArray(value)) {
          value.forEach(function(child, i) {
            recurse(child, index.concat(i));
          });
        } else {
          callback(value, index, me);
        }
      };
      recurse(this._data, []);
    };
    DenseMatrix.prototype.toArray = function() {
      return object.clone(this._data);
    };
    DenseMatrix.prototype.valueOf = function() {
      return this._data;
    };
    DenseMatrix.prototype.format = function(options) {
      return string.format(this._data, options);
    };
    DenseMatrix.prototype.toString = function() {
      return string.format(this._data);
    };
    DenseMatrix.prototype.toJSON = function() {
      return {
        mathjs: 'DenseMatrix',
        data: this._data,
        size: this._size,
        datatype: this._datatype
      };
    };
    DenseMatrix.prototype.diagonal = function(k) {
      if (k) {
        if (k.isBigNumber === true)
          k = k.toNumber();
        if (!isNumber(k) || !isInteger(k)) {
          throw new TypeError('The parameter k must be an integer number');
        }
      } else {
        k = 0;
      }
      var kSuper = k > 0 ? k : 0;
      var kSub = k < 0 ? -k : 0;
      var rows = this._size[0];
      var columns = this._size[1];
      var n = Math.min(rows - kSub, columns - kSuper);
      var data = [];
      for (var i = 0; i < n; i++) {
        data[i] = this._data[i + kSub][i + kSuper];
      }
      return new DenseMatrix({
        data: data,
        size: [n],
        datatype: this._datatype
      });
    };
    DenseMatrix.diagonal = function(size, value, k, defaultValue, datatype) {
      if (!isArray(size))
        throw new TypeError('Array expected, size parameter');
      if (size.length !== 2)
        throw new Error('Only two dimensions matrix are supported');
      size = size.map(function(s) {
        if (s && s.isBigNumber === true) {
          s = s.toNumber();
        }
        if (!isNumber(s) || !isInteger(s) || s < 1) {
          throw new Error('Size values must be positive integers');
        }
        return s;
      });
      if (k) {
        if (k && k.isBigNumber === true)
          k = k.toNumber();
        if (!isNumber(k) || !isInteger(k)) {
          throw new TypeError('The parameter k must be an integer number');
        }
      } else {
        k = 0;
      }
      if (defaultValue && isString(datatype)) {
        defaultValue = typed.convert(defaultValue, datatype);
      }
      var kSuper = k > 0 ? k : 0;
      var kSub = k < 0 ? -k : 0;
      var rows = size[0];
      var columns = size[1];
      var n = Math.min(rows - kSub, columns - kSuper);
      var _value;
      if (isArray(value)) {
        if (value.length !== n) {
          throw new Error('Invalid value array length');
        }
        _value = function(i) {
          return value[i];
        };
      } else if (value && value.isMatrix === true) {
        var ms = value.size();
        if (ms.length !== 1 || ms[0] !== n) {
          throw new Error('Invalid matrix length');
        }
        _value = function(i) {
          return value.get([i]);
        };
      } else {
        _value = function() {
          return value;
        };
      }
      if (!defaultValue) {
        defaultValue = (_value(0) && _value(0).isBigNumber === true) ? new type.BigNumber(0) : 0;
      }
      var data = [];
      if (size.length > 0) {
        data = array.resize(data, size, defaultValue);
        for (var d = 0; d < n; d++) {
          data[d + kSub][d + kSuper] = _value(d);
        }
      }
      return new DenseMatrix({
        data: data,
        size: [rows, columns]
      });
    };
    DenseMatrix.fromJSON = function(json) {
      return new DenseMatrix(json);
    };
    DenseMatrix.prototype.swapRows = function(i, j) {
      if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {
        throw new Error('Row index must be positive integers');
      }
      if (this._size.length !== 2) {
        throw new Error('Only two dimensional matrix is supported');
      }
      validateIndex(i, this._size[0]);
      validateIndex(j, this._size[0]);
      DenseMatrix._swapRows(i, j, this._data);
      return this;
    };
    DenseMatrix._swapRows = function(i, j, data) {
      var vi = data[i];
      data[i] = data[j];
      data[j] = vi;
    };
    function preprocess(data) {
      for (var i = 0,
          ii = data.length; i < ii; i++) {
        var elem = data[i];
        if (isArray(elem)) {
          data[i] = preprocess(elem);
        } else if (elem && elem.isMatrix === true) {
          data[i] = preprocess(elem.valueOf());
        }
      }
      return data;
    }
    type.Matrix._storage.dense = DenseMatrix;
    type.Matrix._storage['default'] = DenseMatrix;
    return DenseMatrix;
  }
  exports.name = 'DenseMatrix';
  exports.path = 'type';
  exports.factory = factory;
  exports.lazy = false;
  return module.exports;
});

$__System.registerDynamic("c7", ["bd", "c6", "c4", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var util = $__require('bd');
  var string = util.string;
  var object = util.object;
  var isArray = Array.isArray;
  var isString = string.isString;
  function factory(type, config, load) {
    var DenseMatrix = load($__require('c6'));
    var smaller = load($__require('c4'));
    function ImmutableDenseMatrix(data, datatype) {
      if (!(this instanceof ImmutableDenseMatrix))
        throw new SyntaxError('Constructor must be called with the new operator');
      if (datatype && !isString(datatype))
        throw new Error('Invalid datatype: ' + datatype);
      if ((data && data.isMatrix === true) || isArray(data)) {
        var matrix = new DenseMatrix(data, datatype);
        this._data = matrix._data;
        this._size = matrix._size;
        this._datatype = matrix._datatype;
        this._min = null;
        this._max = null;
      } else if (data && isArray(data.data) && isArray(data.size)) {
        this._data = data.data;
        this._size = data.size;
        this._datatype = data.datatype;
        this._min = typeof data.min !== 'undefined' ? data.min : null;
        this._max = typeof data.max !== 'undefined' ? data.max : null;
      } else if (data) {
        throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');
      } else {
        this._data = [];
        this._size = [0];
        this._datatype = datatype;
        this._min = null;
        this._max = null;
      }
    }
    ImmutableDenseMatrix.prototype = new DenseMatrix();
    ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';
    ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;
    ImmutableDenseMatrix.prototype.subset = function(index) {
      switch (arguments.length) {
        case 1:
          var m = DenseMatrix.prototype.subset.call(this, index);
          if (m.isMatrix) {
            return new ImmutableDenseMatrix({
              data: m._data,
              size: m._size,
              datatype: m._datatype
            });
          }
          return m;
        case 2:
        case 3:
          throw new Error('Cannot invoke set subset on an Immutable Matrix instance');
        default:
          throw new SyntaxError('Wrong number of arguments');
      }
    };
    ImmutableDenseMatrix.prototype.set = function() {
      throw new Error('Cannot invoke set on an Immutable Matrix instance');
    };
    ImmutableDenseMatrix.prototype.resize = function() {
      throw new Error('Cannot invoke resize on an Immutable Matrix instance');
    };
    ImmutableDenseMatrix.prototype.clone = function() {
      var m = new ImmutableDenseMatrix({
        data: object.clone(this._data),
        size: object.clone(this._size),
        datatype: this._datatype
      });
      return m;
    };
    ImmutableDenseMatrix.prototype.toJSON = function() {
      return {
        mathjs: 'ImmutableDenseMatrix',
        data: this._data,
        size: this._size,
        datatype: this._datatype
      };
    };
    ImmutableDenseMatrix.fromJSON = function(json) {
      return new ImmutableDenseMatrix(json);
    };
    ImmutableDenseMatrix.prototype.swapRows = function() {
      throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');
    };
    ImmutableDenseMatrix.prototype.min = function() {
      if (this._min === null) {
        var m = null;
        this.forEach(function(v) {
          if (m === null || smaller(v, m))
            m = v;
        });
        this._min = m !== null ? m : undefined;
      }
      return this._min;
    };
    ImmutableDenseMatrix.prototype.max = function() {
      if (this._max === null) {
        var m = null;
        this.forEach(function(v) {
          if (m === null || smaller(m, v))
            m = v;
        });
        this._max = m !== null ? m : undefined;
      }
      return this._max;
    };
    return ImmutableDenseMatrix;
  }
  exports.name = 'ImmutableDenseMatrix';
  exports.path = 'type';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("c8", ["a4", "a2", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var clone = $__require('a4').clone;
  var isInteger = $__require('a2').isInteger;
  function factory(type) {
    function Index(ranges) {
      if (!(this instanceof Index)) {
        throw new SyntaxError('Constructor must be called with the new operator');
      }
      this._dimensions = [];
      this._isScalar = true;
      for (var i = 0,
          ii = arguments.length; i < ii; i++) {
        var arg = arguments[i];
        if (arg && (arg.isRange === true)) {
          this._dimensions.push(arg);
          this._isScalar = false;
        } else if (arg && (Array.isArray(arg) || arg.isMatrix === true)) {
          var m = _createImmutableMatrix(arg.valueOf());
          this._dimensions.push(m);
          var size = m.size();
          if (size.length !== 1 || size[0] !== 1) {
            this._isScalar = false;
          }
        } else if (typeof arg === 'number') {
          this._dimensions.push(_createImmutableMatrix([arg]));
        } else if (typeof arg === 'string') {
          this._dimensions.push(arg);
        } else {
          throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
        }
      }
    }
    Index.prototype.type = 'Index';
    Index.prototype.isIndex = true;
    function _createImmutableMatrix(arg) {
      for (var i = 0,
          l = arg.length; i < l; i++) {
        if (typeof arg[i] !== 'number' || !isInteger(arg[i])) {
          throw new TypeError('Index parameters must be positive integer numbers');
        }
      }
      return new type.ImmutableDenseMatrix(arg);
    }
    Index.prototype.clone = function() {
      var index = new Index();
      index._dimensions = clone(this._dimensions);
      index._isScalar = this._isScalar;
      return index;
    };
    Index.create = function(ranges) {
      var index = new Index();
      Index.apply(index, ranges);
      return index;
    };
    Index.prototype.size = function() {
      var size = [];
      for (var i = 0,
          ii = this._dimensions.length; i < ii; i++) {
        var d = this._dimensions[i];
        size[i] = (typeof d === 'string') ? 1 : d.size()[0];
      }
      return size;
    };
    Index.prototype.max = function() {
      var values = [];
      for (var i = 0,
          ii = this._dimensions.length; i < ii; i++) {
        var range = this._dimensions[i];
        values[i] = (typeof range === 'string') ? range : range.max();
      }
      return values;
    };
    Index.prototype.min = function() {
      var values = [];
      for (var i = 0,
          ii = this._dimensions.length; i < ii; i++) {
        var range = this._dimensions[i];
        values[i] = (typeof range === 'string') ? range : range.min();
      }
      return values;
    };
    Index.prototype.forEach = function(callback) {
      for (var i = 0,
          ii = this._dimensions.length; i < ii; i++) {
        callback(this._dimensions[i], i, this);
      }
    };
    Index.prototype.dimension = function(dim) {
      return this._dimensions[dim] || null;
    };
    Index.prototype.isObjectProperty = function() {
      return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';
    };
    Index.prototype.getObjectProperty = function() {
      return this.isObjectProperty() ? this._dimensions[0] : null;
    };
    Index.prototype.isScalar = function() {
      return this._isScalar;
    };
    Index.prototype.toArray = function() {
      var array = [];
      for (var i = 0,
          ii = this._dimensions.length; i < ii; i++) {
        var dimension = this._dimensions[i];
        array.push((typeof dimension === 'string') ? dimension : dimension.toArray());
      }
      return array;
    };
    Index.prototype.valueOf = Index.prototype.toArray;
    Index.prototype.toString = function() {
      var strings = [];
      for (var i = 0,
          ii = this._dimensions.length; i < ii; i++) {
        var dimension = this._dimensions[i];
        if (typeof dimension === 'string') {
          strings.push(JSON.stringify(dimension));
        } else {
          strings.push(dimension.toString());
        }
      }
      return '[' + strings.join(', ') + ']';
    };
    Index.prototype.toJSON = function() {
      return {
        mathjs: 'Index',
        dimensions: this._dimensions
      };
    };
    Index.fromJSON = function(json) {
      return Index.create(json.dimensions);
    };
    return Index;
  }
  exports.name = 'Index';
  exports.path = 'type';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("c9", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var SparseMatrix = type.SparseMatrix;
    var sparse = typed('sparse', {
      '': function() {
        return new SparseMatrix([]);
      },
      'string': function(datatype) {
        return new SparseMatrix([], datatype);
      },
      'Array | Matrix': function(data) {
        return new SparseMatrix(data);
      },
      'Array | Matrix, string': function(data, datatype) {
        return new SparseMatrix(data, datatype);
      }
    });
    sparse.toTex = {
      0: '\\begin{bsparse}\\end{bsparse}',
      1: '\\left(${args[0]}\\right)'
    };
    return sparse;
  }
  exports.name = 'sparse';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("ca", ["bf", "c6", "bc", "c1", "c3", "c7", "c8", "cb", "cc", "cd", "c9", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = [$__require('bf'), $__require('c6'), $__require('bc'), $__require('c1'), $__require('c3'), $__require('c7'), $__require('c8'), $__require('cb'), $__require('cc'), $__require('cd'), $__require('c9')];
  return module.exports;
});

$__System.registerDynamic("ce", ["cf", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = [$__require('cf')];
  return module.exports;
});

$__System.registerDynamic("d0", ["ad", "a2", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  var number = $__require('a2');
  function factory(type, config, load, typed) {
    var string = typed('string', {
      '': function() {
        return '';
      },
      'number': number.format,
      'null': function(x) {
        return 'null';
      },
      'boolean': function(x) {
        return x + '';
      },
      'string': function(x) {
        return x;
      },
      'Array | Matrix': function(x) {
        return deepMap(x, string);
      },
      'any': function(x) {
        return String(x);
      }
    });
    string.toTex = {
      0: '\\mathtt{""}',
      1: '\\mathrm{string}\\left(${args[0]}\\right)'
    };
    return string;
  }
  exports.name = 'string';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("d1", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var unit = typed('unit', {
      'Unit': function(x) {
        return x.clone();
      },
      'string': function(x) {
        if (type.Unit.isValuelessUnit(x)) {
          return new type.Unit(null, x);
        }
        return type.Unit.parse(x);
      },
      'number | BigNumber | Fraction | Complex, string': function(value, unit) {
        return new type.Unit(value, unit);
      },
      'Array | Matrix': function(x) {
        return deepMap(x, unit);
      }
    });
    unit.toTex = {
      1: '\\left(${args[0]}\\right)',
      2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
    };
    return unit;
  }
  exports.name = 'unit';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("d2", ["a4", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var lazy = $__require('a4').lazy;
  function factory(type, config, load, typed, math) {
    function fixedUnit(str) {
      var unit = type.Unit.parse(str);
      unit.fixPrefix = true;
      return unit;
    }
    lazy(math, 'speedOfLight', function() {
      return fixedUnit('299792458 m s^-1');
    });
    lazy(math, 'gravitationConstant', function() {
      return fixedUnit('6.6738480e-11 m^3 kg^-1 s^-2');
    });
    lazy(math, 'planckConstant', function() {
      return fixedUnit('6.626069311e-34 J s');
    });
    lazy(math, 'reducedPlanckConstant', function() {
      return fixedUnit('1.05457172647e-34 J s');
    });
    lazy(math, 'magneticConstant', function() {
      return fixedUnit('1.2566370614e-6 N A^-2');
    });
    lazy(math, 'electricConstant', function() {
      return fixedUnit('8.854187817e-12 F m^-1');
    });
    lazy(math, 'vacuumImpedance', function() {
      return fixedUnit('376.730313461 ohm');
    });
    lazy(math, 'coulomb', function() {
      return fixedUnit('8.9875517873681764e9 N m^2 C^-2');
    });
    lazy(math, 'elementaryCharge', function() {
      return fixedUnit('1.60217656535e-19 C');
    });
    lazy(math, 'bohrMagneton', function() {
      return fixedUnit('9.2740096820e-24 J T^-1');
    });
    lazy(math, 'conductanceQuantum', function() {
      return fixedUnit('7.748091734625e-5 S');
    });
    lazy(math, 'inverseConductanceQuantum', function() {
      return fixedUnit('12906.403721742 ohm');
    });
    lazy(math, 'magneticFluxQuantum', function() {
      return fixedUnit('2.06783375846e-15 Wb');
    });
    lazy(math, 'nuclearMagneton', function() {
      return fixedUnit('5.0507835311e-27 J T^-1');
    });
    lazy(math, 'klitzing', function() {
      return fixedUnit('25812.807443484 ohm');
    });
    lazy(math, 'bohrRadius', function() {
      return fixedUnit('5.291772109217e-11 m');
    });
    lazy(math, 'classicalElectronRadius', function() {
      return fixedUnit('2.817940326727e-15 m');
    });
    lazy(math, 'electronMass', function() {
      return fixedUnit('9.1093829140e-31 kg');
    });
    lazy(math, 'fermiCoupling', function() {
      return fixedUnit('1.1663645e-5 GeV^-2');
    });
    lazy(math, 'fineStructure', function() {
      return 7.297352569824e-3;
    });
    lazy(math, 'hartreeEnergy', function() {
      return fixedUnit('4.3597443419e-18 J');
    });
    lazy(math, 'protonMass', function() {
      return fixedUnit('1.67262177774e-27 kg');
    });
    lazy(math, 'deuteronMass', function() {
      return fixedUnit('3.3435830926e-27 kg');
    });
    lazy(math, 'neutronMass', function() {
      return fixedUnit('1.6749271613e-27 kg');
    });
    lazy(math, 'quantumOfCirculation', function() {
      return fixedUnit('3.636947552024e-4 m^2 s^-1');
    });
    lazy(math, 'rydberg', function() {
      return fixedUnit('10973731.56853955 m^-1');
    });
    lazy(math, 'thomsonCrossSection', function() {
      return fixedUnit('6.65245873413e-29 m^2');
    });
    lazy(math, 'weakMixingAngle', function() {
      return 0.222321;
    });
    lazy(math, 'efimovFactor', function() {
      return 22.7;
    });
    lazy(math, 'atomicMass', function() {
      return fixedUnit('1.66053892173e-27 kg');
    });
    lazy(math, 'avogadro', function() {
      return fixedUnit('6.0221412927e23 mol^-1');
    });
    lazy(math, 'boltzmann', function() {
      return fixedUnit('1.380648813e-23 J K^-1');
    });
    lazy(math, 'faraday', function() {
      return fixedUnit('96485.336521 C mol^-1');
    });
    lazy(math, 'firstRadiation', function() {
      return fixedUnit('3.7417715317e-16 W m^2');
    });
    lazy(math, 'loschmidt', function() {
      return fixedUnit('2.686780524e25 m^-3');
    });
    lazy(math, 'gasConstant', function() {
      return fixedUnit('8.314462175 J K^-1 mol^-1');
    });
    lazy(math, 'molarPlanckConstant', function() {
      return fixedUnit('3.990312717628e-10 J s mol^-1');
    });
    lazy(math, 'molarVolume', function() {
      return fixedUnit('2.241396820e-10 m^3 mol^-1');
    });
    lazy(math, 'sackurTetrode', function() {
      return -1.164870823;
    });
    lazy(math, 'secondRadiation', function() {
      return fixedUnit('1.438777013e-2 m K');
    });
    lazy(math, 'stefanBoltzmann', function() {
      return fixedUnit('5.67037321e-8 W m^-2 K^-4');
    });
    lazy(math, 'wienDisplacement', function() {
      return fixedUnit('2.897772126e-3 m K');
    });
    lazy(math, 'molarMass', function() {
      return fixedUnit('1e-3 kg mol^-1');
    });
    lazy(math, 'molarMassC12', function() {
      return fixedUnit('1.2e-2 kg mol^-1');
    });
    lazy(math, 'gravity', function() {
      return fixedUnit('9.80665 m s^-2');
    });
    lazy(math, 'planckLength', function() {
      return fixedUnit('1.61619997e-35 m');
    });
    lazy(math, 'planckMass', function() {
      return fixedUnit('2.1765113e-8 kg');
    });
    lazy(math, 'planckTime', function() {
      return fixedUnit('5.3910632e-44 s');
    });
    lazy(math, 'planckCharge', function() {
      return fixedUnit('1.87554595641e-18 C');
    });
    lazy(math, 'planckTemperature', function() {
      return fixedUnit('1.41683385e+32 K');
    });
  }
  exports.factory = factory;
  exports.lazy = false;
  exports.math = true;
  return module.exports;
});

$__System.registerDynamic("d3", ["d4", "d1", "d2", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = [$__require('d4'), $__require('d1'), $__require('d2')];
  return module.exports;
});

$__System.registerDynamic("d5", ["ae", "af", "b3", "b6", "ba", "ca", "d6", "ce", "d0", "d3", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = [$__require('ae'), $__require('af'), $__require('b3'), $__require('b6'), $__require('ba'), $__require('ca'), $__require('d6'), $__require('ce'), $__require('d0'), $__require('d3')];
  return module.exports;
});

$__System.registerDynamic("d7", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = '3.1.0';
  return module.exports;
});

$__System.registerDynamic("d8", ["a4", "d9", "da", "d7", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var object = $__require('a4');
  var bigConstants = $__require('d9');
  function factory(type, config, load, typed, math) {
    math.on('config', function(curr, prev) {
      if (curr.number !== prev.number) {
        factory(type, config, load, typed, math);
      }
    });
    math['true'] = true;
    math['false'] = false;
    math['null'] = null;
    math['uninitialized'] = $__require('da').UNINITIALIZED;
    if (config.number === 'BigNumber') {
      math['Infinity'] = new type.BigNumber(Infinity);
      math['NaN'] = new type.BigNumber(NaN);
      object.lazy(math, 'pi', function() {
        return bigConstants.pi(type.BigNumber);
      });
      object.lazy(math, 'tau', function() {
        return bigConstants.tau(type.BigNumber);
      });
      object.lazy(math, 'e', function() {
        return bigConstants.e(type.BigNumber);
      });
      object.lazy(math, 'phi', function() {
        return bigConstants.phi(type.BigNumber);
      });
      object.lazy(math, 'E', function() {
        return math.e;
      });
      object.lazy(math, 'LN2', function() {
        return new type.BigNumber(2).ln();
      });
      object.lazy(math, 'LN10', function() {
        return new type.BigNumber(10).ln();
      });
      object.lazy(math, 'LOG2E', function() {
        return new type.BigNumber(1).div(new type.BigNumber(2).ln());
      });
      object.lazy(math, 'LOG10E', function() {
        return new type.BigNumber(1).div(new type.BigNumber(10).ln());
      });
      object.lazy(math, 'PI', function() {
        return math.pi;
      });
      object.lazy(math, 'SQRT1_2', function() {
        return new type.BigNumber('0.5').sqrt();
      });
      object.lazy(math, 'SQRT2', function() {
        return new type.BigNumber(2).sqrt();
      });
    } else {
      math['Infinity'] = Infinity;
      math['NaN'] = NaN;
      math.pi = Math.PI;
      math.tau = Math.PI * 2;
      math.e = Math.E;
      math.phi = 1.61803398874989484820458683436563811772030917980576286213545;
      math.E = math.e;
      math.LN2 = Math.LN2;
      math.LN10 = Math.LN10;
      math.LOG2E = Math.LOG2E;
      math.LOG10E = Math.LOG10E;
      math.PI = math.pi;
      math.SQRT1_2 = Math.SQRT1_2;
      math.SQRT2 = Math.SQRT2;
    }
    math.i = type.Complex.I;
    math.version = $__require('d7');
  }
  exports.factory = factory;
  exports.lazy = false;
  exports.math = true;
  return module.exports;
});

$__System.registerDynamic("db", ["ad", "dc", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var parse = load($__require('dc'));
    return typed('compile', {
      'string': function(expr) {
        return parse(expr).compile();
      },
      'Array | Matrix': function(expr) {
        return deepMap(expr, function(entry) {
          return parse(entry).compile();
        });
      }
    });
  }
  exports.name = 'compile';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("dd", ["ad", "dc", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var parse = load($__require('dc'));
    return typed('compile', {
      'string': function(expr) {
        var scope = {};
        return parse(expr).compile().eval(scope);
      },
      'string, Object': function(expr, scope) {
        return parse(expr).compile().eval(scope);
      },
      'Array | Matrix': function(expr) {
        var scope = {};
        return deepMap(expr, function(entry) {
          return parse(entry).compile().eval(scope);
        });
      },
      'Array | Matrix, Object': function(expr, scope) {
        return deepMap(expr, function(entry) {
          return parse(entry).compile().eval(scope);
        });
      }
    });
  }
  exports.name = 'eval';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("de", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'bignumber',
    'category': 'Construction',
    'syntax': ['bignumber(x)'],
    'description': 'Create a big number from a number or string.',
    'examples': ['0.1 + 0.2', 'bignumber(0.1) + bignumber(0.2)', 'bignumber("7.2")', 'bignumber("7.2e500")', 'bignumber([0.1, 0.2, 0.3])'],
    'seealso': ['boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit']
  };
  return module.exports;
});

$__System.registerDynamic("df", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'boolean',
    'category': 'Construction',
    'syntax': ['x', 'boolean(x)'],
    'description': 'Convert a string or number into a boolean.',
    'examples': ['boolean(0)', 'boolean(1)', 'boolean(3)', 'boolean("true")', 'boolean("false")', 'boolean([1, 0, 1, 1])'],
    'seealso': ['bignumber', 'complex', 'index', 'matrix', 'number', 'string', 'unit']
  };
  return module.exports;
});

$__System.registerDynamic("e0", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'complex',
    'category': 'Construction',
    'syntax': ['complex()', 'complex(re, im)', 'complex(string)'],
    'description': 'Create a complex number.',
    'examples': ['complex()', 'complex(2, 3)', 'complex("7 - 2i")'],
    'seealso': ['bignumber', 'boolean', 'index', 'matrix', 'number', 'string', 'unit']
  };
  return module.exports;
});

$__System.registerDynamic("e1", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'fraction',
    'category': 'Construction',
    'syntax': ['fraction(num)', 'fraction(num,den)'],
    'description': 'Create a fraction from a number or from a numerator and denominator.',
    'examples': ['fraction(0.125)', 'fraction(1, 3) + fraction(2, 5)'],
    'seealso': ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'string', 'unit']
  };
  return module.exports;
});

$__System.registerDynamic("e2", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'index',
    'category': 'Construction',
    'syntax': ['[start]', '[start:end]', '[start:step:end]', '[start1, start 2, ...]', '[start1:end1, start2:end2, ...]', '[start1:step1:end1, start2:step2:end2, ...]'],
    'description': 'Create an index to get or replace a subset of a matrix',
    'examples': ['[]', '[1, 2, 3]', 'A = [1, 2, 3; 4, 5, 6]', 'A[1, :]', 'A[1, 2] = 50', 'A[0:2, 0:2] = ones(2, 2)'],
    'seealso': ['bignumber', 'boolean', 'complex', 'matrix,', 'number', 'range', 'string', 'unit']
  };
  return module.exports;
});

$__System.registerDynamic("e3", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'matrix',
    'category': 'Construction',
    'syntax': ['[]', '[a1, b1, ...; a2, b2, ...]', 'matrix()', 'matrix("dense")', 'matrix([...])'],
    'description': 'Create a matrix.',
    'examples': ['[]', '[1, 2, 3]', '[1, 2, 3; 4, 5, 6]', 'matrix()', 'matrix([3, 4])', 'matrix([3, 4; 5, 6], "sparse")', 'matrix([3, 4; 5, 6], "sparse", "number")'],
    'seealso': ['bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'sparse']
  };
  return module.exports;
});

$__System.registerDynamic("e4", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'number',
    'category': 'Construction',
    'syntax': ['x', 'number(x)'],
    'description': 'Create a number or convert a string or boolean into a number.',
    'examples': ['2', '2e3', '4.05', 'number(2)', 'number("7.2")', 'number(true)', 'number([true, false, true, true])', 'number("52cm", "m")'],
    'seealso': ['bignumber', 'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit']
  };
  return module.exports;
});

$__System.registerDynamic("e5", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'sparse',
    'category': 'Construction',
    'syntax': ['sparse()', 'sparse([a1, b1, ...; a1, b2, ...])', 'sparse([a1, b1, ...; a1, b2, ...], "number")'],
    'description': 'Create a sparse matrix.',
    'examples': ['sparse()', 'sparse([3, 4; 5, 6])', 'sparse([3, 0; 5, 0], "number")'],
    'seealso': ['bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'matrix']
  };
  return module.exports;
});

$__System.registerDynamic("e6", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'string',
    'category': 'Construction',
    'syntax': ['"text"', 'string(x)'],
    'description': 'Create a string or convert a value to a string',
    'examples': ['"Hello World!"', 'string(4.2)', 'string(3 + 2i)'],
    'seealso': ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'unit']
  };
  return module.exports;
});

$__System.registerDynamic("e7", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'unit',
    'category': 'Construction',
    'syntax': ['value unit', 'unit(value, unit)', 'unit(string)'],
    'description': 'Create a unit.',
    'examples': ['5.5 mm', '3 inch', 'unit(7.1, "kilogram")', 'unit("23 deg")'],
    'seealso': ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'string']
  };
  return module.exports;
});

$__System.registerDynamic("e8", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'e',
    'category': 'Constants',
    'syntax': ['e'],
    'description': 'Euler\'s number, the base of the natural logarithm. Approximately equal to 2.71828',
    'examples': ['e', 'e ^ 2', 'exp(2)', 'log(e)'],
    'seealso': ['exp']
  };
  return module.exports;
});

$__System.registerDynamic("e9", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'false',
    'category': 'Constants',
    'syntax': ['false'],
    'description': 'Boolean value false',
    'examples': ['false'],
    'seealso': ['true']
  };
  return module.exports;
});

$__System.registerDynamic("ea", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'i',
    'category': 'Constants',
    'syntax': ['i'],
    'description': 'Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.',
    'examples': ['i', 'i * i', 'sqrt(-1)'],
    'seealso': []
  };
  return module.exports;
});

$__System.registerDynamic("eb", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'Infinity',
    'category': 'Constants',
    'syntax': ['Infinity'],
    'description': 'Infinity, a number which is larger than the maximum number that can be handled by a floating point number.',
    'examples': ['Infinity', '1 / 0'],
    'seealso': []
  };
  return module.exports;
});

$__System.registerDynamic("ec", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'LN2',
    'category': 'Constants',
    'syntax': ['LN2'],
    'description': 'Returns the natural logarithm of 2, approximately equal to 0.693',
    'examples': ['LN2', 'log(2)'],
    'seealso': []
  };
  return module.exports;
});

$__System.registerDynamic("ed", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'LN10',
    'category': 'Constants',
    'syntax': ['LN10'],
    'description': 'Returns the natural logarithm of 10, approximately equal to 2.302',
    'examples': ['LN10', 'log(10)'],
    'seealso': []
  };
  return module.exports;
});

$__System.registerDynamic("ee", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'LOG2E',
    'category': 'Constants',
    'syntax': ['LOG2E'],
    'description': 'Returns the base-2 logarithm of E, approximately equal to 1.442',
    'examples': ['LOG2E', 'log(e, 2)'],
    'seealso': []
  };
  return module.exports;
});

$__System.registerDynamic("ef", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'LOG10E',
    'category': 'Constants',
    'syntax': ['LOG10E'],
    'description': 'Returns the base-10 logarithm of E, approximately equal to 0.434',
    'examples': ['LOG10E', 'log(e, 10)'],
    'seealso': []
  };
  return module.exports;
});

$__System.registerDynamic("f0", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'NaN',
    'category': 'Constants',
    'syntax': ['NaN'],
    'description': 'Not a number',
    'examples': ['NaN', '0 / 0'],
    'seealso': []
  };
  return module.exports;
});

$__System.registerDynamic("f1", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'null',
    'category': 'Constants',
    'syntax': ['null'],
    'description': 'Value null',
    'examples': ['null'],
    'seealso': ['true', 'false']
  };
  return module.exports;
});

$__System.registerDynamic("f2", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'pi',
    'category': 'Constants',
    'syntax': ['pi'],
    'description': 'The number pi is a mathematical constant that is the ratio of a circle\'s circumference to its diameter, and is approximately equal to 3.14159',
    'examples': ['pi', 'sin(pi/2)'],
    'seealso': ['tau']
  };
  return module.exports;
});

$__System.registerDynamic("f3", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'phi',
    'category': 'Constants',
    'syntax': ['phi'],
    'description': 'Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...',
    'examples': ['tau'],
    'seealso': []
  };
  return module.exports;
});

$__System.registerDynamic("f4", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'SQRT1_2',
    'category': 'Constants',
    'syntax': ['SQRT1_2'],
    'description': 'Returns the square root of 1/2, approximately equal to 0.707',
    'examples': ['SQRT1_2', 'sqrt(1/2)'],
    'seealso': []
  };
  return module.exports;
});

$__System.registerDynamic("f5", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'SQRT2',
    'category': 'Constants',
    'syntax': ['SQRT2'],
    'description': 'Returns the square root of 2, approximately equal to 1.414',
    'examples': ['SQRT2', 'sqrt(2)'],
    'seealso': []
  };
  return module.exports;
});

$__System.registerDynamic("f6", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'tau',
    'category': 'Constants',
    'syntax': ['tau'],
    'description': 'Tau is the ratio constant of a circle\'s circumference to radius, equal to 2 * pi, approximately 6.2832.',
    'examples': ['tau', '2 * pi'],
    'seealso': ['pi']
  };
  return module.exports;
});

$__System.registerDynamic("f7", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'true',
    'category': 'Constants',
    'syntax': ['true'],
    'description': 'Boolean value true',
    'examples': ['true'],
    'seealso': ['false']
  };
  return module.exports;
});

$__System.registerDynamic("f8", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'version',
    'category': 'Constants',
    'syntax': ['version'],
    'description': 'A string with the version number of math.js',
    'examples': ['version'],
    'seealso': []
  };
  return module.exports;
});

$__System.registerDynamic("f9", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'lsolve',
    'category': 'Algebra',
    'syntax': ['x=lsolve(L, b)'],
    'description': 'Solves the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',
    'examples': ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lsolve(a, b)'],
    'seealso': ['lup', 'lusolve', 'usolve', 'matrix', 'sparse']
  };
  return module.exports;
});

$__System.registerDynamic("fa", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'lup',
    'category': 'Algebra',
    'syntax': ['lup(m)'],
    'description': 'Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U',
    'examples': ['lup([[2, 1], [1, 4]])', 'lup(matrix([[2, 1], [1, 4]]))', 'lup(sparse([[2, 1], [1, 4]]))'],
    'seealso': ['lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'slu']
  };
  return module.exports;
});

$__System.registerDynamic("fb", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'lusolve',
    'category': 'Algebra',
    'syntax': ['x=lusolve(A, b)', 'x=lusolve(lu, b)'],
    'description': 'Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.',
    'examples': ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lusolve(a, b)'],
    'seealso': ['lup', 'slu', 'lsolve', 'usolve', 'matrix', 'sparse']
  };
  return module.exports;
});

$__System.registerDynamic("fc", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'slu',
    'category': 'Algebra',
    'syntax': ['slu(A, order, threshold)'],
    'description': 'Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U',
    'examples': ['slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)'],
    'seealso': ['lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'lup']
  };
  return module.exports;
});

$__System.registerDynamic("fd", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'usolve',
    'category': 'Algebra',
    'syntax': ['x=usolve(U, b)'],
    'description': 'Solves the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',
    'examples': ['x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'],
    'seealso': ['lup', 'lusolve', 'lsolve', 'matrix', 'sparse']
  };
  return module.exports;
});

$__System.registerDynamic("fe", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'abs',
    'category': 'Arithmetic',
    'syntax': ['abs(x)'],
    'description': 'Compute the absolute value.',
    'examples': ['abs(3.5)', 'abs(-4.2)'],
    'seealso': ['sign']
  };
  return module.exports;
});

$__System.registerDynamic("ff", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'add',
    'category': 'Operators',
    'syntax': ['x + y', 'add(x, y)'],
    'description': 'Add two values.',
    'examples': ['a = 2.1 + 3.6', 'a - 3.6', '3 + 2i', '3 cm + 2 inch', '"2.3" + "4"'],
    'seealso': ['subtract']
  };
  return module.exports;
});

$__System.registerDynamic("100", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'cbrt',
    'category': 'Arithmetic',
    'syntax': ['cbrt(x)', 'cbrt(x, allRoots)'],
    'description': 'Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned',
    'examples': ['cbrt(64)', 'cube(4)', 'cbrt(-8)', 'cbrt(2 + 3i)', 'cbrt(8i)', 'cbrt(8i, true)', 'cbrt(27 m^3)'],
    'seealso': ['square', 'sqrt', 'cube', 'multiply']
  };
  return module.exports;
});

$__System.registerDynamic("101", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'ceil',
    'category': 'Arithmetic',
    'syntax': ['ceil(x)'],
    'description': 'Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.',
    'examples': ['ceil(3.2)', 'ceil(3.8)', 'ceil(-4.2)'],
    'seealso': ['floor', 'fix', 'round']
  };
  return module.exports;
});

$__System.registerDynamic("102", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'cube',
    'category': 'Arithmetic',
    'syntax': ['cube(x)'],
    'description': 'Compute the cube of a value. The cube of x is x * x * x.',
    'examples': ['cube(2)', '2^3', '2 * 2 * 2'],
    'seealso': ['multiply', 'square', 'pow']
  };
  return module.exports;
});

$__System.registerDynamic("103", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'divide',
    'category': 'Operators',
    'syntax': ['x / y', 'divide(x, y)'],
    'description': 'Divide two values.',
    'examples': ['a = 2 / 3', 'a * 3', '4.5 / 2', '3 + 4 / 2', '(3 + 4) / 2', '18 km / 4.5'],
    'seealso': ['multiply']
  };
  return module.exports;
});

$__System.registerDynamic("104", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'dotDivide',
    'category': 'Operators',
    'syntax': ['x ./ y', 'dotDivide(x, y)'],
    'description': 'Divide two values element wise.',
    'examples': ['a = [1, 2, 3; 4, 5, 6]', 'b = [2, 1, 1; 3, 2, 5]', 'a ./ b'],
    'seealso': ['multiply', 'dotMultiply', 'divide']
  };
  return module.exports;
});

$__System.registerDynamic("105", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'dotMultiply',
    'category': 'Operators',
    'syntax': ['x .* y', 'dotMultiply(x, y)'],
    'description': 'Multiply two values element wise.',
    'examples': ['a = [1, 2, 3; 4, 5, 6]', 'b = [2, 1, 1; 3, 2, 5]', 'a .* b'],
    'seealso': ['multiply', 'divide', 'dotDivide']
  };
  return module.exports;
});

$__System.registerDynamic("106", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'dotpow',
    'category': 'Operators',
    'syntax': ['x .^ y', 'dotpow(x, y)'],
    'description': 'Calculates the power of x to y element wise.',
    'examples': ['a = [1, 2, 3; 4, 5, 6]', 'a .^ 2'],
    'seealso': ['pow']
  };
  return module.exports;
});

$__System.registerDynamic("107", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'exp',
    'category': 'Arithmetic',
    'syntax': ['exp(x)'],
    'description': 'Calculate the exponent of a value.',
    'examples': ['exp(1.3)', 'e ^ 1.3', 'log(exp(1.3))', 'x = 2.4', '(exp(i*x) == cos(x) + i*sin(x))   # Euler\'s formula'],
    'seealso': ['pow', 'log']
  };
  return module.exports;
});

$__System.registerDynamic("108", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'fix',
    'category': 'Arithmetic',
    'syntax': ['fix(x)'],
    'description': 'Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.',
    'examples': ['fix(3.2)', 'fix(3.8)', 'fix(-4.2)', 'fix(-4.8)'],
    'seealso': ['ceil', 'floor', 'round']
  };
  return module.exports;
});

$__System.registerDynamic("109", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'floor',
    'category': 'Arithmetic',
    'syntax': ['floor(x)'],
    'description': 'Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.',
    'examples': ['floor(3.2)', 'floor(3.8)', 'floor(-4.2)'],
    'seealso': ['ceil', 'fix', 'round']
  };
  return module.exports;
});

$__System.registerDynamic("10a", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'gcd',
    'category': 'Arithmetic',
    'syntax': ['gcd(a, b)', 'gcd(a, b, c, ...)'],
    'description': 'Compute the greatest common divisor.',
    'examples': ['gcd(8, 12)', 'gcd(-4, 6)', 'gcd(25, 15, -10)'],
    'seealso': ['lcm', 'xgcd']
  };
  return module.exports;
});

$__System.registerDynamic("10b", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'hypot',
    'category': 'Arithmetic',
    'syntax': ['hypot(a, b, c, ...)', 'hypot([a, b, c, ...])'],
    'description': 'Calculate the hypotenusa of a list with values. ',
    'examples': ['hypot(3, 4)', 'sqrt(3^2 + 4^2)', 'hypot(-2)', 'hypot([3, 4, 5])'],
    'seealso': ['abs', 'norm']
  };
  return module.exports;
});

$__System.registerDynamic("10c", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'lcm',
    'category': 'Arithmetic',
    'syntax': ['lcm(x, y)'],
    'description': 'Compute the least common multiple.',
    'examples': ['lcm(4, 6)', 'lcm(6, 21)', 'lcm(6, 21, 5)'],
    'seealso': ['gcd']
  };
  return module.exports;
});

$__System.registerDynamic("10d", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'log',
    'category': 'Arithmetic',
    'syntax': ['log(x)', 'log(x, base)'],
    'description': 'Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).',
    'examples': ['log(3.5)', 'a = log(2.4)', 'exp(a)', '10 ^ 4', 'log(10000, 10)', 'log(10000) / log(10)', 'b = log(1024, 2)', '2 ^ b'],
    'seealso': ['exp', 'log10']
  };
  return module.exports;
});

$__System.registerDynamic("10e", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'log10',
    'category': 'Arithmetic',
    'syntax': ['log10(x)'],
    'description': 'Compute the 10-base logarithm of a value.',
    'examples': ['log10(0.00001)', 'log10(10000)', '10 ^ 4', 'log(10000) / log(10)', 'log(10000, 10)'],
    'seealso': ['exp', 'log']
  };
  return module.exports;
});

$__System.registerDynamic("10f", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'mod',
    'category': 'Operators',
    'syntax': ['x % y', 'x mod y', 'mod(x, y)'],
    'description': 'Calculates the modulus, the remainder of an integer division.',
    'examples': ['7 % 3', '11 % 2', '10 mod 4', 'function isOdd(x) = x % 2', 'isOdd(2)', 'isOdd(3)'],
    'seealso': ['divide']
  };
  return module.exports;
});

$__System.registerDynamic("110", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'multiply',
    'category': 'Operators',
    'syntax': ['x * y', 'multiply(x, y)'],
    'description': 'multiply two values.',
    'examples': ['a = 2.1 * 3.4', 'a / 3.4', '2 * 3 + 4', '2 * (3 + 4)', '3 * 2.1 km'],
    'seealso': ['divide']
  };
  return module.exports;
});

$__System.registerDynamic("111", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'norm',
    'category': 'Arithmetic',
    'syntax': ['norm(x)', 'norm(x, p)'],
    'description': 'Calculate the norm of a number, vector or matrix.',
    'examples': ['abs(-3.5)', 'norm(-3.5)', 'norm(3 - 4i))', 'norm([1, 2, -3], Infinity)', 'norm([1, 2, -3], -Infinity)', 'norm([3, 4], 2)', 'norm([[1, 2], [3, 4]], 1)', 'norm([[1, 2], [3, 4]], \'inf\')', 'norm([[1, 2], [3, 4]], \'fro\')']
  };
  return module.exports;
});

$__System.registerDynamic("112", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'nthRoot',
    'category': 'Arithmetic',
    'syntax': ['nthRoot(a)', 'nthRoot(a, root)'],
    'description': 'Calculate the nth root of a value. ' + 'The principal nth root of a positive real number A, ' + 'is the positive real solution of the equation "x^root = A".',
    'examples': ['4 ^ 3', 'nthRoot(64, 3)', 'nthRoot(9, 2)', 'sqrt(9)'],
    'seealso': ['sqrt', 'pow']
  };
  return module.exports;
});

$__System.registerDynamic("113", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'pow',
    'category': 'Operators',
    'syntax': ['x ^ y', 'pow(x, y)'],
    'description': 'Calculates the power of x to y, x^y.',
    'examples': ['2^3 = 8', '2*2*2', '1 + e ^ (pi * i)'],
    'seealso': ['multiply']
  };
  return module.exports;
});

$__System.registerDynamic("114", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'round',
    'category': 'Arithmetic',
    'syntax': ['round(x)', 'round(x, n)'],
    'description': 'round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.',
    'examples': ['round(3.2)', 'round(3.8)', 'round(-4.2)', 'round(-4.8)', 'round(pi, 3)', 'round(123.45678, 2)'],
    'seealso': ['ceil', 'floor', 'fix']
  };
  return module.exports;
});

$__System.registerDynamic("115", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'sign',
    'category': 'Arithmetic',
    'syntax': ['sign(x)'],
    'description': 'Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.',
    'examples': ['sign(3.5)', 'sign(-4.2)', 'sign(0)'],
    'seealso': ['abs']
  };
  return module.exports;
});

$__System.registerDynamic("116", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'sqrt',
    'category': 'Arithmetic',
    'syntax': ['sqrt(x)'],
    'description': 'Compute the square root value. If x = y * y, then y is the square root of x.',
    'examples': ['sqrt(25)', '5 * 5', 'sqrt(-1)'],
    'seealso': ['square', 'multiply']
  };
  return module.exports;
});

$__System.registerDynamic("117", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'square',
    'category': 'Arithmetic',
    'syntax': ['square(x)'],
    'description': 'Compute the square of a value. The square of x is x * x.',
    'examples': ['square(3)', 'sqrt(9)', '3^2', '3 * 3'],
    'seealso': ['multiply', 'pow', 'sqrt', 'cube']
  };
  return module.exports;
});

$__System.registerDynamic("118", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'subtract',
    'category': 'Operators',
    'syntax': ['x - y', 'subtract(x, y)'],
    'description': 'subtract two values.',
    'examples': ['a = 5.3 - 2', 'a + 2', '2/3 - 1/6', '2 * 3 - 3', '2.1 km - 500m'],
    'seealso': ['add']
  };
  return module.exports;
});

$__System.registerDynamic("119", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'unaryMinus',
    'category': 'Operators',
    'syntax': ['-x', 'unaryMinus(x)'],
    'description': 'Inverse the sign of a value. Converts booleans and strings to numbers.',
    'examples': ['-4.5', '-(-5.6)', '-"22"'],
    'seealso': ['add', 'subtract', 'unaryPlus']
  };
  return module.exports;
});

$__System.registerDynamic("11a", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'unaryPlus',
    'category': 'Operators',
    'syntax': ['+x', 'unaryPlus(x)'],
    'description': 'Converts booleans and strings to numbers.',
    'examples': ['+true', '+"2"'],
    'seealso': ['add', 'subtract', 'unaryMinus']
  };
  return module.exports;
});

$__System.registerDynamic("11b", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'xgcd',
    'category': 'Arithmetic',
    'syntax': ['xgcd(a, b)'],
    'description': 'Calculate the extended greatest common divisor for two values',
    'examples': ['xgcd(8, 12)', 'gcd(8, 12)', 'xgcd(36163, 21199)'],
    'seealso': ['gcd', 'lcm']
  };
  return module.exports;
});

$__System.registerDynamic("11c", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'bitAnd',
    'category': 'Bitwise',
    'syntax': ['x & y', 'bitAnd(x, y)'],
    'description': 'Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0',
    'examples': ['5 & 3', 'bitAnd(53, 131)', '[1, 12, 31] & 42'],
    'seealso': ['bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
  };
  return module.exports;
});

$__System.registerDynamic("11d", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'bitNot',
    'category': 'Bitwise',
    'syntax': ['~x', 'bitNot(x)'],
    'description': 'Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.',
    'examples': ['~1', '~2', 'bitNot([2, -3, 4])'],
    'seealso': ['bitAnd', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
  };
  return module.exports;
});

$__System.registerDynamic("11e", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'bitOr',
    'category': 'Bitwise',
    'syntax': ['x | y', 'bitOr(x, y)'],
    'description': 'Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.',
    'examples': ['5 | 3', 'bitOr([1, 2, 3], 4)'],
    'seealso': ['bitAnd', 'bitNot', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
  };
  return module.exports;
});

$__System.registerDynamic("11f", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'bitXor',
    'category': 'Bitwise',
    'syntax': ['bitXor(x, y)'],
    'description': 'Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.',
    'examples': ['bitOr(1, 2)', 'bitXor([2, 3, 4], 4)'],
    'seealso': ['bitAnd', 'bitNot', 'bitOr', 'leftShift', 'rightArithShift', 'rightLogShift']
  };
  return module.exports;
});

$__System.registerDynamic("120", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'leftShift',
    'category': 'Bitwise',
    'syntax': ['x << y', 'leftShift(x, y)'],
    'description': 'Bitwise left logical shift of a value x by y number of bits.',
    'examples': ['4 << 1', '8 >> 1'],
    'seealso': ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'rightArithShift', 'rightLogShift']
  };
  return module.exports;
});

$__System.registerDynamic("121", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'rightArithShift',
    'category': 'Bitwise',
    'syntax': ['x >> y', 'leftShift(x, y)'],
    'description': 'Bitwise right arithmetic shift of a value x by y number of bits.',
    'examples': ['8 >> 1', '4 << 1', '-12 >> 2'],
    'seealso': ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightLogShift']
  };
  return module.exports;
});

$__System.registerDynamic("122", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'rightLogShift',
    'category': 'Bitwise',
    'syntax': ['x >> y', 'leftShift(x, y)'],
    'description': 'Bitwise right logical shift of a value x by y number of bits.',
    'examples': ['8 >>> 1', '4 << 1', '-12 >>> 2'],
    'seealso': ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift']
  };
  return module.exports;
});

$__System.registerDynamic("123", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'bellNumbers',
    'category': 'Combinatorics',
    'syntax': ['bellNumbers(n)'],
    'description': 'The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.',
    'examples': ['bellNumbers(3)', 'bellNumbers(8)'],
    'seealso': ['stirlingS2']
  };
  return module.exports;
});

$__System.registerDynamic("124", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'catalan',
    'category': 'Combinatorics',
    'syntax': ['catalan(n)'],
    'description': 'The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.',
    'examples': ['catalan(3)', 'catalan(8)'],
    'seealso': ['bellNumbers']
  };
  return module.exports;
});

$__System.registerDynamic("125", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'composition',
    'category': 'Combinatorics',
    'syntax': ['composition(n, k)'],
    'description': 'The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.',
    'examples': ['composition(5, 3)'],
    'seealso': ['combinations']
  };
  return module.exports;
});

$__System.registerDynamic("126", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'stirlingS2',
    'category': 'Combinatorics',
    'syntax': ['stirlingS2(n, k)'],
    'description': 'he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.',
    'examples': ['stirlingS2(5, 3)'],
    'seealso': ['bellNumbers']
  };
  return module.exports;
});

$__System.registerDynamic("127", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'config',
    'category': 'Core',
    'syntax': ['config()', 'config(options)'],
    'description': 'Get configuration or change configuration.',
    'examples': ['config()', '1/3 + 1/4', 'config({number: "Fraction"})', '1/3 + 1/4'],
    'seealso': []
  };
  return module.exports;
});

$__System.registerDynamic("128", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'import',
    'category': 'Core',
    'syntax': ['import(functions)', 'import(functions, options)'],
    'description': 'Import functions or constants from an object.',
    'examples': ['import({myFn: f(x)=x^2, myConstant: 32 })', 'myFn(2)', 'myConstant'],
    'seealso': []
  };
  return module.exports;
});

$__System.registerDynamic("129", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'typed',
    'category': 'Core',
    'syntax': ['typed(signatures)', 'typed(name, signatures)'],
    'description': 'Create a typed function.',
    'examples': ['double = typed({ "number, number": f(x)=x+x })', 'double(2)', 'double("hello")'],
    'seealso': []
  };
  return module.exports;
});

$__System.registerDynamic("12a", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'arg',
    'category': 'Complex',
    'syntax': ['arg(x)'],
    'description': 'Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).',
    'examples': ['arg(2 + 2i)', 'atan2(3, 2)', 'arg(2 + 3i)'],
    'seealso': ['re', 'im', 'conj', 'abs']
  };
  return module.exports;
});

$__System.registerDynamic("12b", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'conj',
    'category': 'Complex',
    'syntax': ['conj(x)'],
    'description': 'Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.',
    'examples': ['conj(2 + 3i)', 'conj(2 - 3i)', 'conj(-5.2i)'],
    'seealso': ['re', 'im', 'abs', 'arg']
  };
  return module.exports;
});

$__System.registerDynamic("12c", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 're',
    'category': 'Complex',
    'syntax': ['re(x)'],
    'description': 'Get the real part of a complex number.',
    'examples': ['re(2 + 3i)', 'im(2 + 3i)', 're(-5.2i)', 're(2.4)'],
    'seealso': ['im', 'conj', 'abs', 'arg']
  };
  return module.exports;
});

$__System.registerDynamic("12d", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'im',
    'category': 'Complex',
    'syntax': ['im(x)'],
    'description': 'Get the imaginary part of a complex number.',
    'examples': ['im(2 + 3i)', 're(2 + 3i)', 'im(-5.2i)', 'im(2.4)'],
    'seealso': ['re', 'conj', 'abs', 'arg']
  };
  return module.exports;
});

$__System.registerDynamic("12e", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'eval',
    'category': 'Expression',
    'syntax': ['eval(expression)', 'eval([expr1, expr2, expr3, ...])'],
    'description': 'Evaluate an expression or an array with expressions.',
    'examples': ['eval("2 + 3")', 'eval("sqrt(" + 4 + ")")'],
    'seealso': []
  };
  return module.exports;
});

$__System.registerDynamic("12f", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'help',
    'category': 'Expression',
    'syntax': ['help(object)', 'help(string)'],
    'description': 'Display documentation on a function or data type.',
    'examples': ['help(sqrt)', 'help("complex")'],
    'seealso': []
  };
  return module.exports;
});

$__System.registerDynamic("130", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'distance',
    'category': 'Geometry',
    'syntax': ['distance([x1, y1], [x2, y2])', 'distance([[x1, y1], [x2, y2])'],
    'description': 'Calculates the Euclidean distance between two points.',
    'examples': ['distance([0,0], [4,4])', 'distance([[0,0], [4,4]])'],
    'seealso': []
  };
  return module.exports;
});

$__System.registerDynamic("131", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'intersect',
    'category': 'Geometry',
    'syntax': ['intersect(expr1, expr2, expr3, expr4)', 'intersect(expr1, expr2, expr3)'],
    'description': 'Computes the intersection point of lines and/or planes.',
    'examples': ['intersect([0, 0], [10, 10], [10, 0], [0, 10])', 'intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])'],
    'seealso': []
  };
  return module.exports;
});

$__System.registerDynamic("132", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'and',
    'category': 'Logical',
    'syntax': ['x and y', 'and(x, y)'],
    'description': 'Logical and. Test whether two values are both defined with a nonzero/nonempty value.',
    'examples': ['true and false', 'true and true', '2 and 4'],
    'seealso': ['not', 'or', 'xor']
  };
  return module.exports;
});

$__System.registerDynamic("133", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'not',
    'category': 'Logical',
    'syntax': ['not x', 'not(x)'],
    'description': 'Logical not. Flips the boolean value of given argument.',
    'examples': ['not true', 'not false', 'not 2', 'not 0'],
    'seealso': ['and', 'or', 'xor']
  };
  return module.exports;
});

$__System.registerDynamic("134", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'or',
    'category': 'Logical',
    'syntax': ['x or y', 'or(x, y)'],
    'description': 'Logical or. Test if at least one value is defined with a nonzero/nonempty value.',
    'examples': ['true or false', 'false or false', '0 or 4'],
    'seealso': ['not', 'and', 'xor']
  };
  return module.exports;
});

$__System.registerDynamic("135", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'xor',
    'category': 'Logical',
    'syntax': ['x or y', 'or(x, y)'],
    'description': 'Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.',
    'examples': ['true xor false', 'false xor false', 'true xor true', '0 or 4'],
    'seealso': ['not', 'and', 'or']
  };
  return module.exports;
});

$__System.registerDynamic("136", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'concat',
    'category': 'Matrix',
    'syntax': ['concat(A, B, C, ...)', 'concat(A, B, C, ..., dim)'],
    'description': 'Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.',
    'examples': ['A = [1, 2; 5, 6]', 'B = [3, 4; 7, 8]', 'concat(A, B)', 'concat(A, B, 1)', 'concat(A, B, 2)'],
    'seealso': ['det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
  };
  return module.exports;
});

$__System.registerDynamic("137", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'cross',
    'category': 'Matrix',
    'syntax': ['cross(A, B)'],
    'description': 'Calculate the cross product for two vectors in three dimensional space.',
    'examples': ['cross([1, 1, 0],  [0, 1, 1])', 'cross([3, -3, 1], [4, 9, 2])', 'cross([2, 3, 4],  [5, 6, 7])'],
    'seealso': ['multiply', 'dot']
  };
  return module.exports;
});

$__System.registerDynamic("138", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'det',
    'category': 'Matrix',
    'syntax': ['det(x)'],
    'description': 'Calculate the determinant of a matrix',
    'examples': ['det([1, 2; 3, 4])', 'det([-2, 2, 3; -1, 1, 3; 2, 0, -1])'],
    'seealso': ['concat', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
  };
  return module.exports;
});

$__System.registerDynamic("139", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'diag',
    'category': 'Matrix',
    'syntax': ['diag(x)', 'diag(x, k)'],
    'description': 'Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.',
    'examples': ['diag(1:3)', 'diag(1:3, 1)', 'a = [1, 2, 3; 4, 5, 6; 7, 8, 9]', 'diag(a)'],
    'seealso': ['concat', 'det', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
  };
  return module.exports;
});

$__System.registerDynamic("13a", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'dot',
    'category': 'Matrix',
    'syntax': ['dot(A, B)'],
    'description': 'Calculate the dot product of two vectors. ' + 'The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] ' + 'is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn',
    'examples': ['dot([2, 4, 1], [2, 2, 3])', '[2, 4, 1] * [2, 2, 3]'],
    'seealso': ['multiply', 'cross']
  };
  return module.exports;
});

$__System.registerDynamic("13b", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'eye',
    'category': 'Matrix',
    'syntax': ['eye(n)', 'eye(m, n)', 'eye([m, n])', 'eye'],
    'description': 'Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.',
    'examples': ['eye(3)', 'eye(3, 5)', 'a = [1, 2, 3; 4, 5, 6]', 'eye(size(a))'],
    'seealso': ['concat', 'det', 'diag', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
  };
  return module.exports;
});

$__System.registerDynamic("13c", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'filter',
    'category': 'Matrix',
    'syntax': ['filter(x, test)'],
    'description': 'Filter items in a matrix.',
    'examples': ['isPositive(x) = x > 0', 'filter([6, -2, -1, 4, 3], isPositive)', 'filter([6, -2, 0, 1, 0], x != 0)'],
    'seealso': ['sort', 'map', 'forEach']
  };
  return module.exports;
});

$__System.registerDynamic("13d", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'flatten',
    'category': 'Matrix',
    'syntax': ['flatten(x)'],
    'description': 'Flatten a multi dimensional matrix into a single dimensional matrix.',
    'examples': ['a = [1, 2, 3; 4, 5, 6]', 'size(a)', 'b = flatten(a)', 'size(b)'],
    'seealso': ['concat', 'resize', 'size', 'squeeze']
  };
  return module.exports;
});

$__System.registerDynamic("13e", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'forEach',
    'category': 'Matrix',
    'syntax': ['forEach(x, callback)'],
    'description': 'Iterates over all elements of a matrix/array, and executes the given callback function.',
    'examples': ['forEach([1, 2, 3], function(val) { console.log(val) })'],
    'seealso': ['map', 'sort', 'filter']
  };
  return module.exports;
});

$__System.registerDynamic("13f", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'inv',
    'category': 'Matrix',
    'syntax': ['inv(x)'],
    'description': 'Calculate the inverse of a matrix',
    'examples': ['inv([1, 2; 3, 4])', 'inv(4)', '1 / 4'],
    'seealso': ['concat', 'det', 'diag', 'eye', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
  };
  return module.exports;
});

$__System.registerDynamic("140", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'map',
    'category': 'Matrix',
    'syntax': ['map(x, callback)'],
    'description': 'Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.',
    'examples': ['map([1, 2, 3], function(val) { return value * value })'],
    'seealso': ['filter', 'forEach']
  };
  return module.exports;
});

$__System.registerDynamic("141", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'ones',
    'category': 'Matrix',
    'syntax': ['ones(m)', 'ones(m, n)', 'ones(m, n, p, ...)', 'ones([m])', 'ones([m, n])', 'ones([m, n, p, ...])', 'ones'],
    'description': 'Create a matrix containing ones.',
    'examples': ['ones(3)', 'ones(3, 5)', 'ones([2,3]) * 4.5', 'a = [1, 2, 3; 4, 5, 6]', 'ones(size(a))'],
    'seealso': ['concat', 'det', 'diag', 'eye', 'inv', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
  };
  return module.exports;
});

$__System.registerDynamic("142", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'partitionSelect',
    'category': 'Matrix',
    'syntax': ['partitionSelect(x, k)', 'partitionSelect(x, k, compare)'],
    'description': 'Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.',
    'examples': ['partitionSelect([5, 10, 1], 2)', 'partitionSelect(["C", "B", "A", "D"], 1)'],
    'seealso': ['sort']
  };
  return module.exports;
});

$__System.registerDynamic("143", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'range',
    'category': 'Type',
    'syntax': ['start:end', 'start:step:end', 'range(start, end)', 'range(start, end, step)', 'range(string)'],
    'description': 'Create a range. Lower bound of the range is included, upper bound is excluded.',
    'examples': ['1:5', '3:-1:-3', 'range(3, 7)', 'range(0, 12, 2)', 'range("4:10")', 'a = [1, 2, 3, 4; 5, 6, 7, 8]', 'a[1:2, 1:2]'],
    'seealso': ['concat', 'det', 'diag', 'eye', 'inv', 'ones', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
  };
  return module.exports;
});

$__System.registerDynamic("144", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'resize',
    'category': 'Matrix',
    'syntax': ['resize(x, size)', 'resize(x, size, defaultValue)'],
    'description': 'Resize a matrix.',
    'examples': ['resize([1,2,3,4,5], [3])', 'resize([1,2,3], [5])', 'resize([1,2,3], [5], -1)', 'resize(2, [2, 3])', 'resize("hello", [8], "!")'],
    'seealso': ['size', 'subset', 'squeeze']
  };
  return module.exports;
});

$__System.registerDynamic("145", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'size',
    'category': 'Matrix',
    'syntax': ['size(x)'],
    'description': 'Calculate the size of a matrix.',
    'examples': ['size(2.3)', 'size("hello world")', 'a = [1, 2; 3, 4; 5, 6]', 'size(a)', 'size(1:6)'],
    'seealso': ['concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
  };
  return module.exports;
});

$__System.registerDynamic("146", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'sort',
    'category': 'Matrix',
    'syntax': ['sort(x)', 'sort(x, compare)'],
    'description': 'Sort the items in a matrix. Compare can be a string "asc" or "desc", or a custom sort function.',
    'examples': ['sort([5, 10, 1])', 'sort(["C", "B", "A", "D"])', 'sortByLength(a, b) = size(a)[1] - size(b)[1]', 'sort(["Langdon", "Tom", "Sara"], sortByLength)'],
    'seealso': ['map', 'filter', 'forEach']
  };
  return module.exports;
});

$__System.registerDynamic("147", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'squeeze',
    'category': 'Matrix',
    'syntax': ['squeeze(x)'],
    'description': 'Remove inner and outer singleton dimensions from a matrix.',
    'examples': ['a = zeros(3,2,1)', 'size(squeeze(a))', 'b = zeros(1,1,3)', 'size(squeeze(b))'],
    'seealso': ['concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'subset', 'trace', 'transpose', 'zeros']
  };
  return module.exports;
});

$__System.registerDynamic("148", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'subset',
    'category': 'Matrix',
    'syntax': ['value(index)', 'value(index) = replacement', 'subset(value, [index])', 'subset(value, [index], replacement)'],
    'description': 'Get or set a subset of a matrix or string. ' + 'Indexes are one-based. ' + 'Both the ranges lower-bound and upper-bound are included.',
    'examples': ['d = [1, 2; 3, 4]', 'e = []', 'e[1, 1:2] = [5, 6]', 'e[2, :] = [7, 8]', 'f = d * e', 'f[2, 1]', 'f[:, 1]'],
    'seealso': ['concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'trace', 'transpose', 'zeros']
  };
  return module.exports;
});

$__System.registerDynamic("149", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'trace',
    'category': 'Matrix',
    'syntax': ['trace(A)'],
    'description': 'Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.',
    'examples': ['A = [1, 2, 3; -1, 2, 3; 2, 0, 3]', 'trace(A)'],
    'seealso': ['concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'transpose', 'zeros']
  };
  return module.exports;
});

$__System.registerDynamic("14a", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'transpose',
    'category': 'Matrix',
    'syntax': ['x\'', 'transpose(x)'],
    'description': 'Transpose a matrix',
    'examples': ['a = [1, 2, 3; 4, 5, 6]', 'a\'', 'transpose(a)'],
    'seealso': ['concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros']
  };
  return module.exports;
});

$__System.registerDynamic("14b", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'zeros',
    'category': 'Matrix',
    'syntax': ['zeros(m)', 'zeros(m, n)', 'zeros(m, n, p, ...)', 'zeros([m])', 'zeros([m, n])', 'zeros([m, n, p, ...])', 'zeros'],
    'description': 'Create a matrix containing zeros.',
    'examples': ['zeros(3)', 'zeros(3, 5)', 'a = [1, 2, 3; 4, 5, 6]', 'zeros(size(a))'],
    'seealso': ['concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose']
  };
  return module.exports;
});

$__System.registerDynamic("14c", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'combinations',
    'category': 'Probability',
    'syntax': ['combinations(n, k)'],
    'description': 'Compute the number of combinations of n items taken k at a time',
    'examples': ['combinations(7, 5)'],
    'seealso': ['permutations', 'factorial']
  };
  return module.exports;
});

$__System.registerDynamic("14d", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'factorial',
    'category': 'Probability',
    'syntax': ['kldivergence(x, y)'],
    'description': 'Compute the factorial of a value',
    'examples': ['5!', '5 * 4 * 3 * 2 * 1', '3!'],
    'seealso': ['combinations', 'permutations', 'gamma']
  };
  return module.exports;
});

$__System.registerDynamic("14e", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'gamma',
    'category': 'Probability',
    'syntax': ['gamma(n)'],
    'description': 'Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.',
    'examples': ['gamma(4)', '3!', 'gamma(1/2)', 'sqrt(pi)'],
    'seealso': ['factorial']
  };
  return module.exports;
});

$__System.registerDynamic("14f", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'kldivergence',
    'category': 'Probability',
    'syntax': ['n!', 'factorial(n)'],
    'description': 'Calculate the Kullback-Leibler (KL) divergence  between two distributions.',
    'examples': ['math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])'],
    'seealso': []
  };
  return module.exports;
});

$__System.registerDynamic("150", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'multinomial',
    'category': 'Probability',
    'syntax': ['multinomial(A)'],
    'description': 'Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai <= 0.',
    'examples': ['multinomial([1, 2, 1])'],
    'seealso': ['combinations', 'factorial']
  };
  return module.exports;
});

$__System.registerDynamic("151", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'permutations',
    'category': 'Probability',
    'syntax': ['permutations(n)', 'permutations(n, k)'],
    'description': 'Compute the number of permutations of n items taken k at a time',
    'examples': ['permutations(5)', 'permutations(5, 3)'],
    'seealso': ['combinations', 'factorial']
  };
  return module.exports;
});

$__System.registerDynamic("152", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'pickRandom',
    'category': 'Probability',
    'syntax': ['pickRandom(array)'],
    'description': 'Pick a random entry from a given array.',
    'examples': ['pickRandom(0:10)', 'pickRandom([1, 3, 1, 6])'],
    'seealso': ['random', 'randomInt']
  };
  return module.exports;
});

$__System.registerDynamic("153", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'random',
    'category': 'Probability',
    'syntax': ['random()', 'random(max)', 'random(min, max)', 'random(size)', 'random(size, max)', 'random(size, min, max)'],
    'description': 'Return a random number.',
    'examples': ['random()', 'random(10, 20)', 'random([2, 3])'],
    'seealso': ['pickRandom', 'randomInt']
  };
  return module.exports;
});

$__System.registerDynamic("154", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'randInt',
    'category': 'Probability',
    'syntax': ['randInt(max)', 'randInt(min, max)', 'randInt(size)', 'randInt(size, max)', 'randInt(size, min, max)'],
    'description': 'Return a random integer number',
    'examples': ['randInt(10, 20)', 'randInt([2, 3], 10)'],
    'seealso': ['pickRandom', 'random']
  };
  return module.exports;
});

$__System.registerDynamic("155", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'compare',
    'category': 'Relational',
    'syntax': ['compare(x, y)'],
    'description': 'Compare two values. Returns 1 if x is larger than y, -1 if x is smaller than y, and 0 if x and y are equal.',
    'examples': ['compare(2, 3)', 'compare(3, 2)', 'compare(2, 2)', 'compare(5cm, 40mm)', 'compare(2, [1, 2, 3])'],
    'seealso': ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq']
  };
  return module.exports;
});

$__System.registerDynamic("156", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'deepEqual',
    'category': 'Relational',
    'syntax': ['deepEqual(x, y)'],
    'description': 'Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.',
    'examples': ['[1,3,4] == [1,3,4]', '[1,3,4] == [1,3]'],
    'seealso': ['equal', 'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare']
  };
  return module.exports;
});

$__System.registerDynamic("157", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'equal',
    'category': 'Relational',
    'syntax': ['x == y', 'equal(x, y)'],
    'description': 'Check equality of two values. Returns true if the values are equal, and false if not.',
    'examples': ['2+2 == 3', '2+2 == 4', 'a = 3.2', 'b = 6-2.8', 'a == b', '50cm == 0.5m'],
    'seealso': ['unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual']
  };
  return module.exports;
});

$__System.registerDynamic("158", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'larger',
    'category': 'Relational',
    'syntax': ['x > y', 'larger(x, y)'],
    'description': 'Check if value x is larger than y. Returns true if x is larger than y, and false if not.',
    'examples': ['2 > 3', '5 > 2*2', 'a = 3.3', 'b = 6-2.8', '(a > b)', '(b < a)', '5 cm > 2 inch'],
    'seealso': ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare']
  };
  return module.exports;
});

$__System.registerDynamic("159", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'largerEq',
    'category': 'Relational',
    'syntax': ['x >= y', 'largerEq(x, y)'],
    'description': 'Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.',
    'examples': ['2 > 1+1', '2 >= 1+1', 'a = 3.2', 'b = 6-2.8', '(a > b)'],
    'seealso': ['equal', 'unequal', 'smallerEq', 'smaller', 'largerEq', 'compare']
  };
  return module.exports;
});

$__System.registerDynamic("15a", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'smaller',
    'category': 'Relational',
    'syntax': ['x < y', 'smaller(x, y)'],
    'description': 'Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.',
    'examples': ['2 < 3', '5 < 2*2', 'a = 3.3', 'b = 6-2.8', '(a < b)', '5 cm < 2 inch'],
    'seealso': ['equal', 'unequal', 'larger', 'smallerEq', 'largerEq', 'compare']
  };
  return module.exports;
});

$__System.registerDynamic("15b", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'smallerEq',
    'category': 'Relational',
    'syntax': ['x <= y', 'smallerEq(x, y)'],
    'description': 'Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.',
    'examples': ['2 < 1+1', '2 <= 1+1', 'a = 3.2', 'b = 6-2.8', '(a < b)'],
    'seealso': ['equal', 'unequal', 'larger', 'smaller', 'largerEq', 'compare']
  };
  return module.exports;
});

$__System.registerDynamic("15c", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'unequal',
    'category': 'Relational',
    'syntax': ['x != y', 'unequal(x, y)'],
    'description': 'Check unequality of two values. Returns true if the values are unequal, and false if they are equal.',
    'examples': ['2+2 != 3', '2+2 != 4', 'a = 3.2', 'b = 6-2.8', 'a != b', '50cm != 0.5m', '5 cm != 2 inch'],
    'seealso': ['equal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual']
  };
  return module.exports;
});

$__System.registerDynamic("15d", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'max',
    'category': 'Statistics',
    'syntax': ['max(a, b, c, ...)', 'max(A)', 'max(A, dim)'],
    'description': 'Compute the maximum value of a list of values.',
    'examples': ['max(2, 3, 4, 1)', 'max([2, 3, 4, 1])', 'max([2, 5; 4, 3])', 'max([2, 5; 4, 3], 1)', 'max([2, 5; 4, 3], 2)', 'max(2.7, 7.1, -4.5, 2.0, 4.1)', 'min(2.7, 7.1, -4.5, 2.0, 4.1)'],
    'seealso': ['mean', 'median', 'min', 'prod', 'std', 'sum', 'var']
  };
  return module.exports;
});

$__System.registerDynamic("15e", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'mean',
    'category': 'Statistics',
    'syntax': ['mean(a, b, c, ...)', 'mean(A)', 'mean(A, dim)'],
    'description': 'Compute the arithmetic mean of a list of values.',
    'examples': ['mean(2, 3, 4, 1)', 'mean([2, 3, 4, 1])', 'mean([2, 5; 4, 3])', 'mean([2, 5; 4, 3], 1)', 'mean([2, 5; 4, 3], 2)', 'mean([1.0, 2.7, 3.2, 4.0])'],
    'seealso': ['max', 'median', 'min', 'prod', 'std', 'sum', 'var']
  };
  return module.exports;
});

$__System.registerDynamic("15f", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'median',
    'category': 'Statistics',
    'syntax': ['median(a, b, c, ...)', 'median(A)'],
    'description': 'Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.',
    'examples': ['median(5, 2, 7)', 'median([3, -1, 5, 7])'],
    'seealso': ['max', 'mean', 'min', 'prod', 'std', 'sum', 'var']
  };
  return module.exports;
});

$__System.registerDynamic("160", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'min',
    'category': 'Statistics',
    'syntax': ['min(a, b, c, ...)', 'min(A)', 'min(A, dim)'],
    'description': 'Compute the minimum value of a list of values.',
    'examples': ['min(2, 3, 4, 1)', 'min([2, 3, 4, 1])', 'min([2, 5; 4, 3])', 'min([2, 5; 4, 3], 1)', 'min([2, 5; 4, 3], 2)', 'min(2.7, 7.1, -4.5, 2.0, 4.1)', 'max(2.7, 7.1, -4.5, 2.0, 4.1)'],
    'seealso': ['max', 'mean', 'median', 'prod', 'std', 'sum', 'var']
  };
  return module.exports;
});

$__System.registerDynamic("161", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'mode',
    'category': 'Statistics',
    'syntax': ['mode(a, b, c, ...)', 'mode(A)', 'mode(A, a, b, B, c, ...)'],
    'description': 'Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.',
    'examples': ['mode(5, 2, 7)', 'mode([3, -1, 5, 7])'],
    'seealso': ['max', 'mean', 'min', 'median', 'prod', 'std', 'sum', 'var']
  };
  return module.exports;
});

$__System.registerDynamic("162", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'prod',
    'category': 'Statistics',
    'syntax': ['prod(a, b, c, ...)', 'prod(A)'],
    'description': 'Compute the product of all values.',
    'examples': ['prod(2, 3, 4)', 'prod([2, 3, 4])', 'prod([2, 5; 4, 3])'],
    'seealso': ['max', 'mean', 'min', 'median', 'min', 'std', 'sum', 'var']
  };
  return module.exports;
});

$__System.registerDynamic("163", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'quantileSeq',
    'category': 'Statistics',
    'syntax': ['quantileSeq(A, prob[, sorted])', 'quantileSeq(A, [prob1, prob2, ...][, sorted])', 'quantileSeq(A, N[, sorted])'],
    'description': 'Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \n\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.',
    'examples': ['quantileSeq([3, -1, 5, 7], 0.5)', 'quantileSeq([3, -1, 5, 7], [1/3, 2/3])', 'quantileSeq([3, -1, 5, 7], 2)', 'quantileSeq([-1, 3, 5, 7], 0.5, true)'],
    'seealso': ['mean', 'median', 'min', 'max', 'prod', 'std', 'sum', 'var']
  };
  return module.exports;
});

$__System.registerDynamic("164", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'std',
    'category': 'Statistics',
    'syntax': ['std(a, b, c, ...)', 'std(A)', 'std(A, normalization)'],
    'description': 'Compute the standard deviation of all values, defined as std(A) = sqrt(var(A)). Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
    'examples': ['std(2, 4, 6)', 'std([2, 4, 6, 8])', 'std([2, 4, 6, 8], "uncorrected")', 'std([2, 4, 6, 8], "biased")', 'std([1, 2, 3; 4, 5, 6])'],
    'seealso': ['max', 'mean', 'min', 'median', 'min', 'prod', 'sum', 'var']
  };
  return module.exports;
});

$__System.registerDynamic("165", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'sum',
    'category': 'Statistics',
    'syntax': ['sum(a, b, c, ...)', 'sum(A)'],
    'description': 'Compute the sum of all values.',
    'examples': ['sum(2, 3, 4, 1)', 'sum([2, 3, 4, 1])', 'sum([2, 5; 4, 3])'],
    'seealso': ['max', 'mean', 'median', 'min', 'prod', 'std', 'sum', 'var']
  };
  return module.exports;
});

$__System.registerDynamic("166", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'var',
    'category': 'Statistics',
    'syntax': ['var(a, b, c, ...)', 'var(A)', 'var(A, normalization)'],
    'description': 'Compute the variance of all values. Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
    'examples': ['var(2, 4, 6)', 'var([2, 4, 6, 8])', 'var([2, 4, 6, 8], "uncorrected")', 'var([2, 4, 6, 8], "biased")', 'var([1, 2, 3; 4, 5, 6])'],
    'seealso': ['max', 'mean', 'min', 'median', 'min', 'prod', 'std', 'sum']
  };
  return module.exports;
});

$__System.registerDynamic("167", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'acos',
    'category': 'Trigonometry',
    'syntax': ['acos(x)'],
    'description': 'Compute the inverse cosine of a value in radians.',
    'examples': ['acos(0.5)', 'acos(cos(2.3))'],
    'seealso': ['cos', 'atan', 'asin']
  };
  return module.exports;
});

$__System.registerDynamic("168", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'acosh',
    'category': 'Trigonometry',
    'syntax': ['acosh(x)'],
    'description': 'Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.',
    'examples': ['acosh(1.5)'],
    'seealso': ['cosh', 'asinh', 'atanh']
  };
  return module.exports;
});

$__System.registerDynamic("169", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'acot',
    'category': 'Trigonometry',
    'syntax': ['acot(x)'],
    'description': 'Calculate the inverse cotangent of a value.',
    'examples': ['acot(0.5)', 'acot(cot(0.5))', 'acot(2)'],
    'seealso': ['cot', 'atan']
  };
  return module.exports;
});

$__System.registerDynamic("16a", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'acoth',
    'category': 'Trigonometry',
    'syntax': ['acoth(x)'],
    'description': 'Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.',
    'examples': ['acoth(0.5)'],
    'seealso': ['acsch', 'asech']
  };
  return module.exports;
});

$__System.registerDynamic("16b", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'acsc',
    'category': 'Trigonometry',
    'syntax': ['acsc(x)'],
    'description': 'Calculate the inverse cotangent of a value.',
    'examples': ['acsc(0.5)', 'acsc(csc(0.5))', 'acsc(2)'],
    'seealso': ['csc', 'asin', 'asec']
  };
  return module.exports;
});

$__System.registerDynamic("16c", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'acsch',
    'category': 'Trigonometry',
    'syntax': ['acsch(x)'],
    'description': 'Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.',
    'examples': ['acsch(0.5)'],
    'seealso': ['asech', 'acoth']
  };
  return module.exports;
});

$__System.registerDynamic("16d", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'asec',
    'category': 'Trigonometry',
    'syntax': ['asec(x)'],
    'description': 'Calculate the inverse secant of a value.',
    'examples': ['asec(0.5)', 'asec(sec(0.5))', 'asec(2)'],
    'seealso': ['acos', 'acot', 'acsc']
  };
  return module.exports;
});

$__System.registerDynamic("16e", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'asech',
    'category': 'Trigonometry',
    'syntax': ['asech(x)'],
    'description': 'Calculate the inverse secant of a value.',
    'examples': ['asech(0.5)'],
    'seealso': ['acsch', 'acoth']
  };
  return module.exports;
});

$__System.registerDynamic("16f", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'asin',
    'category': 'Trigonometry',
    'syntax': ['asin(x)'],
    'description': 'Compute the inverse sine of a value in radians.',
    'examples': ['asin(0.5)', 'asin(sin(2.3))'],
    'seealso': ['sin', 'acos', 'atan']
  };
  return module.exports;
});

$__System.registerDynamic("170", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'asinh',
    'category': 'Trigonometry',
    'syntax': ['asinh(x)'],
    'description': 'Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.',
    'examples': ['asinh(0.5)'],
    'seealso': ['acosh', 'atanh']
  };
  return module.exports;
});

$__System.registerDynamic("171", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'atan',
    'category': 'Trigonometry',
    'syntax': ['atan(x)'],
    'description': 'Compute the inverse tangent of a value in radians.',
    'examples': ['atan(0.5)', 'atan(tan(2.3))'],
    'seealso': ['tan', 'acos', 'asin']
  };
  return module.exports;
});

$__System.registerDynamic("172", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'atanh',
    'category': 'Trigonometry',
    'syntax': ['atanh(x)'],
    'description': 'Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.',
    'examples': ['atanh(0.5)'],
    'seealso': ['acosh', 'asinh']
  };
  return module.exports;
});

$__System.registerDynamic("173", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'atan2',
    'category': 'Trigonometry',
    'syntax': ['atan2(y, x)'],
    'description': 'Computes the principal value of the arc tangent of y/x in radians.',
    'examples': ['atan2(2, 2) / pi', 'angle = 60 deg in rad', 'x = cos(angle)', 'y = sin(angle)', 'atan2(y, x)'],
    'seealso': ['sin', 'cos', 'tan']
  };
  return module.exports;
});

$__System.registerDynamic("174", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'cos',
    'category': 'Trigonometry',
    'syntax': ['cos(x)'],
    'description': 'Compute the cosine of x in radians.',
    'examples': ['cos(2)', 'cos(pi / 4) ^ 2', 'cos(180 deg)', 'cos(60 deg)', 'sin(0.2)^2 + cos(0.2)^2'],
    'seealso': ['acos', 'sin', 'tan']
  };
  return module.exports;
});

$__System.registerDynamic("175", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'cosh',
    'category': 'Trigonometry',
    'syntax': ['cosh(x)'],
    'description': 'Compute the hyperbolic cosine of x in radians.',
    'examples': ['cosh(0.5)'],
    'seealso': ['sinh', 'tanh', 'coth']
  };
  return module.exports;
});

$__System.registerDynamic("176", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'cot',
    'category': 'Trigonometry',
    'syntax': ['cot(x)'],
    'description': 'Compute the cotangent of x in radians. Defined as 1/tan(x)',
    'examples': ['cot(2)', '1 / tan(2)'],
    'seealso': ['sec', 'csc', 'tan']
  };
  return module.exports;
});

$__System.registerDynamic("177", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'coth',
    'category': 'Trigonometry',
    'syntax': ['coth(x)'],
    'description': 'Compute the hyperbolic cotangent of x in radians.',
    'examples': ['coth(2)', '1 / tanh(2)'],
    'seealso': ['sech', 'csch', 'tanh']
  };
  return module.exports;
});

$__System.registerDynamic("178", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'csc',
    'category': 'Trigonometry',
    'syntax': ['csc(x)'],
    'description': 'Compute the cosecant of x in radians. Defined as 1/sin(x)',
    'examples': ['csc(2)', '1 / sin(2)'],
    'seealso': ['sec', 'cot', 'sin']
  };
  return module.exports;
});

$__System.registerDynamic("179", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'csch',
    'category': 'Trigonometry',
    'syntax': ['csch(x)'],
    'description': 'Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)',
    'examples': ['csch(2)', '1 / sinh(2)'],
    'seealso': ['sech', 'coth', 'sinh']
  };
  return module.exports;
});

$__System.registerDynamic("17a", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'sec',
    'category': 'Trigonometry',
    'syntax': ['sec(x)'],
    'description': 'Compute the secant of x in radians. Defined as 1/cos(x)',
    'examples': ['sec(2)', '1 / cos(2)'],
    'seealso': ['cot', 'csc', 'cos']
  };
  return module.exports;
});

$__System.registerDynamic("17b", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'sech',
    'category': 'Trigonometry',
    'syntax': ['sech(x)'],
    'description': 'Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)',
    'examples': ['sech(2)', '1 / cosh(2)'],
    'seealso': ['coth', 'csch', 'cosh']
  };
  return module.exports;
});

$__System.registerDynamic("17c", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'sin',
    'category': 'Trigonometry',
    'syntax': ['sin(x)'],
    'description': 'Compute the sine of x in radians.',
    'examples': ['sin(2)', 'sin(pi / 4) ^ 2', 'sin(90 deg)', 'sin(30 deg)', 'sin(0.2)^2 + cos(0.2)^2'],
    'seealso': ['asin', 'cos', 'tan']
  };
  return module.exports;
});

$__System.registerDynamic("17d", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'sinh',
    'category': 'Trigonometry',
    'syntax': ['sinh(x)'],
    'description': 'Compute the hyperbolic sine of x in radians.',
    'examples': ['sinh(0.5)'],
    'seealso': ['cosh', 'tanh']
  };
  return module.exports;
});

$__System.registerDynamic("17e", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'tan',
    'category': 'Trigonometry',
    'syntax': ['tan(x)'],
    'description': 'Compute the tangent of x in radians.',
    'examples': ['tan(0.5)', 'sin(0.5) / cos(0.5)', 'tan(pi / 4)', 'tan(45 deg)'],
    'seealso': ['atan', 'sin', 'cos']
  };
  return module.exports;
});

$__System.registerDynamic("17f", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'tanh',
    'category': 'Trigonometry',
    'syntax': ['tanh(x)'],
    'description': 'Compute the hyperbolic tangent of x in radians.',
    'examples': ['tanh(0.5)', 'sinh(0.5) / cosh(0.5)'],
    'seealso': ['sinh', 'cosh']
  };
  return module.exports;
});

$__System.registerDynamic("180", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'to',
    'category': 'Units',
    'syntax': ['x to unit', 'to(x, unit)'],
    'description': 'Change the unit of a value.',
    'examples': ['5 inch to cm', '3.2kg to g', '16 bytes in bits'],
    'seealso': []
  };
  return module.exports;
});

$__System.registerDynamic("181", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'clone',
    'category': 'Utils',
    'syntax': ['clone(x)'],
    'description': 'Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices',
    'examples': ['clone(3.5)', 'clone(2 - 4i)', 'clone(45 deg)', 'clone([1, 2; 3, 4])', 'clone("hello world")'],
    'seealso': []
  };
  return module.exports;
});

$__System.registerDynamic("182", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'format',
    'category': 'Utils',
    'syntax': ['format(value)', 'format(value, precision)'],
    'description': 'Format a value of any type as string.',
    'examples': ['format(2.3)', 'format(3 - 4i)', 'format([])', 'format(pi, 3)'],
    'seealso': ['print']
  };
  return module.exports;
});

$__System.registerDynamic("183", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'isInteger',
    'category': 'Utils',
    'syntax': ['isInteger(x)'],
    'description': 'Test whether a value is an integer number.',
    'examples': ['isInteger(2)', 'isInteger(3.5)', 'isInteger([3, 0.5, -2])'],
    'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']
  };
  return module.exports;
});

$__System.registerDynamic("184", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'isNegative',
    'category': 'Utils',
    'syntax': ['isNegative(x)'],
    'description': 'Test whether a value is negative: smaller than zero.',
    'examples': ['isNegative(2)', 'isNegative(0)', 'isNegative(-4)', 'isNegative([3, 0.5, -2])'],
    'seealso': ['isInteger', 'isNumeric', 'isPositive', 'isZero']
  };
  return module.exports;
});

$__System.registerDynamic("185", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'isNumeric',
    'category': 'Utils',
    'syntax': ['isNumeric(x)'],
    'description': 'Test whether a value is a numeric value. ' + 'Returns true when the input is a number, BigNumber, Fraction, or boolean.',
    'examples': ['isNumeric(2)', 'isNumeric(0)', 'isNumeric(bignumber(500))', 'isNumeric(fraction(0.125))', 'isNumeric("3")', 'isNumeric(2 + 3i)', 'isNumeric([2.3, "foo", false])'],
    'seealso': ['isInteger', 'isZero', 'isNegative', 'isPositive']
  };
  return module.exports;
});

$__System.registerDynamic("186", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'isPositive',
    'category': 'Utils',
    'syntax': ['isPositive(x)'],
    'description': 'Test whether a value is positive: larger than zero.',
    'examples': ['isPositive(2)', 'isPositive(0)', 'isPositive(-4)', 'isPositive([3, 0.5, -2])'],
    'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']
  };
  return module.exports;
});

$__System.registerDynamic("187", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'isZero',
    'category': 'Utils',
    'syntax': ['isZero(x)'],
    'description': 'Test whether a value is zero.',
    'examples': ['isZero(2)', 'isZero(0)', 'isZero(-4)', 'isZero([3, 0, -2, 0])'],
    'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isPositive']
  };
  return module.exports;
});

$__System.registerDynamic("188", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'name': 'typeof',
    'category': 'Utils',
    'syntax': ['typeof(x)'],
    'description': 'Get the type of a variable.',
    'examples': ['typeof(3.5)', 'typeof(2 - 4i)', 'typeof(45 deg)', 'typeof("hello world")'],
    'seealso': []
  };
  return module.exports;
});

$__System.registerDynamic("189", ["de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff", "100", "101", "102", "103", "104", "105", "106", "107", "108", "109", "10a", "10b", "10c", "10d", "10e", "10f", "110", "111", "112", "113", "114", "115", "116", "117", "118", "119", "11a", "11b", "11c", "11d", "11e", "11f", "120", "121", "122", "123", "124", "125", "126", "127", "128", "129", "12a", "12b", "12c", "12d", "12e", "12f", "130", "131", "132", "133", "134", "135", "136", "137", "138", "139", "13a", "13b", "13c", "13d", "13e", "13f", "140", "141", "142", "143", "144", "145", "146", "147", "148", "149", "14a", "14b", "14c", "14d", "14e", "14f", "150", "151", "152", "153", "154", "155", "156", "157", "158", "159", "15a", "15b", "15c", "15d", "15e", "15f", "160", "161", "162", "163", "164", "165", "166", "167", "168", "169", "16a", "16b", "16c", "16d", "16e", "16f", "170", "171", "172", "173", "174", "175", "176", "177", "178", "179", "17a", "17b", "17c", "17d", "17e", "17f", "180", "181", "182", "183", "184", "185", "186", "187", "188", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(construction, config, load, typed) {
    var docs = {};
    docs.bignumber = $__require('de');
    docs['boolean'] = $__require('df');
    docs.complex = $__require('e0');
    docs.fraction = $__require('e1');
    docs.index = $__require('e2');
    docs.matrix = $__require('e3');
    docs.number = $__require('e4');
    docs.sparse = $__require('e5');
    docs.string = $__require('e6');
    docs.unit = $__require('e7');
    docs.e = $__require('e8');
    docs.E = $__require('e8');
    docs['false'] = $__require('e9');
    docs.i = $__require('ea');
    docs['Infinity'] = $__require('eb');
    docs.LN2 = $__require('ec');
    docs.LN10 = $__require('ed');
    docs.LOG2E = $__require('ee');
    docs.LOG10E = $__require('ef');
    docs.NaN = $__require('f0');
    docs['null'] = $__require('f1');
    docs.pi = $__require('f2');
    docs.PI = $__require('f2');
    docs.phi = $__require('f3');
    docs.SQRT1_2 = $__require('f4');
    docs.SQRT2 = $__require('f5');
    docs.tau = $__require('f6');
    docs['true'] = $__require('f7');
    docs.version = $__require('f8');
    docs.speedOfLight = {
      description: 'Speed of light in vacuum',
      examples: ['speedOfLight']
    };
    docs.gravitationConstant = {
      description: 'Newtonian constant of gravitation',
      examples: ['gravitationConstant']
    };
    docs.planckConstant = {
      description: 'Planck constant',
      examples: ['planckConstant']
    };
    docs.reducedPlanckConstant = {
      description: 'Reduced Planck constant',
      examples: ['reducedPlanckConstant']
    };
    docs.magneticConstant = {
      description: 'Magnetic constant (vacuum permeability)',
      examples: ['magneticConstant']
    };
    docs.electricConstant = {
      description: 'Electric constant (vacuum permeability)',
      examples: ['electricConstant']
    };
    docs.vacuumImpedance = {
      description: 'Characteristic impedance of vacuum',
      examples: ['vacuumImpedance']
    };
    docs.coulomb = {
      description: 'Coulomb\'s constant',
      examples: ['coulomb']
    };
    docs.elementaryCharge = {
      description: 'Elementary charge',
      examples: ['elementaryCharge']
    };
    docs.bohrMagneton = {
      description: 'Borh magneton',
      examples: ['bohrMagneton']
    };
    docs.conductanceQuantum = {
      description: 'Conductance quantum',
      examples: ['conductanceQuantum']
    };
    docs.inverseConductanceQuantum = {
      description: 'Inverse conductance quantum',
      examples: ['inverseConductanceQuantum']
    };
    docs.magneticFluxQuantum = {
      description: 'Magnetic flux quantum',
      examples: ['magneticFluxQuantum']
    };
    docs.nuclearMagneton = {
      description: 'Nuclear magneton',
      examples: ['nuclearMagneton']
    };
    docs.klitzing = {
      description: 'Von Klitzing constant',
      examples: ['klitzing']
    };
    docs.bohrRadius = {
      description: 'Borh radius',
      examples: ['bohrRadius']
    };
    docs.classicalElectronRadius = {
      description: 'Classical electron radius',
      examples: ['classicalElectronRadius']
    };
    docs.electronMass = {
      description: 'Electron mass',
      examples: ['electronMass']
    };
    docs.fermiCoupling = {
      description: 'Fermi coupling constant',
      examples: ['fermiCoupling']
    };
    docs.fineStructure = {
      description: 'Fine-structure constant',
      examples: ['fineStructure']
    };
    docs.hartreeEnergy = {
      description: 'Hartree energy',
      examples: ['hartreeEnergy']
    };
    docs.protonMass = {
      description: 'Proton mass',
      examples: ['protonMass']
    };
    docs.deuteronMass = {
      description: 'Deuteron Mass',
      examples: ['deuteronMass']
    };
    docs.neutronMass = {
      description: 'Neutron mass',
      examples: ['neutronMass']
    };
    docs.quantumOfCirculation = {
      description: 'Quantum of circulation',
      examples: ['quantumOfCirculation']
    };
    docs.rydberg = {
      description: 'Rydberg constant',
      examples: ['rydberg']
    };
    docs.thomsonCrossSection = {
      description: 'Thomson cross section',
      examples: ['thomsonCrossSection']
    };
    docs.weakMixingAngle = {
      description: 'Weak mixing angle',
      examples: ['weakMixingAngle']
    };
    docs.efimovFactor = {
      description: 'Efimov factor',
      examples: ['efimovFactor']
    };
    docs.atomicMass = {
      description: 'Atomic mass constant',
      examples: ['atomicMass']
    };
    docs.avogadro = {
      description: 'Avogadro\'s number',
      examples: ['avogadro']
    };
    docs.boltzmann = {
      description: 'Boltzmann constant',
      examples: ['boltzmann']
    };
    docs.faraday = {
      description: 'Faraday constant',
      examples: ['faraday']
    };
    docs.firstRadiation = {
      description: 'First radiation constant',
      examples: ['firstRadiation']
    };
    docs.loschmidt = {
      description: 'Loschmidt constant at T=273.15 K and p=101.325 kPa',
      examples: ['loschmidt']
    };
    docs.gasConstant = {
      description: 'Gas constant',
      examples: ['gasConstant']
    };
    docs.molarPlanckConstant = {
      description: 'Molar Planck constant',
      examples: ['molarPlanckConstant']
    };
    docs.molarVolume = {
      description: 'Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa',
      examples: ['molarVolume']
    };
    docs.sackurTetrode = {
      description: 'Sackur-Tetrode constant at T=1 K and p=101.325 kPa',
      examples: ['sackurTetrode']
    };
    docs.secondRadiation = {
      description: 'Second radiation constant',
      examples: ['secondRadiation']
    };
    docs.stefanBoltzmann = {
      description: 'Stefan-Boltzmann constant',
      examples: ['stefanBoltzmann']
    };
    docs.wienDisplacement = {
      description: 'Wien displacement law constant',
      examples: ['wienDisplacement']
    };
    docs.molarMass = {
      description: 'Molar mass constant',
      examples: ['molarMass']
    };
    docs.molarMassC12 = {
      description: 'Molar mass constant of carbon-12',
      examples: ['molarMassC12']
    };
    docs.gravity = {
      description: 'Standard acceleration of gravity (standard acceleration of free-fall on Earth)',
      examples: ['gravity']
    };
    docs.planckLength = {
      description: 'Planck length',
      examples: ['planckLength']
    };
    docs.planckMass = {
      description: 'Planck mass',
      examples: ['planckMass']
    };
    docs.planckTime = {
      description: 'Planck time',
      examples: ['planckTime']
    };
    docs.planckCharge = {
      description: 'Planck charge',
      examples: ['planckCharge']
    };
    docs.planckTemperature = {
      description: 'Planck temperature',
      examples: ['planckTemperature']
    };
    docs.lsolve = $__require('f9');
    docs.lup = $__require('fa');
    docs.lusolve = $__require('fb');
    docs.slu = $__require('fc');
    docs.usolve = $__require('fd');
    docs.abs = $__require('fe');
    docs.add = $__require('ff');
    docs.cbrt = $__require('100');
    docs.ceil = $__require('101');
    docs.cube = $__require('102');
    docs.divide = $__require('103');
    docs.dotDivide = $__require('104');
    docs.dotMultiply = $__require('105');
    docs.dotPow = $__require('106');
    docs.exp = $__require('107');
    docs.fix = $__require('108');
    docs.floor = $__require('109');
    docs.gcd = $__require('10a');
    docs.hypot = $__require('10b');
    docs.lcm = $__require('10c');
    docs.log = $__require('10d');
    docs.log10 = $__require('10e');
    docs.mod = $__require('10f');
    docs.multiply = $__require('110');
    docs.norm = $__require('111');
    docs.nthRoot = $__require('112');
    docs.pow = $__require('113');
    docs.round = $__require('114');
    docs.sign = $__require('115');
    docs.sqrt = $__require('116');
    docs.square = $__require('117');
    docs.subtract = $__require('118');
    docs.unaryMinus = $__require('119');
    docs.unaryPlus = $__require('11a');
    docs.xgcd = $__require('11b');
    docs.bitAnd = $__require('11c');
    docs.bitNot = $__require('11d');
    docs.bitOr = $__require('11e');
    docs.bitXor = $__require('11f');
    docs.leftShift = $__require('120');
    docs.rightArithShift = $__require('121');
    docs.rightLogShift = $__require('122');
    docs.bellNumbers = $__require('123');
    docs.catalan = $__require('124');
    docs.composition = $__require('125');
    docs.stirlingS2 = $__require('126');
    docs['config'] = $__require('127');
    docs['import'] = $__require('128');
    docs['typed'] = $__require('129');
    docs.arg = $__require('12a');
    docs.conj = $__require('12b');
    docs.re = $__require('12c');
    docs.im = $__require('12d');
    docs['eval'] = $__require('12e');
    docs.help = $__require('12f');
    docs.distance = $__require('130');
    docs.intersect = $__require('131');
    docs['and'] = $__require('132');
    docs['not'] = $__require('133');
    docs['or'] = $__require('134');
    docs['xor'] = $__require('135');
    docs['concat'] = $__require('136');
    docs.cross = $__require('137');
    docs.det = $__require('138');
    docs.diag = $__require('139');
    docs.dot = $__require('13a');
    docs.eye = $__require('13b');
    docs.filter = $__require('13c');
    docs.flatten = $__require('13d');
    docs.forEach = $__require('13e');
    docs.inv = $__require('13f');
    docs.map = $__require('140');
    docs.ones = $__require('141');
    docs.partitionSelect = $__require('142');
    docs.range = $__require('143');
    docs.resize = $__require('144');
    docs.size = $__require('145');
    docs.sort = $__require('146');
    docs.squeeze = $__require('147');
    docs.subset = $__require('148');
    docs.trace = $__require('149');
    docs.transpose = $__require('14a');
    docs.zeros = $__require('14b');
    docs.combinations = $__require('14c');
    docs.factorial = $__require('14d');
    docs.gamma = $__require('14e');
    docs.kldivergence = $__require('14f');
    docs.multinomial = $__require('150');
    docs.permutations = $__require('151');
    docs.pickRandom = $__require('152');
    docs.random = $__require('153');
    docs.randomInt = $__require('154');
    docs.compare = $__require('155');
    docs.deepEqual = $__require('156');
    docs['equal'] = $__require('157');
    docs.larger = $__require('158');
    docs.largerEq = $__require('159');
    docs.smaller = $__require('15a');
    docs.smallerEq = $__require('15b');
    docs.unequal = $__require('15c');
    docs.max = $__require('15d');
    docs.mean = $__require('15e');
    docs.median = $__require('15f');
    docs.min = $__require('160');
    docs.mode = $__require('161');
    docs.prod = $__require('162');
    docs.quantileSeq = $__require('163');
    docs.std = $__require('164');
    docs.sum = $__require('165');
    docs['var'] = $__require('166');
    docs.acos = $__require('167');
    docs.acosh = $__require('168');
    docs.acot = $__require('169');
    docs.acoth = $__require('16a');
    docs.acsc = $__require('16b');
    docs.acsch = $__require('16c');
    docs.asec = $__require('16d');
    docs.asech = $__require('16e');
    docs.asin = $__require('16f');
    docs.asinh = $__require('170');
    docs.atan = $__require('171');
    docs.atanh = $__require('172');
    docs.atan2 = $__require('173');
    docs.cos = $__require('174');
    docs.cosh = $__require('175');
    docs.cot = $__require('176');
    docs.coth = $__require('177');
    docs.csc = $__require('178');
    docs.csch = $__require('179');
    docs.sec = $__require('17a');
    docs.sech = $__require('17b');
    docs.sin = $__require('17c');
    docs.sinh = $__require('17d');
    docs.tan = $__require('17e');
    docs.tanh = $__require('17f');
    docs.to = $__require('180');
    docs.clone = $__require('181');
    docs.format = $__require('182');
    docs.isInteger = $__require('183');
    docs.isNegative = $__require('184');
    docs.isNumeric = $__require('185');
    docs.isPositive = $__require('186');
    docs.isZero = $__require('187');
    docs['typeof'] = $__require('188');
    return docs;
  }
  exports.name = 'docs';
  exports.path = 'expression';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("18a", ["189", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed, math) {
    var docs = load($__require('189'));
    return typed('help', {'any': function(search) {
        var prop;
        var name = search;
        if (typeof search !== 'string') {
          for (prop in math) {
            if (math.hasOwnProperty(prop) && (search === math[prop])) {
              name = prop;
              break;
            }
          }
        }
        var doc = docs[name];
        if (!doc) {
          throw new Error('No documentation found on "' + name + '"');
        }
        return new type.Help(doc);
      }});
  }
  exports.math = true;
  exports.name = 'help';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("18b", ["dc", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var parse = load($__require('dc'));
    return typed('parse', {
      'string | Array | Matrix': parse,
      'string | Array | Matrix, Object': parse
    });
  }
  exports.name = 'parse';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("18c", ["db", "dd", "18a", "18b", "18d", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = [$__require('db'), $__require('dd'), $__require('18a'), $__require('18b'), $__require('18d')];
  return module.exports;
});

$__System.registerDynamic("18e", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    function UpdateNode() {
      throw new Error('UpdateNode is deprecated. Use AssignmentNode instead.');
    }
    return UpdateNode;
  }
  exports.name = 'UpdateNode';
  exports.path = 'expression.node';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("18f", ["190", "191", "192", "193", "194", "195", "196", "197", "198", "199", "19a", "19b", "19c", "19d", "19e", "18e", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = [$__require('190'), $__require('191'), $__require('192'), $__require('193'), $__require('194'), $__require('195'), $__require('196'), $__require('197'), $__require('198'), $__require('199'), $__require('19a'), $__require('19b'), $__require('19c'), $__require('19d'), $__require('19e'), $__require('18e')];
  return module.exports;
});

$__System.registerDynamic("19f", ["1a0", "1a1", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var errorTransform = $__require('1a0').transform;
  function factory(type, config, load, typed) {
    var concat = load($__require('1a1'));
    return typed('concat', {'...any': function(args) {
        var lastIndex = args.length - 1;
        var last = args[lastIndex];
        if (typeof last === 'number') {
          args[lastIndex] = last - 1;
        } else if (last && last.isBigNumber === true) {
          args[lastIndex] = last.minus(1);
        }
        try {
          return concat.apply(null, args);
        } catch (err) {
          throw errorTransform(err);
        }
      }});
  }
  exports.name = 'concat';
  exports.path = 'expression.transform';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1a2", ["1a3", "19e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var filter = load($__require('1a3'));
    var SymbolNode = load($__require('19e'));
    function filterTransform(args, math, scope) {
      var x,
          test;
      if (args[0]) {
        x = args[0].compile().eval(scope);
      }
      if (args[1]) {
        if (args[1] && args[1].isSymbolNode) {
          test = args[1].compile().eval(scope);
        } else {
          var _scope = scope || {};
          var symbol = args[1].filter(function(node) {
            return (node && node.isSymbolNode) && !(node.name in math) && !(node.name in _scope);
          })[0];
          var sub = Object.create(_scope);
          var eq = args[1].compile();
          if (symbol) {
            var name = symbol.name;
            test = function(x) {
              sub[name] = x;
              return eq.eval(sub);
            };
          } else {
            throw new Error('No undefined variable found in filter equation');
          }
        }
      }
      return filter(x, test);
    }
    filterTransform.rawArgs = true;
    return filterTransform;
  }
  exports.name = 'filter';
  exports.path = 'expression.transform';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1a4", ["1a5", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var forEach = load($__require('1a5'));
    return typed('forEach', {'Array | Matrix, function': function(array, callback) {
        var recurse = function(value, index) {
          if (Array.isArray(value)) {
            value.forEach(function(child, i) {
              recurse(child, index.concat(i + 1));
            });
          } else {
            callback(value, index, array);
          }
        };
        recurse(array.valueOf(), []);
      }});
  }
  exports.name = 'forEach';
  exports.path = 'expression.transform';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("cc", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    return typed('index', {'...number | string | BigNumber | Range | Array | Matrix': function(args) {
        var ranges = args.map(function(arg) {
          if (arg && arg.isBigNumber === true) {
            return arg.toNumber();
          } else if (arg && (Array.isArray(arg) || arg.isMatrix === true)) {
            return arg.map(function(elem) {
              return (elem && elem.isBigNumber === true) ? elem.toNumber() : elem;
            });
          } else {
            return arg;
          }
        });
        var res = new type.Index();
        type.Index.apply(res, ranges);
        return res;
      }});
  }
  exports.name = 'index';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1a6", ["cc", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var isArray = Array.isArray;
  function factory(type, config, load) {
    var indexFactory = load($__require('cc'));
    return function indexTransform() {
      var args = [];
      for (var i = 0,
          ii = arguments.length; i < ii; i++) {
        var arg = arguments[i];
        if (arg && arg.isRange === true) {
          arg.start--;
          arg.end -= (arg.step > 0 ? 0 : 2);
        } else if (arg && arg.isSet === true) {
          arg = arg.map(function(v) {
            return v - 1;
          });
        } else if (arg && (arg.isArray === true || arg.isMatrix)) {
          arg = arg.map(function(v) {
            return v - 1;
          });
        } else if (typeof arg === 'number') {
          arg--;
        } else if (arg && arg.isBigNumber === true) {
          arg = arg.toNumber() - 1;
        } else if (typeof arg === 'string') {} else {
          throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
        }
        args[i] = arg;
      }
      var res = new type.Index();
      type.Index.apply(res, args);
      return res;
    };
  }
  exports.name = 'index';
  exports.path = 'expression.transform';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1a7", ["1a8", "cd", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var map = load($__require('1a8'));
    var matrix = load($__require('cd'));
    return typed('max', {
      'Array, function': function(x, callback) {
        return _map(x, callback, x);
      },
      'Matrix, function': function(x, callback) {
        return matrix(_map(x.valueOf(), callback, x));
      }
    });
  }
  function _map(array, callback, orig) {
    function recurse(value, index) {
      if (Array.isArray(value)) {
        return value.map(function(child, i) {
          return recurse(child, index.concat(i + 1));
        });
      } else {
        return callback(value, index, orig);
      }
    }
    return recurse(array, []);
  }
  exports.name = 'map';
  exports.path = 'expression.transform';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1a9", ["1a0", "1aa", "1ab", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var errorTransform = $__require('1a0').transform;
  var isCollection = $__require('1aa');
  function factory(type, config, load, typed) {
    var max = load($__require('1ab'));
    return typed('max', {'...any': function(args) {
        if (args.length == 2 && isCollection(args[0])) {
          var dim = args[1];
          if (typeof dim === 'number') {
            args[1] = dim - 1;
          } else if (dim && dim.isBigNumber === true) {
            args[1] = dim.minus(1);
          }
        }
        try {
          return max.apply(null, args);
        } catch (err) {
          throw errorTransform(err);
        }
      }});
  }
  exports.name = 'max';
  exports.path = 'expression.transform';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1ac", ["1a0", "1aa", "1ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var errorTransform = $__require('1a0').transform;
  var isCollection = $__require('1aa');
  function factory(type, config, load, typed) {
    var mean = load($__require('1ad'));
    return typed('mean', {'...any': function(args) {
        if (args.length == 2 && isCollection(args[0])) {
          var dim = args[1];
          if (typeof dim === 'number') {
            args[1] = dim - 1;
          } else if (dim && dim.isBigNumber === true) {
            args[1] = dim.minus(1);
          }
        }
        try {
          return mean.apply(null, args);
        } catch (err) {
          throw errorTransform(err);
        }
      }});
  }
  exports.name = 'mean';
  exports.path = 'expression.transform';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1ae", ["1a0", "1aa", "1af", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var errorTransform = $__require('1a0').transform;
  var isCollection = $__require('1aa');
  function factory(type, config, load, typed) {
    var min = load($__require('1af'));
    return typed('min', {'...any': function(args) {
        if (args.length == 2 && isCollection(args[0])) {
          var dim = args[1];
          if (typeof dim === 'number') {
            args[1] = dim - 1;
          } else if (dim && dim.isBigNumber === true) {
            args[1] = dim.minus(1);
          }
        }
        try {
          return min.apply(null, args);
        } catch (err) {
          throw errorTransform(err);
        }
      }});
  }
  exports.name = 'min';
  exports.path = 'expression.transform';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1b0", ["1b1", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var range = load($__require('1b1'));
    return typed('range', {'...any': function(args) {
        var lastIndex = args.length - 1;
        var last = args[lastIndex];
        if (typeof last !== 'boolean') {
          args.push(true);
        }
        return range.apply(null, args);
      }});
  }
  exports.name = 'range';
  exports.path = 'expression.transform';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1b2", ["1a0", "1b3", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var errorTransform = $__require('1a0').transform;
  function factory(type, config, load, typed) {
    var subset = load($__require('1b3'));
    return typed('subset', {'...any': function(args) {
        try {
          return subset.apply(null, args);
        } catch (err) {
          throw errorTransform(err);
        }
      }});
  }
  exports.name = 'subset';
  exports.path = 'expression.transform';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1b4", ["19f", "1a2", "1a4", "1a6", "1a7", "1a9", "1ac", "1ae", "1b0", "1b2", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = [$__require('19f'), $__require('1a2'), $__require('1a4'), $__require('1a6'), $__require('1a7'), $__require('1a9'), $__require('1ac'), $__require('1ae'), $__require('1b0'), $__require('1b2')];
  return module.exports;
});

$__System.registerDynamic("18d", ["1b5", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed, math) {
    var Parser = load($__require('1b5'));
    return typed('parser', {'': function() {
        return new Parser(math);
      }});
  }
  exports.name = 'parser';
  exports.factory = factory;
  exports.math = true;
  return module.exports;
});

$__System.registerDynamic("1b6", ["a4", "b1", "18d", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var object = $__require('a4');
  var string = $__require('b1');
  function factory(type, config, load, typed) {
    var parser = load($__require('18d'))();
    function Help(doc) {
      if (!(this instanceof Help)) {
        throw new SyntaxError('Constructor must be called with the new operator');
      }
      if (!doc)
        throw new Error('Argument "doc" missing');
      this.doc = doc;
    }
    Help.prototype.type = 'Help';
    Help.prototype.isHelp = true;
    Help.prototype.toString = function() {
      var doc = this.doc || {};
      var desc = '\n';
      if (doc.name) {
        desc += 'Name: ' + doc.name + '\n\n';
      }
      if (doc.category) {
        desc += 'Category: ' + doc.category + '\n\n';
      }
      if (doc.description) {
        desc += 'Description:\n    ' + doc.description + '\n\n';
      }
      if (doc.syntax) {
        desc += 'Syntax:\n    ' + doc.syntax.join('\n    ') + '\n\n';
      }
      if (doc.examples) {
        desc += 'Examples:\n';
        for (var i = 0; i < doc.examples.length; i++) {
          var expr = doc.examples[i];
          desc += '    ' + expr + '\n';
          var res;
          try {
            res = parser.eval(expr);
          } catch (e) {
            res = e;
          }
          if (res && !res.isHelp) {
            desc += '        ' + string.format(res, {precision: 14}) + '\n';
          }
        }
        desc += '\n';
      }
      if (doc.seealso) {
        desc += 'See also: ' + doc.seealso.join(', ') + '\n';
      }
      return desc;
    };
    Help.prototype.toJSON = function() {
      var obj = object.clone(this.doc);
      obj.mathjs = 'Help';
      return obj;
    };
    Help.fromJSON = function(json) {
      var doc = {};
      for (var prop in json) {
        if (prop !== 'mathjs') {
          doc[prop] = json[prop];
        }
      }
      return new Help(doc);
    };
    Help.prototype.valueOf = Help.prototype.toString;
    return Help;
  }
  exports.name = 'Help';
  exports.path = 'type';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("190", ["199", "1b7", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var Node = load($__require('199'));
    var access = load($__require('1b7'));
    function AccessorNode(object, index) {
      if (!(this instanceof AccessorNode)) {
        throw new SyntaxError('Constructor must be called with the new operator');
      }
      if (!(object && object.isNode)) {
        throw new TypeError('Node expected for parameter "object"');
      }
      if (!(index && index.isIndexNode)) {
        throw new TypeError('IndexNode expected for parameter "index"');
      }
      this.object = object || null;
      this.index = index;
      Object.defineProperty(this, 'name', {
        get: function() {
          if (this.index) {
            return (this.index.isObjectProperty()) ? this.index.getObjectProperty() : '';
          } else {
            return this.object.name || '';
          }
        }.bind(this),
        set: function() {
          throw new Error('Cannot assign a new name, name is read-only');
        }
      });
    }
    AccessorNode.prototype = new Node();
    AccessorNode.prototype.type = 'AccessorNode';
    AccessorNode.prototype.isAccessorNode = true;
    AccessorNode.prototype._compile = function(defs, args) {
      defs.access = access;
      var object = this.object._compile(defs, args);
      var index = this.index._compile(defs, args);
      if (this.index.isObjectProperty()) {
        return object + '["' + this.index.getObjectProperty() + '"]';
      } else if (this.index.needsSize()) {
        return '(function () {' + '  var object = ' + object + ';' + '  var size = math.size(object).valueOf();' + '  return access(object, ' + index + ');' + '})()';
      } else {
        return 'access(' + object + ', ' + index + ')';
      }
    };
    AccessorNode.prototype.forEach = function(callback) {
      callback(this.object, 'object', this);
      callback(this.index, 'index', this);
    };
    AccessorNode.prototype.map = function(callback) {
      return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));
    };
    AccessorNode.prototype.clone = function() {
      return new AccessorNode(this.object, this.index);
    };
    AccessorNode.prototype._toString = function(options) {
      var object = this.object.toString(options);
      if (needParenthesis(this.object)) {
        object = '(' + object + ')';
      }
      return object + this.index.toString(options);
    };
    AccessorNode.prototype._toTex = function(options) {
      var object = this.object.toTex(options);
      if (needParenthesis(this.object)) {
        object = '\\left(' + object + '\\right)';
      }
      return object + this.index.toTex(options);
    };
    function needParenthesis(node) {
      return !(node.isAccessorNode || node.isArrayNode || node.isConstantNode || node.isFunctionNode || node.isObjectNode || node.isParenthesisNode || node.isSymbolNode);
    }
    return AccessorNode;
  }
  exports.name = 'AccessorNode';
  exports.path = 'expression.node';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("191", ["199", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var Node = load($__require('199'));
    function ArrayNode(items) {
      if (!(this instanceof ArrayNode)) {
        throw new SyntaxError('Constructor must be called with the new operator');
      }
      this.items = items || [];
      if (!Array.isArray(this.items) || !this.items.every(function(item) {
        return item && item.isNode;
      })) {
        throw new TypeError('Array containing Nodes expected');
      }
      var deprecated = function() {
        throw new Error('Property `ArrayNode.nodes` is deprecated, use `ArrayNode.items` instead');
      };
      Object.defineProperty(this, 'nodes', {
        get: deprecated,
        set: deprecated
      });
    }
    ArrayNode.prototype = new Node();
    ArrayNode.prototype.type = 'ArrayNode';
    ArrayNode.prototype.isArrayNode = true;
    ArrayNode.prototype._compile = function(defs, args) {
      var asMatrix = (defs.math.config().matrix !== 'Array');
      var items = this.items.map(function(node) {
        return node._compile(defs, args);
      });
      return (asMatrix ? 'math.matrix([' : '[') + items.join(',') + (asMatrix ? '])' : ']');
    };
    ArrayNode.prototype.forEach = function(callback) {
      for (var i = 0; i < this.items.length; i++) {
        var node = this.items[i];
        callback(node, 'items[' + i + ']', this);
      }
    };
    ArrayNode.prototype.map = function(callback) {
      var items = [];
      for (var i = 0; i < this.items.length; i++) {
        items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));
      }
      return new ArrayNode(items);
    };
    ArrayNode.prototype.clone = function() {
      return new ArrayNode(this.items.slice(0));
    };
    ArrayNode.prototype._toString = function(options) {
      var items = this.items.map(function(node) {
        return node.toString(options);
      });
      return '[' + items.join(', ') + ']';
    };
    ArrayNode.prototype._toTex = function(options) {
      var s = '\\begin{bmatrix}';
      this.items.forEach(function(node) {
        if (node.items) {
          s += node.items.map(function(childNode) {
            return childNode.toTex(options);
          }).join('&');
        } else {
          s += node.toTex(options);
        }
        s += '\\\\';
      });
      s += '\\end{bmatrix}';
      return s;
    };
    return ArrayNode;
  }
  exports.name = 'ArrayNode';
  exports.path = 'expression.node';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1b8", ["1a0", "1b3", "cd", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var errorTransform = $__require('1a0').transform;
  function factory(type, config, load, typed) {
    var subset = load($__require('1b3'));
    var matrix = load($__require('cd'));
    return function assign(object, index, value) {
      try {
        if (Array.isArray(object)) {
          return matrix(object).subset(index, value).valueOf();
        } else if (object && typeof object.subset === 'function') {
          return object.subset(index, value);
        } else if (typeof object === 'string') {
          return subset(object, index, value);
        } else if (typeof object === 'object') {
          if (!index.isObjectProperty()) {
            throw TypeError('Cannot apply a numeric index as object property');
          }
          object[index.getObjectProperty()] = value;
          return object;
        } else {
          throw new TypeError('Cannot apply index: unsupported type of object');
        }
      } catch (err) {
        throw errorTransform(err);
      }
    };
  }
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1a0", ["1b9", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var IndexError = $__require('1b9');
  exports.transform = function(err) {
    if (err && err.isIndexError) {
      return new IndexError(err.index + 1, err.min + 1, err.max !== undefined ? err.max + 1 : undefined);
    }
    return err;
  };
  return module.exports;
});

$__System.registerDynamic("1b7", ["1a0", "1b3", "cd", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var errorTransform = $__require('1a0').transform;
  function factory(type, config, load, typed) {
    var subset = load($__require('1b3'));
    var matrix = load($__require('cd'));
    return function access(object, index) {
      try {
        if (Array.isArray(object)) {
          return matrix(object).subset(index).valueOf();
        } else if (object && typeof object.subset === 'function') {
          return object.subset(index);
        } else if (typeof object === 'string') {
          return subset(object, index);
        } else if (typeof object === 'object') {
          if (!index.isObjectProperty()) {
            throw TypeError('Cannot apply a numeric index as object property');
          }
          return object[index.getObjectProperty()];
        } else {
          throw new TypeError('Cannot apply index: unsupported type of object');
        }
      } catch (err) {
        throw errorTransform(err);
      }
    };
  }
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("192", ["b5", "199", "191", "cd", "1b8", "1b7", "1ba", "1bb", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var latex = $__require('b5');
  function factory(type, config, load, typed) {
    var Node = load($__require('199'));
    var ArrayNode = load($__require('191'));
    var matrix = load($__require('cd'));
    var assign = load($__require('1b8'));
    var access = load($__require('1b7'));
    var keywords = $__require('1ba');
    var operators = $__require('1bb');
    function AssignmentNode(object, index, value) {
      if (!(this instanceof AssignmentNode)) {
        throw new SyntaxError('Constructor must be called with the new operator');
      }
      this.object = object;
      this.index = value ? index : null;
      this.value = value ? value : index;
      if (!object || !(object.isSymbolNode || object.isAccessorNode)) {
        throw new TypeError('SymbolNode or AccessorNode expected as "object"');
      }
      if (object && object.isSymbolNode && object.name === 'end') {
        throw new Error('Cannot assign to symbol "end"');
      }
      if (this.index && !this.index.isIndexNode) {
        throw new TypeError('IndexNode expected as "index"');
      }
      if (!this.value || !this.value.isNode) {
        throw new TypeError('Node expected as "value"');
      }
      Object.defineProperty(this, 'name', {
        get: function() {
          if (this.index) {
            return (this.index.isObjectProperty()) ? this.index.getObjectProperty() : '';
          } else {
            return this.object.name || '';
          }
        }.bind(this),
        set: function() {
          throw new Error('Cannot assign a new name, name is read-only');
        }
      });
    }
    AssignmentNode.prototype = new Node();
    AssignmentNode.prototype.type = 'AssignmentNode';
    AssignmentNode.prototype.isAssignmentNode = true;
    AssignmentNode.prototype._compile = function(defs, args) {
      defs.assign = assign;
      defs.access = access;
      var size;
      var object = this.object._compile(defs, args);
      var index = this.index ? this.index._compile(defs, args) : null;
      var value = this.value._compile(defs, args);
      if (!this.index) {
        if (!this.object.isSymbolNode) {
          throw new TypeError('SymbolNode expected as object');
        }
        return 'scope["' + this.object.name + '"] = ' + value;
      } else if (this.index.isObjectProperty()) {
        return object + '["' + this.index.getObjectProperty() + '"] = ' + value;
      } else if (this.object.isSymbolNode) {
        size = this.index.needsSize() ? 'var size = math.size(object).valueOf();' : '';
        return '(function () {' + '  var object = ' + object + ';' + '  var value = ' + value + ';' + '  ' + size + '  scope["' + this.object.name + '"] = assign(object, ' + index + ', value);' + '  return value;' + '})()';
      } else {
        size = this.index.needsSize() ? 'var size = math.size(object).valueOf();' : '';
        var parentObject = this.object.object._compile(defs, args);
        if (this.object.index.isObjectProperty()) {
          var parentProperty = '["' + this.object.index.getObjectProperty() + '"]';
          return '(function () {' + '  var parent = ' + parentObject + ';' + '  var object = parent' + parentProperty + ';' + '  var value = ' + value + ';' + size + '  parent' + parentProperty + ' = assign(object, ' + index + ', value);' + '  return value;' + '})()';
        } else {
          var parentSize = this.object.index.needsSize() ? 'var size = math.size(parent).valueOf();' : '';
          var parentIndex = this.object.index._compile(defs, args);
          return '(function () {' + '  var parent = ' + parentObject + ';' + '  ' + parentSize + '  var parentIndex = ' + parentIndex + ';' + '  var object = access(parent, parentIndex);' + '  var value = ' + value + ';' + '  ' + size + '  assign(parent, parentIndex, assign(object, ' + index + ', value));' + '  return value;' + '})()';
        }
      }
    };
    AssignmentNode.prototype.forEach = function(callback) {
      callback(this.object, 'object', this);
      if (this.index) {
        callback(this.index, 'index', this);
      }
      callback(this.value, 'value', this);
    };
    AssignmentNode.prototype.map = function(callback) {
      var object = this._ifNode(callback(this.object, 'object', this));
      var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;
      var value = this._ifNode(callback(this.value, 'value', this));
      return new AssignmentNode(object, index, value);
    };
    AssignmentNode.prototype.clone = function() {
      return new AssignmentNode(this.object, this.index, this.value);
    };
    function needParenthesis(node, parenthesis) {
      if (!parenthesis) {
        parenthesis = 'keep';
      }
      var precedence = operators.getPrecedence(node, parenthesis);
      var exprPrecedence = operators.getPrecedence(node.value, parenthesis);
      return (parenthesis === 'all') || ((exprPrecedence !== null) && (exprPrecedence <= precedence));
    }
    AssignmentNode.prototype._toString = function(options) {
      var object = this.object.toString(options);
      var index = this.index ? this.index.toString(options) : '';
      var value = this.value.toString(options);
      if (needParenthesis(this, options && options.parenthesis)) {
        value = '(' + value + ')';
      }
      return object + index + ' = ' + value;
    };
    AssignmentNode.prototype._toTex = function(options) {
      var object = this.object.toTex(options);
      var index = this.index ? this.index.toTex(options) : '';
      var value = this.value.toTex(options);
      if (needParenthesis(this, options && options.parenthesis)) {
        value = '\\left(' + value + '\\right)';
      }
      return object + index + ':=' + value;
    };
    return AssignmentNode;
  }
  exports.name = 'AssignmentNode';
  exports.path = 'expression.node';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("cf", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    function ResultSet(entries) {
      if (!(this instanceof ResultSet)) {
        throw new SyntaxError('Constructor must be called with the new operator');
      }
      this.entries = entries || [];
    }
    ResultSet.prototype.type = 'ResultSet';
    ResultSet.prototype.isResultSet = true;
    ResultSet.prototype.valueOf = function() {
      return this.entries;
    };
    ResultSet.prototype.toString = function() {
      return '[' + this.entries.join(', ') + ']';
    };
    ResultSet.prototype.toJSON = function() {
      return {
        mathjs: 'ResultSet',
        entries: this.entries
      };
    };
    ResultSet.fromJSON = function(json) {
      return new ResultSet(json.entries);
    };
    return ResultSet;
  }
  exports.name = 'ResultSet';
  exports.path = 'type';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("193", ["199", "cf", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var Node = load($__require('199'));
    var ResultSet = load($__require('cf'));
    function BlockNode(blocks) {
      if (!(this instanceof BlockNode)) {
        throw new SyntaxError('Constructor must be called with the new operator');
      }
      if (!Array.isArray(blocks))
        throw new Error('Array expected');
      this.blocks = blocks.map(function(block) {
        var node = block && block.node;
        var visible = block && block.visible !== undefined ? block.visible : true;
        if (!(node && node.isNode))
          throw new TypeError('Property "node" must be a Node');
        if (typeof visible !== 'boolean')
          throw new TypeError('Property "visible" must be a boolean');
        return {
          node: node,
          visible: visible
        };
      });
    }
    BlockNode.prototype = new Node();
    BlockNode.prototype.type = 'BlockNode';
    BlockNode.prototype.isBlockNode = true;
    BlockNode.prototype._compile = function(defs, args) {
      defs.ResultSet = ResultSet;
      var blocks = this.blocks.map(function(param) {
        var js = param.node._compile(defs, args);
        if (param.visible) {
          return 'results.push(' + js + ');';
        } else {
          return js + ';';
        }
      });
      return '(function () {' + 'var results = [];' + blocks.join('') + 'return new ResultSet(results);' + '})()';
    };
    BlockNode.prototype.forEach = function(callback) {
      for (var i = 0; i < this.blocks.length; i++) {
        callback(this.blocks[i].node, 'blocks[' + i + '].node', this);
      }
    };
    BlockNode.prototype.map = function(callback) {
      var blocks = [];
      for (var i = 0; i < this.blocks.length; i++) {
        var block = this.blocks[i];
        var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));
        blocks[i] = {
          node: node,
          visible: block.visible
        };
      }
      return new BlockNode(blocks);
    };
    BlockNode.prototype.clone = function() {
      var blocks = this.blocks.map(function(block) {
        return {
          node: block.node,
          visible: block.visible
        };
      });
      return new BlockNode(blocks);
    };
    BlockNode.prototype._toString = function(options) {
      return this.blocks.map(function(param) {
        return param.node.toString(options) + (param.visible ? '' : ';');
      }).join('\n');
    };
    BlockNode.prototype._toTex = function(options) {
      return this.blocks.map(function(param) {
        return param.node.toTex(options) + (param.visible ? '' : ';');
      }).join('\\;\\;\n');
    };
    return BlockNode;
  }
  exports.name = 'BlockNode';
  exports.path = 'expression.node';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("194", ["b5", "1bb", "199", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var latex = $__require('b5');
  var operators = $__require('1bb');
  function factory(type, config, load, typed) {
    var Node = load($__require('199'));
    function ConditionalNode(condition, trueExpr, falseExpr) {
      if (!(this instanceof ConditionalNode)) {
        throw new SyntaxError('Constructor must be called with the new operator');
      }
      if (!(condition && condition.isNode))
        throw new TypeError('Parameter condition must be a Node');
      if (!(trueExpr && trueExpr.isNode))
        throw new TypeError('Parameter trueExpr must be a Node');
      if (!(falseExpr && falseExpr.isNode))
        throw new TypeError('Parameter falseExpr must be a Node');
      this.condition = condition;
      this.trueExpr = trueExpr;
      this.falseExpr = falseExpr;
    }
    ConditionalNode.prototype = new Node();
    ConditionalNode.prototype.type = 'ConditionalNode';
    ConditionalNode.prototype.isConditionalNode = true;
    ConditionalNode.prototype._compile = function(defs, args) {
      defs.testCondition = function(condition) {
        if (typeof condition === 'number' || typeof condition === 'boolean' || typeof condition === 'string') {
          return condition ? true : false;
        }
        if (condition) {
          if (condition.isBigNumber === true) {
            return condition.isZero() ? false : true;
          }
          if (condition.isComplex === true) {
            return (condition.re || condition.im) ? true : false;
          }
          if (condition.isUnit === true) {
            return condition.value ? true : false;
          }
        }
        if (condition === null || condition === undefined) {
          return false;
        }
        throw new TypeError('Unsupported type of condition "' + defs.math['typeof'](condition) + '"');
      };
      return ('testCondition(' + this.condition._compile(defs, args) + ') ? ' + '( ' + this.trueExpr._compile(defs, args) + ') : ' + '( ' + this.falseExpr._compile(defs, args) + ')');
    };
    ConditionalNode.prototype.forEach = function(callback) {
      callback(this.condition, 'condition', this);
      callback(this.trueExpr, 'trueExpr', this);
      callback(this.falseExpr, 'falseExpr', this);
    };
    ConditionalNode.prototype.map = function(callback) {
      return new ConditionalNode(this._ifNode(callback(this.condition, 'condition', this)), this._ifNode(callback(this.trueExpr, 'trueExpr', this)), this._ifNode(callback(this.falseExpr, 'falseExpr', this)));
    };
    ConditionalNode.prototype.clone = function() {
      return new ConditionalNode(this.condition, this.trueExpr, this.falseExpr);
    };
    ConditionalNode.prototype._toString = function(options) {
      var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
      var precedence = operators.getPrecedence(this, parenthesis);
      var condition = this.condition.toString(options);
      var conditionPrecedence = operators.getPrecedence(this.condition, parenthesis);
      if ((parenthesis === 'all') || (this.condition.type === 'OperatorNode') || ((conditionPrecedence !== null) && (conditionPrecedence <= precedence))) {
        condition = '(' + condition + ')';
      }
      var trueExpr = this.trueExpr.toString(options);
      var truePrecedence = operators.getPrecedence(this.trueExpr, parenthesis);
      if ((parenthesis === 'all') || (this.trueExpr.type === 'OperatorNode') || ((truePrecedence !== null) && (truePrecedence <= precedence))) {
        trueExpr = '(' + trueExpr + ')';
      }
      var falseExpr = this.falseExpr.toString(options);
      var falsePrecedence = operators.getPrecedence(this.falseExpr, parenthesis);
      if ((parenthesis === 'all') || (this.falseExpr.type === 'OperatorNode') || ((falsePrecedence !== null) && (falsePrecedence <= precedence))) {
        falseExpr = '(' + falseExpr + ')';
      }
      return condition + ' ? ' + trueExpr + ' : ' + falseExpr;
    };
    ConditionalNode.prototype._toTex = function(options) {
      return '\\begin{cases} {' + this.trueExpr.toTex(options) + '}, &\\quad{\\text{if }\\;' + this.condition.toTex(options) + '}\\\\{' + this.falseExpr.toTex(options) + '}, &\\quad{\\text{otherwise}}\\end{cases}';
    };
    return ConditionalNode;
  }
  exports.name = 'ConditionalNode';
  exports.path = 'expression.node';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("197", ["1ba", "b5", "1bb", "199", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var keywords = $__require('1ba');
  var latex = $__require('b5');
  var operators = $__require('1bb');
  function isString(x) {
    return typeof x === 'string';
  }
  function factory(type, config, load, typed) {
    var Node = load($__require('199'));
    function FunctionAssignmentNode(name, params, expr) {
      if (!(this instanceof FunctionAssignmentNode)) {
        throw new SyntaxError('Constructor must be called with the new operator');
      }
      if (typeof name !== 'string')
        throw new TypeError('String expected for parameter "name"');
      if (!Array.isArray(params) || !params.every(isString))
        throw new TypeError('Array containing strings expected for parameter "params"');
      if (!(expr && expr.isNode))
        throw new TypeError('Node expected for parameter "expr"');
      if (name in keywords)
        throw new Error('Illegal function name, "' + name + '" is a reserved keyword');
      this.name = name;
      this.params = params;
      this.expr = expr;
    }
    FunctionAssignmentNode.prototype = new Node();
    FunctionAssignmentNode.prototype.type = 'FunctionAssignmentNode';
    FunctionAssignmentNode.prototype.isFunctionAssignmentNode = true;
    FunctionAssignmentNode.prototype._compile = function(defs, args) {
      var childArgs = Object.create(args);
      this.params.forEach(function(variable) {
        childArgs[variable] = true;
      });
      var jsExpr = this.expr._compile(defs, childArgs);
      return 'scope["' + this.name + '"] = ' + '  (function () {' + '    var fn = function ' + this.name + '(' + this.params.join(',') + ') {' + '      if (arguments.length != ' + this.params.length + ') {' + '        throw new SyntaxError("Wrong number of arguments in function ' + this.name + ' (" + arguments.length + " provided, ' + this.params.length + ' expected)");' + '      }' + '      return ' + jsExpr + '' + '    };' + '    fn.syntax = "' + this.name + '(' + this.params.join(', ') + ')";' + '    return fn;' + '  })()';
    };
    FunctionAssignmentNode.prototype.forEach = function(callback) {
      callback(this.expr, 'expr', this);
    };
    FunctionAssignmentNode.prototype.map = function(callback) {
      var expr = this._ifNode(callback(this.expr, 'expr', this));
      return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);
    };
    FunctionAssignmentNode.prototype.clone = function() {
      return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);
    };
    function needParenthesis(node, parenthesis) {
      var precedence = operators.getPrecedence(node, parenthesis);
      var exprPrecedence = operators.getPrecedence(node.expr, parenthesis);
      return (parenthesis === 'all') || ((exprPrecedence !== null) && (exprPrecedence <= precedence));
    }
    FunctionAssignmentNode.prototype._toString = function(options) {
      var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
      var expr = this.expr.toString(options);
      if (needParenthesis(this, parenthesis)) {
        expr = '(' + expr + ')';
      }
      return 'function ' + this.name + '(' + this.params.join(', ') + ') = ' + expr;
    };
    FunctionAssignmentNode.prototype._toTex = function(options) {
      var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
      var expr = this.expr.toTex(options);
      if (needParenthesis(this, parenthesis)) {
        expr = '\\left(' + expr + '\\right)';
      }
      return '\\mathrm{' + this.name + '}\\left(' + this.params.map(latex.toSymbol).join(',') + '\\right):=' + expr;
    };
    return FunctionAssignmentNode;
  }
  exports.name = 'FunctionAssignmentNode';
  exports.path = 'expression.node';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("cb", ["a2", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var number = $__require('a2');
  function factory(type, config, load, typed) {
    function Range(start, end, step) {
      if (!(this instanceof Range)) {
        throw new SyntaxError('Constructor must be called with the new operator');
      }
      if (start != null) {
        if (start.isBigNumber === true)
          start = start.toNumber();
        else if (typeof start !== 'number')
          throw new TypeError('Parameter start must be a number');
      }
      if (end != null) {
        if (end.isBigNumber === true)
          end = end.toNumber();
        else if (typeof end !== 'number')
          throw new TypeError('Parameter end must be a number');
      }
      if (step != null) {
        if (step.isBigNumber === true)
          step = step.toNumber();
        else if (typeof step !== 'number')
          throw new TypeError('Parameter step must be a number');
      }
      this.start = (start != null) ? parseFloat(start) : 0;
      this.end = (end != null) ? parseFloat(end) : 0;
      this.step = (step != null) ? parseFloat(step) : 1;
    }
    Range.prototype.type = 'Range';
    Range.prototype.isRange = true;
    Range.parse = function(str) {
      if (typeof str !== 'string') {
        return null;
      }
      var args = str.split(':');
      var nums = args.map(function(arg) {
        return parseFloat(arg);
      });
      var invalid = nums.some(function(num) {
        return isNaN(num);
      });
      if (invalid) {
        return null;
      }
      switch (nums.length) {
        case 2:
          return new Range(nums[0], nums[1]);
        case 3:
          return new Range(nums[0], nums[2], nums[1]);
        default:
          return null;
      }
    };
    Range.prototype.clone = function() {
      return new Range(this.start, this.end, this.step);
    };
    Range.prototype.size = function() {
      var len = 0,
          start = this.start,
          step = this.step,
          end = this.end,
          diff = end - start;
      if (number.sign(step) == number.sign(diff)) {
        len = Math.ceil((diff) / step);
      } else if (diff == 0) {
        len = 0;
      }
      if (isNaN(len)) {
        len = 0;
      }
      return [len];
    };
    Range.prototype.min = function() {
      var size = this.size()[0];
      if (size > 0) {
        if (this.step > 0) {
          return this.start;
        } else {
          return this.start + (size - 1) * this.step;
        }
      } else {
        return undefined;
      }
    };
    Range.prototype.max = function() {
      var size = this.size()[0];
      if (size > 0) {
        if (this.step > 0) {
          return this.start + (size - 1) * this.step;
        } else {
          return this.start;
        }
      } else {
        return undefined;
      }
    };
    Range.prototype.forEach = function(callback) {
      var x = this.start;
      var step = this.step;
      var end = this.end;
      var i = 0;
      if (step > 0) {
        while (x < end) {
          callback(x, [i], this);
          x += step;
          i++;
        }
      } else if (step < 0) {
        while (x > end) {
          callback(x, [i], this);
          x += step;
          i++;
        }
      }
    };
    Range.prototype.map = function(callback) {
      var array = [];
      this.forEach(function(value, index, obj) {
        array[index[0]] = callback(value, index, obj);
      });
      return array;
    };
    Range.prototype.toArray = function() {
      var array = [];
      this.forEach(function(value, index) {
        array[index[0]] = value;
      });
      return array;
    };
    Range.prototype.valueOf = function() {
      return this.toArray();
    };
    Range.prototype.format = function(options) {
      var str = number.format(this.start, options);
      if (this.step != 1) {
        str += ':' + number.format(this.step, options);
      }
      str += ':' + number.format(this.end, options);
      return str;
    };
    Range.prototype.toString = function() {
      return this.format();
    };
    Range.prototype.toJSON = function() {
      return {
        mathjs: 'Range',
        start: this.start,
        end: this.end,
        step: this.step
      };
    };
    Range.fromJSON = function(json) {
      return new Range(json.start, json.end, json.step);
    };
    return Range;
  }
  exports.name = 'Range';
  exports.path = 'type';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("196", ["199", "19d", "19e", "cb", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var Node = load($__require('199'));
    var RangeNode = load($__require('19d'));
    var SymbolNode = load($__require('19e'));
    var Range = load($__require('cb'));
    var isArray = Array.isArray;
    function IndexNode(dimensions, dotNotation) {
      if (!(this instanceof IndexNode)) {
        throw new SyntaxError('Constructor must be called with the new operator');
      }
      this.dimensions = dimensions;
      this.dotNotation = dotNotation || false;
      if (!isArray(dimensions) || !dimensions.every(function(range) {
        return range && range.isNode;
      })) {
        throw new TypeError('Array containing Nodes expected for parameter "dimensions"');
      }
      if (this.dotNotation && !this.isObjectProperty()) {
        throw new Error('dotNotation only applicable for object properties');
      }
      var deprecated = function() {
        throw new Error('Property `IndexNode.object` is deprecated, use `IndexNode.fn` instead');
      };
      Object.defineProperty(this, 'object', {
        get: deprecated,
        set: deprecated
      });
    }
    IndexNode.prototype = new Node();
    IndexNode.prototype.type = 'IndexNode';
    IndexNode.prototype.isIndexNode = true;
    IndexNode.prototype._compile = function(defs, args) {
      var childArgs = Object.create(args);
      defs.range = function(start, end, step) {
        return new Range((start && start.isBigNumber === true) ? start.toNumber() : start, (end && end.isBigNumber === true) ? end.toNumber() : end, (step && step.isBigNumber === true) ? step.toNumber() : step);
      };
      var dimensions = this.dimensions.map(function(range, i) {
        if (range && range.isRangeNode) {
          if (range.needsEnd()) {
            childArgs.end = true;
            return '(function () {' + 'var end = size[' + i + ']; ' + 'return range(' + range.start._compile(defs, childArgs) + ', ' + range.end._compile(defs, childArgs) + ', ' + (range.step ? range.step._compile(defs, childArgs) : '1') + '); ' + '})()';
          } else {
            return 'range(' + range.start._compile(defs, childArgs) + ', ' + range.end._compile(defs, childArgs) + ', ' + (range.step ? range.step._compile(defs, childArgs) : '1') + ')';
          }
        }
        if (range.isSymbolNode && range.name === 'end') {
          childArgs.end = true;
          return '(function () {' + 'var end = size[' + i + ']; ' + 'return ' + range._compile(defs, childArgs) + '; ' + '})()';
        } else {
          return range._compile(defs, childArgs);
        }
      });
      return 'math.index(' + dimensions.join(', ') + ')';
    };
    IndexNode.prototype.forEach = function(callback) {
      for (var i = 0; i < this.dimensions.length; i++) {
        callback(this.dimensions[i], 'dimensions[' + i + ']', this);
      }
    };
    IndexNode.prototype.map = function(callback) {
      var dimensions = [];
      for (var i = 0; i < this.dimensions.length; i++) {
        dimensions[i] = this._ifNode(callback(this.dimensions[i], 'dimensions[' + i + ']', this));
      }
      return new IndexNode(dimensions);
    };
    IndexNode.prototype.clone = function() {
      return new IndexNode(this.dimensions.slice(0));
    };
    IndexNode.prototype.isObjectProperty = function() {
      return this.dimensions.length === 1 && this.dimensions[0].isConstantNode && this.dimensions[0].valueType === 'string';
    };
    IndexNode.prototype.getObjectProperty = function() {
      return this.isObjectProperty() ? this.dimensions[0].value : null;
    };
    IndexNode.prototype._toString = function(options) {
      return this.dotNotation ? ('.' + this.getObjectProperty()) : ('[' + this.dimensions.join(', ') + ']');
    };
    IndexNode.prototype._toTex = function(options) {
      var dimensions = this.dimensions.map(function(range) {
        return range.toTex(options);
      });
      return this.dotNotation ? ('.' + this.getObjectProperty() + '') : ('_{' + dimensions.join(',') + '}');
    };
    IndexNode.prototype.needsSize = function() {
      return this.dimensions.some(function(range) {
        return (range.isRangeNode && range.needsEnd()) || (range.isSymbolNode && range.name === 'end');
      });
    };
    return IndexNode;
  }
  exports.name = 'IndexNode';
  exports.path = 'expression.node';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("19a", ["b1", "199", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var string = $__require('b1');
  function factory(type, config, load, typed) {
    var Node = load($__require('199'));
    function ObjectNode(properties) {
      if (!(this instanceof ObjectNode)) {
        throw new SyntaxError('Constructor must be called with the new operator');
      }
      this.properties = properties || {};
      if (properties) {
        if (!(typeof properties === 'object') || Object.keys(properties).some(function(key) {
          return !properties[key] || !properties[key].isNode;
        })) {
          throw new TypeError('Object containing Nodes expected');
        }
      }
    }
    ObjectNode.prototype = new Node();
    ObjectNode.prototype.type = 'ObjectNode';
    ObjectNode.prototype.isObjectNode = true;
    ObjectNode.prototype._compile = function(defs, args) {
      var entries = [];
      for (var key in this.properties) {
        if (this.properties.hasOwnProperty(key)) {
          entries.push('"' + key + '": ' + this.properties[key]._compile(defs, args));
        }
      }
      return '{' + entries.join(', ') + '}';
    };
    ObjectNode.prototype.forEach = function(callback) {
      for (var key in this.properties) {
        if (this.properties.hasOwnProperty(key)) {
          callback(this.properties[key], 'properties["' + key + '"]', this);
        }
      }
    };
    ObjectNode.prototype.map = function(callback) {
      var properties = {};
      for (var key in this.properties) {
        if (this.properties.hasOwnProperty(key)) {
          properties[key] = this._ifNode(callback(this.properties[key], 'properties["' + key + '"]', this));
        }
      }
      return new ObjectNode(properties);
    };
    ObjectNode.prototype.clone = function() {
      var properties = {};
      for (var key in this.properties) {
        if (this.properties.hasOwnProperty(key)) {
          properties[key] = this.properties[key];
        }
      }
      return new ObjectNode(properties);
    };
    ObjectNode.prototype._toString = function(options) {
      var entries = [];
      for (var key in this.properties) {
        if (this.properties.hasOwnProperty(key)) {
          entries.push('"' + key + '": ' + this.properties[key].toString(options));
        }
      }
      return '{' + entries.join(', ') + '}';
    };
    ObjectNode.prototype._toTex = function(options) {
      var entries = [];
      for (var key in this.properties) {
        if (this.properties.hasOwnProperty(key)) {
          entries.push("\\mathbf{" + key + ':} & ' + this.properties[key].toTex(options) + "\\\\");
        }
      }
      return '\\left\\{\\begin{array}{ll}' + entries.join('\n') + '\\end{array}\\right\\}';
    };
    return ObjectNode;
  }
  exports.name = 'ObjectNode';
  exports.path = 'expression.node';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("195", ["1bc", "199", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var getType = $__require('1bc').type;
  function factory(type, config, load, typed) {
    var Node = load($__require('199'));
    function ConstantNode(value, valueType) {
      if (!(this instanceof ConstantNode)) {
        throw new SyntaxError('Constructor must be called with the new operator');
      }
      if (valueType) {
        if (typeof valueType !== 'string') {
          throw new TypeError('String expected for parameter "valueType"');
        }
        if (typeof value !== 'string') {
          throw new TypeError('String expected for parameter "value"');
        }
        this.value = value;
        this.valueType = valueType;
      } else {
        this.value = value + '';
        this.valueType = getType(value);
      }
      if (!SUPPORTED_TYPES[this.valueType]) {
        throw new TypeError('Unsupported type of value "' + this.valueType + '"');
      }
    }
    var SUPPORTED_TYPES = {
      'number': true,
      'string': true,
      'boolean': true,
      'undefined': true,
      'null': true
    };
    ConstantNode.prototype = new Node();
    ConstantNode.prototype.type = 'ConstantNode';
    ConstantNode.prototype.isConstantNode = true;
    ConstantNode.prototype._compile = function(defs, args) {
      switch (this.valueType) {
        case 'number':
          var numConfig = defs.math.config().number;
          if (numConfig === 'BigNumber') {
            return 'math.bignumber("' + this.value + '")';
          } else if (numConfig === 'Fraction') {
            return 'math.fraction("' + this.value + '")';
          } else {
            return this.value.replace(/^(0*)[0-9]/, function(match, zeros) {
              return match.substring(zeros.length);
            });
          }
        case 'string':
          return '"' + this.value + '"';
        case 'boolean':
          return this.value;
        case 'undefined':
          return this.value;
        case 'null':
          return this.value;
        default:
          throw new TypeError('Unsupported type of constant "' + this.valueType + '"');
      }
    };
    ConstantNode.prototype.forEach = function(callback) {};
    ConstantNode.prototype.map = function(callback) {
      return this.clone();
    };
    ConstantNode.prototype.clone = function() {
      return new ConstantNode(this.value, this.valueType);
    };
    ConstantNode.prototype._toString = function(options) {
      switch (this.valueType) {
        case 'string':
          return '"' + this.value + '"';
        default:
          return this.value;
      }
    };
    ConstantNode.prototype._toTex = function(options) {
      var value = this.value,
          index;
      switch (this.valueType) {
        case 'string':
          return '\\mathtt{"' + value + '"}';
        case 'number':
          index = value.toLowerCase().indexOf('e');
          if (index !== -1) {
            return value.substring(0, index) + '\\cdot10^{' + value.substring(index + 1) + '}';
          }
          return value;
        default:
          return value;
      }
    };
    return ConstantNode;
  }
  exports.name = 'ConstantNode';
  exports.path = 'expression.node';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("19b", ["b5", "1bb", "199", "195", "19e", "198", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var latex = $__require('b5');
  var operators = $__require('1bb');
  function factory(type, config, load, typed, math) {
    var Node = load($__require('199'));
    var ConstantNode = load($__require('195'));
    var SymbolNode = load($__require('19e'));
    var FunctionNode = load($__require('198'));
    function OperatorNode(op, fn, args, implicit) {
      if (!(this instanceof OperatorNode)) {
        throw new SyntaxError('Constructor must be called with the new operator');
      }
      if (typeof op !== 'string') {
        throw new TypeError('string expected for parameter "op"');
      }
      if (typeof fn !== 'string') {
        throw new TypeError('string expected for parameter "fn"');
      }
      if (!Array.isArray(args) || !args.every(function(node) {
        return node && node.isNode;
      })) {
        throw new TypeError('Array containing Nodes expected for parameter "args"');
      }
      this.implicit = (implicit === true);
      this.op = op;
      this.fn = fn;
      this.args = args || [];
    }
    OperatorNode.prototype = new Node();
    OperatorNode.prototype.type = 'OperatorNode';
    OperatorNode.prototype.isOperatorNode = true;
    OperatorNode.prototype._compile = function(defs, args) {
      if (!defs.math[this.fn]) {
        throw new Error('Function ' + this.fn + ' missing in provided namespace "math"');
      }
      var jsArgs = this.args.map(function(arg) {
        return arg._compile(defs, args);
      });
      return 'math.' + this.fn + '(' + jsArgs.join(', ') + ')';
    };
    OperatorNode.prototype.forEach = function(callback) {
      for (var i = 0; i < this.args.length; i++) {
        callback(this.args[i], 'args[' + i + ']', this);
      }
    };
    OperatorNode.prototype.map = function(callback) {
      var args = [];
      for (var i = 0; i < this.args.length; i++) {
        args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
      }
      return new OperatorNode(this.op, this.fn, args);
    };
    OperatorNode.prototype.clone = function() {
      return new OperatorNode(this.op, this.fn, this.args.slice(0));
    };
    function calculateNecessaryParentheses(root, parenthesis, args, latex) {
      var precedence = operators.getPrecedence(root, parenthesis);
      var associativity = operators.getAssociativity(root, parenthesis);
      if ((parenthesis === 'all') || (args.length > 2)) {
        var parens = [];
        args.forEach(function(arg) {
          switch (arg.getContent().type) {
            case 'ArrayNode':
            case 'ConstantNode':
            case 'SymbolNode':
            case 'ParenthesisNode':
              parens.push(false);
              break;
            default:
              parens.push(true);
          }
        });
        return parens;
      }
      switch (args.length) {
        case 0:
          return [];
        case 1:
          var operandPrecedence = operators.getPrecedence(args[0], parenthesis);
          if (latex && (operandPrecedence !== null)) {
            var operandIdentifier;
            var rootIdentifier;
            if (parenthesis === 'keep') {
              operandIdentifier = args[0].getIdentifier();
              rootIdentifier = root.getIdentifier();
            } else {
              operandIdentifier = args[0].getContent().getIdentifier();
              rootIdentifier = root.getContent().getIdentifier();
            }
            if (operators.properties[precedence][rootIdentifier].latexLeftParens === false) {
              return [false];
            }
            if (operators.properties[operandPrecedence][operandIdentifier].latexParens === false) {
              return [false];
            }
          }
          if (operandPrecedence === null) {
            return [false];
          }
          if (operandPrecedence <= precedence) {
            return [true];
          }
          return [false];
        case 2:
          var lhsParens;
          var lhsPrecedence = operators.getPrecedence(args[0], parenthesis);
          var assocWithLhs = operators.isAssociativeWith(root, args[0], parenthesis);
          if (lhsPrecedence === null) {
            lhsParens = false;
          } else if ((lhsPrecedence === precedence) && (associativity === 'right') && !assocWithLhs) {
            lhsParens = true;
          } else if (lhsPrecedence < precedence) {
            lhsParens = true;
          } else {
            lhsParens = false;
          }
          var rhsParens;
          var rhsPrecedence = operators.getPrecedence(args[1], parenthesis);
          var assocWithRhs = operators.isAssociativeWith(root, args[1], parenthesis);
          if (rhsPrecedence === null) {
            rhsParens = false;
          } else if ((rhsPrecedence === precedence) && (associativity === 'left') && !assocWithRhs) {
            rhsParens = true;
          } else if (rhsPrecedence < precedence) {
            rhsParens = true;
          } else {
            rhsParens = false;
          }
          if (latex) {
            var rootIdentifier;
            var lhsIdentifier;
            var rhsIdentifier;
            if (parenthesis === 'keep') {
              rootIdentifier = root.getIdentifier();
              lhsIdentifier = root.args[0].getIdentifier();
              rhsIdentifier = root.args[1].getIdentifier();
            } else {
              rootIdentifier = root.getContent().getIdentifier();
              lhsIdentifier = root.args[0].getContent().getIdentifier();
              rhsIdentifier = root.args[1].getContent().getIdentifier();
            }
            if (lhsPrecedence !== null) {
              if (operators.properties[precedence][rootIdentifier].latexLeftParens === false) {
                lhsParens = false;
              }
              if (operators.properties[lhsPrecedence][lhsIdentifier].latexParens === false) {
                lhsParens = false;
              }
            }
            if (rhsPrecedence !== null) {
              if (operators.properties[precedence][rootIdentifier].latexRightParens === false) {
                rhsParens = false;
              }
              if (operators.properties[rhsPrecedence][rhsIdentifier].latexParens === false) {
                rhsParens = false;
              }
            }
          }
          return [lhsParens, rhsParens];
      }
    }
    OperatorNode.prototype._toString = function(options) {
      var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
      var implicit = (options && options.implicit) ? options.implicit : 'hide';
      var args = this.args;
      var parens = calculateNecessaryParentheses(this, parenthesis, args, false);
      switch (args.length) {
        case 1:
          var assoc = operators.getAssociativity(this, parenthesis);
          var operand = args[0].toString(options);
          if (parens[0]) {
            operand = '(' + operand + ')';
          }
          if (assoc === 'right') {
            return this.op + operand;
          } else if (assoc === 'left') {
            return operand + this.op;
          }
          return operand + this.op;
        case 2:
          var lhs = args[0].toString(options);
          var rhs = args[1].toString(options);
          if (parens[0]) {
            lhs = '(' + lhs + ')';
          }
          if (parens[1]) {
            rhs = '(' + rhs + ')';
          }
          if (this.implicit && (this.getIdentifier() === 'OperatorNode:multiply') && (implicit == 'hide')) {
            return lhs + ' ' + rhs;
          }
          return lhs + ' ' + this.op + ' ' + rhs;
        default:
          return this.fn + '(' + this.args.join(', ') + ')';
      }
    };
    OperatorNode.prototype._toTex = function(options) {
      var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
      var implicit = (options && options.implicit) ? options.implicit : 'hide';
      var args = this.args;
      var parens = calculateNecessaryParentheses(this, parenthesis, args, true);
      var op = latex.operators[this.fn];
      op = typeof op === 'undefined' ? this.op : op;
      switch (args.length) {
        case 1:
          var assoc = operators.getAssociativity(this, parenthesis);
          var operand = args[0].toTex(options);
          if (parens[0]) {
            operand = '\\left(' + operand + '\\right)';
          }
          if (assoc === 'right') {
            return op + operand;
          } else if (assoc === 'left') {
            return operand + op;
          }
          return operand + op;
        case 2:
          var lhs = args[0];
          var lhsTex = lhs.toTex(options);
          if (parens[0]) {
            lhsTex = '\\left(' + lhsTex + '\\right)';
          }
          var rhs = args[1];
          var rhsTex = rhs.toTex(options);
          if (parens[1]) {
            rhsTex = '\\left(' + rhsTex + '\\right)';
          }
          var lhsIdentifier;
          if (parenthesis === 'keep') {
            lhsIdentifier = lhs.getIdentifier();
          } else {
            lhsIdentifier = lhs.getContent().getIdentifier();
          }
          switch (this.getIdentifier()) {
            case 'OperatorNode:divide':
              return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';
            case 'OperatorNode:pow':
              lhsTex = '{' + lhsTex + '}';
              rhsTex = '{' + rhsTex + '}';
              switch (lhsIdentifier) {
                case 'ConditionalNode':
                case 'OperatorNode:divide':
                  lhsTex = '\\left(' + lhsTex + '\\right)';
              }
            case 'OperatorNode:multiply':
              if (this.implicit && (implicit === 'hide')) {
                return lhsTex + '~' + rhsTex;
              }
          }
          return lhsTex + op + rhsTex;
        default:
          return '\\mathrm{' + this.fn + '}\\left(' + args.map(function(arg) {
            return arg.toTex(options);
          }).join(',') + '\\right)';
      }
    };
    OperatorNode.prototype.getIdentifier = function() {
      return this.type + ':' + this.fn;
    };
    return OperatorNode;
  }
  exports.name = 'OperatorNode';
  exports.path = 'expression.node';
  exports.math = true;
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("19c", ["199", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var Node = load($__require('199'));
    function ParenthesisNode(content) {
      if (!(this instanceof ParenthesisNode)) {
        throw new SyntaxError('Constructor must be called with the new operator');
      }
      if (!(content && content.isNode)) {
        throw new TypeError('Node expected for parameter "content"');
      }
      this.content = content;
    }
    ParenthesisNode.prototype = new Node();
    ParenthesisNode.prototype.type = 'ParenthesisNode';
    ParenthesisNode.prototype.isParenthesisNode = true;
    ParenthesisNode.prototype._compile = function(defs, args) {
      return this.content._compile(defs, args);
    };
    ParenthesisNode.prototype.getContent = function() {
      return this.content.getContent();
    };
    ParenthesisNode.prototype.forEach = function(callback) {
      callback(this.content, 'content', this);
    };
    ParenthesisNode.prototype.map = function(callback) {
      var content = callback(this.content, 'content', this);
      return new ParenthesisNode(content);
    };
    ParenthesisNode.prototype.clone = function() {
      return new ParenthesisNode(this.content);
    };
    ParenthesisNode.prototype._toString = function(options) {
      if ((!options) || (options && !options.parenthesis) || (options && options.parenthesis === 'keep')) {
        return '(' + this.content.toString(options) + ')';
      }
      return this.content.toString(options);
    };
    ParenthesisNode.prototype._toTex = function(options) {
      if ((!options) || (options && !options.parenthesis) || (options && options.parenthesis === 'keep')) {
        return '\\left(' + this.content.toTex(options) + '\\right)';
      }
      return this.content.toTex(options);
    };
    return ParenthesisNode;
  }
  exports.name = 'ParenthesisNode';
  exports.path = 'expression.node';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("198", ["b5", "199", "19e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var latex = $__require('b5');
  function factory(type, config, load, typed, math) {
    var Node = load($__require('199'));
    var SymbolNode = load($__require('19e'));
    function FunctionNode(fn, args) {
      if (!(this instanceof FunctionNode)) {
        throw new SyntaxError('Constructor must be called with the new operator');
      }
      if (typeof fn === 'string') {
        console.warn('WARNING: passing a string to FunctionNode is deprecated, pass a SymbolNode instead.');
        fn = new SymbolNode(fn);
      }
      if (!fn || !fn.isNode)
        throw new TypeError('Node expected as parameter "fn"');
      if (!Array.isArray(args) || !args.every(function(arg) {
        return arg && arg.isNode;
      })) {
        throw new TypeError('Array containing Nodes expected for parameter "args"');
      }
      this.fn = fn;
      this.args = args || [];
      Object.defineProperty(this, 'name', {
        get: function() {
          return this.fn.name || '';
        }.bind(this),
        set: function() {
          throw new Error('Cannot assign a new name, name is read-only');
        }
      });
      var deprecated = function() {
        throw new Error('Property `FunctionNode.object` is deprecated, use `FunctionNode.fn` instead');
      };
      Object.defineProperty(this, 'object', {
        get: deprecated,
        set: deprecated
      });
    }
    FunctionNode.prototype = new Node();
    FunctionNode.prototype.type = 'FunctionNode';
    FunctionNode.prototype.isFunctionNode = true;
    FunctionNode.prototype._compile = function(defs, args) {
      var jsFn = this.fn._compile(defs, args);
      var jsArgs = this.args.map(function(arg) {
        return arg._compile(defs, args);
      });
      var argsName;
      if (this.fn.isSymbolNode) {
        var name = this.fn.name;
        var fn = defs.math[name];
        var isRaw = (typeof fn === 'function') && (fn.rawArgs == true);
        if (isRaw) {
          argsName = this._getUniqueArgumentsName(defs);
          defs[argsName] = this.args;
          return jsFn + '(' + argsName + ', math, scope)';
        } else {
          return jsFn + '(' + jsArgs.join(', ') + ')';
        }
      } else if (this.fn.isAccessorNode && this.fn.index.isObjectProperty()) {
        argsName = this._getUniqueArgumentsName(defs);
        defs[argsName] = this.args;
        var jsObject = this.fn.object._compile(defs, args);
        var prop = this.fn.index.getObjectProperty();
        return '(function () {' + 'var object = ' + jsObject + ';' + 'return (object["' + prop + '"] && object["' + prop + '"].rawArgs) ' + ' ? object["' + prop + '"](' + argsName + ', math, scope)' + ' : object["' + prop + '"](' + jsArgs.join(', ') + ')' + '})()';
      } else {
        argsName = this._getUniqueArgumentsName(defs);
        defs[argsName] = this.args;
        return '(function () {' + 'var fn = ' + jsFn + ';' + 'return (fn && fn.rawArgs) ' + ' ? fn(' + argsName + ', math, scope)' + ' : fn(' + jsArgs.join(', ') + ')' + '})()';
      }
    };
    FunctionNode.prototype._getUniqueArgumentsName = function(defs) {
      var argsName;
      var i = 0;
      do {
        argsName = 'args' + i;
        i++;
      } while (argsName in defs);
      return argsName;
    };
    FunctionNode.prototype.forEach = function(callback) {
      for (var i = 0; i < this.args.length; i++) {
        callback(this.args[i], 'args[' + i + ']', this);
      }
    };
    FunctionNode.prototype.map = function(callback) {
      var fn = this.fn.map(callback);
      var args = [];
      for (var i = 0; i < this.args.length; i++) {
        args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
      }
      return new FunctionNode(fn, args);
    };
    FunctionNode.prototype.clone = function() {
      return new FunctionNode(this.fn, this.args.slice(0));
    };
    var nodeToString = FunctionNode.prototype.toString;
    FunctionNode.prototype.toString = function(options) {
      var customString;
      var name = this.fn.toString();
      if (options && (typeof options.handler === 'object') && options.handler.hasOwnProperty(name)) {
        customString = options.handler[name](this, options);
      }
      if (typeof customString !== 'undefined') {
        return customString;
      }
      return nodeToString.call(this, options);
    };
    FunctionNode.prototype._toString = function(options) {
      return this.fn.toString() + '(' + this.args.join(', ') + ')';
    };
    function expandTemplate(template, node, options) {
      var latex = '';
      var regex = new RegExp('\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)', 'ig');
      var inputPos = 0;
      var match;
      while ((match = regex.exec(template)) !== null) {
        latex += template.substring(inputPos, match.index);
        inputPos = match.index;
        if (match[0] === '$$') {
          latex += '$';
          inputPos++;
        } else {
          inputPos += match[0].length;
          var property = node[match[1]];
          if (!property) {
            throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');
          }
          if (match[2] === undefined) {
            switch (typeof property) {
              case 'string':
                latex += property;
                break;
              case 'object':
                if (property.isNode) {
                  latex += property.toTex(options);
                } else if (Array.isArray(property)) {
                  latex += property.map(function(arg, index) {
                    if (arg && arg.isNode) {
                      return arg.toTex(options);
                    }
                    throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');
                  }).join(',');
                } else {
                  throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
                }
                break;
              default:
                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
            }
          } else {
            if (property[match[2]] && property[match[2]].isNode) {
              latex += property[match[2]].toTex(options);
            } else {
              throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');
            }
          }
        }
      }
      latex += template.slice(inputPos);
      return latex;
    }
    var nodeToTex = FunctionNode.prototype.toTex;
    FunctionNode.prototype.toTex = function(options) {
      var customTex;
      if (options && (typeof options.handler === 'object') && options.handler.hasOwnProperty(this.name)) {
        customTex = options.handler[this.name](this, options);
      }
      if (typeof customTex !== 'undefined') {
        return customTex;
      }
      return nodeToTex.call(this, options);
    };
    FunctionNode.prototype._toTex = function(options) {
      var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
      var args = this.args.map(function(arg) {
        return arg.toTex(options);
      });
      var latexConverter;
      if (math[this.name] && ((typeof math[this.name].toTex === 'function') || (typeof math[this.name].toTex === 'object') || (typeof math[this.name].toTex === 'string'))) {
        latexConverter = math[this.name].toTex;
      }
      var customToTex;
      switch (typeof latexConverter) {
        case 'function':
          customToTex = latexConverter(this, options);
          break;
        case 'string':
          customToTex = expandTemplate(latexConverter, this, options);
          break;
        case 'object':
          switch (typeof latexConverter[args.length]) {
            case 'function':
              customToTex = latexConverter[args.length](this, options);
              break;
            case 'string':
              customToTex = expandTemplate(latexConverter[args.length], this, options);
              break;
          }
      }
      if (typeof customToTex !== 'undefined') {
        return customToTex;
      }
      return expandTemplate(latex.defaultTemplate, this, options);
    };
    FunctionNode.prototype.getIdentifier = function() {
      return this.type + ':' + this.name;
    };
    return FunctionNode;
  }
  exports.name = 'FunctionNode';
  exports.path = 'expression.node';
  exports.math = true;
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1bb", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var properties = [{
    'AssignmentNode': {},
    'FunctionAssignmentNode': {}
  }, {'ConditionalNode': {
      latexLeftParens: false,
      latexRightParens: false,
      latexParens: false
    }}, {'OperatorNode:or': {
      associativity: 'left',
      associativeWith: []
    }}, {'OperatorNode:xor': {
      associativity: 'left',
      associativeWith: []
    }}, {'OperatorNode:and': {
      associativity: 'left',
      associativeWith: []
    }}, {'OperatorNode:bitOr': {
      associativity: 'left',
      associativeWith: []
    }}, {'OperatorNode:bitXor': {
      associativity: 'left',
      associativeWith: []
    }}, {'OperatorNode:bitAnd': {
      associativity: 'left',
      associativeWith: []
    }}, {
    'OperatorNode:equal': {
      associativity: 'left',
      associativeWith: []
    },
    'OperatorNode:unequal': {
      associativity: 'left',
      associativeWith: []
    },
    'OperatorNode:smaller': {
      associativity: 'left',
      associativeWith: []
    },
    'OperatorNode:larger': {
      associativity: 'left',
      associativeWith: []
    },
    'OperatorNode:smallerEq': {
      associativity: 'left',
      associativeWith: []
    },
    'OperatorNode:largerEq': {
      associativity: 'left',
      associativeWith: []
    }
  }, {
    'OperatorNode:leftShift': {
      associativity: 'left',
      associativeWith: []
    },
    'OperatorNode:rightArithShift': {
      associativity: 'left',
      associativeWith: []
    },
    'OperatorNode:rightLogShift': {
      associativity: 'left',
      associativeWith: []
    }
  }, {'OperatorNode:to': {
      associativity: 'left',
      associativeWith: []
    }}, {'RangeNode': {}}, {
    'OperatorNode:add': {
      associativity: 'left',
      associativeWith: ['OperatorNode:add', 'OperatorNode:subtract']
    },
    'OperatorNode:subtract': {
      associativity: 'left',
      associativeWith: []
    }
  }, {
    'OperatorNode:multiply': {
      associativity: 'left',
      associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'Operator:dotMultiply', 'Operator:dotDivide']
    },
    'OperatorNode:divide': {
      associativity: 'left',
      associativeWith: [],
      latexLeftParens: false,
      latexRightParens: false,
      latexParens: false
    },
    'OperatorNode:dotMultiply': {
      associativity: 'left',
      associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'OperatorNode:dotMultiply', 'OperatorNode:doDivide']
    },
    'OperatorNode:dotDivide': {
      associativity: 'left',
      associativeWith: []
    },
    'OperatorNode:mod': {
      associativity: 'left',
      associativeWith: []
    }
  }, {
    'OperatorNode:unaryPlus': {associativity: 'right'},
    'OperatorNode:unaryMinus': {associativity: 'right'},
    'OperatorNode:bitNot': {associativity: 'right'},
    'OperatorNode:not': {associativity: 'right'}
  }, {
    'OperatorNode:pow': {
      associativity: 'right',
      associativeWith: [],
      latexRightParens: false
    },
    'OperatorNode:dotPow': {
      associativity: 'right',
      associativeWith: []
    }
  }, {'OperatorNode:factorial': {associativity: 'left'}}, {'OperatorNode:transpose': {associativity: 'left'}}];
  function getPrecedence(_node, parenthesis) {
    var node = _node;
    if (parenthesis !== 'keep') {
      node = _node.getContent();
    }
    var identifier = node.getIdentifier();
    for (var i = 0; i < properties.length; i++) {
      if (identifier in properties[i]) {
        return i;
      }
    }
    return null;
  }
  function getAssociativity(_node, parenthesis) {
    var node = _node;
    if (parenthesis !== 'keep') {
      node = _node.getContent();
    }
    var identifier = node.getIdentifier();
    var index = getPrecedence(node, parenthesis);
    if (index === null) {
      return null;
    }
    var property = properties[index][identifier];
    if (property.hasOwnProperty('associativity')) {
      if (property.associativity === 'left') {
        return 'left';
      }
      if (property.associativity === 'right') {
        return 'right';
      }
      throw Error('\'' + identifier + '\' has the invalid associativity \'' + property.associativity + '\'.');
    }
    return null;
  }
  function isAssociativeWith(nodeA, nodeB, parenthesis) {
    var a = nodeA;
    var b = nodeB;
    if (parenthesis !== 'keep') {
      var a = nodeA.getContent();
      var b = nodeB.getContent();
    }
    var identifierA = a.getIdentifier();
    var identifierB = b.getIdentifier();
    var index = getPrecedence(a, parenthesis);
    if (index === null) {
      return null;
    }
    var property = properties[index][identifierA];
    if (property.hasOwnProperty('associativeWith') && (property.associativeWith instanceof Array)) {
      for (var i = 0; i < property.associativeWith.length; i++) {
        if (property.associativeWith[i] === identifierB) {
          return true;
        }
      }
      return false;
    }
    return null;
  }
  module.exports.properties = properties;
  module.exports.getPrecedence = getPrecedence;
  module.exports.getAssociativity = getAssociativity;
  module.exports.isAssociativeWith = isAssociativeWith;
  return module.exports;
});

$__System.registerDynamic("19d", ["1bb", "199", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var operators = $__require('1bb');
  function factory(type, config, load, typed) {
    var Node = load($__require('199'));
    function RangeNode(start, end, step) {
      if (!(this instanceof RangeNode)) {
        throw new SyntaxError('Constructor must be called with the new operator');
      }
      if (!(start && start.isNode))
        throw new TypeError('Node expected');
      if (!(end && end.isNode))
        throw new TypeError('Node expected');
      if (step && !(step && step.isNode))
        throw new TypeError('Node expected');
      if (arguments.length > 3)
        throw new Error('Too many arguments');
      this.start = start;
      this.end = end;
      this.step = step || null;
    }
    RangeNode.prototype = new Node();
    RangeNode.prototype.type = 'RangeNode';
    RangeNode.prototype.isRangeNode = true;
    RangeNode.prototype.needsEnd = function() {
      var endSymbols = this.filter(function(node) {
        return (node && node.isSymbolNode) && (node.name == 'end');
      });
      return endSymbols.length > 0;
    };
    RangeNode.prototype._compile = function(defs, args) {
      return 'math.range(' + this.start._compile(defs, args) + ', ' + this.end._compile(defs, args) + (this.step ? (', ' + this.step._compile(defs, args)) : '') + ')';
    };
    RangeNode.prototype.forEach = function(callback) {
      callback(this.start, 'start', this);
      callback(this.end, 'end', this);
      if (this.step) {
        callback(this.step, 'step', this);
      }
    };
    RangeNode.prototype.map = function(callback) {
      return new RangeNode(this._ifNode(callback(this.start, 'start', this)), this._ifNode(callback(this.end, 'end', this)), this.step && this._ifNode(callback(this.step, 'step', this)));
    };
    RangeNode.prototype.clone = function() {
      return new RangeNode(this.start, this.end, this.step && this.step);
    };
    function calculateNecessaryParentheses(node, parenthesis) {
      var precedence = operators.getPrecedence(node, parenthesis);
      var parens = {};
      var startPrecedence = operators.getPrecedence(node.start, parenthesis);
      parens.start = ((startPrecedence !== null) && (startPrecedence <= precedence)) || (parenthesis === 'all');
      if (node.step) {
        var stepPrecedence = operators.getPrecedence(node.step, parenthesis);
        parens.step = ((stepPrecedence !== null) && (stepPrecedence <= precedence)) || (parenthesis === 'all');
      }
      var endPrecedence = operators.getPrecedence(node.end, parenthesis);
      parens.end = ((endPrecedence !== null) && (endPrecedence <= precedence)) || (parenthesis === 'all');
      return parens;
    }
    RangeNode.prototype._toString = function(options) {
      var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
      var parens = calculateNecessaryParentheses(this, parenthesis);
      var str;
      var start = this.start.toString(options);
      if (parens.start) {
        start = '(' + start + ')';
      }
      str = start;
      if (this.step) {
        var step = this.step.toString(options);
        if (parens.step) {
          step = '(' + step + ')';
        }
        str += ':' + step;
      }
      var end = this.end.toString(options);
      if (parens.end) {
        end = '(' + end + ')';
      }
      str += ':' + end;
      return str;
    };
    RangeNode.prototype._toTex = function(options) {
      var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
      var parens = calculateNecessaryParentheses(this, parenthesis);
      var str = this.start.toTex(options);
      if (parens.start) {
        str = '\\left(' + str + '\\right)';
      }
      if (this.step) {
        var step = this.step.toTex(options);
        if (parens.step) {
          step = '\\left(' + step + '\\right)';
        }
        str += ':' + step;
      }
      var end = this.end.toTex(options);
      if (parens.end) {
        end = '\\left(' + end + '\\right)';
      }
      str += ':' + end;
      return str;
    };
    return RangeNode;
  }
  exports.name = 'RangeNode';
  exports.path = 'expression.node';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1ba", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {end: true};
  return module.exports;
});

$__System.registerDynamic("199", ["1ba", "a4", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var keywords = $__require('1ba');
  var extend = $__require('a4').extend;
  function factory(type, config, load, typed, math) {
    function Node() {
      if (!(this instanceof Node)) {
        throw new SyntaxError('Constructor must be called with the new operator');
      }
    }
    Node.prototype.eval = function(scope) {
      return this.compile().eval(scope);
    };
    Node.prototype.type = 'Node';
    Node.prototype.isNode = true;
    Node.prototype.compile = function() {
      if (arguments.length > 0) {
        throw new Error('Calling compile(math) is deprecated. Call the function as compile() instead.');
      }
      var defs = {
        math: math.expression.transform,
        args: {},
        _validateScope: _validateScope
      };
      var args = {};
      var code = this._compile(defs, args);
      var defsCode = Object.keys(defs).map(function(name) {
        return '    var ' + name + ' = defs["' + name + '"];';
      });
      var factoryCode = defsCode.join(' ') + 'return {' + '  "eval": function (scope) {' + '    if (scope) _validateScope(scope);' + '    scope = scope || {};' + '    return ' + code + ';' + '  }' + '};';
      var factory = new Function('defs', factoryCode);
      return factory(defs);
    };
    Node.prototype._compile = function(defs, args) {
      throw new Error('Cannot compile a Node interface');
    };
    Node.prototype.forEach = function(callback) {
      throw new Error('Cannot run forEach on a Node interface');
    };
    Node.prototype.map = function(callback) {
      throw new Error('Cannot run map on a Node interface');
    };
    Node.prototype._ifNode = function(node) {
      if (!(node && node.isNode)) {
        throw new TypeError('Callback function must return a Node');
      }
      return node;
    };
    Node.prototype.traverse = function(callback) {
      callback(this, null, null);
      function _traverse(node, callback) {
        node.forEach(function(child, path, parent) {
          callback(child, path, parent);
          _traverse(child, callback);
        });
      }
      _traverse(this, callback);
    };
    Node.prototype.transform = function(callback) {
      function _transform(node, callback) {
        return node.map(function(child, path, parent) {
          var replacement = callback(child, path, parent);
          return _transform(replacement, callback);
        });
      }
      var replacement = callback(this, null, null);
      return _transform(replacement, callback);
    };
    Node.prototype.filter = function(callback) {
      var nodes = [];
      this.traverse(function(node, path, parent) {
        if (callback(node, path, parent)) {
          nodes.push(node);
        }
      });
      return nodes;
    };
    Node.prototype.find = function() {
      throw new Error('Function Node.find is deprecated. Use Node.filter instead.');
    };
    Node.prototype.match = function() {
      throw new Error('Function Node.match is deprecated. See functions Node.filter, Node.transform, Node.traverse.');
    };
    Node.prototype.clone = function() {
      throw new Error('Cannot clone a Node interface');
    };
    Node.prototype.toString = function(options) {
      var customString;
      if (options && typeof options == "object") {
        switch (typeof options.handler) {
          case 'object':
          case 'undefined':
            break;
          case 'function':
            customString = options.handler(this, options);
            break;
          default:
            throw new TypeError('Object or function expected as callback');
        }
      }
      if (typeof customString !== 'undefined') {
        return customString;
      }
      return this._toString(options);
    };
    Node.prototype._toString = function() {
      throw new Error('_toString not implemented for ' + this.type);
    };
    Node.prototype.toTex = function(options) {
      var customTex;
      if (options && typeof options == 'object') {
        switch (typeof options.handler) {
          case 'object':
          case 'undefined':
            break;
          case 'function':
            customTex = options.handler(this, options);
            break;
          default:
            throw new TypeError('Object or function expected as callback');
        }
      }
      if (typeof customTex !== 'undefined') {
        return customTex;
      }
      return this._toTex(options);
    };
    Node.prototype._toTex = function(options) {
      throw new Error('_toTex not implemented for ' + this.type);
    };
    Node.prototype.getIdentifier = function() {
      return this.type;
    };
    Node.prototype.getContent = function() {
      return this;
    };
    function _validateScope(scope) {
      for (var symbol in scope) {
        if (scope.hasOwnProperty(symbol)) {
          if (symbol in keywords) {
            throw new Error('Scope contains an illegal symbol, "' + symbol + '" is a reserved keyword');
          }
        }
      }
    }
    return Node;
  }
  exports.name = 'Node';
  exports.path = 'expression.node';
  exports.math = true;
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("d9", ["1bd", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var memoize = $__require('1bd').memoize;
  exports.e = memoize(function(BigNumber) {
    return new BigNumber(1).exp();
  }, hasher);
  exports.phi = memoize(function(BigNumber) {
    return new BigNumber(1).plus(new BigNumber(5).sqrt()).div(2);
  }, hasher);
  exports.pi = memoize(function(BigNumber) {
    return pi = BigNumber.acos(-1);
  }, hasher);
  exports.tau = memoize(function(BigNumber) {
    return exports.pi(BigNumber).times(2);
  }, hasher);
  function hasher(args) {
    return args[0].precision;
  }
  return module.exports;
});

$__System.registerDynamic("1be", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  (function(root) {
    "use strict";
    var P = {
      're': 0,
      'im': 0
    };
    Math.cosh = Math.cosh || function(x) {
      return (Math.exp(x) + Math.exp(-x)) * 0.5;
    };
    Math.sinh = Math.sinh || function(x) {
      return (Math.exp(x) - Math.exp(-x)) * 0.5;
    };
    var parser_exit = function() {
      throw SyntaxError("Invalid Param");
    };
    function logHypot(a, b) {
      var _a = Math.abs(a);
      var _b = Math.abs(b);
      if (a === 0) {
        return Math.log(_b);
      }
      if (b === 0) {
        return Math.log(_a);
      }
      if (_a < 3000 && _b < 3000) {
        return Math.log(a * a + b * b) * 0.5;
      }
      return Math.log(a / Math.cos(Math.atan2(b, a)));
    }
    var parse = function(a, b) {
      if (a === undefined || a === null) {
        P["re"] = P["im"] = 0;
      } else if (b !== undefined) {
        P["re"] = a;
        P["im"] = b;
      } else
        switch (typeof a) {
          case "object":
            if ("im" in a && "re" in a) {
              P["re"] = a["re"];
              P["im"] = a["im"];
            } else if ("abs" in a && "arg" in a) {
              P["re"] = a["abs"] * Math.cos(a["arg"]);
              P["im"] = a["abs"] * Math.sin(a["arg"]);
            } else if ("r" in a && "phi" in a) {
              P["re"] = a["r"] * Math.cos(a["phi"]);
              P["im"] = a["r"] * Math.sin(a["phi"]);
            } else {
              parser_exit();
            }
            break;
          case "string":
            P["im"] = P["re"] = 0;
            var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);
            var plus = 1;
            var minus = 0;
            if (tokens === null) {
              parser_exit();
            }
            for (var i = 0; i < tokens.length; i++) {
              var c = tokens[i];
              if (c === ' ' || c === '\t' || c === '\n') {} else if (c === '+') {
                plus++;
              } else if (c === '-') {
                minus++;
              } else if (c === 'i' || c === 'I') {
                if (plus + minus === 0) {
                  parser_exit();
                }
                if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
                  P["im"] += parseFloat((minus % 2 ? "-" : "") + tokens[i + 1]);
                  i++;
                } else {
                  P["im"] += parseFloat((minus % 2 ? "-" : "") + "1");
                }
                plus = minus = 0;
              } else {
                if (plus + minus === 0 || isNaN(c)) {
                  parser_exit();
                }
                if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
                  P["im"] += parseFloat((minus % 2 ? "-" : "") + c);
                  i++;
                } else {
                  P["re"] += parseFloat((minus % 2 ? "-" : "") + c);
                }
                plus = minus = 0;
              }
            }
            if (plus + minus > 0) {
              parser_exit();
            }
            break;
          case "number":
            P["im"] = 0;
            P["re"] = a;
            break;
          default:
            parser_exit();
        }
      if (isNaN(P["re"]) || isNaN(P["im"])) {}
    };
    function Complex(a, b) {
      if (!(this instanceof Complex)) {
        return new Complex(a, b);
      }
      parse(a, b);
      this["re"] = P["re"];
      this["im"] = P["im"];
    }
    Complex.prototype = {
      "re": 0,
      "im": 0,
      "sign": function() {
        var abs = this["abs"]();
        return new Complex(this["re"] / abs, this["im"] / abs);
      },
      "add": function(a, b) {
        parse(a, b);
        return new Complex(this["re"] + P["re"], this["im"] + P["im"]);
      },
      "sub": function(a, b) {
        parse(a, b);
        return new Complex(this["re"] - P["re"], this["im"] - P["im"]);
      },
      "mul": function(a, b) {
        parse(a, b);
        if (P['im'] === 0 && this['im'] === 0) {
          return new Complex(this['re'] * P['re'], 0);
        }
        return new Complex(this["re"] * P["re"] - this["im"] * P["im"], this["re"] * P["im"] + this["im"] * P["re"]);
      },
      "div": function(a, b) {
        parse(a, b);
        a = this["re"];
        b = this["im"];
        var c = P["re"];
        var d = P["im"];
        var t,
            x;
        if (0 === c && 0 === d) {
          return new Complex((a !== 0) ? (a / 0) : 0, (b !== 0) ? (b / 0) : 0);
        }
        if (0 === d) {
          return new Complex(a / c, b / c);
        }
        if (Math.abs(c) < Math.abs(d)) {
          x = c / d;
          t = c * x + d;
          return new Complex((a * x + b) / t, (b * x - a) / t);
        } else {
          x = d / c;
          t = d * x + c;
          return new Complex((a + b * x) / t, (b - a * x) / t);
        }
      },
      "pow": function(a, b) {
        parse(a, b);
        a = this["re"];
        b = this["im"];
        if (a === 0 && b === 0) {
          return new Complex(0, 0);
        }
        var arg = Math.atan2(b, a);
        var loh = logHypot(a, b);
        if (P["im"] === 0) {
          if (b === 0 && a >= 0) {
            return new Complex(Math.pow(a, P["re"]), 0);
          } else if (a === 0) {
            switch (P["re"] % 4) {
              case 0:
                return new Complex(Math.pow(b, P["re"]), 0);
              case 1:
                return new Complex(0, Math.pow(b, P["re"]));
              case 2:
                return new Complex(-Math.pow(b, P["re"]), 0);
              case 3:
                return new Complex(0, -Math.pow(b, P["re"]));
            }
          }
        }
        a = Math.exp(P["re"] * loh - P["im"] * arg);
        b = P["im"] * loh + P["re"] * arg;
        return new Complex(a * Math.cos(b), a * Math.sin(b));
      },
      "sqrt": function() {
        var a = this["re"];
        var b = this["im"];
        var r = this["abs"]();
        var re,
            im;
        if (a >= 0 && b === 0) {
          return new Complex(Math.sqrt(a), 0);
        }
        if (a >= 0) {
          re = 0.5 * Math.sqrt(2.0 * (r + a));
        } else {
          re = Math.abs(b) / Math.sqrt(2 * (r - a));
        }
        if (a <= 0) {
          im = 0.5 * Math.sqrt(2.0 * (r - a));
        } else {
          im = Math.abs(b) / Math.sqrt(2 * (r + a));
        }
        return new Complex(re, b >= 0 ? im : -im);
      },
      "exp": function() {
        var tmp = Math.exp(this["re"]);
        if (this["im"] === 0) {}
        return new Complex(tmp * Math.cos(this["im"]), tmp * Math.sin(this["im"]));
      },
      "log": function() {
        var a = this["re"];
        var b = this["im"];
        if (b === 0 && a > 0) {}
        return new Complex(logHypot(a, b), Math.atan2(b, a));
      },
      "abs": function() {
        var a = Math.abs(this["re"]);
        var b = Math.abs(this["im"]);
        if (a < 3000 && b < 3000) {
          return Math.sqrt(a * a + b * b);
        }
        if (a < b) {
          a = b;
          b = this["re"] / this["im"];
        } else {
          b = this["im"] / this["re"];
        }
        return a * Math.sqrt(1 + b * b);
      },
      "arg": function() {
        return Math.atan2(this["im"], this["re"]);
      },
      "sin": function() {
        var a = this["re"];
        var b = this["im"];
        return new Complex(Math.sin(a) * Math.cosh(b), Math.cos(a) * Math.sinh(b));
      },
      "cos": function() {
        var a = this["re"];
        var b = this["im"];
        return new Complex(Math.cos(a) * Math.cosh(b), -Math.sin(a) * Math.sinh(b));
      },
      "tan": function() {
        var a = 2 * this["re"];
        var b = 2 * this["im"];
        var d = Math.cos(a) + Math.cosh(b);
        return new Complex(Math.sin(a) / d, Math.sinh(b) / d);
      },
      "cot": function() {
        var a = 2 * this["re"];
        var b = 2 * this["im"];
        var d = Math.cos(a) - Math.cosh(b);
        return new Complex(-Math.sin(a) / d, Math.sinh(b) / d);
      },
      "sec": function() {
        var a = this["re"];
        var b = this["im"];
        var d = 0.5 * Math.cosh(2 * b) + 0.5 * Math.cos(2 * a);
        return new Complex(Math.cos(a) * Math.cosh(b) / d, Math.sin(a) * Math.sinh(b) / d);
      },
      "csc": function() {
        var a = this["re"];
        var b = this["im"];
        var d = 0.5 * Math.cosh(2 * b) - 0.5 * Math.cos(2 * a);
        return new Complex(Math.sin(a) * Math.cosh(b) / d, -Math.cos(a) * Math.sinh(b) / d);
      },
      "asin": function() {
        var a = this["re"];
        var b = this["im"];
        var t1 = new Complex(b * b - a * a + 1, -2 * a * b)['sqrt']();
        var t2 = new Complex(t1['re'] - b, t1['im'] + a)['log']();
        return new Complex(t2['im'], -t2['re']);
      },
      "acos": function() {
        var a = this["re"];
        var b = this["im"];
        var t1 = new Complex(b * b - a * a + 1, -2 * a * b)['sqrt']();
        var t2 = new Complex(t1["re"] - b, t1["im"] + a)['log']();
        return new Complex(Math.PI / 2 - t2["im"], t2["re"]);
      },
      "atan": function() {
        var a = this["re"];
        var b = this["im"];
        if (a === 0) {
          if (b === 1) {
            return new Complex(0, Infinity);
          }
          if (b === -1) {
            return new Complex(0, -Infinity);
          }
        }
        var d = a * a + (1.0 - b) * (1.0 - b);
        var t1 = new Complex((1 - b * b - a * a) / d, -2 * a / d).log();
        return new Complex(-0.5 * t1["im"], 0.5 * t1["re"]);
      },
      "acot": function() {
        var a = this["re"];
        var b = this["im"];
        if (b === 0) {
          return new Complex(Math.atan2(1, a), 0);
        }
        var d = a * a + b * b;
        return (d !== 0) ? new Complex(a / d, -b / d).atan() : new Complex((a !== 0) ? a / 0 : 0, (b !== 0) ? -b / 0 : 0).atan();
      },
      "asec": function() {
        var a = this["re"];
        var b = this["im"];
        if (a === 0 && b === 0) {
          return new Complex(0, Infinity);
        }
        var d = a * a + b * b;
        return (d !== 0) ? new Complex(a / d, -b / d).acos() : new Complex((a !== 0) ? a / 0 : 0, (b !== 0) ? -b / 0 : 0).acos();
      },
      "acsc": function() {
        var a = this["re"];
        var b = this["im"];
        if (a === 0 && b === 0) {
          return new Complex(Math.PI / 2, Infinity);
        }
        var d = a * a + b * b;
        return (d !== 0) ? new Complex(a / d, -b / d).asin() : new Complex((a !== 0) ? a / 0 : 0, (b !== 0) ? -b / 0 : 0).asin();
      },
      "sinh": function() {
        var a = this["re"];
        var b = this["im"];
        return new Complex(Math.sinh(a) * Math.cos(b), Math.cosh(a) * Math.sin(b));
      },
      "cosh": function() {
        var a = this["re"];
        var b = this["im"];
        return new Complex(Math.cosh(a) * Math.cos(b), Math.sinh(a) * Math.sin(b));
      },
      "tanh": function() {
        var a = 2 * this["re"];
        var b = 2 * this["im"];
        var d = Math.cosh(a) + Math.cos(b);
        return new Complex(Math.sinh(a) / d, Math.sin(b) / d);
      },
      "coth": function() {
        var a = 2 * this["re"];
        var b = 2 * this["im"];
        var d = Math.cosh(a) - Math.cos(b);
        return new Complex(Math.sinh(a) / d, -Math.sin(b) / d);
      },
      "csch": function() {
        var a = this["re"];
        var b = this["im"];
        var d = Math.cos(2 * b) - Math.cosh(2 * a);
        return new Complex(-2 * Math.sinh(a) * Math.cos(b) / d, 2 * Math.cosh(a) * Math.sin(b) / d);
      },
      "sech": function() {
        var a = this["re"];
        var b = this["im"];
        var d = Math.cos(2 * b) + Math.cosh(2 * a);
        return new Complex(2 * Math.cosh(a) * Math.cos(b) / d, -2 * Math.sinh(a) * Math.sin(b) / d);
      },
      "asinh": function() {
        var tmp = this["im"];
        this["im"] = -this["re"];
        this["re"] = tmp;
        var res = this["asin"]();
        this["re"] = -this["im"];
        this["im"] = tmp;
        tmp = res["re"];
        res["re"] = -res["im"];
        res["im"] = tmp;
        return res;
      },
      "acosh": function() {
        var tmp;
        var res = this["acos"]();
        if (res["im"] <= 0) {
          tmp = res["re"];
          res["re"] = -res["im"];
          res["im"] = tmp;
        } else {
          tmp = res["im"];
          res["im"] = -res["re"];
          res["re"] = tmp;
        }
        return res;
      },
      "atanh": function() {
        var a = this["re"];
        var b = this["im"];
        var noIM = a > 1 && b === 0;
        var oneMinus = 1 - a;
        var onePlus = 1 + a;
        var d = oneMinus * oneMinus + b * b;
        var x = (d !== 0) ? new Complex((onePlus * oneMinus - b * b) / d, (b * oneMinus + onePlus * b) / d) : new Complex((a !== -1) ? (a / 0) : 0, (b !== 0) ? (b / 0) : 0);
        var temp = x["re"];
        x["re"] = logHypot(x["re"], x["im"]) / 2;
        x["im"] = Math.atan2(x["im"], temp) / 2;
        if (noIM) {
          x["im"] = -x["im"];
        }
        return x;
      },
      "acoth": function() {
        var a = this["re"];
        var b = this["im"];
        if (a === 0 && b === 0) {
          return new Complex(0, Math.PI / 2);
        }
        var d = a * a + b * b;
        return (d !== 0) ? new Complex(a / d, -b / d).atanh() : new Complex((a !== 0) ? a / 0 : 0, (b !== 0) ? -b / 0 : 0).atanh();
      },
      "acsch": function() {
        var a = this["re"];
        var b = this["im"];
        if (b === 0) {
          return new Complex((a !== 0) ? Math.log(a + Math.sqrt(a * a + 1)) : Infinity, 0);
        }
        var d = a * a + b * b;
        return (d !== 0) ? new Complex(a / d, -b / d).asinh() : new Complex((a !== 0) ? a / 0 : 0, (b !== 0) ? -b / 0 : 0).asinh();
      },
      "asech": function() {
        var a = this["re"];
        var b = this["im"];
        if (a === 0 && b === 0) {
          return new Complex(Infinity, 0);
        }
        var d = a * a + b * b;
        return (d !== 0) ? new Complex(a / d, -b / d).acosh() : new Complex((a !== 0) ? a / 0 : 0, (b !== 0) ? -b / 0 : 0).acosh();
      },
      "inverse": function() {
        var a = this["re"];
        var b = this["im"];
        var d = a * a + b * b;
        return new Complex(a !== 0 ? a / d : 0, b !== 0 ? -b / d : 0);
      },
      "conjugate": function() {
        return new Complex(this["re"], -this["im"]);
      },
      "neg": function() {
        return new Complex(-this["re"], -this["im"]);
      },
      "ceil": function(places) {
        places = Math.pow(10, places || 0);
        return new Complex(Math.ceil(this["re"] * places) / places, Math.ceil(this["im"] * places) / places);
      },
      "floor": function(places) {
        places = Math.pow(10, places || 0);
        return new Complex(Math.floor(this["re"] * places) / places, Math.floor(this["im"] * places) / places);
      },
      "round": function(places) {
        places = Math.pow(10, places || 0);
        return new Complex(Math.round(this["re"] * places) / places, Math.round(this["im"] * places) / places);
      },
      "equals": function(a, b) {
        parse(a, b);
        return Math.abs(P["re"] - this["re"]) <= Complex["EPSILON"] && Math.abs(P["im"] - this["im"]) <= Complex["EPSILON"];
      },
      "clone": function() {
        return new Complex(this["re"], this["im"]);
      },
      "toString": function() {
        var a = this["re"];
        var b = this["im"];
        var ret = "";
        if (isNaN(a) || isNaN(b)) {
          return "NaN";
        }
        if (a !== 0) {
          ret += a;
        }
        if (b !== 0) {
          if (a !== 0) {
            ret += b < 0 ? " - " : " + ";
          } else if (b < 0) {
            ret += "-";
          }
          b = Math.abs(b);
          if (1 !== b) {
            ret += b;
          }
          ret += "i";
        }
        if (!ret)
          return "0";
        return ret;
      },
      "toVector": function() {
        return [this["re"], this["im"]];
      },
      "valueOf": function() {
        if (this["im"] === 0) {
          return this["re"];
        }
        return null;
      },
      isNaN: function() {
        return isNaN(this['re']) || isNaN(this['im']);
      }
    };
    Complex["ZERO"] = new Complex(0, 0);
    Complex["ONE"] = new Complex(1, 0);
    Complex["I"] = new Complex(0, 1);
    Complex["PI"] = new Complex(Math.PI, 0);
    Complex["E"] = new Complex(Math.E, 0);
    Complex['EPSILON'] = 1e-16;
    if (typeof define === "function" && define["amd"]) {
      define([], function() {
        return Complex;
      });
    } else if (typeof exports === "object") {
      module["exports"] = Complex;
    } else {
      root["Complex"] = Complex;
    }
  })(this);
  return module.exports;
});

$__System.registerDynamic("b7", ["1be", "a2", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var Complex = $__require('1be');
  var format = $__require('a2').format;
  var isNumber = $__require('a2').isNumber;
  function factory(type, config, load, typed, math) {
    Complex.prototype.type = 'Complex';
    Complex.prototype.isComplex = true;
    Complex.prototype.toJSON = function() {
      return {
        mathjs: 'Complex',
        re: this.re,
        im: this.im
      };
    };
    Complex.prototype.toPolar = function() {
      return {
        r: this.abs(),
        phi: this.arg()
      };
    };
    Complex.prototype.format = function(options) {
      var str = '';
      var im = this.im;
      var re = this.re;
      var strRe = format(this.re, options);
      var strIm = format(this.im, options);
      var precision = isNumber(options) ? options : options ? options.precision : null;
      if (precision !== null) {
        var epsilon = Math.pow(10, -precision);
        if (Math.abs(re / im) < epsilon) {
          re = 0;
        }
        if (Math.abs(im / re) < epsilon) {
          im = 0;
        }
      }
      if (im == 0) {
        str = strRe;
      } else if (re == 0) {
        if (im == 1) {
          str = 'i';
        } else if (im == -1) {
          str = '-i';
        } else {
          str = strIm + 'i';
        }
      } else {
        if (im > 0) {
          if (im == 1) {
            str = strRe + ' + i';
          } else {
            str = strRe + ' + ' + strIm + 'i';
          }
        } else {
          if (im == -1) {
            str = strRe + ' - i';
          } else {
            str = strRe + ' - ' + strIm.substring(1) + 'i';
          }
        }
      }
      return str;
    };
    Complex.fromPolar = function(args) {
      switch (arguments.length) {
        case 1:
          var arg = arguments[0];
          if (typeof arg === 'object') {
            return Complex(arg);
          }
          throw new TypeError('Input has to be an object with r and phi keys.');
        case 2:
          var r = arguments[0],
              phi = arguments[1];
          if (isNumber(r)) {
            if (phi && phi.isUnit && phi.hasBase('ANGLE')) {
              phi = phi.toNumber('rad');
            }
            if (isNumber(phi)) {
              return new Complex({
                r: r,
                phi: phi
              });
            }
            throw new TypeError('Phi is not a number nor an angle unit.');
          } else {
            throw new TypeError('Radius r is not a number.');
          }
        default:
          throw new SyntaxError('Wrong number of arguments in function fromPolar');
      }
    };
    Complex.prototype.valueOf = Complex.prototype.toString;
    Complex.fromJSON = function(json) {
      return new Complex(json);
    };
    Complex.EPSILON = config.epsilon;
    math.on('config', function(curr, prev) {
      if (curr.epsilon !== prev.epsilon) {
        Complex.EPSILON = curr.epsilon;
      }
    });
    return Complex;
  }
  exports.name = 'Complex';
  exports.path = 'type';
  exports.factory = factory;
  exports.math = true;
  return module.exports;
});

$__System.registerDynamic("d4", ["b1", "a4", "d9", "1bf", "1c0", "1c1", "1c2", "1c3", "1c4", "1c5", "1c6", "1c7", "1c8", "d6", "b7", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var endsWith = $__require('b1').endsWith;
  var clone = $__require('a4').clone;
  var constants = $__require('d9');
  function factory(type, config, load, typed, math) {
    var add = load($__require('1bf'));
    var subtract = load($__require('1c0'));
    var multiply = load($__require('1c1'));
    var divide = load($__require('1c2'));
    var pow = load($__require('1c3'));
    var abs = load($__require('1c4'));
    var equal = load($__require('1c5'));
    var isNumeric = load($__require('1c6'));
    var format = load($__require('1c7'));
    var getTypeOf = load($__require('1c8'));
    var toNumber = load($__require('d6'));
    var Complex = load($__require('b7'));
    function Unit(value, name) {
      if (!(this instanceof Unit)) {
        throw new Error('Constructor must be called with the new operator');
      }
      if (!(value === undefined || isNumeric(value) || value.isComplex)) {
        throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');
      }
      if (name != undefined && (typeof name !== 'string' || name == '')) {
        throw new TypeError('Second parameter in Unit constructor must be a string');
      }
      if (name != undefined) {
        var u = Unit.parse(name);
        this.units = u.units;
        this.dimensions = u.dimensions;
      } else {
        this.units = [{
          unit: UNIT_NONE,
          prefix: PREFIXES.NONE,
          power: 0
        }];
        this.dimensions = [0, 0, 0, 0, 0, 0, 0, 0, 0];
      }
      this.value = (value != undefined) ? this._normalize(value) : null;
      this.fixPrefix = false;
      this.isUnitListSimplified = true;
    }
    Unit.prototype.type = 'Unit';
    Unit.prototype.isUnit = true;
    var text,
        index,
        c;
    function skipWhitespace() {
      while (c == ' ' || c == '\t') {
        next();
      }
    }
    function isDigitDot(c) {
      return ((c >= '0' && c <= '9') || c == '.');
    }
    function isDigit(c) {
      return ((c >= '0' && c <= '9'));
    }
    function next() {
      index++;
      c = text.charAt(index);
    }
    function revert(oldIndex) {
      index = oldIndex;
      c = text.charAt(index);
    }
    function parseNumber() {
      var number = '';
      var oldIndex;
      oldIndex = index;
      if (c == '+') {
        next();
      } else if (c == '-') {
        number += c;
        next();
      }
      if (!isDigitDot(c)) {
        revert(oldIndex);
        return null;
      }
      if (c == '.') {
        number += c;
        next();
        if (!isDigit(c)) {
          revert(oldIndex);
          return null;
        }
      } else {
        while (isDigit(c)) {
          number += c;
          next();
        }
        if (c == '.') {
          number += c;
          next();
        }
      }
      while (isDigit(c)) {
        number += c;
        next();
      }
      if (c == 'E' || c == 'e') {
        var tentativeNumber = '';
        var tentativeIndex = index;
        tentativeNumber += c;
        next();
        if (c == '+' || c == '-') {
          tentativeNumber += c;
          next();
        }
        if (!isDigit(c)) {
          revert(tentativeIndex);
          return number;
        }
        number = number + tentativeNumber;
        while (isDigit(c)) {
          number += c;
          next();
        }
      }
      return number;
    }
    function parseUnit() {
      var unitName = '';
      var code = text.charCodeAt(index);
      while ((code >= 48 && code <= 57) || (code >= 65 && code <= 90) || (code >= 97 && code <= 122)) {
        unitName += c;
        next();
        code = text.charCodeAt(index);
      }
      code = unitName.charCodeAt(0);
      if ((code >= 65 && code <= 90) || (code >= 97 && code <= 122)) {
        return unitName || null;
      } else {
        return null;
      }
    }
    function parseCharacter(toFind) {
      if (c === toFind) {
        next();
        return toFind;
      } else {
        return null;
      }
    }
    Unit.parse = function(str) {
      text = str;
      index = -1;
      c = '';
      if (typeof text !== 'string') {
        throw new TypeError('Invalid argument in Unit.parse, string expected');
      }
      var unit = new Unit();
      unit.units = [];
      next();
      skipWhitespace();
      var valueStr = parseNumber();
      var value = null;
      if (valueStr) {
        if (config.number === 'BigNumber') {
          value = new type.BigNumber(valueStr);
        } else if (config.number === 'Fraction') {
          value = new type.Fraction(valueStr);
        } else {
          value = parseFloat(valueStr);
        }
      }
      skipWhitespace();
      var powerMultiplierCurrent = 1;
      var expectingUnit = false;
      var powerMultiplierStack = [];
      var powerMultiplierStackProduct = 1;
      while (true) {
        skipWhitespace();
        while (c === '(') {
          powerMultiplierStack.push(powerMultiplierCurrent);
          powerMultiplierStackProduct *= powerMultiplierCurrent;
          powerMultiplierCurrent = 1;
          next();
          skipWhitespace();
        }
        if (c) {
          var oldC = c;
          var uStr = parseUnit();
          if (uStr == null) {
            throw new SyntaxError('Unexpected "' + oldC + '" in "' + text + '" at index ' + index.toString());
          }
        } else {
          break;
        }
        var res = _findUnit(uStr);
        if (res == null) {
          throw new SyntaxError('Unit "' + uStr + '" not found.');
        }
        var power = powerMultiplierCurrent * powerMultiplierStackProduct;
        skipWhitespace();
        if (parseCharacter('^')) {
          skipWhitespace();
          var p = parseNumber();
          if (p == null) {
            throw new SyntaxError('In "' + str + '", "^" must be followed by a floating-point number');
          }
          power *= p;
        }
        unit.units.push({
          unit: res.unit,
          prefix: res.prefix,
          power: power
        });
        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
          unit.dimensions[i] += res.unit.dimensions[i] * power;
        }
        skipWhitespace();
        while (c === ')') {
          if (powerMultiplierStack.length === 0) {
            throw new SyntaxError('Unmatched ")" in "' + text + '" at index ' + index.toString());
          }
          powerMultiplierStackProduct /= powerMultiplierStack.pop();
          next();
          skipWhitespace();
        }
        expectingUnit = false;
        if (parseCharacter('*')) {
          powerMultiplierCurrent = 1;
          expectingUnit = true;
        } else if (parseCharacter('/')) {
          powerMultiplierCurrent = -1;
          expectingUnit = true;
        } else {
          powerMultiplierCurrent = 1;
        }
        var baseDim = res.unit.base.key;
        UNIT_SYSTEMS.auto[baseDim] = {
          unit: res.unit,
          prefix: res.prefix
        };
      }
      skipWhitespace();
      if (c) {
        throw new SyntaxError('Could not parse: "' + str + '"');
      }
      if (expectingUnit) {
        throw new SyntaxError('Trailing characters: "' + str + '"');
      }
      if (powerMultiplierStack.length !== 0) {
        throw new SyntaxError('Unmatched "(" in "' + text + '"');
      }
      if (unit.units.length == 0) {
        throw new SyntaxError('"' + str + '" contains no units');
      }
      unit.value = (value != undefined) ? unit._normalize(value) : null;
      return unit;
    };
    Unit.prototype.clone = function() {
      var unit = new Unit();
      unit.fixPrefix = this.fixPrefix;
      unit.isUnitListSimplified = this.isUnitListSimplified;
      unit.value = clone(this.value);
      unit.dimensions = this.dimensions.slice(0);
      unit.units = [];
      for (var i = 0; i < this.units.length; i++) {
        unit.units[i] = {};
        for (var p in this.units[i]) {
          if (this.units[i].hasOwnProperty(p)) {
            unit.units[i][p] = this.units[i][p];
          }
        }
      }
      return unit;
    };
    Unit.prototype._isDerived = function() {
      if (this.units.length === 0) {
        return false;
      }
      return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;
    };
    Unit.prototype._normalize = function(value) {
      var unitValue,
          unitOffset,
          unitPower,
          unitPrefixValue;
      var convert;
      if (value == null || this.units.length === 0) {
        return value;
      } else if (this._isDerived()) {
        var res = value;
        convert = Unit._getNumberConverter(getTypeOf(value));
        for (var i = 0; i < this.units.length; i++) {
          unitValue = convert(this.units[i].unit.value);
          unitPrefixValue = convert(this.units[i].prefix.value);
          unitPower = convert(this.units[i].power);
          res = multiply(res, pow(multiply(unitValue, unitPrefixValue), unitPower));
        }
        return res;
      } else {
        convert = Unit._getNumberConverter(getTypeOf(value));
        unitValue = convert(this.units[0].unit.value);
        unitOffset = convert(this.units[0].unit.offset);
        unitPrefixValue = convert(this.units[0].prefix.value);
        return multiply(add(value, unitOffset), multiply(unitValue, unitPrefixValue));
      }
    };
    Unit.prototype._denormalize = function(value, prefixValue) {
      var unitValue,
          unitOffset,
          unitPower,
          unitPrefixValue;
      var convert;
      if (value == null || this.units.length === 0) {
        return value;
      } else if (this._isDerived()) {
        var res = value;
        convert = Unit._getNumberConverter(getTypeOf(value));
        for (var i = 0; i < this.units.length; i++) {
          unitValue = convert(this.units[i].unit.value);
          unitPrefixValue = convert(this.units[i].prefix.value);
          unitPower = convert(this.units[i].power);
          res = divide(res, pow(multiply(unitValue, unitPrefixValue), unitPower));
        }
        return res;
      } else {
        convert = Unit._getNumberConverter(getTypeOf(value));
        unitValue = convert(this.units[0].unit.value);
        unitPrefixValue = convert(this.units[0].prefix.value);
        unitOffset = convert(this.units[0].unit.offset);
        if (prefixValue == undefined) {
          return subtract(divide(divide(value, unitValue), unitPrefixValue), unitOffset);
        } else {
          return subtract(divide(divide(value, unitValue), prefixValue), unitOffset);
        }
      }
    };
    function _findUnit(str) {
      for (var name in UNITS) {
        if (UNITS.hasOwnProperty(name)) {
          if (endsWith(str, name)) {
            var unit = UNITS[name];
            var prefixLen = (str.length - name.length);
            var prefixName = str.substring(0, prefixLen);
            var prefix = unit.prefixes[prefixName];
            if (prefix !== undefined) {
              return {
                unit: unit,
                prefix: prefix
              };
            }
          }
        }
      }
      return null;
    }
    Unit.isValuelessUnit = function(name) {
      return (_findUnit(name) != null);
    };
    Unit.prototype.hasBase = function(base) {
      if (typeof(base) === "string") {
        base = BASE_UNITS[base];
      }
      if (!base)
        return false;
      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
        if (Math.abs(this.dimensions[i] - base.dimensions[i]) > 1e-12) {
          return false;
        }
      }
      return true;
    };
    Unit.prototype.equalBase = function(other) {
      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
        if (Math.abs(this.dimensions[i] - other.dimensions[i]) > 1e-12) {
          return false;
        }
      }
      return true;
    };
    Unit.prototype.equals = function(other) {
      return (this.equalBase(other) && equal(this.value, other.value));
    };
    Unit.prototype.multiply = function(other) {
      var res = this.clone();
      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
        res.dimensions[i] = this.dimensions[i] + other.dimensions[i];
      }
      for (var i = 0; i < other.units.length; i++) {
        var inverted = JSON.parse(JSON.stringify(other.units[i]));
        res.units.push(inverted);
      }
      if (this.value != null || other.value != null) {
        var valThis = this.value == null ? this._normalize(1) : this.value;
        var valOther = other.value == null ? other._normalize(1) : other.value;
        res.value = multiply(valThis, valOther);
      } else {
        res.value = null;
      }
      res.isUnitListSimplified = false;
      return res;
    };
    Unit.prototype.divide = function(other) {
      var res = this.clone();
      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
        res.dimensions[i] = this.dimensions[i] - other.dimensions[i];
      }
      for (var i = 0; i < other.units.length; i++) {
        var inverted = JSON.parse(JSON.stringify(other.units[i]));
        inverted.power = -inverted.power;
        res.units.push(inverted);
      }
      if (this.value != null || other.value != null) {
        var valThis = this.value == null ? this._normalize(1) : this.value;
        var valOther = other.value == null ? other._normalize(1) : other.value;
        res.value = divide(valThis, valOther);
      } else {
        res.value = null;
      }
      res.isUnitListSimplified = false;
      return res;
    };
    Unit.prototype.pow = function(p) {
      var res = this.clone();
      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
        res.dimensions[i] = this.dimensions[i] * p;
      }
      for (var i = 0; i < res.units.length; i++) {
        res.units[i].power *= p;
      }
      if (res.value != null) {
        res.value = pow(res.value, p);
      } else {
        res.value = null;
      }
      res.isUnitListSimplified = false;
      return res;
    };
    Unit.prototype.abs = function() {
      var ret = this.clone();
      ret.value = abs(ret.value);
      for (var i in ret.units) {
        if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {
          ret.units[i].unit = UNITS["W"];
        }
      }
      return ret;
    };
    Unit.prototype.to = function(valuelessUnit) {
      var other;
      var value = this.value == null ? this._normalize(1) : this.value;
      if (typeof valuelessUnit === 'string') {
        other = Unit.parse(valuelessUnit);
        if (!this.equalBase(other)) {
          throw new Error('Units do not match');
        }
        if (other.value !== null) {
          throw new Error('Cannot convert to a unit with a value');
        }
        other.value = clone(value);
        other.fixPrefix = true;
        other.isUnitListSimplified = true;
        return other;
      } else if (valuelessUnit && valuelessUnit.isUnit) {
        if (!this.equalBase(valuelessUnit)) {
          throw new Error('Units do not match');
        }
        if (valuelessUnit.value !== null) {
          throw new Error('Cannot convert to a unit with a value');
        }
        other = valuelessUnit.clone();
        other.value = clone(value);
        other.fixPrefix = true;
        other.isUnitListSimplified = true;
        return other;
      } else {
        throw new Error('String or Unit expected as parameter');
      }
    };
    Unit.prototype.toNumber = function(valuelessUnit) {
      return toNumber(this.toNumeric(valuelessUnit));
    };
    Unit.prototype.toNumeric = function(valuelessUnit) {
      var other = this.to(valuelessUnit);
      if (other._isDerived()) {
        return other._denormalize(other.value);
      } else {
        return other._denormalize(other.value, other.units[0].prefix.value);
      }
    };
    Unit.prototype.toString = function() {
      return this.format();
    };
    Unit.prototype.toJSON = function() {
      return {
        mathjs: 'Unit',
        value: this._denormalize(this.value),
        unit: this.formatUnits(),
        fixPrefix: this.fixPrefix
      };
    };
    Unit.fromJSON = function(json) {
      var unit = new Unit(json.value, json.unit);
      unit.fixPrefix = json.fixPrefix || false;
      return unit;
    };
    Unit.prototype.valueOf = Unit.prototype.toString;
    Unit.prototype.simplifyUnitListLazy = function() {
      if (this.isUnitListSimplified || this.value == null) {
        return;
      }
      var proposedUnitList = [];
      var matchingBase;
      for (var key in currentUnitSystem) {
        if (this.hasBase(BASE_UNITS[key])) {
          matchingBase = key;
          break;
        }
      }
      if (matchingBase === 'NONE') {
        this.units = [];
      } else {
        var matchingUnit;
        if (matchingBase) {
          if (currentUnitSystem.hasOwnProperty(matchingBase)) {
            matchingUnit = currentUnitSystem[matchingBase];
          }
        }
        var value;
        var str;
        if (matchingUnit) {
          this.units = [{
            unit: matchingUnit.unit,
            prefix: matchingUnit.prefix,
            power: 1.0
          }];
        } else {
          for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
            var baseDim = BASE_DIMENSIONS[i];
            if (Math.abs(this.dimensions[i]) > 1e-12) {
              proposedUnitList.push({
                unit: currentUnitSystem[baseDim].unit,
                prefix: currentUnitSystem[baseDim].prefix,
                power: this.dimensions[i]
              });
            }
          }
          if (proposedUnitList.length < this.units.length) {
            this.units = proposedUnitList;
          }
        }
      }
      this.isUnitListSimplified = true;
    };
    Unit.prototype.formatUnits = function() {
      this.simplifyUnitListLazy();
      var strNum = "";
      var strDen = "";
      var nNum = 0;
      var nDen = 0;
      for (var i = 0; i < this.units.length; i++) {
        if (this.units[i].power > 0) {
          nNum++;
          strNum += " " + this.units[i].prefix.name + this.units[i].unit.name;
          if (Math.abs(this.units[i].power - 1.0) > 1e-15) {
            strNum += "^" + this.units[i].power;
          }
        } else if (this.units[i].power < 0) {
          nDen++;
        }
      }
      if (nDen > 0) {
        for (var i = 0; i < this.units.length; i++) {
          if (this.units[i].power < 0) {
            if (nNum > 0) {
              strDen += " " + this.units[i].prefix.name + this.units[i].unit.name;
              if (Math.abs(this.units[i].power + 1.0) > 1e-15) {
                strDen += "^" + (-this.units[i].power);
              }
            } else {
              strDen += " " + this.units[i].prefix.name + this.units[i].unit.name;
              strDen += "^" + (this.units[i].power);
            }
          }
        }
      }
      strNum = strNum.substr(1);
      strDen = strDen.substr(1);
      if (nNum > 1 && nDen > 0) {
        strNum = "(" + strNum + ")";
      }
      if (nDen > 1 && nNum > 0) {
        strDen = "(" + strDen + ")";
      }
      var str = strNum;
      if (nNum > 0 && nDen > 0) {
        str += " / ";
      }
      str += strDen;
      return str;
    };
    Unit.prototype.format = function(options) {
      this.simplifyUnitListLazy();
      var isImaginary = false;
      var isReal = true;
      if (typeof(this.value) !== 'undefined' && this.value !== null && this.value.isComplex) {
        isImaginary = Math.abs(this.value.re) < 1e-14;
        isReal = Math.abs(this.value.im) < 1e-14;
      }
      for (var i in this.units) {
        if (this.units[i].unit) {
          if (this.units[i].unit.name === 'VA' && isImaginary) {
            this.units[i].unit = UNITS["VAR"];
          } else if (this.units[i].unit.name === 'VAR' && !isImaginary) {
            this.units[i].unit = UNITS["VA"];
          }
        }
      }
      if (this.units.length === 1 && !this.fixPrefix) {
        if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) < 1e-14) {
          this.units[0].prefix = this._bestPrefix();
        }
      }
      var value = this._denormalize(this.value);
      var str = (this.value !== null) ? format(value, options || {}) : '';
      var unitStr = this.formatUnits();
      if (this.value && this.value.isComplex) {
        str = "(" + str + ")";
      }
      if (unitStr.length > 0 && str.length > 0) {
        str += " ";
      }
      str += unitStr;
      return str;
    };
    Unit.prototype._bestPrefix = function() {
      if (this.units.length !== 1) {
        throw new Error("Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!");
      }
      if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {
        throw new Error("Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!");
      }
      var absValue = abs(this.value);
      var absUnitValue = abs(this.units[0].unit.value);
      var bestPrefix = this.units[0].prefix;
      if (absValue === 0) {
        return bestPrefix;
      }
      var power = this.units[0].power;
      var bestDiff = Math.abs(Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2);
      var prefixes = this.units[0].unit.prefixes;
      for (var p in prefixes) {
        if (prefixes.hasOwnProperty(p)) {
          var prefix = prefixes[p];
          if (prefix.scientific) {
            var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);
            if (diff < bestDiff || (diff === bestDiff && prefix.name.length < bestPrefix.name.length)) {
              bestPrefix = prefix;
              bestDiff = diff;
            }
          }
        }
      }
      return bestPrefix;
    };
    var PREFIXES = {
      NONE: {'': {
          name: '',
          value: 1,
          scientific: true
        }},
      SHORT: {
        '': {
          name: '',
          value: 1,
          scientific: true
        },
        'da': {
          name: 'da',
          value: 1e1,
          scientific: false
        },
        'h': {
          name: 'h',
          value: 1e2,
          scientific: false
        },
        'k': {
          name: 'k',
          value: 1e3,
          scientific: true
        },
        'M': {
          name: 'M',
          value: 1e6,
          scientific: true
        },
        'G': {
          name: 'G',
          value: 1e9,
          scientific: true
        },
        'T': {
          name: 'T',
          value: 1e12,
          scientific: true
        },
        'P': {
          name: 'P',
          value: 1e15,
          scientific: true
        },
        'E': {
          name: 'E',
          value: 1e18,
          scientific: true
        },
        'Z': {
          name: 'Z',
          value: 1e21,
          scientific: true
        },
        'Y': {
          name: 'Y',
          value: 1e24,
          scientific: true
        },
        'd': {
          name: 'd',
          value: 1e-1,
          scientific: false
        },
        'c': {
          name: 'c',
          value: 1e-2,
          scientific: false
        },
        'm': {
          name: 'm',
          value: 1e-3,
          scientific: true
        },
        'u': {
          name: 'u',
          value: 1e-6,
          scientific: true
        },
        'n': {
          name: 'n',
          value: 1e-9,
          scientific: true
        },
        'p': {
          name: 'p',
          value: 1e-12,
          scientific: true
        },
        'f': {
          name: 'f',
          value: 1e-15,
          scientific: true
        },
        'a': {
          name: 'a',
          value: 1e-18,
          scientific: true
        },
        'z': {
          name: 'z',
          value: 1e-21,
          scientific: true
        },
        'y': {
          name: 'y',
          value: 1e-24,
          scientific: true
        }
      },
      LONG: {
        '': {
          name: '',
          value: 1,
          scientific: true
        },
        'deca': {
          name: 'deca',
          value: 1e1,
          scientific: false
        },
        'hecto': {
          name: 'hecto',
          value: 1e2,
          scientific: false
        },
        'kilo': {
          name: 'kilo',
          value: 1e3,
          scientific: true
        },
        'mega': {
          name: 'mega',
          value: 1e6,
          scientific: true
        },
        'giga': {
          name: 'giga',
          value: 1e9,
          scientific: true
        },
        'tera': {
          name: 'tera',
          value: 1e12,
          scientific: true
        },
        'peta': {
          name: 'peta',
          value: 1e15,
          scientific: true
        },
        'exa': {
          name: 'exa',
          value: 1e18,
          scientific: true
        },
        'zetta': {
          name: 'zetta',
          value: 1e21,
          scientific: true
        },
        'yotta': {
          name: 'yotta',
          value: 1e24,
          scientific: true
        },
        'deci': {
          name: 'deci',
          value: 1e-1,
          scientific: false
        },
        'centi': {
          name: 'centi',
          value: 1e-2,
          scientific: false
        },
        'milli': {
          name: 'milli',
          value: 1e-3,
          scientific: true
        },
        'micro': {
          name: 'micro',
          value: 1e-6,
          scientific: true
        },
        'nano': {
          name: 'nano',
          value: 1e-9,
          scientific: true
        },
        'pico': {
          name: 'pico',
          value: 1e-12,
          scientific: true
        },
        'femto': {
          name: 'femto',
          value: 1e-15,
          scientific: true
        },
        'atto': {
          name: 'atto',
          value: 1e-18,
          scientific: true
        },
        'zepto': {
          name: 'zepto',
          value: 1e-21,
          scientific: true
        },
        'yocto': {
          name: 'yocto',
          value: 1e-24,
          scientific: true
        }
      },
      SQUARED: {
        '': {
          name: '',
          value: 1,
          scientific: true
        },
        'da': {
          name: 'da',
          value: 1e2,
          scientific: false
        },
        'h': {
          name: 'h',
          value: 1e4,
          scientific: false
        },
        'k': {
          name: 'k',
          value: 1e6,
          scientific: true
        },
        'M': {
          name: 'M',
          value: 1e12,
          scientific: true
        },
        'G': {
          name: 'G',
          value: 1e18,
          scientific: true
        },
        'T': {
          name: 'T',
          value: 1e24,
          scientific: true
        },
        'P': {
          name: 'P',
          value: 1e30,
          scientific: true
        },
        'E': {
          name: 'E',
          value: 1e36,
          scientific: true
        },
        'Z': {
          name: 'Z',
          value: 1e42,
          scientific: true
        },
        'Y': {
          name: 'Y',
          value: 1e48,
          scientific: true
        },
        'd': {
          name: 'd',
          value: 1e-2,
          scientific: false
        },
        'c': {
          name: 'c',
          value: 1e-4,
          scientific: false
        },
        'm': {
          name: 'm',
          value: 1e-6,
          scientific: true
        },
        'u': {
          name: 'u',
          value: 1e-12,
          scientific: true
        },
        'n': {
          name: 'n',
          value: 1e-18,
          scientific: true
        },
        'p': {
          name: 'p',
          value: 1e-24,
          scientific: true
        },
        'f': {
          name: 'f',
          value: 1e-30,
          scientific: true
        },
        'a': {
          name: 'a',
          value: 1e-36,
          scientific: true
        },
        'z': {
          name: 'z',
          value: 1e-42,
          scientific: true
        },
        'y': {
          name: 'y',
          value: 1e-48,
          scientific: true
        }
      },
      CUBIC: {
        '': {
          name: '',
          value: 1,
          scientific: true
        },
        'da': {
          name: 'da',
          value: 1e3,
          scientific: false
        },
        'h': {
          name: 'h',
          value: 1e6,
          scientific: false
        },
        'k': {
          name: 'k',
          value: 1e9,
          scientific: true
        },
        'M': {
          name: 'M',
          value: 1e18,
          scientific: true
        },
        'G': {
          name: 'G',
          value: 1e27,
          scientific: true
        },
        'T': {
          name: 'T',
          value: 1e36,
          scientific: true
        },
        'P': {
          name: 'P',
          value: 1e45,
          scientific: true
        },
        'E': {
          name: 'E',
          value: 1e54,
          scientific: true
        },
        'Z': {
          name: 'Z',
          value: 1e63,
          scientific: true
        },
        'Y': {
          name: 'Y',
          value: 1e72,
          scientific: true
        },
        'd': {
          name: 'd',
          value: 1e-3,
          scientific: false
        },
        'c': {
          name: 'c',
          value: 1e-6,
          scientific: false
        },
        'm': {
          name: 'm',
          value: 1e-9,
          scientific: true
        },
        'u': {
          name: 'u',
          value: 1e-18,
          scientific: true
        },
        'n': {
          name: 'n',
          value: 1e-27,
          scientific: true
        },
        'p': {
          name: 'p',
          value: 1e-36,
          scientific: true
        },
        'f': {
          name: 'f',
          value: 1e-45,
          scientific: true
        },
        'a': {
          name: 'a',
          value: 1e-54,
          scientific: true
        },
        'z': {
          name: 'z',
          value: 1e-63,
          scientific: true
        },
        'y': {
          name: 'y',
          value: 1e-72,
          scientific: true
        }
      },
      BINARY_SHORT: {
        '': {
          name: '',
          value: 1,
          scientific: true
        },
        'k': {
          name: 'k',
          value: 1e3,
          scientific: true
        },
        'M': {
          name: 'M',
          value: 1e6,
          scientific: true
        },
        'G': {
          name: 'G',
          value: 1e9,
          scientific: true
        },
        'T': {
          name: 'T',
          value: 1e12,
          scientific: true
        },
        'P': {
          name: 'P',
          value: 1e15,
          scientific: true
        },
        'E': {
          name: 'E',
          value: 1e18,
          scientific: true
        },
        'Z': {
          name: 'Z',
          value: 1e21,
          scientific: true
        },
        'Y': {
          name: 'Y',
          value: 1e24,
          scientific: true
        },
        'Ki': {
          name: 'Ki',
          value: 1024,
          scientific: true
        },
        'Mi': {
          name: 'Mi',
          value: Math.pow(1024, 2),
          scientific: true
        },
        'Gi': {
          name: 'Gi',
          value: Math.pow(1024, 3),
          scientific: true
        },
        'Ti': {
          name: 'Ti',
          value: Math.pow(1024, 4),
          scientific: true
        },
        'Pi': {
          name: 'Pi',
          value: Math.pow(1024, 5),
          scientific: true
        },
        'Ei': {
          name: 'Ei',
          value: Math.pow(1024, 6),
          scientific: true
        },
        'Zi': {
          name: 'Zi',
          value: Math.pow(1024, 7),
          scientific: true
        },
        'Yi': {
          name: 'Yi',
          value: Math.pow(1024, 8),
          scientific: true
        }
      },
      BINARY_LONG: {
        '': {
          name: '',
          value: 1,
          scientific: true
        },
        'kilo': {
          name: 'kilo',
          value: 1e3,
          scientific: true
        },
        'mega': {
          name: 'mega',
          value: 1e6,
          scientific: true
        },
        'giga': {
          name: 'giga',
          value: 1e9,
          scientific: true
        },
        'tera': {
          name: 'tera',
          value: 1e12,
          scientific: true
        },
        'peta': {
          name: 'peta',
          value: 1e15,
          scientific: true
        },
        'exa': {
          name: 'exa',
          value: 1e18,
          scientific: true
        },
        'zetta': {
          name: 'zetta',
          value: 1e21,
          scientific: true
        },
        'yotta': {
          name: 'yotta',
          value: 1e24,
          scientific: true
        },
        'kibi': {
          name: 'kibi',
          value: 1024,
          scientific: true
        },
        'mebi': {
          name: 'mebi',
          value: Math.pow(1024, 2),
          scientific: true
        },
        'gibi': {
          name: 'gibi',
          value: Math.pow(1024, 3),
          scientific: true
        },
        'tebi': {
          name: 'tebi',
          value: Math.pow(1024, 4),
          scientific: true
        },
        'pebi': {
          name: 'pebi',
          value: Math.pow(1024, 5),
          scientific: true
        },
        'exi': {
          name: 'exi',
          value: Math.pow(1024, 6),
          scientific: true
        },
        'zebi': {
          name: 'zebi',
          value: Math.pow(1024, 7),
          scientific: true
        },
        'yobi': {
          name: 'yobi',
          value: Math.pow(1024, 8),
          scientific: true
        }
      },
      BTU: {
        '': {
          name: '',
          value: 1,
          scientific: true
        },
        'MM': {
          name: 'MM',
          value: 1e6,
          scientific: true
        }
      }
    };
    PREFIXES.SHORTLONG = {};
    for (var key in PREFIXES.SHORT) {
      if (PREFIXES.SHORT.hasOwnProperty(key)) {
        PREFIXES.SHORTLONG[key] = PREFIXES.SHORT[key];
      }
    }
    for (var key in PREFIXES.LONG) {
      if (PREFIXES.LONG.hasOwnProperty(key)) {
        PREFIXES.SHORTLONG[key] = PREFIXES.LONG[key];
      }
    }
    var BASE_DIMENSIONS = ["MASS", "LENGTH", "TIME", "CURRENT", "TEMPERATURE", "LUMINOUS_INTENSITY", "AMOUNT_OF_SUBSTANCE", "ANGLE", "BIT"];
    var BASE_UNITS = {
      NONE: {dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]},
      MASS: {dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]},
      LENGTH: {dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]},
      TIME: {dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]},
      CURRENT: {dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]},
      TEMPERATURE: {dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]},
      LUMINOUS_INTENSITY: {dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]},
      AMOUNT_OF_SUBSTANCE: {dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]},
      FORCE: {dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]},
      SURFACE: {dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]},
      VOLUME: {dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]},
      ENERGY: {dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]},
      POWER: {dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]},
      PRESSURE: {dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]},
      ELECTRIC_CHARGE: {dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]},
      ELECTRIC_CAPACITANCE: {dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]},
      ELECTRIC_POTENTIAL: {dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]},
      ELECTRIC_RESISTANCE: {dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]},
      ELECTRIC_INDUCTANCE: {dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]},
      ELECTRIC_CONDUCTANCE: {dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]},
      MAGNETIC_FLUX: {dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]},
      MAGNETIC_FLUX_DENSITY: {dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]},
      FREQUENCY: {dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]},
      ANGLE: {dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]},
      BIT: {dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]}
    };
    for (var key in BASE_UNITS) {
      BASE_UNITS[key].key = key;
    }
    var BASE_UNIT_NONE = {};
    var UNIT_NONE = {
      name: '',
      base: BASE_UNIT_NONE,
      value: 1,
      offset: 0,
      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]
    };
    var UNITS = {
      meter: {
        name: 'meter',
        base: BASE_UNITS.LENGTH,
        prefixes: PREFIXES.LONG,
        value: 1,
        offset: 0
      },
      inch: {
        name: 'inch',
        base: BASE_UNITS.LENGTH,
        prefixes: PREFIXES.NONE,
        value: 0.0254,
        offset: 0
      },
      foot: {
        name: 'foot',
        base: BASE_UNITS.LENGTH,
        prefixes: PREFIXES.NONE,
        value: 0.3048,
        offset: 0
      },
      yard: {
        name: 'yard',
        base: BASE_UNITS.LENGTH,
        prefixes: PREFIXES.NONE,
        value: 0.9144,
        offset: 0
      },
      mile: {
        name: 'mile',
        base: BASE_UNITS.LENGTH,
        prefixes: PREFIXES.NONE,
        value: 1609.344,
        offset: 0
      },
      link: {
        name: 'link',
        base: BASE_UNITS.LENGTH,
        prefixes: PREFIXES.NONE,
        value: 0.201168,
        offset: 0
      },
      rod: {
        name: 'rod',
        base: BASE_UNITS.LENGTH,
        prefixes: PREFIXES.NONE,
        value: 5.029210,
        offset: 0
      },
      chain: {
        name: 'chain',
        base: BASE_UNITS.LENGTH,
        prefixes: PREFIXES.NONE,
        value: 20.1168,
        offset: 0
      },
      angstrom: {
        name: 'angstrom',
        base: BASE_UNITS.LENGTH,
        prefixes: PREFIXES.NONE,
        value: 1e-10,
        offset: 0
      },
      m: {
        name: 'm',
        base: BASE_UNITS.LENGTH,
        prefixes: PREFIXES.SHORT,
        value: 1,
        offset: 0
      },
      'in': {
        name: 'in',
        base: BASE_UNITS.LENGTH,
        prefixes: PREFIXES.NONE,
        value: 0.0254,
        offset: 0
      },
      ft: {
        name: 'ft',
        base: BASE_UNITS.LENGTH,
        prefixes: PREFIXES.NONE,
        value: 0.3048,
        offset: 0
      },
      yd: {
        name: 'yd',
        base: BASE_UNITS.LENGTH,
        prefixes: PREFIXES.NONE,
        value: 0.9144,
        offset: 0
      },
      mi: {
        name: 'mi',
        base: BASE_UNITS.LENGTH,
        prefixes: PREFIXES.NONE,
        value: 1609.344,
        offset: 0
      },
      li: {
        name: 'li',
        base: BASE_UNITS.LENGTH,
        prefixes: PREFIXES.NONE,
        value: 0.201168,
        offset: 0
      },
      rd: {
        name: 'rd',
        base: BASE_UNITS.LENGTH,
        prefixes: PREFIXES.NONE,
        value: 5.029210,
        offset: 0
      },
      ch: {
        name: 'ch',
        base: BASE_UNITS.LENGTH,
        prefixes: PREFIXES.NONE,
        value: 20.1168,
        offset: 0
      },
      mil: {
        name: 'mil',
        base: BASE_UNITS.LENGTH,
        prefixes: PREFIXES.NONE,
        value: 0.0000254,
        offset: 0
      },
      m2: {
        name: 'm2',
        base: BASE_UNITS.SURFACE,
        prefixes: PREFIXES.SQUARED,
        value: 1,
        offset: 0
      },
      sqin: {
        name: 'sqin',
        base: BASE_UNITS.SURFACE,
        prefixes: PREFIXES.NONE,
        value: 0.00064516,
        offset: 0
      },
      sqft: {
        name: 'sqft',
        base: BASE_UNITS.SURFACE,
        prefixes: PREFIXES.NONE,
        value: 0.09290304,
        offset: 0
      },
      sqyd: {
        name: 'sqyd',
        base: BASE_UNITS.SURFACE,
        prefixes: PREFIXES.NONE,
        value: 0.83612736,
        offset: 0
      },
      sqmi: {
        name: 'sqmi',
        base: BASE_UNITS.SURFACE,
        prefixes: PREFIXES.NONE,
        value: 2589988.110336,
        offset: 0
      },
      sqrd: {
        name: 'sqrd',
        base: BASE_UNITS.SURFACE,
        prefixes: PREFIXES.NONE,
        value: 25.29295,
        offset: 0
      },
      sqch: {
        name: 'sqch',
        base: BASE_UNITS.SURFACE,
        prefixes: PREFIXES.NONE,
        value: 404.6873,
        offset: 0
      },
      sqmil: {
        name: 'sqmil',
        base: BASE_UNITS.SURFACE,
        prefixes: PREFIXES.NONE,
        value: 6.4516e-10,
        offset: 0
      },
      acre: {
        name: 'acre',
        base: BASE_UNITS.SURFACE,
        prefixes: PREFIXES.NONE,
        value: 4046.86,
        offset: 0
      },
      hectare: {
        name: 'hectare',
        base: BASE_UNITS.SURFACE,
        prefixes: PREFIXES.NONE,
        value: 10000,
        offset: 0
      },
      m3: {
        name: 'm3',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.CUBIC,
        value: 1,
        offset: 0
      },
      L: {
        name: 'L',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.SHORT,
        value: 0.001,
        offset: 0
      },
      l: {
        name: 'l',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.SHORT,
        value: 0.001,
        offset: 0
      },
      litre: {
        name: 'litre',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.LONG,
        value: 0.001,
        offset: 0
      },
      cuin: {
        name: 'cuin',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.NONE,
        value: 1.6387064e-5,
        offset: 0
      },
      cuft: {
        name: 'cuft',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.NONE,
        value: 0.028316846592,
        offset: 0
      },
      cuyd: {
        name: 'cuyd',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.NONE,
        value: 0.764554857984,
        offset: 0
      },
      teaspoon: {
        name: 'teaspoon',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.NONE,
        value: 0.000005,
        offset: 0
      },
      tablespoon: {
        name: 'tablespoon',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.NONE,
        value: 0.000015,
        offset: 0
      },
      drop: {
        name: 'drop',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.NONE,
        value: 5e-8,
        offset: 0
      },
      gtt: {
        name: 'gtt',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.NONE,
        value: 5e-8,
        offset: 0
      },
      minim: {
        name: 'minim',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.NONE,
        value: 0.00000006161152,
        offset: 0
      },
      fluiddram: {
        name: 'fluiddram',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.NONE,
        value: 0.0000036966911,
        offset: 0
      },
      fluidounce: {
        name: 'fluidounce',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.NONE,
        value: 0.00002957353,
        offset: 0
      },
      gill: {
        name: 'gill',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.NONE,
        value: 0.0001182941,
        offset: 0
      },
      cc: {
        name: 'cc',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.NONE,
        value: 1e-6,
        offset: 0
      },
      cup: {
        name: 'cup',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.NONE,
        value: 0.0002365882,
        offset: 0
      },
      pint: {
        name: 'pint',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.NONE,
        value: 0.0004731765,
        offset: 0
      },
      quart: {
        name: 'quart',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.NONE,
        value: 0.0009463529,
        offset: 0
      },
      gallon: {
        name: 'gallon',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.NONE,
        value: 0.003785412,
        offset: 0
      },
      beerbarrel: {
        name: 'beerbarrel',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.NONE,
        value: 0.1173478,
        offset: 0
      },
      oilbarrel: {
        name: 'oilbarrel',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.NONE,
        value: 0.1589873,
        offset: 0
      },
      hogshead: {
        name: 'hogshead',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.NONE,
        value: 0.2384810,
        offset: 0
      },
      fldr: {
        name: 'fldr',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.NONE,
        value: 0.0000036966911,
        offset: 0
      },
      floz: {
        name: 'floz',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.NONE,
        value: 0.00002957353,
        offset: 0
      },
      gi: {
        name: 'gi',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.NONE,
        value: 0.0001182941,
        offset: 0
      },
      cp: {
        name: 'cp',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.NONE,
        value: 0.0002365882,
        offset: 0
      },
      pt: {
        name: 'pt',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.NONE,
        value: 0.0004731765,
        offset: 0
      },
      qt: {
        name: 'qt',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.NONE,
        value: 0.0009463529,
        offset: 0
      },
      gal: {
        name: 'gal',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.NONE,
        value: 0.003785412,
        offset: 0
      },
      bbl: {
        name: 'bbl',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.NONE,
        value: 0.1173478,
        offset: 0
      },
      obl: {
        name: 'obl',
        base: BASE_UNITS.VOLUME,
        prefixes: PREFIXES.NONE,
        value: 0.1589873,
        offset: 0
      },
      g: {
        name: 'g',
        base: BASE_UNITS.MASS,
        prefixes: PREFIXES.SHORT,
        value: 0.001,
        offset: 0
      },
      gram: {
        name: 'gram',
        base: BASE_UNITS.MASS,
        prefixes: PREFIXES.LONG,
        value: 0.001,
        offset: 0
      },
      ton: {
        name: 'ton',
        base: BASE_UNITS.MASS,
        prefixes: PREFIXES.SHORT,
        value: 907.18474,
        offset: 0
      },
      tonne: {
        name: 'tonne',
        base: BASE_UNITS.MASS,
        prefixes: PREFIXES.SHORT,
        value: 1000,
        offset: 0
      },
      grain: {
        name: 'grain',
        base: BASE_UNITS.MASS,
        prefixes: PREFIXES.NONE,
        value: 64.79891e-6,
        offset: 0
      },
      dram: {
        name: 'dram',
        base: BASE_UNITS.MASS,
        prefixes: PREFIXES.NONE,
        value: 1.7718451953125e-3,
        offset: 0
      },
      ounce: {
        name: 'ounce',
        base: BASE_UNITS.MASS,
        prefixes: PREFIXES.NONE,
        value: 28.349523125e-3,
        offset: 0
      },
      poundmass: {
        name: 'poundmass',
        base: BASE_UNITS.MASS,
        prefixes: PREFIXES.NONE,
        value: 453.59237e-3,
        offset: 0
      },
      hundredweight: {
        name: 'hundredweight',
        base: BASE_UNITS.MASS,
        prefixes: PREFIXES.NONE,
        value: 45.359237,
        offset: 0
      },
      stick: {
        name: 'stick',
        base: BASE_UNITS.MASS,
        prefixes: PREFIXES.NONE,
        value: 115e-3,
        offset: 0
      },
      stone: {
        name: 'stone',
        base: BASE_UNITS.MASS,
        prefixes: PREFIXES.NONE,
        value: 6.35029318,
        offset: 0
      },
      gr: {
        name: 'gr',
        base: BASE_UNITS.MASS,
        prefixes: PREFIXES.NONE,
        value: 64.79891e-6,
        offset: 0
      },
      dr: {
        name: 'dr',
        base: BASE_UNITS.MASS,
        prefixes: PREFIXES.NONE,
        value: 1.7718451953125e-3,
        offset: 0
      },
      oz: {
        name: 'oz',
        base: BASE_UNITS.MASS,
        prefixes: PREFIXES.NONE,
        value: 28.349523125e-3,
        offset: 0
      },
      lbm: {
        name: 'lbm',
        base: BASE_UNITS.MASS,
        prefixes: PREFIXES.NONE,
        value: 453.59237e-3,
        offset: 0
      },
      cwt: {
        name: 'cwt',
        base: BASE_UNITS.MASS,
        prefixes: PREFIXES.NONE,
        value: 45.359237,
        offset: 0
      },
      s: {
        name: 's',
        base: BASE_UNITS.TIME,
        prefixes: PREFIXES.SHORT,
        value: 1,
        offset: 0
      },
      min: {
        name: 'min',
        base: BASE_UNITS.TIME,
        prefixes: PREFIXES.NONE,
        value: 60,
        offset: 0
      },
      h: {
        name: 'h',
        base: BASE_UNITS.TIME,
        prefixes: PREFIXES.NONE,
        value: 3600,
        offset: 0
      },
      second: {
        name: 'second',
        base: BASE_UNITS.TIME,
        prefixes: PREFIXES.LONG,
        value: 1,
        offset: 0
      },
      sec: {
        name: 'sec',
        base: BASE_UNITS.TIME,
        prefixes: PREFIXES.LONG,
        value: 1,
        offset: 0
      },
      minute: {
        name: 'minute',
        base: BASE_UNITS.TIME,
        prefixes: PREFIXES.NONE,
        value: 60,
        offset: 0
      },
      hour: {
        name: 'hour',
        base: BASE_UNITS.TIME,
        prefixes: PREFIXES.NONE,
        value: 3600,
        offset: 0
      },
      day: {
        name: 'day',
        base: BASE_UNITS.TIME,
        prefixes: PREFIXES.NONE,
        value: 86400,
        offset: 0
      },
      week: {
        name: 'week',
        base: BASE_UNITS.TIME,
        prefixes: PREFIXES.NONE,
        value: 7 * 86400,
        offset: 0
      },
      month: {
        name: 'month',
        base: BASE_UNITS.TIME,
        prefixes: PREFIXES.NONE,
        value: 2629800,
        offset: 0
      },
      year: {
        name: 'year',
        base: BASE_UNITS.TIME,
        prefixes: PREFIXES.NONE,
        value: 31557600,
        offset: 0
      },
      decade: {
        name: 'year',
        base: BASE_UNITS.TIME,
        prefixes: PREFIXES.NONE,
        value: 315576000,
        offset: 0
      },
      century: {
        name: 'century',
        base: BASE_UNITS.TIME,
        prefixes: PREFIXES.NONE,
        value: 3155760000,
        offset: 0
      },
      millennium: {
        name: 'millennium',
        base: BASE_UNITS.TIME,
        prefixes: PREFIXES.NONE,
        value: 31557600000,
        offset: 0
      },
      hertz: {
        name: 'Hertz',
        base: BASE_UNITS.FREQUENCY,
        prefixes: PREFIXES.LONG,
        value: 1,
        offset: 0,
        reciprocal: true
      },
      Hz: {
        name: 'Hz',
        base: BASE_UNITS.FREQUENCY,
        prefixes: PREFIXES.SHORT,
        value: 1,
        offset: 0,
        reciprocal: true
      },
      rad: {
        name: 'rad',
        base: BASE_UNITS.ANGLE,
        prefixes: PREFIXES.NONE,
        value: 1,
        offset: 0
      },
      deg: {
        name: 'deg',
        base: BASE_UNITS.ANGLE,
        prefixes: PREFIXES.NONE,
        value: null,
        offset: 0
      },
      grad: {
        name: 'grad',
        base: BASE_UNITS.ANGLE,
        prefixes: PREFIXES.NONE,
        value: null,
        offset: 0
      },
      cycle: {
        name: 'cycle',
        base: BASE_UNITS.ANGLE,
        prefixes: PREFIXES.NONE,
        value: null,
        offset: 0
      },
      arcsec: {
        name: 'arcsec',
        base: BASE_UNITS.ANGLE,
        prefixes: PREFIXES.NONE,
        value: null,
        offset: 0
      },
      arcmin: {
        name: 'arcmin',
        base: BASE_UNITS.ANGLE,
        prefixes: PREFIXES.NONE,
        value: null,
        offset: 0
      },
      A: {
        name: 'A',
        base: BASE_UNITS.CURRENT,
        prefixes: PREFIXES.SHORT,
        value: 1,
        offset: 0
      },
      ampere: {
        name: 'ampere',
        base: BASE_UNITS.CURRENT,
        prefixes: PREFIXES.LONG,
        value: 1,
        offset: 0
      },
      K: {
        name: 'K',
        base: BASE_UNITS.TEMPERATURE,
        prefixes: PREFIXES.NONE,
        value: 1,
        offset: 0
      },
      degC: {
        name: 'degC',
        base: BASE_UNITS.TEMPERATURE,
        prefixes: PREFIXES.NONE,
        value: 1,
        offset: 273.15
      },
      degF: {
        name: 'degF',
        base: BASE_UNITS.TEMPERATURE,
        prefixes: PREFIXES.NONE,
        value: 1 / 1.8,
        offset: 459.67
      },
      degR: {
        name: 'degR',
        base: BASE_UNITS.TEMPERATURE,
        prefixes: PREFIXES.NONE,
        value: 1 / 1.8,
        offset: 0
      },
      kelvin: {
        name: 'kelvin',
        base: BASE_UNITS.TEMPERATURE,
        prefixes: PREFIXES.NONE,
        value: 1,
        offset: 0
      },
      celsius: {
        name: 'celsius',
        base: BASE_UNITS.TEMPERATURE,
        prefixes: PREFIXES.NONE,
        value: 1,
        offset: 273.15
      },
      fahrenheit: {
        name: 'fahrenheit',
        base: BASE_UNITS.TEMPERATURE,
        prefixes: PREFIXES.NONE,
        value: 1 / 1.8,
        offset: 459.67
      },
      rankine: {
        name: 'rankine',
        base: BASE_UNITS.TEMPERATURE,
        prefixes: PREFIXES.NONE,
        value: 1 / 1.8,
        offset: 0
      },
      mol: {
        name: 'mol',
        base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
        prefixes: PREFIXES.SHORT,
        value: 1,
        offset: 0
      },
      mole: {
        name: 'mole',
        base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
        prefixes: PREFIXES.LONG,
        value: 1,
        offset: 0
      },
      cd: {
        name: 'cd',
        base: BASE_UNITS.LUMINOUS_INTENSITY,
        prefixes: PREFIXES.NONE,
        value: 1,
        offset: 0
      },
      candela: {
        name: 'candela',
        base: BASE_UNITS.LUMINOUS_INTENSITY,
        prefixes: PREFIXES.NONE,
        value: 1,
        offset: 0
      },
      N: {
        name: 'N',
        base: BASE_UNITS.FORCE,
        prefixes: PREFIXES.SHORT,
        value: 1,
        offset: 0
      },
      newton: {
        name: 'newton',
        base: BASE_UNITS.FORCE,
        prefixes: PREFIXES.LONG,
        value: 1,
        offset: 0
      },
      dyn: {
        name: 'dyn',
        base: BASE_UNITS.FORCE,
        prefixes: PREFIXES.SHORT,
        value: 0.00001,
        offset: 0
      },
      dyne: {
        name: 'dyne',
        base: BASE_UNITS.FORCE,
        prefixes: PREFIXES.LONG,
        value: 0.00001,
        offset: 0
      },
      lbf: {
        name: 'lbf',
        base: BASE_UNITS.FORCE,
        prefixes: PREFIXES.NONE,
        value: 4.4482216152605,
        offset: 0
      },
      poundforce: {
        name: 'poundforce',
        base: BASE_UNITS.FORCE,
        prefixes: PREFIXES.NONE,
        value: 4.4482216152605,
        offset: 0
      },
      kip: {
        name: 'kip',
        base: BASE_UNITS.FORCE,
        prefixes: PREFIXES.LONG,
        value: 4448.2216,
        offset: 0
      },
      J: {
        name: 'J',
        base: BASE_UNITS.ENERGY,
        prefixes: PREFIXES.SHORT,
        value: 1,
        offset: 0
      },
      joule: {
        name: 'joule',
        base: BASE_UNITS.ENERGY,
        prefixes: PREFIXES.SHORT,
        value: 1,
        offset: 0
      },
      erg: {
        name: 'erg',
        base: BASE_UNITS.ENERGY,
        prefixes: PREFIXES.NONE,
        value: 1e-5,
        offset: 0
      },
      Wh: {
        name: 'Wh',
        base: BASE_UNITS.ENERGY,
        prefixes: PREFIXES.SHORT,
        value: 3600,
        offset: 0
      },
      BTU: {
        name: 'BTU',
        base: BASE_UNITS.ENERGY,
        prefixes: PREFIXES.BTU,
        value: 1055.05585262,
        offset: 0
      },
      eV: {
        name: 'eV',
        base: BASE_UNITS.ENERGY,
        prefixes: PREFIXES.SHORT,
        value: 1.602176565e-19,
        offset: 0
      },
      electronvolt: {
        name: 'electronvolt',
        base: BASE_UNITS.ENERGY,
        prefixes: PREFIXES.LONG,
        value: 1.602176565e-19,
        offset: 0
      },
      W: {
        name: 'W',
        base: BASE_UNITS.POWER,
        prefixes: PREFIXES.SHORT,
        value: 1,
        offset: 0
      },
      watt: {
        name: 'W',
        base: BASE_UNITS.POWER,
        prefixes: PREFIXES.LONG,
        value: 1,
        offset: 0
      },
      hp: {
        name: 'hp',
        base: BASE_UNITS.POWER,
        prefixes: PREFIXES.NONE,
        value: 745.6998715386,
        offset: 0
      },
      VAR: {
        name: 'VAR',
        base: BASE_UNITS.POWER,
        prefixes: PREFIXES.SHORT,
        value: Complex.I,
        offset: 0
      },
      VA: {
        name: 'VA',
        base: BASE_UNITS.POWER,
        prefixes: PREFIXES.SHORT,
        value: 1,
        offset: 0
      },
      Pa: {
        name: 'Pa',
        base: BASE_UNITS.PRESSURE,
        prefixes: PREFIXES.SHORT,
        value: 1,
        offset: 0
      },
      psi: {
        name: 'psi',
        base: BASE_UNITS.PRESSURE,
        prefixes: PREFIXES.NONE,
        value: 6894.75729276459,
        offset: 0
      },
      atm: {
        name: 'atm',
        base: BASE_UNITS.PRESSURE,
        prefixes: PREFIXES.NONE,
        value: 101325,
        offset: 0
      },
      bar: {
        name: 'bar',
        base: BASE_UNITS.PRESSURE,
        prefixes: PREFIXES.NONE,
        value: 100000,
        offset: 0
      },
      torr: {
        name: 'torr',
        base: BASE_UNITS.PRESSURE,
        prefixes: PREFIXES.NONE,
        value: 133.322,
        offset: 0
      },
      mmHg: {
        name: 'mmHg',
        base: BASE_UNITS.PRESSURE,
        prefixes: PREFIXES.NONE,
        value: 133.322,
        offset: 0
      },
      mmH2O: {
        name: 'mmH2O',
        base: BASE_UNITS.PRESSURE,
        prefixes: PREFIXES.NONE,
        value: 9.80665,
        offset: 0
      },
      cmH2O: {
        name: 'cmH2O',
        base: BASE_UNITS.PRESSURE,
        prefixes: PREFIXES.NONE,
        value: 98.0665,
        offset: 0
      },
      coulomb: {
        name: 'coulomb',
        base: BASE_UNITS.ELECTRIC_CHARGE,
        prefixes: PREFIXES.LONG,
        value: 1,
        offset: 0
      },
      C: {
        name: 'C',
        base: BASE_UNITS.ELECTRIC_CHARGE,
        prefixes: PREFIXES.SHORT,
        value: 1,
        offset: 0
      },
      farad: {
        name: 'farad',
        base: BASE_UNITS.ELECTRIC_CAPACITANCE,
        prefixes: PREFIXES.LONG,
        value: 1,
        offset: 0
      },
      F: {
        name: 'F',
        base: BASE_UNITS.ELECTRIC_CAPACITANCE,
        prefixes: PREFIXES.SHORT,
        value: 1,
        offset: 0
      },
      volt: {
        name: 'volt',
        base: BASE_UNITS.ELECTRIC_POTENTIAL,
        prefixes: PREFIXES.LONG,
        value: 1,
        offset: 0
      },
      V: {
        name: 'V',
        base: BASE_UNITS.ELECTRIC_POTENTIAL,
        prefixes: PREFIXES.SHORT,
        value: 1,
        offset: 0
      },
      ohm: {
        name: 'ohm',
        base: BASE_UNITS.ELECTRIC_RESISTANCE,
        prefixes: PREFIXES.SHORTLONG,
        value: 1,
        offset: 0
      },
      henry: {
        name: 'henry',
        base: BASE_UNITS.ELECTRIC_INDUCTANCE,
        prefixes: PREFIXES.LONG,
        value: 1,
        offset: 0
      },
      H: {
        name: 'H',
        base: BASE_UNITS.ELECTRIC_INDUCTANCE,
        prefixes: PREFIXES.SHORT,
        value: 1,
        offset: 0
      },
      siemens: {
        name: 'siemens',
        base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
        prefixes: PREFIXES.LONG,
        value: 1,
        offset: 0
      },
      S: {
        name: 'S',
        base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
        prefixes: PREFIXES.SHORT,
        value: 1,
        offset: 0
      },
      weber: {
        name: 'weber',
        base: BASE_UNITS.MAGNETIC_FLUX,
        prefixes: PREFIXES.LONG,
        value: 1,
        offset: 0
      },
      Wb: {
        name: 'Wb',
        base: BASE_UNITS.MAGNETIC_FLUX,
        prefixes: PREFIXES.SHORT,
        value: 1,
        offset: 0
      },
      tesla: {
        name: 'tesla',
        base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
        prefixes: PREFIXES.LONG,
        value: 1,
        offset: 0
      },
      T: {
        name: 'T',
        base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
        prefixes: PREFIXES.SHORT,
        value: 1,
        offset: 0
      },
      b: {
        name: 'b',
        base: BASE_UNITS.BIT,
        prefixes: PREFIXES.BINARY_SHORT,
        value: 1,
        offset: 0
      },
      bits: {
        name: 'bits',
        base: BASE_UNITS.BIT,
        prefixes: PREFIXES.BINARY_LONG,
        value: 1,
        offset: 0
      },
      B: {
        name: 'B',
        base: BASE_UNITS.BIT,
        prefixes: PREFIXES.BINARY_SHORT,
        value: 8,
        offset: 0
      },
      bytes: {
        name: 'bytes',
        base: BASE_UNITS.BIT,
        prefixes: PREFIXES.BINARY_LONG,
        value: 8,
        offset: 0
      }
    };
    var ALIASES = {
      meters: 'meter',
      inches: 'inch',
      feet: 'foot',
      yards: 'yard',
      miles: 'mile',
      links: 'link',
      rods: 'rod',
      chains: 'chain',
      angstroms: 'angstrom',
      lt: 'l',
      litres: 'litre',
      liter: 'litre',
      liters: 'litre',
      teaspoons: 'teaspoon',
      tablespoons: 'tablespoon',
      minims: 'minim',
      fluiddrams: 'fluiddram',
      fluidounces: 'fluidounce',
      gills: 'gill',
      cups: 'cup',
      pints: 'pint',
      quarts: 'quart',
      gallons: 'gallon',
      beerbarrels: 'beerbarrel',
      oilbarrels: 'oilbarrel',
      hogsheads: 'hogshead',
      gtts: 'gtt',
      grams: 'gram',
      tons: 'ton',
      tonnes: 'tonne',
      grains: 'grain',
      drams: 'dram',
      ounces: 'ounce',
      poundmasses: 'poundmass',
      hundredweights: 'hundredweight',
      sticks: 'stick',
      lb: 'lbm',
      lbs: 'lbm',
      kips: 'kip',
      acres: 'acre',
      hectares: 'hectare',
      sqfeet: 'sqft',
      sqyard: 'sqyd',
      sqmile: 'sqmi',
      sqmiles: 'sqmi',
      mmhg: 'mmHg',
      mmh2o: 'mmH2O',
      cmh2o: 'cmH2O',
      seconds: 'second',
      secs: 'second',
      minutes: 'minute',
      mins: 'minute',
      hours: 'hour',
      hr: 'hour',
      hrs: 'hour',
      days: 'day',
      hertz: 'hertz',
      radians: 'rad',
      degree: 'deg',
      degrees: 'deg',
      gradian: 'grad',
      gradians: 'grad',
      cycles: 'cycle',
      arcsecond: 'arcsec',
      arcseconds: 'arcsec',
      arcminute: 'arcmin',
      arcminutes: 'arcmin',
      BTUs: 'BTU',
      watts: 'watt',
      joules: 'joule',
      amperes: 'ampere',
      coulombs: 'coulomb',
      volts: 'volt',
      ohms: 'ohm',
      farads: 'farad',
      webers: 'weber',
      teslas: 'tesla',
      electronvolts: 'electronvolt',
      moles: 'mole'
    };
    function calculateAngleValues(config) {
      if (config.number === 'BigNumber') {
        var pi = constants.pi(type.BigNumber);
        UNITS.rad.value = new type.BigNumber(1);
        UNITS.deg.value = pi.div(180);
        UNITS.grad.value = pi.div(200);
        UNITS.cycle.value = pi.times(2);
        UNITS.arcsec.value = pi.div(648000);
        UNITS.arcmin.value = pi.div(10800);
      } else {
        UNITS.rad.value = 1;
        UNITS.deg.value = Math.PI / 180;
        UNITS.grad.value = Math.PI / 200;
        UNITS.cycle.value = Math.PI * 2;
        UNITS.arcsec.value = Math.PI / 648000;
        UNITS.arcmin.value = Math.PI / 10800;
      }
    }
    calculateAngleValues(config);
    math.on('config', function(curr, prev) {
      if (curr.number !== prev.number) {
        calculateAngleValues(curr);
      }
    });
    var UNIT_SYSTEMS = {si: {
        NONE: {
          unit: UNIT_NONE,
          prefix: PREFIXES.NONE['']
        },
        LENGTH: {
          unit: UNITS.m,
          prefix: PREFIXES.SHORT['']
        },
        MASS: {
          unit: UNITS.g,
          prefix: PREFIXES.SHORT['k']
        },
        TIME: {
          unit: UNITS.s,
          prefix: PREFIXES.SHORT['']
        },
        CURRENT: {
          unit: UNITS.A,
          prefix: PREFIXES.SHORT['']
        },
        TEMPERATURE: {
          unit: UNITS.K,
          prefix: PREFIXES.SHORT['']
        },
        LUMINOUS_INTENSITY: {
          unit: UNITS.cd,
          prefix: PREFIXES.SHORT['']
        },
        AMOUNT_OF_SUBSTANCE: {
          unit: UNITS.mol,
          prefix: PREFIXES.SHORT['']
        },
        ANGLE: {
          unit: UNITS.rad,
          prefix: PREFIXES.SHORT['']
        },
        BIT: {
          unit: UNITS.bit,
          prefix: PREFIXES.SHORT['']
        },
        FORCE: {
          unit: UNITS.N,
          prefix: PREFIXES.SHORT['']
        },
        ENERGY: {
          unit: UNITS.J,
          prefix: PREFIXES.SHORT['']
        },
        POWER: {
          unit: UNITS.W,
          prefix: PREFIXES.SHORT['']
        },
        PRESSURE: {
          unit: UNITS.Pa,
          prefix: PREFIXES.SHORT['']
        },
        ELECTRIC_CHARGE: {
          unit: UNITS.C,
          prefix: PREFIXES.SHORT['']
        },
        ELECTRIC_CAPACITANCE: {
          unit: UNITS.F,
          prefix: PREFIXES.SHORT['']
        },
        ELECTRIC_POTENTIAL: {
          unit: UNITS.V,
          prefix: PREFIXES.SHORT['']
        },
        ELECTRIC_RESISTANCE: {
          unit: UNITS.ohm,
          prefix: PREFIXES.SHORT['']
        },
        ELECTRIC_INDUCTANCE: {
          unit: UNITS.H,
          prefix: PREFIXES.SHORT['']
        },
        ELECTRIC_CONDUCTANCE: {
          unit: UNITS.S,
          prefix: PREFIXES.SHORT['']
        },
        MAGNETIC_FLUX: {
          unit: UNITS.Wb,
          prefix: PREFIXES.SHORT['']
        },
        MAGNETIC_FLUX_DENSITY: {
          unit: UNITS.T,
          prefix: PREFIXES.SHORT['']
        },
        FREQUENCY: {
          unit: UNITS.Hz,
          prefix: PREFIXES.SHORT['']
        }
      }};
    UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
    UNIT_SYSTEMS.cgs.LENGTH = {
      unit: UNITS.m,
      prefix: PREFIXES.SHORT['c']
    };
    UNIT_SYSTEMS.cgs.MASS = {
      unit: UNITS.g,
      prefix: PREFIXES.SHORT['']
    };
    UNIT_SYSTEMS.cgs.FORCE = {
      unit: UNITS.dyn,
      prefix: PREFIXES.SHORT['']
    };
    UNIT_SYSTEMS.cgs.ENERGY = {
      unit: UNITS.erg,
      prefix: PREFIXES.NONE['']
    };
    UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
    UNIT_SYSTEMS.us.LENGTH = {
      unit: UNITS.ft,
      prefix: PREFIXES.NONE['']
    };
    UNIT_SYSTEMS.us.MASS = {
      unit: UNITS.lbm,
      prefix: PREFIXES.NONE['']
    };
    UNIT_SYSTEMS.us.TEMPERATURE = {
      unit: UNITS.degF,
      prefix: PREFIXES.NONE['']
    };
    UNIT_SYSTEMS.us.FORCE = {
      unit: UNITS.lbf,
      prefix: PREFIXES.NONE['']
    };
    UNIT_SYSTEMS.us.ENERGY = {
      unit: UNITS.BTU,
      prefix: PREFIXES.BTU['']
    };
    UNIT_SYSTEMS.us.POWER = {
      unit: UNITS.hp,
      prefix: PREFIXES.NONE['']
    };
    UNIT_SYSTEMS.us.PRESSURE = {
      unit: UNITS.psi,
      prefix: PREFIXES.NONE['']
    };
    UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
    var currentUnitSystem = UNIT_SYSTEMS.auto;
    Unit.setUnitSystem = function(name) {
      if (UNIT_SYSTEMS.hasOwnProperty(name)) {
        currentUnitSystem = UNIT_SYSTEMS[name];
      } else {
        throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));
      }
    };
    Unit.getUnitSystem = function() {
      for (var key in UNIT_SYSTEMS) {
        if (UNIT_SYSTEMS[key] === currentUnitSystem) {
          return key;
        }
      }
    };
    Unit.typeConverters = {
      BigNumber: function(x) {
        return new type.BigNumber(x + '');
      },
      Fraction: function(x) {
        return new type.Fraction(x);
      },
      Complex: function(x) {
        return x;
      },
      number: function(x) {
        return x;
      }
    };
    Unit._getNumberConverter = function(type) {
      if (!Unit.typeConverters[type]) {
        throw new TypeError('Unsupported type "' + type + '"');
      }
      return Unit.typeConverters[type];
    };
    for (var key in UNITS) {
      var unit = UNITS[key];
      unit.dimensions = unit.base.dimensions;
    }
    for (var name in ALIASES) {
      if (ALIASES.hasOwnProperty(name)) {
        var unit = UNITS[ALIASES[name]];
        var alias = Object.create(unit);
        alias.name = name;
        UNITS[name] = alias;
      }
    }
    Unit.PREFIXES = PREFIXES;
    Unit.BASE_UNITS = BASE_UNITS;
    Unit.UNITS = UNITS;
    Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;
    return Unit;
  }
  exports.name = 'Unit';
  exports.path = 'type';
  exports.factory = factory;
  exports.math = true;
  return module.exports;
});

$__System.registerDynamic("19e", ["b5", "199", "d4", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var latex = $__require('b5');
  function factory(type, config, load, typed, math) {
    var Node = load($__require('199'));
    var Unit = load($__require('d4'));
    function SymbolNode(name) {
      if (!(this instanceof SymbolNode)) {
        throw new SyntaxError('Constructor must be called with the new operator');
      }
      if (typeof name !== 'string')
        throw new TypeError('String expected for parameter "name"');
      this.name = name;
    }
    SymbolNode.prototype = new Node();
    SymbolNode.prototype.type = 'SymbolNode';
    SymbolNode.prototype.isSymbolNode = true;
    SymbolNode.prototype._compile = function(defs, args) {
      defs['undef'] = undef;
      defs['Unit'] = Unit;
      if (args[this.name]) {
        return this.name;
      } else if (this.name in defs.math) {
        return '("' + this.name + '" in scope ? scope["' + this.name + '"] : math["' + this.name + '"])';
      } else {
        return '(' + '"' + this.name + '" in scope ? scope["' + this.name + '"] : ' + (Unit.isValuelessUnit(this.name) ? 'new Unit(null, "' + this.name + '")' : 'undef("' + this.name + '")') + ')';
      }
    };
    SymbolNode.prototype.forEach = function(callback) {};
    SymbolNode.prototype.map = function(callback) {
      return this.clone();
    };
    function undef(name) {
      throw new Error('Undefined symbol ' + name);
    }
    SymbolNode.prototype.clone = function() {
      return new SymbolNode(this.name);
    };
    SymbolNode.prototype._toString = function(options) {
      return this.name;
    };
    SymbolNode.prototype._toTex = function(options) {
      var isUnit = false;
      if ((typeof math[this.name] === 'undefined') && Unit.isValuelessUnit(this.name)) {
        isUnit = true;
      }
      var symbol = latex.toSymbol(this.name, isUnit);
      if (symbol[0] === '\\') {
        return symbol;
      }
      return ' ' + symbol;
    };
    return SymbolNode;
  }
  exports.name = 'SymbolNode';
  exports.path = 'expression.node';
  exports.math = true;
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("dc", ["a5", "ad", "190", "191", "192", "193", "194", "195", "197", "196", "19a", "19b", "19c", "198", "19d", "19e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ArgumentsError = $__require('a5');
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var AccessorNode = load($__require('190'));
    var ArrayNode = load($__require('191'));
    var AssignmentNode = load($__require('192'));
    var BlockNode = load($__require('193'));
    var ConditionalNode = load($__require('194'));
    var ConstantNode = load($__require('195'));
    var FunctionAssignmentNode = load($__require('197'));
    var IndexNode = load($__require('196'));
    var ObjectNode = load($__require('19a'));
    var OperatorNode = load($__require('19b'));
    var ParenthesisNode = load($__require('19c'));
    var FunctionNode = load($__require('198'));
    var RangeNode = load($__require('19d'));
    var SymbolNode = load($__require('19e'));
    function parse(expr, options) {
      if (arguments.length != 1 && arguments.length != 2) {
        throw new ArgumentsError('parse', arguments.length, 1, 2);
      }
      extra_nodes = (options && options.nodes) ? options.nodes : {};
      if (typeof expr === 'string') {
        expression = expr;
        return parseStart();
      } else if (Array.isArray(expr) || expr instanceof type.Matrix) {
        return deepMap(expr, function(elem) {
          if (typeof elem !== 'string')
            throw new TypeError('String expected');
          expression = elem;
          return parseStart();
        });
      } else {
        throw new TypeError('String or matrix expected');
      }
    }
    var TOKENTYPE = {
      NULL: 0,
      DELIMITER: 1,
      NUMBER: 2,
      SYMBOL: 3,
      UNKNOWN: 4
    };
    var DELIMITERS = {
      ',': true,
      '(': true,
      ')': true,
      '[': true,
      ']': true,
      '{': true,
      '}': true,
      '\"': true,
      ';': true,
      '+': true,
      '-': true,
      '*': true,
      '.*': true,
      '/': true,
      './': true,
      '%': true,
      '^': true,
      '.^': true,
      '~': true,
      '!': true,
      '&': true,
      '|': true,
      '^|': true,
      '\'': true,
      '=': true,
      ':': true,
      '?': true,
      '==': true,
      '!=': true,
      '<': true,
      '>': true,
      '<=': true,
      '>=': true,
      '<<': true,
      '>>': true,
      '>>>': true
    };
    var NAMED_DELIMITERS = {
      'mod': true,
      'to': true,
      'in': true,
      'and': true,
      'xor': true,
      'or': true,
      'not': true
    };
    var extra_nodes = {};
    var expression = '';
    var index = 0;
    var c = '';
    var token = '';
    var token_type = TOKENTYPE.NULL;
    var nesting_level = 0;
    var conditional_level = null;
    function first() {
      index = 0;
      c = expression.charAt(0);
      nesting_level = 0;
      conditional_level = null;
    }
    function next() {
      index++;
      c = expression.charAt(index);
    }
    function nextPreview() {
      return expression.charAt(index + 1);
    }
    function nextNextPreview() {
      return expression.charAt(index + 2);
    }
    function getToken() {
      token_type = TOKENTYPE.NULL;
      token = '';
      while (c == ' ' || c == '\t' || (c == '\n' && nesting_level)) {
        next();
      }
      if (c == '#') {
        while (c != '\n' && c != '') {
          next();
        }
      }
      if (c == '') {
        token_type = TOKENTYPE.DELIMITER;
        return;
      }
      if (c == '\n' && !nesting_level) {
        token_type = TOKENTYPE.DELIMITER;
        token = c;
        next();
        return;
      }
      var c2 = c + nextPreview();
      var c3 = c2 + nextNextPreview();
      if (c3.length == 3 && DELIMITERS[c3]) {
        token_type = TOKENTYPE.DELIMITER;
        token = c3;
        next();
        next();
        next();
        return;
      }
      if (c2.length == 2 && DELIMITERS[c2]) {
        token_type = TOKENTYPE.DELIMITER;
        token = c2;
        next();
        next();
        return;
      }
      if (DELIMITERS[c]) {
        token_type = TOKENTYPE.DELIMITER;
        token = c;
        next();
        return;
      }
      if (isDigitDot(c)) {
        token_type = TOKENTYPE.NUMBER;
        if (c == '.') {
          token += c;
          next();
          if (!isDigit(c)) {
            token_type = TOKENTYPE.UNKNOWN;
          }
        } else {
          while (isDigit(c)) {
            token += c;
            next();
          }
          if (c == '.') {
            token += c;
            next();
          }
        }
        while (isDigit(c)) {
          token += c;
          next();
        }
        c2 = nextPreview();
        if ((c == 'E' || c == 'e') && (isDigit(c2) || c2 == '-' || c2 == '+')) {
          token += c;
          next();
          if (c == '+' || c == '-') {
            token += c;
            next();
          }
          if (!isDigit(c)) {
            token_type = TOKENTYPE.UNKNOWN;
          }
          while (isDigit(c)) {
            token += c;
            next();
          }
        }
        return;
      }
      if (currentIsAlpha()) {
        while (currentIsAlpha() || isDigit(c)) {
          token += c;
          next();
        }
        if (NAMED_DELIMITERS.hasOwnProperty(token)) {
          token_type = TOKENTYPE.DELIMITER;
        } else {
          token_type = TOKENTYPE.SYMBOL;
        }
        return;
      }
      token_type = TOKENTYPE.UNKNOWN;
      while (c != '') {
        token += c;
        next();
      }
      throw createSyntaxError('Syntax error in part "' + token + '"');
    }
    function getTokenSkipNewline() {
      do {
        getToken();
      } while (token == '\n');
    }
    function openParams() {
      nesting_level++;
    }
    function closeParams() {
      nesting_level--;
    }
    function currentIsAlpha() {
      var cPrev = expression.charAt(index - 1);
      var cNext = expression.charAt(index + 1);
      var isValidLatinOrGreek = function(p) {
        return /^[a-zA-Z_\u00C0-\u02AF\u0370-\u03FF]$/.test(p);
      };
      var isValidMathSymbol = function(high, low) {
        return /^[\uD835]$/.test(high) && /^[\uDC00-\uDFFF]$/.test(low) && /^[^\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]$/.test(low);
      };
      return isValidLatinOrGreek(c) || isValidMathSymbol(c, cNext) || isValidMathSymbol(cPrev, c);
    }
    function isDigitDot(c) {
      return ((c >= '0' && c <= '9') || c == '.');
    }
    function isDigit(c) {
      return (c >= '0' && c <= '9');
    }
    function parseStart() {
      first();
      getToken();
      var node = parseBlock();
      if (token != '') {
        if (token_type == TOKENTYPE.DELIMITER) {
          throw createError('Unexpected operator ' + token);
        } else {
          throw createSyntaxError('Unexpected part "' + token + '"');
        }
      }
      return node;
    }
    function parseBlock() {
      var node;
      var blocks = [];
      var visible;
      if (token == '') {
        return new ConstantNode('undefined', 'undefined');
      }
      if (token != '\n' && token != ';') {
        node = parseAssignment();
      }
      while (token == '\n' || token == ';') {
        if (blocks.length == 0 && node) {
          visible = (token != ';');
          blocks.push({
            node: node,
            visible: visible
          });
        }
        getToken();
        if (token != '\n' && token != ';' && token != '') {
          node = parseAssignment();
          visible = (token != ';');
          blocks.push({
            node: node,
            visible: visible
          });
        }
      }
      if (blocks.length > 0) {
        return new BlockNode(blocks);
      } else {
        return node;
      }
    }
    function parseAssignment() {
      var name,
          args,
          value,
          valid;
      var node = parseConditional();
      if (token == '=') {
        if (node && node.isSymbolNode) {
          name = node.name;
          getTokenSkipNewline();
          value = parseAssignment();
          return new AssignmentNode(new SymbolNode(name), value);
        } else if (node && node.isAccessorNode) {
          getTokenSkipNewline();
          value = parseAssignment();
          return new AssignmentNode(node.object, node.index, value);
        } else if (node && node.isFunctionNode) {
          valid = true;
          args = [];
          name = node.name;
          node.args.forEach(function(arg, index) {
            if (arg && arg.isSymbolNode) {
              args[index] = arg.name;
            } else {
              valid = false;
            }
          });
          if (valid) {
            getTokenSkipNewline();
            value = parseAssignment();
            return new FunctionAssignmentNode(name, args, value);
          }
        }
        throw createSyntaxError('Invalid left hand side of assignment operator =');
      }
      return node;
    }
    function parseConditional() {
      var node = parseLogicalOr();
      while (token == '?') {
        var prev = conditional_level;
        conditional_level = nesting_level;
        getTokenSkipNewline();
        var condition = node;
        var trueExpr = parseAssignment();
        if (token != ':')
          throw createSyntaxError('False part of conditional expression expected');
        conditional_level = null;
        getTokenSkipNewline();
        var falseExpr = parseAssignment();
        node = new ConditionalNode(condition, trueExpr, falseExpr);
        conditional_level = prev;
      }
      return node;
    }
    function parseLogicalOr() {
      var node = parseLogicalXor();
      while (token == 'or') {
        getTokenSkipNewline();
        node = new OperatorNode('or', 'or', [node, parseLogicalXor()]);
      }
      return node;
    }
    function parseLogicalXor() {
      var node = parseLogicalAnd();
      while (token == 'xor') {
        getTokenSkipNewline();
        node = new OperatorNode('xor', 'xor', [node, parseLogicalAnd()]);
      }
      return node;
    }
    function parseLogicalAnd() {
      var node = parseBitwiseOr();
      while (token == 'and') {
        getTokenSkipNewline();
        node = new OperatorNode('and', 'and', [node, parseBitwiseOr()]);
      }
      return node;
    }
    function parseBitwiseOr() {
      var node = parseBitwiseXor();
      while (token == '|') {
        getTokenSkipNewline();
        node = new OperatorNode('|', 'bitOr', [node, parseBitwiseXor()]);
      }
      return node;
    }
    function parseBitwiseXor() {
      var node = parseBitwiseAnd();
      while (token == '^|') {
        getTokenSkipNewline();
        node = new OperatorNode('^|', 'bitXor', [node, parseBitwiseAnd()]);
      }
      return node;
    }
    function parseBitwiseAnd() {
      var node = parseRelational();
      while (token == '&') {
        getTokenSkipNewline();
        node = new OperatorNode('&', 'bitAnd', [node, parseRelational()]);
      }
      return node;
    }
    function parseRelational() {
      var node,
          operators,
          name,
          fn,
          params;
      node = parseShift();
      operators = {
        '==': 'equal',
        '!=': 'unequal',
        '<': 'smaller',
        '>': 'larger',
        '<=': 'smallerEq',
        '>=': 'largerEq'
      };
      while (token in operators) {
        name = token;
        fn = operators[name];
        getTokenSkipNewline();
        params = [node, parseShift()];
        node = new OperatorNode(name, fn, params);
      }
      return node;
    }
    function parseShift() {
      var node,
          operators,
          name,
          fn,
          params;
      node = parseConversion();
      operators = {
        '<<': 'leftShift',
        '>>': 'rightArithShift',
        '>>>': 'rightLogShift'
      };
      while (token in operators) {
        name = token;
        fn = operators[name];
        getTokenSkipNewline();
        params = [node, parseConversion()];
        node = new OperatorNode(name, fn, params);
      }
      return node;
    }
    function parseConversion() {
      var node,
          operators,
          name,
          fn,
          params;
      node = parseRange();
      operators = {
        'to': 'to',
        'in': 'to'
      };
      while (token in operators) {
        name = token;
        fn = operators[name];
        getTokenSkipNewline();
        params = [node, parseRange()];
        node = new OperatorNode(name, fn, params);
      }
      return node;
    }
    function parseRange() {
      var node,
          params = [];
      if (token == ':') {
        node = new ConstantNode('1', 'number');
      } else {
        node = parseAddSubtract();
      }
      if (token == ':' && (conditional_level !== nesting_level)) {
        params.push(node);
        while (token == ':' && params.length < 3) {
          getTokenSkipNewline();
          if (token == ')' || token == ']' || token == ',' || token == '') {
            params.push(new SymbolNode('end'));
          } else {
            params.push(parseAddSubtract());
          }
        }
        if (params.length == 3) {
          node = new RangeNode(params[0], params[2], params[1]);
        } else {
          node = new RangeNode(params[0], params[1]);
        }
      }
      return node;
    }
    function parseAddSubtract() {
      var node,
          operators,
          name,
          fn,
          params;
      node = parseMultiplyDivide();
      operators = {
        '+': 'add',
        '-': 'subtract'
      };
      while (token in operators) {
        name = token;
        fn = operators[name];
        getTokenSkipNewline();
        params = [node, parseMultiplyDivide()];
        node = new OperatorNode(name, fn, params);
      }
      return node;
    }
    function parseMultiplyDivide() {
      var node,
          last,
          operators,
          name,
          fn;
      node = parseUnary();
      last = node;
      operators = {
        '*': 'multiply',
        '.*': 'dotMultiply',
        '/': 'divide',
        './': 'dotDivide',
        '%': 'mod',
        'mod': 'mod'
      };
      while (true) {
        if (token in operators) {
          name = token;
          fn = operators[name];
          getTokenSkipNewline();
          last = parseUnary();
          node = new OperatorNode(name, fn, [node, last]);
        } else if ((token_type == TOKENTYPE.SYMBOL) || (token == 'in' && (node && node.isConstantNode)) || (token_type == TOKENTYPE.NUMBER && !last.isConstantNode) || (token == '(')) {
          last = parseUnary();
          node = new OperatorNode('*', 'multiply', [node, last], true);
        } else {
          break;
        }
      }
      return node;
    }
    function parseUnary() {
      var name,
          params;
      var fn = {
        '-': 'unaryMinus',
        '+': 'unaryPlus',
        '~': 'bitNot',
        'not': 'not'
      }[token];
      if (fn) {
        name = token;
        getTokenSkipNewline();
        params = [parseUnary()];
        return new OperatorNode(name, fn, params);
      }
      return parsePow();
    }
    function parsePow() {
      var node,
          name,
          fn,
          params;
      node = parseLeftHandOperators();
      if (token == '^' || token == '.^') {
        name = token;
        fn = (name == '^') ? 'pow' : 'dotPow';
        getTokenSkipNewline();
        params = [node, parseUnary()];
        node = new OperatorNode(name, fn, params);
      }
      return node;
    }
    function parseLeftHandOperators() {
      var node,
          operators,
          name,
          fn,
          params;
      node = parseCustomNodes();
      operators = {
        '!': 'factorial',
        '\'': 'transpose'
      };
      while (token in operators) {
        name = token;
        fn = operators[name];
        getToken();
        params = [node];
        node = new OperatorNode(name, fn, params);
        node = parseAccessors(node);
      }
      return node;
    }
    function parseCustomNodes() {
      var params = [],
          handler;
      if (token_type == TOKENTYPE.SYMBOL && extra_nodes[token]) {
        handler = extra_nodes[token];
        getToken();
        if (token == '(') {
          params = [];
          openParams();
          getToken();
          if (token != ')') {
            params.push(parseAssignment());
            while (token == ',') {
              getToken();
              params.push(parseAssignment());
            }
          }
          if (token != ')') {
            throw createSyntaxError('Parenthesis ) expected');
          }
          closeParams();
          getToken();
        }
        return new handler(params);
      }
      return parseSymbol();
    }
    function parseSymbol() {
      var node,
          name;
      if (token_type == TOKENTYPE.SYMBOL || (token_type == TOKENTYPE.DELIMITER && token in NAMED_DELIMITERS)) {
        name = token;
        getToken();
        node = new SymbolNode(name);
        node = parseAccessors(node);
        return node;
      }
      return parseString();
    }
    function parseAccessors(node, types) {
      var params;
      while ((token == '(' || token == '[' || token == '.') && (!types || types.indexOf(token) !== -1)) {
        params = [];
        if (token == '(') {
          if (node.isSymbolNode || node.isAccessorNode) {
            openParams();
            getToken();
            if (token != ')') {
              params.push(parseAssignment());
              while (token == ',') {
                getToken();
                params.push(parseAssignment());
              }
            }
            if (token != ')') {
              throw createSyntaxError('Parenthesis ) expected');
            }
            closeParams();
            getToken();
            node = new FunctionNode(node, params);
          } else {
            node = new OperatorNode('*', 'multiply', [node, parseAssignment()], true);
          }
        } else if (token == '[') {
          openParams();
          getToken();
          if (token != ']') {
            params.push(parseAssignment());
            while (token == ',') {
              getToken();
              params.push(parseAssignment());
            }
          }
          if (token != ']') {
            throw createSyntaxError('Parenthesis ] expected');
          }
          closeParams();
          getToken();
          node = new AccessorNode(node, new IndexNode(params));
        } else {
          getToken();
          if (token_type != TOKENTYPE.SYMBOL) {
            throw createSyntaxError('Property name expected after dot');
          }
          params.push(new ConstantNode(token));
          getToken();
          var dotNotation = true;
          node = new AccessorNode(node, new IndexNode(params, dotNotation));
        }
      }
      return node;
    }
    function parseString() {
      var node,
          str;
      if (token == '"') {
        str = parseStringToken();
        node = new ConstantNode(str, 'string');
        node = parseAccessors(node);
        return node;
      }
      return parseMatrix();
    }
    function parseStringToken() {
      var str = '';
      var tPrev = '';
      while (c != '' && (c != '\"' || tPrev == '\\')) {
        str += c;
        tPrev = c;
        next();
      }
      getToken();
      if (token != '"') {
        throw createSyntaxError('End of string " expected');
      }
      getToken();
      return str;
    }
    function parseMatrix() {
      var array,
          params,
          rows,
          cols;
      if (token == '[') {
        openParams();
        getToken();
        if (token != ']') {
          var row = parseRow();
          if (token == ';') {
            rows = 1;
            params = [row];
            while (token == ';') {
              getToken();
              params[rows] = parseRow();
              rows++;
            }
            if (token != ']') {
              throw createSyntaxError('End of matrix ] expected');
            }
            closeParams();
            getToken();
            cols = params[0].items.length;
            for (var r = 1; r < rows; r++) {
              if (params[r].items.length != cols) {
                throw createError('Column dimensions mismatch ' + '(' + params[r].items.length + ' != ' + cols + ')');
              }
            }
            array = new ArrayNode(params);
          } else {
            if (token != ']') {
              throw createSyntaxError('End of matrix ] expected');
            }
            closeParams();
            getToken();
            array = row;
          }
        } else {
          closeParams();
          getToken();
          array = new ArrayNode([]);
        }
        return parseAccessors(array);
      }
      return parseObject();
    }
    function parseRow() {
      var params = [parseAssignment()];
      var len = 1;
      while (token == ',') {
        getToken();
        params[len] = parseAssignment();
        len++;
      }
      return new ArrayNode(params);
    }
    function parseObject() {
      if (token == '{') {
        var key;
        var properties = {};
        do {
          getToken();
          if (token != '}') {
            if (token == '"') {
              key = parseStringToken();
            } else if (token_type == TOKENTYPE.SYMBOL) {
              key = token;
              getToken();
            } else {
              throw createSyntaxError('Symbol or string expected as object key');
            }
            if (token != ':') {
              throw createSyntaxError('Colon : expected after object key');
            }
            getToken();
            properties[key] = parseAssignment();
          }
        } while (token == ',');
        if (token != '}') {
          throw createSyntaxError('Comma , or bracket } expected after object value');
        }
        getToken();
        var node = new ObjectNode(properties);
        node = parseAccessors(node);
        return node;
      }
      return parseNumber();
    }
    function parseNumber() {
      var number;
      if (token_type == TOKENTYPE.NUMBER) {
        number = token;
        getToken();
        return new ConstantNode(number, 'number');
      }
      return parseParentheses();
    }
    function parseParentheses() {
      var node;
      if (token == '(') {
        openParams();
        getToken();
        node = parseAssignment();
        if (token != ')') {
          throw createSyntaxError('Parenthesis ) expected');
        }
        closeParams();
        getToken();
        node = new ParenthesisNode(node);
        node = parseAccessors(node);
        return node;
      }
      return parseEnd();
    }
    function parseEnd() {
      if (token == '') {
        throw createSyntaxError('Unexpected end of expression');
      } else {
        throw createSyntaxError('Value expected');
      }
    }
    function col() {
      return index - token.length + 1;
    }
    function createSyntaxError(message) {
      var c = col();
      var error = new SyntaxError(message + ' (char ' + c + ')');
      error['char'] = c;
      return error;
    }
    function createError(message) {
      var c = col();
      var error = new SyntaxError(message + ' (char ' + c + ')');
      error['char'] = c;
      return error;
    }
    return parse;
  }
  ;
  exports.name = 'parse';
  exports.path = 'expression';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1b5", ["dc", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed, math) {
    var _parse = load($__require('dc'));
    function Parser() {
      if (!(this instanceof Parser)) {
        throw new SyntaxError('Constructor must be called with the new operator');
      }
      this.scope = {};
    }
    Parser.prototype.type = 'Parser';
    Parser.prototype.isParser = true;
    Parser.prototype.parse = function(expr) {
      throw new Error('Parser.parse is deprecated. Use math.parse instead.');
    };
    Parser.prototype.compile = function(expr) {
      throw new Error('Parser.compile is deprecated. Use math.compile instead.');
    };
    Parser.prototype.eval = function(expr) {
      return _parse(expr).compile().eval(this.scope);
    };
    Parser.prototype.get = function(name) {
      return this.scope[name];
    };
    Parser.prototype.set = function(name, value) {
      return this.scope[name] = value;
    };
    Parser.prototype.remove = function(name) {
      delete this.scope[name];
    };
    Parser.prototype.clear = function() {
      for (var name in this.scope) {
        if (this.scope.hasOwnProperty(name)) {
          delete this.scope[name];
        }
      }
    };
    return Parser;
  }
  exports.name = 'Parser';
  exports.path = 'expression';
  exports.factory = factory;
  exports.math = true;
  return module.exports;
});

$__System.registerDynamic("1c9", ["189", "18c", "18f", "1b4", "1b6", "dc", "1b5", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = [$__require('189'), $__require('18c'), $__require('18f'), $__require('1b4'), $__require('1b6'), $__require('dc'), $__require('1b5')];
  return module.exports;
});

$__System.registerDynamic("1ca", ["bd", "cd", "1c4", "1bf", "1c2", "1c1", "1c0", "c5", "c0", "1cb", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var util = $__require('bd');
  var object = util.object;
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var abs = load($__require('1c4'));
    var addScalar = load($__require('1bf'));
    var divideScalar = load($__require('1c2'));
    var multiplyScalar = load($__require('1c1'));
    var subtract = load($__require('1c0'));
    var larger = load($__require('c5'));
    var equalScalar = load($__require('c0'));
    var unaryMinus = load($__require('1cb'));
    var SparseMatrix = type.SparseMatrix;
    var DenseMatrix = type.DenseMatrix;
    var Spa = type.Spa;
    var lup = typed('lup', {
      'DenseMatrix': function(m) {
        return _denseLUP(m);
      },
      'SparseMatrix': function(m) {
        return _sparseLUP(m);
      },
      'Array': function(a) {
        var m = matrix(a);
        var r = _denseLUP(m);
        return {
          L: r.L.valueOf(),
          U: r.U.valueOf(),
          p: r.p
        };
      }
    });
    var _denseLUP = function(m) {
      var rows = m._size[0];
      var columns = m._size[1];
      var n = Math.min(rows, columns);
      var data = object.clone(m._data);
      var ldata = [];
      var lsize = [rows, n];
      var udata = [];
      var usize = [n, columns];
      var i,
          j,
          k;
      var p = [];
      for (i = 0; i < rows; i++)
        p[i] = i;
      for (j = 0; j < columns; j++) {
        if (j > 0) {
          for (i = 0; i < rows; i++) {
            var min = Math.min(i, j);
            var s = 0;
            for (k = 0; k < min; k++) {
              s = addScalar(s, multiplyScalar(data[i][k], data[k][j]));
            }
            data[i][j] = subtract(data[i][j], s);
          }
        }
        var pi = j;
        var pabsv = 0;
        var vjj = 0;
        for (i = j; i < rows; i++) {
          var v = data[i][j];
          var absv = abs(v);
          if (larger(absv, pabsv)) {
            pi = i;
            pabsv = absv;
            vjj = v;
          }
        }
        if (j !== pi) {
          p[j] = [p[pi], p[pi] = p[j]][0];
          DenseMatrix._swapRows(j, pi, data);
        }
        if (j < rows) {
          for (i = j + 1; i < rows; i++) {
            var vij = data[i][j];
            if (!equalScalar(vij, 0)) {
              data[i][j] = divideScalar(data[i][j], vjj);
            }
          }
        }
      }
      for (j = 0; j < columns; j++) {
        for (i = 0; i < rows; i++) {
          if (j === 0) {
            if (i < columns) {
              udata[i] = [];
            }
            ldata[i] = [];
          }
          if (i < j) {
            if (i < columns) {
              udata[i][j] = data[i][j];
            }
            if (j < rows) {
              ldata[i][j] = 0;
            }
            continue;
          }
          if (i === j) {
            if (i < columns) {
              udata[i][j] = data[i][j];
            }
            if (j < rows) {
              ldata[i][j] = 1;
            }
            continue;
          }
          if (i < columns) {
            udata[i][j] = 0;
          }
          if (j < rows) {
            ldata[i][j] = data[i][j];
          }
        }
      }
      var l = new DenseMatrix({
        data: ldata,
        size: lsize
      });
      var u = new DenseMatrix({
        data: udata,
        size: usize
      });
      var pv = [];
      for (i = 0, n = p.length; i < n; i++)
        pv[p[i]] = i;
      return {
        L: l,
        U: u,
        p: pv,
        toString: function() {
          return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
        }
      };
    };
    var _sparseLUP = function(m) {
      var rows = m._size[0];
      var columns = m._size[1];
      var n = Math.min(rows, columns);
      var values = m._values;
      var index = m._index;
      var ptr = m._ptr;
      var lvalues = [];
      var lindex = [];
      var lptr = [];
      var lsize = [rows, n];
      var uvalues = [];
      var uindex = [];
      var uptr = [];
      var usize = [n, columns];
      var i,
          j,
          k;
      var pv_co = [];
      var pv_oc = [];
      for (i = 0; i < rows; i++) {
        pv_co[i] = i;
        pv_oc[i] = i;
      }
      var swapIndeces = function(x, y) {
        var kx = pv_oc[x];
        var ky = pv_oc[y];
        pv_co[kx] = y;
        pv_co[ky] = x;
        pv_oc[x] = ky;
        pv_oc[y] = kx;
      };
      for (j = 0; j < columns; j++) {
        var spa = new Spa();
        if (j < rows) {
          lptr.push(lvalues.length);
          lvalues.push(1);
          lindex.push(j);
        }
        uptr.push(uvalues.length);
        var k0 = ptr[j];
        var k1 = ptr[j + 1];
        for (k = k0; k < k1; k++) {
          i = index[k];
          spa.set(pv_co[i], values[k]);
        }
        if (j > 0) {
          spa.forEach(0, j - 1, function(k, vkj) {
            SparseMatrix._forEachRow(k, lvalues, lindex, lptr, function(i, vik) {
              if (i > k) {
                spa.accumulate(i, unaryMinus(multiplyScalar(vik, vkj)));
              }
            });
          });
        }
        var pi = j;
        var vjj = spa.get(j);
        var pabsv = abs(vjj);
        spa.forEach(j + 1, rows - 1, function(x, v) {
          var absv = abs(v);
          if (larger(absv, pabsv)) {
            pi = x;
            pabsv = absv;
            vjj = v;
          }
        });
        if (j !== pi) {
          SparseMatrix._swapRows(j, pi, lsize[1], lvalues, lindex, lptr);
          SparseMatrix._swapRows(j, pi, usize[1], uvalues, uindex, uptr);
          spa.swap(j, pi);
          swapIndeces(j, pi);
        }
        spa.forEach(0, rows - 1, function(x, v) {
          if (x <= j) {
            uvalues.push(v);
            uindex.push(x);
          } else {
            v = divideScalar(v, vjj);
            if (!equalScalar(v, 0)) {
              lvalues.push(v);
              lindex.push(x);
            }
          }
        });
      }
      uptr.push(uvalues.length);
      lptr.push(lvalues.length);
      return {
        L: new SparseMatrix({
          values: lvalues,
          index: lindex,
          ptr: lptr,
          size: lsize
        }),
        U: new SparseMatrix({
          values: uvalues,
          index: uindex,
          ptr: uptr,
          size: usize
        }),
        p: pv_co,
        toString: function() {
          return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
        }
      };
    };
    return lup;
  }
  exports.name = 'lup';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1cc", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory() {
    var cs_fkeep = function(a, callback, other) {
      var avalues = a._values;
      var aindex = a._index;
      var aptr = a._ptr;
      var asize = a._size;
      var n = asize[1];
      var nz = 0;
      for (var j = 0; j < n; j++) {
        var p = aptr[j];
        aptr[j] = nz;
        for (; p < aptr[j + 1]; p++) {
          if (callback(aindex[p], j, avalues ? avalues[p] : 1, other)) {
            aindex[nz] = aindex[p];
            if (avalues)
              avalues[nz] = avalues[p];
            nz++;
          }
        }
      }
      aptr[n] = nz;
      aindex.splice(nz, aindex.length - nz);
      if (avalues)
        avalues.splice(nz, avalues.length - nz);
      return (nz);
    };
    return cs_fkeep;
  }
  exports.name = 'cs_fkeep';
  exports.path = 'sparse';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1cd", ["1ce", "1cc", "1cf", "c2", "1d0", "1d1", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load) {
    var cs_flip = load($__require('1ce'));
    var cs_fkeep = load($__require('1cc'));
    var cs_tdfs = load($__require('1cf'));
    var add = load($__require('c2'));
    var multiply = load($__require('1d0'));
    var transpose = load($__require('1d1'));
    var cs_amd = function(order, a) {
      if (!a || order <= 0 || order > 3)
        return null;
      var asize = a._size;
      var m = asize[0];
      var n = asize[1];
      var lemax = 0;
      var dense = Math.max(16, 10 * Math.sqrt(n));
      dense = Math.min(n - 2, dense);
      var cm = _createTargetMatrix(order, a, m, n, dense);
      cs_fkeep(cm, _diag, null);
      var cindex = cm._index;
      var cptr = cm._ptr;
      var cnz = cptr[n];
      var P = [];
      var W = [];
      var len = 0;
      var nv = n + 1;
      var next = 2 * (n + 1);
      var head = 3 * (n + 1);
      var elen = 4 * (n + 1);
      var degree = 5 * (n + 1);
      var w = 6 * (n + 1);
      var hhead = 7 * (n + 1);
      var last = P;
      var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree);
      var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next);
      var mindeg = 0;
      var i,
          j,
          k,
          k1,
          k2,
          e,
          pj,
          ln,
          nvi,
          pk,
          eln,
          p1,
          p2,
          pn,
          h,
          d;
      while (nel < n) {
        for (k = -1; mindeg < n && (k = W[head + mindeg]) == -1; mindeg++)
          ;
        if (W[next + k] != -1)
          last[W[next + k]] = -1;
        W[head + mindeg] = W[next + k];
        var elenk = W[elen + k];
        var nvk = W[nv + k];
        nel += nvk;
        var dk = 0;
        W[nv + k] = -nvk;
        var p = cptr[k];
        var pk1 = (elenk === 0) ? p : cnz;
        var pk2 = pk1;
        for (k1 = 1; k1 <= elenk + 1; k1++) {
          if (k1 > elenk) {
            e = k;
            pj = p;
            ln = W[len + k] - elenk;
          } else {
            e = cindex[p++];
            pj = cptr[e];
            ln = W[len + e];
          }
          for (k2 = 1; k2 <= ln; k2++) {
            i = cindex[pj++];
            if ((nvi = W[nv + i]) <= 0)
              continue;
            dk += nvi;
            W[nv + i] = -nvi;
            cindex[pk2++] = i;
            if (W[next + i] != -1)
              last[W[next + i]] = last[i];
            if (last[i] != -1)
              W[next + last[i]] = W[next + i];
            else
              W[head + W[degree + i]] = W[next + i];
          }
          if (e != k) {
            cptr[e] = cs_flip(k);
            W[w + e] = 0;
          }
        }
        if (elenk !== 0)
          cnz = pk2;
        W[degree + k] = dk;
        cptr[k] = pk1;
        W[len + k] = pk2 - pk1;
        W[elen + k] = -2;
        mark = _wclear(mark, lemax, W, w, n);
        for (pk = pk1; pk < pk2; pk++) {
          i = cindex[pk];
          if ((eln = W[elen + i]) <= 0)
            continue;
          nvi = -W[nv + i];
          var wnvi = mark - nvi;
          for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {
            e = cindex[p];
            if (W[w + e] >= mark) {
              W[w + e] -= nvi;
            } else if (W[w + e] !== 0) {
              W[w + e] = W[degree + e] + wnvi;
            }
          }
        }
        for (pk = pk1; pk < pk2; pk++) {
          i = cindex[pk];
          p1 = cptr[i];
          p2 = p1 + W[elen + i] - 1;
          pn = p1;
          for (h = 0, d = 0, p = p1; p <= p2; p++) {
            e = cindex[p];
            if (W[w + e] !== 0) {
              var dext = W[w + e] - mark;
              if (dext > 0) {
                d += dext;
                cindex[pn++] = e;
                h += e;
              } else {
                cptr[e] = cs_flip(k);
                W[w + e] = 0;
              }
            }
          }
          W[elen + i] = pn - p1 + 1;
          var p3 = pn;
          var p4 = p1 + W[len + i];
          for (p = p2 + 1; p < p4; p++) {
            j = cindex[p];
            var nvj = W[nv + j];
            if (nvj <= 0)
              continue;
            d += nvj;
            cindex[pn++] = j;
            h += j;
          }
          if (d === 0) {
            cptr[i] = cs_flip(k);
            nvi = -W[nv + i];
            dk -= nvi;
            nvk += nvi;
            nel += nvi;
            W[nv + i] = 0;
            W[elen + i] = -1;
          } else {
            W[degree + i] = Math.min(W[degree + i], d);
            cindex[pn] = cindex[p3];
            cindex[p3] = cindex[p1];
            cindex[p1] = k;
            W[len + i] = pn - p1 + 1;
            h = (h < 0 ? -h : h) % n;
            W[next + i] = W[hhead + h];
            W[hhead + h] = i;
            last[i] = h;
          }
        }
        W[degree + k] = dk;
        lemax = Math.max(lemax, dk);
        mark = _wclear(mark + lemax, lemax, W, w, n);
        for (pk = pk1; pk < pk2; pk++) {
          i = cindex[pk];
          if (W[nv + i] >= 0)
            continue;
          h = last[i];
          i = W[hhead + h];
          W[hhead + h] = -1;
          for (; i != -1 && W[next + i] != -1; i = W[next + i], mark++) {
            ln = W[len + i];
            eln = W[elen + i];
            for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++)
              W[w + cindex[p]] = mark;
            var jlast = i;
            for (j = W[next + i]; j != -1; ) {
              var ok = W[len + j] === ln && W[elen + j] === eln;
              for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {
                if (W[w + cindex[p]] != mark)
                  ok = 0;
              }
              if (ok) {
                cptr[j] = cs_flip(i);
                W[nv + i] += W[nv + j];
                W[nv + j] = 0;
                W[elen + j] = -1;
                j = W[next + j];
                W[next + jlast] = j;
              } else {
                jlast = j;
                j = W[next + j];
              }
            }
          }
        }
        for (p = pk1, pk = pk1; pk < pk2; pk++) {
          i = cindex[pk];
          if ((nvi = -W[nv + i]) <= 0)
            continue;
          W[nv + i] = nvi;
          d = W[degree + i] + dk - nvi;
          d = Math.min(d, n - nel - nvi);
          if (W[head + d] != -1)
            last[W[head + d]] = i;
          W[next + i] = W[head + d];
          last[i] = -1;
          W[head + d] = i;
          mindeg = Math.min(mindeg, d);
          W[degree + i] = d;
          cindex[p++] = i;
        }
        W[nv + k] = nvk;
        if ((W[len + k] = p - pk1) === 0) {
          cptr[k] = -1;
          W[w + k] = 0;
        }
        if (elenk !== 0) {
          cnz = p;
        }
      }
      for (i = 0; i < n; i++)
        cptr[i] = cs_flip(cptr[i]);
      for (j = 0; j <= n; j++)
        W[head + j] = -1;
      for (j = n; j >= 0; j--) {
        if (W[nv + j] > 0)
          continue;
        W[next + j] = W[head + cptr[j]];
        W[head + cptr[j]] = j;
      }
      for (e = n; e >= 0; e--) {
        if (W[nv + e] <= 0)
          continue;
        if (cptr[e] != -1) {
          W[next + e] = W[head + cptr[e]];
          W[head + cptr[e]] = e;
        }
      }
      for (k = 0, i = 0; i <= n; i++) {
        if (cptr[i] == -1)
          k = cs_tdfs(i, k, W, head, next, P, w);
      }
      P.splice(P.length - 1, 1);
      return P;
    };
    var _createTargetMatrix = function(order, a, m, n, dense) {
      var at = transpose(a);
      if (order === 1 && n === m) {
        return add(a, at);
      }
      if (order == 2) {
        var tindex = at._index;
        var tptr = at._ptr;
        var p2 = 0;
        for (var j = 0; j < m; j++) {
          var p = tptr[j];
          tptr[j] = p2;
          if (tptr[j + 1] - p > dense)
            continue;
          for (var p1 = tptr[j + 1]; p < p1; p++)
            tindex[p2++] = tindex[p];
        }
        tptr[m] = p2;
        a = transpose(at);
        return multiply(at, a);
      }
      return multiply(at, a);
    };
    var _initializeQuotientGraph = function(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {
      for (var k = 0; k < n; k++)
        W[len + k] = cptr[k + 1] - cptr[k];
      W[len + n] = 0;
      for (var i = 0; i <= n; i++) {
        W[head + i] = -1;
        last[i] = -1;
        W[next + i] = -1;
        W[hhead + i] = -1;
        W[nv + i] = 1;
        W[w + i] = 1;
        W[elen + i] = 0;
        W[degree + i] = W[len + i];
      }
      var mark = _wclear(0, 0, W, w, n);
      W[elen + n] = -2;
      cptr[n] = -1;
      W[w + n] = 0;
      return mark;
    };
    var _initializeDegreeLists = function(n, cptr, W, degree, elen, w, dense, nv, head, last, next) {
      var nel = 0;
      for (var i = 0; i < n; i++) {
        var d = W[degree + i];
        if (d === 0) {
          W[elen + i] = -2;
          nel++;
          cptr[i] = -1;
          W[w + i] = 0;
        } else if (d > dense) {
          W[nv + i] = 0;
          W[elen + i] = -1;
          nel++;
          cptr[i] = cs_flip(n);
          W[nv + n]++;
        } else {
          var h = W[head + d];
          if (h != -1)
            last[h] = i;
          W[next + i] = W[head + d];
          W[head + d] = i;
        }
      }
      return nel;
    };
    var _wclear = function(mark, lemax, W, w, n) {
      if (mark < 2 || (mark + lemax < 0)) {
        for (var k = 0; k < n; k++) {
          if (W[w + k] !== 0)
            W[w + k] = 1;
        }
        mark = 2;
      }
      return mark;
    };
    var _diag = function(i, j) {
      return i != j;
    };
    return cs_amd;
  }
  exports.name = 'cs_amd';
  exports.path = 'sparse';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1d2", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type) {
    var SparseMatrix = type.SparseMatrix;
    var cs_permute = function(a, pinv, q, values) {
      var avalues = a._values;
      var aindex = a._index;
      var aptr = a._ptr;
      var asize = a._size;
      var adt = a._datatype;
      var m = asize[0];
      var n = asize[1];
      var cvalues = values && a._values ? [] : null;
      var cindex = [];
      var cptr = [];
      var nz = 0;
      for (var k = 0; k < n; k++) {
        cptr[k] = nz;
        var j = q ? (q[k]) : k;
        for (var t0 = aptr[j],
            t1 = aptr[j + 1],
            t = t0; t < t1; t++) {
          var r = pinv ? pinv[aindex[t]] : aindex[t];
          cindex[nz] = r;
          if (cvalues)
            cvalues[nz] = avalues[t];
          nz++;
        }
      }
      cptr[n] = nz;
      return new SparseMatrix({
        values: cvalues,
        index: cindex,
        ptr: cptr,
        size: [m, n],
        datatype: adt
      });
    };
    return cs_permute;
  }
  exports.name = 'cs_permute';
  exports.path = 'sparse';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1d3", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory() {
    var cs_etree = function(a, ata) {
      if (!a)
        return null;
      var aindex = a._index;
      var aptr = a._ptr;
      var asize = a._size;
      var m = asize[0];
      var n = asize[1];
      var parent = [];
      var w = [];
      var ancestor = 0;
      var prev = n;
      var i,
          inext;
      if (ata) {
        for (i = 0; i < m; i++)
          w[prev + i] = -1;
      }
      for (var k = 0; k < n; k++) {
        parent[k] = -1;
        w[ancestor + k] = -1;
        for (var p0 = aptr[k],
            p1 = aptr[k + 1],
            p = p0; p < p1; p++) {
          var r = aindex[p];
          i = ata ? (w[prev + r]) : r;
          for (; i != -1 && i < k; i = inext) {
            inext = w[ancestor + i];
            w[ancestor + i] = k;
            if (inext == -1)
              parent[i] = k;
          }
          if (ata)
            w[prev + r] = k;
        }
      }
      return parent;
    };
    return cs_etree;
  }
  exports.name = 'cs_etree';
  exports.path = 'sparse';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1cf", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory() {
    var cs_tdfs = function(j, k, w, head, next, post, stack) {
      var top = 0;
      w[stack] = j;
      while (top >= 0) {
        var p = w[stack + top];
        var i = w[head + p];
        if (i == -1) {
          top--;
          post[k++] = p;
        } else {
          w[head + p] = w[next + i];
          ++top;
          w[stack + top] = i;
        }
      }
      return k;
    };
    return cs_tdfs;
  }
  exports.name = 'cs_tdfs';
  exports.path = 'sparse';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1d4", ["1cf", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load) {
    var cs_tdfs = load($__require('1cf'));
    var cs_post = function(parent, n) {
      if (!parent)
        return null;
      var k = 0;
      var j;
      var post = [];
      var w = [];
      var head = 0;
      var next = n;
      var stack = 2 * n;
      for (j = 0; j < n; j++) {
        w[head + j] = -1;
      }
      for (j = n - 1; j >= 0; j--) {
        if (parent[j] == -1)
          continue;
        w[next + j] = w[head + parent[j]];
        w[head + parent[j]] = j;
      }
      for (j = 0; j < n; j++) {
        if (parent[j] != -1)
          continue;
        k = cs_tdfs(j, k, w, head, next, post, stack);
      }
      return post;
    };
    return cs_post;
  }
  exports.name = 'cs_post';
  exports.path = 'sparse';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1d5", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory() {
    var cs_leaf = function(i, j, w, first, maxfirst, prevleaf, ancestor) {
      var s,
          sparent,
          jprev;
      var jleaf = 0;
      var q;
      if (i <= j || w[first + j] <= w[maxfirst + i])
        return (-1);
      w[maxfirst + i] = w[first + j];
      jprev = w[prevleaf + i];
      w[prevleaf + i] = j;
      if (jprev === -1) {
        jleaf = 1;
        q = i;
      } else {
        jleaf = 2;
        for (q = jprev; q != w[ancestor + q]; q = w[ancestor + q])
          ;
        for (s = jprev; s != q; s = sparent) {
          sparent = w[ancestor + s];
          w[ancestor + s] = q;
        }
      }
      return {
        jleaf: jleaf,
        q: q
      };
    };
    return cs_leaf;
  }
  exports.name = 'cs_leaf';
  exports.path = 'sparse';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1d6", ["1d1", "1d5", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load) {
    var transpose = load($__require('1d1'));
    var cs_leaf = load($__require('1d5'));
    var cs_counts = function(a, parent, post, ata) {
      if (!a || !parent || !post)
        return null;
      var asize = a._size;
      var m = asize[0];
      var n = asize[1];
      var i,
          j,
          k,
          J,
          p,
          p0,
          p1;
      var s = 4 * n + (ata ? (n + m + 1) : 0);
      var w = [];
      var ancestor = 0;
      var maxfirst = n;
      var prevleaf = 2 * n;
      var first = 3 * n;
      var head = 4 * n;
      var next = 5 * n + 1;
      for (k = 0; k < s; k++)
        w[k] = -1;
      var colcount = [];
      var at = transpose(a);
      var tindex = at._index;
      var tptr = at._ptr;
      for (k = 0; k < n; k++) {
        j = post[k];
        colcount[j] = (w[first + j] == -1) ? 1 : 0;
        for (; j != -1 && w[first + j] == -1; j = parent[j])
          w[first + j] = k;
      }
      if (ata) {
        for (k = 0; k < n; k++)
          w[post[k]] = k;
        for (i = 0; i < m; i++) {
          for (k = n, p0 = tptr[i], p1 = tptr[i + 1], p = p0; p < p1; p++)
            k = Math.min(k, w[tindex[p]]);
          w[next + i] = w[head + k];
          w[head + k] = i;
        }
      }
      for (i = 0; i < n; i++)
        w[ancestor + i] = i;
      for (k = 0; k < n; k++) {
        j = post[k];
        if (parent[j] != -1)
          colcount[parent[j]]--;
        for (J = (ata ? w[head + k] : j); J != -1; J = (ata ? w[next + J] : -1)) {
          for (p = tptr[J]; p < tptr[J + 1]; p++) {
            i = tindex[p];
            var r = cs_leaf(i, j, w, first, maxfirst, prevleaf, ancestor);
            if (r.jleaf >= 1)
              colcount[j]++;
            if (r.jleaf == 2)
              colcount[r.q]--;
          }
        }
        if (parent[j] != -1)
          w[ancestor + j] = parent[j];
      }
      for (j = 0; j < n; j++) {
        if (parent[j] != -1)
          colcount[parent[j]] += colcount[j];
      }
      return colcount;
    };
    return cs_counts;
  }
  exports.name = 'cs_counts';
  exports.path = 'sparse';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1d7", ["1cd", "1d2", "1d3", "1d4", "1d6", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load) {
    var cs_amd = load($__require('1cd'));
    var cs_permute = load($__require('1d2'));
    var cs_etree = load($__require('1d3'));
    var cs_post = load($__require('1d4'));
    var cs_counts = load($__require('1d6'));
    var cs_sqr = function(order, a, qr) {
      var aptr = a._ptr;
      var asize = a._size;
      var n = asize[1];
      var k;
      var s = {};
      s.q = cs_amd(order, a);
      if (order && !s.q)
        return null;
      if (qr) {
        var c = order ? cs_permute(a, null, s.q, 0) : a;
        s.parent = cs_etree(c, 1);
        var post = cs_post(s.parent, n);
        s.cp = cs_counts(c, s.parent, post, 1);
        if (c && s.parent && s.cp && _vcount(c, s)) {
          for (s.unz = 0, k = 0; k < n; k++)
            s.unz += s.cp[k];
        }
      } else {
        s.unz = 4 * (aptr[n]) + n;
        s.lnz = s.unz;
      }
      return s;
    };
    var _vcount = function(a, s) {
      var aptr = a._ptr;
      var aindex = a._index;
      var asize = a._size;
      var m = asize[0];
      var n = asize[1];
      s.pinv = [];
      s.leftmost = [];
      var parent = s.parent;
      var pinv = s.pinv;
      var leftmost = s.leftmost;
      var w = [];
      var next = 0;
      var head = m;
      var tail = m + n;
      var nque = m + 2 * n;
      var i,
          k,
          p,
          p0,
          p1;
      for (k = 0; k < n; k++) {
        w[head + k] = -1;
        w[tail + k] = -1;
        w[nque + k] = 0;
      }
      for (i = 0; i < m; i++)
        leftmost[i] = -1;
      for (k = n - 1; k >= 0; k--) {
        for (p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
          leftmost[aindex[p]] = k;
        }
      }
      for (i = m - 1; i >= 0; i--) {
        pinv[i] = -1;
        k = leftmost[i];
        if (k == -1)
          continue;
        if (w[nque + k]++ === 0)
          w[tail + k] = i;
        w[next + i] = w[head + k];
        w[head + k] = i;
      }
      s.lnz = 0;
      s.m2 = m;
      for (k = 0; k < n; k++) {
        i = w[head + k];
        s.lnz++;
        if (i < 0)
          i = s.m2++;
        pinv[i] = k;
        if (--nque[k] <= 0)
          continue;
        s.lnz += w[nque + k];
        var pa = parent[k];
        if (pa != -1) {
          if (w[nque + pa] === 0)
            w[tail + pa] = w[tail + k];
          w[next + w[tail + k]] = w[head + pa];
          w[head + pa] = w[next + i];
          w[nque + pa] += w[nque + k];
        }
      }
      for (i = 0; i < m; i++) {
        if (pinv[i] < 0)
          pinv[i] = k++;
      }
      return true;
    };
    return cs_sqr;
  }
  exports.name = 'cs_sqr';
  exports.path = 'sparse';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1d8", ["1ce", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load) {
    var cs_flip = load($__require('1ce'));
    var cs_unflip = function(i) {
      return i < 0 ? cs_flip(i) : i;
    };
    return cs_unflip;
  }
  exports.name = 'cs_unflip';
  exports.path = 'sparse';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1d9", ["1da", "1db", "1d8", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load) {
    var cs_marked = load($__require('1da'));
    var cs_mark = load($__require('1db'));
    var cs_unflip = load($__require('1d8'));
    var cs_dfs = function(j, g, top, xi, pinv) {
      var index = g._index;
      var ptr = g._ptr;
      var size = g._size;
      var n = size[1];
      var i,
          p,
          p2;
      var head = 0;
      xi[0] = j;
      while (head >= 0) {
        j = xi[head];
        var jnew = pinv ? pinv[j] : j;
        if (!cs_marked(ptr, j)) {
          cs_mark(ptr, j);
          xi[n + head] = jnew < 0 ? 0 : cs_unflip(ptr[jnew]);
        }
        var done = 1;
        for (p = xi[n + head], p2 = jnew < 0 ? 0 : cs_unflip(ptr[jnew + 1]); p < p2; p++) {
          i = index[p];
          if (cs_marked(ptr, i))
            continue;
          xi[n + head] = p;
          xi[++head] = i;
          done = 0;
          break;
        }
        if (done) {
          head--;
          xi[--top] = j;
        }
      }
      return top;
    };
    return cs_dfs;
  }
  exports.name = 'cs_dfs';
  exports.path = 'sparse';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1da", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory() {
    var cs_marked = function(w, j) {
      return w[j] < 0;
    };
    return cs_marked;
  }
  exports.name = 'cs_marked';
  exports.path = 'sparse';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1ce", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory() {
    var cs_flip = function(i) {
      return -i - 2;
    };
    return cs_flip;
  }
  exports.name = 'cs_flip';
  exports.path = 'sparse';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1db", ["1ce", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load) {
    var cs_flip = load($__require('1ce'));
    var cs_mark = function(w, j) {
      w[j] = cs_flip(w[j]);
    };
    return cs_mark;
  }
  exports.name = 'cs_mark';
  exports.path = 'sparse';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1dc", ["1d9", "1da", "1db", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load) {
    var cs_dfs = load($__require('1d9'));
    var cs_marked = load($__require('1da'));
    var cs_mark = load($__require('1db'));
    var cs_reach = function(g, b, k, xi, pinv) {
      var gptr = g._ptr;
      var gsize = g._size;
      var bindex = b._index;
      var bptr = b._ptr;
      var n = gsize[1];
      var p,
          p0,
          p1;
      var top = n;
      for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {
        var i = bindex[p];
        if (!cs_marked(gptr, i)) {
          top = cs_dfs(i, g, top, xi, pinv);
        }
      }
      for (p = top; p < n; p++) {
        cs_mark(gptr, xi[p]);
      }
      return top;
    };
    return cs_reach;
  }
  exports.name = 'cs_reach';
  exports.path = 'sparse';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1dd", ["1c2", "1d0", "1c0", "1dc", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load) {
    var divideScalar = load($__require('1c2'));
    var multiply = load($__require('1d0'));
    var subtract = load($__require('1c0'));
    var cs_reach = load($__require('1dc'));
    var cs_spsolve = function(g, b, k, xi, x, pinv, lo) {
      var gvalues = g._values;
      var gindex = g._index;
      var gptr = g._ptr;
      var gsize = g._size;
      var n = gsize[1];
      var bvalues = b._values;
      var bindex = b._index;
      var bptr = b._ptr;
      var p,
          p0,
          p1,
          q;
      var top = cs_reach(g, b, k, xi, pinv);
      for (p = top; p < n; p++)
        x[xi[p]] = 0;
      for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++)
        x[bindex[p]] = bvalues[p];
      for (var px = top; px < n; px++) {
        var j = xi[px];
        var J = pinv ? pinv[j] : j;
        if (J < 0)
          continue;
        p0 = gptr[J];
        p1 = gptr[J + 1];
        x[j] = divideScalar(x[j], gvalues[lo ? p0 : (p1 - 1)]);
        p = lo ? (p0 + 1) : p0;
        q = lo ? (p1) : (p1 - 1);
        for (; p < q; p++) {
          var i = gindex[p];
          x[i] = subtract(x[i], multiply(gvalues[p], x[j]));
        }
      }
      return top;
    };
    return cs_spsolve;
  }
  exports.name = 'cs_spsolve';
  exports.path = 'sparse';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1de", ["1c4", "1c2", "1d0", "c5", "1df", "1dd", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load) {
    var abs = load($__require('1c4'));
    var divideScalar = load($__require('1c2'));
    var multiply = load($__require('1d0'));
    var larger = load($__require('c5'));
    var largerEq = load($__require('1df'));
    var cs_spsolve = load($__require('1dd'));
    var SparseMatrix = type.SparseMatrix;
    var cs_lu = function(m, s, tol) {
      if (!m)
        return null;
      var size = m._size;
      var n = size[1];
      var q;
      var lnz = 100;
      var unz = 100;
      if (s) {
        q = s.q;
        lnz = s.lnz || lnz;
        unz = s.unz || unz;
      }
      var lvalues = [];
      var lindex = [];
      var lptr = [];
      var L = new SparseMatrix({
        values: lvalues,
        index: lindex,
        ptr: lptr,
        size: [n, n]
      });
      var uvalues = [];
      var uindex = [];
      var uptr = [];
      var U = new SparseMatrix({
        values: uvalues,
        index: uindex,
        ptr: uptr,
        size: [n, n]
      });
      var pinv = [];
      var i,
          p;
      var x = [];
      var xi = [];
      for (i = 0; i < n; i++) {
        x[i] = 0;
        pinv[i] = -1;
        lptr[i + 1] = 0;
      }
      lnz = 0;
      unz = 0;
      for (var k = 0; k < n; k++) {
        lptr[k] = lnz;
        uptr[k] = unz;
        var col = q ? q[k] : k;
        var top = cs_spsolve(L, m, col, xi, x, pinv, 1);
        var ipiv = -1;
        var a = -1;
        for (p = top; p < n; p++) {
          i = xi[p];
          if (pinv[i] < 0) {
            var xabs = abs(x[i]);
            if (larger(xabs, a)) {
              a = xabs;
              ipiv = i;
            }
          } else {
            uindex[unz] = pinv[i];
            uvalues[unz++] = x[i];
          }
        }
        if (ipiv == -1 || a <= 0)
          return null;
        if (pinv[col] < 0 && largerEq(abs(x[col]), multiply(a, tol)))
          ipiv = col;
        var pivot = x[ipiv];
        uindex[unz] = k;
        uvalues[unz++] = pivot;
        pinv[ipiv] = k;
        lindex[lnz] = ipiv;
        lvalues[lnz++] = 1;
        for (p = top; p < n; p++) {
          i = xi[p];
          if (pinv[i] < 0) {
            lindex[lnz] = i;
            lvalues[lnz++] = divideScalar(x[i], pivot);
          }
          x[i] = 0;
        }
      }
      lptr[n] = lnz;
      uptr[n] = unz;
      for (p = 0; p < lnz; p++)
        lindex[p] = pinv[lindex[p]];
      lvalues.splice(lnz, lvalues.length - lnz);
      lindex.splice(lnz, lindex.length - lnz);
      uvalues.splice(unz, uvalues.length - unz);
      uindex.splice(unz, uindex.length - unz);
      return {
        L: L,
        U: U,
        pinv: pinv
      };
    };
    return cs_lu;
  }
  exports.name = 'cs_lu';
  exports.path = 'sparse';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1e0", ["bd", "1d7", "1de", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var util = $__require('bd');
  var number = util.number,
      isInteger = number.isInteger;
  function factory(type, config, load, typed) {
    var cs_sqr = load($__require('1d7'));
    var cs_lu = load($__require('1de'));
    var slu = typed('slu', {'SparseMatrix, number, number': function(a, order, threshold) {
        if (!isInteger(order) || order < 0 || order > 3)
          throw new Error('Symbolic Ordering and Analysis order must be an integer number in the interval [0, 3]');
        if (threshold < 0 || threshold > 1)
          throw new Error('Partial pivoting threshold must be a number from 0 to 1');
        var s = cs_sqr(order, a, false);
        var f = cs_lu(a, s, threshold);
        return {
          L: f.L,
          U: f.U,
          p: f.pinv,
          q: s.q,
          toString: function() {
            return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\np: ' + this.p.toString() + (this.q ? '\nq: ' + this.q.toString() : '') + '\n';
          }
        };
      }});
    return slu;
  }
  exports.name = 'slu';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1e1", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory() {
    var cs_ipvec = function(p, b, n) {
      var k;
      var n = b.length;
      var x = [];
      if (p) {
        for (k = 0; k < n; k++) {
          x[p[k]] = b[k];
        }
      } else {
        for (k = 0; k < n; k++) {
          x[k] = b[k];
        }
      }
      return x;
    };
    return cs_ipvec;
  }
  exports.name = 'cs_ipvec';
  exports.path = 'sparse';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1e2", ["cd", "1c2", "1c1", "1c0", "c0", "1e3", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var divideScalar = load($__require('1c2'));
    var multiplyScalar = load($__require('1c1'));
    var subtract = load($__require('1c0'));
    var equalScalar = load($__require('c0'));
    var solveValidation = load($__require('1e3'));
    var DenseMatrix = type.DenseMatrix;
    var lsolve = typed('lsolve', {
      'SparseMatrix, Array | Matrix': function(m, b) {
        return _sparseForwardSubstitution(m, b);
      },
      'DenseMatrix, Array | Matrix': function(m, b) {
        return _denseForwardSubstitution(m, b);
      },
      'Array, Array | Matrix': function(a, b) {
        var m = matrix(a);
        var r = _denseForwardSubstitution(m, b);
        return r.valueOf();
      }
    });
    var _denseForwardSubstitution = function(m, b) {
      b = solveValidation(m, b, true);
      var bdata = b._data;
      var rows = m._size[0];
      var columns = m._size[1];
      var x = [];
      var data = m._data;
      for (var j = 0; j < columns; j++) {
        var bj = bdata[j][0] || 0;
        var xj;
        if (!equalScalar(bj, 0)) {
          var vjj = data[j][j];
          if (equalScalar(vjj, 0)) {
            throw new Error('Linear system cannot be solved since matrix is singular');
          }
          xj = divideScalar(bj, vjj);
          for (var i = j + 1; i < rows; i++) {
            bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, data[i][j]))];
          }
        } else {
          xj = 0;
        }
        x[j] = [xj];
      }
      return new DenseMatrix({
        data: x,
        size: [rows, 1]
      });
    };
    var _sparseForwardSubstitution = function(m, b) {
      b = solveValidation(m, b, true);
      var bdata = b._data;
      var rows = m._size[0];
      var columns = m._size[1];
      var values = m._values;
      var index = m._index;
      var ptr = m._ptr;
      var i,
          k;
      var x = [];
      for (var j = 0; j < columns; j++) {
        var bj = bdata[j][0] || 0;
        if (!equalScalar(bj, 0)) {
          var vjj = 0;
          var jvalues = [];
          var jindex = [];
          var l = ptr[j + 1];
          for (k = ptr[j]; k < l; k++) {
            i = index[k];
            if (i === j) {
              vjj = values[k];
            } else if (i > j) {
              jvalues.push(values[k]);
              jindex.push(i);
            }
          }
          if (equalScalar(vjj, 0)) {
            throw new Error('Linear system cannot be solved since matrix is singular');
          }
          var xj = divideScalar(bj, vjj);
          for (k = 0, l = jindex.length; k < l; k++) {
            i = jindex[k];
            bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, jvalues[k]))];
          }
          x[j] = [xj];
        } else {
          x[j] = [0];
        }
      }
      return new DenseMatrix({
        data: x,
        size: [rows, 1]
      });
    };
    return lsolve;
  }
  exports.name = 'lsolve';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1e4", ["cd", "1ca", "1e0", "1e1", "1e3", "1e5", "1e2", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var isArray = Array.isArray;
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var lup = load($__require('1ca'));
    var slu = load($__require('1e0'));
    var cs_ipvec = load($__require('1e1'));
    var solveValidation = load($__require('1e3'));
    var usolve = load($__require('1e5'));
    var lsolve = load($__require('1e2'));
    var lusolve = typed('lusolve', {
      'Array, Array | Matrix': function(a, b) {
        a = matrix(a);
        var d = lup(a);
        var x = _lusolve(d.L, d.U, d.p, null, b);
        return x.valueOf();
      },
      'DenseMatrix, Array | Matrix': function(a, b) {
        var d = lup(a);
        return _lusolve(d.L, d.U, d.p, null, b);
      },
      'SparseMatrix, Array | Matrix': function(a, b) {
        var d = lup(a);
        return _lusolve(d.L, d.U, d.p, null, b);
      },
      'SparseMatrix, Array | Matrix, number, number': function(a, b, order, threshold) {
        var d = slu(a, order, threshold);
        return _lusolve(d.L, d.U, d.p, d.q, b);
      },
      'Object, Array | Matrix': function(d, b) {
        return _lusolve(d.L, d.U, d.p, d.q, b);
      }
    });
    var _toMatrix = function(a) {
      if (a && a.isMatrix === true)
        return a;
      if (isArray(a))
        return matrix(a);
      throw new TypeError('Invalid Matrix LU decomposition');
    };
    var _lusolve = function(l, u, p, q, b) {
      l = _toMatrix(l);
      u = _toMatrix(u);
      b = solveValidation(l, b, false);
      if (p)
        b._data = cs_ipvec(p, b._data);
      var y = lsolve(l, b);
      var x = usolve(u, y);
      if (q)
        x._data = cs_ipvec(q, x._data);
      return x;
    };
    return lusolve;
  }
  exports.name = 'lusolve';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1e3", ["bd", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var util = $__require('bd');
  var string = util.string;
  var array = util.array;
  var isArray = Array.isArray;
  function factory(type) {
    var DenseMatrix = type.DenseMatrix;
    var solveValidation = function(m, b, copy) {
      var size = m.size();
      if (size.length !== 2)
        throw new RangeError('Matrix must be two dimensional (size: ' + string.format(size) + ')');
      var rows = size[0];
      var columns = size[1];
      if (rows !== columns)
        throw new RangeError('Matrix must be square (size: ' + string.format(size) + ')');
      var data,
          i,
          bdata;
      if (b && b.isMatrix === true) {
        var msize = b.size();
        if (msize.length === 1) {
          if (msize[0] !== rows)
            throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
          data = [];
          bdata = b._data;
          for (i = 0; i < rows; i++) {
            data[i] = [bdata[i]];
          }
          return new DenseMatrix({
            data: data,
            size: [rows, 1],
            datatype: b._datatype
          });
        }
        if (msize.length === 2) {
          if (msize[0] !== rows || msize[1] !== 1)
            throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
          if (b.isDenseMatrix === true) {
            if (copy) {
              data = [];
              bdata = b._data;
              for (i = 0; i < rows; i++) {
                data[i] = [bdata[i][0]];
              }
              return new DenseMatrix({
                data: data,
                size: [rows, 1],
                datatype: b._datatype
              });
            }
            return b;
          }
          data = [];
          for (i = 0; i < rows; i++)
            data[i] = [0];
          var values = b._values;
          var index = b._index;
          var ptr = b._ptr;
          for (var k1 = ptr[1],
              k = ptr[0]; k < k1; k++) {
            i = index[k];
            data[i][0] = values[k];
          }
          return new DenseMatrix({
            data: data,
            size: [rows, 1],
            datatype: b._datatype
          });
        }
        throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
      }
      if (isArray(b)) {
        var asize = array.size(b);
        if (asize.length === 1) {
          if (asize[0] !== rows)
            throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
          data = [];
          for (i = 0; i < rows; i++) {
            data[i] = [b[i]];
          }
          return new DenseMatrix({
            data: data,
            size: [rows, 1]
          });
        }
        if (asize.length === 2) {
          if (asize[0] !== rows || asize[1] !== 1)
            throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
          data = [];
          for (i = 0; i < rows; i++) {
            data[i] = [b[i][0]];
          }
          return new DenseMatrix({
            data: data,
            size: [rows, 1]
          });
        }
        throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
      }
    };
    return solveValidation;
  }
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1e5", ["cd", "1c2", "1c1", "1c0", "c0", "1e3", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var divideScalar = load($__require('1c2'));
    var multiplyScalar = load($__require('1c1'));
    var subtract = load($__require('1c0'));
    var equalScalar = load($__require('c0'));
    var solveValidation = load($__require('1e3'));
    var DenseMatrix = type.DenseMatrix;
    var usolve = typed('usolve', {
      'SparseMatrix, Array | Matrix': function(m, b) {
        return _sparseBackwardSubstitution(m, b);
      },
      'DenseMatrix, Array | Matrix': function(m, b) {
        return _denseBackwardSubstitution(m, b);
      },
      'Array, Array | Matrix': function(a, b) {
        var m = matrix(a);
        var r = _denseBackwardSubstitution(m, b);
        return r.valueOf();
      }
    });
    var _denseBackwardSubstitution = function(m, b) {
      b = solveValidation(m, b, true);
      var bdata = b._data;
      var rows = m._size[0];
      var columns = m._size[1];
      var x = [];
      var data = m._data;
      for (var j = columns - 1; j >= 0; j--) {
        var bj = bdata[j][0] || 0;
        var xj;
        if (!equalScalar(bj, 0)) {
          var vjj = data[j][j];
          if (equalScalar(vjj, 0)) {
            throw new Error('Linear system cannot be solved since matrix is singular');
          }
          xj = divideScalar(bj, vjj);
          for (var i = j - 1; i >= 0; i--) {
            bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, data[i][j]))];
          }
        } else {
          xj = 0;
        }
        x[j] = [xj];
      }
      return new DenseMatrix({
        data: x,
        size: [rows, 1]
      });
    };
    var _sparseBackwardSubstitution = function(m, b) {
      b = solveValidation(m, b, true);
      var bdata = b._data;
      var rows = m._size[0];
      var columns = m._size[1];
      var values = m._values;
      var index = m._index;
      var ptr = m._ptr;
      var i,
          k;
      var x = [];
      for (var j = columns - 1; j >= 0; j--) {
        var bj = bdata[j][0] || 0;
        if (!equalScalar(bj, 0)) {
          var vjj = 0;
          var jvalues = [];
          var jindex = [];
          var f = ptr[j];
          var l = ptr[j + 1];
          for (k = l - 1; k >= f; k--) {
            i = index[k];
            if (i === j) {
              vjj = values[k];
            } else if (i < j) {
              jvalues.push(values[k]);
              jindex.push(i);
            }
          }
          if (equalScalar(vjj, 0)) {
            throw new Error('Linear system cannot be solved since matrix is singular');
          }
          var xj = divideScalar(bj, vjj);
          for (k = 0, l = jindex.length; k < l; k++) {
            i = jindex[k];
            bdata[i] = [subtract(bdata[i][0], multiplyScalar(xj, jvalues[k]))];
          }
          x[j] = [xj];
        } else {
          x[j] = [0];
        }
      }
      return new DenseMatrix({
        data: x,
        size: [rows, 1]
      });
    };
    return usolve;
  }
  exports.name = 'usolve';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1e6", ["1ca", "1e0", "1e2", "1e4", "1e5", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = [$__require('1ca'), $__require('1e0'), $__require('1e2'), $__require('1e4'), $__require('1e5')];
  return module.exports;
});

$__System.registerDynamic("1e7", ["ad", "1cb", "1e8", "cd", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var unaryMinus = load($__require('1cb'));
    var isNegative = load($__require('1e8'));
    var matrix = load($__require('cd'));
    var cbrt = typed('cbrt', {
      'number': _cbrtNumber,
      'Complex': _cbrtComplex,
      'Complex, boolean': _cbrtComplex,
      'BigNumber': function(x) {
        return x.cbrt();
      },
      'Unit': _cbrtUnit,
      'Array | Matrix': function(x) {
        return deepMap(x, cbrt, true);
      }
    });
    function _cbrtNumber(x) {
      if (x === 0) {
        return x;
      }
      var negate = x < 0;
      var result;
      if (negate) {
        x = -x;
      }
      if (isFinite(x)) {
        result = Math.exp(Math.log(x) / 3);
        result = (x / (result * result) + (2 * result)) / 3;
      } else {
        result = x;
      }
      return negate ? -result : result;
    }
    function _cbrtComplex(x, allRoots) {
      var arg_3 = x.arg() / 3;
      var abs = x.abs();
      var principal = new type.Complex(_cbrtNumber(abs), 0).mul(new type.Complex(0, arg_3).exp());
      if (allRoots) {
        var all = [principal, new type.Complex(_cbrtNumber(abs), 0).mul(new type.Complex(0, arg_3 + Math.PI * 2 / 3).exp()), new type.Complex(_cbrtNumber(abs), 0).mul(new type.Complex(0, arg_3 - Math.PI * 2 / 3).exp())];
        return (config.matrix === 'Array') ? all : matrix(all);
      } else {
        return principal;
      }
    }
    function _cbrtUnit(x) {
      if (x.value && x.value.isComplex) {
        var result = x.clone();
        result.value = 1.0;
        result = result.pow(1.0 / 3);
        result.value = _cbrtComplex(x.value);
        return result;
      } else {
        var negate = isNegative(x.value);
        if (negate) {
          x.value = unaryMinus(x.value);
        }
        var third;
        if (x.value && x.value.isBigNumber) {
          third = new type.BigNumber(1).div(3);
        } else if (x.value && x.value.isFraction) {
          third = new type.Fraction(1, 3);
        } else {
          third = 1 / 3;
        }
        var result = x.pow(third);
        if (negate) {
          result.value = unaryMinus(result.value);
        }
        return result;
      }
    }
    cbrt.toTex = '\\sqrt[3]{${args[0]}}';
    return cbrt;
  }
  exports.name = 'cbrt';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1e9", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var ceil = typed('ceil', {
      'number': Math.ceil,
      'Complex': function(x) {
        return x.ceil();
      },
      'BigNumber': function(x) {
        return x.ceil();
      },
      'Fraction': function(x) {
        return x.ceil();
      },
      'Array | Matrix': function(x) {
        return deepMap(x, ceil, true);
      }
    });
    ceil.toTex = '\\left\\lceil${args[0]}\\right\\rceil';
    return ceil;
  }
  exports.name = 'ceil';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1ea", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var cube = typed('cube', {
      'number': function(x) {
        return x * x * x;
      },
      'Complex': function(x) {
        return x.mul(x).mul(x);
      },
      'BigNumber': function(x) {
        return x.times(x).times(x);
      },
      'Fraction': function(x) {
        return x.pow(3);
      },
      'Array | Matrix': function(x) {
        return deepMap(x, cube, true);
      },
      'Unit': function(x) {
        return x.pow(3);
      }
    });
    cube.toTex = '\\left(${args[0]}\\right)^3';
    return cube;
  }
  exports.name = 'cube';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1eb", ["cd", "1c1", "b5", "1ec", "1ed", "1ee", "1ef", "1f0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var multiplyScalar = load($__require('1c1'));
    var latex = $__require('b5');
    var algorithm02 = load($__require('1ec'));
    var algorithm09 = load($__require('1ed'));
    var algorithm11 = load($__require('1ee'));
    var algorithm13 = load($__require('1ef'));
    var algorithm14 = load($__require('1f0'));
    var dotMultiply = typed('dotMultiply', {
      'any, any': multiplyScalar,
      'Matrix, Matrix': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            switch (y.storage()) {
              case 'sparse':
                c = algorithm09(x, y, multiplyScalar, false);
                break;
              default:
                c = algorithm02(y, x, multiplyScalar, true);
                break;
            }
            break;
          default:
            switch (y.storage()) {
              case 'sparse':
                c = algorithm02(x, y, multiplyScalar, false);
                break;
              default:
                c = algorithm13(x, y, multiplyScalar);
                break;
            }
            break;
        }
        return c;
      },
      'Array, Array': function(x, y) {
        return dotMultiply(matrix(x), matrix(y)).valueOf();
      },
      'Array, Matrix': function(x, y) {
        return dotMultiply(matrix(x), y);
      },
      'Matrix, Array': function(x, y) {
        return dotMultiply(x, matrix(y));
      },
      'Matrix, any': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            c = algorithm11(x, y, multiplyScalar, false);
            break;
          default:
            c = algorithm14(x, y, multiplyScalar, false);
            break;
        }
        return c;
      },
      'any, Matrix': function(x, y) {
        var c;
        switch (y.storage()) {
          case 'sparse':
            c = algorithm11(y, x, multiplyScalar, true);
            break;
          default:
            c = algorithm14(y, x, multiplyScalar, true);
            break;
        }
        return c;
      },
      'Array, any': function(x, y) {
        return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
      },
      'any, Array': function(x, y) {
        return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
      }
    });
    dotMultiply.toTex = '\\left(${args[0]}' + latex.operators['dotMultiply'] + '${args[1]}\\right)';
    return dotMultiply;
  }
  exports.name = 'dotMultiply';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1f1", ["cd", "1c3", "b5", "1f2", "1f3", "1ee", "1f4", "1ef", "1f0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var pow = load($__require('1c3'));
    var latex = $__require('b5');
    var algorithm03 = load($__require('1f2'));
    var algorithm07 = load($__require('1f3'));
    var algorithm11 = load($__require('1ee'));
    var algorithm12 = load($__require('1f4'));
    var algorithm13 = load($__require('1ef'));
    var algorithm14 = load($__require('1f0'));
    var dotPow = typed('dotPow', {
      'any, any': pow,
      'Matrix, Matrix': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            switch (y.storage()) {
              case 'sparse':
                c = algorithm07(x, y, pow, false);
                break;
              default:
                c = algorithm03(y, x, pow, true);
                break;
            }
            break;
          default:
            switch (y.storage()) {
              case 'sparse':
                c = algorithm03(x, y, pow, false);
                break;
              default:
                c = algorithm13(x, y, pow);
                break;
            }
            break;
        }
        return c;
      },
      'Array, Array': function(x, y) {
        return dotPow(matrix(x), matrix(y)).valueOf();
      },
      'Array, Matrix': function(x, y) {
        return dotPow(matrix(x), y);
      },
      'Matrix, Array': function(x, y) {
        return dotPow(x, matrix(y));
      },
      'Matrix, any': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            c = algorithm11(x, y, dotPow, false);
            break;
          default:
            c = algorithm14(x, y, dotPow, false);
            break;
        }
        return c;
      },
      'any, Matrix': function(x, y) {
        var c;
        switch (y.storage()) {
          case 'sparse':
            c = algorithm12(y, x, dotPow, true);
            break;
          default:
            c = algorithm14(y, x, dotPow, true);
            break;
        }
        return c;
      },
      'Array, any': function(x, y) {
        return algorithm14(matrix(x), y, dotPow, false).valueOf();
      },
      'any, Array': function(x, y) {
        return algorithm14(matrix(y), x, dotPow, true).valueOf();
      }
    });
    dotPow.toTex = '\\left(${args[0]}' + latex.operators['dotPow'] + '${args[1]}\\right)';
    return dotPow;
  }
  exports.name = 'dotPow';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1f5", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var exp = typed('exp', {
      'number': Math.exp,
      'Complex': function(x) {
        return x.exp();
      },
      'BigNumber': function(x) {
        return x.exp();
      },
      'Array | Matrix': function(x) {
        return deepMap(x, exp);
      }
    });
    exp.toTex = '\\exp\\left(${args[0]}\\right)';
    return exp;
  }
  exports.name = 'exp';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1f6", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var fix = typed('fix', {
      'number': function(x) {
        return (x > 0) ? Math.floor(x) : Math.ceil(x);
      },
      'Complex': function(x) {
        return new type.Complex((x.re > 0) ? Math.floor(x.re) : Math.ceil(x.re), (x.im > 0) ? Math.floor(x.im) : Math.ceil(x.im));
      },
      'BigNumber': function(x) {
        return x.isNegative() ? x.ceil() : x.floor();
      },
      'Fraction': function(x) {
        return x.s < 0 ? x.ceil() : x.floor();
      },
      'Array | Matrix': function(x) {
        return deepMap(x, fix, true);
      }
    });
    fix.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return fix;
  }
  exports.name = 'fix';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1f7", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var floor = typed('floor', {
      'number': Math.floor,
      'Complex': function(x) {
        return x.floor();
      },
      'BigNumber': function(x) {
        return x.floor();
      },
      'Fraction': function(x) {
        return x.floor();
      },
      'Array | Matrix': function(x) {
        return deepMap(x, floor, true);
      }
    });
    floor.toTex = '\\left\\lfloor${args[0]}\\right\\rfloor';
    return floor;
  }
  exports.name = 'floor';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1f8", ["a2", "cd", "1f9", "1fa", "1fb", "1ef", "1f0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var isInteger = $__require('a2').isInteger;
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var algorithm01 = load($__require('1f9'));
    var algorithm04 = load($__require('1fa'));
    var algorithm10 = load($__require('1fb'));
    var algorithm13 = load($__require('1ef'));
    var algorithm14 = load($__require('1f0'));
    var gcd = typed('gcd', {
      'number, number': _gcd,
      'BigNumber, BigNumber': _gcdBigNumber,
      'Fraction, Fraction': function(x, y) {
        return x.gcd(y);
      },
      'Matrix, Matrix': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            switch (y.storage()) {
              case 'sparse':
                c = algorithm04(x, y, gcd);
                break;
              default:
                c = algorithm01(y, x, gcd, true);
                break;
            }
            break;
          default:
            switch (y.storage()) {
              case 'sparse':
                c = algorithm01(x, y, gcd, false);
                break;
              default:
                c = algorithm13(x, y, gcd);
                break;
            }
            break;
        }
        return c;
      },
      'Array, Array': function(x, y) {
        return gcd(matrix(x), matrix(y)).valueOf();
      },
      'Array, Matrix': function(x, y) {
        return gcd(matrix(x), y);
      },
      'Matrix, Array': function(x, y) {
        return gcd(x, matrix(y));
      },
      'Matrix, number | BigNumber': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            c = algorithm10(x, y, gcd, false);
            break;
          default:
            c = algorithm14(x, y, gcd, false);
            break;
        }
        return c;
      },
      'number | BigNumber, Matrix': function(x, y) {
        var c;
        switch (y.storage()) {
          case 'sparse':
            c = algorithm10(y, x, gcd, true);
            break;
          default:
            c = algorithm14(y, x, gcd, true);
            break;
        }
        return c;
      },
      'Array, number | BigNumber': function(x, y) {
        return algorithm14(matrix(x), y, gcd, false).valueOf();
      },
      'number | BigNumber, Array': function(x, y) {
        return algorithm14(matrix(y), x, gcd, true).valueOf();
      },
      'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function(a, b, args) {
        var res = gcd(a, b);
        for (var i = 0; i < args.length; i++) {
          res = gcd(res, args[i]);
        }
        return res;
      }
    });
    gcd.toTex = '\\gcd\\left(${args}\\right)';
    return gcd;
    function _gcdBigNumber(a, b) {
      if (!a.isInt() || !b.isInt()) {
        throw new Error('Parameters in function gcd must be integer numbers');
      }
      var zero = new type.BigNumber(0);
      while (!b.isZero()) {
        var r = a.mod(b);
        a = b;
        b = r;
      }
      return a.lt(zero) ? a.neg() : a;
    }
  }
  function _gcd(a, b) {
    if (!isInteger(a) || !isInteger(b)) {
      throw new Error('Parameters in function gcd must be integer numbers');
    }
    var r;
    while (b != 0) {
      r = a % b;
      a = b;
      b = r;
    }
    return (a < 0) ? -a : a;
  }
  exports.name = 'gcd';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1fc", ["da", "1c4", "1bf", "1c2", "1c1", "1fd", "c4", "1fe", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var flatten = $__require('da').flatten;
  function factory(type, config, load, typed) {
    var abs = load($__require('1c4'));
    var add = load($__require('1bf'));
    var divide = load($__require('1c2'));
    var multiply = load($__require('1c1'));
    var sqrt = load($__require('1fd'));
    var smaller = load($__require('c4'));
    var isPositive = load($__require('1fe'));
    var hypot = typed('hypot', {
      '... number | BigNumber': _hypot,
      'Array': function(x) {
        return hypot.apply(hypot, flatten(x));
      },
      'Matrix': function(x) {
        return hypot.apply(hypot, flatten(x.toArray()));
      }
    });
    function _hypot(args) {
      var result = 0;
      var largest = 0;
      for (var i = 0; i < args.length; i++) {
        var value = abs(args[i]);
        if (smaller(largest, value)) {
          result = multiply(result, multiply(divide(largest, value), divide(largest, value)));
          result = add(result, 1);
          largest = value;
        } else {
          result = add(result, isPositive(value) ? multiply(divide(value, largest), divide(value, largest)) : value);
        }
      }
      return multiply(largest, sqrt(result));
    }
    hypot.toTex = '\\hypot\\left(${args}\\right)';
    return hypot;
  }
  exports.name = 'hypot';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1ff", ["a2", "cd", "1ec", "200", "1ee", "1ef", "1f0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var isInteger = $__require('a2').isInteger;
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var algorithm02 = load($__require('1ec'));
    var algorithm06 = load($__require('200'));
    var algorithm11 = load($__require('1ee'));
    var algorithm13 = load($__require('1ef'));
    var algorithm14 = load($__require('1f0'));
    var lcm = typed('lcm', {
      'number, number': _lcm,
      'BigNumber, BigNumber': _lcmBigNumber,
      'Fraction, Fraction': function(x, y) {
        return x.lcm(y);
      },
      'Matrix, Matrix': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            switch (y.storage()) {
              case 'sparse':
                c = algorithm06(x, y, lcm);
                break;
              default:
                c = algorithm02(y, x, lcm, true);
                break;
            }
            break;
          default:
            switch (y.storage()) {
              case 'sparse':
                c = algorithm02(x, y, lcm, false);
                break;
              default:
                c = algorithm13(x, y, lcm);
                break;
            }
            break;
        }
        return c;
      },
      'Array, Array': function(x, y) {
        return lcm(matrix(x), matrix(y)).valueOf();
      },
      'Array, Matrix': function(x, y) {
        return lcm(matrix(x), y);
      },
      'Matrix, Array': function(x, y) {
        return lcm(x, matrix(y));
      },
      'Matrix, number | BigNumber': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            c = algorithm11(x, y, lcm, false);
            break;
          default:
            c = algorithm14(x, y, lcm, false);
            break;
        }
        return c;
      },
      'number | BigNumber, Matrix': function(x, y) {
        var c;
        switch (y.storage()) {
          case 'sparse':
            c = algorithm11(y, x, lcm, true);
            break;
          default:
            c = algorithm14(y, x, lcm, true);
            break;
        }
        return c;
      },
      'Array, number | BigNumber': function(x, y) {
        return algorithm14(matrix(x), y, lcm, false).valueOf();
      },
      'number | BigNumber, Array': function(x, y) {
        return algorithm14(matrix(y), x, lcm, true).valueOf();
      },
      'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function(a, b, args) {
        var res = lcm(a, b);
        for (var i = 0; i < args.length; i++) {
          res = lcm(res, args[i]);
        }
        return res;
      }
    });
    lcm.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return lcm;
    function _lcmBigNumber(a, b) {
      if (!a.isInt() || !b.isInt()) {
        throw new Error('Parameters in function lcm must be integer numbers');
      }
      if (a.isZero() || b.isZero()) {
        return new type.BigNumber(0);
      }
      var prod = a.times(b);
      while (!b.isZero()) {
        var t = b;
        b = a.mod(t);
        a = t;
      }
      return prod.div(a).abs();
    }
  }
  function _lcm(a, b) {
    if (!isInteger(a) || !isInteger(b)) {
      throw new Error('Parameters in function lcm must be integer numbers');
    }
    if (a == 0 || b == 0) {
      return 0;
    }
    var t;
    var prod = a * b;
    while (b != 0) {
      t = b;
      b = a % t;
      a = t;
    }
    return Math.abs(prod / a);
  }
  exports.name = 'lcm';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("201", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var log10 = typed('log10', {
      'number': function(x) {
        if (x >= 0 || config.predictable) {
          return Math.log(x) / Math.LN10;
        } else {
          return new type.Complex(x, 0).log().div(Math.LN10);
        }
      },
      'Complex': function(x) {
        return new type.Complex(x).log().div(Math.LN10);
      },
      'BigNumber': function(x) {
        if (!x.isNegative() || config.predictable) {
          return x.log();
        } else {
          return new type.Complex(x.toNumber(), 0).log().div(Math.LN10);
        }
      },
      'Array | Matrix': function(x) {
        return deepMap(x, log10);
      }
    });
    log10.toTex = '\\log_{10}\\left(${args[0]}\\right)';
    return log10;
  }
  exports.name = 'log10';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("202", ["cd", "b5", "1ec", "1f2", "203", "1ee", "1f4", "1ef", "1f0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var latex = $__require('b5');
    var algorithm02 = load($__require('1ec'));
    var algorithm03 = load($__require('1f2'));
    var algorithm05 = load($__require('203'));
    var algorithm11 = load($__require('1ee'));
    var algorithm12 = load($__require('1f4'));
    var algorithm13 = load($__require('1ef'));
    var algorithm14 = load($__require('1f0'));
    var mod = typed('mod', {
      'number, number': _mod,
      'BigNumber, BigNumber': function(x, y) {
        return y.isZero() ? x : x.mod(y);
      },
      'Fraction, Fraction': function(x, y) {
        return x.mod(y);
      },
      'Matrix, Matrix': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            switch (y.storage()) {
              case 'sparse':
                c = algorithm05(x, y, mod, false);
                break;
              default:
                c = algorithm02(y, x, mod, true);
                break;
            }
            break;
          default:
            switch (y.storage()) {
              case 'sparse':
                c = algorithm03(x, y, mod, false);
                break;
              default:
                c = algorithm13(x, y, mod);
                break;
            }
            break;
        }
        return c;
      },
      'Array, Array': function(x, y) {
        return mod(matrix(x), matrix(y)).valueOf();
      },
      'Array, Matrix': function(x, y) {
        return mod(matrix(x), y);
      },
      'Matrix, Array': function(x, y) {
        return mod(x, matrix(y));
      },
      'Matrix, any': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            c = algorithm11(x, y, mod, false);
            break;
          default:
            c = algorithm14(x, y, mod, false);
            break;
        }
        return c;
      },
      'any, Matrix': function(x, y) {
        var c;
        switch (y.storage()) {
          case 'sparse':
            c = algorithm12(y, x, mod, true);
            break;
          default:
            c = algorithm14(y, x, mod, true);
            break;
        }
        return c;
      },
      'Array, any': function(x, y) {
        return algorithm14(matrix(x), y, mod, false).valueOf();
      },
      'any, Array': function(x, y) {
        return algorithm14(matrix(y), x, mod, true).valueOf();
      }
    });
    mod.toTex = '\\left(${args[0]}' + latex.operators['mod'] + '${args[1]}\\right)';
    return mod;
    function _mod(x, y) {
      if (y > 0) {
        return x - y * Math.floor(x / y);
      } else if (y === 0) {
        return x;
      } else {
        throw new Error('Cannot calculate mod for a negative divisor');
      }
    }
  }
  exports.name = 'mod';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("204", ["1c4", "c2", "1c3", "1fd", "1d0", "c0", "c5", "c4", "cd", "205", "1d1", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var abs = load($__require('1c4'));
    var add = load($__require('c2'));
    var pow = load($__require('1c3'));
    var sqrt = load($__require('1fd'));
    var multiply = load($__require('1d0'));
    var equalScalar = load($__require('c0'));
    var larger = load($__require('c5'));
    var smaller = load($__require('c4'));
    var matrix = load($__require('cd'));
    var trace = load($__require('205'));
    var transpose = load($__require('1d1'));
    var norm = typed('norm', {
      'number': Math.abs,
      'Complex': function(x) {
        return x.abs();
      },
      'BigNumber': function(x) {
        return x.abs();
      },
      'boolean | null': function(x) {
        return Math.abs(x);
      },
      'Array': function(x) {
        return _norm(matrix(x), 2);
      },
      'Matrix': function(x) {
        return _norm(x, 2);
      },
      'number | Complex | BigNumber | boolean | null, number | BigNumber | string': function(x) {
        return norm(x);
      },
      'Array, number | BigNumber | string': function(x, p) {
        return _norm(matrix(x), p);
      },
      'Matrix, number | BigNumber | string': function(x, p) {
        return _norm(x, p);
      }
    });
    function _norm(x, p) {
      var sizeX = x.size();
      if (sizeX.length == 1) {
        if (p === Number.POSITIVE_INFINITY || p === 'inf') {
          var pinf = 0;
          x.forEach(function(value) {
            var v = abs(value);
            if (larger(v, pinf))
              pinf = v;
          }, true);
          return pinf;
        }
        if (p === Number.NEGATIVE_INFINITY || p === '-inf') {
          var ninf;
          x.forEach(function(value) {
            var v = abs(value);
            if (!ninf || smaller(v, ninf))
              ninf = v;
          }, true);
          return ninf || 0;
        }
        if (p === 'fro') {
          return _norm(x, 2);
        }
        if (typeof p === 'number' && !isNaN(p)) {
          if (!equalScalar(p, 0)) {
            var n = 0;
            x.forEach(function(value) {
              n = add(pow(abs(value), p), n);
            }, true);
            return pow(n, 1 / p);
          }
          return Number.POSITIVE_INFINITY;
        }
        throw new Error('Unsupported parameter value');
      }
      if (sizeX.length == 2) {
        if (p === 1) {
          var c = [];
          var maxc = 0;
          x.forEach(function(value, index) {
            var j = index[1];
            var cj = add(c[j] || 0, abs(value));
            if (larger(cj, maxc))
              maxc = cj;
            c[j] = cj;
          }, true);
          return maxc;
        }
        if (p === Number.POSITIVE_INFINITY || p === 'inf') {
          var r = [];
          var maxr = 0;
          x.forEach(function(value, index) {
            var i = index[0];
            var ri = add(r[i] || 0, abs(value));
            if (larger(ri, maxr))
              maxr = ri;
            r[i] = ri;
          }, true);
          return maxr;
        }
        if (p === 'fro') {
          return sqrt(trace(multiply(transpose(x), x)));
        }
        if (p === 2) {
          throw new Error('Unsupported parameter value, missing implementation of matrix singular value decomposition');
        }
        throw new Error('Unsupported parameter value');
      }
    }
    norm.toTex = {
      1: '\\left\\|${args[0]}\\right\\|',
      2: '\\mathrm{${name}}\\left(${args}\\right)'
    };
    return norm;
  }
  exports.name = 'norm';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("206", ["cd", "1f9", "1ec", "200", "1ee", "1ef", "1f0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var algorithm01 = load($__require('1f9'));
    var algorithm02 = load($__require('1ec'));
    var algorithm06 = load($__require('200'));
    var algorithm11 = load($__require('1ee'));
    var algorithm13 = load($__require('1ef'));
    var algorithm14 = load($__require('1f0'));
    var nthRoot = typed('nthRoot', {
      'number': function(x) {
        return _nthRoot(x, 2);
      },
      'number, number': _nthRoot,
      'BigNumber': function(x) {
        return _bigNthRoot(x, new type.BigNumber(2));
      },
      'Complex': function(x) {
        return _nthComplexRoot(x, 2);
      },
      'Complex, number': _nthComplexRoot,
      'BigNumber, BigNumber': _bigNthRoot,
      'Array | Matrix': function(x) {
        return nthRoot(x, 2);
      },
      'Matrix, Matrix': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            switch (y.storage()) {
              case 'sparse':
                if (y.density() === 1) {
                  c = algorithm06(x, y, nthRoot);
                } else {
                  throw new Error('Root must be non-zero');
                }
                break;
              default:
                c = algorithm02(y, x, nthRoot, true);
                break;
            }
            break;
          default:
            switch (y.storage()) {
              case 'sparse':
                if (y.density() === 1) {
                  c = algorithm01(x, y, nthRoot, false);
                } else {
                  throw new Error('Root must be non-zero');
                }
                break;
              default:
                c = algorithm13(x, y, nthRoot);
                break;
            }
            break;
        }
        return c;
      },
      'Array, Array': function(x, y) {
        return nthRoot(matrix(x), matrix(y)).valueOf();
      },
      'Array, Matrix': function(x, y) {
        return nthRoot(matrix(x), y);
      },
      'Matrix, Array': function(x, y) {
        return nthRoot(x, matrix(y));
      },
      'Matrix, number | BigNumber': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            c = algorithm11(x, y, nthRoot, false);
            break;
          default:
            c = algorithm14(x, y, nthRoot, false);
            break;
        }
        return c;
      },
      'number | BigNumber, Matrix': function(x, y) {
        var c;
        switch (y.storage()) {
          case 'sparse':
            if (y.density() === 1) {
              c = algorithm11(y, x, nthRoot, true);
            } else {
              throw new Error('Root must be non-zero');
            }
            break;
          default:
            c = algorithm14(y, x, nthRoot, true);
            break;
        }
        return c;
      },
      'Array, number | BigNumber': function(x, y) {
        return nthRoot(matrix(x), y).valueOf();
      },
      'number | BigNumber, Array': function(x, y) {
        return nthRoot(x, matrix(y)).valueOf();
      }
    });
    nthRoot.toTex = '\\sqrt[${args[1]}]{${args[0]}}';
    return nthRoot;
    function _bigNthRoot(a, root) {
      var precision = type.BigNumber.precision;
      var Big = type.BigNumber.clone({precision: precision + 2});
      var zero = new type.BigNumber(0);
      var one = new Big(1);
      var inv = root.isNegative();
      if (inv) {
        root = root.neg();
      }
      if (root.isZero()) {
        throw new Error('Root must be non-zero');
      }
      if (a.isNegative() && !root.abs().mod(2).equals(1)) {
        throw new Error('Root must be odd when a is negative.');
      }
      if (a.isZero()) {
        return zero;
      }
      if (!a.isFinite()) {
        return inv ? zero : a;
      }
      var x = a.abs().pow(one.div(root));
      x = a.isNeg() ? x.neg() : x;
      return new type.BigNumber((inv ? one.div(x) : x).toPrecision(precision));
    }
  }
  function _nthRoot(a, root) {
    var inv = root < 0;
    if (inv) {
      root = -root;
    }
    if (root === 0) {
      throw new Error('Root must be non-zero');
    }
    if (a < 0 && (Math.abs(root) % 2 != 1)) {
      throw new Error('Root must be odd when a is negative.');
    }
    if (a == 0) {
      return 0;
    }
    if (!isFinite(a)) {
      return inv ? 0 : a;
    }
    var x = Math.pow(Math.abs(a), 1 / root);
    x = a < 0 ? -x : x;
    return inv ? 1 / x : x;
  }
  function _nthComplexRoot(a, root) {
    if (root < 0)
      throw new Error('Root must be greater than zero');
    if (root === 0)
      throw new Error('Root must be non-zero');
    if (root % 1 !== 0)
      throw new Error('Root must be an integer');
    var arg = a.arg();
    var abs = a.abs();
    var roots = [];
    var r = Math.pow(abs, 1 / root);
    for (var k = 0; k < root; k++) {
      roots.push({
        r: r,
        phi: (arg + 2 * Math.PI * k) / root
      });
    }
    return roots;
  }
  exports.name = 'nthRoot';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("207", ["a2", "ad", "cd", "c0", "208", "1ee", "1f4", "1f0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var isInteger = $__require('a2').isInteger;
  var toFixed = $__require('a2').toFixed;
  var deepMap = $__require('ad');
  var NO_INT = 'Number of decimals in function round must be an integer';
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var equalScalar = load($__require('c0'));
    var zeros = load($__require('208'));
    var algorithm11 = load($__require('1ee'));
    var algorithm12 = load($__require('1f4'));
    var algorithm14 = load($__require('1f0'));
    var round = typed('round', {
      'number': Math.round,
      'number, number': function(x, n) {
        if (!isInteger(n)) {
          throw new TypeError(NO_INT);
        }
        if (n < 0 || n > 15) {
          throw new Error('Number of decimals in function round must be in te range of 0-15');
        }
        return _round(x, n);
      },
      'Complex': function(x) {
        return x.round();
      },
      'Complex, number': function(x, n) {
        if (n % 1) {
          throw new TypeError(NO_INT);
        }
        return x.round(n);
      },
      'Complex, BigNumber': function(x, n) {
        if (!n.isInteger()) {
          throw new TypeError(NO_INT);
        }
        var _n = n.toNumber();
        return x.round(_n);
      },
      'number, BigNumber': function(x, n) {
        if (!n.isInteger()) {
          throw new TypeError(NO_INT);
        }
        return new type.BigNumber(x).toDecimalPlaces(n.toNumber());
      },
      'BigNumber': function(x) {
        return x.toDecimalPlaces(0);
      },
      'BigNumber, BigNumber': function(x, n) {
        if (!n.isInteger()) {
          throw new TypeError(NO_INT);
        }
        return x.toDecimalPlaces(n.toNumber());
      },
      'Fraction': function(x) {
        return x.round();
      },
      'Fraction, number': function(x, n) {
        if (n % 1) {
          throw new TypeError(NO_INT);
        }
        return x.round(n);
      },
      'Array | Matrix': function(x) {
        return deepMap(x, round, true);
      },
      'Matrix, number | BigNumber': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            c = algorithm11(x, y, round, false);
            break;
          default:
            c = algorithm14(x, y, round, false);
            break;
        }
        return c;
      },
      'number | Complex | BigNumber, Matrix': function(x, y) {
        if (!equalScalar(x, 0)) {
          var c;
          switch (y.storage()) {
            case 'sparse':
              c = algorithm12(y, x, round, true);
              break;
            default:
              c = algorithm14(y, x, round, true);
              break;
          }
          return c;
        }
        return zeros(y.size(), y.storage());
      },
      'Array, number | BigNumber': function(x, y) {
        return algorithm14(matrix(x), y, round, false).valueOf();
      },
      'number | Complex | BigNumber, Array': function(x, y) {
        return algorithm14(matrix(y), x, round, true).valueOf();
      }
    });
    round.toTex = {
      1: '\\left\\lfloor${args[0]}\\right\\rceil',
      2: '\\mathrm{${name}}\\left(${args}\\right)'
    };
    return round;
  }
  function _round(value, decimals) {
    return parseFloat(toFixed(value, decimals));
  }
  exports.name = 'round';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("209", ["a2", "ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var number = $__require('a2');
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var sign = typed('sign', {
      'number': number.sign,
      'Complex': function(x) {
        return x.sign();
      },
      'BigNumber': function(x) {
        return new type.BigNumber(x.cmp(0));
      },
      'Fraction': function(x) {
        return new type.Fraction(x.s, 1);
      },
      'Array | Matrix': function(x) {
        return deepMap(x, sign, true);
      },
      'Unit': function(x) {
        return sign(x.value);
      }
    });
    sign.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return sign;
  }
  exports.name = 'sign';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("20a", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var square = typed('square', {
      'number': function(x) {
        return x * x;
      },
      'Complex': function(x) {
        return x.mul(x);
      },
      'BigNumber': function(x) {
        return x.times(x);
      },
      'Fraction': function(x) {
        return x.mul(x);
      },
      'Array | Matrix': function(x) {
        return deepMap(x, square, true);
      },
      'Unit': function(x) {
        return x.pow(2);
      }
    });
    square.toTex = '\\left(${args[0]}\\right)^2';
    return square;
  }
  exports.name = 'square';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("20b", ["ad", "b5", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var latex = $__require('b5');
    var unaryPlus = typed('unaryPlus', {
      'number': function(x) {
        return x;
      },
      'Complex': function(x) {
        return x;
      },
      'BigNumber': function(x) {
        return x;
      },
      'Fraction': function(x) {
        return x;
      },
      'Unit': function(x) {
        return x.clone();
      },
      'Array | Matrix': function(x) {
        return deepMap(x, unaryPlus, true);
      },
      'boolean | string | null': function(x) {
        return (config.number == 'BigNumber') ? new type.BigNumber(+x) : +x;
      }
    });
    unaryPlus.toTex = latex.operators['unaryPlus'] + '\\left(${args[0]}\\right)';
    return unaryPlus;
  }
  exports.name = 'unaryPlus';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("20c", ["a2", "cd", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var isInteger = $__require('a2').isInteger;
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var xgcd = typed('xgcd', {
      'number, number': _xgcd,
      'BigNumber, BigNumber': _xgcdBigNumber
    });
    xgcd.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return xgcd;
    function _xgcd(a, b) {
      var t,
          q,
          r,
          x = 0,
          lastx = 1,
          y = 1,
          lasty = 0;
      if (!isInteger(a) || !isInteger(b)) {
        throw new Error('Parameters in function xgcd must be integer numbers');
      }
      while (b) {
        q = Math.floor(a / b);
        r = a % b;
        t = x;
        x = lastx - q * x;
        lastx = t;
        t = y;
        y = lasty - q * y;
        lasty = t;
        a = b;
        b = r;
      }
      var res;
      if (a < 0) {
        res = [-a, -lastx, -lasty];
      } else {
        res = [a, a ? lastx : 0, lasty];
      }
      return (config.matrix === 'Array') ? res : matrix(res);
    }
    function _xgcdBigNumber(a, b) {
      var t,
          q,
          r,
          zero = new type.BigNumber(0),
          one = new type.BigNumber(1),
          x = zero,
          lastx = one,
          y = one,
          lasty = zero;
      if (!a.isInt() || !b.isInt()) {
        throw new Error('Parameters in function xgcd must be integer numbers');
      }
      while (!b.isZero()) {
        q = a.div(b).floor();
        r = a.mod(b);
        t = x;
        x = lastx.minus(q.times(x));
        lastx = t;
        t = y;
        y = lasty.minus(q.times(y));
        lasty = t;
        a = b;
        b = r;
      }
      var res;
      if (a.lt(zero)) {
        res = [a.neg(), lastx.neg(), lasty.neg()];
      } else {
        res = [a, !a.isZero() ? lastx : 0, lasty];
      }
      return (config.matrix === 'Array') ? res : matrix(res);
    }
  }
  exports.name = 'xgcd';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("20d", ["1c4", "c2", "1bf", "1e7", "1e9", "1ea", "20e", "20f", "1eb", "1f1", "1f5", "1f6", "1f7", "1f8", "1fc", "1ff", "210", "201", "202", "1d0", "204", "206", "1c3", "207", "209", "1fd", "20a", "1c0", "1cb", "20b", "20c", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = [$__require('1c4'), $__require('c2'), $__require('1bf'), $__require('1e7'), $__require('1e9'), $__require('1ea'), $__require('20e'), $__require('20f'), $__require('1eb'), $__require('1f1'), $__require('1f5'), $__require('1f6'), $__require('1f7'), $__require('1f8'), $__require('1fc'), $__require('1ff'), $__require('210'), $__require('201'), $__require('202'), $__require('1d0'), $__require('204'), $__require('206'), $__require('1c3'), $__require('207'), $__require('209'), $__require('1fd'), $__require('20a'), $__require('1c0'), $__require('1cb'), $__require('20b'), $__require('20c')];
  return module.exports;
});

$__System.registerDynamic("211", ["212", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var bitwise = $__require('212');
  module.exports = function bitAnd(x, y) {
    if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {
      throw new Error('Integers expected in function bitAnd');
    }
    var BigNumber = x.constructor;
    if (x.isNaN() || y.isNaN()) {
      return new BigNumber(NaN);
    }
    if (x.isZero() || y.eq(-1) || x.eq(y)) {
      return x;
    }
    if (y.isZero() || x.eq(-1)) {
      return y;
    }
    if (!x.isFinite() || !y.isFinite()) {
      if (!x.isFinite() && !y.isFinite()) {
        if (x.isNegative() == y.isNegative()) {
          return x;
        }
        return new BigNumber(0);
      }
      if (!x.isFinite()) {
        if (y.isNegative()) {
          return x;
        }
        if (x.isNegative()) {
          return new BigNumber(0);
        }
        return y;
      }
      if (!y.isFinite()) {
        if (x.isNegative()) {
          return y;
        }
        if (y.isNegative()) {
          return new BigNumber(0);
        }
        return x;
      }
    }
    return bitwise(x, y, function(a, b) {
      return a & b;
    });
  };
  return module.exports;
});

$__System.registerDynamic("213", ["a2", "211", "b5", "cd", "1ec", "200", "1ee", "1ef", "1f0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var isInteger = $__require('a2').isInteger;
  var bigBitAnd = $__require('211');
  function factory(type, config, load, typed) {
    var latex = $__require('b5');
    var matrix = load($__require('cd'));
    var algorithm02 = load($__require('1ec'));
    var algorithm06 = load($__require('200'));
    var algorithm11 = load($__require('1ee'));
    var algorithm13 = load($__require('1ef'));
    var algorithm14 = load($__require('1f0'));
    var bitAnd = typed('bitAnd', {
      'number, number': function(x, y) {
        if (!isInteger(x) || !isInteger(y)) {
          throw new Error('Integers expected in function bitAnd');
        }
        return x & y;
      },
      'BigNumber, BigNumber': bigBitAnd,
      'Matrix, Matrix': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            switch (y.storage()) {
              case 'sparse':
                c = algorithm06(x, y, bitAnd, false);
                break;
              default:
                c = algorithm02(y, x, bitAnd, true);
                break;
            }
            break;
          default:
            switch (y.storage()) {
              case 'sparse':
                c = algorithm02(x, y, bitAnd, false);
                break;
              default:
                c = algorithm13(x, y, bitAnd);
                break;
            }
            break;
        }
        return c;
      },
      'Array, Array': function(x, y) {
        return bitAnd(matrix(x), matrix(y)).valueOf();
      },
      'Array, Matrix': function(x, y) {
        return bitAnd(matrix(x), y);
      },
      'Matrix, Array': function(x, y) {
        return bitAnd(x, matrix(y));
      },
      'Matrix, any': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            c = algorithm11(x, y, bitAnd, false);
            break;
          default:
            c = algorithm14(x, y, bitAnd, false);
            break;
        }
        return c;
      },
      'any, Matrix': function(x, y) {
        var c;
        switch (y.storage()) {
          case 'sparse':
            c = algorithm11(y, x, bitAnd, true);
            break;
          default:
            c = algorithm14(y, x, bitAnd, true);
            break;
        }
        return c;
      },
      'Array, any': function(x, y) {
        return algorithm14(matrix(x), y, bitAnd, false).valueOf();
      },
      'any, Array': function(x, y) {
        return algorithm14(matrix(y), x, bitAnd, true).valueOf();
      }
    });
    bitAnd.toTex = '\\left(${args[0]}' + latex.operators['bitAnd'] + '${args[1]}\\right)';
    return bitAnd;
  }
  exports.name = 'bitAnd';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("214", ["ad", "215", "a2", "b5", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  var bigBitNot = $__require('215');
  var isInteger = $__require('a2').isInteger;
  function factory(type, config, load, typed) {
    var latex = $__require('b5');
    var bitNot = typed('bitNot', {
      'number': function(x) {
        if (!isInteger(x)) {
          throw new Error('Integer expected in function bitNot');
        }
        return ~x;
      },
      'BigNumber': bigBitNot,
      'Array | Matrix': function(x) {
        return deepMap(x, bitNot);
      }
    });
    bitNot.toTex = latex.operators['bitNot'] + '\\left(${args[0]}\\right)';
    return bitNot;
  }
  exports.name = 'bitNot';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("216", ["212", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var bitwise = $__require('212');
  module.exports = function bitOr(x, y) {
    if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {
      throw new Error('Integers expected in function bitOr');
    }
    var BigNumber = x.constructor;
    if (x.isNaN() || y.isNaN()) {
      return new BigNumber(NaN);
    }
    var negOne = new BigNumber(-1);
    if (x.isZero() || y.eq(negOne) || x.eq(y)) {
      return y;
    }
    if (y.isZero() || x.eq(negOne)) {
      return x;
    }
    if (!x.isFinite() || !y.isFinite()) {
      if ((!x.isFinite() && !x.isNegative() && y.isNegative()) || (x.isNegative() && !y.isNegative() && !y.isFinite())) {
        return negOne;
      }
      if (x.isNegative() && y.isNegative()) {
        return x.isFinite() ? x : y;
      }
      return x.isFinite() ? y : x;
    }
    return bitwise(x, y, function(a, b) {
      return a | b;
    });
  };
  return module.exports;
});

$__System.registerDynamic("217", ["a2", "216", "b5", "cd", "1f9", "1fa", "1fb", "1ef", "1f0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var isInteger = $__require('a2').isInteger;
  var bigBitOr = $__require('216');
  function factory(type, config, load, typed) {
    var latex = $__require('b5');
    var matrix = load($__require('cd'));
    var algorithm01 = load($__require('1f9'));
    var algorithm04 = load($__require('1fa'));
    var algorithm10 = load($__require('1fb'));
    var algorithm13 = load($__require('1ef'));
    var algorithm14 = load($__require('1f0'));
    var bitOr = typed('bitOr', {
      'number, number': function(x, y) {
        if (!isInteger(x) || !isInteger(y)) {
          throw new Error('Integers expected in function bitOr');
        }
        return x | y;
      },
      'BigNumber, BigNumber': bigBitOr,
      'Matrix, Matrix': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            switch (y.storage()) {
              case 'sparse':
                c = algorithm04(x, y, bitOr);
                break;
              default:
                c = algorithm01(y, x, bitOr, true);
                break;
            }
            break;
          default:
            switch (y.storage()) {
              case 'sparse':
                c = algorithm01(x, y, bitOr, false);
                break;
              default:
                c = algorithm13(x, y, bitOr);
                break;
            }
            break;
        }
        return c;
      },
      'Array, Array': function(x, y) {
        return bitOr(matrix(x), matrix(y)).valueOf();
      },
      'Array, Matrix': function(x, y) {
        return bitOr(matrix(x), y);
      },
      'Matrix, Array': function(x, y) {
        return bitOr(x, matrix(y));
      },
      'Matrix, any': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            c = algorithm10(x, y, bitOr, false);
            break;
          default:
            c = algorithm14(x, y, bitOr, false);
            break;
        }
        return c;
      },
      'any, Matrix': function(x, y) {
        var c;
        switch (y.storage()) {
          case 'sparse':
            c = algorithm10(y, x, bitOr, true);
            break;
          default:
            c = algorithm14(y, x, bitOr, true);
            break;
        }
        return c;
      },
      'Array, any': function(x, y) {
        return algorithm14(matrix(x), y, bitOr, false).valueOf();
      },
      'any, Array': function(x, y) {
        return algorithm14(matrix(y), x, bitOr, true).valueOf();
      }
    });
    bitOr.toTex = '\\left(${args[0]}' + latex.operators['bitOr'] + '${args[1]}\\right)';
    return bitOr;
  }
  exports.name = 'bitOr';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("212", ["215", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var bitNot = $__require('215');
  module.exports = function bitwise(x, y, func) {
    var BigNumber = x.constructor;
    var xBits,
        yBits;
    var xSign = +(x.s < 0);
    var ySign = +(y.s < 0);
    if (xSign) {
      xBits = decCoefficientToBinaryString(bitNot(x));
      for (var i = 0; i < xBits.length; ++i) {
        xBits[i] ^= 1;
      }
    } else {
      xBits = decCoefficientToBinaryString(x);
    }
    if (ySign) {
      yBits = decCoefficientToBinaryString(bitNot(y));
      for (var i = 0; i < yBits.length; ++i) {
        yBits[i] ^= 1;
      }
    } else {
      yBits = decCoefficientToBinaryString(y);
    }
    var minBits,
        maxBits,
        minSign;
    if (xBits.length <= yBits.length) {
      minBits = xBits;
      maxBits = yBits;
      minSign = xSign;
    } else {
      minBits = yBits;
      maxBits = xBits;
      minSign = ySign;
    }
    var shortLen = minBits.length;
    var longLen = maxBits.length;
    var expFuncVal = func(xSign, ySign) ^ 1;
    var outVal = new BigNumber(expFuncVal ^ 1);
    var twoPower = new BigNumber(1);
    var two = new BigNumber(2);
    var prevPrec = BigNumber.precision;
    BigNumber.config({precision: 1E9});
    while (shortLen > 0) {
      if (func(minBits[--shortLen], maxBits[--longLen]) == expFuncVal) {
        outVal = outVal.plus(twoPower);
      }
      twoPower = twoPower.times(two);
    }
    while (longLen > 0) {
      if (func(minSign, maxBits[--longLen]) == expFuncVal) {
        outVal = outVal.plus(twoPower);
      }
      twoPower = twoPower.times(two);
    }
    BigNumber.config({precision: prevPrec});
    if (expFuncVal == 0) {
      outVal.s = -outVal.s;
    }
    return outVal;
  };
  function decCoefficientToBinaryString(x) {
    var a = x.d;
    var r = a[0] + '';
    for (var i = 1; i < a.length; ++i) {
      var s = a[i] + '';
      for (var z = 7 - s.length; z--; ) {
        s = '0' + s;
      }
      r += s;
    }
    var j;
    for (j = r.length - 1; r.charAt(j) == '0'; --j)
      ;
    var xe = x.e;
    var str = r.slice(0, j + 1 || 1);
    var strL = str.length;
    if (xe > 0) {
      if (++xe > strL) {
        for (xe -= strL; xe--; str += '0')
          ;
      } else if (xe < strL) {
        str = str.slice(0, xe) + '.' + str.slice(xe);
      }
    }
    var arr = [0];
    for (var i = 0; i < str.length; ) {
      for (var arrL = arr.length; arrL--; arr[arrL] *= 10)
        ;
      arr[0] += str.charAt(i++) << 0;
      for (var j = 0; j < arr.length; ++j) {
        if (arr[j] > 1) {
          if (arr[j + 1] == null) {
            arr[j + 1] = 0;
          }
          arr[j + 1] += arr[j] >> 1;
          arr[j] &= 1;
        }
      }
    }
    return arr.reverse();
  }
  return module.exports;
});

$__System.registerDynamic("215", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = function bitNot(x) {
    if (x.isFinite() && !x.isInteger()) {
      throw new Error('Integer expected in function bitNot');
    }
    var BigNumber = x.constructor;
    var prevPrec = BigNumber.precision;
    BigNumber.config({precision: 1E9});
    var x = x.plus(new BigNumber(1));
    x.s = -x.s || null;
    BigNumber.config({precision: prevPrec});
    return x;
  };
  return module.exports;
});

$__System.registerDynamic("218", ["212", "215", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var bitwise = $__require('212');
  var bitNot = $__require('215');
  module.exports = function bitXor(x, y) {
    if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {
      throw new Error('Integers expected in function bitXor');
    }
    var BigNumber = x.constructor;
    if (x.isNaN() || y.isNaN()) {
      return new BigNumber(NaN);
    }
    if (x.isZero()) {
      return y;
    }
    if (y.isZero()) {
      return x;
    }
    if (x.eq(y)) {
      return new BigNumber(0);
    }
    var negOne = new BigNumber(-1);
    if (x.eq(negOne)) {
      return bitNot(y);
    }
    if (y.eq(negOne)) {
      return bitNot(x);
    }
    if (!x.isFinite() || !y.isFinite()) {
      if (!x.isFinite() && !y.isFinite()) {
        return negOne;
      }
      return new BigNumber(x.isNegative() == y.isNegative() ? Infinity : -Infinity);
    }
    return bitwise(x, y, function(a, b) {
      return a ^ b;
    });
  };
  return module.exports;
});

$__System.registerDynamic("219", ["a2", "218", "b5", "cd", "1f2", "1f3", "1f4", "1ef", "1f0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var isInteger = $__require('a2').isInteger;
  var bigBitXor = $__require('218');
  function factory(type, config, load, typed) {
    var latex = $__require('b5');
    var matrix = load($__require('cd'));
    var algorithm03 = load($__require('1f2'));
    var algorithm07 = load($__require('1f3'));
    var algorithm12 = load($__require('1f4'));
    var algorithm13 = load($__require('1ef'));
    var algorithm14 = load($__require('1f0'));
    var bitXor = typed('bitXor', {
      'number, number': function(x, y) {
        if (!isInteger(x) || !isInteger(y)) {
          throw new Error('Integers expected in function bitXor');
        }
        return x ^ y;
      },
      'BigNumber, BigNumber': bigBitXor,
      'Matrix, Matrix': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            switch (y.storage()) {
              case 'sparse':
                c = algorithm07(x, y, bitXor);
                break;
              default:
                c = algorithm03(y, x, bitXor, true);
                break;
            }
            break;
          default:
            switch (y.storage()) {
              case 'sparse':
                c = algorithm03(x, y, bitXor, false);
                break;
              default:
                c = algorithm13(x, y, bitXor);
                break;
            }
            break;
        }
        return c;
      },
      'Array, Array': function(x, y) {
        return bitXor(matrix(x), matrix(y)).valueOf();
      },
      'Array, Matrix': function(x, y) {
        return bitXor(matrix(x), y);
      },
      'Matrix, Array': function(x, y) {
        return bitXor(x, matrix(y));
      },
      'Matrix, any': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            c = algorithm12(x, y, bitXor, false);
            break;
          default:
            c = algorithm14(x, y, bitXor, false);
            break;
        }
        return c;
      },
      'any, Matrix': function(x, y) {
        var c;
        switch (y.storage()) {
          case 'sparse':
            c = algorithm12(y, x, bitXor, true);
            break;
          default:
            c = algorithm14(y, x, bitXor, true);
            break;
        }
        return c;
      },
      'Array, any': function(x, y) {
        return algorithm14(matrix(x), y, bitXor, false).valueOf();
      },
      'any, Array': function(x, y) {
        return algorithm14(matrix(y), x, bitXor, true).valueOf();
      }
    });
    bitXor.toTex = '\\left(${args[0]}' + latex.operators['bitXor'] + '${args[1]}\\right)';
    return bitXor;
  }
  exports.name = 'bitXor';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("21a", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = function leftShift(x, y) {
    if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {
      throw new Error('Integers expected in function leftShift');
    }
    var BigNumber = x.constructor;
    if (x.isNaN() || y.isNaN() || (y.isNegative() && !y.isZero())) {
      return new BigNumber(NaN);
    }
    if (x.isZero() || y.isZero()) {
      return x;
    }
    if (!x.isFinite() && !y.isFinite()) {
      return new BigNumber(NaN);
    }
    if (y.lt(55)) {
      return x.times(Math.pow(2, y.toNumber()) + '');
    }
    return x.times(new BigNumber(2).pow(y));
  };
  return module.exports;
});

$__System.registerDynamic("21b", ["a2", "21a", "b5", "cd", "c0", "208", "1f9", "1ec", "21c", "1fb", "1ee", "1ef", "1f0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var isInteger = $__require('a2').isInteger;
  var bigLeftShift = $__require('21a');
  function factory(type, config, load, typed) {
    var latex = $__require('b5');
    var matrix = load($__require('cd'));
    var equalScalar = load($__require('c0'));
    var zeros = load($__require('208'));
    var algorithm01 = load($__require('1f9'));
    var algorithm02 = load($__require('1ec'));
    var algorithm08 = load($__require('21c'));
    var algorithm10 = load($__require('1fb'));
    var algorithm11 = load($__require('1ee'));
    var algorithm13 = load($__require('1ef'));
    var algorithm14 = load($__require('1f0'));
    var leftShift = typed('leftShift', {
      'number, number': function(x, y) {
        if (!isInteger(x) || !isInteger(y)) {
          throw new Error('Integers expected in function leftShift');
        }
        return x << y;
      },
      'BigNumber, BigNumber': bigLeftShift,
      'Matrix, Matrix': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            switch (y.storage()) {
              case 'sparse':
                c = algorithm08(x, y, leftShift, false);
                break;
              default:
                c = algorithm02(y, x, leftShift, true);
                break;
            }
            break;
          default:
            switch (y.storage()) {
              case 'sparse':
                c = algorithm01(x, y, leftShift, false);
                break;
              default:
                c = algorithm13(x, y, leftShift);
                break;
            }
            break;
        }
        return c;
      },
      'Array, Array': function(x, y) {
        return leftShift(matrix(x), matrix(y)).valueOf();
      },
      'Array, Matrix': function(x, y) {
        return leftShift(matrix(x), y);
      },
      'Matrix, Array': function(x, y) {
        return leftShift(x, matrix(y));
      },
      'Matrix, number | BigNumber': function(x, y) {
        if (!equalScalar(y, 0)) {
          var c;
          switch (x.storage()) {
            case 'sparse':
              c = algorithm11(x, y, leftShift, false);
              break;
            default:
              c = algorithm14(x, y, leftShift, false);
              break;
          }
          return c;
        }
        return x.clone();
      },
      'number | BigNumber, Matrix': function(x, y) {
        if (!equalScalar(x, 0)) {
          var c;
          switch (y.storage()) {
            case 'sparse':
              c = algorithm10(y, x, leftShift, true);
              break;
            default:
              c = algorithm14(y, x, leftShift, true);
              break;
          }
          return c;
        }
        return zeros(y.size(), y.storage());
      },
      'Array, number | BigNumber': function(x, y) {
        return leftShift(matrix(x), y).valueOf();
      },
      'number | BigNumber, Array': function(x, y) {
        return leftShift(x, matrix(y)).valueOf();
      }
    });
    leftShift.toTex = '\\left(${args[0]}' + latex.operators['leftShift'] + '${args[1]}\\right)';
    return leftShift;
  }
  exports.name = 'leftShift';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("21d", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = function rightArithShift(x, y) {
    if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {
      throw new Error('Integers expected in function rightArithShift');
    }
    var BigNumber = x.constructor;
    if (x.isNaN() || y.isNaN() || (y.isNegative() && !y.isZero())) {
      return new BigNumber(NaN);
    }
    if (x.isZero() || y.isZero()) {
      return x;
    }
    if (!y.isFinite()) {
      if (x.isNegative()) {
        return new BigNumber(-1);
      }
      if (!x.isFinite()) {
        return new BigNumber(NaN);
      }
      return new BigNumber(0);
    }
    if (y.lt(55)) {
      return x.div(Math.pow(2, y.toNumber()) + '').floor();
    }
    return x.div(new BigNumber(2).pow(y)).floor();
  };
  return module.exports;
});

$__System.registerDynamic("21e", ["a2", "21d", "b5", "cd", "c0", "208", "1f9", "1ec", "21c", "1fb", "1ee", "1ef", "1f0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var isInteger = $__require('a2').isInteger;
  var bigRightArithShift = $__require('21d');
  function factory(type, config, load, typed) {
    var latex = $__require('b5');
    var matrix = load($__require('cd'));
    var equalScalar = load($__require('c0'));
    var zeros = load($__require('208'));
    var algorithm01 = load($__require('1f9'));
    var algorithm02 = load($__require('1ec'));
    var algorithm08 = load($__require('21c'));
    var algorithm10 = load($__require('1fb'));
    var algorithm11 = load($__require('1ee'));
    var algorithm13 = load($__require('1ef'));
    var algorithm14 = load($__require('1f0'));
    var rightArithShift = typed('rightArithShift', {
      'number, number': function(x, y) {
        if (!isInteger(x) || !isInteger(y)) {
          throw new Error('Integers expected in function rightArithShift');
        }
        return x >> y;
      },
      'BigNumber, BigNumber': bigRightArithShift,
      'Matrix, Matrix': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            switch (y.storage()) {
              case 'sparse':
                c = algorithm08(x, y, rightArithShift, false);
                break;
              default:
                c = algorithm02(y, x, rightArithShift, true);
                break;
            }
            break;
          default:
            switch (y.storage()) {
              case 'sparse':
                c = algorithm01(x, y, rightArithShift, false);
                break;
              default:
                c = algorithm13(x, y, rightArithShift);
                break;
            }
            break;
        }
        return c;
      },
      'Array, Array': function(x, y) {
        return rightArithShift(matrix(x), matrix(y)).valueOf();
      },
      'Array, Matrix': function(x, y) {
        return rightArithShift(matrix(x), y);
      },
      'Matrix, Array': function(x, y) {
        return rightArithShift(x, matrix(y));
      },
      'Matrix, number | BigNumber': function(x, y) {
        if (!equalScalar(y, 0)) {
          var c;
          switch (x.storage()) {
            case 'sparse':
              c = algorithm11(x, y, rightArithShift, false);
              break;
            default:
              c = algorithm14(x, y, rightArithShift, false);
              break;
          }
          return c;
        }
        return x.clone();
      },
      'number | BigNumber, Matrix': function(x, y) {
        if (!equalScalar(x, 0)) {
          var c;
          switch (y.storage()) {
            case 'sparse':
              c = algorithm10(y, x, rightArithShift, true);
              break;
            default:
              c = algorithm14(y, x, rightArithShift, true);
              break;
          }
          return c;
        }
        return zeros(y.size(), y.storage());
      },
      'Array, number | BigNumber': function(x, y) {
        return rightArithShift(matrix(x), y).valueOf();
      },
      'number | BigNumber, Array': function(x, y) {
        return rightArithShift(x, matrix(y)).valueOf();
      }
    });
    rightArithShift.toTex = '\\left(${args[0]}' + latex.operators['rightArithShift'] + '${args[1]}\\right)';
    return rightArithShift;
  }
  exports.name = 'rightArithShift';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("21c", ["be", "c0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var DimensionError = $__require('be');
  function factory(type, config, load, typed) {
    var equalScalar = load($__require('c0'));
    var SparseMatrix = type.SparseMatrix;
    var algorithm08 = function(a, b, callback) {
      var avalues = a._values;
      var aindex = a._index;
      var aptr = a._ptr;
      var asize = a._size;
      var adt = a._datatype;
      var bvalues = b._values;
      var bindex = b._index;
      var bptr = b._ptr;
      var bsize = b._size;
      var bdt = b._datatype;
      if (asize.length !== bsize.length)
        throw new DimensionError(asize.length, bsize.length);
      if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
      if (!avalues || !bvalues)
        throw new Error('Cannot perform operation on Pattern Sparse Matrices');
      var rows = asize[0];
      var columns = asize[1];
      var dt;
      var eq = equalScalar;
      var zero = 0;
      var cf = callback;
      if (typeof adt === 'string' && adt === bdt) {
        dt = adt;
        eq = typed.find(equalScalar, [dt, dt]);
        zero = typed.convert(0, dt);
        cf = typed.find(callback, [dt, dt]);
      }
      var cvalues = [];
      var cindex = [];
      var cptr = [];
      var c = new SparseMatrix({
        values: cvalues,
        index: cindex,
        ptr: cptr,
        size: [rows, columns],
        datatype: dt
      });
      var x = [];
      var w = [];
      var k,
          k0,
          k1,
          i;
      for (var j = 0; j < columns; j++) {
        cptr[j] = cindex.length;
        var mark = j + 1;
        for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
          i = aindex[k];
          w[i] = mark;
          x[i] = avalues[k];
          cindex.push(i);
        }
        for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
          i = bindex[k];
          if (w[i] === mark) {
            x[i] = cf(x[i], bvalues[k]);
          }
        }
        k = cptr[j];
        while (k < cindex.length) {
          i = cindex[k];
          var v = x[i];
          if (!eq(v, zero)) {
            cvalues.push(v);
            k++;
          } else {
            cindex.splice(k, 1);
          }
        }
      }
      cptr[columns] = cindex.length;
      return c;
    };
    return algorithm08;
  }
  exports.name = 'algorithm08';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("21f", ["a2", "b5", "cd", "c0", "208", "1f9", "1ec", "21c", "1fb", "1ee", "1ef", "1f0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var isInteger = $__require('a2').isInteger;
  function factory(type, config, load, typed) {
    var latex = $__require('b5');
    var matrix = load($__require('cd'));
    var equalScalar = load($__require('c0'));
    var zeros = load($__require('208'));
    var algorithm01 = load($__require('1f9'));
    var algorithm02 = load($__require('1ec'));
    var algorithm08 = load($__require('21c'));
    var algorithm10 = load($__require('1fb'));
    var algorithm11 = load($__require('1ee'));
    var algorithm13 = load($__require('1ef'));
    var algorithm14 = load($__require('1f0'));
    var rightLogShift = typed('rightLogShift', {
      'number, number': function(x, y) {
        if (!isInteger(x) || !isInteger(y)) {
          throw new Error('Integers expected in function rightLogShift');
        }
        return x >>> y;
      },
      'Matrix, Matrix': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            switch (y.storage()) {
              case 'sparse':
                c = algorithm08(x, y, rightLogShift, false);
                break;
              default:
                c = algorithm02(y, x, rightLogShift, true);
                break;
            }
            break;
          default:
            switch (y.storage()) {
              case 'sparse':
                c = algorithm01(x, y, rightLogShift, false);
                break;
              default:
                c = algorithm13(x, y, rightLogShift);
                break;
            }
            break;
        }
        return c;
      },
      'Array, Array': function(x, y) {
        return rightLogShift(matrix(x), matrix(y)).valueOf();
      },
      'Array, Matrix': function(x, y) {
        return rightLogShift(matrix(x), y);
      },
      'Matrix, Array': function(x, y) {
        return rightLogShift(x, matrix(y));
      },
      'Matrix, number | BigNumber': function(x, y) {
        if (!equalScalar(y, 0)) {
          var c;
          switch (x.storage()) {
            case 'sparse':
              c = algorithm11(x, y, rightLogShift, false);
              break;
            default:
              c = algorithm14(x, y, rightLogShift, false);
              break;
          }
          return c;
        }
        return x.clone();
      },
      'number | BigNumber, Matrix': function(x, y) {
        if (!equalScalar(x, 0)) {
          var c;
          switch (y.storage()) {
            case 'sparse':
              c = algorithm10(y, x, rightLogShift, true);
              break;
            default:
              c = algorithm14(y, x, rightLogShift, true);
              break;
          }
          return c;
        }
        return zeros(y.size(), y.storage());
      },
      'Array, number | BigNumber': function(x, y) {
        return rightLogShift(matrix(x), y).valueOf();
      },
      'number | BigNumber, Array': function(x, y) {
        return rightLogShift(x, matrix(y)).valueOf();
      }
    });
    rightLogShift.toTex = '\\left(${args[0]}' + latex.operators['rightLogShift'] + '${args[1]}\\right)';
    return rightLogShift;
  }
  exports.name = 'rightLogShift';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("220", ["213", "214", "217", "219", "21b", "21e", "21f", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = [$__require('213'), $__require('214'), $__require('217'), $__require('219'), $__require('21b'), $__require('21e'), $__require('21f')];
  return module.exports;
});

$__System.registerDynamic("221", ["c2", "222", "1e8", "223", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var add = load($__require('c2'));
    var stirlingS2 = load($__require('222'));
    var isNegative = load($__require('1e8'));
    var isInteger = load($__require('223'));
    var bellNumbers = typed('bellNumbers', {'number | BigNumber': function(n) {
        if (!isInteger(n) || isNegative(n)) {
          throw new TypeError('Non-negative integer value expected in function bellNumbers');
        }
        var result = 0;
        for (var i = 0; i <= n; i++) {
          result = add(result, stirlingS2(n, i));
        }
        return result;
      }});
    bellNumbers.toTex = '\\mathrm{B}_{${args[0]}}';
    return bellNumbers;
  }
  exports.name = 'bellNumbers';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("224", ["225", "1bf", "1fe", "223", "c5", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var combinations = load($__require('225'));
    var add = load($__require('1bf'));
    var isPositive = load($__require('1fe'));
    var isInteger = load($__require('223'));
    var larger = load($__require('c5'));
    var composition = typed('composition', {'number | BigNumber, number | BigNumber': function(n, k) {
        if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {
          throw new TypeError('Positive integer value expected in function composition');
        } else if (larger(k, n)) {
          throw new TypeError('k must be less than or equal to n in function composition');
        }
        return combinations(add(n, -1), add(k, -1));
      }});
    composition.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return composition;
  }
  exports.name = 'composition';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("222", ["c2", "1c0", "1d0", "20e", "1c3", "226", "225", "1e8", "223", "c5", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var add = load($__require('c2'));
    var subtract = load($__require('1c0'));
    var multiply = load($__require('1d0'));
    var divide = load($__require('20e'));
    var pow = load($__require('1c3'));
    var factorial = load($__require('226'));
    var combinations = load($__require('225'));
    var isNegative = load($__require('1e8'));
    var isInteger = load($__require('223'));
    var larger = load($__require('c5'));
    var stirlingS2 = typed('stirlingS2', {'number | BigNumber, number | BigNumber': function(n, k) {
        if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {
          throw new TypeError('Non-negative integer value expected in function stirlingS2');
        } else if (larger(k, n)) {
          throw new TypeError('k must be less than or equal to n in function stirlingS2');
        }
        var kFactorial = factorial(k);
        var result = 0;
        for (var i = 0; i <= k; i++) {
          var negativeOne = pow(-1, subtract(k, i));
          var kChooseI = combinations(k, i);
          var iPower = pow(i, n);
          result = add(result, multiply(multiply(kChooseI, iPower), negativeOne));
        }
        return divide(result, kFactorial);
      }});
    stirlingS2.toTex = '\\mathrm{S}\\left(${args[0]},${args[1]}\\right)';
    return stirlingS2;
  }
  exports.name = 'stirlingS2';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("227", ["c2", "20e", "1d0", "225", "1e8", "223", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var add = load($__require('c2'));
    var divide = load($__require('20e'));
    var multiply = load($__require('1d0'));
    var combinations = load($__require('225'));
    var isNegative = load($__require('1e8'));
    var isInteger = load($__require('223'));
    var catalan = typed('catalan', {'number | BigNumber': function(n) {
        if (!isInteger(n) || isNegative(n)) {
          throw new TypeError('Non-negative integer value expected in function catalan');
        }
        return divide(combinations(multiply(n, 2), n), add(n, 1));
      }});
    catalan.toTex = '\\mathrm{C}_{${args[0]}}';
    return catalan;
  }
  exports.name = 'catalan';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("228", ["221", "224", "222", "227", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = [$__require('221'), $__require('224'), $__require('222'), $__require('227')];
  return module.exports;
});

$__System.registerDynamic("229", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var arg = typed('arg', {
      'number': function(x) {
        return Math.atan2(0, x);
      },
      'Complex': function(x) {
        return x.arg();
      },
      'Array | Matrix': function(x) {
        return deepMap(x, arg);
      }
    });
    arg.toTex = '\\arg\\left(${args[0]}\\right)';
    return arg;
  }
  exports.name = 'arg';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("22a", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var conj = typed('conj', {
      'number': function(x) {
        return x;
      },
      'BigNumber': function(x) {
        return x;
      },
      'Complex': function(x) {
        return x.conjugate();
      },
      'Array | Matrix': function(x) {
        return deepMap(x, conj);
      }
    });
    conj.toTex = '\\left(${args[0]}\\right)^*';
    return conj;
  }
  exports.name = 'conj';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("22b", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var im = typed('im', {
      'number': function(x) {
        return 0;
      },
      'BigNumber': function(x) {
        return new type.BigNumber(0);
      },
      'Complex': function(x) {
        return x.im;
      },
      'Array | Matrix': function(x) {
        return deepMap(x, im);
      }
    });
    im.toTex = '\\Im\\left\\lbrace${args[0]}\\right\\rbrace';
    return im;
  }
  exports.name = 'im';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("22c", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var re = typed('re', {
      'number': function(x) {
        return x;
      },
      'BigNumber': function(x) {
        return x;
      },
      'Complex': function(x) {
        return x.re;
      },
      'Array | Matrix': function(x) {
        return deepMap(x, re);
      }
    });
    re.toTex = '\\Re\\left\\lbrace${args[0]}\\right\\rbrace';
    return re;
  }
  exports.name = 're';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("22d", ["229", "22a", "22b", "22c", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = [$__require('229'), $__require('22a'), $__require('22b'), $__require('22c')];
  return module.exports;
});

$__System.registerDynamic("1c4", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var abs = typed('abs', {
      'number': Math.abs,
      'Complex': function(x) {
        return x.abs();
      },
      'BigNumber': function(x) {
        return x.abs();
      },
      'Fraction': function(x) {
        return x.abs();
      },
      'Array | Matrix': function(x) {
        return deepMap(x, abs, true);
      },
      'Unit': function(x) {
        return x.abs();
      }
    });
    abs.toTex = '\\left|${args[0]}\\right|';
    return abs;
  }
  exports.name = 'abs';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("22e", ["1c4", "c2", "cd", "1d0", "1c0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var abs = load($__require('1c4'));
    var add = load($__require('c2'));
    var matrix = load($__require('cd'));
    var multiply = load($__require('1d0'));
    var subtract = load($__require('1c0'));
    var intersect = typed('intersect', {
      'Array, Array, Array': function(x, y, plane) {
        if (!_3d(x)) {
          throw new TypeError('Array with 3 numbers expected for first argument');
        }
        if (!_3d(y)) {
          throw new TypeError('Array with 3 numbers expected for second argument');
        }
        if (!_4d(plane)) {
          throw new TypeError('Array with 4 numbers expected as third argument');
        }
        return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);
      },
      'Array, Array, Array, Array': function(w, x, y, z) {
        if (w.length === 2) {
          if (!_2d(w)) {
            throw new TypeError('Array with 2 numbers expected for first argument');
          }
          if (!_2d(x)) {
            throw new TypeError('Array with 2 numbers expected for second argument');
          }
          if (!_2d(y)) {
            throw new TypeError('Array with 2 numbers expected for third argument');
          }
          if (!_2d(z)) {
            throw new TypeError('Array with 2 numbers expected for fourth argument');
          }
          return _intersect2d(w, x, y, z);
        } else if (w.length === 3) {
          if (!_3d(w)) {
            throw new TypeError('Array with 3 numbers expected for first argument');
          }
          if (!_3d(x)) {
            throw new TypeError('Array with 3 numbers expected for second argument');
          }
          if (!_3d(y)) {
            throw new TypeError('Array with 3 numbers expected for third argument');
          }
          if (!_3d(z)) {
            throw new TypeError('Array with 3 numbers expected for fourth argument');
          }
          return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);
        } else {
          throw new TypeError('Arrays with two or thee dimensional points expected');
        }
      },
      'Matrix, Matrix, Matrix': function(x, y, plane) {
        return matrix(intersect(x.valueOf(), y.valueOf(), plane.valueOf()));
      },
      'Matrix, Matrix, Matrix, Matrix': function(w, x, y, z) {
        return matrix(intersect(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf()));
      }
    });
    function _2d(x) {
      return x.length === 2 && typeof x[0] === 'number' && typeof x[1] === 'number';
    }
    function _3d(x) {
      return x.length === 3 && typeof x[0] === 'number' && typeof x[1] === 'number' && typeof x[2] === 'number';
    }
    function _4d(x) {
      return x.length === 4 && typeof x[0] === 'number' && typeof x[1] === 'number' && typeof x[2] === 'number' && typeof x[3] === 'number';
    }
    function _intersect2d(p1a, p1b, p2a, p2b) {
      var o1 = p1a;
      var o2 = p2a;
      var d1 = subtract(o1, p1b);
      var d2 = subtract(o2, p2b);
      var det = d1[0] * d2[1] - d2[0] * d1[1];
      if (abs(det) < config.epsilon) {
        return null;
      }
      var t = (d2[0] * o1[1] - d2[1] * o1[0] - d2[0] * o2[1] + d2[1] * o2[0]) / det;
      return add(multiply(d1, t), o1);
    }
    function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {
      var d1343 = (x1 - x3) * (x4 - x3) + (y1 - y3) * (y4 - y3) + (z1 - z3) * (z4 - z3);
      var d4321 = (x4 - x3) * (x2 - x1) + (y4 - y3) * (y2 - y1) + (z4 - z3) * (z2 - z1);
      var d1321 = (x1 - x3) * (x2 - x1) + (y1 - y3) * (y2 - y1) + (z1 - z3) * (z2 - z1);
      var d4343 = (x4 - x3) * (x4 - x3) + (y4 - y3) * (y4 - y3) + (z4 - z3) * (z4 - z3);
      var d2121 = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1) + (z2 - z1) * (z2 - z1);
      var ta = (d1343 * d4321 - d1321 * d4343) / (d2121 * d4343 - d4321 * d4321);
      var tb = (d1343 + ta * d4321) / (d4343);
      var pax = x1 + ta * (x2 - x1);
      var pay = y1 + ta * (y2 - y1);
      var paz = z1 + ta * (z2 - z1);
      var pbx = x3 + tb * (x4 - x3);
      var pby = y3 + tb * (y4 - y3);
      var pbz = z3 + tb * (z4 - z3);
      if (pax === pbx && pay === pby && paz === pbz) {
        return [pax, pay, paz];
      } else {
        return null;
      }
    }
    function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c) {
      var t = (c - x1 * x - y1 * y - z1 * z) / (x2 * x + y2 * y + z2 * z - x1 - y1 - z1);
      var px = x1 + t * (x2 - x1);
      var py = y1 + t * (y2 - y1);
      var pz = z1 + t * (z2 - z1);
      return [px, py, pz];
    }
    return intersect;
  }
  exports.name = 'intersect';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("22f", ["cd", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var distance = typed('distance', {
      'Array, Array, Array': function(x, y, z) {
        if (x.length == 2 && y.length == 2 && z.length == 2) {
          if (!_2d(x)) {
            throw new TypeError('Array with 2 numbers expected for first argument');
          }
          if (!_2d(y)) {
            throw new TypeError('Array with 2 numbers expected for second argument');
          }
          if (!_2d(z)) {
            throw new TypeError('Array with 2 numbers expected for third argument');
          }
          var m = (z[1] - z[0]) / (y[1] - y[0]);
          var xCoeff = m * m * y[0];
          var yCoeff = -1 * (m * y[0]);
          var constant = x[1];
          return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);
        } else {
          throw new TypeError('Invalid Arguments: Try again');
        }
      },
      'Object, Object, Object': function(x, y, z) {
        if (Object.keys(x).length == 2 && Object.keys(y).length == 2 && Object.keys(z).length == 2) {
          if (!_2d(x)) {
            throw new TypeError('Values of pointX and pointY should be numbers');
          }
          if (!_2d(y)) {
            throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers');
          }
          if (!_2d(z)) {
            throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers');
          }
          if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('lineOnePtX') && y.hasOwnProperty('lineOnePtY') && z.hasOwnProperty('lineTwoPtX') && z.hasOwnProperty('lineTwoPtY')) {
            var m = (z.lineTwoPtY - z.lineTwoPtX) / (y.lineOnePtY - y.lineOnePtX);
            var xCoeff = m * m * y.lineOnePtX;
            var yCoeff = -1 * (m * y.lineOnePtX);
            var constant = x.pointX;
            return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);
          } else {
            throw new TypeError('Key names do not match');
          }
        } else {
          throw new TypeError('Invalid Arguments: Try again');
        }
      },
      'Array, Array': function(x, y) {
        if (x.length == 2 && y.length == 3) {
          if (!_2d(x)) {
            throw new TypeError('Array with 2 numbers expected for first argument');
          }
          if (!_3d(y)) {
            throw new TypeError('Array with 3 numbers expected for second argument');
          }
          return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);
        } else if (x.length == 3 && y.length == 6) {
          if (!_3d(x)) {
            throw new TypeError('Array with 3 numbers expected for first argument');
          }
          if (!_parametricLine(y)) {
            throw new TypeError('Array with 6 numbers expected for second argument');
          }
          return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);
        } else if (x.length == 2 && y.length == 2) {
          if (!_2d(x)) {
            throw new TypeError('Array with 2 numbers expected for first argument');
          }
          if (!_2d(y)) {
            throw new TypeError('Array with 2 numbers expected for second argument');
          }
          return _distance2d(x[0], x[1], y[0], y[1]);
        } else if (x.length == 3 && y.length == 3) {
          if (!_3d(x)) {
            throw new TypeError('Array with 3 numbers expected for first argument');
          }
          if (!_3d(y)) {
            throw new TypeError('Array with 3 numbers expected for second argument');
          }
          return _distance3d(x[0], x[1], x[2], y[0], y[1], y[2]);
        } else {
          throw new TypeError('Invalid Arguments: Try again');
        }
      },
      'Object, Object': function(x, y) {
        if (Object.keys(x).length == 2 && Object.keys(y).length == 3) {
          if (!_2d(x)) {
            throw new TypeError('Values of pointX and pointY should be numbers');
          }
          if (!_3d(y)) {
            throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers');
          }
          if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('xCoeffLine') && y.hasOwnProperty('yCoeffLine') && y.hasOwnProperty('yCoeffLine')) {
            return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);
          } else {
            throw new TypeError('Key names do not match');
          }
        } else if (Object.keys(x).length == 3 && Object.keys(y).length == 6) {
          if (!_3d(x)) {
            throw new TypeError('Values of pointX, pointY and pointZ should be numbers');
          }
          if (!_parametricLine(y)) {
            throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers');
          }
          if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('x0') && y.hasOwnProperty('y0') && y.hasOwnProperty('z0') && y.hasOwnProperty('a') && y.hasOwnProperty('b') && y.hasOwnProperty('c')) {
            return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);
          } else {
            throw new TypeError('Key names do not match');
          }
        } else if (Object.keys(x).length == 2 && Object.keys(y).length == 2) {
          if (!_2d(x)) {
            throw new TypeError('Values of pointOneX and pointOneY should be numbers');
          }
          if (!_2d(y)) {
            throw new TypeError('Values of pointTwoX and pointTwoY should be numbers');
          }
          if (x.hasOwnProperty('pointOneX') && x.hasOwnProperty('pointOneY') && y.hasOwnProperty('pointTwoX') && y.hasOwnProperty('pointTwoY')) {
            return _distance2d(x.pointOneX, x.pointOneY, y.pointTwoX, y.pointTwoY);
          } else {
            throw new TypeError('Key names do not match');
          }
        } else if (Object.keys(x).length == 3 && Object.keys(y).length == 3) {
          if (!_3d(x)) {
            throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers');
          }
          if (!_3d(y)) {
            throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers');
          }
          if (x.hasOwnProperty('pointOneX') && x.hasOwnProperty('pointOneY') && x.hasOwnProperty('pointOneZ') && y.hasOwnProperty('pointTwoX') && y.hasOwnProperty('pointTwoY') && y.hasOwnProperty('pointTwoZ')) {
            return _distance3d(x.pointOneX, x.pointOneY, x.pointOneZ, y.pointTwoX, y.pointTwoY, y.pointTwoZ);
          } else {
            throw new TypeError('Key names do not match');
          }
        } else {
          throw new TypeError('Invalid Arguments: Try again');
        }
      },
      'Array': function(arr) {
        if (!_pairwise(arr)) {
          throw new TypeError('Incorrect array format entered for pairwise distance calculation');
        }
        return _distancePairwise(arr);
      }
    });
    return distance;
  }
  function _2d(a) {
    if (a.constructor !== Array) {
      a = _objectToArray(a);
    }
    return typeof a[0] === 'number' && typeof a[1] === 'number';
  }
  function _3d(a) {
    if (a.constructor !== Array) {
      a = _objectToArray(a);
    }
    return typeof a[0] === 'number' && typeof a[1] === 'number' && typeof a[2] === 'number';
  }
  function _parametricLine(a) {
    if (a.constructor !== Array) {
      a = _objectToArray(a);
    }
    return typeof a[0] === 'number' && typeof a[1] === 'number' && typeof a[2] === 'number' && typeof a[3] === 'number' && typeof a[4] === 'number' && typeof a[5] === 'number';
  }
  function _objectToArray(o) {
    var keys = Object.keys(o);
    var a = [];
    for (var i = 0; i < keys.length; i++) {
      a.push(o[keys[i]]);
    }
    return a;
  }
  function _pairwise(a) {
    if (a[0].length == 2 && typeof a[0][0] === 'number' && typeof a[0][1] === 'number') {
      for (var i in a) {
        if (a[i].length != 2 || typeof a[i][0] !== 'number' || typeof a[i][1] !== 'number') {
          return false;
        }
      }
    } else if (a[0].length == 3 && typeof a[0][0] === 'number' && typeof a[0][1] === 'number' && typeof a[0][2] === 'number') {
      for (var i in a) {
        if (a[i].length != 3 || typeof a[i][0] !== 'number' || typeof a[i][1] !== 'number' || typeof a[i][2] !== 'number') {
          return false;
        }
      }
    } else {
      return false;
    }
    return true;
  }
  function _distancePointLine2D(x, y, a, b, c) {
    var num = Math.abs(a * x + b * y + c);
    var den = Math.pow((a * a + b * b), 0.5);
    var result = (num / den);
    return result;
  }
  function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c) {
    var num = [((y0 - y) * (c)) - ((z0 - z) * (b)), ((z0 - z) * (a)) - ((x0 - x) * (c)), ((x0 - x) * (b)) - ((y0 - y) * (a))];
    num = Math.pow(num[0] * num[0] + num[1] * num[1] + num[2] * num[2], 0.5);
    var den = Math.pow(a * a + b * b + c * c, 0.5);
    var result = num / den;
    return result;
  }
  function _distance2d(x1, y1, x2, y2) {
    var yDiff = y2 - y1;
    var xDiff = x2 - x1;
    var radicant = yDiff * yDiff + xDiff * xDiff;
    var result = Math.pow(radicant, 0.5);
    return result;
  }
  function _distance3d(x1, y1, z1, x2, y2, z2) {
    var zDiff = z2 - z1;
    var yDiff = y2 - y1;
    var xDiff = x2 - x1;
    var radicant = zDiff * zDiff + yDiff * yDiff + xDiff * xDiff;
    var result = Math.pow(radicant, 0.5);
    return result;
  }
  function _distancePairwise(a) {
    var result = [];
    for (var i = 0; i < a.length - 1; i++) {
      for (var j = i + 1; j < a.length; j++) {
        if (a[0].length == 2) {
          result.push(_distance2d(a[i][0], a[i][1], a[j][0], a[j][1]));
        } else if (a[0].length == 3) {
          result.push(_distance3d(a[i][0], a[i][1], a[i][2], a[j][0], a[j][1], a[j][2]));
        }
      }
    }
    return result;
  }
  exports.name = 'distance';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("230", ["22e", "22f", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = [$__require('22e'), $__require('22f')];
  return module.exports;
});

$__System.registerDynamic("231", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = function scatter(a, j, w, x, u, mark, c, f, inverse, update, value) {
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var cindex = c._index;
    var k,
        k0,
        k1,
        i;
    if (x) {
      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        i = aindex[k];
        if (w[i] !== mark) {
          w[i] = mark;
          cindex.push(i);
          if (update) {
            x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]);
            u[i] = mark;
          } else {
            x[i] = avalues[k];
          }
        } else {
          x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]);
          u[i] = mark;
        }
      }
    } else {
      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        i = aindex[k];
        if (w[i] !== mark) {
          w[i] = mark;
          cindex.push(i);
        } else {
          u[i] = mark;
        }
      }
    }
  };
  return module.exports;
});

$__System.registerDynamic("200", ["231", "be", "c0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var scatter = $__require('231');
  var DimensionError = $__require('be');
  function factory(type, config, load, typed) {
    var equalScalar = load($__require('c0'));
    var SparseMatrix = type.SparseMatrix;
    var algorithm06 = function(a, b, callback) {
      var avalues = a._values;
      var asize = a._size;
      var adt = a._datatype;
      var bvalues = b._values;
      var bsize = b._size;
      var bdt = b._datatype;
      if (asize.length !== bsize.length)
        throw new DimensionError(asize.length, bsize.length);
      if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
      var rows = asize[0];
      var columns = asize[1];
      var dt;
      var eq = equalScalar;
      var zero = 0;
      var cf = callback;
      if (typeof adt === 'string' && adt === bdt) {
        dt = adt;
        eq = typed.find(equalScalar, [dt, dt]);
        zero = typed.convert(0, dt);
        cf = typed.find(callback, [dt, dt]);
      }
      var cvalues = avalues && bvalues ? [] : undefined;
      var cindex = [];
      var cptr = [];
      var c = new SparseMatrix({
        values: cvalues,
        index: cindex,
        ptr: cptr,
        size: [rows, columns],
        datatype: dt
      });
      var x = cvalues ? [] : undefined;
      var w = [];
      var u = [];
      for (var j = 0; j < columns; j++) {
        cptr[j] = cindex.length;
        var mark = j + 1;
        scatter(a, j, w, x, u, mark, c, cf);
        scatter(b, j, w, x, u, mark, c, cf);
        if (x) {
          var k = cptr[j];
          while (k < cindex.length) {
            var i = cindex[k];
            if (u[i] === mark) {
              var v = x[i];
              if (!eq(v, zero)) {
                cvalues.push(v);
                k++;
              } else {
                cindex.splice(k, 1);
              }
            } else {
              cindex.splice(k, 1);
            }
          }
        } else {
          var p = cptr[j];
          while (p < cindex.length) {
            var r = cindex[p];
            if (u[r] !== mark) {
              cindex.splice(p, 1);
            } else {
              p++;
            }
          }
        }
      }
      cptr[columns] = cindex.length;
      return c;
    };
    return algorithm06;
  }
  exports.name = 'algorithm06';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("232", ["b5", "cd", "208", "233", "234", "1ec", "200", "1ee", "1ef", "1f0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var latex = $__require('b5');
    var matrix = load($__require('cd'));
    var zeros = load($__require('208'));
    var not = load($__require('233'));
    var isZero = load($__require('234'));
    var algorithm02 = load($__require('1ec'));
    var algorithm06 = load($__require('200'));
    var algorithm11 = load($__require('1ee'));
    var algorithm13 = load($__require('1ef'));
    var algorithm14 = load($__require('1f0'));
    var and = typed('and', {
      'number, number': function(x, y) {
        return !!(x && y);
      },
      'Complex, Complex': function(x, y) {
        return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);
      },
      'BigNumber, BigNumber': function(x, y) {
        return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();
      },
      'Unit, Unit': function(x, y) {
        return and(x.value, y.value);
      },
      'Matrix, Matrix': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            switch (y.storage()) {
              case 'sparse':
                c = algorithm06(x, y, and, false);
                break;
              default:
                c = algorithm02(y, x, and, true);
                break;
            }
            break;
          default:
            switch (y.storage()) {
              case 'sparse':
                c = algorithm02(x, y, and, false);
                break;
              default:
                c = algorithm13(x, y, and);
                break;
            }
            break;
        }
        return c;
      },
      'Array, Array': function(x, y) {
        return and(matrix(x), matrix(y)).valueOf();
      },
      'Array, Matrix': function(x, y) {
        return and(matrix(x), y);
      },
      'Matrix, Array': function(x, y) {
        return and(x, matrix(y));
      },
      'Matrix, any': function(x, y) {
        if (not(y)) {
          return zeros(x.size(), x.storage());
        }
        var c;
        switch (x.storage()) {
          case 'sparse':
            c = algorithm11(x, y, and, false);
            break;
          default:
            c = algorithm14(x, y, and, false);
            break;
        }
        return c;
      },
      'any, Matrix': function(x, y) {
        if (not(x)) {
          return zeros(x.size(), x.storage());
        }
        var c;
        switch (y.storage()) {
          case 'sparse':
            c = algorithm11(y, x, and, true);
            break;
          default:
            c = algorithm14(y, x, and, true);
            break;
        }
        return c;
      },
      'Array, any': function(x, y) {
        return and(matrix(x), y).valueOf();
      },
      'any, Array': function(x, y) {
        return and(x, matrix(y)).valueOf();
      }
    });
    and.toTex = '\\left(${args[0]}' + latex.operators['and'] + '${args[1]}\\right)';
    return and;
  }
  exports.name = 'and';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("233", ["ad", "b5", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var latex = $__require('b5');
    var not = typed('not', {
      'number': function(x) {
        return !x;
      },
      'Complex': function(x) {
        return x.re === 0 && x.im === 0;
      },
      'BigNumber': function(x) {
        return x.isZero() || x.isNaN();
      },
      'Unit': function(x) {
        return not(x.value);
      },
      'Array | Matrix': function(x) {
        return deepMap(x, not);
      }
    });
    not.toTex = latex.operators['not'] + '\\left(${args[0]}\\right)';
    return not;
  }
  exports.name = 'not';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("235", ["b5", "cd", "1f2", "203", "1f4", "1ef", "1f0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var latex = $__require('b5');
    var matrix = load($__require('cd'));
    var algorithm03 = load($__require('1f2'));
    var algorithm05 = load($__require('203'));
    var algorithm12 = load($__require('1f4'));
    var algorithm13 = load($__require('1ef'));
    var algorithm14 = load($__require('1f0'));
    var or = typed('or', {
      'number, number': function(x, y) {
        return !!(x || y);
      },
      'Complex, Complex': function(x, y) {
        return (x.re !== 0 || x.im !== 0) || (y.re !== 0 || y.im !== 0);
      },
      'BigNumber, BigNumber': function(x, y) {
        return (!x.isZero() && !x.isNaN()) || (!y.isZero() && !y.isNaN());
      },
      'Unit, Unit': function(x, y) {
        return or(x.value, y.value);
      },
      'Matrix, Matrix': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            switch (y.storage()) {
              case 'sparse':
                c = algorithm05(x, y, or);
                break;
              default:
                c = algorithm03(y, x, or, true);
                break;
            }
            break;
          default:
            switch (y.storage()) {
              case 'sparse':
                c = algorithm03(x, y, or, false);
                break;
              default:
                c = algorithm13(x, y, or);
                break;
            }
            break;
        }
        return c;
      },
      'Array, Array': function(x, y) {
        return or(matrix(x), matrix(y)).valueOf();
      },
      'Array, Matrix': function(x, y) {
        return or(matrix(x), y);
      },
      'Matrix, Array': function(x, y) {
        return or(x, matrix(y));
      },
      'Matrix, any': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            c = algorithm12(x, y, or, false);
            break;
          default:
            c = algorithm14(x, y, or, false);
            break;
        }
        return c;
      },
      'any, Matrix': function(x, y) {
        var c;
        switch (y.storage()) {
          case 'sparse':
            c = algorithm12(y, x, or, true);
            break;
          default:
            c = algorithm14(y, x, or, true);
            break;
        }
        return c;
      },
      'Array, any': function(x, y) {
        return algorithm14(matrix(x), y, or, false).valueOf();
      },
      'any, Array': function(x, y) {
        return algorithm14(matrix(y), x, or, true).valueOf();
      }
    });
    or.toTex = '\\left(${args[0]}' + latex.operators['or'] + '${args[1]}\\right)';
    return or;
  }
  exports.name = 'or';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("236", ["b5", "cd", "1f2", "1f3", "1f4", "1ef", "1f0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var latex = $__require('b5');
    var matrix = load($__require('cd'));
    var algorithm03 = load($__require('1f2'));
    var algorithm07 = load($__require('1f3'));
    var algorithm12 = load($__require('1f4'));
    var algorithm13 = load($__require('1ef'));
    var algorithm14 = load($__require('1f0'));
    var xor = typed('xor', {
      'number, number': function(x, y) {
        return !!(!!x ^ !!y);
      },
      'Complex, Complex': function(x, y) {
        return ((x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0));
      },
      'BigNumber, BigNumber': function(x, y) {
        return ((!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN()));
      },
      'Unit, Unit': function(x, y) {
        return xor(x.value, y.value);
      },
      'Matrix, Matrix': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            switch (y.storage()) {
              case 'sparse':
                c = algorithm07(x, y, xor);
                break;
              default:
                c = algorithm03(y, x, xor, true);
                break;
            }
            break;
          default:
            switch (y.storage()) {
              case 'sparse':
                c = algorithm03(x, y, xor, false);
                break;
              default:
                c = algorithm13(x, y, xor);
                break;
            }
            break;
        }
        return c;
      },
      'Array, Array': function(x, y) {
        return xor(matrix(x), matrix(y)).valueOf();
      },
      'Array, Matrix': function(x, y) {
        return xor(matrix(x), y);
      },
      'Matrix, Array': function(x, y) {
        return xor(x, matrix(y));
      },
      'Matrix, any': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            c = algorithm12(x, y, xor, false);
            break;
          default:
            c = algorithm14(x, y, xor, false);
            break;
        }
        return c;
      },
      'any, Matrix': function(x, y) {
        var c;
        switch (y.storage()) {
          case 'sparse':
            c = algorithm12(y, x, xor, true);
            break;
          default:
            c = algorithm14(y, x, xor, true);
            break;
        }
        return c;
      },
      'Array, any': function(x, y) {
        return algorithm14(matrix(x), y, xor, false).valueOf();
      },
      'any, Array': function(x, y) {
        return algorithm14(matrix(y), x, xor, true).valueOf();
      }
    });
    xor.toTex = '\\left(${args[0]}' + latex.operators['xor'] + '${args[1]}\\right)';
    return xor;
  }
  exports.name = 'xor';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("237", ["232", "233", "235", "236", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = [$__require('232'), $__require('233'), $__require('235'), $__require('236')];
  return module.exports;
});

$__System.registerDynamic("1a1", ["a4", "a2", "da", "1b9", "be", "cd", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var clone = $__require('a4').clone;
  var isInteger = $__require('a2').isInteger;
  var array = $__require('da');
  var IndexError = $__require('1b9');
  var DimensionError = $__require('be');
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var concat = typed('concat', {
      '...Array | Matrix | number | BigNumber': function(args) {
        var i;
        var len = args.length;
        var dim = -1;
        var prevDim;
        var asMatrix = false;
        var matrices = [];
        for (i = 0; i < len; i++) {
          var arg = args[i];
          if (arg && arg.isMatrix === true) {
            asMatrix = true;
          }
          if (typeof arg === 'number' || (arg && arg.isBigNumber === true)) {
            if (i !== len - 1) {
              throw new Error('Dimension must be specified as last argument');
            }
            prevDim = dim;
            dim = arg.valueOf();
            if (!isInteger(dim)) {
              throw new TypeError('Integer number expected for dimension');
            }
            if (dim < 0 || (i > 0 && dim > prevDim)) {
              throw new IndexError(dim, prevDim + 1);
            }
          } else {
            var m = clone(arg).valueOf();
            var size = array.size(m);
            matrices[i] = m;
            prevDim = dim;
            dim = size.length - 1;
            if (i > 0 && dim != prevDim) {
              throw new DimensionError(prevDim + 1, dim + 1);
            }
          }
        }
        if (matrices.length == 0) {
          throw new SyntaxError('At least one matrix expected');
        }
        var res = matrices.shift();
        while (matrices.length) {
          res = _concat(res, matrices.shift(), dim, 0);
        }
        return asMatrix ? matrix(res) : res;
      },
      '...string': function(args) {
        return args.join('');
      }
    });
    concat.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return concat;
  }
  function _concat(a, b, concatDim, dim) {
    if (dim < concatDim) {
      if (a.length != b.length) {
        throw new DimensionError(a.length, b.length);
      }
      var c = [];
      for (var i = 0; i < a.length; i++) {
        c[i] = _concat(a[i], b[i], concatDim, dim + 1);
      }
      return c;
    } else {
      return a.concat(b);
    }
  }
  exports.name = 'concat';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("238", ["da", "cd", "1c0", "1d0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var size = $__require('da').size;
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var subtract = load($__require('1c0'));
    var multiply = load($__require('1d0'));
    var cross = typed('cross', {
      'Matrix, Matrix': function(x, y) {
        return matrix(_cross(x.toArray(), y.toArray()));
      },
      'Matrix, Array': function(x, y) {
        return matrix(_cross(x.toArray(), y));
      },
      'Array, Matrix': function(x, y) {
        return matrix(_cross(x, y.toArray()));
      },
      'Array, Array': _cross
    });
    cross.toTex = '\\left(${args[0]}\\right)\\times\\left(${args[1]}\\right)';
    return cross;
    function _cross(x, y) {
      var xSize = size(x);
      var ySize = size(y);
      if (xSize.length != 1 || ySize.length != 1 || xSize[0] != 3 || ySize[0] != 3) {
        throw new RangeError('Vectors with length 3 expected ' + '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');
      }
      return [subtract(multiply(x[1], y[2]), multiply(x[2], y[1])), subtract(multiply(x[2], y[0]), multiply(x[0], y[2])), subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))];
    }
  }
  exports.name = 'cross';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("239", ["da", "a4", "a2", "cd", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var array = $__require('da');
  var clone = $__require('a4').clone;
  var isInteger = $__require('a2').isInteger;
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var diag = typed('diag', {
      'Array': function(x) {
        return _diag(x, 0, array.size(x), null);
      },
      'Array, number': function(x, k) {
        return _diag(x, k, array.size(x), null);
      },
      'Array, BigNumber': function(x, k) {
        return _diag(x, k.toNumber(), array.size(x), null);
      },
      'Array, string': function(x, format) {
        return _diag(x, 0, array.size(x), format);
      },
      'Array, number, string': function(x, k, format) {
        return _diag(x, k, array.size(x), format);
      },
      'Array, BigNumber, string': function(x, k, format) {
        return _diag(x, k.toNumber(), array.size(x), format);
      },
      'Matrix': function(x) {
        return _diag(x, 0, x.size(), x.storage());
      },
      'Matrix, number': function(x, k) {
        return _diag(x, k, x.size(), x.storage());
      },
      'Matrix, BigNumber': function(x, k) {
        return _diag(x, k.toNumber(), x.size(), x.storage());
      },
      'Matrix, string': function(x, format) {
        return _diag(x, 0, x.size(), format);
      },
      'Matrix, number, string': function(x, k, format) {
        return _diag(x, k, x.size(), format);
      },
      'Matrix, BigNumber, string': function(x, k, format) {
        return _diag(x, k.toNumber(), x.size(), format);
      }
    });
    diag.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return diag;
    function _diag(x, k, size, format) {
      if (!isInteger(k)) {
        throw new TypeError('Second parameter in function diag must be an integer');
      }
      var kSuper = k > 0 ? k : 0;
      var kSub = k < 0 ? -k : 0;
      switch (size.length) {
        case 1:
          return _createDiagonalMatrix(x, k, format, size[0], kSub, kSuper);
        case 2:
          return _getDiagonal(x, k, format, size, kSub, kSuper);
      }
      throw new RangeError('Matrix for function diag must be 2 dimensional');
    }
    function _createDiagonalMatrix(x, k, format, l, kSub, kSuper) {
      var ms = [l + kSub, l + kSuper];
      var F = type.Matrix.storage(format || 'dense');
      var m = F.diagonal(ms, x, k);
      return format !== null ? m : m.valueOf();
    }
    function _getDiagonal(x, k, format, s, kSub, kSuper) {
      if (x && x.isMatrix === true) {
        var dm = x.diagonal(k);
        if (format !== null) {
          if (format !== dm.storage())
            return matrix(dm, format);
          return dm;
        }
        return dm.valueOf();
      }
      var n = Math.min(s[0] - kSub, s[1] - kSuper);
      var vector = [];
      for (var i = 0; i < n; i++) {
        vector[i] = x[i + kSub][i + kSuper];
      }
      return format !== null ? matrix(vector) : vector;
    }
  }
  exports.name = 'diag';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("23a", ["da", "c2", "1d0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var size = $__require('da').size;
  function factory(type, config, load, typed) {
    var add = load($__require('c2'));
    var multiply = load($__require('1d0'));
    var dot = typed('dot', {
      'Matrix, Matrix': function(x, y) {
        return _dot(x.toArray(), y.toArray());
      },
      'Matrix, Array': function(x, y) {
        return _dot(x.toArray(), y);
      },
      'Array, Matrix': function(x, y) {
        return _dot(x, y.toArray());
      },
      'Array, Array': _dot
    });
    dot.toTex = '\\left(${args[0]}\\cdot${args[1]}\\right)';
    return dot;
    function _dot(x, y) {
      var xSize = size(x);
      var ySize = size(y);
      var len = xSize[0];
      if (xSize.length !== 1 || ySize.length !== 1)
        throw new RangeError('Vector expected');
      if (xSize[0] != ySize[0])
        throw new RangeError('Vectors must have equal length (' + xSize[0] + ' != ' + ySize[0] + ')');
      if (len == 0)
        throw new RangeError('Cannot calculate the dot product of empty vectors');
      var prod = 0;
      for (var i = 0; i < len; i++) {
        prod = add(prod, multiply(x[i], y[i]));
      }
      return prod;
    }
  }
  exports.name = 'dot';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1a3", ["da", "cd", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var size = $__require('da').size;
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var filter = typed('filter', {
      'Array, function': _filterCallback,
      'Array, RegExp': _filterRegExp,
      'Matrix, function': function(x, test) {
        return matrix(_filterCallback(x.toArray(), test));
      },
      'Matrix, RegExp': function(x, test) {
        return matrix(_filterRegExp(x.toArray(), test));
      }
    });
    filter.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return filter;
  }
  function _filterCallback(x, callback) {
    if (size(x).length !== 1) {
      throw new Error('Only one dimensional matrices supported');
    }
    return x.filter(function(entry) {
      return callback(entry);
    });
  }
  function _filterRegExp(x, regexp) {
    if (size(x).length !== 1) {
      throw new Error('Only one dimensional matrices supported');
    }
    return x.filter(function(entry) {
      return regexp.test(entry);
    });
  }
  exports.name = 'filter';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("23b", ["a4", "da", "cd", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var clone = $__require('a4').clone;
  var _flatten = $__require('da').flatten;
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var flatten = typed('flatten', {
      'Array': function(x) {
        return _flatten(clone(x));
      },
      'Matrix': function(x) {
        var flat = _flatten(clone(x.toArray()));
        return matrix(flat);
      }
    });
    flatten.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return flatten;
  }
  exports.name = 'flatten';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1a5", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var forEach = typed('forEach', {
      'Array, function': _forEach,
      'Matrix, function': function(x, callback) {
        return x.forEach(callback);
      }
    });
    forEach.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return forEach;
  }
  function _forEach(array, callback) {
    var recurse = function(value, index) {
      if (Array.isArray(value)) {
        value.forEach(function(child, i) {
          recurse(child, index.concat(i));
        });
      } else {
        callback(value, index, array);
      }
    };
    recurse(array, []);
  }
  exports.name = 'forEach';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1a8", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var map = typed('map', {
      'Array, function': _map,
      'Matrix, function': function(x, callback) {
        return x.map(callback);
      }
    });
    map.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return map;
  }
  function _map(array, callback) {
    var recurse = function(value, index) {
      if (Array.isArray(value)) {
        return value.map(function(child, i) {
          return recurse(child, index.concat(i));
        });
      } else {
        return callback(value, index, array);
      }
    };
    return recurse(array, []);
  }
  exports.name = 'map';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("23c", ["a2", "da", "cd", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var isInteger = $__require('a2').isInteger;
  var resize = $__require('da').resize;
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var ones = typed('ones', {
      '': function() {
        return (config.matrix === 'Array') ? _ones([]) : _ones([], 'default');
      },
      '...number | BigNumber | string': function(size) {
        var last = size[size.length - 1];
        if (typeof last === 'string') {
          var format = size.pop();
          return _ones(size, format);
        } else if (config.matrix === 'Array') {
          return _ones(size);
        } else {
          return _ones(size, 'default');
        }
      },
      'Array': _ones,
      'Matrix': function(size) {
        var format = size.storage();
        return _ones(size.valueOf(), format);
      },
      'Array | Matrix, string': function(size, format) {
        return _ones(size.valueOf(), format);
      }
    });
    ones.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return ones;
    function _ones(size, format) {
      var hasBigNumbers = _normalize(size);
      var defaultValue = hasBigNumbers ? new type.BigNumber(1) : 1;
      _validate(size);
      if (format) {
        var m = matrix(format);
        if (size.length > 0) {
          return m.resize(size, defaultValue);
        }
        return m;
      } else {
        var arr = [];
        if (size.length > 0) {
          return resize(arr, size, defaultValue);
        }
        return arr;
      }
    }
    function _normalize(size) {
      var hasBigNumbers = false;
      size.forEach(function(value, index, arr) {
        if (value && value.isBigNumber === true) {
          hasBigNumbers = true;
          arr[index] = value.toNumber();
        }
      });
      return hasBigNumbers;
    }
    function _validate(size) {
      size.forEach(function(value) {
        if (typeof value !== 'number' || !isInteger(value) || value < 0) {
          throw new Error('Parameters in function ones must be positive integers');
        }
      });
    }
  }
  exports.name = 'ones';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1b1", ["cd", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var ZERO = new type.BigNumber(0);
    var ONE = new type.BigNumber(1);
    var range = typed('range', {
      'string': _strRange,
      'string, boolean': _strRange,
      'number, number': function(start, end) {
        return _out(_rangeEx(start, end, 1));
      },
      'number, number, number': function(start, end, step) {
        return _out(_rangeEx(start, end, step));
      },
      'number, number, boolean': function(start, end, includeEnd) {
        return includeEnd ? _out(_rangeInc(start, end, 1)) : _out(_rangeEx(start, end, 1));
      },
      'number, number, number, boolean': function(start, end, step, includeEnd) {
        return includeEnd ? _out(_rangeInc(start, end, step)) : _out(_rangeEx(start, end, step));
      },
      'BigNumber, BigNumber': function(start, end) {
        return _out(_bigRangeEx(start, end, ONE));
      },
      'BigNumber, BigNumber, BigNumber': function(start, end, step) {
        return _out(_bigRangeEx(start, end, step));
      },
      'BigNumber, BigNumber, boolean': function(start, end, includeEnd) {
        return includeEnd ? _out(_bigRangeInc(start, end, ONE)) : _out(_bigRangeEx(start, end, ONE));
      },
      'BigNumber, BigNumber, BigNumber, boolean': function(start, end, step, includeEnd) {
        return includeEnd ? _out(_bigRangeInc(start, end, step)) : _out(_bigRangeEx(start, end, step));
      }
    });
    range.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return range;
    function _out(arr) {
      return config.matrix === 'Array' ? arr : matrix(arr);
    }
    function _strRange(str, includeEnd) {
      var r = _parse(str);
      if (!r) {
        throw new SyntaxError('String "' + str + '" is no valid range');
      }
      var fn;
      if (config.number === 'BigNumber') {
        fn = includeEnd ? _bigRangeInc : _bigRangeEx;
        return _out(fn(new type.BigNumber(r.start), new type.BigNumber(r.end), new type.BigNumber(r.step)));
      } else {
        fn = includeEnd ? _rangeInc : _rangeEx;
        return _out(fn(r.start, r.end, r.step));
      }
    }
    function _rangeEx(start, end, step) {
      var array = [],
          x = start;
      if (step > 0) {
        while (x < end) {
          array.push(x);
          x += step;
        }
      } else if (step < 0) {
        while (x > end) {
          array.push(x);
          x += step;
        }
      }
      return array;
    }
    function _rangeInc(start, end, step) {
      var array = [],
          x = start;
      if (step > 0) {
        while (x <= end) {
          array.push(x);
          x += step;
        }
      } else if (step < 0) {
        while (x >= end) {
          array.push(x);
          x += step;
        }
      }
      return array;
    }
    function _bigRangeEx(start, end, step) {
      var array = [],
          x = start;
      if (step.gt(ZERO)) {
        while (x.lt(end)) {
          array.push(x);
          x = x.plus(step);
        }
      } else if (step.lt(ZERO)) {
        while (x.gt(end)) {
          array.push(x);
          x = x.plus(step);
        }
      }
      return array;
    }
    function _bigRangeInc(start, end, step) {
      var array = [],
          x = start;
      if (step.gt(ZERO)) {
        while (x.lte(end)) {
          array.push(x);
          x = x.plus(step);
        }
      } else if (step.lt(ZERO)) {
        while (x.gte(end)) {
          array.push(x);
          x = x.plus(step);
        }
      }
      return array;
    }
    function _parse(str) {
      var args = str.split(':');
      var nums = args.map(function(arg) {
        return Number(arg);
      });
      var invalid = nums.some(function(num) {
        return isNaN(num);
      });
      if (invalid) {
        return null;
      }
      switch (nums.length) {
        case 2:
          return {
            start: nums[0],
            end: nums[1],
            step: 1
          };
        case 3:
          return {
            start: nums[0],
            end: nums[2],
            step: nums[1]
          };
        default:
          return null;
      }
    }
  }
  exports.name = 'range';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("23d", ["be", "a5", "a2", "b1", "a4", "da", "cd", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var DimensionError = $__require('be');
  var ArgumentsError = $__require('a5');
  var isInteger = $__require('a2').isInteger;
  var format = $__require('b1').format;
  var clone = $__require('a4').clone;
  var array = $__require('da');
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var resize = function resize(x, size, defaultValue) {
      if (arguments.length != 2 && arguments.length != 3) {
        throw new ArgumentsError('resize', arguments.length, 2, 3);
      }
      if (size && size.isMatrix === true) {
        size = size.valueOf();
      }
      if (size.length && size[0] && size[0].isBigNumber === true) {
        size = size.map(function(value) {
          return (value && value.isBigNumber === true) ? value.toNumber() : value;
        });
      }
      if (x && x.isMatrix === true) {
        return x.resize(size, defaultValue, true);
      }
      if (typeof x === 'string') {
        return _resizeString(x, size, defaultValue);
      }
      var asMatrix = Array.isArray(x) ? false : (config.matrix !== 'Array');
      if (size.length == 0) {
        while (Array.isArray(x)) {
          x = x[0];
        }
        return clone(x);
      } else {
        if (!Array.isArray(x)) {
          x = [x];
        }
        x = clone(x);
        var res = array.resize(x, size, defaultValue);
        return asMatrix ? matrix(res) : res;
      }
    };
    resize.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return resize;
    function _resizeString(str, size, defaultChar) {
      if (defaultChar !== undefined) {
        if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {
          throw new TypeError('Single character expected as defaultValue');
        }
      } else {
        defaultChar = ' ';
      }
      if (size.length !== 1) {
        throw new DimensionError(size.length, 1);
      }
      var len = size[0];
      if (typeof len !== 'number' || !isInteger(len)) {
        throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format(size) + ')');
      }
      if (str.length > len) {
        return str.substring(0, len);
      } else if (str.length < len) {
        var res = str;
        for (var i = 0,
            ii = len - str.length; i < ii; i++) {
          res += defaultChar;
        }
        return res;
      } else {
        return str;
      }
    }
  }
  exports.name = 'resize';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("23e", ["da", "cd", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var array = $__require('da');
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var size = typed('size', {
      'Matrix': function(x) {
        return matrix(x.size());
      },
      'Array': array.size,
      'string': function(x) {
        return (config.matrix === 'Array') ? [x.length] : matrix([x.length]);
      },
      'number | Complex | BigNumber | Unit | boolean | null': function(x) {
        return (config.matrix === 'Array') ? [] : matrix([]);
      }
    });
    size.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return size;
  }
  exports.name = 'size';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("23f", ["da", "cd", "240", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var size = $__require('da').size;
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var asc = load($__require('240'));
    var desc = function(a, b) {
      return -asc(a, b);
    };
    var sort = typed('sort', {
      'Array': function(x) {
        _arrayIsVector(x);
        return x.sort(asc);
      },
      'Matrix': function(x) {
        _matrixIsVector(x);
        return matrix(x.toArray().sort(asc), x.storage());
      },
      'Array, function': function(x, _comparator) {
        _arrayIsVector(x);
        return x.sort(_comparator);
      },
      'Matrix, function': function(x, _comparator) {
        _matrixIsVector(x);
        return matrix(x.toArray().sort(_comparator), x.storage());
      },
      'Array, string': function(x, order) {
        _arrayIsVector(x);
        return x.sort(_comparator(order));
      },
      'Matrix, string': function(x, order) {
        _matrixIsVector(x);
        return matrix(x.toArray().sort(_comparator(order)), x.storage());
      }
    });
    sort.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    function _comparator(order) {
      if (order === 'asc') {
        return asc;
      } else if (order === 'desc') {
        return desc;
      } else {
        throw new Error('String "asc" or "desc" expected');
      }
    }
    function _arrayIsVector(array) {
      if (size(array).length !== 1) {
        throw new Error('One dimensional array expected');
      }
    }
    function _matrixIsVector(matrix) {
      if (matrix.size().length !== 1) {
        throw new Error('One dimensional matrix expected');
      }
    }
    return sort;
  }
  exports.name = 'sort';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("241", ["a4", "da", "cd", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var object = $__require('a4');
  var array = $__require('da');
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var squeeze = typed('squeeze', {
      'Array': function(x) {
        return array.squeeze(object.clone(x));
      },
      'Matrix': function(x) {
        var res = array.squeeze(x.toArray());
        return Array.isArray(res) ? matrix(res) : res;
      },
      'any': function(x) {
        return object.clone(x);
      }
    });
    squeeze.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return squeeze;
  }
  exports.name = 'squeeze';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1b3", ["a4", "da", "be", "cd", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var clone = $__require('a4').clone;
  var validateIndex = $__require('da').validateIndex;
  var DimensionError = $__require('be');
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var subset = typed('subset', {
      'Array, Index': function(value, index) {
        var m = matrix(value);
        var subset = m.subset(index);
        return subset && subset.valueOf();
      },
      'Matrix, Index': function(value, index) {
        return value.subset(index);
      },
      'Object, Index': _getObjectProperty,
      'string, Index': _getSubstring,
      'Array, Index, any': function(value, index, replacement) {
        return matrix(clone(value)).subset(index, replacement, undefined).valueOf();
      },
      'Array, Index, any, any': function(value, index, replacement, defaultValue) {
        return matrix(clone(value)).subset(index, replacement, defaultValue).valueOf();
      },
      'Matrix, Index, any': function(value, index, replacement) {
        return value.clone().subset(index, replacement);
      },
      'Matrix, Index, any, any': function(value, index, replacement, defaultValue) {
        return value.clone().subset(index, replacement, defaultValue);
      },
      'string, Index, string': _setSubstring,
      'string, Index, string, string': _setSubstring,
      'Object, Index, any': _setObjectProperty
    });
    subset.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return subset;
    function _getSubstring(str, index) {
      if (!index || index.isIndex !== true) {
        throw new TypeError('Index expected');
      }
      if (index.size().length != 1) {
        throw new DimensionError(index.size().length, 1);
      }
      var strLen = str.length;
      validateIndex(index.min()[0], strLen);
      validateIndex(index.max()[0], strLen);
      var range = index.dimension(0);
      var substr = '';
      range.forEach(function(v) {
        substr += str.charAt(v);
      });
      return substr;
    }
    function _setSubstring(str, index, replacement, defaultValue) {
      if (!index || index.isIndex !== true) {
        throw new TypeError('Index expected');
      }
      if (index.size().length != 1) {
        throw new DimensionError(index.size().length, 1);
      }
      if (defaultValue !== undefined) {
        if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {
          throw new TypeError('Single character expected as defaultValue');
        }
      } else {
        defaultValue = ' ';
      }
      var range = index.dimension(0);
      var len = range.size()[0];
      if (len != replacement.length) {
        throw new DimensionError(range.size()[0], replacement.length);
      }
      var strLen = str.length;
      validateIndex(index.min()[0]);
      validateIndex(index.max()[0]);
      var chars = [];
      for (var i = 0; i < strLen; i++) {
        chars[i] = str.charAt(i);
      }
      range.forEach(function(v, i) {
        chars[v] = replacement.charAt(i[0]);
      });
      if (chars.length > strLen) {
        for (i = strLen - 1, len = chars.length; i < len; i++) {
          if (!chars[i]) {
            chars[i] = defaultValue;
          }
        }
      }
      return chars.join('');
    }
  }
  function _getObjectProperty(object, index) {
    if (index.size().length !== 1) {
      throw new DimensionError(index.size(), 1);
    }
    var key = index.dimension(0);
    if (typeof key !== 'string') {
      throw new TypeError('String expected as index to retrieve an object property');
    }
    return object[key];
  }
  function _setObjectProperty(object, index, replacement) {
    if (index.size().length !== 1) {
      throw new DimensionError(index.size(), 1);
    }
    var key = index.dimension(0);
    if (typeof key !== 'string') {
      throw new TypeError('String expected as index to retrieve an object property');
    }
    var updated = clone(object);
    updated[key] = replacement;
    return updated;
  }
  exports.name = 'subset';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("205", ["a4", "b1", "cd", "c2", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var clone = $__require('a4').clone;
  var format = $__require('b1').format;
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var add = load($__require('c2'));
    var trace = typed('trace', {
      'Array': function(x) {
        return trace(matrix(x));
      },
      'Matrix': function(x) {
        var c;
        switch (x.storage()) {
          case 'dense':
            c = _denseTrace(x);
            break;
          case 'sparse':
            c = _sparseTrace(x);
            break;
        }
        return c;
      },
      'any': clone
    });
    var _denseTrace = function(m) {
      var size = m._size;
      var data = m._data;
      switch (size.length) {
        case 1:
          if (size[0] == 1) {
            return clone(data[0]);
          }
          throw new RangeError('Matrix must be square (size: ' + format(size) + ')');
        case 2:
          var rows = size[0];
          var cols = size[1];
          if (rows === cols) {
            var sum = 0;
            for (var i = 0; i < rows; i++)
              sum = add(sum, data[i][i]);
            return sum;
          }
          throw new RangeError('Matrix must be square (size: ' + format(size) + ')');
        default:
          throw new RangeError('Matrix must be two dimensional (size: ' + format(size) + ')');
      }
    };
    var _sparseTrace = function(m) {
      var values = m._values;
      var index = m._index;
      var ptr = m._ptr;
      var size = m._size;
      var rows = size[0];
      var columns = size[1];
      if (rows === columns) {
        var sum = 0;
        if (values.length > 0) {
          for (var j = 0; j < columns; j++) {
            var k0 = ptr[j];
            var k1 = ptr[j + 1];
            for (var k = k0; k < k1; k++) {
              var i = index[k];
              if (i === j) {
                sum = add(sum, values[k]);
                break;
              }
              if (i > j) {
                break;
              }
            }
          }
        }
        return sum;
      }
      throw new RangeError('Matrix must be square (size: ' + format(size) + ')');
    };
    trace.toTex = '\\mathrm{tr}\\left(${args[0]}\\right)';
    return trace;
  }
  exports.name = 'trace';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1d1", ["a4", "b1", "b5", "cd", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var clone = $__require('a4').clone;
  var format = $__require('b1').format;
  function factory(type, config, load, typed) {
    var latex = $__require('b5');
    var matrix = load($__require('cd'));
    var DenseMatrix = type.DenseMatrix,
        SparseMatrix = type.SparseMatrix;
    var transpose = typed('transpose', {
      'Array': function(x) {
        return transpose(matrix(x)).valueOf();
      },
      'Matrix': function(x) {
        var size = x.size();
        var c;
        switch (size.length) {
          case 1:
            c = x.clone();
            break;
          case 2:
            var rows = size[0];
            var columns = size[1];
            if (columns === 0) {
              throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + format(size) + ')');
            }
            switch (x.storage()) {
              case 'dense':
                c = _denseTranspose(x, rows, columns);
                break;
              case 'sparse':
                c = _sparseTranspose(x, rows, columns);
                break;
            }
            break;
          default:
            throw new RangeError('Matrix must be a vector or two dimensional (size: ' + format(this._size) + ')');
        }
        return c;
      },
      'any': function(x) {
        return clone(x);
      }
    });
    var _denseTranspose = function(m, rows, columns) {
      var data = m._data;
      var transposed = [];
      var transposedRow;
      for (var j = 0; j < columns; j++) {
        transposedRow = transposed[j] = [];
        for (var i = 0; i < rows; i++) {
          transposedRow[i] = clone(data[i][j]);
        }
      }
      return new DenseMatrix({
        data: transposed,
        size: [columns, rows],
        datatype: m._datatype
      });
    };
    var _sparseTranspose = function(m, rows, columns) {
      var values = m._values;
      var index = m._index;
      var ptr = m._ptr;
      var cvalues = values ? [] : undefined;
      var cindex = [];
      var cptr = [];
      var w = [];
      for (var x = 0; x < rows; x++)
        w[x] = 0;
      var p,
          l,
          j;
      for (p = 0, l = index.length; p < l; p++) {
        w[index[p]]++;
      }
      var sum = 0;
      for (var i = 0; i < rows; i++) {
        cptr.push(sum);
        sum += w[i];
        w[i] = cptr[i];
      }
      cptr.push(sum);
      for (j = 0; j < columns; j++) {
        for (var k0 = ptr[j],
            k1 = ptr[j + 1],
            k = k0; k < k1; k++) {
          var q = w[index[k]]++;
          cindex[q] = j;
          if (values)
            cvalues[q] = clone(values[k]);
        }
      }
      return new SparseMatrix({
        values: cvalues,
        index: cindex,
        ptr: cptr,
        size: [columns, rows],
        datatype: m._datatype
      });
    };
    transpose.toTex = '\\left(${args[0]}\\right)' + latex.operators['transpose'];
    return transpose;
  }
  exports.name = 'transpose';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("208", ["a2", "da", "cd", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var isInteger = $__require('a2').isInteger;
  var resize = $__require('da').resize;
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var zeros = typed('zeros', {
      '': function() {
        return (config.matrix === 'Array') ? _zeros([]) : _zeros([], 'default');
      },
      '...number | BigNumber | string': function(size) {
        var last = size[size.length - 1];
        if (typeof last === 'string') {
          var format = size.pop();
          return _zeros(size, format);
        } else if (config.matrix === 'Array') {
          return _zeros(size);
        } else {
          return _zeros(size, 'default');
        }
      },
      'Array': _zeros,
      'Matrix': function(size) {
        var format = size.storage();
        return _zeros(size.valueOf(), format);
      },
      'Array | Matrix, string': function(size, format) {
        return _zeros(size.valueOf(), format);
      }
    });
    zeros.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return zeros;
    function _zeros(size, format) {
      var hasBigNumbers = _normalize(size);
      var defaultValue = hasBigNumbers ? new type.BigNumber(0) : 0;
      _validate(size);
      if (format) {
        var m = matrix(format);
        if (size.length > 0) {
          return m.resize(size, defaultValue);
        }
        return m;
      } else {
        var arr = [];
        if (size.length > 0) {
          return resize(arr, size, defaultValue);
        }
        return arr;
      }
    }
    function _normalize(size) {
      var hasBigNumbers = false;
      size.forEach(function(value, index, arr) {
        if (value && value.isBigNumber === true) {
          hasBigNumbers = true;
          arr[index] = value.toNumber();
        }
      });
      return hasBigNumbers;
    }
    function _validate(size) {
      size.forEach(function(value) {
        if (typeof value !== 'number' || !isInteger(value) || value < 0) {
          throw new Error('Parameters in function zeros must be positive integers');
        }
      });
    }
  }
  exports.name = 'zeros';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("242", ["1a1", "238", "243", "239", "23a", "244", "1a3", "23b", "1a5", "245", "1a8", "23c", "246", "1b1", "23d", "23e", "23f", "241", "1b3", "205", "1d1", "208", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = [$__require('1a1'), $__require('238'), $__require('243'), $__require('239'), $__require('23a'), $__require('244'), $__require('1a3'), $__require('23b'), $__require('1a5'), $__require('245'), $__require('1a8'), $__require('23c'), $__require('246'), $__require('1b1'), $__require('23d'), $__require('23e'), $__require('23f'), $__require('241'), $__require('1b3'), $__require('205'), $__require('1d1'), $__require('208')];
  return module.exports;
});

$__System.registerDynamic("225", ["a2", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var isInteger = $__require('a2').isInteger;
  function factory(type, config, load, typed) {
    var combinations = typed('combinations', {
      'number, number': function(n, k) {
        var max,
            result,
            i;
        if (!isInteger(n) || n < 0) {
          throw new TypeError('Positive integer value expected in function combinations');
        }
        if (!isInteger(k) || k < 0) {
          throw new TypeError('Positive integer value expected in function combinations');
        }
        if (k > n) {
          throw new TypeError('k must be less than or equal to n');
        }
        max = Math.max(k, n - k);
        result = 1;
        for (i = 1; i <= n - max; i++) {
          result = result * (max + i) / i;
        }
        return result;
      },
      'BigNumber, BigNumber': function(n, k) {
        var max,
            result,
            i,
            ii;
        var one = new type.BigNumber(1);
        if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
          throw new TypeError('Positive integer value expected in function combinations');
        }
        if (k.gt(n)) {
          throw new TypeError('k must be less than n in function combinations');
        }
        max = n.minus(k);
        if (k.lt(max))
          max = k;
        result = one;
        for (i = one, ii = n.minus(max); i.lte(ii); i = i.plus(1)) {
          result = result.times(max.plus(i)).dividedBy(i);
        }
        return result;
      }
    });
    combinations.toTex = '\\binom{${args[0]}}{${args[1]}}';
    return combinations;
  }
  function isPositiveInteger(n) {
    return n.isInteger() && n.gte(0);
  }
  exports.name = 'combinations';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("20f", ["cd", "1c2", "b5", "1ec", "1f2", "1f3", "1ee", "1f4", "1ef", "1f0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var divideScalar = load($__require('1c2'));
    var latex = $__require('b5');
    var algorithm02 = load($__require('1ec'));
    var algorithm03 = load($__require('1f2'));
    var algorithm07 = load($__require('1f3'));
    var algorithm11 = load($__require('1ee'));
    var algorithm12 = load($__require('1f4'));
    var algorithm13 = load($__require('1ef'));
    var algorithm14 = load($__require('1f0'));
    var dotDivide = typed('dotDivide', {
      'any, any': divideScalar,
      'Matrix, Matrix': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            switch (y.storage()) {
              case 'sparse':
                c = algorithm07(x, y, divideScalar, false);
                break;
              default:
                c = algorithm02(y, x, divideScalar, true);
                break;
            }
            break;
          default:
            switch (y.storage()) {
              case 'sparse':
                c = algorithm03(x, y, divideScalar, false);
                break;
              default:
                c = algorithm13(x, y, divideScalar);
                break;
            }
            break;
        }
        return c;
      },
      'Array, Array': function(x, y) {
        return dotDivide(matrix(x), matrix(y)).valueOf();
      },
      'Array, Matrix': function(x, y) {
        return dotDivide(matrix(x), y);
      },
      'Matrix, Array': function(x, y) {
        return dotDivide(x, matrix(y));
      },
      'Matrix, any': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            c = algorithm11(x, y, divideScalar, false);
            break;
          default:
            c = algorithm14(x, y, divideScalar, false);
            break;
        }
        return c;
      },
      'any, Matrix': function(x, y) {
        var c;
        switch (y.storage()) {
          case 'sparse':
            c = algorithm12(y, x, divideScalar, true);
            break;
          default:
            c = algorithm14(y, x, divideScalar, true);
            break;
        }
        return c;
      },
      'Array, any': function(x, y) {
        return algorithm14(matrix(x), y, divideScalar, false).valueOf();
      },
      'any, Array': function(x, y) {
        return algorithm14(matrix(y), x, divideScalar, true).valueOf();
      }
    });
    dotDivide.toTex = '\\left(${args[0]}' + latex.operators['dotDivide'] + '${args[1]}\\right)';
    return dotDivide;
  }
  exports.name = 'dotDivide';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("210", ["ad", "1c2", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var divideScalar = load($__require('1c2'));
    var log = typed('log', {
      'number': function(x) {
        if (x >= 0 || config.predictable) {
          return Math.log(x);
        } else {
          return new type.Complex(x, 0).log();
        }
      },
      'Complex': function(x) {
        return x.log();
      },
      'BigNumber': function(x) {
        if (!x.isNegative() || config.predictable) {
          return x.ln();
        } else {
          return new type.Complex(x.toNumber(), 0).log();
        }
      },
      'Array | Matrix': function(x) {
        return deepMap(x, log);
      },
      'any, any': function(x, base) {
        return divideScalar(log(x), log(base));
      }
    });
    log.toTex = {
      1: '\\ln\\left(${args[0]}\\right)',
      2: '\\log_{${args[1]}}\\left(${args[0]}\\right)'
    };
    return log;
  }
  exports.name = 'log';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("247", ["cd", "20e", "248", "1d0", "20f", "210", "1c6", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var divide = load($__require('20e'));
    var sum = load($__require('248'));
    var multiply = load($__require('1d0'));
    var dotDivide = load($__require('20f'));
    var log = load($__require('210'));
    var isNumeric = load($__require('1c6'));
    var kldivergence = typed('kldivergence', {
      'Array, Array': function(q, p) {
        return _kldiv(matrix(q), matrix(p));
      },
      'Matrix, Array': function(q, p) {
        return _kldiv(q, matrix(p));
      },
      'Array, Matrix': function(q, p) {
        return _kldiv(matrix(q), p);
      },
      'Matrix, Matrix': function(q, p) {
        return _kldiv(q, p);
      }
    });
    function _kldiv(q, p) {
      var plength = p.size().length;
      var qlength = q.size().length;
      if (plength > 1) {
        throw new Error('first object must be one dimensional');
      }
      if (qlength > 1) {
        throw new Error('second object must be one dimensional');
      }
      if (plength !== qlength) {
        throw new Error("Length of two vectors must be equal");
      }
      var sumq = sum(q);
      if (sumq === 0) {
        throw new Error("Sum of elements in first object must be non zero");
      }
      var sump = sum(p);
      if (sump === 0) {
        throw new Error("Sum of elements in second object must be non zero");
      }
      var qnorm = divide(q, sum(q));
      var pnorm = divide(p, sum(p));
      var result = sum(multiply(qnorm, log(dotDivide(qnorm, pnorm))));
      if (isNumeric(result)) {
        return result;
      } else {
        return Number.NaN;
      }
    }
    return kldivergence;
  }
  exports.name = 'kldivergence';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("249", ["24a", "c2", "1d0", "20e", "226", "223", "1fe", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepForEach = $__require('24a');
  function factory(type, config, load, typed) {
    var add = load($__require('c2'));
    var multiply = load($__require('1d0'));
    var divide = load($__require('20e'));
    var factorial = load($__require('226'));
    var isInteger = load($__require('223'));
    var isPositive = load($__require('1fe'));
    return typed('multinomial', {'Array | Matrix': function(a) {
        var sum = 0;
        var denom = 1;
        deepForEach(a, function(ai) {
          if (!isInteger(ai) || !isPositive(ai)) {
            throw new TypeError('Positive integer value expected in function multinomial');
          }
          sum = add(sum, ai);
          denom = multiply(denom, factorial(ai));
        });
        return divide(factorial(sum), denom);
      }});
  }
  exports.name = 'multinomial';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("bb", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var fraction = typed('fraction', {
      'number': function(x) {
        if (!isFinite(x) || isNaN(x)) {
          throw new Error(x + ' cannot be represented as a fraction');
        }
        return new type.Fraction(x);
      },
      'string': function(x) {
        return new type.Fraction(x);
      },
      'number, number': function(numerator, denominator) {
        return new type.Fraction(numerator, denominator);
      },
      'BigNumber': function(x) {
        return new type.Fraction(x.toString());
      },
      'Fraction': function(x) {
        return x;
      },
      'Object': function(x) {
        return new type.Fraction(x);
      },
      'Array | Matrix': function(x) {
        return deepMap(x, fraction);
      }
    });
    return fraction;
  }
  exports.name = 'fraction';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("d6", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var number = typed('number', {
      '': function() {
        return 0;
      },
      'number': function(x) {
        return x;
      },
      'string': function(x) {
        var num = Number(x);
        if (isNaN(num)) {
          throw new SyntaxError('String "' + x + '" is no valid number');
        }
        return num;
      },
      'BigNumber': function(x) {
        return x.toNumber();
      },
      'Fraction': function(x) {
        return x.valueOf();
      },
      'Unit': function(x) {
        throw new Error('Second argument with valueless unit expected');
      },
      'Unit, string | Unit': function(unit, valuelessUnit) {
        return unit.toNumber(valuelessUnit);
      },
      'Array | Matrix': function(x) {
        return deepMap(x, number);
      }
    });
    number.toTex = {
      0: '0',
      1: '\\left(${args[0]}\\right)',
      2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
    };
    return number;
  }
  exports.name = 'number';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1c3", ["a2", "da", "b5", "244", "1d0", "cd", "bb", "d6", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var isInteger = $__require('a2').isInteger;
  var size = $__require('da').size;
  function factory(type, config, load, typed) {
    var latex = $__require('b5');
    var eye = load($__require('244'));
    var multiply = load($__require('1d0'));
    var matrix = load($__require('cd'));
    var fraction = load($__require('bb'));
    var number = load($__require('d6'));
    var pow = typed('pow', {
      'number, number': _pow,
      'Complex, Complex': function(x, y) {
        return x.pow(y);
      },
      'BigNumber, BigNumber': function(x, y) {
        if (y.isInteger() || x >= 0 || config.predictable) {
          return x.pow(y);
        } else {
          return new type.Complex(x.toNumber(), 0).pow(y.toNumber(), 0);
        }
      },
      'Fraction, Fraction': function(x, y) {
        if (y.d !== 1) {
          if (config.predictable) {
            throw new Error('Function pow does not support non-integer exponents for fractions.');
          } else {
            return _pow(x.valueOf(), y.valueOf());
          }
        } else {
          return x.pow(y);
        }
      },
      'Array, number': _powArray,
      'Array, BigNumber': function(x, y) {
        return _powArray(x, y.toNumber());
      },
      'Matrix, number': _powMatrix,
      'Matrix, BigNumber': function(x, y) {
        return _powMatrix(x, y.toNumber());
      },
      'Unit, number': function(x, y) {
        return x.pow(y);
      }
    });
    function _pow(x, y) {
      if (config.predictable && !isInteger(y) && x < 0) {
        try {
          var yFrac = fraction(y);
          var yNum = number(yFrac);
          if (y === yNum || Math.abs((y - yNum) / y) < 1e-14) {
            if (yFrac.d % 2 === 1) {
              return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);
            }
          }
        } catch (ex) {}
      }
      if (isInteger(y) || x >= 0 || config.predictable) {
        return Math.pow(x, y);
      } else {
        return new type.Complex(x, 0).pow(y, 0);
      }
    }
    function _powArray(x, y) {
      if (!isInteger(y) || y < 0) {
        throw new TypeError('For A^b, b must be a positive integer (value is ' + y + ')');
      }
      var s = size(x);
      if (s.length != 2) {
        throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');
      }
      if (s[0] != s[1]) {
        throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');
      }
      var res = eye(s[0]).valueOf();
      var px = x;
      while (y >= 1) {
        if ((y & 1) == 1) {
          res = multiply(px, res);
        }
        y >>= 1;
        px = multiply(px, px);
      }
      return res;
    }
    function _powMatrix(x, y) {
      return matrix(_powArray(x.valueOf(), y));
    }
    pow.toTex = '\\left(${args[0]}\\right)' + latex.operators['pow'] + '{${args[1]}}';
    return pow;
  }
  exports.name = 'pow';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("24b", ["ad", "a2", "1d0", "1c3", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  var isInteger = $__require('a2').isInteger;
  function factory(type, config, load, typed) {
    var multiply = load($__require('1d0'));
    var pow = load($__require('1c3'));
    var gamma = typed('gamma', {
      'number': function(n) {
        var t,
            x;
        if (isInteger(n)) {
          if (n <= 0) {
            return isFinite(n) ? Infinity : NaN;
          }
          if (n > 171) {
            return Infinity;
          }
          var value = n - 2;
          var res = n - 1;
          while (value > 1) {
            res *= value;
            value--;
          }
          if (res == 0) {
            res = 1;
          }
          return res;
        }
        if (n < 0.5) {
          return Math.PI / (Math.sin(Math.PI * n) * gamma(1 - n));
        }
        if (n >= 171.35) {
          return Infinity;
        }
        if (n > 85.0) {
          var twoN = n * n;
          var threeN = twoN * n;
          var fourN = threeN * n;
          var fiveN = fourN * n;
          return Math.sqrt(2 * Math.PI / n) * Math.pow((n / Math.E), n) * (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) - 571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) + 5246819 / (75246796800 * fiveN * n));
        }
        --n;
        x = p[0];
        for (var i = 1; i < p.length; ++i) {
          x += p[i] / (n + i);
        }
        t = n + g + 0.5;
        return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;
      },
      'Complex': function(n) {
        var t,
            x;
        if (n.im == 0) {
          return gamma(n.re);
        }
        n = new type.Complex(n.re - 1, n.im);
        x = new type.Complex(p[0], 0);
        for (var i = 1; i < p.length; ++i) {
          var real = n.re + i;
          var den = real * real + n.im * n.im;
          if (den != 0) {
            x.re += p[i] * real / den;
            x.im += -(p[i] * n.im) / den;
          } else {
            x.re = p[i] < 0 ? -Infinity : Infinity;
          }
        }
        t = new type.Complex(n.re + g + 0.5, n.im);
        var twoPiSqrt = Math.sqrt(2 * Math.PI);
        n.re += 0.5;
        var result = pow(t, n);
        if (result.im == 0) {
          result.re *= twoPiSqrt;
        } else if (result.re == 0) {
          result.im *= twoPiSqrt;
        } else {
          result.re *= twoPiSqrt;
          result.im *= twoPiSqrt;
        }
        var r = Math.exp(-t.re);
        t.re = r * Math.cos(-t.im);
        t.im = r * Math.sin(-t.im);
        return multiply(multiply(result, t), x);
      },
      'BigNumber': function(n) {
        if (n.isInteger()) {
          return (n.isNegative() || n.isZero()) ? new type.BigNumber(Infinity) : bigFactorial(n.minus(1));
        }
        if (!n.isFinite()) {
          return new type.BigNumber(n.isNegative() ? NaN : Infinity);
        }
        throw new Error('Integer BigNumber expected');
      },
      'Array | Matrix': function(n) {
        return deepMap(n, gamma);
      }
    });
    function bigFactorial(n) {
      if (n.isZero()) {
        return new type.BigNumber(1);
      }
      var precision = config.precision + (Math.log(n.toNumber()) | 0);
      var Big = type.BigNumber.clone({precision: precision});
      var res = new Big(n);
      var value = n.toNumber() - 1;
      while (value > 1) {
        res = res.times(value);
        value--;
      }
      return new type.BigNumber(res.toPrecision(type.BigNumber.precision));
    }
    gamma.toTex = '\\Gamma\\left(${args[0]}\\right)';
    return gamma;
  }
  var g = 4.7421875;
  var p = [0.99999999999999709182, 57.156235665862923517, -59.597960355475491248, 14.136097974741747174, -0.49191381609762019978, 0.33994649984811888699e-4, 0.46523628927048575665e-4, -0.98374475304879564677e-4, 0.15808870322491248884e-3, -0.21026444172410488319e-3, 0.21743961811521264320e-3, -0.16431810653676389022e-3, 0.84418223983852743293e-4, -0.26190838401581408670e-4, 0.36899182659531622704e-5];
  exports.name = 'gamma';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("226", ["ad", "24b", "b5", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var gamma = load($__require('24b'));
    var latex = $__require('b5');
    var factorial = typed('factorial', {
      'number': function(n) {
        if (n < 0) {
          throw new Error('Value must be non-negative');
        }
        return gamma(n + 1);
      },
      'BigNumber': function(n) {
        if (n.isNegative()) {
          throw new Error('Value must be non-negative');
        }
        return gamma(n.plus(1));
      },
      'Array | Matrix': function(n) {
        return deepMap(n, factorial);
      }
    });
    factorial.toTex = '\\left(${args[0]}\\right)' + latex.operators['factorial'];
    return factorial;
  }
  exports.name = 'factorial';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("24c", ["a2", "226", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var isInteger = $__require('a2').isInteger;
  function factory(type, config, load, typed) {
    var factorial = load($__require('226'));
    var permutations = typed('permutations', {
      'number | BigNumber': factorial,
      'number, number': function(n, k) {
        var result,
            i;
        if (!isInteger(n) || n < 0) {
          throw new TypeError('Positive integer value expected in function permutations');
        }
        if (!isInteger(k) || k < 0) {
          throw new TypeError('Positive integer value expected in function permutations');
        }
        if (k > n) {
          throw new TypeError('second argument k must be less than or equal to first argument n');
        }
        result = 1;
        for (i = n - k + 1; i <= n; i++) {
          result = result * i;
        }
        return result;
      },
      'BigNumber, BigNumber': function(n, k) {
        var result,
            i;
        if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
          throw new TypeError('Positive integer value expected in function permutations');
        }
        if (k.gt(n)) {
          throw new TypeError('second argument k must be less than or equal to first argument n');
        }
        result = new type.BigNumber(1);
        for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {
          result = result.times(i);
        }
        return result;
      }
    });
    permutations.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return permutations;
  }
  function isPositiveInteger(n) {
    return n.isInteger() && n.gte(0);
  }
  exports.name = 'permutations';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("24d", ["24e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var distribution = load($__require('24e'));
    var pickRandom = distribution('uniform').pickRandom;
    pickRandom.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return pickRandom;
  }
  exports.name = 'pickRandom';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("24f", ["24e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var distribution = load($__require('24e'));
    var random = distribution('uniform').random;
    random.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return random;
  }
  exports.name = 'random';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("24e", ["a5", "1aa", "cd", "da", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ArgumentsError = $__require('a5');
  var isCollection = $__require('1aa');
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var array = $__require('da');
    function distribution(name) {
      if (!distributions.hasOwnProperty(name))
        throw new Error('Unknown distribution ' + name);
      var args = Array.prototype.slice.call(arguments, 1),
          distribution = distributions[name].apply(this, args);
      return (function(distribution) {
        var randFunctions = {
          random: function(arg1, arg2, arg3) {
            var size,
                min,
                max;
            if (arguments.length > 3) {
              throw new ArgumentsError('random', arguments.length, 0, 3);
            } else if (arguments.length === 1) {
              if (isCollection(arg1)) {
                size = arg1;
              } else {
                max = arg1;
              }
            } else if (arguments.length === 2) {
              if (isCollection(arg1)) {
                size = arg1;
                max = arg2;
              } else {
                min = arg1;
                max = arg2;
              }
            } else {
              size = arg1;
              min = arg2;
              max = arg3;
            }
            if (max === undefined)
              max = 1;
            if (min === undefined)
              min = 0;
            if (size !== undefined) {
              var res = _randomDataForMatrix(size.valueOf(), min, max, _random);
              return (size && size.isMatrix === true) ? matrix(res) : res;
            } else
              return _random(min, max);
          },
          randomInt: function(arg1, arg2, arg3) {
            var size,
                min,
                max;
            if (arguments.length > 3 || arguments.length < 1)
              throw new ArgumentsError('randomInt', arguments.length, 1, 3);
            else if (arguments.length === 1)
              if (isCollection(arg1)) {
                size = arg1;
              } else {
                max = arg1;
              }
            else if (arguments.length === 2) {
              if (isCollection(arg1)) {
                size = arg1;
                max = arg2;
              } else {
                min = arg1;
                max = arg2;
              }
            } else {
              size = arg1;
              min = arg2;
              max = arg3;
            }
            if (min === undefined)
              min = 0;
            if (size !== undefined) {
              var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);
              return (size && size.isMatrix === true) ? matrix(res) : res;
            } else
              return _randomInt(min, max);
          },
          pickRandom: function(possibles) {
            if (arguments.length !== 1) {
              throw new ArgumentsError('pickRandom', arguments.length, 1);
            }
            if (possibles && possibles.isMatrix === true) {
              possibles = possibles.valueOf();
            } else if (!Array.isArray(possibles)) {
              throw new TypeError('Unsupported type of value in function pickRandom');
            }
            if (array.size(possibles).length > 1) {
              throw new Error('Only one dimensional vectors supported');
            }
            return possibles[Math.floor(Math.random() * possibles.length)];
          }
        };
        var _random = function(min, max) {
          return min + distribution() * (max - min);
        };
        var _randomInt = function(min, max) {
          return Math.floor(min + distribution() * (max - min));
        };
        var _randomDataForMatrix = function(size, min, max, randFunc) {
          var data = [],
              length,
              i;
          size = size.slice(0);
          if (size.length > 1) {
            for (i = 0, length = size.shift(); i < length; i++)
              data.push(_randomDataForMatrix(size, min, max, randFunc));
          } else {
            for (i = 0, length = size.shift(); i < length; i++)
              data.push(randFunc(min, max));
          }
          return data;
        };
        return randFunctions;
      })(distribution);
    }
    var distributions = {
      uniform: function() {
        return Math.random;
      },
      normal: function() {
        return function() {
          var u1,
              u2,
              picked = -1;
          while (picked < 0 || picked > 1) {
            u1 = Math.random();
            u2 = Math.random();
            picked = 1 / 6 * Math.pow(-2 * Math.log(u1), 0.5) * Math.cos(2 * Math.PI * u2) + 0.5;
          }
          return picked;
        };
      }
    };
    distribution.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return distribution;
  }
  exports.name = 'distribution';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("250", ["24e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var distribution = load($__require('24e'));
    var randomInt = distribution('uniform').randomInt;
    randomInt.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return randomInt;
  }
  exports.name = 'randomInt';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("251", ["225", "226", "24b", "247", "249", "24c", "24d", "24f", "250", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = [$__require('225'), $__require('226'), $__require('24b'), $__require('247'), $__require('249'), $__require('24c'), $__require('24d'), $__require('24f'), $__require('250')];
  return module.exports;
});

$__System.registerDynamic("252", ["1c5", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var equal = load($__require('1c5'));
    var deepEqual = typed('deepEqual', {'any, any': function(x, y) {
        return _deepEqual(x.valueOf(), y.valueOf());
      }});
    deepEqual.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return deepEqual;
    function _deepEqual(x, y) {
      if (Array.isArray(x)) {
        if (Array.isArray(y)) {
          var len = x.length;
          if (len !== y.length) {
            return false;
          }
          for (var i = 0; i < len; i++) {
            if (!_deepEqual(x[i], y[i])) {
              return false;
            }
          }
          return true;
        } else {
          return false;
        }
      } else {
        if (Array.isArray(y)) {
          return false;
        } else {
          return equal(x, y);
        }
      }
    }
  }
  exports.name = 'deepEqual';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1c5", ["cd", "c0", "1f2", "1f3", "1f4", "1ef", "1f0", "b5", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var equalScalar = load($__require('c0'));
    var algorithm03 = load($__require('1f2'));
    var algorithm07 = load($__require('1f3'));
    var algorithm12 = load($__require('1f4'));
    var algorithm13 = load($__require('1ef'));
    var algorithm14 = load($__require('1f0'));
    var latex = $__require('b5');
    var equal = typed('equal', {
      'any, any': function(x, y) {
        if (x === null) {
          return y === null;
        }
        if (y === null) {
          return x === null;
        }
        if (x === undefined) {
          return y === undefined;
        }
        if (y === undefined) {
          return x === undefined;
        }
        return equalScalar(x, y);
      },
      'Matrix, Matrix': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            switch (y.storage()) {
              case 'sparse':
                c = algorithm07(x, y, equalScalar);
                break;
              default:
                c = algorithm03(y, x, equalScalar, true);
                break;
            }
            break;
          default:
            switch (y.storage()) {
              case 'sparse':
                c = algorithm03(x, y, equalScalar, false);
                break;
              default:
                c = algorithm13(x, y, equalScalar);
                break;
            }
            break;
        }
        return c;
      },
      'Array, Array': function(x, y) {
        return equal(matrix(x), matrix(y)).valueOf();
      },
      'Array, Matrix': function(x, y) {
        return equal(matrix(x), y);
      },
      'Matrix, Array': function(x, y) {
        return equal(x, matrix(y));
      },
      'Matrix, any': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            c = algorithm12(x, y, equalScalar, false);
            break;
          default:
            c = algorithm14(x, y, equalScalar, false);
            break;
        }
        return c;
      },
      'any, Matrix': function(x, y) {
        var c;
        switch (y.storage()) {
          case 'sparse':
            c = algorithm12(y, x, equalScalar, true);
            break;
          default:
            c = algorithm14(y, x, equalScalar, true);
            break;
        }
        return c;
      },
      'Array, any': function(x, y) {
        return algorithm14(matrix(x), y, equalScalar, false).valueOf();
      },
      'any, Array': function(x, y) {
        return algorithm14(matrix(y), x, equalScalar, true).valueOf();
      }
    });
    equal.toTex = '\\left(${args[0]}' + latex.operators['equal'] + '${args[1]}\\right)';
    return equal;
  }
  exports.name = 'equal';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1df", ["a2", "253", "cd", "1f2", "1f3", "1f4", "1ef", "1f0", "b5", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var nearlyEqual = $__require('a2').nearlyEqual;
  var bigNearlyEqual = $__require('253');
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var algorithm03 = load($__require('1f2'));
    var algorithm07 = load($__require('1f3'));
    var algorithm12 = load($__require('1f4'));
    var algorithm13 = load($__require('1ef'));
    var algorithm14 = load($__require('1f0'));
    var latex = $__require('b5');
    var largerEq = typed('largerEq', {
      'boolean, boolean': function(x, y) {
        return x >= y;
      },
      'number, number': function(x, y) {
        return x >= y || nearlyEqual(x, y, config.epsilon);
      },
      'BigNumber, BigNumber': function(x, y) {
        return x.gte(y) || bigNearlyEqual(x, y, config.epsilon);
      },
      'Fraction, Fraction': function(x, y) {
        return x.compare(y) !== -1;
      },
      'Complex, Complex': function() {
        throw new TypeError('No ordering relation is defined for complex numbers');
      },
      'Unit, Unit': function(x, y) {
        if (!x.equalBase(y)) {
          throw new Error('Cannot compare units with different base');
        }
        return largerEq(x.value, y.value);
      },
      'string, string': function(x, y) {
        return x >= y;
      },
      'Matrix, Matrix': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            switch (y.storage()) {
              case 'sparse':
                c = algorithm07(x, y, largerEq);
                break;
              default:
                c = algorithm03(y, x, largerEq, true);
                break;
            }
            break;
          default:
            switch (y.storage()) {
              case 'sparse':
                c = algorithm03(x, y, largerEq, false);
                break;
              default:
                c = algorithm13(x, y, largerEq);
                break;
            }
            break;
        }
        return c;
      },
      'Array, Array': function(x, y) {
        return largerEq(matrix(x), matrix(y)).valueOf();
      },
      'Array, Matrix': function(x, y) {
        return largerEq(matrix(x), y);
      },
      'Matrix, Array': function(x, y) {
        return largerEq(x, matrix(y));
      },
      'Matrix, any': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            c = algorithm12(x, y, largerEq, false);
            break;
          default:
            c = algorithm14(x, y, largerEq, false);
            break;
        }
        return c;
      },
      'any, Matrix': function(x, y) {
        var c;
        switch (y.storage()) {
          case 'sparse':
            c = algorithm12(y, x, largerEq, true);
            break;
          default:
            c = algorithm14(y, x, largerEq, true);
            break;
        }
        return c;
      },
      'Array, any': function(x, y) {
        return algorithm14(matrix(x), y, largerEq, false).valueOf();
      },
      'any, Array': function(x, y) {
        return algorithm14(matrix(y), x, largerEq, true).valueOf();
      }
    });
    largerEq.toTex = '\\left(${args[0]}' + latex.operators['largerEq'] + '${args[1]}\\right)';
    return largerEq;
  }
  exports.name = 'largerEq';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("254", ["a2", "253", "cd", "1f2", "1f3", "1f4", "1ef", "1f0", "b5", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var nearlyEqual = $__require('a2').nearlyEqual;
  var bigNearlyEqual = $__require('253');
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var algorithm03 = load($__require('1f2'));
    var algorithm07 = load($__require('1f3'));
    var algorithm12 = load($__require('1f4'));
    var algorithm13 = load($__require('1ef'));
    var algorithm14 = load($__require('1f0'));
    var latex = $__require('b5');
    var smallerEq = typed('smallerEq', {
      'boolean, boolean': function(x, y) {
        return x <= y;
      },
      'number, number': function(x, y) {
        return x <= y || nearlyEqual(x, y, config.epsilon);
      },
      'BigNumber, BigNumber': function(x, y) {
        return x.lte(y) || bigNearlyEqual(x, y, config.epsilon);
      },
      'Fraction, Fraction': function(x, y) {
        return x.compare(y) !== 1;
      },
      'Complex, Complex': function() {
        throw new TypeError('No ordering relation is defined for complex numbers');
      },
      'Unit, Unit': function(x, y) {
        if (!x.equalBase(y)) {
          throw new Error('Cannot compare units with different base');
        }
        return smallerEq(x.value, y.value);
      },
      'string, string': function(x, y) {
        return x <= y;
      },
      'Matrix, Matrix': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            switch (y.storage()) {
              case 'sparse':
                c = algorithm07(x, y, smallerEq);
                break;
              default:
                c = algorithm03(y, x, smallerEq, true);
                break;
            }
            break;
          default:
            switch (y.storage()) {
              case 'sparse':
                c = algorithm03(x, y, smallerEq, false);
                break;
              default:
                c = algorithm13(x, y, smallerEq);
                break;
            }
            break;
        }
        return c;
      },
      'Array, Array': function(x, y) {
        return smallerEq(matrix(x), matrix(y)).valueOf();
      },
      'Array, Matrix': function(x, y) {
        return smallerEq(matrix(x), y);
      },
      'Matrix, Array': function(x, y) {
        return smallerEq(x, matrix(y));
      },
      'Matrix, any': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            c = algorithm12(x, y, smallerEq, false);
            break;
          default:
            c = algorithm14(x, y, smallerEq, false);
            break;
        }
        return c;
      },
      'any, Matrix': function(x, y) {
        var c;
        switch (y.storage()) {
          case 'sparse':
            c = algorithm12(y, x, smallerEq, true);
            break;
          default:
            c = algorithm14(y, x, smallerEq, true);
            break;
        }
        return c;
      },
      'Array, any': function(x, y) {
        return algorithm14(matrix(x), y, smallerEq, false).valueOf();
      },
      'any, Array': function(x, y) {
        return algorithm14(matrix(y), x, smallerEq, true).valueOf();
      }
    });
    smallerEq.toTex = '\\left(${args[0]}' + latex.operators['smallerEq'] + '${args[1]}\\right)';
    return smallerEq;
  }
  exports.name = 'smallerEq';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("255", ["a2", "253", "cd", "1f2", "1f3", "1f4", "1ef", "1f0", "b5", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var nearlyEqual = $__require('a2').nearlyEqual;
  var bigNearlyEqual = $__require('253');
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var algorithm03 = load($__require('1f2'));
    var algorithm07 = load($__require('1f3'));
    var algorithm12 = load($__require('1f4'));
    var algorithm13 = load($__require('1ef'));
    var algorithm14 = load($__require('1f0'));
    var latex = $__require('b5');
    var unequal = typed('unequal', {
      'any, any': function(x, y) {
        if (x === null) {
          return y !== null;
        }
        if (y === null) {
          return x !== null;
        }
        if (x === undefined) {
          return y !== undefined;
        }
        if (y === undefined) {
          return x !== undefined;
        }
        return _unequal(x, y);
      },
      'Matrix, Matrix': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            switch (y.storage()) {
              case 'sparse':
                c = algorithm07(x, y, _unequal);
                break;
              default:
                c = algorithm03(y, x, _unequal, true);
                break;
            }
            break;
          default:
            switch (y.storage()) {
              case 'sparse':
                c = algorithm03(x, y, _unequal, false);
                break;
              default:
                c = algorithm13(x, y, _unequal);
                break;
            }
            break;
        }
        return c;
      },
      'Array, Array': function(x, y) {
        return unequal(matrix(x), matrix(y)).valueOf();
      },
      'Array, Matrix': function(x, y) {
        return unequal(matrix(x), y);
      },
      'Matrix, Array': function(x, y) {
        return unequal(x, matrix(y));
      },
      'Matrix, any': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            c = algorithm12(x, y, _unequal, false);
            break;
          default:
            c = algorithm14(x, y, _unequal, false);
            break;
        }
        return c;
      },
      'any, Matrix': function(x, y) {
        var c;
        switch (y.storage()) {
          case 'sparse':
            c = algorithm12(y, x, _unequal, true);
            break;
          default:
            c = algorithm14(y, x, _unequal, true);
            break;
        }
        return c;
      },
      'Array, any': function(x, y) {
        return algorithm14(matrix(x), y, _unequal, false).valueOf();
      },
      'any, Array': function(x, y) {
        return algorithm14(matrix(y), x, _unequal, true).valueOf();
      }
    });
    var _unequal = typed('_unequal', {
      'boolean, boolean': function(x, y) {
        return x !== y;
      },
      'number, number': function(x, y) {
        return !nearlyEqual(x, y, config.epsilon);
      },
      'BigNumber, BigNumber': function(x, y) {
        return !bigNearlyEqual(x, y, config.epsilon);
      },
      'Fraction, Fraction': function(x, y) {
        return !x.equals(y);
      },
      'Complex, Complex': function(x, y) {
        return !x.equals(y);
      },
      'Unit, Unit': function(x, y) {
        if (!x.equalBase(y)) {
          throw new Error('Cannot compare units with different base');
        }
        return unequal(x.value, y.value);
      },
      'string, string': function(x, y) {
        return x !== y;
      }
    });
    unequal.toTex = '\\left(${args[0]}' + latex.operators['unequal'] + '${args[1]}\\right)';
    return unequal;
  }
  exports.name = 'unequal';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("256", ["240", "252", "1c5", "c5", "1df", "c4", "254", "255", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = [$__require('240'), $__require('252'), $__require('1c5'), $__require('c5'), $__require('1df'), $__require('c4'), $__require('254'), $__require('255')];
  return module.exports;
});

$__System.registerDynamic("c5", ["a2", "253", "cd", "1f2", "1f3", "1f4", "1ef", "1f0", "b5", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var nearlyEqual = $__require('a2').nearlyEqual;
  var bigNearlyEqual = $__require('253');
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var algorithm03 = load($__require('1f2'));
    var algorithm07 = load($__require('1f3'));
    var algorithm12 = load($__require('1f4'));
    var algorithm13 = load($__require('1ef'));
    var algorithm14 = load($__require('1f0'));
    var latex = $__require('b5');
    var larger = typed('larger', {
      'boolean, boolean': function(x, y) {
        return x > y;
      },
      'number, number': function(x, y) {
        return x > y && !nearlyEqual(x, y, config.epsilon);
      },
      'BigNumber, BigNumber': function(x, y) {
        return x.gt(y) && !bigNearlyEqual(x, y, config.epsilon);
      },
      'Fraction, Fraction': function(x, y) {
        return x.compare(y) === 1;
      },
      'Complex, Complex': function() {
        throw new TypeError('No ordering relation is defined for complex numbers');
      },
      'Unit, Unit': function(x, y) {
        if (!x.equalBase(y)) {
          throw new Error('Cannot compare units with different base');
        }
        return larger(x.value, y.value);
      },
      'string, string': function(x, y) {
        return x > y;
      },
      'Matrix, Matrix': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            switch (y.storage()) {
              case 'sparse':
                c = algorithm07(x, y, larger);
                break;
              default:
                c = algorithm03(y, x, larger, true);
                break;
            }
            break;
          default:
            switch (y.storage()) {
              case 'sparse':
                c = algorithm03(x, y, larger, false);
                break;
              default:
                c = algorithm13(x, y, larger);
                break;
            }
            break;
        }
        return c;
      },
      'Array, Array': function(x, y) {
        return larger(matrix(x), matrix(y)).valueOf();
      },
      'Array, Matrix': function(x, y) {
        return larger(matrix(x), y);
      },
      'Matrix, Array': function(x, y) {
        return larger(x, matrix(y));
      },
      'Matrix, any': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            c = algorithm12(x, y, larger, false);
            break;
          default:
            c = algorithm14(x, y, larger, false);
            break;
        }
        return c;
      },
      'any, Matrix': function(x, y) {
        var c;
        switch (y.storage()) {
          case 'sparse':
            c = algorithm12(y, x, larger, true);
            break;
          default:
            c = algorithm14(y, x, larger, true);
            break;
        }
        return c;
      },
      'Array, any': function(x, y) {
        return algorithm14(matrix(x), y, larger, false).valueOf();
      },
      'any, Array': function(x, y) {
        return algorithm14(matrix(y), x, larger, true).valueOf();
      }
    });
    larger.toTex = '\\left(${args[0]}' + latex.operators['larger'] + '${args[1]}\\right)';
    return larger;
  }
  exports.name = 'larger';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1ab", ["24a", "257", "c5", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepForEach = $__require('24a');
  var reduce = $__require('257');
  function factory(type, config, load, typed) {
    var larger = load($__require('c5'));
    var max = typed('max', {
      'Array | Matrix': _max,
      'Array | Matrix, number | BigNumber': function(array, dim) {
        return reduce(array, dim.valueOf(), _largest);
      },
      '...': function() {
        return _max(arguments);
      }
    });
    max.toTex = '\\max\\left(${args}\\right)';
    return max;
    function _largest(x, y) {
      return larger(x, y) ? x : y;
    }
    function _max(array) {
      var max = undefined;
      deepForEach(array, function(value) {
        if (max === undefined || larger(value, max)) {
          max = value;
        }
      });
      if (max === undefined) {
        throw new Error('Cannot calculate max of an empty array');
      }
      return max;
    }
  }
  exports.name = 'max';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("243", ["bd", "cd", "c2", "1c0", "1d0", "1cb", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var util = $__require('bd');
  var object = util.object;
  var string = util.string;
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var add = load($__require('c2'));
    var subtract = load($__require('1c0'));
    var multiply = load($__require('1d0'));
    var unaryMinus = load($__require('1cb'));
    var det = typed('det', {
      'any': function(x) {
        return object.clone(x);
      },
      'Array | Matrix': function det(x) {
        var size;
        if (x && x.isMatrix === true) {
          size = x.size();
        } else if (Array.isArray(x)) {
          x = matrix(x);
          size = x.size();
        } else {
          size = [];
        }
        switch (size.length) {
          case 0:
            return object.clone(x);
          case 1:
            if (size[0] == 1) {
              return object.clone(x.valueOf()[0]);
            } else {
              throw new RangeError('Matrix must be square ' + '(size: ' + string.format(size) + ')');
            }
          case 2:
            var rows = size[0];
            var cols = size[1];
            if (rows == cols) {
              return _det(x.clone().valueOf(), rows, cols);
            } else {
              throw new RangeError('Matrix must be square ' + '(size: ' + string.format(size) + ')');
            }
          default:
            throw new RangeError('Matrix must be two dimensional ' + '(size: ' + string.format(size) + ')');
        }
      }
    });
    det.toTex = '\\det\\left(${args[0]}\\right)';
    return det;
    function _det(matrix, rows, cols) {
      if (rows == 1) {
        return object.clone(matrix[0][0]);
      } else if (rows == 2) {
        return subtract(multiply(matrix[0][0], matrix[1][1]), multiply(matrix[1][0], matrix[0][1]));
      } else {
        var compute_mu = function(matrix) {
          var i,
              j;
          var mu = new Array(matrix.length);
          var sum = 0;
          for (i = 1; i < matrix.length; i++) {
            sum = add(sum, matrix[i][i]);
          }
          for (i = 0; i < matrix.length; i++) {
            mu[i] = new Array(matrix.length);
            mu[i][i] = unaryMinus(sum);
            for (j = 0; j < i; j++) {
              mu[i][j] = 0;
            }
            for (j = i + 1; j < matrix.length; j++) {
              mu[i][j] = matrix[i][j];
            }
            if (i + 1 < matrix.length) {
              sum = subtract(sum, matrix[i + 1][i + 1]);
            }
          }
          return mu;
        };
        var fa = matrix;
        for (var i = 0; i < rows - 1; i++) {
          fa = multiply(compute_mu(fa), matrix);
        }
        if (rows % 2 == 0) {
          return unaryMinus(fa[0][0]);
        } else {
          return fa[0][0];
        }
      }
    }
  }
  exports.name = 'det';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("244", ["da", "a2", "cd", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var array = $__require('da');
  var isInteger = $__require('a2').isInteger;
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var eye = typed('eye', {
      '': function() {
        return (config.matrix === 'Matrix') ? matrix([]) : [];
      },
      'string': function(format) {
        return matrix(format);
      },
      'number | BigNumber': function(rows) {
        return _eye(rows, rows, config.matrix === 'Matrix' ? 'default' : undefined);
      },
      'number | BigNumber, string': function(rows, format) {
        return _eye(rows, rows, format);
      },
      'number | BigNumber, number | BigNumber': function(rows, cols) {
        return _eye(rows, cols, config.matrix === 'Matrix' ? 'default' : undefined);
      },
      'number | BigNumber, number | BigNumber, string': function(rows, cols, format) {
        return _eye(rows, cols, format);
      },
      'Array': function(size) {
        return _eyeVector(size);
      },
      'Array, string': function(size, format) {
        return _eyeVector(size, format);
      },
      'Matrix': function(size) {
        return _eyeVector(size.valueOf(), size.storage());
      },
      'Matrix, string': function(size, format) {
        return _eyeVector(size.valueOf(), format);
      }
    });
    eye.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return eye;
    function _eyeVector(size, format) {
      switch (size.length) {
        case 0:
          return format ? matrix(format) : [];
        case 1:
          return _eye(size[0], size[0], format);
        case 2:
          return _eye(size[0], size[1], format);
        default:
          throw new Error('Vector containing two values expected');
      }
    }
    function _eye(rows, cols, format) {
      var Big = (rows && rows.isBigNumber === true) ? type.BigNumber : (cols && cols.isBigNumber === true) ? type.BigNumber : null;
      if (rows && rows.isBigNumber === true)
        rows = rows.toNumber();
      if (cols && cols.isBigNumber === true)
        cols = cols.toNumber();
      if (!isInteger(rows) || rows < 1) {
        throw new Error('Parameters in function eye must be positive integers');
      }
      if (!isInteger(cols) || cols < 1) {
        throw new Error('Parameters in function eye must be positive integers');
      }
      var one = Big ? new type.BigNumber(1) : 1;
      var defaultValue = Big ? new Big(0) : 0;
      var size = [rows, cols];
      if (format) {
        var F = type.Matrix.storage(format);
        return F.diagonal(size, one, 0, defaultValue);
      }
      var res = array.resize([], size, defaultValue);
      var minimum = rows < cols ? rows : cols;
      for (var d = 0; d < minimum; d++) {
        res[d][d] = one;
      }
      return res;
    }
  }
  exports.name = 'eye';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("245", ["bd", "cd", "1c2", "1bf", "1d0", "1cb", "243", "244", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var util = $__require('bd');
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var divideScalar = load($__require('1c2'));
    var addScalar = load($__require('1bf'));
    var multiply = load($__require('1d0'));
    var unaryMinus = load($__require('1cb'));
    var det = load($__require('243'));
    var eye = load($__require('244'));
    var inv = typed('inv', {
      'Array | Matrix': function(x) {
        var size = (x.isMatrix === true) ? x.size() : util.array.size(x);
        switch (size.length) {
          case 1:
            if (size[0] == 1) {
              if (x.isMatrix === true) {
                return matrix([divideScalar(1, x.valueOf()[0])]);
              } else {
                return [divideScalar(1, x[0])];
              }
            } else {
              throw new RangeError('Matrix must be square ' + '(size: ' + util.string.format(size) + ')');
            }
          case 2:
            var rows = size[0];
            var cols = size[1];
            if (rows == cols) {
              if (x.isMatrix === true) {
                return matrix(_inv(x.valueOf(), rows, cols), x.storage());
              } else {
                return _inv(x, rows, cols);
              }
            } else {
              throw new RangeError('Matrix must be square ' + '(size: ' + util.string.format(size) + ')');
            }
          default:
            throw new RangeError('Matrix must be two dimensional ' + '(size: ' + util.string.format(size) + ')');
        }
      },
      'any': function(x) {
        return divideScalar(1, x);
      }
    });
    function _inv(mat, rows, cols) {
      var r,
          s,
          f,
          value,
          temp;
      if (rows == 1) {
        value = mat[0][0];
        if (value == 0) {
          throw Error('Cannot calculate inverse, determinant is zero');
        }
        return [[divideScalar(1, value)]];
      } else if (rows == 2) {
        var d = det(mat);
        if (d == 0) {
          throw Error('Cannot calculate inverse, determinant is zero');
        }
        return [[divideScalar(mat[1][1], d), divideScalar(unaryMinus(mat[0][1]), d)], [divideScalar(unaryMinus(mat[1][0]), d), divideScalar(mat[0][0], d)]];
      } else {
        var A = mat.concat();
        for (r = 0; r < rows; r++) {
          A[r] = A[r].concat();
        }
        var B = eye(rows).valueOf();
        for (var c = 0; c < cols; c++) {
          r = c;
          while (r < rows && A[r][c] == 0) {
            r++;
          }
          if (r == rows || A[r][c] == 0) {
            throw Error('Cannot calculate inverse, determinant is zero');
          }
          if (r != c) {
            temp = A[c];
            A[c] = A[r];
            A[r] = temp;
            temp = B[c];
            B[c] = B[r];
            B[r] = temp;
          }
          var Ac = A[c],
              Bc = B[c];
          for (r = 0; r < rows; r++) {
            var Ar = A[r],
                Br = B[r];
            if (r != c) {
              if (Ar[c] != 0) {
                f = divideScalar(unaryMinus(Ar[c]), Ac[c]);
                for (s = c; s < cols; s++) {
                  Ar[s] = addScalar(Ar[s], multiply(f, Ac[s]));
                }
                for (s = 0; s < cols; s++) {
                  Br[s] = addScalar(Br[s], multiply(f, Bc[s]));
                }
              }
            } else {
              f = Ac[c];
              for (s = c; s < cols; s++) {
                Ar[s] = divideScalar(Ar[s], f);
              }
              for (s = 0; s < cols; s++) {
                Br[s] = divideScalar(Br[s], f);
              }
            }
          }
        }
        return B;
      }
    }
    inv.toTex = '\\left(${args[0]}\\right)^{-1}';
    return inv;
  }
  exports.name = 'inv';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("20e", ["a4", "1c2", "1d0", "245", "cd", "1ee", "1f0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var extend = $__require('a4').extend;
  function factory(type, config, load, typed) {
    var divideScalar = load($__require('1c2'));
    var multiply = load($__require('1d0'));
    var inv = load($__require('245'));
    var matrix = load($__require('cd'));
    var algorithm11 = load($__require('1ee'));
    var algorithm14 = load($__require('1f0'));
    var divide = typed('divide', extend({
      'Array | Matrix, Array | Matrix': function(x, y) {
        return multiply(x, inv(y));
      },
      'Matrix, any': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            c = algorithm11(x, y, divideScalar, false);
            break;
          case 'dense':
            c = algorithm14(x, y, divideScalar, false);
            break;
        }
        return c;
      },
      'Array, any': function(x, y) {
        return algorithm14(matrix(x), y, divideScalar, false).valueOf();
      },
      'any, Array | Matrix': function(x, y) {
        return multiply(x, inv(y));
      }
    }, divideScalar.signatures));
    divide.toTex = '\\frac{${args[0]}}{${args[1]}}';
    return divide;
  }
  exports.name = 'divide';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1ad", ["da", "24a", "257", "c2", "20e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var size = $__require('da').size;
  var deepForEach = $__require('24a');
  var reduce = $__require('257');
  function factory(type, config, load, typed) {
    var add = load($__require('c2'));
    var divide = load($__require('20e'));
    var mean = typed('mean', {
      'Array | Matrix': _mean,
      'Array | Matrix, number | BigNumber': _nmean,
      '...': function() {
        return _mean(arguments);
      }
    });
    mean.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return mean;
    function _nmean(array, dim) {
      var sum = reduce(array, dim, add);
      var s = Array.isArray(array) ? size(array) : array.size();
      return divide(sum, s[dim]);
    }
    function _mean(array) {
      var sum = 0;
      var num = 0;
      deepForEach(array, function(value) {
        sum = add(sum, value);
        num++;
      });
      if (num === 0) {
        throw new Error('Cannot calculate mean of an empty array');
      }
      return divide(sum, num);
    }
  }
  exports.name = 'mean';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("258", ["da", "1bf", "1c2", "240", "246", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var flatten = $__require('da').flatten;
  function factory(type, config, load, typed) {
    var add = load($__require('1bf'));
    var divide = load($__require('1c2'));
    var compare = load($__require('240'));
    var partitionSelect = load($__require('246'));
    var median = typed('median', {
      'Array | Matrix': _median,
      'Array | Matrix, number | BigNumber': function(array, dim) {
        throw new Error('median(A, dim) is not yet supported');
      },
      '...': function() {
        return _median(Array.prototype.slice.call(arguments));
      }
    });
    function _median(array) {
      array = flatten(array.valueOf());
      var num = array.length;
      if (num == 0) {
        throw new Error('Cannot calculate median of an empty array');
      }
      if (num % 2 == 0) {
        var mid = num / 2 - 1;
        var right = partitionSelect(array, mid + 1);
        var left = array[mid];
        for (var i = 0; i < mid; ++i) {
          if (compare(array[i], left) > 0) {
            left = array[i];
          }
        }
        return middle2(left, right);
      } else {
        var m = partitionSelect(array, (num - 1) / 2);
        return middle(m);
      }
    }
    var middle = typed({'number | BigNumber | Unit': function(value) {
        return value;
      }});
    var middle2 = typed({'number | BigNumber | Unit, number | BigNumber | Unit': function(left, right) {
        return divide(add(left, right), 2);
      }});
    median.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return median;
  }
  exports.name = 'median';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("257", ["da", "1b9", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var arraySize = $__require('da').size;
  var IndexError = $__require('1b9');
  module.exports = function(mat, dim, callback) {
    var size = Array.isArray(mat) ? arraySize(mat) : mat.size();
    if (dim < 0 || (dim >= size.length)) {
      throw new IndexError(dim, size.length);
    }
    if (mat && mat.isMatrix === true) {
      return mat.create(_reduce(mat.valueOf(), dim, callback));
    } else {
      return _reduce(mat, dim, callback);
    }
  };
  function _reduce(mat, dim, callback) {
    var i,
        ret,
        val,
        tran;
    if (dim <= 0) {
      if (!Array.isArray(mat[0])) {
        val = mat[0];
        for (i = 1; i < mat.length; i++) {
          val = callback(val, mat[i]);
        }
        return val;
      } else {
        tran = _switch(mat);
        ret = [];
        for (i = 0; i < tran.length; i++) {
          ret[i] = _reduce(tran[i], dim - 1, callback);
        }
        return ret;
      }
    } else {
      ret = [];
      for (i = 0; i < mat.length; i++) {
        ret[i] = _reduce(mat[i], dim - 1, callback);
      }
      return ret;
    }
  }
  function _switch(mat) {
    var I = mat.length;
    var J = mat[0].length;
    var i,
        j;
    var ret = [];
    for (j = 0; j < J; j++) {
      var tmp = [];
      for (i = 0; i < I; i++) {
        tmp.push(mat[i][j]);
      }
      ret.push(tmp);
    }
    return ret;
  }
  return module.exports;
});

$__System.registerDynamic("1f3", ["be", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var DimensionError = $__require('be');
  function factory(type, config, load, typed) {
    var DenseMatrix = type.DenseMatrix;
    var algorithm07 = function(a, b, callback) {
      var asize = a._size;
      var adt = a._datatype;
      var bsize = b._size;
      var bdt = b._datatype;
      if (asize.length !== bsize.length)
        throw new DimensionError(asize.length, bsize.length);
      if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
      var rows = asize[0];
      var columns = asize[1];
      var dt;
      var zero = 0;
      var cf = callback;
      if (typeof adt === 'string' && adt === bdt) {
        dt = adt;
        zero = typed.convert(0, dt);
        cf = typed.find(callback, [dt, dt]);
      }
      var i,
          j;
      var cdata = [];
      for (i = 0; i < rows; i++)
        cdata[i] = [];
      var c = new DenseMatrix({
        data: cdata,
        size: [rows, columns],
        datatype: dt
      });
      var xa = [];
      var xb = [];
      var wa = [];
      var wb = [];
      for (j = 0; j < columns; j++) {
        var mark = j + 1;
        _scatter(a, j, wa, xa, mark);
        _scatter(b, j, wb, xb, mark);
        for (i = 0; i < rows; i++) {
          var va = wa[i] === mark ? xa[i] : zero;
          var vb = wb[i] === mark ? xb[i] : zero;
          cdata[i][j] = cf(va, vb);
        }
      }
      return c;
    };
    var _scatter = function(m, j, w, x, mark) {
      var values = m._values;
      var index = m._index;
      var ptr = m._ptr;
      for (var k = ptr[j],
          k1 = ptr[j + 1]; k < k1; k++) {
        var i = index[k];
        w[i] = mark;
        x[i] = values[k];
      }
    };
    return algorithm07;
  }
  exports.name = 'algorithm07';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("c4", ["a2", "253", "cd", "1f2", "1f3", "1f4", "1ef", "1f0", "b5", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var nearlyEqual = $__require('a2').nearlyEqual;
  var bigNearlyEqual = $__require('253');
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var algorithm03 = load($__require('1f2'));
    var algorithm07 = load($__require('1f3'));
    var algorithm12 = load($__require('1f4'));
    var algorithm13 = load($__require('1ef'));
    var algorithm14 = load($__require('1f0'));
    var latex = $__require('b5');
    var smaller = typed('smaller', {
      'boolean, boolean': function(x, y) {
        return x < y;
      },
      'number, number': function(x, y) {
        return x < y && !nearlyEqual(x, y, config.epsilon);
      },
      'BigNumber, BigNumber': function(x, y) {
        return x.lt(y) && !bigNearlyEqual(x, y, config.epsilon);
      },
      'Fraction, Fraction': function(x, y) {
        return x.compare(y) === -1;
      },
      'Complex, Complex': function(x, y) {
        throw new TypeError('No ordering relation is defined for complex numbers');
      },
      'Unit, Unit': function(x, y) {
        if (!x.equalBase(y)) {
          throw new Error('Cannot compare units with different base');
        }
        return smaller(x.value, y.value);
      },
      'string, string': function(x, y) {
        return x < y;
      },
      'Matrix, Matrix': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            switch (y.storage()) {
              case 'sparse':
                c = algorithm07(x, y, smaller);
                break;
              default:
                c = algorithm03(y, x, smaller, true);
                break;
            }
            break;
          default:
            switch (y.storage()) {
              case 'sparse':
                c = algorithm03(x, y, smaller, false);
                break;
              default:
                c = algorithm13(x, y, smaller);
                break;
            }
            break;
        }
        return c;
      },
      'Array, Array': function(x, y) {
        return smaller(matrix(x), matrix(y)).valueOf();
      },
      'Array, Matrix': function(x, y) {
        return smaller(matrix(x), y);
      },
      'Matrix, Array': function(x, y) {
        return smaller(x, matrix(y));
      },
      'Matrix, any': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            c = algorithm12(x, y, smaller, false);
            break;
          default:
            c = algorithm14(x, y, smaller, false);
            break;
        }
        return c;
      },
      'any, Matrix': function(x, y) {
        var c;
        switch (y.storage()) {
          case 'sparse':
            c = algorithm12(y, x, smaller, true);
            break;
          default:
            c = algorithm14(y, x, smaller, true);
            break;
        }
        return c;
      },
      'Array, any': function(x, y) {
        return algorithm14(matrix(x), y, smaller, false).valueOf();
      },
      'any, Array': function(x, y) {
        return algorithm14(matrix(y), x, smaller, true).valueOf();
      }
    });
    smaller.toTex = '\\left(${args[0]}' + latex.operators['smaller'] + '${args[1]}\\right)';
    return smaller;
  }
  exports.name = 'smaller';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1af", ["24a", "257", "c4", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepForEach = $__require('24a');
  var reduce = $__require('257');
  function factory(type, config, load, typed) {
    var smaller = load($__require('c4'));
    var min = typed('min', {
      'Array | Matrix': _min,
      'Array | Matrix, number | BigNumber': function(array, dim) {
        return reduce(array, dim.valueOf(), _smallest);
      },
      '...': function() {
        return _min(arguments);
      }
    });
    min.toTex = '\\min\\left(${args}\\right)';
    return min;
    function _smallest(x, y) {
      return smaller(x, y) ? x : y;
    }
    function _min(array) {
      var min = undefined;
      deepForEach(array, function(value) {
        if (min === undefined || smaller(value, min)) {
          min = value;
        }
      });
      if (min === undefined) {
        throw new Error('Cannot calculate min of an empty array');
      }
      return min;
    }
  }
  exports.name = 'min';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("259", ["da", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var flatten = $__require('da').flatten;
  function factory(type, config, load, typed) {
    var mode = typed('mode', {
      'Array | Matrix': _mode,
      '...': function() {
        return _mode(Array.prototype.slice.call(arguments));
      }
    });
    return mode;
    function _mode(values) {
      values = flatten(values.valueOf());
      var num = values.length;
      if (num == 0) {
        throw new Error('Cannot calculate mode of an empty array');
      }
      var count = {},
          mode = [],
          max = 0;
      for (var i in values) {
        if (!(values[i] in count)) {
          count[values[i]] = 0;
        }
        count[values[i]]++;
        if (count[values[i]] == max) {
          mode.push(values[i]);
        } else if (count[values[i]] > max) {
          max = count[values[i]];
          mode = [values[i]];
        }
      }
      return mode;
    }
    ;
  }
  exports.name = 'mode';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("25a", ["24a", "1c1", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepForEach = $__require('24a');
  function factory(type, config, load, typed) {
    var multiply = load($__require('1c1'));
    var prod = typed('prod', {
      'Array | Matrix': _prod,
      'Array | Matrix, number | BigNumber': function(array, dim) {
        throw new Error('prod(A, dim) is not yet supported');
      },
      '...': function() {
        return _prod(arguments);
      }
    });
    prod.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return prod;
    function _prod(array) {
      var prod = undefined;
      deepForEach(array, function(value) {
        prod = (prod === undefined) ? value : multiply(prod, value);
      });
      if (prod === undefined) {
        throw new Error('Cannot calculate prod of an empty array');
      }
      return prod;
    }
  }
  exports.name = 'prod';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1aa", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = function isCollection(x) {
    return (Array.isArray(x) || (x && x.isMatrix === true));
  };
  return module.exports;
});

$__System.registerDynamic("1fa", ["be", "c0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var DimensionError = $__require('be');
  function factory(type, config, load, typed) {
    var equalScalar = load($__require('c0'));
    var SparseMatrix = type.SparseMatrix;
    var algorithm04 = function(a, b, callback) {
      var avalues = a._values;
      var aindex = a._index;
      var aptr = a._ptr;
      var asize = a._size;
      var adt = a._datatype;
      var bvalues = b._values;
      var bindex = b._index;
      var bptr = b._ptr;
      var bsize = b._size;
      var bdt = b._datatype;
      if (asize.length !== bsize.length)
        throw new DimensionError(asize.length, bsize.length);
      if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
      var rows = asize[0];
      var columns = asize[1];
      var dt;
      var eq = equalScalar;
      var zero = 0;
      var cf = callback;
      if (typeof adt === 'string' && adt === bdt) {
        dt = adt;
        eq = typed.find(equalScalar, [dt, dt]);
        zero = typed.convert(0, dt);
        cf = typed.find(callback, [dt, dt]);
      }
      var cvalues = avalues && bvalues ? [] : undefined;
      var cindex = [];
      var cptr = [];
      var c = new SparseMatrix({
        values: cvalues,
        index: cindex,
        ptr: cptr,
        size: [rows, columns],
        datatype: dt
      });
      var xa = avalues && bvalues ? [] : undefined;
      var xb = avalues && bvalues ? [] : undefined;
      var wa = [];
      var wb = [];
      var i,
          j,
          k,
          k0,
          k1;
      for (j = 0; j < columns; j++) {
        cptr[j] = cindex.length;
        var mark = j + 1;
        for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
          i = aindex[k];
          cindex.push(i);
          wa[i] = mark;
          if (xa)
            xa[i] = avalues[k];
        }
        for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
          i = bindex[k];
          if (wa[i] === mark) {
            if (xa) {
              var v = cf(xa[i], bvalues[k]);
              if (!eq(v, zero)) {
                xa[i] = v;
              } else {
                wa[i] = null;
              }
            }
          } else {
            cindex.push(i);
            wb[i] = mark;
            if (xb)
              xb[i] = bvalues[k];
          }
        }
        if (xa && xb) {
          k = cptr[j];
          while (k < cindex.length) {
            i = cindex[k];
            if (wa[i] === mark) {
              cvalues[k] = xa[i];
              k++;
            } else if (wb[i] === mark) {
              cvalues[k] = xb[i];
              k++;
            } else {
              cindex.splice(k, 1);
            }
          }
        }
      }
      cptr[columns] = cindex.length;
      return c;
    };
    return algorithm04;
  }
  exports.name = 'algorithm04';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("c2", ["a4", "cd", "1bf", "b5", "1f9", "1fa", "1fb", "1ef", "1f0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var extend = $__require('a4').extend;
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var addScalar = load($__require('1bf'));
    var latex = $__require('b5');
    var algorithm01 = load($__require('1f9'));
    var algorithm04 = load($__require('1fa'));
    var algorithm10 = load($__require('1fb'));
    var algorithm13 = load($__require('1ef'));
    var algorithm14 = load($__require('1f0'));
    var add = typed('add', extend({
      'Matrix, Matrix': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            switch (y.storage()) {
              case 'sparse':
                c = algorithm04(x, y, addScalar);
                break;
              default:
                c = algorithm01(y, x, addScalar, true);
                break;
            }
            break;
          default:
            switch (y.storage()) {
              case 'sparse':
                c = algorithm01(x, y, addScalar, false);
                break;
              default:
                c = algorithm13(x, y, addScalar);
                break;
            }
            break;
        }
        return c;
      },
      'Array, Array': function(x, y) {
        return add(matrix(x), matrix(y)).valueOf();
      },
      'Array, Matrix': function(x, y) {
        return add(matrix(x), y);
      },
      'Matrix, Array': function(x, y) {
        return add(x, matrix(y));
      },
      'Matrix, any': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            c = algorithm10(x, y, addScalar, false);
            break;
          default:
            c = algorithm14(x, y, addScalar, false);
            break;
        }
        return c;
      },
      'any, Matrix': function(x, y) {
        var c;
        switch (y.storage()) {
          case 'sparse':
            c = algorithm10(y, x, addScalar, true);
            break;
          default:
            c = algorithm14(y, x, addScalar, true);
            break;
        }
        return c;
      },
      'Array, any': function(x, y) {
        return algorithm14(matrix(x), y, addScalar, false).valueOf();
      },
      'any, Array': function(x, y) {
        return algorithm14(matrix(y), x, addScalar, true).valueOf();
      }
    }, addScalar.signatures));
    add.toTex = '\\left(${args[0]}' + latex.operators['add'] + '${args[1]}\\right)';
    return add;
  }
  exports.name = 'add';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1d0", ["a4", "da", "b5", "cd", "1bf", "1c1", "c0", "1ee", "1f0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var extend = $__require('a4').extend;
  var array = $__require('da');
  function factory(type, config, load, typed) {
    var latex = $__require('b5');
    var matrix = load($__require('cd'));
    var addScalar = load($__require('1bf'));
    var multiplyScalar = load($__require('1c1'));
    var equalScalar = load($__require('c0'));
    var algorithm11 = load($__require('1ee'));
    var algorithm14 = load($__require('1f0'));
    var DenseMatrix = type.DenseMatrix;
    var SparseMatrix = type.SparseMatrix;
    var multiply = typed('multiply', extend({
      'Array, Array': function(x, y) {
        _validateMatrixDimensions(array.size(x), array.size(y));
        var m = multiply(matrix(x), matrix(y));
        return (m && m.isMatrix === true) ? m.valueOf() : m;
      },
      'Matrix, Matrix': function(x, y) {
        var xsize = x.size();
        var ysize = y.size();
        _validateMatrixDimensions(xsize, ysize);
        if (xsize.length === 1) {
          if (ysize.length === 1) {
            return _multiplyVectorVector(x, y, xsize[0]);
          }
          return _multiplyVectorMatrix(x, y);
        }
        if (ysize.length === 1) {
          return _multiplyMatrixVector(x, y);
        }
        return _multiplyMatrixMatrix(x, y);
      },
      'Matrix, Array': function(x, y) {
        return multiply(x, matrix(y));
      },
      'Array, Matrix': function(x, y) {
        return multiply(matrix(x, y.storage()), y);
      },
      'Matrix, any': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            c = algorithm11(x, y, multiplyScalar, false);
            break;
          case 'dense':
            c = algorithm14(x, y, multiplyScalar, false);
            break;
        }
        return c;
      },
      'any, Matrix': function(x, y) {
        var c;
        switch (y.storage()) {
          case 'sparse':
            c = algorithm11(y, x, multiplyScalar, true);
            break;
          case 'dense':
            c = algorithm14(y, x, multiplyScalar, true);
            break;
        }
        return c;
      },
      'Array, any': function(x, y) {
        return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
      },
      'any, Array': function(x, y) {
        return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
      }
    }, multiplyScalar.signatures));
    var _validateMatrixDimensions = function(size1, size2) {
      switch (size1.length) {
        case 1:
          switch (size2.length) {
            case 1:
              if (size1[0] !== size2[0]) {
                throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');
              }
              break;
            case 2:
              if (size1[0] !== size2[0]) {
                throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');
              }
              break;
            default:
              throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
          }
          break;
        case 2:
          switch (size2.length) {
            case 1:
              if (size1[1] !== size2[0]) {
                throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');
              }
              break;
            case 2:
              if (size1[1] !== size2[0]) {
                throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');
              }
              break;
            default:
              throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
          }
          break;
        default:
          throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');
      }
    };
    var _multiplyVectorVector = function(a, b, n) {
      if (n === 0)
        throw new Error('Cannot multiply two empty vectors');
      var adata = a._data;
      var adt = a._datatype;
      var bdata = b._data;
      var bdt = b._datatype;
      var dt;
      var af = addScalar;
      var mf = multiplyScalar;
      if (adt && bdt && adt === bdt && typeof adt === 'string') {
        dt = adt;
        af = typed.find(addScalar, [dt, dt]);
        mf = typed.find(multiplyScalar, [dt, dt]);
      }
      var c = mf(adata[0], bdata[0]);
      for (var i = 1; i < n; i++) {
        c = af(c, mf(adata[i], bdata[i]));
      }
      return c;
    };
    var _multiplyVectorMatrix = function(a, b) {
      switch (b.storage()) {
        case 'dense':
          return _multiplyVectorDenseMatrix(a, b);
      }
      throw new Error('Not implemented');
    };
    var _multiplyVectorDenseMatrix = function(a, b) {
      var adata = a._data;
      var asize = a._size;
      var adt = a._datatype;
      var bdata = b._data;
      var bsize = b._size;
      var bdt = b._datatype;
      var alength = asize[0];
      var bcolumns = bsize[1];
      var dt;
      var af = addScalar;
      var mf = multiplyScalar;
      if (adt && bdt && adt === bdt && typeof adt === 'string') {
        dt = adt;
        af = typed.find(addScalar, [dt, dt]);
        mf = typed.find(multiplyScalar, [dt, dt]);
      }
      var c = [];
      for (var j = 0; j < bcolumns; j++) {
        var sum = mf(adata[0], bdata[0][j]);
        for (var i = 1; i < alength; i++) {
          sum = af(sum, mf(adata[i], bdata[i][j]));
        }
        c[j] = sum;
      }
      return new DenseMatrix({
        data: c,
        size: [bcolumns],
        datatype: dt
      });
    };
    var _multiplyMatrixVector = function(a, b) {
      switch (a.storage()) {
        case 'dense':
          return _multiplyDenseMatrixVector(a, b);
        case 'sparse':
          return _multiplySparseMatrixVector(a, b);
      }
    };
    var _multiplyMatrixMatrix = function(a, b) {
      switch (a.storage()) {
        case 'dense':
          switch (b.storage()) {
            case 'dense':
              return _multiplyDenseMatrixDenseMatrix(a, b);
            case 'sparse':
              return _multiplyDenseMatrixSparseMatrix(a, b);
          }
          break;
        case 'sparse':
          switch (b.storage()) {
            case 'dense':
              return _multiplySparseMatrixDenseMatrix(a, b);
            case 'sparse':
              return _multiplySparseMatrixSparseMatrix(a, b);
          }
          break;
      }
    };
    var _multiplyDenseMatrixVector = function(a, b) {
      var adata = a._data;
      var asize = a._size;
      var adt = a._datatype;
      var bdata = b._data;
      var bdt = b._datatype;
      var arows = asize[0];
      var acolumns = asize[1];
      var dt;
      var af = addScalar;
      var mf = multiplyScalar;
      if (adt && bdt && adt === bdt && typeof adt === 'string') {
        dt = adt;
        af = typed.find(addScalar, [dt, dt]);
        mf = typed.find(multiplyScalar, [dt, dt]);
      }
      var c = [];
      for (var i = 0; i < arows; i++) {
        var row = adata[i];
        var sum = mf(row[0], bdata[0]);
        for (var j = 1; j < acolumns; j++) {
          sum = af(sum, mf(row[j], bdata[j]));
        }
        c[i] = sum;
      }
      return new DenseMatrix({
        data: c,
        size: [arows],
        datatype: dt
      });
    };
    var _multiplyDenseMatrixDenseMatrix = function(a, b) {
      var adata = a._data;
      var asize = a._size;
      var adt = a._datatype;
      var bdata = b._data;
      var bsize = b._size;
      var bdt = b._datatype;
      var arows = asize[0];
      var acolumns = asize[1];
      var bcolumns = bsize[1];
      var dt;
      var af = addScalar;
      var mf = multiplyScalar;
      if (adt && bdt && adt === bdt && typeof adt === 'string') {
        dt = adt;
        af = typed.find(addScalar, [dt, dt]);
        mf = typed.find(multiplyScalar, [dt, dt]);
      }
      var c = [];
      for (var i = 0; i < arows; i++) {
        var row = adata[i];
        c[i] = [];
        for (var j = 0; j < bcolumns; j++) {
          var sum = mf(row[0], bdata[0][j]);
          for (var x = 1; x < acolumns; x++) {
            sum = af(sum, mf(row[x], bdata[x][j]));
          }
          c[i][j] = sum;
        }
      }
      return new DenseMatrix({
        data: c,
        size: [arows, bcolumns],
        datatype: dt
      });
    };
    var _multiplyDenseMatrixSparseMatrix = function(a, b) {
      var adata = a._data;
      var asize = a._size;
      var adt = a._datatype;
      var bvalues = b._values;
      var bindex = b._index;
      var bptr = b._ptr;
      var bsize = b._size;
      var bdt = b._datatype;
      if (!bvalues)
        throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');
      var arows = asize[0];
      var bcolumns = bsize[1];
      var dt;
      var af = addScalar;
      var mf = multiplyScalar;
      var eq = equalScalar;
      var zero = 0;
      if (adt && bdt && adt === bdt && typeof adt === 'string') {
        dt = adt;
        af = typed.find(addScalar, [dt, dt]);
        mf = typed.find(multiplyScalar, [dt, dt]);
        eq = typed.find(equalScalar, [dt, dt]);
        zero = typed.convert(0, dt);
      }
      var cvalues = [];
      var cindex = [];
      var cptr = [];
      var c = new SparseMatrix({
        values: cvalues,
        index: cindex,
        ptr: cptr,
        size: [arows, bcolumns],
        datatype: dt
      });
      for (var jb = 0; jb < bcolumns; jb++) {
        cptr[jb] = cindex.length;
        var kb0 = bptr[jb];
        var kb1 = bptr[jb + 1];
        if (kb1 > kb0) {
          var last = 0;
          for (var i = 0; i < arows; i++) {
            var mark = i + 1;
            var cij;
            for (var kb = kb0; kb < kb1; kb++) {
              var ib = bindex[kb];
              if (last !== mark) {
                cij = mf(adata[i][ib], bvalues[kb]);
                last = mark;
              } else {
                cij = af(cij, mf(adata[i][ib], bvalues[kb]));
              }
            }
            if (last === mark && !eq(cij, zero)) {
              cindex.push(i);
              cvalues.push(cij);
            }
          }
        }
      }
      cptr[bcolumns] = cindex.length;
      return c;
    };
    var _multiplySparseMatrixVector = function(a, b) {
      var avalues = a._values;
      var aindex = a._index;
      var aptr = a._ptr;
      var adt = a._datatype;
      if (!avalues)
        throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
      var bdata = b._data;
      var bdt = b._datatype;
      var arows = a._size[0];
      var brows = b._size[0];
      var cvalues = [];
      var cindex = [];
      var cptr = [];
      var dt;
      var af = addScalar;
      var mf = multiplyScalar;
      var eq = equalScalar;
      var zero = 0;
      if (adt && bdt && adt === bdt && typeof adt === 'string') {
        dt = adt;
        af = typed.find(addScalar, [dt, dt]);
        mf = typed.find(multiplyScalar, [dt, dt]);
        eq = typed.find(equalScalar, [dt, dt]);
        zero = typed.convert(0, dt);
      }
      var x = [];
      var w = [];
      cptr[0] = 0;
      for (var ib = 0; ib < brows; ib++) {
        var vbi = bdata[ib];
        if (!eq(vbi, zero)) {
          for (var ka0 = aptr[ib],
              ka1 = aptr[ib + 1],
              ka = ka0; ka < ka1; ka++) {
            var ia = aindex[ka];
            if (!w[ia]) {
              w[ia] = true;
              cindex.push(ia);
              x[ia] = mf(vbi, avalues[ka]);
            } else {
              x[ia] = af(x[ia], mf(vbi, avalues[ka]));
            }
          }
        }
      }
      for (var p1 = cindex.length,
          p = 0; p < p1; p++) {
        var ic = cindex[p];
        cvalues[p] = x[ic];
      }
      cptr[1] = cindex.length;
      return new SparseMatrix({
        values: cvalues,
        index: cindex,
        ptr: cptr,
        size: [arows, 1],
        datatype: dt
      });
    };
    var _multiplySparseMatrixDenseMatrix = function(a, b) {
      var avalues = a._values;
      var aindex = a._index;
      var aptr = a._ptr;
      var adt = a._datatype;
      if (!avalues)
        throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
      var bdata = b._data;
      var bdt = b._datatype;
      var arows = a._size[0];
      var brows = b._size[0];
      var bcolumns = b._size[1];
      var dt;
      var af = addScalar;
      var mf = multiplyScalar;
      var eq = equalScalar;
      var zero = 0;
      if (adt && bdt && adt === bdt && typeof adt === 'string') {
        dt = adt;
        af = typed.find(addScalar, [dt, dt]);
        mf = typed.find(multiplyScalar, [dt, dt]);
        eq = typed.find(equalScalar, [dt, dt]);
        zero = typed.convert(0, dt);
      }
      var cvalues = [];
      var cindex = [];
      var cptr = [];
      var c = new SparseMatrix({
        values: cvalues,
        index: cindex,
        ptr: cptr,
        size: [arows, bcolumns],
        datatype: dt
      });
      var x = [];
      var w = [];
      for (var jb = 0; jb < bcolumns; jb++) {
        cptr[jb] = cindex.length;
        var mark = jb + 1;
        for (var ib = 0; ib < brows; ib++) {
          var vbij = bdata[ib][jb];
          if (!eq(vbij, zero)) {
            for (var ka0 = aptr[ib],
                ka1 = aptr[ib + 1],
                ka = ka0; ka < ka1; ka++) {
              var ia = aindex[ka];
              if (w[ia] !== mark) {
                w[ia] = mark;
                cindex.push(ia);
                x[ia] = mf(vbij, avalues[ka]);
              } else {
                x[ia] = af(x[ia], mf(vbij, avalues[ka]));
              }
            }
          }
        }
        for (var p0 = cptr[jb],
            p1 = cindex.length,
            p = p0; p < p1; p++) {
          var ic = cindex[p];
          cvalues[p] = x[ic];
        }
      }
      cptr[bcolumns] = cindex.length;
      return c;
    };
    var _multiplySparseMatrixSparseMatrix = function(a, b) {
      var avalues = a._values;
      var aindex = a._index;
      var aptr = a._ptr;
      var adt = a._datatype;
      var bvalues = b._values;
      var bindex = b._index;
      var bptr = b._ptr;
      var bdt = b._datatype;
      var arows = a._size[0];
      var bcolumns = b._size[1];
      var values = avalues && bvalues;
      var dt;
      var af = addScalar;
      var mf = multiplyScalar;
      if (adt && bdt && adt === bdt && typeof adt === 'string') {
        dt = adt;
        af = typed.find(addScalar, [dt, dt]);
        mf = typed.find(multiplyScalar, [dt, dt]);
      }
      var cvalues = values ? [] : undefined;
      var cindex = [];
      var cptr = [];
      var c = new SparseMatrix({
        values: cvalues,
        index: cindex,
        ptr: cptr,
        size: [arows, bcolumns],
        datatype: dt
      });
      var x = values ? [] : undefined;
      var w = [];
      var ka,
          ka0,
          ka1,
          kb,
          kb0,
          kb1,
          ia,
          ib;
      for (var jb = 0; jb < bcolumns; jb++) {
        cptr[jb] = cindex.length;
        var mark = jb + 1;
        for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {
          ib = bindex[kb];
          if (values) {
            for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
              ia = aindex[ka];
              if (w[ia] !== mark) {
                w[ia] = mark;
                cindex.push(ia);
                x[ia] = mf(bvalues[kb], avalues[ka]);
              } else {
                x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));
              }
            }
          } else {
            for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
              ia = aindex[ka];
              if (w[ia] !== mark) {
                w[ia] = mark;
                cindex.push(ia);
              }
            }
          }
        }
        if (values) {
          for (var p0 = cptr[jb],
              p1 = cindex.length,
              p = p0; p < p1; p++) {
            var ic = cindex[p];
            cvalues[p] = x[ic];
          }
        }
      }
      cptr[bcolumns] = cindex.length;
      return c;
    };
    multiply.toTex = '\\left(${args[0]}' + latex.operators['multiply'] + '${args[1]}\\right)';
    return multiply;
  }
  exports.name = 'multiply';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("246", ["a2", "240", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var isInteger = $__require('a2').isInteger;
  function factory(type, config, load, typed) {
    var asc = load($__require('240'));
    function desc(a, b) {
      return -asc(a, b);
    }
    return typed('partitionSelect', {
      'Array | Matrix, number': function(x, k) {
        return _partitionSelect(x, k, asc);
      },
      'Array | Matrix, number, string': function(x, k, compare) {
        if (compare === 'asc') {
          return _partitionSelect(x, k, asc);
        } else if (compare === 'desc') {
          return _partitionSelect(x, k, desc);
        } else {
          throw new Error('Compare string must be "asc" or "desc"');
        }
      },
      'Array | Matrix, number, function': _partitionSelect
    });
    function _partitionSelect(x, k, compare) {
      if (!isInteger(k) || k < 0) {
        throw new Error('k must be a non-negative integer');
      }
      if (x && x.isMatrix) {
        var size = x.size();
        if (size.length > 1) {
          throw new Error('Only one dimensional matrices supported');
        }
        return quickSelect(x.valueOf(), k, compare);
      }
      if (Array.isArray(x)) {
        return quickSelect(x, k, compare);
      }
    }
    function quickSelect(arr, k, compare) {
      if (k >= arr.length) {
        throw new Error('k out of bounds');
      }
      var from = 0;
      var to = arr.length - 1;
      while (from < to) {
        var r = from;
        var w = to;
        var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from];
        while (r < w) {
          if (compare(arr[r], pivot) >= 0) {
            var tmp = arr[w];
            arr[w] = arr[r];
            arr[r] = tmp;
            --w;
          } else {
            ++r;
          }
        }
        if (compare(arr[r], pivot) > 0) {
          --r;
        }
        if (k <= r) {
          to = r;
        } else {
          from = r + 1;
        }
      }
      return arr[k];
    }
  }
  exports.name = 'partitionSelect';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("240", ["a2", "253", "cd", "1f2", "203", "1f4", "1ef", "1f0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var nearlyEqual = $__require('a2').nearlyEqual;
  var bigNearlyEqual = $__require('253');
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var algorithm03 = load($__require('1f2'));
    var algorithm05 = load($__require('203'));
    var algorithm12 = load($__require('1f4'));
    var algorithm13 = load($__require('1ef'));
    var algorithm14 = load($__require('1f0'));
    var compare = typed('compare', {
      'boolean, boolean': function(x, y) {
        return x === y ? 0 : (x > y ? 1 : -1);
      },
      'number, number': function(x, y) {
        return (x === y || nearlyEqual(x, y, config.epsilon)) ? 0 : (x > y ? 1 : -1);
      },
      'BigNumber, BigNumber': function(x, y) {
        return (x.eq(y) || bigNearlyEqual(x, y, config.epsilon)) ? new type.BigNumber(0) : new type.BigNumber(x.cmp(y));
      },
      'Fraction, Fraction': function(x, y) {
        return new type.Fraction(x.compare(y));
      },
      'Complex, Complex': function() {
        throw new TypeError('No ordering relation is defined for complex numbers');
      },
      'Unit, Unit': function(x, y) {
        if (!x.equalBase(y)) {
          throw new Error('Cannot compare units with different base');
        }
        return compare(x.value, y.value);
      },
      'string, string': function(x, y) {
        return x === y ? 0 : (x > y ? 1 : -1);
      },
      'Matrix, Matrix': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            switch (y.storage()) {
              case 'sparse':
                c = algorithm05(x, y, compare);
                break;
              default:
                c = algorithm03(y, x, compare, true);
                break;
            }
            break;
          default:
            switch (y.storage()) {
              case 'sparse':
                c = algorithm03(x, y, compare, false);
                break;
              default:
                c = algorithm13(x, y, compare);
                break;
            }
            break;
        }
        return c;
      },
      'Array, Array': function(x, y) {
        return compare(matrix(x), matrix(y)).valueOf();
      },
      'Array, Matrix': function(x, y) {
        return compare(matrix(x), y);
      },
      'Matrix, Array': function(x, y) {
        return compare(x, matrix(y));
      },
      'Matrix, any': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            c = algorithm12(x, y, compare, false);
            break;
          default:
            c = algorithm14(x, y, compare, false);
            break;
        }
        return c;
      },
      'any, Matrix': function(x, y) {
        var c;
        switch (y.storage()) {
          case 'sparse':
            c = algorithm12(y, x, compare, true);
            break;
          default:
            c = algorithm14(y, x, compare, true);
            break;
        }
        return c;
      },
      'Array, any': function(x, y) {
        return algorithm14(matrix(x), y, compare, false).valueOf();
      },
      'any, Array': function(x, y) {
        return algorithm14(matrix(y), x, compare, true).valueOf();
      }
    });
    compare.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return compare;
  }
  exports.name = 'compare';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("25b", ["a2", "da", "1aa", "c2", "1d0", "246", "240", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var isInteger = $__require('a2').isInteger;
  var isNumber = $__require('a2').isNumber;
  var flatten = $__require('da').flatten;
  var isCollection = $__require('1aa');
  function factory(type, config, load, typed) {
    var add = load($__require('c2'));
    var multiply = load($__require('1d0'));
    var partitionSelect = load($__require('246'));
    var compare = load($__require('240'));
    function quantileSeq(data, probOrN, sorted) {
      var probArr,
          dataArr,
          one;
      if (arguments.length < 2 || arguments.length > 3) {
        throw new SyntaxError('Function quantileSeq requires two or three parameters');
      }
      if (isCollection(data)) {
        sorted = sorted || false;
        if (typeof sorted === 'boolean') {
          dataArr = data.valueOf();
          if (isNumber(probOrN)) {
            if (probOrN < 0) {
              throw new Error('N/prob must be non-negative');
            }
            if (probOrN <= 1) {
              return _quantileSeq(dataArr, probOrN, sorted);
            }
            if (probOrN > 1) {
              if (!isInteger(probOrN)) {
                throw new Error('N must be a positive integer');
              }
              var nPlusOne = probOrN + 1;
              probArr = new Array(probOrN);
              for (var i = 0; i < probOrN; ) {
                probArr[i] = _quantileSeq(dataArr, (++i) / nPlusOne, sorted);
              }
              return probArr;
            }
          }
          if (probOrN && probOrN.isBigNumber) {
            if (probOrN.isNegative()) {
              throw new Error('N/prob must be non-negative');
            }
            one = new probOrN.constructor(1);
            if (probOrN.lte(one)) {
              return _quantileSeq(dataArr, probOrN, sorted);
            }
            if (probOrN.gt(one)) {
              if (!probOrN.isInteger()) {
                throw new Error('N must be a positive integer');
              }
              var intN = probOrN.toNumber();
              if (intN > 4294967295) {
                throw new Error('N must be less than or equal to 2^32-1, as that is the maximum length of an Array');
              }
              var nPlusOne = new type.BigNumber(intN + 1);
              probArr = new Array(intN);
              for (var i = 0; i < intN; ) {
                probArr[i] = _quantileSeq(dataArr, new type.BigNumber(++i).div(nPlusOne), sorted);
              }
              return probArr;
            }
          }
          if (Array.isArray(probOrN)) {
            probArr = new Array(probOrN.length);
            for (var i = 0; i < probArr.length; ++i) {
              var currProb = probOrN[i];
              if (isNumber(currProb)) {
                if (currProb < 0 || currProb > 1) {
                  throw new Error('Probability must be between 0 and 1, inclusive');
                }
              } else if (currProb && currProb.isBigNumber) {
                one = new currProb.constructor(1);
                if (currProb.isNegative() || currProb.gt(one)) {
                  throw new Error('Probability must be between 0 and 1, inclusive');
                }
              } else {
                throw new TypeError('Unexpected type of argument in function quantileSeq');
              }
              probArr[i] = _quantileSeq(dataArr, currProb, sorted);
            }
            return probArr;
          }
          throw new TypeError('Unexpected type of argument in function quantileSeq');
        }
        throw new TypeError('Unexpected type of argument in function quantileSeq');
      }
      throw new TypeError('Unexpected type of argument in function quantileSeq');
    }
    function _quantileSeq(array, prob, sorted) {
      var flat = flatten(array);
      var len = flat.length;
      if (len === 0) {
        throw new Error('Cannot calculate quantile of an empty sequence');
      }
      if (isNumber(prob)) {
        var index = prob * (len - 1);
        var fracPart = index % 1;
        if (fracPart === 0) {
          var value = sorted ? flat[index] : partitionSelect(flat, index);
          validate(value);
          return value;
        }
        var integerPart = Math.floor(index);
        var left,
            right;
        if (sorted) {
          left = flat[integerPart];
          right = flat[integerPart + 1];
        } else {
          right = partitionSelect(flat, integerPart + 1);
          left = flat[integerPart];
          for (var i = 0; i < integerPart; ++i) {
            if (compare(flat[i], left) > 0) {
              left = flat[i];
            }
          }
        }
        validate(left);
        validate(right);
        return add(multiply(left, 1 - fracPart), multiply(right, fracPart));
      }
      var index = prob.times(len - 1);
      if (index.isInteger()) {
        index = index.toNumber();
        var value = sorted ? flat[index] : partitionSelect(flat, index);
        validate(value);
        return value;
      }
      var integerPart = index.floor();
      var fracPart = index.minus(integerPart);
      var integerPartNumber = integerPart.toNumber();
      var left,
          right;
      if (sorted) {
        left = flat[integerPartNumber];
        right = flat[integerPartNumber + 1];
      } else {
        right = partitionSelect(flat, integerPartNumber + 1);
        left = flat[integerPartNumber];
        for (var i = 0; i < integerPartNumber; ++i) {
          if (compare(flat[i], left) > 0) {
            left = flat[i];
          }
        }
      }
      validate(left);
      validate(right);
      var one = new fracPart.constructor(1);
      return add(multiply(left, one.minus(fracPart)), multiply(right, fracPart));
    }
    var validate = typed({'number | BigNumber | Unit': function(x) {
        return x;
      }});
    return quantileSeq;
  }
  exports.name = 'quantileSeq';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1fd", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var sqrt = typed('sqrt', {
      'number': _sqrtNumber,
      'Complex': function(x) {
        return x.sqrt();
      },
      'BigNumber': function(x) {
        if (!x.isNegative() || config.predictable) {
          return x.sqrt();
        } else {
          return _sqrtNumber(x.toNumber());
        }
      },
      'Array | Matrix': function(x) {
        return deepMap(x, sqrt, true);
      },
      'Unit': function(x) {
        return x.pow(0.5);
      }
    });
    function _sqrtNumber(x) {
      if (x >= 0 || config.predictable) {
        return Math.sqrt(x);
      } else {
        return new type.Complex(x, 0).sqrt();
      }
    }
    sqrt.toTex = '\\sqrt{${args[0]}}';
    return sqrt;
  }
  exports.name = 'sqrt';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("25c", ["1fd", "25d", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var sqrt = load($__require('1fd'));
    var variance = load($__require('25d'));
    var std = typed('std', {
      'Array | Matrix': _std,
      'Array | Matrix, string': _std,
      '...': function() {
        return _std(Array.prototype.slice.call(arguments));
      }
    });
    std.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return std;
    function _std(array, normalization) {
      if (array.length == 0) {
        throw new SyntaxError('Function std requires one or more parameters (0 provided)');
      }
      return sqrt(variance.apply(null, arguments));
    }
  }
  exports.name = 'std';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("248", ["24a", "1bf", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepForEach = $__require('24a');
  function factory(type, config, load, typed) {
    var add = load($__require('1bf'));
    var sum = typed('sum', {
      'Array | Matrix': function(args) {
        return _sum(args);
      },
      'Array | Matrix, number | BigNumber': function() {
        throw new Error('sum(A, dim) is not yet supported');
      },
      '...': function() {
        return _sum(arguments);
      }
    });
    sum.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return sum;
    function _sum(array) {
      var sum = undefined;
      deepForEach(array, function(value) {
        sum = (sum === undefined) ? value : add(sum, value);
      });
      if (sum === undefined) {
        switch (config.number) {
          case 'number':
            return 0;
          case 'BigNumber':
            return new type.BigNumber(0);
          case 'Fraction':
            return new type.Fraction(0);
          default:
            return 0;
        }
      }
      return sum;
    }
  }
  exports.name = 'sum';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("24a", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = function deepForEach(array, callback) {
    if (array && array.isMatrix === true) {
      array = array.valueOf();
    }
    for (var i = 0,
        ii = array.length; i < ii; i++) {
      var value = array[i];
      if (Array.isArray(value)) {
        deepForEach(value, callback);
      } else {
        callback(value);
      }
    }
  };
  return module.exports;
});

$__System.registerDynamic("1bf", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var add = typed('add', {
      'number, number': function(x, y) {
        return x + y;
      },
      'Complex, Complex': function(x, y) {
        return x.add(y);
      },
      'BigNumber, BigNumber': function(x, y) {
        return x.plus(y);
      },
      'Fraction, Fraction': function(x, y) {
        return x.add(y);
      },
      'Unit, Unit': function(x, y) {
        if (x.value == null)
          throw new Error('Parameter x contains a unit with undefined value');
        if (y.value == null)
          throw new Error('Parameter y contains a unit with undefined value');
        if (!x.equalBase(y))
          throw new Error('Units do not match');
        var res = x.clone();
        res.value = add(res.value, y.value);
        res.fixPrefix = false;
        return res;
      }
    });
    return add;
  }
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1cb", ["ad", "b5", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var latex = $__require('b5');
    var unaryMinus = typed('unaryMinus', {
      'number': function(x) {
        return -x;
      },
      'Complex': function(x) {
        return x.neg();
      },
      'BigNumber': function(x) {
        return x.neg();
      },
      'Fraction': function(x) {
        return x.neg();
      },
      'Unit': function(x) {
        var res = x.clone();
        res.value = unaryMinus(x.value);
        return res;
      },
      'Array | Matrix': function(x) {
        return deepMap(x, unaryMinus, true);
      }
    });
    unaryMinus.toTex = latex.operators['unaryMinus'] + '\\left(${args[0]}\\right)';
    return unaryMinus;
  }
  exports.name = 'unaryMinus';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1f9", ["be", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var DimensionError = $__require('be');
  function factory(type, config, load, typed) {
    var DenseMatrix = type.DenseMatrix;
    var algorithm01 = function(denseMatrix, sparseMatrix, callback, inverse) {
      var adata = denseMatrix._data;
      var asize = denseMatrix._size;
      var adt = denseMatrix._datatype;
      var bvalues = sparseMatrix._values;
      var bindex = sparseMatrix._index;
      var bptr = sparseMatrix._ptr;
      var bsize = sparseMatrix._size;
      var bdt = sparseMatrix._datatype;
      if (asize.length !== bsize.length)
        throw new DimensionError(asize.length, bsize.length);
      if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
      if (!bvalues)
        throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
      var rows = asize[0];
      var columns = asize[1];
      var dt = typeof adt === 'string' && adt === bdt ? adt : undefined;
      var cf = dt ? typed.find(callback, [dt, dt]) : callback;
      var i,
          j;
      var cdata = [];
      for (i = 0; i < rows; i++)
        cdata[i] = [];
      var x = [];
      var w = [];
      for (j = 0; j < columns; j++) {
        var mark = j + 1;
        for (var k0 = bptr[j],
            k1 = bptr[j + 1],
            k = k0; k < k1; k++) {
          i = bindex[k];
          x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
          w[i] = mark;
        }
        for (i = 0; i < rows; i++) {
          if (w[i] === mark) {
            cdata[i][j] = x[i];
          } else {
            cdata[i][j] = adata[i][j];
          }
        }
      }
      return new DenseMatrix({
        data: cdata,
        size: [rows, columns],
        datatype: dt
      });
    };
    return algorithm01;
  }
  exports.name = 'algorithm01';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("203", ["be", "c0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var DimensionError = $__require('be');
  function factory(type, config, load, typed) {
    var equalScalar = load($__require('c0'));
    var SparseMatrix = type.SparseMatrix;
    var algorithm05 = function(a, b, callback) {
      var avalues = a._values;
      var aindex = a._index;
      var aptr = a._ptr;
      var asize = a._size;
      var adt = a._datatype;
      var bvalues = b._values;
      var bindex = b._index;
      var bptr = b._ptr;
      var bsize = b._size;
      var bdt = b._datatype;
      if (asize.length !== bsize.length)
        throw new DimensionError(asize.length, bsize.length);
      if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
      var rows = asize[0];
      var columns = asize[1];
      var dt;
      var eq = equalScalar;
      var zero = 0;
      var cf = callback;
      if (typeof adt === 'string' && adt === bdt) {
        dt = adt;
        eq = typed.find(equalScalar, [dt, dt]);
        zero = typed.convert(0, dt);
        cf = typed.find(callback, [dt, dt]);
      }
      var cvalues = avalues && bvalues ? [] : undefined;
      var cindex = [];
      var cptr = [];
      var c = new SparseMatrix({
        values: cvalues,
        index: cindex,
        ptr: cptr,
        size: [rows, columns],
        datatype: dt
      });
      var xa = cvalues ? [] : undefined;
      var xb = cvalues ? [] : undefined;
      var wa = [];
      var wb = [];
      var i,
          j,
          k,
          k1;
      for (j = 0; j < columns; j++) {
        cptr[j] = cindex.length;
        var mark = j + 1;
        for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {
          i = aindex[k];
          cindex.push(i);
          wa[i] = mark;
          if (xa)
            xa[i] = avalues[k];
        }
        for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {
          i = bindex[k];
          if (wa[i] !== mark) {
            cindex.push(i);
          }
          wb[i] = mark;
          if (xb)
            xb[i] = bvalues[k];
        }
        if (cvalues) {
          k = cptr[j];
          while (k < cindex.length) {
            i = cindex[k];
            var wai = wa[i];
            var wbi = wb[i];
            if (wai === mark || wbi === mark) {
              var va = wai === mark ? xa[i] : zero;
              var vb = wbi === mark ? xb[i] : zero;
              var vc = cf(va, vb);
              if (!eq(vc, zero)) {
                cvalues.push(vc);
                k++;
              } else {
                cindex.splice(k, 1);
              }
            }
          }
        }
      }
      cptr[columns] = cindex.length;
      return c;
    };
    return algorithm05;
  }
  exports.name = 'algorithm05';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1fb", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var DenseMatrix = type.DenseMatrix;
    var algorithm10 = function(s, b, callback, inverse) {
      var avalues = s._values;
      var aindex = s._index;
      var aptr = s._ptr;
      var asize = s._size;
      var adt = s._datatype;
      if (!avalues)
        throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
      var rows = asize[0];
      var columns = asize[1];
      var dt;
      var cf = callback;
      if (typeof adt === 'string') {
        dt = adt;
        b = typed.convert(b, dt);
        cf = typed.find(callback, [dt, dt]);
      }
      var cdata = [];
      var c = new DenseMatrix({
        data: cdata,
        size: [rows, columns],
        datatype: dt
      });
      var x = [];
      var w = [];
      for (var j = 0; j < columns; j++) {
        var mark = j + 1;
        for (var k0 = aptr[j],
            k1 = aptr[j + 1],
            k = k0; k < k1; k++) {
          var r = aindex[k];
          x[r] = avalues[k];
          w[r] = mark;
        }
        for (var i = 0; i < rows; i++) {
          if (j === 0) {
            cdata[i] = [];
          }
          if (w[i] === mark) {
            cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
          } else {
            cdata[i][j] = b;
          }
        }
      }
      return c;
    };
    return algorithm10;
  }
  exports.name = 'algorithm10';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1c0", ["be", "b5", "cd", "1bf", "1cb", "1f9", "1f2", "203", "1fb", "1ef", "1f0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var DimensionError = $__require('be');
  function factory(type, config, load, typed) {
    var latex = $__require('b5');
    var matrix = load($__require('cd'));
    var addScalar = load($__require('1bf'));
    var unaryMinus = load($__require('1cb'));
    var algorithm01 = load($__require('1f9'));
    var algorithm03 = load($__require('1f2'));
    var algorithm05 = load($__require('203'));
    var algorithm10 = load($__require('1fb'));
    var algorithm13 = load($__require('1ef'));
    var algorithm14 = load($__require('1f0'));
    var subtract = typed('subtract', {
      'number, number': function(x, y) {
        return x - y;
      },
      'Complex, Complex': function(x, y) {
        return x.sub(y);
      },
      'BigNumber, BigNumber': function(x, y) {
        return x.minus(y);
      },
      'Fraction, Fraction': function(x, y) {
        return x.sub(y);
      },
      'Unit, Unit': function(x, y) {
        if (x.value == null) {
          throw new Error('Parameter x contains a unit with undefined value');
        }
        if (y.value == null) {
          throw new Error('Parameter y contains a unit with undefined value');
        }
        if (!x.equalBase(y)) {
          throw new Error('Units do not match');
        }
        var res = x.clone();
        res.value = subtract(res.value, y.value);
        res.fixPrefix = false;
        return res;
      },
      'Matrix, Matrix': function(x, y) {
        var xsize = x.size();
        var ysize = y.size();
        if (xsize.length !== ysize.length)
          throw new DimensionError(xsize.length, ysize.length);
        var c;
        switch (x.storage()) {
          case 'sparse':
            switch (y.storage()) {
              case 'sparse':
                c = algorithm05(x, y, subtract);
                break;
              default:
                c = algorithm03(y, x, subtract, true);
                break;
            }
            break;
          default:
            switch (y.storage()) {
              case 'sparse':
                c = algorithm01(x, y, subtract, false);
                break;
              default:
                c = algorithm13(x, y, subtract);
                break;
            }
            break;
        }
        return c;
      },
      'Array, Array': function(x, y) {
        return subtract(matrix(x), matrix(y)).valueOf();
      },
      'Array, Matrix': function(x, y) {
        return subtract(matrix(x), y);
      },
      'Matrix, Array': function(x, y) {
        return subtract(x, matrix(y));
      },
      'Matrix, any': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            c = algorithm10(x, unaryMinus(y), addScalar);
            break;
          default:
            c = algorithm14(x, y, subtract);
            break;
        }
        return c;
      },
      'any, Matrix': function(x, y) {
        var c;
        switch (y.storage()) {
          case 'sparse':
            c = algorithm10(y, x, subtract, true);
            break;
          default:
            c = algorithm14(y, x, subtract, true);
            break;
        }
        return c;
      },
      'Array, any': function(x, y) {
        return algorithm14(matrix(x), y, subtract, false).valueOf();
      },
      'any, Array': function(x, y) {
        return algorithm14(matrix(y), x, subtract, true).valueOf();
      }
    });
    subtract.toTex = '\\left(${args[0]}' + latex.operators['subtract'] + '${args[1]}\\right)';
    return subtract;
  }
  exports.name = 'subtract';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1c1", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var multiplyScalar = typed('multiplyScalar', {
      'number, number': function(x, y) {
        return x * y;
      },
      'Complex, Complex': function(x, y) {
        return x.mul(y);
      },
      'BigNumber, BigNumber': function(x, y) {
        return x.times(y);
      },
      'Fraction, Fraction': function(x, y) {
        return x.mul(y);
      },
      'number | Fraction | BigNumber | Complex, Unit': function(x, y) {
        var res = y.clone();
        res.value = (res.value === null) ? res._normalize(x) : multiplyScalar(res.value, x);
        return res;
      },
      'Unit, number | Fraction | BigNumber | Complex': function(x, y) {
        var res = x.clone();
        res.value = (res.value === null) ? res._normalize(y) : multiplyScalar(res.value, y);
        return res;
      },
      'Unit, Unit': function(x, y) {
        return x.multiply(y);
      }
    });
    return multiplyScalar;
  }
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1c2", ["1c1", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var multiplyScalar = load($__require('1c1'));
    var divideScalar = typed('divide', {
      'number, number': function(x, y) {
        return x / y;
      },
      'Complex, Complex': function(x, y) {
        return x.div(y);
      },
      'BigNumber, BigNumber': function(x, y) {
        return x.div(y);
      },
      'Fraction, Fraction': function(x, y) {
        return x.div(y);
      },
      'Unit, number | Fraction | BigNumber': function(x, y) {
        var res = x.clone();
        res.value = divideScalar(((res.value === null) ? res._normalize(1) : res.value), y);
        return res;
      },
      'number | Fraction | BigNumber, Unit': function(x, y) {
        var res = y.pow(-1);
        res.value = multiplyScalar(((res.value === null) ? res._normalize(1) : res.value), x);
        return res;
      },
      'Unit, Unit': function(x, y) {
        return x.divide(y);
      }
    });
    return divideScalar;
  }
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("25d", ["24a", "1bf", "1c0", "1c1", "1c2", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var DEFAULT_NORMALIZATION = 'unbiased';
  var deepForEach = $__require('24a');
  function factory(type, config, load, typed) {
    var add = load($__require('1bf'));
    var subtract = load($__require('1c0'));
    var multiply = load($__require('1c1'));
    var divide = load($__require('1c2'));
    var variance = typed('variance', {
      'Array | Matrix': function(array) {
        return _var(array, DEFAULT_NORMALIZATION);
      },
      'Array | Matrix, string': _var,
      '...': function() {
        return _var(arguments, DEFAULT_NORMALIZATION);
      }
    });
    variance.toTex = '\\mathrm{Var}\\left(${args}\\right)';
    return variance;
    function _var(array, normalization) {
      var sum = 0;
      var num = 0;
      if (array.length == 0) {
        throw new SyntaxError('Function var requires one or more parameters (0 provided)');
      }
      deepForEach(array, function(value) {
        sum = add(sum, value);
        num++;
      });
      if (num === 0)
        throw new Error('Cannot calculate var of an empty array');
      var mean = divide(sum, num);
      sum = 0;
      deepForEach(array, function(value) {
        var diff = subtract(value, mean);
        sum = add(sum, multiply(diff, diff));
      });
      switch (normalization) {
        case 'uncorrected':
          return divide(sum, num);
        case 'biased':
          return divide(sum, num + 1);
        case 'unbiased':
          var zero = (sum && sum.isBigNumber === true) ? new type.BigNumber(0) : 0;
          return (num == 1) ? zero : divide(sum, num - 1);
        default:
          throw new Error('Unknown normalization "' + normalization + '". ' + 'Choose "unbiased" (default), "uncorrected", or "biased".');
      }
    }
  }
  exports.name = 'var';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("25e", ["1ab", "1ad", "258", "1af", "259", "25a", "25b", "25c", "248", "25d", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = [$__require('1ab'), $__require('1ad'), $__require('258'), $__require('1af'), $__require('259'), $__require('25a'), $__require('25b'), $__require('25c'), $__require('248'), $__require('25d')];
  return module.exports;
});

$__System.registerDynamic("1c7", ["b1", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var string = $__require('b1');
  function factory(type, config, load, typed) {
    var format = typed('format', {
      'any': string.format,
      'any, Object | function | number': string.format
    });
    format.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return format;
  }
  exports.name = 'format';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("25f", ["b1", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var isString = $__require('b1').isString;
  var format = $__require('b1').format;
  function factory(type, config, load, typed) {
    var print = typed('print', {
      'string, Object': _print,
      'string, Object, number': _print
    });
    print.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return print;
  }
  function _print(template, values, options) {
    return template.replace(/\$([\w\.]+)/g, function(original, key) {
      var keys = key.split('.');
      var value = values[keys.shift()];
      while (keys.length && value !== undefined) {
        var k = keys.shift();
        value = k ? value[k] : value + '.';
      }
      if (value !== undefined) {
        if (!isString(value)) {
          return format(value, options);
        } else {
          return value;
        }
      }
      return original;
    });
  }
  exports.name = 'print';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("260", ["1c7", "25f", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = [$__require('1c7'), $__require('25f')];
  return module.exports;
});

$__System.registerDynamic("261", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var acos = typed('acos', {
      'number': function(x) {
        if ((x >= -1 && x <= 1) || config.predictable) {
          return Math.acos(x);
        } else {
          return new type.Complex(x, 0).acos();
        }
      },
      'Complex': function(x) {
        return x.acos();
      },
      'BigNumber': function(x) {
        return x.acos();
      },
      'Array | Matrix': function(x) {
        return deepMap(x, acos);
      }
    });
    acos.toTex = '\\cos^{-1}\\left(${args[0]}\\right)';
    return acos;
  }
  exports.name = 'acos';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("262", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var acot = typed('acot', {
      'number': function(x) {
        return Math.atan(1 / x);
      },
      'Complex': function(x) {
        return x.acot();
      },
      'BigNumber': function(x) {
        return new type.BigNumber(1).div(x).atan();
      },
      'Array | Matrix': function(x) {
        return deepMap(x, acot);
      }
    });
    acot.toTex = '\\cot^{-1}\\left(${args[0]}\\right)';
    return acot;
  }
  exports.name = 'acot';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("263", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var acoth = typed('acoth', {
      'number': function(x) {
        if (x >= 1 || x <= -1 || config.predictable) {
          return isFinite(x) ? (Math.log((x + 1) / x) + Math.log(x / (x - 1))) / 2 : 0;
        }
        return new type.Complex(x, 0).acoth();
      },
      'Complex': function(x) {
        return x.acoth();
      },
      'BigNumber': function(x) {
        return new type.BigNumber(1).div(x).atanh();
      },
      'Array | Matrix': function(x) {
        return deepMap(x, acoth);
      }
    });
    acoth.toTex = '\\coth^{-1}\\left(${args[0]}\\right)';
    return acoth;
  }
  exports.name = 'acoth';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("264", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var acsc = typed('acsc', {
      'number': function(x) {
        if (x <= -1 || x >= 1 || config.predictable) {
          return Math.asin(1 / x);
        }
        return new type.Complex(x, 0).acsc();
      },
      'Complex': function(x) {
        return x.acsc();
      },
      'BigNumber': function(x) {
        return new type.BigNumber(1).div(x).asin();
      },
      'Array | Matrix': function(x) {
        return deepMap(x, acsc);
      }
    });
    acsc.toTex = '\\csc^{-1}\\left(${args[0]}\\right)';
    return acsc;
  }
  exports.name = 'acsc';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("265", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var acsch = typed('acsch', {
      'number': function(x) {
        x = 1 / x;
        return Math.log(x + Math.sqrt(x * x + 1));
      },
      'Complex': function(x) {
        return x.acsch();
      },
      'BigNumber': function(x) {
        return new type.BigNumber(1).div(x).asinh();
      },
      'Array | Matrix': function(x) {
        return deepMap(x, acsch);
      }
    });
    acsch.toTex = '\\mathrm{csch}^{-1}\\left(${args[0]}\\right)';
    return acsch;
  }
  exports.name = 'acsch';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("266", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var asec = typed('asec', {
      'number': function(x) {
        if (x <= -1 || x >= 1 || config.predictable) {
          return Math.acos(1 / x);
        }
        return new type.Complex(x, 0).asec();
      },
      'Complex': function(x) {
        return x.asec();
      },
      'BigNumber': function(x) {
        return new type.BigNumber(1).div(x).acos();
      },
      'Array | Matrix': function(x) {
        return deepMap(x, asec);
      }
    });
    asec.toTex = '\\sec^{-1}\\left(${args[0]}\\right)';
    return asec;
  }
  exports.name = 'asec';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("267", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var acosh = typed('acosh', {
      'number': function(x) {
        if (x >= 1 || config.predictable) {
          return Math.log(Math.sqrt(x * x - 1) + x);
        }
        if (x <= -1) {
          return new type.Complex(Math.log(Math.sqrt(x * x - 1) - x), Math.PI);
        }
        return new type.Complex(x, 0).acosh();
      },
      'Complex': function(x) {
        return x.acosh();
      },
      'BigNumber': function(x) {
        return x.acosh();
      },
      'Array | Matrix': function(x) {
        return deepMap(x, acosh);
      }
    });
    acosh.toTex = '\\cosh^{-1}\\left(${args[0]}\\right)';
    return acosh;
  }
  exports.name = 'acosh';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("268", ["ad", "267", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var acosh = typed.find(load($__require('267')), ['Complex']);
    var asech = typed('asech', {
      'number': function(x) {
        if ((x <= 1 && x >= -1) || config.predictable) {
          x = 1 / x;
          var ret = Math.sqrt(x * x - 1);
          if (x > 0 || config.predictable) {
            return Math.log(ret + x);
          }
          return new type.Complex(Math.log(ret - x), Math.PI);
        }
        return new type.Complex(x, 0).asech();
      },
      'Complex': function(x) {
        return x.asech();
      },
      'BigNumber': function(x) {
        return new type.BigNumber(1).div(x).acosh();
      },
      'Array | Matrix': function(x) {
        return deepMap(x, asech);
      }
    });
    asech.toTex = '\\mathrm{sech}^{-1}\\left(${args[0]}\\right)';
    return asech;
  }
  exports.name = 'asech';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("269", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var asin = typed('asin', {
      'number': function(x) {
        if ((x >= -1 && x <= 1) || config.predictable) {
          return Math.asin(x);
        } else {
          return new type.Complex(x, 0).asin();
        }
      },
      'Complex': function(x) {
        return x.asin();
      },
      'BigNumber': function(x) {
        return x.asin();
      },
      'Array | Matrix': function(x) {
        return deepMap(x, asin, true);
      }
    });
    asin.toTex = '\\sin^{-1}\\left(${args[0]}\\right)';
    return asin;
  }
  exports.name = 'asin';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("26a", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var asinh = typed('asinh', {
      'number': function(x) {
        return Math.log(Math.sqrt(x * x + 1) + x);
      },
      'Complex': function(x) {
        return x.asinh();
      },
      'BigNumber': function(x) {
        return x.asinh();
      },
      'Array | Matrix': function(x) {
        return deepMap(x, asinh, true);
      }
    });
    asinh.toTex = '\\sinh^{-1}\\left(${args[0]}\\right)';
    return asinh;
  }
  exports.name = 'asinh';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("26b", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var atan = typed('atan', {
      'number': function(x) {
        return Math.atan(x);
      },
      'Complex': function(x) {
        return x.atan();
      },
      'BigNumber': function(x) {
        return x.atan();
      },
      'Array | Matrix': function(x) {
        return deepMap(x, atan, true);
      }
    });
    atan.toTex = '\\tan^{-1}\\left(${args[0]}\\right)';
    return atan;
  }
  exports.name = 'atan';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1ec", ["be", "c0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var DimensionError = $__require('be');
  function factory(type, config, load, typed) {
    var equalScalar = load($__require('c0'));
    var SparseMatrix = type.SparseMatrix;
    var algorithm02 = function(denseMatrix, sparseMatrix, callback, inverse) {
      var adata = denseMatrix._data;
      var asize = denseMatrix._size;
      var adt = denseMatrix._datatype;
      var bvalues = sparseMatrix._values;
      var bindex = sparseMatrix._index;
      var bptr = sparseMatrix._ptr;
      var bsize = sparseMatrix._size;
      var bdt = sparseMatrix._datatype;
      if (asize.length !== bsize.length)
        throw new DimensionError(asize.length, bsize.length);
      if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
      if (!bvalues)
        throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
      var rows = asize[0];
      var columns = asize[1];
      var dt;
      var eq = equalScalar;
      var zero = 0;
      var cf = callback;
      if (typeof adt === 'string' && adt === bdt) {
        dt = adt;
        eq = typed.find(equalScalar, [dt, dt]);
        zero = typed.convert(0, dt);
        cf = typed.find(callback, [dt, dt]);
      }
      var cvalues = [];
      var cindex = [];
      var cptr = [];
      for (var j = 0; j < columns; j++) {
        cptr[j] = cindex.length;
        for (var k0 = bptr[j],
            k1 = bptr[j + 1],
            k = k0; k < k1; k++) {
          var i = bindex[k];
          var cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
          if (!eq(cij, zero)) {
            cindex.push(i);
            cvalues.push(cij);
          }
        }
      }
      cptr[columns] = cindex.length;
      return new SparseMatrix({
        values: cvalues,
        index: cindex,
        ptr: cptr,
        size: [rows, columns],
        datatype: dt
      });
    };
    return algorithm02;
  }
  exports.name = 'algorithm02';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1f2", ["be", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var DimensionError = $__require('be');
  function factory(type, config, load, typed) {
    var DenseMatrix = type.DenseMatrix;
    var algorithm03 = function(denseMatrix, sparseMatrix, callback, inverse) {
      var adata = denseMatrix._data;
      var asize = denseMatrix._size;
      var adt = denseMatrix._datatype;
      var bvalues = sparseMatrix._values;
      var bindex = sparseMatrix._index;
      var bptr = sparseMatrix._ptr;
      var bsize = sparseMatrix._size;
      var bdt = sparseMatrix._datatype;
      if (asize.length !== bsize.length)
        throw new DimensionError(asize.length, bsize.length);
      if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
      if (!bvalues)
        throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
      var rows = asize[0];
      var columns = asize[1];
      var dt;
      var zero = 0;
      var cf = callback;
      if (typeof adt === 'string' && adt === bdt) {
        dt = adt;
        zero = typed.convert(0, dt);
        cf = typed.find(callback, [dt, dt]);
      }
      var cdata = [];
      for (var z = 0; z < rows; z++) {
        cdata[z] = [];
      }
      var x = [];
      var w = [];
      for (var j = 0; j < columns; j++) {
        var mark = j + 1;
        for (var k0 = bptr[j],
            k1 = bptr[j + 1],
            k = k0; k < k1; k++) {
          var i = bindex[k];
          x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
          w[i] = mark;
        }
        for (var y = 0; y < rows; y++) {
          if (w[y] === mark) {
            cdata[y][j] = x[y];
          } else {
            cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);
          }
        }
      }
      return new DenseMatrix({
        data: cdata,
        size: [rows, columns],
        datatype: dt
      });
    };
    return algorithm03;
  }
  exports.name = 'algorithm03';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1ed", ["be", "c0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var DimensionError = $__require('be');
  function factory(type, config, load, typed) {
    var equalScalar = load($__require('c0'));
    var SparseMatrix = type.SparseMatrix;
    var algorithm09 = function(a, b, callback) {
      var avalues = a._values;
      var aindex = a._index;
      var aptr = a._ptr;
      var asize = a._size;
      var adt = a._datatype;
      var bvalues = b._values;
      var bindex = b._index;
      var bptr = b._ptr;
      var bsize = b._size;
      var bdt = b._datatype;
      if (asize.length !== bsize.length)
        throw new DimensionError(asize.length, bsize.length);
      if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
      var rows = asize[0];
      var columns = asize[1];
      var dt;
      var eq = equalScalar;
      var zero = 0;
      var cf = callback;
      if (typeof adt === 'string' && adt === bdt) {
        dt = adt;
        eq = typed.find(equalScalar, [dt, dt]);
        zero = typed.convert(0, dt);
        cf = typed.find(callback, [dt, dt]);
      }
      var cvalues = avalues && bvalues ? [] : undefined;
      var cindex = [];
      var cptr = [];
      var c = new SparseMatrix({
        values: cvalues,
        index: cindex,
        ptr: cptr,
        size: [rows, columns],
        datatype: dt
      });
      var x = cvalues ? [] : undefined;
      var w = [];
      var i,
          j,
          k,
          k0,
          k1;
      for (j = 0; j < columns; j++) {
        cptr[j] = cindex.length;
        var mark = j + 1;
        if (x) {
          for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
            i = bindex[k];
            w[i] = mark;
            x[i] = bvalues[k];
          }
        }
        for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
          i = aindex[k];
          if (x) {
            var vb = w[i] === mark ? x[i] : zero;
            var vc = cf(avalues[k], vb);
            if (!eq(vc, zero)) {
              cindex.push(i);
              cvalues.push(vc);
            }
          } else {
            cindex.push(i);
          }
        }
      }
      cptr[columns] = cindex.length;
      return c;
    };
    return algorithm09;
  }
  exports.name = 'algorithm09';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("253", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = function nearlyEqual(x, y, epsilon) {
    if (epsilon == null) {
      return x.eq(y);
    }
    if (x.eq(y)) {
      return true;
    }
    if (x.isNaN() || y.isNaN()) {
      return false;
    }
    if (x.isFinite() && y.isFinite()) {
      var diff = x.minus(y).abs();
      if (diff.isZero()) {
        return true;
      } else {
        var max = x.constructor.max(x.abs(), y.abs());
        return diff.lte(max.times(epsilon));
      }
    }
    return false;
  };
  return module.exports;
});

$__System.registerDynamic("c0", ["a2", "253", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var nearlyEqual = $__require('a2').nearlyEqual;
  var bigNearlyEqual = $__require('253');
  function factory(type, config, load, typed) {
    var equalScalar = typed('equalScalar', {
      'boolean, boolean': function(x, y) {
        return x === y;
      },
      'number, number': function(x, y) {
        return x === y || nearlyEqual(x, y, config.epsilon);
      },
      'BigNumber, BigNumber': function(x, y) {
        return x.eq(y) || bigNearlyEqual(x, y, config.epsilon);
      },
      'Fraction, Fraction': function(x, y) {
        return x.equals(y);
      },
      'Complex, Complex': function(x, y) {
        return x.equals(y);
      },
      'Unit, Unit': function(x, y) {
        if (!x.equalBase(y)) {
          throw new Error('Cannot compare units with different base');
        }
        return equalScalar(x.value, y.value);
      },
      'string, string': function(x, y) {
        return x === y;
      }
    });
    return equalScalar;
  }
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1ee", ["c0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var equalScalar = load($__require('c0'));
    var SparseMatrix = type.SparseMatrix;
    var algorithm11 = function(s, b, callback, inverse) {
      var avalues = s._values;
      var aindex = s._index;
      var aptr = s._ptr;
      var asize = s._size;
      var adt = s._datatype;
      if (!avalues)
        throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
      var rows = asize[0];
      var columns = asize[1];
      var dt;
      var eq = equalScalar;
      var zero = 0;
      var cf = callback;
      if (typeof adt === 'string') {
        dt = adt;
        eq = typed.find(equalScalar, [dt, dt]);
        zero = typed.convert(0, dt);
        b = typed.convert(b, dt);
        cf = typed.find(callback, [dt, dt]);
      }
      var cvalues = [];
      var cindex = [];
      var cptr = [];
      var c = new SparseMatrix({
        values: cvalues,
        index: cindex,
        ptr: cptr,
        size: [rows, columns],
        datatype: dt
      });
      for (var j = 0; j < columns; j++) {
        cptr[j] = cindex.length;
        for (var k0 = aptr[j],
            k1 = aptr[j + 1],
            k = k0; k < k1; k++) {
          var i = aindex[k];
          var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b);
          if (!eq(v, zero)) {
            cindex.push(i);
            cvalues.push(v);
          }
        }
      }
      cptr[columns] = cindex.length;
      return c;
    };
    return algorithm11;
  }
  exports.name = 'algorithm11';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1f4", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var DenseMatrix = type.DenseMatrix;
    var algorithm12 = function(s, b, callback, inverse) {
      var avalues = s._values;
      var aindex = s._index;
      var aptr = s._ptr;
      var asize = s._size;
      var adt = s._datatype;
      if (!avalues)
        throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
      var rows = asize[0];
      var columns = asize[1];
      var dt;
      var cf = callback;
      if (typeof adt === 'string') {
        dt = adt;
        b = typed.convert(b, dt);
        cf = typed.find(callback, [dt, dt]);
      }
      var cdata = [];
      var c = new DenseMatrix({
        data: cdata,
        size: [rows, columns],
        datatype: dt
      });
      var x = [];
      var w = [];
      for (var j = 0; j < columns; j++) {
        var mark = j + 1;
        for (var k0 = aptr[j],
            k1 = aptr[j + 1],
            k = k0; k < k1; k++) {
          var r = aindex[k];
          x[r] = avalues[k];
          w[r] = mark;
        }
        for (var i = 0; i < rows; i++) {
          if (j === 0) {
            cdata[i] = [];
          }
          if (w[i] === mark) {
            cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
          } else {
            cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);
          }
        }
      }
      return c;
    };
    return algorithm12;
  }
  exports.name = 'algorithm12';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("26c", ["cd", "1ec", "1f2", "1ed", "1ee", "1f4", "1ef", "1f0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var matrix = load($__require('cd'));
    var algorithm02 = load($__require('1ec'));
    var algorithm03 = load($__require('1f2'));
    var algorithm09 = load($__require('1ed'));
    var algorithm11 = load($__require('1ee'));
    var algorithm12 = load($__require('1f4'));
    var algorithm13 = load($__require('1ef'));
    var algorithm14 = load($__require('1f0'));
    var atan2 = typed('atan2', {
      'number, number': Math.atan2,
      'BigNumber, BigNumber': function(y, x) {
        return type.BigNumber.atan2(y, x);
      },
      'Matrix, Matrix': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            switch (y.storage()) {
              case 'sparse':
                c = algorithm09(x, y, atan2, false);
                break;
              default:
                c = algorithm02(y, x, atan2, true);
                break;
            }
            break;
          default:
            switch (y.storage()) {
              case 'sparse':
                c = algorithm03(x, y, atan2, false);
                break;
              default:
                c = algorithm13(x, y, atan2);
                break;
            }
            break;
        }
        return c;
      },
      'Array, Array': function(x, y) {
        return atan2(matrix(x), matrix(y)).valueOf();
      },
      'Array, Matrix': function(x, y) {
        return atan2(matrix(x), y);
      },
      'Matrix, Array': function(x, y) {
        return atan2(x, matrix(y));
      },
      'Matrix, number | BigNumber': function(x, y) {
        var c;
        switch (x.storage()) {
          case 'sparse':
            c = algorithm11(x, y, atan2, false);
            break;
          default:
            c = algorithm14(x, y, atan2, false);
            break;
        }
        return c;
      },
      'number | BigNumber, Matrix': function(x, y) {
        var c;
        switch (y.storage()) {
          case 'sparse':
            c = algorithm12(y, x, atan2, true);
            break;
          default:
            c = algorithm14(y, x, atan2, true);
            break;
        }
        return c;
      },
      'Array, number | BigNumber': function(x, y) {
        return algorithm14(matrix(x), y, atan2, false).valueOf();
      },
      'number | BigNumber, Array': function(x, y) {
        return algorithm14(matrix(y), x, atan2, true).valueOf();
      }
    });
    atan2.toTex = '\\mathrm{atan2}\\left(${args}\\right)';
    return atan2;
  }
  exports.name = 'atan2';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("26d", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var atanh = typed('atanh', {
      'number': function(x) {
        if ((x <= 1 && x >= -1) || config.predictable) {
          return Math.log((1 + x) / (1 - x)) / 2;
        }
        return new type.Complex(x, 0).atanh();
      },
      'Complex': function(x) {
        return x.atanh();
      },
      'BigNumber': function(x) {
        return x.atanh();
      },
      'Array | Matrix': function(x) {
        return deepMap(x, atanh, true);
      }
    });
    atanh.toTex = '\\tanh^{-1}\\left(${args[0]}\\right)';
    return atanh;
  }
  exports.name = 'atanh';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("26e", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var cos = typed('cos', {
      'number': Math.cos,
      'Complex': function(x) {
        return x.cos();
      },
      'BigNumber': function(x) {
        return x.cos();
      },
      'Unit': function(x) {
        if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
          throw new TypeError('Unit in function cos is no angle');
        }
        return cos(x.value);
      },
      'Array | Matrix': function(x) {
        return deepMap(x, cos);
      }
    });
    cos.toTex = '\\cos\\left(${args[0]}\\right)';
    return cos;
  }
  exports.name = 'cos';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("26f", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var cosh = typed('cosh', {
      'number': _cosh,
      'Complex': function(x) {
        return x.cosh();
      },
      'BigNumber': function(x) {
        return x.cosh();
      },
      'Unit': function(x) {
        if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
          throw new TypeError('Unit in function cosh is no angle');
        }
        return cosh(x.value);
      },
      'Array | Matrix': function(x) {
        return deepMap(x, cosh);
      }
    });
    cosh.toTex = '\\cosh\\left(${args[0]}\\right)';
    return cosh;
  }
  function _cosh(x) {
    return (Math.exp(x) + Math.exp(-x)) / 2;
  }
  exports.name = 'cosh';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("270", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var cot = typed('cot', {
      'number': function(x) {
        return 1 / Math.tan(x);
      },
      'Complex': function(x) {
        return x.cot();
      },
      'BigNumber': function(x) {
        return new type.BigNumber(1).div(x.tan());
      },
      'Unit': function(x) {
        if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
          throw new TypeError('Unit in function cot is no angle');
        }
        return cot(x.value);
      },
      'Array | Matrix': function(x) {
        return deepMap(x, cot);
      }
    });
    cot.toTex = '\\cot\\left(${args[0]}\\right)';
    return cot;
  }
  exports.name = 'cot';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("271", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var coth = typed('coth', {
      'number': _coth,
      'Complex': function(x) {
        return x.coth();
      },
      'BigNumber': function(x) {
        return new type.BigNumber(1).div(x.tanh());
      },
      'Unit': function(x) {
        if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
          throw new TypeError('Unit in function coth is no angle');
        }
        return coth(x.value);
      },
      'Array | Matrix': function(x) {
        return deepMap(x, coth);
      }
    });
    coth.toTex = '\\coth\\left(${args[0]}\\right)';
    return coth;
  }
  function _coth(x) {
    var e = Math.exp(2 * x);
    return (e + 1) / (e - 1);
  }
  exports.name = 'coth';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("272", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var csc = typed('csc', {
      'number': function(x) {
        return 1 / Math.sin(x);
      },
      'Complex': function(x) {
        return x.csc();
      },
      'BigNumber': function(x) {
        return new type.BigNumber(1).div(x.sin());
      },
      'Unit': function(x) {
        if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
          throw new TypeError('Unit in function csc is no angle');
        }
        return csc(x.value);
      },
      'Array | Matrix': function(x) {
        return deepMap(x, csc);
      }
    });
    csc.toTex = '\\csc\\left(${args[0]}\\right)';
    return csc;
  }
  exports.name = 'csc';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("273", ["ad", "a2", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  var sign = $__require('a2').sign;
  function factory(type, config, load, typed) {
    var csch = typed('csch', {
      'number': _csch,
      'Complex': function(x) {
        return x.csch();
      },
      'BigNumber': function(x) {
        return new type.BigNumber(1).div(x.sinh());
      },
      'Unit': function(x) {
        if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
          throw new TypeError('Unit in function csch is no angle');
        }
        return csch(x.value);
      },
      'Array | Matrix': function(x) {
        return deepMap(x, csch);
      }
    });
    csch.toTex = '\\mathrm{csch}\\left(${args[0]}\\right)';
    return csch;
  }
  function _csch(x) {
    if (x == 0) {
      return Number.POSITIVE_INFINITY;
    } else {
      return Math.abs(2 / (Math.exp(x) - Math.exp(-x))) * sign(x);
    }
  }
  exports.name = 'csch';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("274", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var sec = typed('sec', {
      'number': function(x) {
        return 1 / Math.cos(x);
      },
      'Complex': function(x) {
        return x.sec();
      },
      'BigNumber': function(x) {
        return new type.BigNumber(1).div(x.cos());
      },
      'Unit': function(x) {
        if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
          throw new TypeError('Unit in function sec is no angle');
        }
        return sec(x.value);
      },
      'Array | Matrix': function(x) {
        return deepMap(x, sec);
      }
    });
    sec.toTex = '\\sec\\left(${args[0]}\\right)';
    return sec;
  }
  exports.name = 'sec';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("275", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var sech = typed('sech', {
      'number': _sech,
      'Complex': function(x) {
        return x.sech();
      },
      'BigNumber': function(x) {
        return new type.BigNumber(1).div(x.cosh());
      },
      'Unit': function(x) {
        if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
          throw new TypeError('Unit in function sech is no angle');
        }
        return sech(x.value);
      },
      'Array | Matrix': function(x) {
        return deepMap(x, sech);
      }
    });
    sech.toTex = '\\mathrm{sech}\\left(${args[0]}\\right)';
    return sech;
  }
  function _sech(x) {
    return 2 / (Math.exp(x) + Math.exp(-x));
  }
  exports.name = 'sech';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("276", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var sin = typed('sin', {
      'number': Math.sin,
      'Complex': function(x) {
        return x.sin();
      },
      'BigNumber': function(x) {
        return x.sin();
      },
      'Unit': function(x) {
        if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
          throw new TypeError('Unit in function sin is no angle');
        }
        return sin(x.value);
      },
      'Array | Matrix': function(x) {
        return deepMap(x, sin, true);
      }
    });
    sin.toTex = '\\sin\\left(${args[0]}\\right)';
    return sin;
  }
  exports.name = 'sin';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("277", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var sinh = typed('sinh', {
      'number': _sinh,
      'Complex': function(x) {
        return x.sinh();
      },
      'BigNumber': function(x) {
        return x.sinh();
      },
      'Unit': function(x) {
        if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
          throw new TypeError('Unit in function sinh is no angle');
        }
        return sinh(x.value);
      },
      'Array | Matrix': function(x) {
        return deepMap(x, sinh, true);
      }
    });
    sinh.toTex = '\\sinh\\left(${args[0]}\\right)';
    return sinh;
  }
  function _sinh(x) {
    if (Math.abs(x) < 1) {
      return x + (x * x * x) / 6 + (x * x * x * x * x) / 120;
    } else {
      return (Math.exp(x) - Math.exp(-x)) / 2;
    }
  }
  exports.name = 'sinh';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("278", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var tan = typed('tan', {
      'number': Math.tan,
      'Complex': function(x) {
        return x.tan();
      },
      'BigNumber': function(x) {
        return x.tan();
      },
      'Unit': function(x) {
        if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
          throw new TypeError('Unit in function tan is no angle');
        }
        return tan(x.value);
      },
      'Array | Matrix': function(x) {
        return deepMap(x, tan, true);
      }
    });
    tan.toTex = '\\tan\\left(${args[0]}\\right)';
    return tan;
  }
  exports.name = 'tan';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("279", ["ad", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  function factory(type, config, load, typed) {
    var tanh = typed('tanh', {
      'number': _tanh,
      'Complex': function(x) {
        return x.tanh();
      },
      'BigNumber': function(x) {
        return x.tanh();
      },
      'Unit': function(x) {
        if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
          throw new TypeError('Unit in function tanh is no angle');
        }
        return tanh(x.value);
      },
      'Array | Matrix': function(x) {
        return deepMap(x, tanh, true);
      }
    });
    tanh.toTex = '\\tanh\\left(${args[0]}\\right)';
    return tanh;
  }
  function _tanh(x) {
    var e = Math.exp(2 * x);
    return (e - 1) / (e + 1);
  }
  exports.name = 'tanh';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("27a", ["261", "267", "262", "263", "264", "265", "266", "268", "269", "26a", "26b", "26c", "26d", "26e", "26f", "270", "271", "272", "273", "274", "275", "276", "277", "278", "279", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = [$__require('261'), $__require('267'), $__require('262'), $__require('263'), $__require('264'), $__require('265'), $__require('266'), $__require('268'), $__require('269'), $__require('26a'), $__require('26b'), $__require('26c'), $__require('26d'), $__require('26e'), $__require('26f'), $__require('270'), $__require('271'), $__require('272'), $__require('273'), $__require('274'), $__require('275'), $__require('276'), $__require('277'), $__require('278'), $__require('279')];
  return module.exports;
});

$__System.registerDynamic("b5", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.symbols = {
    Alpha: 'A',
    alpha: '\\alpha',
    Beta: 'B',
    beta: '\\beta',
    Gamma: '\\Gamma',
    gamma: '\\gamma',
    Delta: '\\Delta',
    delta: '\\delta',
    Epsilon: 'E',
    epsilon: '\\epsilon',
    varepsilon: '\\varepsilon',
    Zeta: 'Z',
    zeta: '\\zeta',
    Eta: 'H',
    eta: '\\eta',
    Theta: '\\Theta',
    theta: '\\theta',
    vartheta: '\\vartheta',
    Iota: 'I',
    iota: '\\iota',
    Kappa: 'K',
    kappa: '\\kappa',
    varkappa: '\\varkappa',
    Lambda: '\\Lambda',
    lambda: '\\lambda',
    Mu: 'M',
    mu: '\\mu',
    Nu: 'N',
    nu: '\\nu',
    Xi: '\\Xi',
    xi: '\\xi',
    Omicron: 'O',
    omicron: 'o',
    Pi: '\\Pi',
    pi: '\\pi',
    varpi: '\\varpi',
    Rho: 'P',
    rho: '\\rho',
    varrho: '\\varrho',
    Sigma: '\\Sigma',
    sigma: '\\sigma',
    varsigma: '\\varsigma',
    Tau: 'T',
    tau: '\\tau',
    Upsilon: '\\Upsilon',
    upsilon: '\\upsilon',
    Phi: '\\Phi',
    phi: '\\phi',
    varphi: '\\varphi',
    Chi: 'X',
    chi: '\\chi',
    Psi: '\\Psi',
    psi: '\\psi',
    Omega: '\\Omega',
    omega: '\\omega',
    'true': '\\mathrm{True}',
    'false': '\\mathrm{False}',
    i: 'i',
    inf: '\\infty',
    Inf: '\\infty',
    infinity: '\\infty',
    Infinity: '\\infty',
    oo: '\\infty',
    lim: '\\lim',
    'undefined': '\\mathbf{?}'
  };
  exports.operators = {
    'transpose': '^\\top',
    'factorial': '!',
    'pow': '^',
    'dotPow': '.^\\wedge',
    'unaryPlus': '+',
    'unaryMinus': '-',
    'bitNot': '~',
    'not': '\\neg',
    'multiply': '\\cdot',
    'divide': '\\frac',
    'dotMultiply': '.\\cdot',
    'dotDivide': '.:',
    'mod': '\\mod',
    'add': '+',
    'subtract': '-',
    'to': '\\rightarrow',
    'leftShift': '<<',
    'rightArithShift': '>>',
    'rightLogShift': '>>>',
    'equal': '=',
    'unequal': '\\neq',
    'smaller': '<',
    'larger': '>',
    'smallerEq': '\\leq',
    'largerEq': '\\geq',
    'bitAnd': '\\&',
    'bitXor': '\\underline{|}',
    'bitOr': '|',
    'and': '\\wedge',
    'xor': '\\veebar',
    'or': '\\vee'
  };
  exports.defaultTemplate = '\\mathrm{${name}}\\left(${args}\\right)';
  var units = {deg: '^\\circ'};
  exports.toSymbol = function(name, isUnit) {
    isUnit = typeof isUnit === 'undefined' ? false : isUnit;
    if (isUnit) {
      if (units.hasOwnProperty(name)) {
        return units[name];
      }
      return '\\mathrm{' + name + '}';
    }
    if (exports.symbols.hasOwnProperty(name)) {
      return exports.symbols[name];
    } else if (name.indexOf('_') !== -1) {
      var index = name.indexOf('_');
      return exports.toSymbol(name.substring(0, index)) + '_{' + exports.toSymbol(name.substring(index + 1)) + '}';
    }
    return name;
  };
  return module.exports;
});

$__System.registerDynamic("cd", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var matrix = typed('matrix', {
      '': function() {
        return _create([]);
      },
      'string': function(format) {
        return _create([], format);
      },
      'string, string': function(format, datatype) {
        return _create([], format, datatype);
      },
      'Array': function(data) {
        return _create(data);
      },
      'Matrix': function(data) {
        return _create(data, data.storage());
      },
      'Array | Matrix, string': _create,
      'Array | Matrix, string, string': _create
    });
    matrix.toTex = {
      0: '\\begin{bmatrix}\\end{bmatrix}',
      1: '\\left(${args[0]}\\right)',
      2: '\\left(${args[0]}\\right)'
    };
    return matrix;
    function _create(data, format, datatype) {
      var M = type.Matrix.storage(format || 'default');
      return new M(data, datatype);
    }
  }
  exports.name = 'matrix';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("da", ["a2", "b1", "a4", "1bc", "be", "1b9", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var number = $__require('a2');
  var string = $__require('b1');
  var object = $__require('a4');
  var types = $__require('1bc');
  var DimensionError = $__require('be');
  var IndexError = $__require('1b9');
  exports.size = function(x) {
    var s = [];
    while (Array.isArray(x)) {
      s.push(x.length);
      x = x[0];
    }
    return s;
  };
  function _validate(array, size, dim) {
    var i;
    var len = array.length;
    if (len != size[dim]) {
      throw new DimensionError(len, size[dim]);
    }
    if (dim < size.length - 1) {
      var dimNext = dim + 1;
      for (i = 0; i < len; i++) {
        var child = array[i];
        if (!Array.isArray(child)) {
          throw new DimensionError(size.length - 1, size.length, '<');
        }
        _validate(array[i], size, dimNext);
      }
    } else {
      for (i = 0; i < len; i++) {
        if (Array.isArray(array[i])) {
          throw new DimensionError(size.length + 1, size.length, '>');
        }
      }
    }
  }
  exports.validate = function(array, size) {
    var isScalar = (size.length == 0);
    if (isScalar) {
      if (Array.isArray(array)) {
        throw new DimensionError(array.length, 0);
      }
    } else {
      _validate(array, size, 0);
    }
  };
  exports.validateIndex = function(index, length) {
    if (!number.isNumber(index) || !number.isInteger(index)) {
      throw new TypeError('Index must be an integer (value: ' + index + ')');
    }
    if (index < 0 || (typeof length === 'number' && index >= length)) {
      throw new IndexError(index, length);
    }
  };
  exports.UNINITIALIZED = {};
  exports.resize = function(array, size, defaultValue) {
    if (!Array.isArray(array) || !Array.isArray(size)) {
      throw new TypeError('Array expected');
    }
    if (size.length === 0) {
      throw new Error('Resizing to scalar is not supported');
    }
    size.forEach(function(value) {
      if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {
        throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + string.format(size) + ')');
      }
    });
    var _defaultValue = (defaultValue !== undefined) ? defaultValue : 0;
    _resize(array, size, 0, _defaultValue);
    return array;
  };
  function _resize(array, size, dim, defaultValue) {
    var i;
    var elem;
    var oldLen = array.length;
    var newLen = size[dim];
    var minLen = Math.min(oldLen, newLen);
    array.length = newLen;
    if (dim < size.length - 1) {
      var dimNext = dim + 1;
      for (i = 0; i < minLen; i++) {
        elem = array[i];
        if (!Array.isArray(elem)) {
          elem = [elem];
          array[i] = elem;
        }
        _resize(elem, size, dimNext, defaultValue);
      }
      for (i = minLen; i < newLen; i++) {
        elem = [];
        array[i] = elem;
        _resize(elem, size, dimNext, defaultValue);
      }
    } else {
      for (i = 0; i < minLen; i++) {
        while (Array.isArray(array[i])) {
          array[i] = array[i][0];
        }
      }
      if (defaultValue !== exports.UNINITIALIZED) {
        for (i = minLen; i < newLen; i++) {
          array[i] = defaultValue;
        }
      }
    }
  }
  exports.squeeze = function(array, size) {
    var s = size || exports.size(array);
    while (Array.isArray(array) && array.length === 1) {
      array = array[0];
      s.shift();
    }
    var dims = s.length;
    while (s[dims - 1] === 1) {
      dims--;
    }
    if (dims < s.length) {
      array = _squeeze(array, dims, 0);
      s.length = dims;
    }
    return array;
  };
  function _squeeze(array, dims, dim) {
    var i,
        ii;
    if (dim < dims) {
      var next = dim + 1;
      for (i = 0, ii = array.length; i < ii; i++) {
        array[i] = _squeeze(array[i], dims, next);
      }
    } else {
      while (Array.isArray(array)) {
        array = array[0];
      }
    }
    return array;
  }
  exports.unsqueeze = function(array, dims, outer, size) {
    var s = size || exports.size(array);
    if (outer) {
      for (var i = 0; i < outer; i++) {
        array = [array];
        s.unshift(1);
      }
    }
    array = _unsqueeze(array, dims, 0);
    while (s.length < dims) {
      s.push(1);
    }
    return array;
  };
  function _unsqueeze(array, dims, dim) {
    var i,
        ii;
    if (Array.isArray(array)) {
      var next = dim + 1;
      for (i = 0, ii = array.length; i < ii; i++) {
        array[i] = _unsqueeze(array[i], dims, next);
      }
    } else {
      for (var d = dim; d < dims; d++) {
        array = [array];
      }
    }
    return array;
  }
  exports.flatten = function(array) {
    if (!Array.isArray(array)) {
      return array;
    }
    var flat = [];
    array.forEach(function callback(value) {
      if (Array.isArray(value)) {
        value.forEach(callback);
      } else {
        flat.push(value);
      }
    });
    return flat;
  };
  exports.isArray = Array.isArray;
  return module.exports;
});

$__System.registerDynamic("27b", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.isBoolean = function(value) {
    return typeof value == 'boolean';
  };
  return module.exports;
});

$__System.registerDynamic("1bd", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.memoize = function(fn, hasher) {
    return function memoize() {
      if (typeof memoize.cache !== 'object') {
        memoize.cache = {};
      }
      var args = [];
      for (var i = 0; i < arguments.length; i++) {
        args[i] = arguments[i];
      }
      var hash = hasher ? hasher(args) : JSON.stringify(args);
      if (!(hash in memoize.cache)) {
        return memoize.cache[hash] = fn.apply(fn, args);
      }
      return memoize.cache[hash];
    };
  };
  return module.exports;
});

$__System.registerDynamic("27c", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.format = function(value, options) {
    if (typeof options === 'function') {
      return options(value);
    }
    if (!value.isFinite()) {
      return value.isNaN() ? 'NaN' : (value.gt(0) ? 'Infinity' : '-Infinity');
    }
    var notation = 'auto';
    var precision = undefined;
    if (options !== undefined) {
      if (options.notation) {
        notation = options.notation;
      }
      if (typeof options === 'number') {
        precision = options;
      } else if (options.precision) {
        precision = options.precision;
      }
    }
    switch (notation) {
      case 'fixed':
        return exports.toFixed(value, precision);
      case 'exponential':
        return exports.toExponential(value, precision);
      case 'auto':
        var lower = 1e-3;
        var upper = 1e5;
        if (options && options.exponential) {
          if (options.exponential.lower !== undefined) {
            lower = options.exponential.lower;
          }
          if (options.exponential.upper !== undefined) {
            upper = options.exponential.upper;
          }
        }
        var oldConfig = {
          toExpNeg: value.constructor.toExpNeg,
          toExpPos: value.constructor.toExpPos
        };
        value.constructor.config({
          toExpNeg: Math.round(Math.log(lower) / Math.LN10),
          toExpPos: Math.round(Math.log(upper) / Math.LN10)
        });
        if (value.isZero())
          return '0';
        var str;
        var abs = value.abs();
        if (abs.gte(lower) && abs.lt(upper)) {
          str = value.toSignificantDigits(precision).toFixed();
        } else {
          str = exports.toExponential(value, precision);
        }
        return str.replace(/((\.\d*?)(0+))($|e)/, function() {
          var digits = arguments[2];
          var e = arguments[4];
          return (digits !== '.') ? digits + e : e;
        });
      default:
        throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", or "fixed".');
    }
  };
  exports.toExponential = function(value, precision) {
    if (precision !== undefined) {
      return value.toExponential(precision - 1);
    } else {
      return value.toExponential();
    }
  };
  exports.toFixed = function(value, precision) {
    return value.toFixed(precision || 0);
  };
  return module.exports;
});

$__System.registerDynamic("b1", ["a2", "27c", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var formatNumber = $__require('a2').format;
  var formatBigNumber = $__require('27c').format;
  exports.isString = function(value) {
    return typeof value === 'string';
  };
  exports.endsWith = function(text, search) {
    var start = text.length - search.length;
    var end = text.length;
    return (text.substring(start, end) === search);
  };
  exports.format = function(value, options) {
    if (typeof value === 'number') {
      return formatNumber(value, options);
    }
    if (value && value.isBigNumber === true) {
      return formatBigNumber(value, options);
    }
    if (value && value.isFraction === true) {
      if (!options || options.fraction !== 'decimal') {
        return (value.s * value.n) + '/' + value.d;
      } else {
        return value.toString();
      }
    }
    if (Array.isArray(value)) {
      return formatArray(value, options);
    }
    if (exports.isString(value)) {
      return '"' + value + '"';
    }
    if (typeof value === 'function') {
      return value.syntax ? String(value.syntax) : 'function';
    }
    if (value && typeof value === 'object') {
      if (typeof value.format === 'function') {
        return value.format(options);
      } else if (value && value.toString() !== {}.toString()) {
        return value.toString();
      } else {
        var entries = [];
        for (var key in value) {
          if (value.hasOwnProperty(key)) {
            entries.push('"' + key + '": ' + exports.format(value[key], options));
          }
        }
        return '{' + entries.join(', ') + '}';
      }
    }
    return String(value);
  };
  function formatArray(array, options) {
    if (Array.isArray(array)) {
      var str = '[';
      var len = array.length;
      for (var i = 0; i < len; i++) {
        if (i != 0) {
          str += ', ';
        }
        str += formatArray(array[i], options);
      }
      str += ']';
      return str;
    } else {
      return exports.format(array, options);
    }
  }
  return module.exports;
});

$__System.registerDynamic("27d", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function E() {}
  E.prototype = {
    on: function(name, callback, ctx) {
      var e = this.e || (this.e = {});
      (e[name] || (e[name] = [])).push({
        fn: callback,
        ctx: ctx
      });
      return this;
    },
    once: function(name, callback, ctx) {
      var self = this;
      function listener() {
        self.off(name, listener);
        callback.apply(ctx, arguments);
      }
      ;
      listener._ = callback;
      return this.on(name, listener, ctx);
    },
    emit: function(name) {
      var data = [].slice.call(arguments, 1);
      var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
      var i = 0;
      var len = evtArr.length;
      for (i; i < len; i++) {
        evtArr[i].fn.apply(evtArr[i].ctx, data);
      }
      return this;
    },
    off: function(name, callback) {
      var e = this.e || (this.e = {});
      var evts = e[name];
      var liveEvents = [];
      if (evts && callback) {
        for (var i = 0,
            len = evts.length; i < len; i++) {
          if (evts[i].fn !== callback && evts[i].fn._ !== callback)
            liveEvents.push(evts[i]);
        }
      }
      (liveEvents.length) ? e[name] = liveEvents : delete e[name];
      return this;
    }
  };
  module.exports = E;
  return module.exports;
});

$__System.registerDynamic("a8", ["27d", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var Emitter = $__require('27d');
  exports.mixin = function(obj) {
    var emitter = new Emitter();
    obj.on = emitter.on.bind(emitter);
    obj.off = emitter.off.bind(emitter);
    obj.once = emitter.once.bind(emitter);
    obj.emit = emitter.emit.bind(emitter);
    return obj;
  };
  return module.exports;
});

$__System.registerDynamic("bd", ["da", "27b", "1bd", "a2", "a4", "b1", "1bc", "a8", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.array = $__require('da');
  exports['boolean'] = $__require('27b');
  exports['function'] = $__require('1bd');
  exports.number = $__require('a2');
  exports.object = $__require('a4');
  exports.string = $__require('b1');
  exports.types = $__require('1bc');
  exports.emitter = $__require('a8');
  return module.exports;
});

$__System.registerDynamic("1ef", ["bd", "be", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var util = $__require('bd');
  var DimensionError = $__require('be');
  var string = util.string,
      isString = string.isString;
  function factory(type, config, load, typed) {
    var DenseMatrix = type.DenseMatrix;
    var algorithm13 = function(a, b, callback) {
      var adata = a._data;
      var asize = a._size;
      var adt = a._datatype;
      var bdata = b._data;
      var bsize = b._size;
      var bdt = b._datatype;
      var csize = [];
      if (asize.length !== bsize.length)
        throw new DimensionError(asize.length, bsize.length);
      for (var s = 0; s < asize.length; s++) {
        if (asize[s] !== bsize[s])
          throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
        csize[s] = asize[s];
      }
      var dt;
      var cf = callback;
      if (typeof adt === 'string' && adt === bdt) {
        dt = adt;
        b = typed.convert(b, dt);
        cf = typed.find(callback, [dt, dt]);
      }
      var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : [];
      return new DenseMatrix({
        data: cdata,
        size: csize,
        datatype: dt
      });
    };
    var _iterate = function(f, level, s, n, av, bv) {
      var cv = [];
      if (level === s.length - 1) {
        for (var i = 0; i < n; i++) {
          cv[i] = f(av[i], bv[i]);
        }
      } else {
        for (var j = 0; j < n; j++) {
          cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);
        }
      }
      return cv;
    };
    return algorithm13;
  }
  exports.name = 'algorithm13';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1f0", ["a4", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var clone = $__require('a4').clone;
  function factory(type, config, load, typed) {
    var DenseMatrix = type.DenseMatrix;
    var algorithm14 = function(a, b, callback, inverse) {
      var adata = a._data;
      var asize = a._size;
      var adt = a._datatype;
      var dt;
      var cf = callback;
      if (typeof adt === 'string') {
        dt = adt;
        b = typed.convert(b, dt);
        cf = typed.find(callback, [dt, dt]);
      }
      var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : [];
      return new DenseMatrix({
        data: cdata,
        size: clone(asize),
        datatype: dt
      });
    };
    var _iterate = function(f, level, s, n, av, bv, inverse) {
      var cv = [];
      if (level === s.length - 1) {
        for (var i = 0; i < n; i++) {
          cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);
        }
      } else {
        for (var j = 0; j < n; j++) {
          cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);
        }
      }
      return cv;
    };
    return algorithm14;
  }
  exports.name = 'algorithm14';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("27e", ["b5", "cd", "1ef", "1f0", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    var latex = $__require('b5');
    var matrix = load($__require('cd'));
    var algorithm13 = load($__require('1ef'));
    var algorithm14 = load($__require('1f0'));
    var to = typed('to', {
      'Unit, Unit | string': function(x, unit) {
        return x.to(unit);
      },
      'Matrix, Matrix': function(x, y) {
        return algorithm13(x, y, to);
      },
      'Array, Array': function(x, y) {
        return to(matrix(x), matrix(y)).valueOf();
      },
      'Array, Matrix': function(x, y) {
        return to(matrix(x), y);
      },
      'Matrix, Array': function(x, y) {
        return to(x, matrix(y));
      },
      'Matrix, any': function(x, y) {
        return algorithm14(x, y, to, false);
      },
      'any, Matrix': function(x, y) {
        return algorithm14(y, x, to, true);
      },
      'Array, any': function(x, y) {
        return algorithm14(matrix(x), y, to, false).valueOf();
      },
      'any, Array': function(x, y) {
        return algorithm14(matrix(y), x, to, true).valueOf();
      }
    });
    to.toTex = '\\left(${args[0]}' + latex.operators['to'] + '${args[1]}\\right)';
    return to;
  }
  exports.name = 'to';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("27f", ["27e", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = [$__require('27e')];
  return module.exports;
});

$__System.registerDynamic("a4", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.clone = function clone(x) {
    var type = typeof x;
    if (type === 'number' || type === 'string' || type === 'boolean' || x === null || x === undefined) {
      return x;
    }
    if (typeof x.clone === 'function') {
      return x.clone();
    }
    if (Array.isArray(x)) {
      return x.map(function(value) {
        return clone(value);
      });
    }
    if (x instanceof Number)
      return new Number(x.valueOf());
    if (x instanceof String)
      return new String(x.valueOf());
    if (x instanceof Boolean)
      return new Boolean(x.valueOf());
    if (x instanceof Date)
      return new Date(x.valueOf());
    if (x && x.isBigNumber === true)
      return x;
    if (x instanceof RegExp)
      throw new TypeError('Cannot clone ' + x);
    var m = {};
    for (var key in x) {
      if (x.hasOwnProperty(key)) {
        m[key] = clone(x[key]);
      }
    }
    return m;
  };
  exports.extend = function(a, b) {
    for (var prop in b) {
      if (b.hasOwnProperty(prop)) {
        a[prop] = b[prop];
      }
    }
    return a;
  };
  exports.deepExtend = function deepExtend(a, b) {
    if (Array.isArray(b)) {
      throw new TypeError('Arrays are not supported by deepExtend');
    }
    for (var prop in b) {
      if (b.hasOwnProperty(prop)) {
        if (b[prop] && b[prop].constructor === Object) {
          if (a[prop] === undefined) {
            a[prop] = {};
          }
          if (a[prop].constructor === Object) {
            deepExtend(a[prop], b[prop]);
          } else {
            a[prop] = b[prop];
          }
        } else if (Array.isArray(b[prop])) {
          throw new TypeError('Arrays are not supported by deepExtend');
        } else {
          a[prop] = b[prop];
        }
      }
    }
    return a;
  };
  exports.deepEqual = function deepEqual(a, b) {
    var prop,
        i,
        len;
    if (Array.isArray(a)) {
      if (!Array.isArray(b)) {
        return false;
      }
      if (a.length != b.length) {
        return false;
      }
      for (i = 0, len = a.length; i < len; i++) {
        if (!exports.deepEqual(a[i], b[i])) {
          return false;
        }
      }
      return true;
    } else if (a instanceof Object) {
      if (Array.isArray(b) || !(b instanceof Object)) {
        return false;
      }
      for (prop in a) {
        if (!exports.deepEqual(a[prop], b[prop])) {
          return false;
        }
      }
      for (prop in b) {
        if (!exports.deepEqual(a[prop], b[prop])) {
          return false;
        }
      }
      return true;
    } else {
      return (typeof a === typeof b) && (a == b);
    }
  };
  exports.canDefineProperty = function() {
    try {
      if (Object.defineProperty) {
        Object.defineProperty({}, 'x', {get: function() {}});
        return true;
      }
    } catch (e) {}
    return false;
  };
  exports.lazy = function(object, prop, fn) {
    if (exports.canDefineProperty()) {
      var _uninitialized = true;
      var _value;
      Object.defineProperty(object, prop, {
        get: function() {
          if (_uninitialized) {
            _value = fn();
            _uninitialized = false;
          }
          return _value;
        },
        set: function(value) {
          _value = value;
          _uninitialized = false;
        },
        configurable: true,
        enumerable: true
      });
    } else {
      object[prop] = fn();
    }
  };
  exports.traverse = function(object, path) {
    var obj = object;
    if (path) {
      var names = path.split('.');
      for (var i = 0; i < names.length; i++) {
        var name = names[i];
        if (!(name in obj)) {
          obj[name] = {};
        }
        obj = obj[name];
      }
    }
    return obj;
  };
  exports.isFactory = function(object) {
    return object && typeof object.factory === 'function';
  };
  return module.exports;
});

$__System.registerDynamic("280", ["a4", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var object = $__require('a4');
  function factory(type, config, load, typed) {
    var clone = typed('clone', {'any': object.clone});
    clone.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return clone;
  }
  exports.name = 'clone';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("223", ["ad", "a2", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  var number = $__require('a2');
  function factory(type, config, load, typed) {
    var isInteger = typed('isInteger', {
      'number': number.isInteger,
      'BigNumber': function(x) {
        return x.isInt();
      },
      'Fraction': function(x) {
        return x.d === 1 && isFinite(x.n);
      },
      'Array | Matrix': function(x) {
        return deepMap(x, isInteger);
      }
    });
    return isInteger;
  }
  exports.name = 'isInteger';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1e8", ["ad", "a2", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  var number = $__require('a2');
  function factory(type, config, load, typed) {
    var isNegative = typed('isNegative', {
      'number': function(x) {
        return x < 0;
      },
      'BigNumber': function(x) {
        return x.isNeg() && !x.isZero() && !x.isNaN();
      },
      'Fraction': function(x) {
        return x.s < 0;
      },
      'Unit': function(x) {
        return isNegative(x.value);
      },
      'Array | Matrix': function(x) {
        return deepMap(x, isNegative);
      }
    });
    return isNegative;
  }
  exports.name = 'isNegative';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1c6", ["ad", "a2", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  var number = $__require('a2');
  function factory(type, config, load, typed) {
    var isNumeric = typed('isNumeric', {
      'number | BigNumber | Fraction | boolean': function() {
        return true;
      },
      'Complex | Unit | string': function() {
        return false;
      },
      'Array | Matrix': function(x) {
        return deepMap(x, isNumeric);
      }
    });
    return isNumeric;
  }
  exports.name = 'isNumeric';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1fe", ["ad", "a2", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  var number = $__require('a2');
  function factory(type, config, load, typed) {
    var isPositive = typed('isPositive', {
      'number': function(x) {
        return x > 0;
      },
      'BigNumber': function(x) {
        return !x.isNeg() && !x.isZero() && !x.isNaN();
      },
      'Fraction': function(x) {
        return x.s > 0 && x.n > 0;
      },
      'Unit': function(x) {
        return isPositive(x.value);
      },
      'Array | Matrix': function(x) {
        return deepMap(x, isPositive);
      }
    });
    return isPositive;
  }
  exports.name = 'isPositive';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("ad", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = function deepMap(array, callback, skipZeros) {
    if (array && (typeof array.map === 'function')) {
      return array.map(function(x) {
        return deepMap(x, callback, skipZeros);
      });
    } else {
      return callback(array);
    }
  };
  return module.exports;
});

$__System.registerDynamic("281", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function NumberFormatter(value) {
    var match = String(value).toLowerCase().match(/^0*?(-?)(\d+\.?\d*)(e([+-]?\d+))?$/);
    if (!match) {
      throw new SyntaxError('Invalid number');
    }
    var sign = match[1];
    var coefficients = match[2];
    var exponent = parseFloat(match[4] || '0');
    var dot = coefficients.indexOf('.');
    exponent += (dot !== -1) ? (dot - 1) : (coefficients.length - 1);
    this.sign = sign;
    this.coefficients = coefficients.replace('.', '').replace(/^0*/, function(zeros) {
      exponent -= zeros.length;
      return '';
    }).replace(/0*$/, '').split('').map(function(d) {
      return parseInt(d);
    });
    if (this.coefficients.length === 0) {
      this.coefficients.push(0);
      exponent++;
    }
    this.exponent = exponent;
  }
  NumberFormatter.prototype.toEngineering = function(precision) {
    var rounded = this.roundDigits(precision);
    var e = rounded.exponent;
    var c = rounded.coefficients;
    var newExp = e % 3 === 0 ? e : (e < 0 ? (e - 3) - (e % 3) : e - (e % 3));
    var significandsDiff = e >= 0 ? e : Math.abs(newExp);
    if (c.length - 1 < significandsDiff)
      c = c.concat(zeros(significandsDiff - (c.length - 1)));
    var expDiff = Math.abs(e - newExp);
    var decimalIdx = 1;
    var str = '';
    while (--expDiff >= 0)
      decimalIdx++;
    var decimals = c.slice(decimalIdx).join('');
    var decimalVal = decimals.match(/[1-9]/) ? ('.' + decimals) : '';
    str = c.slice(0, decimalIdx).join('') + decimalVal;
    str += 'e' + (e >= 0 ? '+' : '') + newExp.toString();
    return rounded.sign + str;
  };
  NumberFormatter.prototype.toFixed = function(precision) {
    var rounded = this.roundDigits(this.exponent + 1 + (precision || 0));
    var c = rounded.coefficients;
    var p = rounded.exponent + 1;
    var pp = p + (precision || 0);
    if (c.length < pp) {
      c = c.concat(zeros(pp - c.length));
    }
    if (p < 0) {
      c = zeros(-p + 1).concat(c);
      p = 1;
    }
    if (precision) {
      c.splice(p, 0, (p === 0) ? '0.' : '.');
    }
    return this.sign + c.join('');
  };
  NumberFormatter.prototype.toExponential = function(precision) {
    var rounded = precision ? this.roundDigits(precision) : this.clone();
    var c = rounded.coefficients;
    var e = rounded.exponent;
    if (c.length < precision) {
      c = c.concat(zeros(precision - c.length));
    }
    var first = c.shift();
    return this.sign + first + (c.length > 0 ? ('.' + c.join('')) : '') + 'e' + (e >= 0 ? '+' : '') + e;
  };
  NumberFormatter.prototype.toPrecision = function(precision, options) {
    var lower = (options && options.lower !== undefined) ? options.lower : 1e-3;
    var upper = (options && options.upper !== undefined) ? options.upper : 1e+5;
    var abs = Math.abs(Math.pow(10, this.exponent));
    if (abs < lower || abs >= upper) {
      return this.toExponential(precision);
    } else {
      var rounded = precision ? this.roundDigits(precision) : this.clone();
      var c = rounded.coefficients;
      var e = rounded.exponent;
      if (c.length < precision) {
        c = c.concat(zeros(precision - c.length));
      }
      c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0)));
      c = zeros(-e).concat(c);
      var dot = e > 0 ? e : 0;
      if (dot < c.length - 1) {
        c.splice(dot + 1, 0, '.');
      }
      return this.sign + c.join('');
    }
  };
  NumberFormatter.prototype.clone = function() {
    var clone = new NumberFormatter('0');
    clone.sign = this.sign;
    clone.coefficients = this.coefficients.slice(0);
    clone.exponent = this.exponent;
    return clone;
  };
  NumberFormatter.prototype.roundDigits = function(precision) {
    var rounded = this.clone();
    var c = rounded.coefficients;
    while (precision <= 0) {
      c.unshift(0);
      rounded.exponent++;
      precision++;
    }
    if (c.length > precision) {
      var removed = c.splice(precision, c.length - precision);
      if (removed[0] >= 5) {
        var i = precision - 1;
        c[i]++;
        while (c[i] === 10) {
          c.pop();
          if (i === 0) {
            c.unshift(0);
            rounded.exponent++;
            i++;
          }
          i--;
          c[i]++;
        }
      }
    }
    return rounded;
  };
  function zeros(length) {
    var arr = [];
    for (var i = 0; i < length; i++) {
      arr.push(0);
    }
    return arr;
  }
  module.exports = NumberFormatter;
  return module.exports;
});

$__System.registerDynamic("a2", ["281", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var NumberFormatter = $__require('281');
  exports.isNumber = function(value) {
    return typeof value === 'number';
  };
  exports.isInteger = function(value) {
    return isFinite(value) ? (value == Math.round(value)) : false;
  };
  exports.sign = function(x) {
    if (x > 0) {
      return 1;
    } else if (x < 0) {
      return -1;
    } else {
      return 0;
    }
  };
  exports.format = function(value, options) {
    if (typeof options === 'function') {
      return options(value);
    }
    if (value === Infinity) {
      return 'Infinity';
    } else if (value === -Infinity) {
      return '-Infinity';
    } else if (isNaN(value)) {
      return 'NaN';
    }
    var notation = 'auto';
    var precision = undefined;
    if (options) {
      if (options.notation) {
        notation = options.notation;
      }
      if (exports.isNumber(options)) {
        precision = options;
      } else if (options.precision) {
        precision = options.precision;
      }
    }
    switch (notation) {
      case 'fixed':
        return exports.toFixed(value, precision);
      case 'exponential':
        return exports.toExponential(value, precision);
      case 'engineering':
        return exports.toEngineering(value, precision);
      case 'auto':
        return exports.toPrecision(value, precision, options && options.exponential).replace(/((\.\d*?)(0+))($|e)/, function() {
          var digits = arguments[2];
          var e = arguments[4];
          return (digits !== '.') ? digits + e : e;
        });
      default:
        throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", or "fixed".');
    }
  };
  exports.toExponential = function(value, precision) {
    return new NumberFormatter(value).toExponential(precision);
  };
  exports.toEngineering = function(value, precision) {
    return new NumberFormatter(value).toEngineering(precision);
  };
  exports.toFixed = function(value, precision) {
    return new NumberFormatter(value).toFixed(precision);
  };
  exports.toPrecision = function(value, precision, options) {
    return new NumberFormatter(value).toPrecision(precision, options);
  };
  exports.digits = function(value) {
    return value.toExponential().replace(/e.*$/, '').replace(/^0\.?0*|\./, '').length;
  };
  exports.DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;
  exports.nearlyEqual = function(x, y, epsilon) {
    if (epsilon == null) {
      return x == y;
    }
    if (x == y) {
      return true;
    }
    if (isNaN(x) || isNaN(y)) {
      return false;
    }
    if (isFinite(x) && isFinite(y)) {
      var diff = Math.abs(x - y);
      if (diff < exports.DBL_EPSILON) {
        return true;
      } else {
        return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;
      }
    }
    return false;
  };
  return module.exports;
});

$__System.registerDynamic("234", ["ad", "a2", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var deepMap = $__require('ad');
  var number = $__require('a2');
  function factory(type, config, load, typed) {
    var isZero = typed('isZero', {
      'number': function(x) {
        return x === 0;
      },
      'BigNumber': function(x) {
        return x.isZero();
      },
      'Complex': function(x) {
        return x.re === 0 && x.im === 0;
      },
      'Fraction': function(x) {
        return x.d === 1 && x.n === 0;
      },
      'Unit': function(x) {
        return isZero(x.value);
      },
      'Array | Matrix': function(x) {
        return deepMap(x, isZero);
      }
    });
    return isZero;
  }
  exports.name = 'isZero';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("1bc", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.type = function(x) {
    var type = typeof x;
    if (type === 'object') {
      if (x === null)
        return 'null';
      if (x instanceof Boolean)
        return 'boolean';
      if (x instanceof Number)
        return 'number';
      if (x instanceof String)
        return 'string';
      if (Array.isArray(x))
        return 'Array';
      if (x instanceof Date)
        return 'Date';
      if (x instanceof RegExp)
        return 'RegExp';
      return 'Object';
    }
    if (type === 'function')
      return 'Function';
    return type;
  };
  return module.exports;
});

$__System.registerDynamic("1c8", ["1bc", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var types = $__require('1bc');
  function factory(type, config, load, typed) {
    var _typeof = typed('_typeof', {'any': function(x) {
        var t = types.type(x);
        if (t === 'Object') {
          if (x.isBigNumber === true)
            return 'BigNumber';
          if (x.isComplex === true)
            return 'Complex';
          if (x.isFraction === true)
            return 'Fraction';
          if (x.isMatrix === true)
            return 'Matrix';
          if (x.isUnit === true)
            return 'Unit';
          if (x.isIndex === true)
            return 'Index';
          if (x.isRange === true)
            return 'Range';
          if (x.isChain === true)
            return 'Chain';
          if (x.isHelp === true)
            return 'Help';
        }
        return t;
      }});
    _typeof.toTex = '\\mathrm{${name}}\\left(${args}\\right)';
    return _typeof;
  }
  exports.name = 'typeof';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("282", ["280", "223", "1e8", "1c6", "1fe", "234", "1c8", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = [$__require('280'), $__require('223'), $__require('1e8'), $__require('1c6'), $__require('1fe'), $__require('234'), $__require('1c8')];
  return module.exports;
});

$__System.registerDynamic("283", ["1e6", "20d", "220", "228", "22d", "230", "237", "242", "251", "256", "25e", "260", "27a", "27f", "282", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = [$__require('1e6'), $__require('20d'), $__require('220'), $__require('228'), $__require('22d'), $__require('230'), $__require('237'), $__require('242'), $__require('251'), $__require('256'), $__require('25e'), $__require('260'), $__require('27a'), $__require('27f'), $__require('282')];
  return module.exports;
});

$__System.registerDynamic("284", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function factory(type, config, load, typed) {
    return function reviver(key, value) {
      var constructor = type[value && value.mathjs];
      if (constructor && typeof constructor.fromJSON === 'function') {
        return constructor.fromJSON(value);
      }
      return value;
    };
  }
  exports.name = 'reviver';
  exports.path = 'json';
  exports.factory = factory;
  return module.exports;
});

$__System.registerDynamic("285", ["284", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = [$__require('284')];
  return module.exports;
});

$__System.registerDynamic("a5", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function ArgumentsError(fn, count, min, max) {
    if (!(this instanceof ArgumentsError)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
    this.fn = fn;
    this.count = count;
    this.min = min;
    this.max = max;
    this.message = 'Wrong number of arguments in function ' + fn + ' (' + count + ' provided, ' + min + ((max != undefined) ? ('-' + max) : '') + ' expected)';
    this.stack = (new Error()).stack;
  }
  ArgumentsError.prototype = new Error();
  ArgumentsError.prototype.constructor = Error;
  ArgumentsError.prototype.name = 'ArgumentsError';
  ArgumentsError.prototype.isArgumentsError = true;
  module.exports = ArgumentsError;
  return module.exports;
});

$__System.registerDynamic("be", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function DimensionError(actual, expected, relation) {
    if (!(this instanceof DimensionError)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
    this.actual = actual;
    this.expected = expected;
    this.relation = relation;
    this.message = 'Dimension mismatch (' + (Array.isArray(actual) ? ('[' + actual.join(', ') + ']') : actual) + ' ' + (this.relation || '!=') + ' ' + (Array.isArray(expected) ? ('[' + expected.join(', ') + ']') : expected) + ')';
    this.stack = (new Error()).stack;
  }
  DimensionError.prototype = new RangeError();
  DimensionError.prototype.constructor = RangeError;
  DimensionError.prototype.name = 'DimensionError';
  DimensionError.prototype.isDimensionError = true;
  module.exports = DimensionError;
  return module.exports;
});

$__System.registerDynamic("1b9", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function IndexError(index, min, max) {
    if (!(this instanceof IndexError)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
    this.index = index;
    if (arguments.length < 3) {
      this.min = 0;
      this.max = min;
    } else {
      this.min = min;
      this.max = max;
    }
    if (this.min !== undefined && this.index < this.min) {
      this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';
    } else if (this.max !== undefined && this.index >= this.max) {
      this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';
    } else {
      this.message = 'Index out of range (' + this.index + ')';
    }
    this.stack = (new Error()).stack;
  }
  IndexError.prototype = new RangeError();
  IndexError.prototype.constructor = RangeError;
  IndexError.prototype.name = 'IndexError';
  IndexError.prototype.isIndexError = true;
  module.exports = IndexError;
  return module.exports;
});

$__System.registerDynamic("286", ["a5", "be", "1b9", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ArgumentsError = $__require('a5');
  var DimensionError = $__require('be');
  var IndexError = $__require('1b9');
  module.exports = [{
    name: 'ArgumentsError',
    path: 'error',
    factory: function() {
      return ArgumentsError;
    }
  }, {
    name: 'DimensionError',
    path: 'error',
    factory: function() {
      return DimensionError;
    }
  }, {
    name: 'IndexError',
    path: 'error',
    factory: function() {
      return IndexError;
    }
  }];
  return module.exports;
});

$__System.registerDynamic("287", ["d5", "d8", "1c9", "283", "285", "286", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = [$__require('d5'), $__require('d8'), $__require('1c9'), $__require('283'), $__require('285'), $__require('286')];
  return module.exports;
});

$__System.registerDynamic("288", ["a9", "287", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var core = $__require('a9');
  function create(config) {
    var math = core.create(config);
    math.create = create;
    math['import']($__require('287'));
    return math;
  }
  module.exports = create();
  return module.exports;
});

(function() {
var define = $__System.amdDefine;
define("289", [], function() {
  return "yocto_ = 10^-24\ny_ = 10^-24\nzepto_ = 10^-21\nz_ = 10^-21\natto_ = 10^-18\na_ = 10^-18\nfemto_ = 10^-15\nf_ = 10^-15\npico_ = 10^-12\np_ = 10^-12\nnano_ = 10^-9\nn_ = 10^-9\nmicro_ = 10^-6\nu_ = 10^-6\nmilli_ = 10^-3\nm_ = 10^-3\ncenti_ = 10^-2\nc_ = 10^-2\ndeci_ = 10^-1\nd_ = 10^-1\ndeka_ = 10^1\nda_ = 10^1\nhekto_ = 10^2\nh_ = 10^2\nkilo_ = 10^3\nk_ = 10^3\nmega_ = 10^6\nM_ = 10^6\ngiga_ = 10^9\nG_ = 10^9\ntera_ = 10^12\nT_ = 10^12\npeta_ = 10^15\nP_ = 10^15\nexa_ = 10^18\nE_ = 10^18\nzetta_ = 10^21\nZ_ = 10^21\nyotta_ = 10^24\nY_ = 10^24\nkibi_ = 2^10\nKi_ = 2^10\nmebi_ = 2^20\nMi_ = 2^20\ngibi_ = 2^30\nGi_ = 2^30\ntebi_ = 2^40\nTi_ = 2^40\npebi_ = 2^50\nPi_ = 2^50\nexbi_ = 2^60\nEi_ = 2^60\nm.  # Meter\ng.  # Gram\ns.  # Second\nA.  # Ampere\nK.  # Kelvin\nmol.  # Mole\neinstein.  # Einstein\ncd.  # Candela\nNp.  # Neper\nbit.  # Bit\ne = 2.718281828459045  # Base of Natural Logarithms (e)\n_unicode__CF_80 = pi = 3.141592653589793  # Archimede's Constant (pi)\n_unicode__CE_B3 = euler = 0.5772156649015329  # Euler's Constant\ncatalan = 0.915965594177219  # Catalan's Constant\ni = NaN  # Imaginary i (sqrt -1)\ninfinity = Infinity  # Infinity\nplus_infinity = Infinity  # Positive Infinity\nminus_infinity = -Infinity  # Negative Infinity\nundefined = NaN  # Undefined\nmeter = meters = metre = metres = m\nkm_c = 10^3 m  # Kilometer\ndm_c = 10^-1 m  # Decimeter\ncm_c = 10^-2 m  # Centimeter\nmm_c = 10^-3 m  # Millimeter\nnautical_mile = nautical_miles = 1852 m  # Nautical Mile\n_unicode__C3_85 = ångström = angstrom = 1E-10 m  # Ångström\nUS_in = US_inch = US_inches = 100/3937 m  # U.S. Survey Inch\nin = inch = inches = 0.0254 m  # Inch\nhand = hands = 4 in  # Hand\nft = foot = feet = 3 hand  # Foot\nUS_ft = US_foot = US_feet = 12 US_in  # U.S. Survey Foot\nli = link = links = 66/100 ft  # Link\nyd = yard = yards = 3 ft  # Yard\nrd = rod = rods = 16.5 US_ft  # Rod (pole/perch)\nfathom = fathoms = 2 yd  # Fathom\nch = chain = chains = 100 li  # Chain\nfur = furlong = furlongs = 220 yd  # Furlong\nmi = mile = miles = 80 ch  # Mile\nUS_mi = US_mile = US_miles = 5280 US_ft  # U.S. Survey Mile\nmil = mils = 0.001 in  # Mil (1/1000 in)\nAU = astronomical_unit = astronomical_units = 149578706600 m  # Astronomical Unit\nly = lightyear = lightyears = 9460730472580800 m  # Light Year\npc = parsec = parsecs = 648000/pi AU  # Parsec\npied_du_roi = 9000/27706 m  # Pied du roi (French Royal Foot)\npouce = 1/12 pied_du_roi  # Pouce (French Royal Inch)\nligne = 1/12 pouce  # Ligne\ntoise = 6 pied_du_roi  # Toise\nm_p_m = m m^-1  # Meter per Meter\nrad = radian = radians = 1 m_p_m  # Radian\ndeg = _unicode__C2_B0 = degree = degrees = pi/180 rad  # Degree\ngra = gradian = gradians = gon = gons = pi/200 rad  # Gradian (Gon)\narcminute = arcminutes = 1/60 deg  # Arcminute\narcsecond = arcseconds = 1/60 arcminute  # Arcsecond\nturn = turns = 360 deg  # Turn\nsqm_p_sqm = m^2 m^-2  # Square Meter per Square Meter\nsr = steradian = steradians = 1 m_p_m  # Steradian\nrad_p_sqs = rad s^-2  # Radians per Second Squared\nrad_p_s = rad s^-1  # Radians per Second\nkg_p_cum = 10^3 g m^-3  # Kilogram per Cubic Meter\ng_p_cudm = g 10^-1 m^-3  # Gram per Cubic Decimeter\ng_p_cucm = g 10^-2 m^-3  # Gram per Cubic Centimeter\ng_p_mol = g mol^-1  # Gram per Mole\nkg_p_kg = 10^3 g 10^3 g^-1  # Kilogram per Kilogram\ngram = grams = g\nkg_c = 10^3 g  # Kilogram\nhg_c = 10^2 g  # Hektogram\nt = tonne = tonnes = ton = tons = 1000000 g  # Metric Ton (Tonne)\ngr = grain = grains = 0.06479891 g  # Grain\npwt = pennyweight = pennyweights = 24 gr  # Pennyweight\noz_t = troy_ounce = troy_ounces = 20 pwt  # Ounce (troy)\nlb_t = troy_pound = troy_pounds = 12 oz_t  # Pound (troy)\ndr = dram = drams = 1.7718451953125 g  # Dram\noz = ounce = ounces = 16 dr  # Ounce\nlb = pound = pounds = 16 oz  # Pound\ncwt = hundredweight = hundredweights = 100 lb  # Short Hundredweight\nl_cwt = long_hundredweight = long_hundredweights = 112 lb  # Long Hundredweight\ns_ton = short_ton = short_tons = 2000 lb  # Short Ton\nl_ton = long_ton = long_tons = 2240 lb  # Long Ton\nstone = stones = 14 lb  # Stone\ncental = centals = 100 lb  # Cental\ncarat = carats = 0.2 g  # Carat\npfund = 500 g  # Pfund\nzentner = 100 pfund  # Zentner\nu = AMU = atomic_mass_unit = atomic_mass_units = 1 g_p_mol  # Atomic Mass Unit\nHz = hertz = 1 s^(-1)  # Hertz\nsecond = seconds = s\nmin = minute = minutes = 60 s  # Minute\nh = hour = hours = 60 min  # Hour\nd = day = days = 24 h  # Day\nweek = weeks = 7 day  # Week\nfortnight = fortnights = 2 week  # Fortnight\nyear = years = 365.25 d  # Julian Year\nampere = amperes = A\nabampere = abA = aA = abamperes = 10 A  # Abampere\nA_p_sqm = A m^-2  # Ampere per Meter Squared\ns_A = s A  # Second Ampere\nC = coulomb = coulombs = 1 s_A  # Coulomb\nabcoulomb = abcoulombs = abC = aC = 10 C  # Abcoulomb\nstatcoulomb = statcoulombs = statC = franklin = Fr = franklins ≈ 3.3356410E-10 C  # Statcoloumb (Franklin)\nC_p_cum = C m^-3  # Coulomb per Cubic Meter\nC_p_sqm = C m^-2  # Coulomb per Meter Squared\nW_p_A = W A^-1  # Watt per Ampere\nV = volt = volts = 1 W_p_A  # Volt\nstatvolt = statvolts = statV = 299.792458 V  # Statvolt\nabvolt = abvolts = abV = 1E-8 V  # Abvolt\nC_p_V = C V^-1  # Coulomb per Volt\nF = farad = farads = 1 C_p_V  # Farad\nV_p_A = V A^-1  # Volt per Ampere\n_unicode__CE_A9 = ohm = ohms = 1 V_p_A  # Ohm\nabohm = abohms = abΩ = 1E-9 ohm  # Abohm\nstatohm = statohms = statΩ ≈ 8.9875517874E11 ohm  # Statohm\nA_p_V = A V^-1  # Ampere per Volt\nS = siemens = 1 A_p_V  # Siemens\nV_p_m = V m^-1  # Volt per Meter\nF_p_m = F m^-1  # Farad per Meter\nWb_p_A = Wb A^-1  # Weber per Ampere\nH = henry = henrys = 1 Wb_p_A  # Henry\nH_p_m = H m^-1  # Henry per Meter\nkelvin = kelvins = K\nmol_p_cum = mol m^-3  # Mole per Cubic Meter\nrecs_mol = mol s^-1  # Reciprocal Seconds Mole\nkat = katal = katals = 1 recs_mol  # Katal\nkat_p_cum = kat m^-3  # Katal per Cubic Meter\nmole = moles = mol\neinsteins = einstein\ncandela = candelas = cd\ncd_p_sqm = cd m^-2  # Candela per Meter Squared\nsb = stilb = stilbs = 10000 cd_p_sqm  # Stilb\ncd_sr = cd sr  # Candela Steradian\nlm = lumen = lumens = 1 cd_sr  # Lumen\nlm_p_sqm = lm m^-2  # Lumen per Meter Squared\nlm_p_sqft = lm ft^-2  # Lumen per Foot Squared\nlx = lux = 1 lm_p_sqm  # Lux\nfc = footcandle = footcandles = 1 lm_p_sqft  # Foot-Candle\nph = phot = phots = 10000 lx  # Phot\nW_p_sr = W sr^-1  # Watt per Steradian\nW_p_sqm = W m^-2  # Watt per Meter Squared\neinstein_p_sqm_p_s = einstein m^-2 s^-1  # Einstein per Meter Squared per Second\nmicroeinstein_p_sqm_p_s = 10^-6 einstein m^-2 s^-1  # Microeinstein per Meter Squared per Second\nW_p_sqm_sr = W sr^-1 m^-2  # Watt per Square Meter Steradian\nsqm = m^2  # Square Meter\nsqkm = 10^3 m^2  # Square Kilometer\na = are = ares = 100 m^(2)  # Are\nha = 10^2 a  # Hectare\nb = barn = barns = 1E-28 m^(2)  # Barn\nrood = roods = 1210 yd^(2)  # Rood\nacre = acres = 10 ch^(2)  # Acre\nsection = sections = 1 mi^(2)  # Section\ntownship = townships = 36 section  # Township\nsqft = ft^2  # Square Foot\nsqin = in^2  # Square Inch\nsqmi = mi^2  # Square Mile\nl_p_km = l 10^3 m^-1  # Liter per Kilometer\nkm_p_l = 10^3 m l^-1  # Kilometer per Liter\nmile_p_gal = mi gal^-1  # Miles per Gallon\nc:mpg = 1 mile_p_gal  # Miles per Gallon\nteaspoon = teaspoons = 0.005 L  # Teaspoon\ndessertspoon = dessertspoons = 2 teaspoon  # Dessertspoon\ntablespoon = tablespoons = 3 teaspoon  # Tablespoon\ncup = cups = 0.250 L  # Cup\nUK_fl_oz = imperial_fluid_ounce = imperial_fluid_ounces = 0.0284130625 L  # Imperial Fluid Ounce\nUK_gi = imperial_gill = imperial_gills = 5 UK_fl_oz  # Imperial Gill\nUK_pt = imperial_pint = imperial_pints = 4 UK_gi  # Imperial Pint\nUK_qt = imperial_quart = imperial_quarts = 2 UK_pt  # Imperial Quart\nUK_gal = imperial_gallon = imperial_gallons = 4 UK_qt  # Imperial Gallon\nimperial_minim = imperial_minims = 1/480 UK_fl_oz  # Imperial Minim\nimperial_fluid_scuple = imperial_fluid_scuples = 20 imperial_minim  # Imperial Fluid Scuple\nUK_fl_dr = imperial_fluid_drachm = imperial_fluid_drachms = 3 imperial_fluid_scuple  # Imperial Fluid Drachm\nUK_bu = imperial_bushel = imperial_bushels = 8 UK_gal  # Imperial Bushel\nfl_oz = fluid_ounce = fluid_ounces = 231/128 in^(3)  # U.S. Fluid Ounce\ngi = gill = gills = 4 fl_oz  # U.S. Gill\nliq_pt = liquid_pint = liquid_pints = 4 gi  # U.S. Liquid Pints\nliq_qt = liquid_quart = liquid_quarts = 2 liq_pt  # U.S. Liquid Quarts\nminim = minims = 1/480 fl_oz  # U.S. Minim\nfl_dr = fluid_drachm = fluid_drachms = 60 minim  # U.S. Fluid Drachm\ndry_pt = dry_pint = dry_pints = 33.6003125 in^(3)  # U.S. Dry Pint\ndry_qt = dry_quart = dry_quarts = 2 dry_pt  # U.S. Dry Quart\npk = peck = pecks = 8 dry_qt  # U.S. Peck\nbu = bushel = bushels = 4 pk  # U.S. Bushel\ngal = gallon = gallons = 4 liq_qt  # U.S. Gallon\nbbl = barrell = barrells = 42 gal  # U.S. Barrell (oil)\ncum_p_kg = m^3 10^3 g^-1  # Cubic Meter per Kilogram\ncum = m^3  # Cubic Meter\nL = l = liter = liters = litre = litres = 0.001 m^(3)  # Liter\nml_c = 10^-3 l  # Milliliter\ncl_c = 10^-2 l  # Centiliter\ndl_c = 10^-1 l  # Deciliter\ncuin = in^3  # Cubic Inch\nm_p_sqs = m s^-2  # Meter per Second Squared\nGal = galileo = galileos = 1/100 m_p_sqs  # Galileo\ngee = gees = 9.80665 m_p_sqs  # Gee\nm_p_s = m s^-1  # Meter per Second\nkm_p_h = 10^3 m h^-1  # Kilometer per Hour\nnautical_mile_p_h = nautical_mile h^-1  # Nautical Mile per Hour\nknot = knots = 1 nautical_mile_p_h  # Knot\nmile_p_h = mi h^-1  # Miles per Hour\nc:mph = 1 mile_p_h  # Miles per Hour\nrecm = m^-1  # Reciprocal Meter\nA_p_m = A m^-1  # Ampere per Meter\nOe = oersted = oersteds = 1000/(4*pi) A_p_m  # Oersted\nV_s = V s  # Volt Seconds\nWb = weber = webers = 1 V_s  # Weber\nMx = maxwell = maxwells = 1E-8 Wb  # Maxwell\nWb_p_sqm = Wb m^-2  # Weber per Meter Squared\nT = tesla = teslas = 1 Wb_p_sqm  # Tesla\ngauss = 0.0001 T  # Gauss\nN_m = N m  # Newton Meter\nN_p_sqm = N m^-2  # Newton per Meter Squared\nlbf_p_sqin = lbf in^-2  # Pound-force per Square Inch\nPa = pascal = pascals = 1 N_p_sqm  # Pascal\nc:psi = 1 lbf_p_sqin  # Pound-force per Square Inch (psi)\nbar = bars = 100000 Pa  # Bar\natm = atmosphere = atmospheres = 101325 Pa  # Atmosphere\ntorr = torrs = 1/760 atm  # Torr\nmmHg = 1/760 atm  # Millimeter of Mercury\ninHg = 25.4 mmHg  # Inch of Mercury\nPa_s = Pa s  # Pascal Second\nP = poise = poises = 0.1 Pa_s  # Poise\nsqm_p_s = m^2 s^-1  # Square Meter per Second\nSt = stokes = 0.0001 sqm_p_s  # Stokes\nN_p_m = N m^-1  # Newton per Meter\nm_kg_p_sqs = m 10^3 g s^-2  # Meter Kilogram per Second Squared\nN = newton = newtons = 1 m_kg_p_sqs  # Newton\ndyn = dyne = dynes = 1E-5 N  # Dyne\nlbf = pound_force = 4.4482216152605 N  # Pound-force\nlb_ft_p_sqs = lb ft s^-2  # Pound Foot per Second Squared\npoundal = poundals = pdl = 1 lb_ft_p_sqs  # Poundal\npond = ponds = gf = 0.00980665 N  # Pond (Gram-Force)\nkpond_c = 10^3 pond  # Kilopond (Kilogram-Force)\nJ_p_kg = J 10^3 g^-1  # Joule per Kilogram\nJ_p_s = J s^-1  # Joule per Second\nW = watt = watts = 1 J_p_s  # Watt\nhp = horsepower = horsepowers = 745.699987158227022 W  # Horse Power\nPS = pferdestärke = 735.49875 W  # Pferdestärke\nJ_p_K = J K^-1  # Joule per Kelvin\nJ_p_kg_K = J 10^3 g^-1 K^-1  # Joule per Kilogram Kelvin\nW_p_m_K = W m^-1 K^-1  # Watt per Meter Kelvin\nJ_p_cum = J m^-3  # Joule per Cubic Meter\nJ_p_mol = J mol^-1  # Joule per Mole\nJ_p_mol_K = J mol^-1 K^-1  # Joule per Mole Kelvin\nJ = joule = joules = 1 N_m  # Joule\nW_h = W h  # Watt Hour\nW_h = 10^3 W h  # Kilowatt Hour\ncal_IT = cal = c:calorie = c:calories = 4.1868 J  # Calorie (international table)\nc:Calorie = c:Calories = 1000 cal  # Calorie (capital C)\ncal_th = 4.184 J  # Calorie (thermochemical)\nc:gTNT = gramTNT = 1000 cal_th  # Gram of TNT\nc:tTNT = tonTNT = 1000000 gTNT  # Ton of TNT\ncal_fifteen ≈ 4.185880 J  # Calorie (15 degrees Celcius)\ncal_mean ≈ 4.19002 J  # Calorie (mean)\nBtu = 1055.056 J  # British Thermal Unit (IT)\neV = electron_volt = electron_volts ≈ 1.602177E-19 J  # Electron Volt\nerg = ergs = 1E-7 J  # Erg\nfoe = foes = 1E51 erg  # Foe\nft_lbf = ft lbf  # Foot-Pound Force\nGy = gray = grays = 1 J_p_kg  # Gray\nrad_radioactivity = 1/100 Gy  # Rad\nSv = sievert = sieverts = 1 J_p_kg  # Sievert\nrem_radioactivity = 1/100 Sv  # Rem\nC_p_kg = C 10^3 g^-1  # Coulomb per Kilogram\nR = roentgen = roentgens = 0.000258 C_p_kg  # Roentgen\nGy_p_s = Gy s^-1  # Gray per Second\nBq = becquerel = becquerels = 1 s^(-1)  # Becquerel\nCi = curie = curies = 3.7E10 Bq  # Curie\nneper = nepers = Np\nB = bel = bels = 0.5*ln(10) Np  # Bel\ndB_c = 10^-1 B  # Decibel\nbits = bit\nbyte = bytes = octet = octets = 8 bit  # Byte (8-bit)\nnibble = nibbles = nybble = nybbles = semioctet = semioctets = 4 bit  # Nibble\ntribble = tribbles = 3 nibble  # Tribble\nword = words = 16 bit  # Word (16-bit)\nkbyte_c = 10^3 byte  # Kilobyte\nKibyte_c = 2^10 byte  # Kibibyte\nMibyte_c = 2^20 byte  # Mebibyte\nGibyte_c = 2^30 byte  # Gibibyte\nMbyte_c = 10^6 byte  # Megabyte\nGbyte_c = 10^9 byte  # Gigabyte\nTbyte_c = 10^12 byte  # Terabyte\nkbit_c = 10^3 bit  # Kilobit\nKibit_c = 2^10 bit  # Kibibit\nMibit_c = 2^20 bit  # Mebibit\nGibit_c = 2^30 bit  # Gibibit\nMbit_c = 10^6 bit  # Megabit\nGbit_c = 10^9 bit  # Gigabit\nTbit_c = 10^12 bit  # Terabit\npt = pts = point = points = 1/72 in  # PostScript Point\npica = picas = 12 pt  # PostScript Pica\nata_pica = ata_picas = 0.166 in  # ATA Pica\nata_point = ata_pt = ata_points = 1/12 ata_pica  # ATA Point\nnew_didot = 0.000375 m  # New Didot Point\ndidot = dd = 1/72 pouce  # Didot Point\ncicero = 12 didot  # Cicero\npermille = _unicode__E2_80_B0 = 1/1000  # Per Mille\npermyriad = _unicode__E2_80_B1 = 1/10000  # Per Myriad\n_unicode__25 = procent = 1/100  # Procent\ngoogolplex = 10^(10^100)  # Googolplex\ngoogol = 10^100  # Googol\ncentillion = 1E303  # Centillion\nvigintillion = 1E63  # Vigintillion\nnovemdecillion = 1E60  # Novemdecillion\noctodecillion = 1E57  # Octodecillion\nseptendecillion = 1E54  # Septendecillion\nsexdecillion = 1E51  # Sexdecillion\nquindecillion = 1E48  # Quindecillion\nquattuordecillion = 1E45  # Quattuordecillion\ntredecillion = 1E42  # Tredecillion\nduodecillion = 1E39  # Duodecillion\nundecillion = 1E36  # Undecillion\ndecillion = 1E33  # Decillion\nnonillion = 1E30  # Nonillion\noctillion = 1E27  # Octillion\nseptillion = 1E24  # Septillion\nsextillion = 1E21  # Sextillion\nquintillion = 1E18  # Quintillion\nquadrillion = 1E15  # Quadrillion\ntrillion = 1E12  # Trillion\nbillion = 1E9  # Billion\nmillion = 1E6  # Million\nthousand = 1E3  # Thousand\nhundred = 1E2  # Hundred\nc = speed_of_light = 299792458*m*s^(-1)  # Speed of Light in Vacuum\nplanck_time = t_P ≈ 5.39121E-44*s  # Planck Time\nplanck_temperature = T_P ≈ 1.41679E32*K  # Planck Temperature\nplanck_mass = m_P ≈ 2.17645E-5*g  # Planck Mass\nplanck_length = l_P ≈ 1.61624E-35*m  # Planck Length\nplanck ≈ 6.6260693E-34*J*s  # Planck Constant\nplanck2pi = planck/(2*pi)  # Planck Constant over 2 pi\nnewtonian_constant = G ≈ 6.6742E-11*m^3*kg^(-1)*s^(-2)  # Newtonian Constant of Gravitation\nelectric_constant = ε_0 = 1/(4E-7*pi*299792458^2)*F*m^(-1)  # Electric Constant (Permittivity of Free Space)\nmagnetic_constant = μ_0 = 4E-7*pi*N*A^(-2)  # Magnetic Constant (Permeability of Free Space)\ncharacteristic_impedance = Z_0 = 4E-7*pi*299792458*ohm  # Characteristic Impedance of Vacuum\nbohr_magneton = μ_B ≈ 927.400949E-26*J*T^(-1)  # Borh Magneton\nconductance_quantum = G_0 ≈ 7.748091733E-5*S  # Conductance Quantum\nelementary_charge = e_charge ≈ 1.60217653E-19*C  # Elementary Charge\njosephson = K_J ≈ 483597.879E9*Hz*V^(-1)  # Josephson Constant\nmagnetic_flux_quantum = Φ_0 ≈ 2.06783372E-15*Wb  # Magnetic Flux Quantum\nnuclear_magneton = μ_N ≈ 5.05078343E-27*J*T^(-1)  # Nuclear Magneton\nklitzing = R_K ≈ 25812.807449*ohm  # von Klitzing Constant\nalpha_particle_mass = m_α ≈ 6.6446565E-24*g  # Alpha Particle Mass\nbohr_radius = a_o ≈ 0.5291772108E-10*m  # Bohr Radius\nclassical_electron_radius = r_e ≈ 2.817940325E-15*m  # Classical Electron Radius\ncompton_wavelength = λ_C ≈ 2.426310238E-12*m  # Compton Wavelength\nelectron_mass = m_e ≈ 9.1093826E-28*g  # Electron Mass\nhelion_mass = m_h ≈ 5.00641214E-24*g  # Helion Mass\nneutron_mass = m_n ≈ 1.67492728E-24*g  # Neutron Mass\nproton_mass = m_p ≈ 1.67262171E-24*g  # Proton Mass\nrydberg = R_∞ ≈ 10973731.568525*m^(-1)  # Rydberg Constant\ntau_mass = m_τ ≈ 3.16777E-24*g  # Tau Mass\natomic_mass = m_u ≈ 1.66053886E-24*g  # Atomic Mass Constant\navogadro = N_A ≈ 6.0221415E23*mol^(-1)  # Avogadro Constant\nboltzmann ≈ 1.3806505E-23*J*K^(-1)  # Boltzmann Constant\nfaraday ≈ 96485.3383*C*mol^(-1)  # Faraday Constant\nfirst_radiation = c_1 ≈ 3.74177138E-16*W*m^2  # First Radiation Constant\nideal_gas ≈ 8.314472*J*K^(-1)*mol^(-1)  # Ideal Gas Constant\nsecond_radiation = c_2 ≈ 1.4387752E-2*m*K  # Second Radiation Constant\ngolden = _unicode__CF_86 = (1+sqrt(5))/2  # Golden Ratio\nomega = lambertw(1)  # Omega Constant\npythagoras = sqrt(2)  # Pythagora's Constant (sqrt 2)\napery = zeta(3)  # Apery's Constant\nfalse = no = 0  # False\ntrue = yes = 1  # True\n";
});

})();
$__System.registerDynamic("@system-env", [], false, function() {
  return {
    "production": false,
    "browser": true,
    "node": false
  };
});

$__System.registerDynamic("3", ["@system-env"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var productionEnv = $__require('@system-env').production;
  var process = module.exports = {};
  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;
  function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
      queue = currentQueue.concat(queue);
    } else {
      queueIndex = -1;
    }
    if (queue.length) {
      drainQueue();
    }
  }
  function drainQueue() {
    if (draining) {
      return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while (len) {
      currentQueue = queue;
      queue = [];
      while (++queueIndex < len) {
        if (currentQueue) {
          currentQueue[queueIndex].run();
        }
      }
      queueIndex = -1;
      len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
  }
  process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
      for (var i = 1; i < arguments.length; i++) {
        args[i - 1] = arguments[i];
      }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
      setTimeout(drainQueue, 0);
    }
  };
  function Item(fun, array) {
    this.fun = fun;
    this.array = array;
  }
  Item.prototype.run = function() {
    this.fun.apply(null, this.array);
  };
  process.title = 'browser';
  process.browser = true;
  process.env = {NODE_ENV: productionEnv ? 'production' : 'development'};
  process.argv = [];
  process.version = '';
  process.versions = {};
  function noop() {}
  process.on = noop;
  process.addListener = noop;
  process.once = noop;
  process.off = noop;
  process.removeListener = noop;
  process.removeAllListeners = noop;
  process.emit = noop;
  process.binding = function(name) {
    throw new Error('process.binding is not supported');
  };
  process.cwd = function() {
    return '/';
  };
  process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
  };
  process.umask = function() {
    return 0;
  };
  return module.exports;
});

$__System.registerDynamic("28a", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  ;
  (function(globalScope) {
    'use strict';
    var EXP_LIMIT = 9e15,
        MAX_DIGITS = 1e9,
        NUMERALS = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%()*+,-./:;=?@[]^_`{|}~',
        LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',
        PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',
        Decimal = {
          precision: 20,
          rounding: 4,
          modulo: 1,
          toExpNeg: -7,
          toExpPos: 21,
          minE: -EXP_LIMIT,
          maxE: EXP_LIMIT,
          crypto: void 0
        },
        inexact,
        noConflict,
        quadrant,
        cryptoObject = typeof crypto != 'undefined' ? crypto : null,
        external = true,
        decimalError = '[DecimalError] ',
        invalidArgument = decimalError + 'Invalid argument: ',
        precisionLimitExceeded = decimalError + 'Precision limit exceeded',
        mathfloor = Math.floor,
        mathpow = Math.pow,
        isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,
        isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,
        isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,
        isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
        BASE = 1e7,
        LOG_BASE = 7,
        MAX_SAFE_INTEGER = 9007199254740991,
        LN10_PRECISION = LN10.length - 1,
        PI_PRECISION = PI.length - 1,
        P = {};
    P.absoluteValue = P.abs = function() {
      var x = new this.constructor(this);
      if (x.s < 0)
        x.s = 1;
      return finalise(x);
    };
    P.ceil = function() {
      return finalise(new this.constructor(this), this.e + 1, 2);
    };
    P.comparedTo = P.cmp = function(y) {
      var i,
          j,
          xdL,
          ydL,
          x = this,
          xd = x.d,
          yd = (y = new x.constructor(y)).d,
          xs = x.s,
          ys = y.s;
      if (!xd || !yd) {
        return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
      }
      if (!xd[0] || !yd[0])
        return xd[0] ? xs : yd[0] ? -ys : 0;
      if (xs !== ys)
        return xs;
      if (x.e !== y.e)
        return x.e > y.e ^ xs < 0 ? 1 : -1;
      xdL = xd.length;
      ydL = yd.length;
      for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
        if (xd[i] !== yd[i])
          return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;
      }
      return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
    };
    P.cosine = P.cos = function() {
      var pr,
          rm,
          x = this,
          Ctor = x.constructor;
      if (!x.d)
        return new Ctor(NaN);
      if (!x.d[0])
        return new Ctor(1);
      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
      Ctor.rounding = 1;
      x = cosine(Ctor, toLessThanHalfPi(Ctor, x));
      Ctor.precision = pr;
      Ctor.rounding = rm;
      return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
    };
    P.cubeRoot = P.cbrt = function() {
      var e,
          m,
          n,
          r,
          rep,
          s,
          sd,
          t,
          t3,
          t3plusx,
          x = this,
          Ctor = x.constructor;
      if (!x.isFinite() || x.isZero())
        return new Ctor(x);
      external = false;
      s = x.s * Math.pow(x.s * x, 1 / 3);
      if (!s || Math.abs(s) == 1 / 0) {
        n = digitsToString(x.d);
        e = x.e;
        if (s = (e - n.length + 1) % 3)
          n += (s == 1 || s == -2 ? '0' : '00');
        s = Math.pow(n, 1 / 3);
        e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));
        if (s == 1 / 0) {
          n = '5e' + e;
        } else {
          n = s.toExponential();
          n = n.slice(0, n.indexOf('e') + 1) + e;
        }
        r = new Ctor(n);
        r.s = x.s;
      } else {
        r = new Ctor(s.toString());
      }
      sd = (e = Ctor.precision) + 3;
      for (; ; ) {
        t = r;
        t3 = t.times(t).times(t);
        t3plusx = t3.plus(x);
        r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);
        if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
          n = n.slice(sd - 3, sd + 1);
          if (n == '9999' || !rep && n == '4999') {
            if (!rep) {
              finalise(t, e + 1, 0);
              if (t.times(t).times(t).eq(x)) {
                r = t;
                break;
              }
            }
            sd += 4;
            rep = 1;
          } else {
            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
              finalise(r, e + 1, 1);
              m = !r.times(r).times(r).eq(x);
            }
            break;
          }
        }
      }
      external = true;
      return finalise(r, e, Ctor.rounding, m);
    };
    P.decimalPlaces = P.dp = function() {
      var w,
          d = this.d,
          n = NaN;
      if (d) {
        w = d.length - 1;
        n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;
        w = d[w];
        if (w)
          for (; w % 10 == 0; w /= 10)
            n--;
        if (n < 0)
          n = 0;
      }
      return n;
    };
    P.dividedBy = P.div = function(y) {
      return divide(this, new this.constructor(y));
    };
    P.dividedToIntegerBy = P.divToInt = function(y) {
      var x = this,
          Ctor = x.constructor;
      return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
    };
    P.equals = P.eq = function(y) {
      return this.cmp(y) === 0;
    };
    P.floor = function() {
      return finalise(new this.constructor(this), this.e + 1, 3);
    };
    P.greaterThan = P.gt = function(y) {
      return this.cmp(y) > 0;
    };
    P.greaterThanOrEqualTo = P.gte = function(y) {
      var k = this.cmp(y);
      return k == 1 || k === 0;
    };
    P.hyperbolicCosine = P.cosh = function() {
      var k,
          n,
          pr,
          rm,
          len,
          x = this,
          Ctor = x.constructor,
          one = new Ctor(1);
      if (!x.isFinite())
        return new Ctor(x.s ? 1 / 0 : NaN);
      if (x.isZero())
        return one;
      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
      Ctor.rounding = 1;
      len = x.d.length;
      if (len < 32) {
        k = Math.ceil(len / 3);
        n = Math.pow(4, -k).toString();
      } else {
        k = 16;
        n = '2.3283064365386962890625e-10';
      }
      x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);
      var cosh2_x,
          i = k,
          d8 = new Ctor(8);
      for (; i--; ) {
        cosh2_x = x.times(x);
        x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
      }
      return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
    };
    P.hyperbolicSine = P.sinh = function() {
      var k,
          pr,
          rm,
          len,
          x = this,
          Ctor = x.constructor;
      if (!x.isFinite() || x.isZero())
        return new Ctor(x);
      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
      Ctor.rounding = 1;
      len = x.d.length;
      if (len < 3) {
        x = taylorSeries(Ctor, 2, x, x, true);
      } else {
        k = 1.4 * Math.sqrt(len);
        k = k > 16 ? 16 : k | 0;
        x = x.times(Math.pow(5, -k));
        x = taylorSeries(Ctor, 2, x, x, true);
        var sinh2_x,
            d5 = new Ctor(5),
            d16 = new Ctor(16),
            d20 = new Ctor(20);
        for (; k--; ) {
          sinh2_x = x.times(x);
          x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
        }
      }
      Ctor.precision = pr;
      Ctor.rounding = rm;
      return finalise(x, pr, rm, true);
    };
    P.hyperbolicTangent = P.tanh = function() {
      var pr,
          rm,
          x = this,
          Ctor = x.constructor;
      if (!x.isFinite())
        return new Ctor(x.s);
      if (x.isZero())
        return new Ctor(x);
      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + 7;
      Ctor.rounding = 1;
      return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
    };
    P.inverseCosine = P.acos = function() {
      var halfPi,
          x = this,
          Ctor = x.constructor,
          k = x.abs().cmp(1),
          pr = Ctor.precision,
          rm = Ctor.rounding;
      if (k !== -1) {
        return k === 0 ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0) : new Ctor(NaN);
      }
      if (x.isZero())
        return getPi(Ctor, pr + 4, rm).times(0.5);
      Ctor.precision = pr + 6;
      Ctor.rounding = 1;
      x = x.asin();
      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
      Ctor.precision = pr;
      Ctor.rounding = rm;
      return halfPi.minus(x);
    };
    P.inverseHyperbolicCosine = P.acosh = function() {
      var pr,
          rm,
          x = this,
          Ctor = x.constructor;
      if (x.lte(1))
        return new Ctor(x.eq(1) ? 0 : NaN);
      if (!x.isFinite())
        return new Ctor(x);
      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
      Ctor.rounding = 1;
      external = false;
      x = x.times(x).minus(1).sqrt().plus(x);
      external = true;
      Ctor.precision = pr;
      Ctor.rounding = rm;
      return x.ln();
    };
    P.inverseHyperbolicSine = P.asinh = function() {
      var pr,
          rm,
          x = this,
          Ctor = x.constructor;
      if (!x.isFinite() || x.isZero())
        return new Ctor(x);
      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
      Ctor.rounding = 1;
      external = false;
      x = x.times(x).plus(1).sqrt().plus(x);
      external = true;
      Ctor.precision = pr;
      Ctor.rounding = rm;
      return x.ln();
    };
    P.inverseHyperbolicTangent = P.atanh = function() {
      var pr,
          rm,
          wpr,
          xsd,
          x = this,
          Ctor = x.constructor;
      if (!x.isFinite())
        return new Ctor(NaN);
      if (x.e >= 0)
        return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);
      pr = Ctor.precision;
      rm = Ctor.rounding;
      xsd = x.sd();
      if (Math.max(xsd, pr) < 2 * -x.e - 1)
        return finalise(new Ctor(x), pr, rm, true);
      Ctor.precision = wpr = xsd - x.e;
      x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);
      Ctor.precision = pr + 4;
      Ctor.rounding = 1;
      x = x.ln();
      Ctor.precision = pr;
      Ctor.rounding = rm;
      return x.times(0.5);
    };
    P.inverseSine = P.asin = function() {
      var halfPi,
          k,
          pr,
          rm,
          x = this,
          Ctor = x.constructor;
      if (x.isZero())
        return new Ctor(x);
      k = x.abs().cmp(1);
      pr = Ctor.precision;
      rm = Ctor.rounding;
      if (k !== -1) {
        if (k === 0) {
          halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
          halfPi.s = x.s;
          return halfPi;
        }
        return new Ctor(NaN);
      }
      Ctor.precision = pr + 6;
      Ctor.rounding = 1;
      x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();
      Ctor.precision = pr;
      Ctor.rounding = rm;
      return x.times(2);
    };
    P.inverseTangent = P.atan = function() {
      var i,
          j,
          k,
          n,
          px,
          t,
          r,
          wpr,
          x2,
          x = this,
          Ctor = x.constructor,
          pr = Ctor.precision,
          rm = Ctor.rounding;
      if (!x.isFinite()) {
        if (!x.s)
          return new Ctor(NaN);
        if (pr + 4 <= PI_PRECISION) {
          r = getPi(Ctor, pr + 4, rm).times(0.5);
          r.s = x.s;
          return r;
        }
      } else if (x.isZero()) {
        return new Ctor(x);
      } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
        r = getPi(Ctor, pr + 4, rm).times(0.25);
        r.s = x.s;
        return r;
      }
      Ctor.precision = wpr = pr + 10;
      Ctor.rounding = 1;
      k = Math.min(28, wpr / LOG_BASE + 2 | 0);
      for (i = k; i; --i)
        x = x.div(x.times(x).plus(1).sqrt().plus(1));
      external = false;
      j = Math.ceil(wpr / LOG_BASE);
      n = 1;
      x2 = x.times(x);
      r = new Ctor(x);
      px = x;
      for (; i !== -1; ) {
        px = px.times(x2);
        t = r.minus(px.div(n += 2));
        px = px.times(x2);
        r = t.plus(px.div(n += 2));
        if (r.d[j] !== void 0)
          for (i = j; r.d[i] === t.d[i] && i--; )
            ;
      }
      if (k)
        r = r.times(2 << (k - 1));
      external = true;
      return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
    };
    P.isFinite = function() {
      return !!this.d;
    };
    P.isInteger = P.isInt = function() {
      return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
    };
    P.isNaN = function() {
      return !this.s;
    };
    P.isNegative = P.isNeg = function() {
      return this.s < 0;
    };
    P.isPositive = P.isPos = function() {
      return this.s > 0;
    };
    P.isZero = function() {
      return !!this.d && this.d[0] === 0;
    };
    P.lessThan = P.lt = function(y) {
      return this.cmp(y) < 0;
    };
    P.lessThanOrEqualTo = P.lte = function(y) {
      return this.cmp(y) < 1;
    };
    P.logarithm = P.log = function(base) {
      var isBase10,
          d,
          denominator,
          k,
          inf,
          num,
          sd,
          r,
          arg = this,
          Ctor = arg.constructor,
          pr = Ctor.precision,
          rm = Ctor.rounding,
          guard = 5;
      if (base == null) {
        base = new Ctor(10);
        isBase10 = true;
      } else {
        base = new Ctor(base);
        d = base.d;
        if (base.s < 0 || !d || !d[0] || base.eq(1))
          return new Ctor(NaN);
        isBase10 = base.eq(10);
      }
      d = arg.d;
      if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {
        return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);
      }
      if (isBase10) {
        if (d.length > 1) {
          inf = true;
        } else {
          for (k = d[0]; k % 10 === 0; )
            k /= 10;
          inf = k !== 1;
        }
      }
      external = false;
      sd = pr + guard;
      num = naturalLogarithm(arg, sd);
      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
      r = divide(num, denominator, sd, 1);
      if (checkRoundingDigits(r.d, k = pr, rm)) {
        do {
          sd += 10;
          num = naturalLogarithm(arg, sd);
          denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
          r = divide(num, denominator, sd, 1);
          if (!inf) {
            if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {
              r = finalise(r, pr + 1, 0);
            }
            break;
          }
        } while (checkRoundingDigits(r.d, k += 10, rm));
      }
      external = true;
      return finalise(r, pr, rm);
    };
    P.minus = P.sub = function(y) {
      var d,
          e,
          i,
          j,
          k,
          len,
          pr,
          rm,
          xd,
          xe,
          xLTy,
          yd,
          x = this,
          Ctor = x.constructor;
      y = new Ctor(y);
      if (!x.d || !y.d) {
        if (!x.s || !y.s)
          y = new Ctor(NaN);
        else if (x.d)
          y.s = -y.s;
        else
          y = new Ctor(y.d || x.s !== y.s ? x : NaN);
        return y;
      }
      if (x.s != y.s) {
        y.s = -y.s;
        return x.plus(y);
      }
      xd = x.d;
      yd = y.d;
      pr = Ctor.precision;
      rm = Ctor.rounding;
      if (!xd[0] || !yd[0]) {
        if (yd[0])
          y.s = -y.s;
        else if (xd[0])
          y = new Ctor(x);
        else
          return new Ctor(rm === 3 ? -0 : 0);
        return external ? finalise(y, pr, rm) : y;
      }
      e = mathfloor(y.e / LOG_BASE);
      xe = mathfloor(x.e / LOG_BASE);
      xd = xd.slice();
      k = xe - e;
      if (k) {
        xLTy = k < 0;
        if (xLTy) {
          d = xd;
          k = -k;
          len = yd.length;
        } else {
          d = yd;
          e = xe;
          len = xd.length;
        }
        i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;
        if (k > i) {
          k = i;
          d.length = 1;
        }
        d.reverse();
        for (i = k; i--; )
          d.push(0);
        d.reverse();
      } else {
        i = xd.length;
        len = yd.length;
        xLTy = i < len;
        if (xLTy)
          len = i;
        for (i = 0; i < len; i++) {
          if (xd[i] != yd[i]) {
            xLTy = xd[i] < yd[i];
            break;
          }
        }
        k = 0;
      }
      if (xLTy) {
        d = xd;
        xd = yd;
        yd = d;
        y.s = -y.s;
      }
      len = xd.length;
      for (i = yd.length - len; i > 0; --i)
        xd[len++] = 0;
      for (i = yd.length; i > k; ) {
        if (xd[--i] < yd[i]) {
          for (j = i; j && xd[--j] === 0; )
            xd[j] = BASE - 1;
          --xd[j];
          xd[i] += BASE;
        }
        xd[i] -= yd[i];
      }
      for (; xd[--len] === 0; )
        xd.pop();
      for (; xd[0] === 0; xd.shift())
        --e;
      if (!xd[0])
        return new Ctor(rm === 3 ? -0 : 0);
      y.d = xd;
      y.e = getBase10Exponent(xd, e);
      return external ? finalise(y, pr, rm) : y;
    };
    P.modulo = P.mod = function(y) {
      var q,
          x = this,
          Ctor = x.constructor;
      y = new Ctor(y);
      if (!x.d || !y.s || y.d && !y.d[0])
        return new Ctor(NaN);
      if (!y.d || x.d && !x.d[0]) {
        return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
      }
      external = false;
      if (Ctor.modulo == 9) {
        q = divide(x, y.abs(), 0, 3, 1);
        q.s *= y.s;
      } else {
        q = divide(x, y, 0, Ctor.modulo, 1);
      }
      q = q.times(y);
      external = true;
      return x.minus(q);
    };
    P.naturalExponential = P.exp = function() {
      return naturalExponential(this);
    };
    P.naturalLogarithm = P.ln = function() {
      return naturalLogarithm(this);
    };
    P.negated = P.neg = function() {
      var x = new this.constructor(this);
      x.s = -x.s;
      return finalise(x);
    };
    P.plus = P.add = function(y) {
      var carry,
          d,
          e,
          i,
          k,
          len,
          pr,
          rm,
          xd,
          yd,
          x = this,
          Ctor = x.constructor;
      y = new Ctor(y);
      if (!x.d || !y.d) {
        if (!x.s || !y.s)
          y = new Ctor(NaN);
        else if (!x.d)
          y = new Ctor(y.d || x.s === y.s ? x : NaN);
        return y;
      }
      if (x.s != y.s) {
        y.s = -y.s;
        return x.minus(y);
      }
      xd = x.d;
      yd = y.d;
      pr = Ctor.precision;
      rm = Ctor.rounding;
      if (!xd[0] || !yd[0]) {
        if (!yd[0])
          y = new Ctor(x);
        return external ? finalise(y, pr, rm) : y;
      }
      k = mathfloor(x.e / LOG_BASE);
      e = mathfloor(y.e / LOG_BASE);
      xd = xd.slice();
      i = k - e;
      if (i) {
        if (i < 0) {
          d = xd;
          i = -i;
          len = yd.length;
        } else {
          d = yd;
          e = k;
          len = xd.length;
        }
        k = Math.ceil(pr / LOG_BASE);
        len = k > len ? k + 1 : len + 1;
        if (i > len) {
          i = len;
          d.length = 1;
        }
        d.reverse();
        for (; i--; )
          d.push(0);
        d.reverse();
      }
      len = xd.length;
      i = yd.length;
      if (len - i < 0) {
        i = len;
        d = yd;
        yd = xd;
        xd = d;
      }
      for (carry = 0; i; ) {
        carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
        xd[i] %= BASE;
      }
      if (carry) {
        xd.unshift(carry);
        ++e;
      }
      for (len = xd.length; xd[--len] == 0; )
        xd.pop();
      y.d = xd;
      y.e = getBase10Exponent(xd, e);
      return external ? finalise(y, pr, rm) : y;
    };
    P.precision = P.sd = function(z) {
      var k,
          x = this;
      if (z !== void 0 && z !== !!z && z !== 1 && z !== 0)
        throw Error(invalidArgument + z);
      if (x.d) {
        k = getPrecision(x.d);
        if (z && x.e + 1 > k)
          k = x.e + 1;
      } else {
        k = NaN;
      }
      return k;
    };
    P.round = function() {
      var x = this,
          Ctor = x.constructor;
      return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
    };
    P.sine = P.sin = function() {
      var pr,
          rm,
          x = this,
          Ctor = x.constructor;
      if (!x.isFinite())
        return new Ctor(NaN);
      if (x.isZero())
        return new Ctor(x);
      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
      Ctor.rounding = 1;
      x = sine(Ctor, toLessThanHalfPi(Ctor, x));
      Ctor.precision = pr;
      Ctor.rounding = rm;
      return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
    };
    P.squareRoot = P.sqrt = function() {
      var m,
          n,
          sd,
          r,
          rep,
          t,
          x = this,
          d = x.d,
          e = x.e,
          s = x.s,
          Ctor = x.constructor;
      if (s !== 1 || !d || !d[0]) {
        return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
      }
      external = false;
      s = Math.sqrt(+x);
      if (s == 0 || s == 1 / 0) {
        n = digitsToString(d);
        if ((n.length + e) % 2 == 0)
          n += '0';
        s = Math.sqrt(n);
        e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);
        if (s == 1 / 0) {
          n = '1e' + e;
        } else {
          n = s.toExponential();
          n = n.slice(0, n.indexOf('e') + 1) + e;
        }
        r = new Ctor(n);
      } else {
        r = new Ctor(s.toString());
      }
      sd = (e = Ctor.precision) + 3;
      for (; ; ) {
        t = r;
        r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);
        if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
          n = n.slice(sd - 3, sd + 1);
          if (n == '9999' || !rep && n == '4999') {
            if (!rep) {
              finalise(t, e + 1, 0);
              if (t.times(t).eq(x)) {
                r = t;
                break;
              }
            }
            sd += 4;
            rep = 1;
          } else {
            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
              finalise(r, e + 1, 1);
              m = !r.times(r).eq(x);
            }
            break;
          }
        }
      }
      external = true;
      return finalise(r, e, Ctor.rounding, m);
    };
    P.tangent = P.tan = function() {
      var pr,
          rm,
          x = this,
          Ctor = x.constructor;
      if (!x.isFinite())
        return new Ctor(NaN);
      if (x.isZero())
        return new Ctor(x);
      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + 10;
      Ctor.rounding = 1;
      x = x.sin();
      x.s = 1;
      x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);
      Ctor.precision = pr;
      Ctor.rounding = rm;
      return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
    };
    P.times = P.mul = function(y) {
      var carry,
          e,
          i,
          k,
          r,
          rL,
          t,
          xdL,
          ydL,
          x = this,
          Ctor = x.constructor,
          xd = x.d,
          yd = (y = new Ctor(y)).d;
      y.s *= x.s;
      if (!xd || !xd[0] || !yd || !yd[0]) {
        return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd ? NaN : !xd || !yd ? y.s / 0 : y.s * 0);
      }
      e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
      xdL = xd.length;
      ydL = yd.length;
      if (xdL < ydL) {
        r = xd;
        xd = yd;
        yd = r;
        rL = xdL;
        xdL = ydL;
        ydL = rL;
      }
      r = [];
      rL = xdL + ydL;
      for (i = rL; i--; )
        r.push(0);
      for (i = ydL; --i >= 0; ) {
        carry = 0;
        for (k = xdL + i; k > i; ) {
          t = r[k] + yd[i] * xd[k - i - 1] + carry;
          r[k--] = t % BASE | 0;
          carry = t / BASE | 0;
        }
        r[k] = (r[k] + carry) % BASE | 0;
      }
      for (; !r[--rL]; )
        r.pop();
      if (carry)
        ++e;
      else
        r.shift();
      for (i = r.length; !r[--i]; )
        r.pop();
      y.d = r;
      y.e = getBase10Exponent(r, e);
      return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
    };
    P.toBinary = function(sd, rm) {
      return toStringBinary(this, 2, sd, rm);
    };
    P.toDecimalPlaces = P.toDP = function(dp, rm) {
      var x = this,
          Ctor = x.constructor;
      x = new Ctor(x);
      if (dp === void 0)
        return x;
      checkInt32(dp, 0, MAX_DIGITS);
      if (rm === void 0)
        rm = Ctor.rounding;
      else
        checkInt32(rm, 0, 8);
      return finalise(x, dp + x.e + 1, rm);
    };
    P.toExponential = function(dp, rm) {
      var str,
          x = this,
          Ctor = x.constructor;
      if (dp === void 0) {
        str = finiteToString(x, true);
      } else {
        checkInt32(dp, 0, MAX_DIGITS);
        if (rm === void 0)
          rm = Ctor.rounding;
        else
          checkInt32(rm, 0, 8);
        x = finalise(new Ctor(x), dp + 1, rm);
        str = finiteToString(x, true, dp + 1);
      }
      return x.isNeg() && !x.isZero() ? '-' + str : str;
    };
    P.toFixed = function(dp, rm) {
      var str,
          y,
          x = this,
          Ctor = x.constructor;
      if (dp === void 0) {
        str = finiteToString(x);
      } else {
        checkInt32(dp, 0, MAX_DIGITS);
        if (rm === void 0)
          rm = Ctor.rounding;
        else
          checkInt32(rm, 0, 8);
        y = finalise(new Ctor(x), dp + x.e + 1, rm);
        str = finiteToString(y, false, dp + y.e + 1);
      }
      return x.isNeg() && !x.isZero() ? '-' + str : str;
    };
    P.toFraction = function(maxD) {
      var d,
          d0,
          d1,
          d2,
          e,
          k,
          n,
          n0,
          n1,
          pr,
          q,
          r,
          x = this,
          xd = x.d,
          Ctor = x.constructor;
      if (!xd)
        return new Ctor(x);
      n1 = d0 = new Ctor(1);
      d1 = n0 = new Ctor(0);
      d = new Ctor(d1);
      e = d.e = getPrecision(xd) - x.e - 1;
      k = e % LOG_BASE;
      d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);
      if (maxD == null) {
        maxD = e > 0 ? d : n1;
      } else {
        n = new Ctor(maxD);
        if (!n.isInt() || n.lt(n1))
          throw Error(invalidArgument + n);
        maxD = n.gt(d) ? (e > 0 ? d : n1) : n;
      }
      external = false;
      n = new Ctor(digitsToString(xd));
      pr = Ctor.precision;
      Ctor.precision = e = xd.length * LOG_BASE * 2;
      for (; ; ) {
        q = divide(n, d, 0, 1, 1);
        d2 = d0.plus(q.times(d1));
        if (d2.cmp(maxD) == 1)
          break;
        d0 = d1;
        d1 = d2;
        d2 = n1;
        n1 = n0.plus(q.times(d2));
        n0 = d2;
        d2 = d;
        d = n.minus(q.times(d2));
        n = d2;
      }
      d2 = divide(maxD.minus(d0), d1, 0, 1, 1);
      n0 = n0.plus(d2.times(n1));
      d0 = d0.plus(d2.times(d1));
      n0.s = n1.s = x.s;
      r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];
      Ctor.precision = pr;
      external = true;
      return r;
    };
    P.toHexadecimal = P.toHex = function(sd, rm) {
      return toStringBinary(this, 16, sd, rm);
    };
    P.toJSON = function() {
      var arr,
          e,
          i,
          k,
          len,
          n,
          r,
          str,
          x = this,
          isNeg = x.s < 0;
      if (!x.d)
        return NUMERALS.charAt(x.s ? isNeg ? 82 : 83 : 84);
      e = x.e;
      if (x.d.length === 1 && e < 4 && e >= 0) {
        n = x.d[0];
        if (n < 2857) {
          if (n < 41)
            return NUMERALS.charAt(isNeg ? n + 41 : n);
          n -= 41;
          if (isNeg)
            n += 2816;
          k = n / 88 | 0;
          return NUMERALS.charAt(k) + NUMERALS.charAt(n - k * 88);
        }
      }
      str = digitsToString(x.d);
      r = '';
      if (!isNeg && e <= 8 && e >= -7) {
        k = 64 + e + 7;
      } else if (isNeg && e <= 4 && e >= -3) {
        k = 64 + 16 + e + 3;
      } else if (str.length === e + 1) {
        k = 32 * isNeg;
      } else {
        k = 32 * isNeg + 16 * (e < 0);
        e = Math.abs(e);
        if (e < 88) {
          k += 1;
          r = NUMERALS.charAt(e);
        } else if (e < 7744) {
          k += 2;
          n = e / 88 | 0;
          r = NUMERALS.charAt(n) + NUMERALS.charAt(e - n * 88);
        } else {
          arr = convertBase(String(e), 10, 88);
          len = arr.length;
          k += len;
          for (i = 0; i < len; i++)
            r += NUMERALS.charAt(arr[i]);
        }
      }
      r = NUMERALS.charAt(k) + r;
      arr = convertBase(str, 10, 88);
      len = arr.length;
      for (i = 0; i < len; i++)
        r += NUMERALS.charAt(arr[i]);
      return r;
    };
    P.toNearest = function(y, rm) {
      var x = this,
          Ctor = x.constructor;
      x = new Ctor(x);
      if (y == null) {
        if (!x.d)
          return x;
        y = new Ctor(1);
        rm = Ctor.rounding;
      } else {
        y = new Ctor(y);
        if (rm !== void 0)
          checkInt32(rm, 0, 8);
        if (!x.d)
          return y.s ? x : y;
        if (!y.d) {
          if (y.s)
            y.s = x.s;
          return y;
        }
      }
      if (y.d[0]) {
        external = false;
        if (rm < 4)
          rm = [4, 5, 7, 8][rm];
        x = divide(x, y, 0, rm, 1).times(y);
        external = true;
        finalise(x);
      } else {
        y.s = x.s;
        x = y;
      }
      return x;
    };
    P.toNumber = function() {
      return +this;
    };
    P.toOctal = function(sd, rm) {
      return toStringBinary(this, 8, sd, rm);
    };
    P.toPower = P.pow = function(y) {
      var e,
          k,
          pr,
          r,
          rm,
          sign,
          yIsInt,
          x = this,
          Ctor = x.constructor,
          yn = +(y = new Ctor(y));
      if (!x.d || !y.d || !x.d[0] || !y.d[0])
        return new Ctor(mathpow(+x, yn));
      x = new Ctor(x);
      if (x.eq(1))
        return x;
      pr = Ctor.precision;
      rm = Ctor.rounding;
      if (y.eq(1))
        return finalise(x, pr, rm);
      e = mathfloor(y.e / LOG_BASE);
      k = y.d.length - 1;
      yIsInt = e >= k;
      sign = x.s;
      if (!yIsInt) {
        if (sign < 0)
          return new Ctor(NaN);
      } else if ((k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
        r = intPow(Ctor, x, k, pr);
        return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
      }
      sign = sign < 0 && y.d[Math.max(e, k)] & 1 ? -1 : 1;
      k = mathpow(+x, yn);
      e = k == 0 || !isFinite(k) ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1)) : new Ctor(k + '').e;
      if (e > Ctor.maxE + 1 || e < Ctor.minE - 1)
        return new Ctor(e > 0 ? sign / 0 : 0);
      external = false;
      Ctor.rounding = x.s = 1;
      k = Math.min(12, (e + '').length);
      r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);
      r = finalise(r, pr + 5, 1);
      if (checkRoundingDigits(r.d, pr, rm)) {
        e = pr + 10;
        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);
        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {
          r = finalise(r, pr + 1, 0);
        }
      }
      r.s = sign;
      external = true;
      Ctor.rounding = rm;
      return finalise(r, pr, rm);
    };
    P.toPrecision = function(sd, rm) {
      var str,
          x = this,
          Ctor = x.constructor;
      if (sd === void 0) {
        str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
      } else {
        checkInt32(sd, 1, MAX_DIGITS);
        if (rm === void 0)
          rm = Ctor.rounding;
        else
          checkInt32(rm, 0, 8);
        x = finalise(new Ctor(x), sd, rm);
        str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
      }
      return x.isNeg() && !x.isZero() ? '-' + str : str;
    };
    P.toSignificantDigits = P.toSD = function(sd, rm) {
      var x = this,
          Ctor = x.constructor;
      if (sd === void 0) {
        sd = Ctor.precision;
        rm = Ctor.rounding;
      } else {
        checkInt32(sd, 1, MAX_DIGITS);
        if (rm === void 0)
          rm = Ctor.rounding;
        else
          checkInt32(rm, 0, 8);
      }
      return finalise(new Ctor(x), sd, rm);
    };
    P.toString = function() {
      var x = this,
          Ctor = x.constructor,
          str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
      return x.isNeg() && !x.isZero() ? '-' + str : str;
    };
    P.truncated = P.trunc = function() {
      return finalise(new this.constructor(this), this.e + 1, 1);
    };
    P.valueOf = function() {
      var x = this,
          Ctor = x.constructor,
          str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
      return x.isNeg() ? '-' + str : str;
    };
    function digitsToString(d) {
      var i,
          k,
          ws,
          indexOfLastWord = d.length - 1,
          str = '',
          w = d[0];
      if (indexOfLastWord > 0) {
        str += w;
        for (i = 1; i < indexOfLastWord; i++) {
          ws = d[i] + '';
          k = LOG_BASE - ws.length;
          if (k)
            str += getZeroString(k);
          str += ws;
        }
        w = d[i];
        ws = w + '';
        k = LOG_BASE - ws.length;
        if (k)
          str += getZeroString(k);
      } else if (w === 0) {
        return '0';
      }
      for (; w % 10 === 0; )
        w /= 10;
      return str + w;
    }
    function checkInt32(i, min, max) {
      if (i !== ~~i || i < min || i > max) {
        throw Error(invalidArgument + i);
      }
    }
    function checkRoundingDigits(d, i, rm, repeating) {
      var di,
          k,
          r,
          rd;
      for (k = d[0]; k >= 10; k /= 10)
        --i;
      if (--i < 0) {
        i += LOG_BASE;
        di = 0;
      } else {
        di = Math.ceil((i + 1) / LOG_BASE);
        i %= LOG_BASE;
      }
      k = mathpow(10, LOG_BASE - i);
      rd = d[di] % k | 0;
      if (repeating == null) {
        if (i < 3) {
          if (i == 0)
            rd = rd / 100 | 0;
          else if (i == 1)
            rd = rd / 10 | 0;
          r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;
        } else {
          r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 || (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
        }
      } else {
        if (i < 4) {
          if (i == 0)
            rd = rd / 1000 | 0;
          else if (i == 1)
            rd = rd / 100 | 0;
          else if (i == 2)
            rd = rd / 10 | 0;
          r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
        } else {
          r = ((repeating || rm < 4) && rd + 1 == k || (!repeating && rm > 3) && rd + 1 == k / 2) && (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;
        }
      }
      return r;
    }
    function convertBase(str, baseIn, baseOut) {
      var j,
          arr = [0],
          arrL,
          i = 0,
          strL = str.length;
      for (; i < strL; ) {
        for (arrL = arr.length; arrL--; )
          arr[arrL] *= baseIn;
        arr[0] += NUMERALS.indexOf(str.charAt(i++));
        for (j = 0; j < arr.length; j++) {
          if (arr[j] > baseOut - 1) {
            if (arr[j + 1] === void 0)
              arr[j + 1] = 0;
            arr[j + 1] += arr[j] / baseOut | 0;
            arr[j] %= baseOut;
          }
        }
      }
      return arr.reverse();
    }
    function cosine(Ctor, x) {
      var k,
          y,
          len = x.d.length;
      if (len < 32) {
        k = Math.ceil(len / 3);
        y = Math.pow(4, -k).toString();
      } else {
        k = 16;
        y = '2.3283064365386962890625e-10';
      }
      Ctor.precision += k;
      x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));
      for (var i = k; i--; ) {
        var cos2x = x.times(x);
        x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
      }
      Ctor.precision -= k;
      return x;
    }
    var divide = (function() {
      function multiplyInteger(x, k, base) {
        var temp,
            carry = 0,
            i = x.length;
        for (x = x.slice(); i--; ) {
          temp = x[i] * k + carry;
          x[i] = temp % base | 0;
          carry = temp / base | 0;
        }
        if (carry)
          x.unshift(carry);
        return x;
      }
      function compare(a, b, aL, bL) {
        var i,
            r;
        if (aL != bL) {
          r = aL > bL ? 1 : -1;
        } else {
          for (i = r = 0; i < aL; i++) {
            if (a[i] != b[i]) {
              r = a[i] > b[i] ? 1 : -1;
              break;
            }
          }
        }
        return r;
      }
      function subtract(a, b, aL, base) {
        var i = 0;
        for (; aL--; ) {
          a[aL] -= i;
          i = a[aL] < b[aL] ? 1 : 0;
          a[aL] = i * base + a[aL] - b[aL];
        }
        for (; !a[0] && a.length > 1; )
          a.shift();
      }
      return function(x, y, pr, rm, dp, base) {
        var cmp,
            e,
            i,
            k,
            logBase,
            more,
            prod,
            prodL,
            q,
            qd,
            rem,
            remL,
            rem0,
            sd,
            t,
            xi,
            xL,
            yd0,
            yL,
            yz,
            Ctor = x.constructor,
            sign = x.s == y.s ? 1 : -1,
            xd = x.d,
            yd = y.d;
        if (!xd || !xd[0] || !yd || !yd[0]) {
          return new Ctor(!x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN : xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);
        }
        if (base) {
          logBase = 1;
          e = x.e - y.e;
        } else {
          base = BASE;
          logBase = LOG_BASE;
          e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
        }
        yL = yd.length;
        xL = xd.length;
        q = new Ctor(sign);
        qd = q.d = [];
        for (i = 0; yd[i] == (xd[i] || 0); i++)
          ;
        if (yd[i] > (xd[i] || 0))
          e--;
        if (pr == null) {
          sd = pr = Ctor.precision;
          rm = Ctor.rounding;
        } else if (dp) {
          sd = pr + (x.e - y.e) + 1;
        } else {
          sd = pr;
        }
        if (sd < 0) {
          qd.push(1);
          more = true;
        } else {
          sd = sd / logBase + 2 | 0;
          i = 0;
          if (yL == 1) {
            k = 0;
            yd = yd[0];
            sd++;
            for (; (i < xL || k) && sd--; i++) {
              t = k * base + (xd[i] || 0);
              qd[i] = t / yd | 0;
              k = t % yd | 0;
            }
            more = k || i < xL;
          } else {
            k = base / (yd[0] + 1) | 0;
            if (k > 1) {
              yd = multiplyInteger(yd, k, base);
              xd = multiplyInteger(xd, k, base);
              yL = yd.length;
              xL = xd.length;
            }
            xi = yL;
            rem = xd.slice(0, yL);
            remL = rem.length;
            for (; remL < yL; )
              rem[remL++] = 0;
            yz = yd.slice();
            yz.unshift(0);
            yd0 = yd[0];
            if (yd[1] >= base / 2)
              ++yd0;
            do {
              k = 0;
              cmp = compare(yd, rem, yL, remL);
              if (cmp < 0) {
                rem0 = rem[0];
                if (yL != remL)
                  rem0 = rem0 * base + (rem[1] || 0);
                k = rem0 / yd0 | 0;
                if (k > 1) {
                  if (k >= base)
                    k = base - 1;
                  prod = multiplyInteger(yd, k, base);
                  prodL = prod.length;
                  remL = rem.length;
                  cmp = compare(prod, rem, prodL, remL);
                  if (cmp == 1) {
                    k--;
                    subtract(prod, yL < prodL ? yz : yd, prodL, base);
                  }
                } else {
                  if (k == 0)
                    cmp = k = 1;
                  prod = yd.slice();
                }
                prodL = prod.length;
                if (prodL < remL)
                  prod.unshift(0);
                subtract(rem, prod, remL, base);
                if (cmp == -1) {
                  remL = rem.length;
                  cmp = compare(yd, rem, yL, remL);
                  if (cmp < 1) {
                    k++;
                    subtract(rem, yL < remL ? yz : yd, remL, base);
                  }
                }
                remL = rem.length;
              } else if (cmp === 0) {
                k++;
                rem = [0];
              }
              qd[i++] = k;
              if (cmp && rem[0]) {
                rem[remL++] = xd[xi] || 0;
              } else {
                rem = [xd[xi]];
                remL = 1;
              }
            } while ((xi++ < xL || rem[0] !== void 0) && sd--);
            more = rem[0] !== void 0;
          }
          if (!qd[0])
            qd.shift();
        }
        if (logBase == 1) {
          q.e = e;
          inexact = more;
        } else {
          for (i = 1, k = qd[0]; k >= 10; k /= 10)
            i++;
          q.e = i + e * logBase - 1;
          finalise(q, dp ? pr + q.e + 1 : pr, rm, more);
        }
        return q;
      };
    })();
    function finalise(x, sd, rm, isTruncated) {
      var digits,
          i,
          j,
          k,
          rd,
          roundUp,
          w,
          xd,
          xdi,
          Ctor = x.constructor;
      out: if (sd != null) {
        xd = x.d;
        if (!xd)
          return x;
        for (digits = 1, k = xd[0]; k >= 10; k /= 10)
          digits++;
        i = sd - digits;
        if (i < 0) {
          i += LOG_BASE;
          j = sd;
          w = xd[xdi = 0];
          rd = w / mathpow(10, digits - j - 1) % 10 | 0;
        } else {
          xdi = Math.ceil((i + 1) / LOG_BASE);
          k = xd.length;
          if (xdi >= k) {
            if (isTruncated) {
              for (; k++ <= xdi; )
                xd.push(0);
              w = rd = 0;
              digits = 1;
              i %= LOG_BASE;
              j = i - LOG_BASE + 1;
            } else {
              break out;
            }
          } else {
            w = k = xd[xdi];
            for (digits = 1; k >= 10; k /= 10)
              digits++;
            i %= LOG_BASE;
            j = i - LOG_BASE + digits;
            rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
          }
        }
        isTruncated = isTruncated || sd < 0 || xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));
        roundUp = rm < 4 ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 && ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 || rm == (x.s < 0 ? 8 : 7));
        if (sd < 1 || !xd[0]) {
          xd.length = 0;
          if (roundUp) {
            sd -= x.e + 1;
            xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
            x.e = -sd || 0;
          } else {
            xd[0] = x.e = 0;
          }
          return x;
        }
        if (i == 0) {
          xd.length = xdi;
          k = 1;
          xdi--;
        } else {
          xd.length = xdi + 1;
          k = mathpow(10, LOG_BASE - i);
          xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
        }
        if (roundUp) {
          for (; ; ) {
            if (xdi == 0) {
              for (i = 1, j = xd[0]; j >= 10; j /= 10)
                i++;
              j = xd[0] += k;
              for (k = 1; j >= 10; j /= 10)
                k++;
              if (i != k) {
                x.e++;
                if (xd[0] == BASE)
                  xd[0] = 1;
              }
              break;
            } else {
              xd[xdi] += k;
              if (xd[xdi] != BASE)
                break;
              xd[xdi--] = 0;
              k = 1;
            }
          }
        }
        for (i = xd.length; xd[--i] === 0; )
          xd.pop();
      }
      if (external) {
        if (x.e > Ctor.maxE) {
          x.d = null;
          x.e = NaN;
        } else if (x.e < Ctor.minE) {
          x.e = 0;
          x.d = [0];
        }
      }
      return x;
    }
    function finiteToString(x, isExp, sd) {
      if (!x.isFinite())
        return nonFiniteToString(x);
      var k,
          e = x.e,
          str = digitsToString(x.d),
          len = str.length;
      if (isExp) {
        if (sd && (k = sd - len) > 0) {
          str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);
        } else if (len > 1) {
          str = str.charAt(0) + '.' + str.slice(1);
        }
        str = str + (x.e < 0 ? 'e' : 'e+') + x.e;
      } else if (e < 0) {
        str = '0.' + getZeroString(-e - 1) + str;
        if (sd && (k = sd - len) > 0)
          str += getZeroString(k);
      } else if (e >= len) {
        str += getZeroString(e + 1 - len);
        if (sd && (k = sd - e - 1) > 0)
          str = str + '.' + getZeroString(k);
      } else {
        if ((k = e + 1) < len)
          str = str.slice(0, k) + '.' + str.slice(k);
        if (sd && (k = sd - len) > 0) {
          if (e + 1 === len)
            str += '.';
          str += getZeroString(k);
        }
      }
      return str;
    }
    function getBase10Exponent(digits, e) {
      for (var i = 1,
          w = digits[0]; w >= 10; w /= 10)
        i++;
      return i + e * LOG_BASE - 1;
    }
    function getLn10(Ctor, sd, pr) {
      if (sd > LN10_PRECISION) {
        external = true;
        if (pr)
          Ctor.precision = pr;
        throw Error(precisionLimitExceeded);
      }
      return finalise(new Ctor(LN10), sd, 1, true);
    }
    function getPi(Ctor, sd, rm) {
      if (sd > PI_PRECISION)
        throw Error(precisionLimitExceeded);
      return finalise(new Ctor(PI), sd, rm, true);
    }
    function getPrecision(digits) {
      var w = digits.length - 1,
          len = w * LOG_BASE + 1;
      w = digits[w];
      if (w) {
        for (; w % 10 == 0; w /= 10)
          len--;
        for (w = digits[0]; w >= 10; w /= 10)
          len++;
      }
      return len;
    }
    function getZeroString(k) {
      var zs = '';
      for (; k--; )
        zs += '0';
      return zs;
    }
    function intPow(Ctor, x, n, pr) {
      var isTruncated,
          r = new Ctor(1),
          k = Math.ceil(pr / LOG_BASE + 4);
      external = false;
      for (; ; ) {
        if (n % 2) {
          r = r.times(x);
          if (truncate(r.d, k))
            isTruncated = true;
        }
        n = mathfloor(n / 2);
        if (n === 0) {
          n = r.d.length - 1;
          if (isTruncated && r.d[n] === 0)
            ++r.d[n];
          break;
        }
        x = x.times(x);
        truncate(x.d, k);
      }
      external = true;
      return r;
    }
    function isOdd(n) {
      return n.d[n.d.length - 1] & 1;
    }
    function maxOrMin(Ctor, args, ltgt) {
      var y,
          x = new Ctor(args[0]),
          i = 0;
      for (; ++i < args.length; ) {
        y = new Ctor(args[i]);
        if (!y.s) {
          x = y;
          break;
        } else if (x[ltgt](y)) {
          x = y;
        }
      }
      return x;
    }
    function naturalExponential(x, sd) {
      var denominator,
          guard,
          j,
          pow,
          sum,
          t,
          wpr,
          rep = 0,
          i = 0,
          k = 0,
          Ctor = x.constructor,
          rm = Ctor.rounding,
          pr = Ctor.precision;
      if (!x.d || !x.d[0] || x.e > 17) {
        return new Ctor(x.d ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0 : x.s ? x.s < 0 ? 0 : x : 0 / 0);
      }
      if (sd == null) {
        external = false;
        wpr = pr;
      } else {
        wpr = sd;
      }
      t = new Ctor(0.03125);
      while (x.e > -2) {
        x = x.times(t);
        k += 5;
      }
      guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
      wpr += guard;
      denominator = pow = sum = new Ctor(1);
      Ctor.precision = wpr;
      for (; ; ) {
        pow = finalise(pow.times(x), wpr, 1);
        denominator = denominator.times(++i);
        t = sum.plus(divide(pow, denominator, wpr, 1));
        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
          j = k;
          while (j--)
            sum = finalise(sum.times(sum), wpr, 1);
          if (sd == null) {
            if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
              Ctor.precision = wpr += 10;
              denominator = pow = t = new Ctor(1);
              i = 0;
              rep++;
            } else {
              return finalise(sum, Ctor.precision = pr, rm, external = true);
            }
          } else {
            Ctor.precision = pr;
            return sum;
          }
        }
        sum = t;
      }
    }
    function naturalLogarithm(y, sd) {
      var c,
          c0,
          denominator,
          e,
          numerator,
          rep,
          sum,
          t,
          wpr,
          x1,
          x2,
          n = 1,
          guard = 10,
          x = y,
          xd = x.d,
          Ctor = x.constructor,
          rm = Ctor.rounding,
          pr = Ctor.precision;
      if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {
        return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
      }
      if (sd == null) {
        external = false;
        wpr = pr;
      } else {
        wpr = sd;
      }
      Ctor.precision = wpr += guard;
      c = digitsToString(xd);
      c0 = c.charAt(0);
      if (Math.abs(e = x.e) < 1.5e15) {
        while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
          x = x.times(y);
          c = digitsToString(x.d);
          c0 = c.charAt(0);
          n++;
        }
        e = x.e;
        if (c0 > 1) {
          x = new Ctor('0.' + c);
          e++;
        } else {
          x = new Ctor(c0 + '.' + c.slice(1));
        }
      } else {
        t = getLn10(Ctor, wpr + 2, pr).times(e + '');
        x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);
        Ctor.precision = pr;
        return sd == null ? finalise(x, pr, rm, external = true) : x;
      }
      x1 = x;
      sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);
      x2 = finalise(x.times(x), wpr, 1);
      denominator = 3;
      for (; ; ) {
        numerator = finalise(numerator.times(x2), wpr, 1);
        t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));
        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
          sum = sum.times(2);
          if (e !== 0)
            sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));
          sum = divide(sum, new Ctor(n), wpr, 1);
          if (sd == null) {
            if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
              Ctor.precision = wpr += guard;
              t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);
              x2 = finalise(x.times(x), wpr, 1);
              denominator = rep = 1;
            } else {
              return finalise(sum, Ctor.precision = pr, rm, external = true);
            }
          } else {
            Ctor.precision = pr;
            return sum;
          }
        }
        sum = t;
        denominator += 2;
      }
    }
    function nonFiniteToString(x) {
      return String(x.s * x.s / 0);
    }
    function parseDecimal(x, str) {
      var e,
          i,
          len;
      if ((e = str.indexOf('.')) > -1)
        str = str.replace('.', '');
      if ((i = str.search(/e/i)) > 0) {
        if (e < 0)
          e = i;
        e += +str.slice(i + 1);
        str = str.substring(0, i);
      } else if (e < 0) {
        e = str.length;
      }
      for (i = 0; str.charCodeAt(i) === 48; i++)
        ;
      for (len = str.length; str.charCodeAt(len - 1) === 48; --len)
        ;
      str = str.slice(i, len);
      if (str) {
        len -= i;
        x.e = e = e - i - 1;
        x.d = [];
        i = (e + 1) % LOG_BASE;
        if (e < 0)
          i += LOG_BASE;
        if (i < len) {
          if (i)
            x.d.push(+str.slice(0, i));
          for (len -= LOG_BASE; i < len; )
            x.d.push(+str.slice(i, i += LOG_BASE));
          str = str.slice(i);
          i = LOG_BASE - str.length;
        } else {
          i -= len;
        }
        for (; i--; )
          str += '0';
        x.d.push(+str);
        if (external) {
          if (x.e > x.constructor.maxE) {
            x.d = null;
            x.e = NaN;
          } else if (x.e < x.constructor.minE) {
            x.e = 0;
            x.d = [0];
          }
        }
      } else {
        x.e = 0;
        x.d = [0];
      }
      return x;
    }
    function parseOther(x, str) {
      var base,
          Ctor,
          divisor,
          i,
          isFloat,
          len,
          p,
          xd,
          xe;
      if (str === 'Infinity' || str === 'NaN') {
        if (!+str)
          x.s = NaN;
        x.e = NaN;
        x.d = null;
        return x;
      }
      if (isHex.test(str)) {
        base = 16;
        str = str.toLowerCase();
      } else if (isBinary.test(str)) {
        base = 2;
      } else if (isOctal.test(str)) {
        base = 8;
      } else {
        throw Error(invalidArgument + str);
      }
      i = str.search(/p/i);
      if (i > 0) {
        p = +str.slice(i + 1);
        str = str.substring(2, i);
      } else {
        str = str.slice(2);
      }
      i = str.indexOf('.');
      isFloat = i >= 0;
      Ctor = x.constructor;
      if (isFloat) {
        str = str.replace('.', '');
        len = str.length;
        i = len - i;
        divisor = intPow(Ctor, new Ctor(base), i, i * 2);
      }
      xd = convertBase(str, base, BASE);
      xe = xd.length - 1;
      for (i = xe; xd[i] === 0; --i)
        xd.pop();
      if (i < 0)
        return new Ctor(x.s * 0);
      x.e = getBase10Exponent(xd, xe);
      x.d = xd;
      external = false;
      if (isFloat)
        x = divide(x, divisor, len * 4);
      if (p)
        x = x.times(Math.abs(p) < 54 ? Math.pow(2, p) : Decimal.pow(2, p));
      external = true;
      return x;
    }
    function sine(Ctor, x) {
      var k,
          len = x.d.length;
      if (len < 3)
        return taylorSeries(Ctor, 2, x, x);
      k = 1.4 * Math.sqrt(len);
      k = k > 16 ? 16 : k | 0;
      x = x.times(Math.pow(5, -k));
      x = taylorSeries(Ctor, 2, x, x);
      var sin2_x,
          d5 = new Ctor(5),
          d16 = new Ctor(16),
          d20 = new Ctor(20);
      for (; k--; ) {
        sin2_x = x.times(x);
        x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
      }
      return x;
    }
    function taylorSeries(Ctor, n, x, y, isHyperbolic) {
      var j,
          t,
          u,
          x2,
          i = 1,
          pr = Ctor.precision,
          k = Math.ceil(pr / LOG_BASE);
      external = false;
      x2 = x.times(x);
      u = new Ctor(y);
      for (; ; ) {
        t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);
        u = isHyperbolic ? y.plus(t) : y.minus(t);
        y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);
        t = u.plus(y);
        if (t.d[k] !== void 0) {
          for (j = k; t.d[j] === u.d[j] && j--; )
            ;
          if (j == -1)
            break;
        }
        j = u;
        u = y;
        y = t;
        t = j;
        i++;
      }
      external = true;
      t.d.length = k + 1;
      return t;
    }
    function toLessThanHalfPi(Ctor, x) {
      var t,
          isNeg = x.s < 0,
          pi = getPi(Ctor, Ctor.precision, 1),
          halfPi = pi.times(0.5);
      x = x.abs();
      if (x.lte(halfPi)) {
        quadrant = isNeg ? 4 : 1;
        return x;
      }
      t = x.divToInt(pi);
      if (t.isZero()) {
        quadrant = isNeg ? 3 : 2;
      } else {
        x = x.minus(t.times(pi));
        if (x.lte(halfPi)) {
          quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);
          return x;
        }
        quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);
      }
      return x.minus(pi).abs();
    }
    function toStringBinary(x, baseOut, sd, rm) {
      var base,
          e,
          i,
          k,
          len,
          roundUp,
          str,
          xd,
          y,
          Ctor = x.constructor,
          isExp = sd !== void 0;
      if (isExp) {
        checkInt32(sd, 1, MAX_DIGITS);
        if (rm === void 0)
          rm = Ctor.rounding;
        else
          checkInt32(rm, 0, 8);
      } else {
        sd = Ctor.precision;
        rm = Ctor.rounding;
      }
      if (!x.isFinite()) {
        str = nonFiniteToString(x);
      } else {
        str = finiteToString(x);
        i = str.indexOf('.');
        if (isExp) {
          base = 2;
          if (baseOut == 16) {
            sd = sd * 4 - 3;
          } else if (baseOut == 8) {
            sd = sd * 3 - 2;
          }
        } else {
          base = baseOut;
        }
        if (i >= 0) {
          str = str.replace('.', '');
          y = new Ctor(1);
          y.e = str.length - i;
          y.d = convertBase(finiteToString(y), 10, base);
          y.e = y.d.length;
        }
        xd = convertBase(str, 10, base);
        e = len = xd.length;
        for (; xd[--len] == 0; )
          xd.pop();
        if (!xd[0]) {
          str = isExp ? '0p+0' : '0';
        } else {
          if (i < 0) {
            e--;
          } else {
            x = new Ctor(x);
            x.d = xd;
            x.e = e;
            x = divide(x, y, sd, rm, 0, base);
            xd = x.d;
            e = x.e;
            roundUp = inexact;
          }
          i = xd[sd];
          k = base / 2;
          roundUp = roundUp || xd[sd + 1] !== void 0;
          roundUp = rm < 4 ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2)) : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 || rm === (x.s < 0 ? 8 : 7));
          xd.length = sd;
          if (roundUp) {
            for (; ++xd[--sd] > base - 1; ) {
              xd[sd] = 0;
              if (!sd) {
                ++e;
                xd.unshift(1);
              }
            }
          }
          for (len = xd.length; !xd[len - 1]; --len)
            ;
          for (i = 0, str = ''; i < len; i++)
            str += NUMERALS.charAt(xd[i]);
          if (isExp) {
            if (len > 1) {
              if (baseOut == 16 || baseOut == 8) {
                i = baseOut == 16 ? 4 : 3;
                for (--len; len % i; len++)
                  str += '0';
                xd = convertBase(str, base, baseOut);
                for (len = xd.length; !xd[len - 1]; --len)
                  ;
                for (i = 1, str = '1.'; i < len; i++)
                  str += NUMERALS.charAt(xd[i]);
              } else {
                str = str.charAt(0) + '.' + str.slice(1);
              }
            }
            str = str + (e < 0 ? 'p' : 'p+') + e;
          } else if (e < 0) {
            for (; ++e; )
              str = '0' + str;
            str = '0.' + str;
          } else {
            if (++e > len)
              for (e -= len; e--; )
                str += '0';
            else if (e < len)
              str = str.slice(0, e) + '.' + str.slice(e);
          }
        }
        str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;
      }
      return x.s < 0 ? '-' + str : str;
    }
    function truncate(arr, len) {
      if (arr.length > len) {
        arr.length = len;
        return true;
      }
    }
    function abs(x) {
      return new this(x).abs();
    }
    function acos(x) {
      return new this(x).acos();
    }
    function acosh(x) {
      return new this(x).acosh();
    }
    function add(x, y) {
      return new this(x).plus(y);
    }
    function asin(x) {
      return new this(x).asin();
    }
    function asinh(x) {
      return new this(x).asinh();
    }
    function atan(x) {
      return new this(x).atan();
    }
    function atanh(x) {
      return new this(x).atanh();
    }
    function atan2(y, x) {
      y = new this(y);
      x = new this(x);
      var r,
          pr = this.precision,
          rm = this.rounding,
          wpr = pr + 4;
      if (!y.s || !x.s) {
        r = new this(NaN);
      } else if (!y.d && !x.d) {
        r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
        r.s = y.s;
      } else if (!x.d || y.isZero()) {
        r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
        r.s = y.s;
      } else if (!y.d || x.isZero()) {
        r = getPi(this, wpr, 1).times(0.5);
        r.s = y.s;
      } else if (x.s < 0) {
        this.precision = wpr;
        this.rounding = 1;
        r = this.atan(divide(y, x, wpr, 1));
        x = getPi(this, wpr, 1);
        this.precision = pr;
        this.rounding = rm;
        r = y.s < 0 ? r.minus(x) : r.plus(x);
      } else {
        r = this.atan(divide(y, x, wpr, 1));
      }
      return r;
    }
    function cbrt(x) {
      return new this(x).cbrt();
    }
    function ceil(x) {
      return finalise(x = new this(x), x.e + 1, 2);
    }
    function config(obj) {
      if (!obj || typeof obj !== 'object')
        throw Error(decimalError + 'Object expected');
      var i,
          p,
          v,
          ps = ['precision', 1, MAX_DIGITS, 'rounding', 0, 8, 'toExpNeg', -EXP_LIMIT, 0, 'toExpPos', 0, EXP_LIMIT, 'maxE', 0, EXP_LIMIT, 'minE', -EXP_LIMIT, 0, 'modulo', 0, 9];
      for (i = 0; i < ps.length; i += 3) {
        if ((v = obj[p = ps[i]]) !== void 0) {
          if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2])
            this[p] = v;
          else
            throw Error(invalidArgument + p + ': ' + v);
        }
      }
      if (obj.hasOwnProperty(p = 'crypto')) {
        if ((v = obj[p]) === void 0) {
          this[p] = v;
        } else if (v === true || v === false || v === 0 || v === 1) {
          this[p] = !!(v && cryptoObject && (cryptoObject.getRandomValues || cryptoObject.randomBytes));
        } else {
          throw Error(invalidArgument + p + ': ' + v);
        }
      }
      return this;
    }
    function cos(x) {
      return new this(x).cos();
    }
    function cosh(x) {
      return new this(x).cosh();
    }
    function clone(obj) {
      var i,
          p,
          ps;
      function Decimal(v) {
        var e,
            i,
            t,
            x = this;
        if (!(x instanceof Decimal))
          return new Decimal(v);
        x.constructor = Decimal;
        if (v instanceof Decimal) {
          x.s = v.s;
          x.e = v.e;
          x.d = (v = v.d) ? v.slice() : v;
          return;
        }
        t = typeof v;
        if (t === 'number') {
          if (v === 0) {
            x.s = 1 / v < 0 ? -1 : 1;
            x.e = 0;
            x.d = [0];
            return;
          }
          if (v < 0) {
            v = -v;
            x.s = -1;
          } else {
            x.s = 1;
          }
          if (v === ~~v && v < 1e7) {
            for (e = 0, i = v; i >= 10; i /= 10)
              e++;
            x.e = e;
            x.d = [v];
            return;
          } else if (v * 0 !== 0) {
            if (!v)
              x.s = NaN;
            x.e = NaN;
            x.d = null;
            return;
          }
          return parseDecimal(x, v.toString());
        } else if (t !== 'string') {
          throw Error(invalidArgument + v);
        }
        if (v.charCodeAt(0) === 45) {
          v = v.slice(1);
          x.s = -1;
        } else {
          x.s = 1;
        }
        return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
      }
      Decimal.prototype = P;
      Decimal.ROUND_UP = 0;
      Decimal.ROUND_DOWN = 1;
      Decimal.ROUND_CEIL = 2;
      Decimal.ROUND_FLOOR = 3;
      Decimal.ROUND_HALF_UP = 4;
      Decimal.ROUND_HALF_DOWN = 5;
      Decimal.ROUND_HALF_EVEN = 6;
      Decimal.ROUND_HALF_CEIL = 7;
      Decimal.ROUND_HALF_FLOOR = 8;
      Decimal.EUCLID = 9;
      Decimal.config = config;
      Decimal.clone = clone;
      Decimal.abs = abs;
      Decimal.acos = acos;
      Decimal.acosh = acosh;
      Decimal.add = add;
      Decimal.asin = asin;
      Decimal.asinh = asinh;
      Decimal.atan = atan;
      Decimal.atanh = atanh;
      Decimal.atan2 = atan2;
      Decimal.cbrt = cbrt;
      Decimal.ceil = ceil;
      Decimal.cos = cos;
      Decimal.cosh = cosh;
      Decimal.div = div;
      Decimal.exp = exp;
      Decimal.floor = floor;
      Decimal.fromJSON = fromJSON;
      Decimal.hypot = hypot;
      Decimal.ln = ln;
      Decimal.log = log;
      Decimal.log10 = log10;
      Decimal.log2 = log2;
      Decimal.max = max;
      Decimal.min = min;
      Decimal.mod = mod;
      Decimal.mul = mul;
      Decimal.pow = pow;
      Decimal.random = random;
      Decimal.round = round;
      Decimal.sign = sign;
      Decimal.sin = sin;
      Decimal.sinh = sinh;
      Decimal.sqrt = sqrt;
      Decimal.sub = sub;
      Decimal.tan = tan;
      Decimal.tanh = tanh;
      Decimal.trunc = trunc;
      if (obj === void 0)
        obj = {};
      if (obj) {
        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];
        for (i = 0; i < ps.length; )
          if (!obj.hasOwnProperty(p = ps[i++]))
            obj[p] = this[p];
      }
      Decimal.config(obj);
      return Decimal;
    }
    function div(x, y) {
      return new this(x).div(y);
    }
    function exp(x) {
      return new this(x).exp();
    }
    function floor(x) {
      return finalise(x = new this(x), x.e + 1, 3);
    }
    function fromJSON(str) {
      var e,
          isNeg,
          k,
          n;
      if (typeof str !== 'string' || !str)
        throw Error(invalidArgument + str);
      k = str.length;
      n = NUMERALS.indexOf(str.charAt(0));
      if (k === 1) {
        return new this(n > 81 ? [-1 / 0, 1 / 0, 0 / 0][n - 82] : n > 40 ? -(n - 41) : n);
      } else if (n & 64) {
        isNeg = n & 16;
        e = isNeg ? (n & 7) - 3 : (n & 15) - 7;
        k = 1;
      } else if (k === 2) {
        n = n * 88 + NUMERALS.indexOf(str.charAt(1));
        return new this(n >= 2816 ? -(n - 2816) - 41 : n + 41);
      } else {
        isNeg = n & 32;
        if (n & 31) {
          e = n & 15;
          k = e + 1;
          if (e === 1) {
            e = NUMERALS.indexOf(str.charAt(1));
          } else if (e === 2) {
            e = NUMERALS.indexOf(str.charAt(1)) * 88 + NUMERALS.indexOf(str.charAt(2));
          } else {
            e = +convertBase(str.slice(1, k), 88, 10).join('');
          }
          if (n & 16)
            e = -e;
        } else {
          str = convertBase(str.slice(1), 88, 10).join('');
          return new this(isNeg ? '-' + str : str);
        }
      }
      str = convertBase(str.slice(k), 88, 10).join('');
      e = e - str.length + 1;
      str = str + 'e' + e;
      return new this(isNeg ? '-' + str : str);
    }
    function hypot() {
      var i,
          n,
          t = new this(0);
      external = false;
      for (i = 0; i < arguments.length; ) {
        n = new this(arguments[i++]);
        if (!n.d) {
          if (n.s) {
            external = true;
            return new this(1 / 0);
          }
          t = n;
        } else if (t.d) {
          t = t.plus(n.times(n));
        }
      }
      external = true;
      return t.sqrt();
    }
    function ln(x) {
      return new this(x).ln();
    }
    function log(x, y) {
      return new this(x).log(y);
    }
    function log2(x) {
      return new this(x).log(2);
    }
    function log10(x) {
      return new this(x).log(10);
    }
    function max() {
      return maxOrMin(this, arguments, 'lt');
    }
    function min() {
      return maxOrMin(this, arguments, 'gt');
    }
    function mod(x, y) {
      return new this(x).mod(y);
    }
    function mul(x, y) {
      return new this(x).mul(y);
    }
    function pow(x, y) {
      return new this(x).pow(y);
    }
    function random(sd) {
      var d,
          e,
          k,
          n,
          i = 0,
          r = new this(1),
          rd = [];
      if (sd === void 0)
        sd = this.precision;
      else
        checkInt32(sd, 1, MAX_DIGITS);
      k = Math.ceil(sd / LOG_BASE);
      if (this.crypto === false) {
        for (; i < k; )
          rd[i++] = Math.random() * 1e7 | 0;
      } else if (cryptoObject && cryptoObject.getRandomValues) {
        d = cryptoObject.getRandomValues(new Uint32Array(k));
        for (; i < k; ) {
          n = d[i];
          if (n >= 4.29e9) {
            d[i] = cryptoObject.getRandomValues(new Uint32Array(1))[0];
          } else {
            rd[i++] = n % 1e7;
          }
        }
      } else if (cryptoObject && cryptoObject.randomBytes) {
        d = cryptoObject.randomBytes(k *= 4);
        for (; i < k; ) {
          n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);
          if (n >= 2.14e9) {
            cryptoObject.randomBytes(4).copy(d, i);
          } else {
            rd.push(n % 1e7);
            i += 4;
          }
        }
        i = k / 4;
      } else if (this.crypto) {
        throw Error(decimalError + 'crypto unavailable');
      } else {
        for (; i < k; )
          rd[i++] = Math.random() * 1e7 | 0;
      }
      k = rd[--i];
      sd %= LOG_BASE;
      if (k && sd) {
        n = mathpow(10, LOG_BASE - sd);
        rd[i] = (k / n | 0) * n;
      }
      for (; rd[i] === 0; i--)
        rd.pop();
      if (i < 0) {
        e = 0;
        rd = [0];
      } else {
        e = -1;
        for (; rd[0] === 0; e -= LOG_BASE)
          rd.shift();
        for (k = 1, n = rd[0]; n >= 10; n /= 10)
          k++;
        if (k < LOG_BASE)
          e -= LOG_BASE - k;
      }
      r.e = e;
      r.d = rd;
      return r;
    }
    function round(x) {
      return finalise(x = new this(x), x.e + 1, this.rounding);
    }
    function sign(x) {
      x = new this(x);
      return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;
    }
    function sin(x) {
      return new this(x).sin();
    }
    function sinh(x) {
      return new this(x).sinh();
    }
    function sqrt(x) {
      return new this(x).sqrt();
    }
    function sub(x, y) {
      return new this(x).sub(y);
    }
    function tan(x) {
      return new this(x).tan();
    }
    function tanh(x) {
      return new this(x).tanh();
    }
    function trunc(x) {
      return finalise(x = new this(x), x.e + 1, 1);
    }
    Decimal = clone(Decimal);
    LN10 = new Decimal(LN10);
    PI = new Decimal(PI);
    if (typeof define == 'function' && define.amd) {
      define(function() {
        return Decimal;
      });
    } else if (typeof module != 'undefined' && module.exports) {
      module.exports = Decimal;
      if (!cryptoObject) {
        try {
          cryptoObject = $__require('cry' + 'pto');
        } catch (e) {}
      }
    } else {
      if (!globalScope) {
        globalScope = typeof self != 'undefined' && self && self.self == self ? self : Function('return this')();
      }
      noConflict = globalScope.Decimal;
      Decimal.noConflict = function() {
        globalScope.Decimal = noConflict;
        return Decimal;
      };
      globalScope.Decimal = Decimal;
    }
  })(this);
  return module.exports;
});

$__System.register("1", ["28", "9f", "288", "28a", "289"], function($__export) {
  "use strict";
  var React,
      ReactDOM,
      mathjs,
      Decimal,
      qalcData,
      DimensionMap,
      UnitNumber,
      Dimension,
      __awaiter,
      parser,
      loadUnits,
      unitMap,
      prefixMap,
      caseInsensitives,
      functions,
      QalcGui;
  function unmathjs_hack_unicode(str) {
    if (str.startsWith("_unicode_"))
      return decodeURIComponent(str.substr(9).replace(/_/g, "%"));
    return str;
  }
  function setUnit(name, val) {
    name = normalizeUnitName(name);
    if (unitMap.has(name))
      throw Error("duplicate: " + name);
    unitMap.set(name, val);
  }
  function normalizeUnitName(name) {
    return name;
  }
  function getUnit(name) {
    if (!unitMap.has(normalizeUnitName(name))) {
      for (const prefix of prefixMap.keys()) {
        if (name.startsWith(prefix)) {
          return prefixMap.get(prefix).mul(getUnit(name.substr(prefix.length))).withIdentifier(name);
        }
      }
      throw Error("unknown unit: " + name);
    }
    return unitMap.get(normalizeUnitName(name));
  }
  function evaluate(node) {
    switch (node.type) {
      case 'OperatorNode':
        {
          const {op,
            args} = node;
          const stuff = args.map((a) => evaluate(a));
          if (args.length !== 2) {
            if (args.length === 1 && op === '-') {
              stuff.unshift(new UnitNumber(0));
            } else {
              throw Error("weird op " + op);
            }
          }
          const funs = {
            '*': 'mul',
            '/': 'div',
            '^': 'pow',
            '+': 'plus',
            '-': 'minus',
            'to': 'convertTo'
          };
          if (op in funs && funs[op] in stuff[0])
            return stuff[0][funs[op]](stuff[1]);
          else
            throw Error("unknown op " + op + " | " + stuff);
        }
      case 'ConstantNode':
        {
          const val = node.value;
          if (node.valueType !== "number")
            throw Error("wat is " + node.valueType);
          return new UnitNumber(parseFloat(val));
        }
      case 'SymbolNode':
        {
          const name = unmathjs_hack_unicode(node.name);
          if (!isNaN(parseFloat(name)) || name == "NaN")
            return new UnitNumber(parseFloat(name));
          return getUnit(name);
        }
      case 'AssignmentNode':
        {
          const {index,
            object,
            value} = node;
          if (index != null)
            throw Error("unsupported1");
          if (object.type !== 'SymbolNode')
            throw Error('unsupported2');
          const name = object.name;
          let unit;
          if (name.endsWith("_")) {
            const prefixName = name.substr(0, name.length - 1);
            unit = evaluate(value);
            prefixMap.set(prefixName, unit);
          } else {
            unit = evaluate(value).withIdentifier(name);
            setUnit(name, unit);
          }
          return unit;
        }
      case 'ParenthesisNode':
        {
          return evaluate(node.content);
        }
      case 'FunctionNode':
        {
          const {fn,
            args} = node;
          if (fn.type !== 'SymbolNode')
            throw Error("can't call " + fn.type);
          if (!functions.has(fn.name))
            throw Error('unknown function ' + fn.name);
          const fnFunction = functions.get(fn.name);
          if (args.length !== 1)
            throw Error('function must have 1 argument');
          const arg = evaluate(args[0]);
          return fnFunction(arg);
        }
      default:
        throw Error("dont know about " + node.type);
    }
  }
  function parseEvaluate(str) {
    str = str.replace(/≈/g, function(x) {
      return "=";
    }).replace(/(\W)in(\W)/g, function(all, before, after) {
      return before + "inch" + after;
    }).replace(/c:([^ ]+)/g, function(a, variable) {
      caseInsensitives[variable] = true;
      return variable;
    });
    const commentStart = str.indexOf("#");
    if (commentStart >= 0)
      str = str.substr(0, commentStart);
    str = str.trim();
    if (str[str.length - 1] === ".") {
      const name = unmathjs_hack_unicode(str.substr(0, str.length - 1));
      setUnit(name, UnitNumber.createBaseUnit(name));
    } else {
      return evaluate(mathjs.parse(str));
    }
  }
  function qalculate(input) {
    return __awaiter(this, void 0, void 0, function*() {
      yield loadUnits;
      try {
        return parseEvaluate(input).toString();
      } catch (e) {
        return e + "";
      }
    });
  }
  return {
    setters: [function($__m) {
      React = $__m;
    }, function($__m) {
      ReactDOM = $__m;
    }, function($__m) {
      mathjs = $__m;
    }, function($__m) {
      Decimal = $__m.default;
    }, function($__m) {
      qalcData = $__m.default;
    }],
    execute: function() {
      DimensionMap = class DimensionMap extends Map {
        toString() {
          return [...this].map(([id, exp]) => `${Dimension.get(id).name}^${exp}`).join(" ");
        }
        static join(...list) {
          const map = new DimensionMap();
          for (const {dimensions,
            factor} of list) {
            for (const [dimension, exponent] of dimensions) {
              const newFactor = (map.get(dimension) || 0) + exponent * factor;
              if (newFactor === 0)
                map.delete(dimension);
              else
                map.set(dimension, newFactor);
            }
          }
          return map;
        }
      };
      UnitNumber = class UnitNumber {
        constructor(value, dimensions = new DimensionMap(), id = undefined) {
          this.value = Decimal(value);
          this.dimensions = dimensions;
          this.id = id;
        }
        mul(other) {
          return new UnitNumber(this.value.times(other.value), DimensionMap.join({
            dimensions: this.dimensions,
            factor: 1
          }, {
            dimensions: other.dimensions,
            factor: 1
          }));
        }
        div(other) {
          return new UnitNumber(this.value.div(other.value), DimensionMap.join({
            dimensions: this.dimensions,
            factor: 1
          }, {
            dimensions: other.dimensions,
            factor: -1
          }));
        }
        plus(other, factor = 1) {
          const dimensionDifference = this.div(other).dimensions;
          if (dimensionDifference.size > 0)
            throw Error("Dimensions don't match: " + dimensionDifference);
          return new UnitNumber(this.value.plus(other.value.times(factor)), this.dimensions);
        }
        minus(other) {
          return this.plus(other, -1);
        }
        withIdentifier(id) {
          return new UnitNumber(this.value, this.dimensions, id);
        }
        toString() {
          if (this.id !== undefined)
            return this.id;
          else
            return `${this.value} ${this.dimensions}`;
        }
        pow(factor) {
          if (typeof factor === 'number' || factor instanceof Decimal)
            return new UnitNumber(this.value.pow(factor), DimensionMap.join({
              dimensions: this.dimensions,
              factor: typeof factor === 'number' ? factor : factor.toNumber()
            }));
          else if (factor.dimensions.size > 0)
            throw Error("power must be dimensionless");
          else
            return this.pow(factor.value);
        }
        convertTo(unit) {
          const d = this.div(unit);
          if (d.dimensions.size > 0)
            throw Error("Dimensions don't match: " + d.dimensions);
          return d;
        }
        static createBaseUnit(dimensionName) {
          const dimension = new Dimension(dimensionName);
          const map = new DimensionMap();
          map.set(dimension.id, 1);
          return new UnitNumber(1, map);
        }
      };
      Dimension = class Dimension {
        constructor(name) {
          this.id = Dimension.dimensions.size;
          this.name = name;
          Dimension.dimensions.set(this.id, this);
        }
        static get(id) {
          return Dimension.dimensions.get(id);
        }
      };
      Dimension.dimensions = new Map();
      __awaiter = (this && this.__awaiter) || function(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator.throw(value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : new P(function(resolve) {
              resolve(result.value);
            }).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments)).next());
        });
      };
      parser = mathjs.parser();
      loadUnits = Promise.resolve(qalcData).then((t) => {
        let lines = t.split("\n").map((line, index) => ({
          line,
          index
        })),
            linesNew = [];
        let errors = [];
        let iteration = 0;
        while (true) {
          for (const line of lines) {
            try {
              parseEvaluate(line.line);
            } catch (error) {
              linesNew.push(line);
              errors[line.index] = errors[line.index] || [];
              errors[line.index].push({
                line,
                error
              });
            }
          }
          if (linesNew.length === lines.length) {
            console.error("Could not resolve all errors, remaining: ");
            console.log(lines);
            break;
          }
          lines = linesNew;
          linesNew = [];
          iteration++;
        }
        errors.forEach((l, i) => {
          if (l.length >= iteration)
            console.warn(i, l);
        });
      });
      unitMap = new Map();
      prefixMap = new Map();
      caseInsensitives = {};
      functions = new Map([["sqrt", (num) => num.pow(0.5)]]);
      if (typeof window !== "undefined")
        window.qalc = {
          unitMap,
          qalculate,
          parseEvaluate,
          evaluate
        };
      (function(QalcGui) {
        class GuiLineElement {
          constructor(input, output) {
            this.input = input;
            this.output = output;
            this.id = GuiLineElement.idCounter++;
          }
        }
        GuiLineElement.idCounter = 0;
        class GUILine extends React.Component {
          render() {
            return React.createElement("div", {className: "gui-line"}, React.createElement("hr", null), React.createElement("p", null, "> ", this.props.line.input), React.createElement("pre", null, React.createElement("code", null, this.props.line.output)));
          }
        }
        QalcGui.GUILine = GUILine;
        let guiInst;
        const presetLines = `
	5600 mA h * 11.7 V to W h
	100W * 10 days * 0.25€/kWh
	7Mbit/s * 2h to Gbyte
	32bit/(0.2bit/s) to s
	88 mph to km/s|88 * mph = 0.03933952(km / s)
	sqrt(2 * (6 million tons * 500000 MJ/kg) / (100000 pounds))/c to 1|sqrt((2 * ((6 * million * tonne * 500000 * megajoule) / kilogram)) / (100000 * pound)) / speed_of_light = approx. 1.2131711
	
	`;
        function loadPresetLines() {
          presetLines.split('\n').map((line) => line.trim()).filter((line) => line.length > 0).map((line) => line.split("|")[0]).map((input) => qalculate(input).then((output) => guiInst.addLine(new GuiLineElement(input, output))));
        }
        class GUI extends React.Component {
          constructor(props) {
            super(props);
            guiInst = this;
            this.state = {lines: []};
            loadPresetLines();
          }
          addLine(line) {
            const lines = this.state.lines.slice();
            lines.unshift(line);
            this.setState({lines: lines});
          }
          keyPress(evt) {
            if (evt.charCode == 13) {
              const target = evt.target;
              const input = target.value.trim();
              if (input.length > 0)
                qalculate(input).then((output) => this.addLine(new GuiLineElement(input, output)));
              target.value = "";
            }
          }
          render() {
            return React.createElement("div", null, "> ", React.createElement("input", {onKeyPress: this.keyPress.bind(this)}), this.state.lines.map((line) => React.createElement(GUILine, {
              key: line.id,
              line: line
            })));
          }
        }
        QalcGui.GUI = GUI;
      })(QalcGui || (QalcGui = {}));
      ReactDOM.render(React.createElement("div", {className: "container"}, React.createElement("div", {className: "page-header"}, React.createElement("h1", null, "Qalc")), React.createElement(QalcGui.GUI, null)), document.getElementById("root"));
    }
  };
});

})
(function(factory) {
  if (typeof define == 'function' && define.amd)
    define([], factory);
  else if (typeof module == 'object' && module.exports && typeof require == 'function')
    module.exports = factory();
  else
    factory();
});
//# sourceMappingURL=bundle.js.map